/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-02-12 07:35:31.739878
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.1157)*x3);
x13=((0.0922)*x6);
x14=((0.1157)*x1);
x15=((0.0922)*x5);
x16=((0.612)*x1);
x17=((1.0)*x6);
x18=((1.0)*x11);
x19=((1.0)*x9);
x20=((0.5723)*x1);
x21=((0.5723)*x3);
x22=((1.0)*x3);
x23=((1.0)*x10);
x24=((1.0)*x5);
x25=(x0*x2);
x26=(x1*x4);
x27=(x10*x9);
x28=(x10*x4);
x29=(x2*x3);
x30=(x10*x2);
x31=(x0*x4);
x32=((1.0)*x1*x2);
x33=(x22*x31);
x34=(x22*x28);
x35=(x26+x29);
x36=(x32+(((-1.0)*x22*x4)));
x37=(x35*x5);
x38=(x36*x6);
x39=((((-1.0)*x33))+((x1*x25)));
x40=((((-1.0)*x34))+((x1*x30)));
x41=((((-1.0)*x0*x26))+(((-1.0)*x22*x25)));
x42=((((-1.0)*x22*x30))+(((-1.0)*x23*x26)));
x43=(x40*x5);
x44=(x39*x5);
x45=(x42*x6);
x46=(((x36*x5))+((x6*(((((-1.0)*x26))+(((-1.0)*x2*x22)))))));
x47=(((x41*x6))+x44);
x48=(x45+x43);
x49=(((x41*x5))+((x6*(((((-1.0)*x1*x25))+x33)))));
x50=(((x6*(((((-1.0)*x1*x2*x23))+x34))))+((x42*x5)));
eerot[0]=(((x49*x8))+((x7*((((x47*x9))+((x10*x11)))))));
eerot[1]=(((x8*(((((-1.0)*x19*x47))+(((-1.0)*x10*x18))))))+((x49*x7)));
eerot[2]=(x27+((x11*(((((-1.0)*x17*x41))+(((-1.0)*x24*x39)))))));
eetrans[0]=((((-1.0)*x0*x16))+((x21*x31))+((x11*(((((-1.0)*x13*x41))+(((-1.0)*x15*x39))))))+((x5*((((x14*x31))+((x12*x25))))))+(((0.0922)*x27))+((x6*(((((-1.0)*x12*x31))+((x14*x25))))))+(((0.163941)*x10))+(((-1.0)*x20*x25)));
eerot[3]=(((x7*(((((-1.0)*x0*x11))+((x48*x9))))))+((x50*x8)));
eerot[4]=(((x50*x7))+((x8*((((x0*x18))+(((-1.0)*x19*x48)))))));
eerot[5]=((((-1.0)*x0*x19))+((x11*(((((-1.0)*x17*x42))+(((-1.0)*x24*x40)))))));
eetrans[1]=((((-0.0922)*x0*x9))+((x11*(((((-1.0)*x15*x40))+(((-1.0)*x13*x42))))))+((x6*(((((-1.0)*x12*x28))+((x14*x30))))))+((x21*x28))+(((-1.0)*x20*x30))+(((-0.163941)*x0))+(((-1.0)*x10*x16))+((x5*((((x14*x28))+((x12*x30)))))));
eerot[6]=(((x7*x9*((x38+x37))))+((x46*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x37))+(((-1.0)*x38))))))+((x46*x7)));
eerot[8]=(x11*(((((-1.0)*x17*x36))+(((-1.0)*x24*x35)))));
IkReal x51=((1.0)*x2);
eetrans[2]=((0.1273)+((x6*((((x14*x4))+((x12*x2))))))+(((-0.612)*x3))+((x11*(((((-1.0)*x13*x36))+(((-1.0)*x15*x35))))))+((x5*(((((-1.0)*x14*x51))+((x12*x4))))))+(((-1.0)*x21*x51))+(((-1.0)*x20*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0922)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0922)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1273)+(((-0.0922)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.2314)*npx);
IkReal x56=((0.2314)*npy);
IkReal x57=((0.1157)*r22);
IkReal x58=((0.1157)*r21);
IkReal x59=((-0.1157)*r20);
IkReal x60=((-1.0)*r20);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-0.1157)*r21);
IkReal x63=((-1.0)*r21);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
IkReal x66=((-1.0)*r22);
IkReal x67=((-1.0)*npz);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x60;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x61;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x60;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x66;
matrixinvcoeffs[76]=x57;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x57;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x62;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x58;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x60;
matrixinvcoeffs[133]=x65;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1157)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x60;
matrixinvcoeffs[151]=x65;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x59;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x66;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x57;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x66;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1157)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x63;
matrixinvcoeffs[204]=x58;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x58;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x65;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x59;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x60;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x59;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x61;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=pz*pz;
IkReal x69=pp*pp;
IkReal x70=((0.2314)*pz);
IkReal x71=(pp*r21);
IkReal x72=((0.2314)*rxp0_2);
IkReal x73=((0.01338649)*r22);
IkReal x74=(gclwh9_0*pz);
IkReal x75=(gclwh4_3*r22);
IkReal x76=(pp*r20);
IkReal x77=((0.327882)*gclwh14_14);
IkReal x78=(npy*pz);
IkReal x79=((0.01338649)*r21);
IkReal x80=((0.26486044)*rxp0_2);
IkReal x81=((0.00219459455709)*r21);
IkReal x82=(npz*pz);
IkReal x83=(pp*r22);
IkReal x84=(gclwh15_1*r20);
IkReal x85=(gclwh14_8*r20);
IkReal x86=(gclwh13_9*r21);
IkReal x87=((0.27404702)*rxp2_2);
IkReal x88=((0.02677298)*r22);
IkReal x89=((2.0)*gclwh11_10);
IkReal x90=((0.26486044)*rxp2_2);
IkReal x91=(gclwh14_2*pz);
IkReal x92=(gclwh11_0*pz);
IkReal x93=((1.0)*pz);
IkReal x94=(gclwh5_15*rxp2_2);
IkReal x95=((0.00219459455709)*r20);
IkReal x96=((2.0)*gclwh4_11);
IkReal x97=((0.000201684224787892)*r20);
IkReal x98=((4.7372)*npx);
IkReal x99=(gclwh13_1*r21);
IkReal x100=((0.2314)*rxp2_2);
IkReal x101=(gclwh11_13*r22);
IkReal x102=((0.01338649)*r20);
IkReal x103=(npx*pz);
IkReal x104=((0.327882)*gclwh15_15);
IkReal x105=((0.327675509152703)*rxp0_2);
IkReal x106=((0.9256)*rxp2_2);
IkReal x107=((0.0379359474)*rxp1_2);
IkReal x108=(gclwh4_14*rxp2_2);
IkReal x109=(gclwh13_0*rxp1_2);
IkReal x110=(gclwh12_8*r21);
IkReal x111=(gclwh6_2*r21);
IkReal x112=(gclwh14_11*rxp0_2);
IkReal x113=((0.1517437896)*rxp1_2);
IkReal x114=((0.031707240214)*r22);
IkReal x115=((0.015322176454)*r22);
IkReal x116=((0.015322176454)*r20);
IkReal x117=((0.001062887306)*r22);
IkReal x118=((2.0)*gclwh9_10);
IkReal x119=(gclwh12_3*rxp1_2);
IkReal x120=((0.2832336)*rxp2_2);
IkReal x121=((0.02677298)*r20);
IkReal x122=(gclwh6_12*r21);
IkReal x123=(gclwh12_3*r21);
IkReal x124=(gclwh15_9*r20);
IkReal x125=((0.05354596)*r20);
IkReal x126=((0.02677298)*r21);
IkReal x127=((0.0379359474)*rxp0_2);
IkReal x128=(gclwh5_0*rxp2_2);
IkReal x129=((0.00918658)*rxp2_2);
IkReal x130=(gclwh4_3*rxp2_2);
IkReal x131=((0.031707240214)*r21);
IkReal x132=((2.0)*gclwh10_11);
IkReal x133=((4.0)*gclwh8_11);
IkReal x134=((2.0)*pp);
IkReal x135=((4.0)*gclwh11_10);
IkReal x136=(gclwh13_9*rxp1_2);
IkReal x137=((0.00918658)*rxp0_2);
IkReal x138=((0.015853620107)*r22);
IkReal x139=(gclwh7_13*r21);
IkReal x140=(gclwh1_2*pz);
IkReal x141=((2.0)*gclwh7_10);
IkReal x142=((0.030644352908)*r20);
IkReal x143=((0.2314)*rxp1_2);
IkReal x144=(gclwh5_1*rxp2_2);
IkReal x145=(gclwh12_2*rxp1_2);
IkReal x146=(gclwh15_0*pz);
IkReal x147=(gclwh15_9*rxp0_2);
IkReal x148=(gclwh4_2*rxp2_2);
IkReal x149=(gclwh5_9*r22);
IkReal x150=(gclwh12_8*rxp1_2);
IkReal x151=((0.4628)*rxp1_2);
IkReal x152=(gclwh7_13*rxp1_2);
IkReal x153=((0.26486044)*rxp1_2);
IkReal x154=(gclwh6_2*rxp1_2);
IkReal x155=((0.05354596)*r21);
IkReal x156=(gclwh8_2*pz);
IkReal x157=((0.05354596)*r22);
IkReal x158=((4.0)*gclwh9_10);
IkReal x159=(gclwh5_0*pz);
IkReal x160=((0.54809404)*rxp0_2);
IkReal x161=(gclwh4_2*pz);
IkReal x162=((0.015322176454)*r21);
IkReal x163=(gclwh9_0*r20);
IkReal x164=(gclwh15_15*rxp0_2);
IkReal x165=((4.0)*gclwh7_10);
IkReal x166=(gclwh10_2*pz);
IkReal x167=((0.327882)*gclwh12_14);
IkReal x168=(gclwh10_12*r22);
IkReal x169=(gclwh13_1*rxp1_2);
IkReal x170=((0.4628)*rxp0_2);
IkReal x171=(gclwh13_0*pz);
IkReal x172=((0.0189560282044839)*r20);
IkReal x173=((0.031707240214)*r20);
IkReal x174=(gclwh8_12*r20);
IkReal x175=((2.0)*gclwh6_11);
IkReal x176=((2.2892)*npx);
IkReal x177=(gclwh2_1*r21);
IkReal x178=((2.0)*gclwh12_11);
IkReal x179=((0.00438918911418)*r21);
IkReal x180=(gclwh14_14*rxp0_2);
IkReal x181=((0.27404702)*rxp0_2);
IkReal x182=((0.327882)*gclwh5_15);
IkReal x183=((0.0379359474)*rxp2_2);
IkReal x184=((2.0)*gclwh8_11);
IkReal x185=((4.0)*gclwh10_11);
IkReal x186=(gclwh3_3*r21);
IkReal x187=(gclwh9_13*r20);
IkReal x188=(gclwh5_1*r22);
IkReal x189=((0.00438918911418)*r22);
IkReal x190=((2.0)*gclwh5_10);
IkReal x191=(gclwh6_12*rxp1_2);
IkReal x192=((2.0)*gclwh15_10);
IkReal x193=((0.0758718948)*rxp1_2);
IkReal x194=((0.327882)*gclwh4_14);
IkReal x195=((0.00438918911418)*r20);
IkReal x196=((0.4628)*rxp2_2);
IkReal x197=((4.0)*gclwh6_11);
IkReal x198=((0.327882)*gclwh13_15);
IkReal x199=((0.01837316)*rxp0_2);
IkReal x200=((0.9256)*rxp1_2);
IkReal x201=((2.0)*gclwh13_10);
IkReal x202=((0.0034863305927034)*rxp0_2);
IkReal x203=((0.00219459455709)*r22);
IkReal x204=(gclwh14_8*rxp0_2);
IkReal x205=(gclwh4_8*r22);
IkReal x206=((0.02677298)*rxp2_2);
IkReal x207=((2.0)*gclwh14_11);
IkReal x208=(gclwh14_14*x127);
IkReal x209=(gclwh6_5*x81);
IkReal x210=(gclwh10_5*x203);
IkReal x211=(gclwh12_14*x107);
IkReal x212=(gclwh8_5*x95);
IkReal x213=((0.0379359474)*x108);
IkReal x214=(gclwh4_11*x100);
IkReal x215=(gclwh12_11*x143);
IkReal x216=(gclwh6_11*x79);
IkReal x217=(gclwh4_8*x206);
IkReal x218=((0.02677298)*x150);
IkReal x219=(gclwh14_11*x72);
IkReal x220=(gclwh10_11*x73);
IkReal x221=(gclwh8_11*x102);
IkReal x222=((0.02677298)*x204);
IkReal x223=(gclwh11_10*x73);
IkReal x224=(gclwh9_10*x102);
IkReal x225=((0.02677298)*x136);
IkReal x226=(gclwh15_10*x72);
IkReal x227=(gclwh5_9*x206);
IkReal x228=(gclwh5_10*x100);
IkReal x229=(gclwh13_10*x143);
IkReal x230=((0.02677298)*x147);
IkReal x231=(gclwh7_10*x79);
IkReal x232=(gclwh15_15*x127);
IkReal x233=(gclwh7_7*x81);
IkReal x234=(gclwh9_7*x95);
IkReal x235=((0.0379359474)*x94);
IkReal x236=(gclwh13_15*x107);
IkReal x237=(gclwh11_7*x203);
IkReal x238=(gclwh8_5*x127);
IkReal x239=(gclwh14_14*x95);
IkReal x240=(gclwh10_5*x183);
IkReal x241=(gclwh4_14*x203);
IkReal x242=(gclwh6_5*x107);
IkReal x243=(gclwh12_14*x81);
IkReal x244=(gclwh4_11*x73);
IkReal x245=(gclwh12_11*x79);
IkReal x246=((0.001548816893)*x110);
IkReal x247=(gclwh8_11*x72);
IkReal x248=((0.001548816893)*x205);
IkReal x249=(gclwh10_11*x100);
IkReal x250=(gclwh14_11*x102);
IkReal x251=(gclwh6_11*x143);
IkReal x252=((0.001548816893)*x85);
IkReal x253=(gclwh5_10*x73);
IkReal x254=((0.001548816893)*x124);
IkReal x255=(gclwh9_10*x72);
IkReal x256=(gclwh11_10*x100);
IkReal x257=(gclwh13_10*x79);
IkReal x258=((0.001548816893)*x149);
IkReal x259=((0.001548816893)*x86);
IkReal x260=(gclwh7_10*x143);
IkReal x261=(gclwh15_10*x102);
IkReal x262=(gclwh7_7*x107);
IkReal x263=(gclwh5_15*x203);
IkReal x264=(gclwh13_15*x81);
IkReal x265=(gclwh9_7*x127);
IkReal x266=(gclwh11_7*x183);
IkReal x267=(gclwh15_15*x95);
IkReal x268=((0.4628)*x112);
IkReal x269=(gclwh10_11*x88);
IkReal x270=(gclwh8_11*x121);
IkReal x271=((0.0758718948)*x180);
IkReal x272=((0.0758718948)*x108);
IkReal x273=(gclwh12_14*x193);
IkReal x274=(gclwh4_11*x196);
IkReal x275=(gclwh6_11*x126);
IkReal x276=(gclwh12_11*x151);
IkReal x277=(gclwh13_15*x193);
IkReal x278=((0.0758718948)*x94);
IkReal x279=((0.0758718948)*x164);
IkReal x280=(gclwh15_10*x170);
IkReal x281=(gclwh11_10*x88);
IkReal x282=(gclwh9_10*x121);
IkReal x283=(gclwh13_10*x151);
IkReal x284=(gclwh7_10*x126);
IkReal x285=(gclwh5_10*x196);
IkReal x286=(gclwh6_11*x151);
IkReal x287=(gclwh14_11*x121);
IkReal x288=(gclwh14_14*x195);
IkReal x289=(gclwh4_14*x189);
IkReal x290=(gclwh12_14*x179);
IkReal x291=(pp*x143);
IkReal x292=((2.0)*x68);
IkReal x293=((1.0)*x69);
IkReal x294=(r20*x69);
IkReal x295=((0.163941)*gclwh6_5*x71);
IkReal x296=((0.327882)*gclwh10_5*x82);
IkReal x297=((0.327882)*gclwh8_5*x103);
IkReal x298=((0.163941)*gclwh10_5*x83);
IkReal x299=((0.327882)*gclwh6_5*x78);
IkReal x300=((0.163941)*gclwh8_5*x76);
IkReal x301=(gclwh14_2*rxp0_2*x70);
IkReal x302=((0.2314)*pp*x119);
IkReal x303=(x166*x73);
IkReal x304=(x132*x82);
IkReal x305=(x103*x184);
IkReal x306=(x166*x83);
IkReal x307=(gclwh4_3*pp*x100);
IkReal x308=(x156*x76);
IkReal x309=(x102*x156);
IkReal x310=(x175*x78);
IkReal x311=(gclwh14_3*pp*x72);
IkReal x312=(x148*x70);
IkReal x313=(x145*x70);
IkReal x314=(gclwh6_2*pz*x79);
IkReal x315=(x73*x92);
IkReal x316=(gclwh13_1*x291);
IkReal x317=(gclwh15_0*rxp0_2*x70);
IkReal x318=(gclwh5_1*pp*x100);
IkReal x319=(x102*x74);
IkReal x320=(x83*x92);
IkReal x321=(x141*x78);
IkReal x322=(x74*x76);
IkReal x323=(gclwh7_0*pz*x79);
IkReal x324=(x82*x89);
IkReal x325=(x109*x70);
IkReal x326=(x103*x118);
IkReal x327=(gclwh15_1*pp*x72);
IkReal x328=(x128*x70);
IkReal x329=((0.327882)*gclwh11_7*x82);
IkReal x330=((0.163941)*gclwh7_7*x71);
IkReal x331=((0.327882)*gclwh9_7*x103);
IkReal x332=((0.163941)*gclwh11_7*x83);
IkReal x333=((0.327882)*gclwh7_7*x78);
IkReal x334=((0.163941)*gclwh9_7*x76);
IkReal x335=((0.163941)*gclwh14_14*x76);
IkReal x336=(x167*x78);
IkReal x337=(x194*x82);
IkReal x338=((0.163941)*gclwh12_14*x71);
IkReal x339=((0.163941)*gclwh4_14*x83);
IkReal x340=(x103*x77);
IkReal x341=(x76*x91);
IkReal x342=((0.1157)*gclwh4_8*x83);
IkReal x343=(x154*x70);
IkReal x344=(x123*x69);
IkReal x345=(x102*x140);
IkReal x346=((0.1157)*gclwh12_8*x71);
IkReal x347=(x102*x91);
IkReal x348=(gclwh14_8*npx*x70);
IkReal x349=(x186*x69);
IkReal x350=(gclwh1_3*x294);
IkReal x351=(x103*x207);
IkReal x352=(gclwh3_2*pz*x79);
IkReal x353=(x69*x75);
IkReal x354=(gclwh12_2*pz*x79);
IkReal x355=(x82*x96);
IkReal x356=(gclwh12_8*npy*x70);
IkReal x357=(gclwh10_2*rxp2_2*x70);
IkReal x358=(x161*x73);
IkReal x359=(gclwh4_8*npz*x70);
IkReal x360=(x178*x78);
IkReal x361=((0.1157)*gclwh14_8*x76);
IkReal x362=(gclwh8_2*rxp0_2*x70);
IkReal x363=(gclwh2_0*pz*x79);
IkReal x364=(x69*x84);
IkReal x365=(gclwh11_0*rxp2_2*x70);
IkReal x366=(x159*x83);
IkReal x367=(x171*x71);
IkReal x368=(gclwh0_0*pz*x102);
IkReal x369=(gclwh5_9*npz*x70);
IkReal x370=(x159*x73);
IkReal x371=(x171*x79);
IkReal x372=(gclwh13_9*npy*x70);
IkReal x373=((0.1157)*gclwh15_9*x76);
IkReal x374=(x103*x192);
IkReal x375=(gclwh9_0*rxp0_2*x70);
IkReal x376=(x177*x69);
IkReal x377=(gclwh0_1*x294);
IkReal x378=((0.1157)*gclwh5_9*x83);
IkReal x379=(x190*x82);
IkReal x380=((0.1157)*gclwh13_9*x71);
IkReal x381=(x201*x78);
IkReal x382=(gclwh7_0*rxp1_2*x70);
IkReal x383=(gclwh15_9*npx*x70);
IkReal x384=(x102*x146);
IkReal x385=((0.163941)*gclwh13_15*x71);
IkReal x386=((0.163941)*gclwh5_15*x83);
IkReal x387=(x103*x104);
IkReal x388=(x198*x78);
IkReal x389=((0.163941)*gclwh15_15*x76);
IkReal x390=(x182*x82);
IkReal x391=(x184*x76);
IkReal x392=(x132*x83);
IkReal x393=(x197*x78);
IkReal x394=(x103*x133);
IkReal x395=(x175*x71);
IkReal x396=(x185*x82);
IkReal x397=(x83*x89);
IkReal x398=(x165*x78);
IkReal x399=(x118*x76);
IkReal x400=(x141*x71);
IkReal x401=(x103*x158);
IkReal x402=(x135*x82);
IkReal x403=(x207*x76);
IkReal x404=((4.0)*gclwh12_11*x78);
IkReal x405=((4.0)*gclwh4_11*x82);
IkReal x406=(x76*x77);
IkReal x407=((0.655764)*gclwh12_14*x78);
IkReal x408=((0.655764)*gclwh4_14*x82);
IkReal x409=((0.655764)*gclwh14_14*x103);
IkReal x410=(x167*x71);
IkReal x411=(x194*x83);
IkReal x412=(gclwh6_2*npy*x292);
IkReal x413=(gclwh6_2*x71*x93);
IkReal x414=(gclwh10_2*npz*x292);
IkReal x415=(gclwh8_2*npx*x292);
IkReal x416=(gclwh7_0*npy*x292);
IkReal x417=(gclwh9_0*npx*x292);
IkReal x418=(gclwh11_0*npz*x292);
IkReal x419=(gclwh7_0*x71*x93);
IkReal x420=(gclwh12_2*npy*x292);
IkReal x421=(gclwh3_2*npy*x292);
IkReal x422=(gclwh1_2*npx*x292);
IkReal x423=(gclwh14_3*x103*x134);
IkReal x424=(gclwh4_2*npz*x292);
IkReal x425=(gclwh4_3*x134*x82);
IkReal x426=(gclwh12_2*x71*x93);
IkReal x427=(gclwh1_2*x76*x93);
IkReal x428=(gclwh3_3*x134*x78);
IkReal x429=(gclwh4_2*x83*x93);
IkReal x430=(gclwh1_3*x103*x134);
IkReal x431=(gclwh3_2*x71*x93);
IkReal x432=(gclwh12_3*x134*x78);
IkReal x433=(gclwh14_2*npx*x292);
IkReal x434=(gclwh14_3*r20*x293);
IkReal x435=(gclwh0_0*npx*x292);
IkReal x436=(gclwh2_0*npy*x292);
IkReal x437=(gclwh5_1*x134*x82);
IkReal x438=(gclwh13_1*x134*x78);
IkReal x439=(gclwh15_0*npx*x292);
IkReal x440=(gclwh2_1*x134*x78);
IkReal x441=(gclwh0_1*x103*x134);
IkReal x442=(gclwh5_0*npz*x292);
IkReal x443=(gclwh13_0*npy*x292);
IkReal x444=(gclwh0_0*x76*x93);
IkReal x445=(gclwh15_0*x76*x93);
IkReal x446=(gclwh2_0*x71*x93);
IkReal x447=(x293*x99);
IkReal x448=(x188*x293);
IkReal x449=(gclwh15_1*x103*x134);
IkReal x450=(x236+x235);
IkReal x451=(x265+x266);
IkReal x452=(x272+x273);
IkReal x453=(x277+x278);
IkReal x454=(x211+x213);
IkReal x455=(x238+x240);
IkReal x456=(x310+x219+x221+x220);
IkReal x457=(x321+x223+x224+x226);
IkReal x458=(x355+x360+x250+x251);
IkReal x459=(x381+x379+x261+x260);
IkReal x460=(x331+x330+x329+x233);
IkReal x461=(x388+x389+x390+x267);
IkReal x462=(x209+x295+x296+x297);
IkReal x463=(x288+x407+x406+x408);
IkReal x464=(x337+x336+x335+x239);
IkReal x465=(x351+x247+x245+x244+x249);
IkReal x466=(x374+x255+x256+x257+x253);
IkReal x467=(x324+x326+x229+x228+x231);
IkReal x468=(x304+x305+x214+x215+x216);
IkReal x469=(x386+x387+x385+x264+x263);
IkReal x470=(x333+x332+x334+x237+x234);
IkReal x471=(x300+x210+x212+x298+x299);
IkReal x472=(x287+x286+x403+x405+x404);
IkReal x473=(x290+x289+x409+x410+x411);
IkReal x474=(x339+x338+x340+x243+x241);
IkReal x475=(x395+x394+x396+x276+x274+x275);
IkReal x476=(x285+x284+x283+x401+x400+x402);
IkReal x477=(x397+x399+x398+x282+x281+x280);
IkReal x478=(x391+x393+x392+x269+x268+x270);
IkReal x479=(((gclwh10_11*x196))+(((4.0)*gclwh14_11*x103))+((gclwh4_11*x88))+((x178*x71))+((x83*x96))+((gclwh8_11*x170))+((gclwh12_11*x126)));
IkReal x480=(x325+x327+x323+x328+x230+x417+x418+x419);
IkReal x481=(x314+x311+x313+x312+x222+x413+x414+x415);
IkReal x482=(x308+x309+x306+x307+x302+x303+x301+x217+x218+x412);
IkReal x483=(x320+x322+x319+x318+x315+x317+x316+x225+x227+x416);
IkReal x484=(x384+x382+x383+x380+x378+x258+x259+x449+x448+x445+x444+x447+x446+x441+x440+x443+x442);
IkReal x485=(x350+x353+x352+x342+x343+x341+x346+x347+x344+x345+x348+x349+x246+x248+x424+x423+x422+x421+x420+x70);
IkReal x486=(x354+x357+x356+x359+x358+x361+x362+x252+x429+x428+x427+x426+x425+x430+x431+x432+x433+x434);
IkReal x487=(x377+x376+x375+x373+x372+x371+x370+x368+x369+x363+x364+x365+x366+x367+x254+x438+x439+x435+x436+x437+x70);
op[0]=((((-1.0)*gclwh10_12*x138))+(((-1.1843)*gclwh10_12*x83))+(((-0.27404702)*x150))+(((-1.0)*x471))+(((0.015853620107)*x122))+(((-1.0)*gclwh4_8*x87))+(((-1.0)*x208))+(((2.3686)*gclwh8_12*x103))+x454+x462+(((-2.3686)*gclwh6_12*x78))+(((-1.1843)*gclwh8_12*x76))+(((1.1843)*gclwh6_12*x71))+((gclwh14_8*x181))+(((2.3686)*gclwh10_12*x82))+(((-0.015853620107)*x174)));
op[1]=((((-1.0)*x481))+(((-0.327675509152703)*x119))+((gclwh14_3*x105))+(((-0.327675509152703)*x130))+(((-1.0)*x468))+x482+x456+(((-1.0)*gclwh6_11*x71))+((gclwh8_11*x76))+((gclwh10_11*x83)));
op[2]=((-0.3752937372)+(((-1.0)*x475))+x478);
op[3]=((((-2.2892)*gclwh8_2*x103))+(((-1.1446)*gclwh6_2*x71))+(((-1.0)*gclwh4_2*x90))+((gclwh8_2*x116))+(((0.2832336)*x150))+(((1.1446)*gclwh8_2*x76))+(((-0.015322176454)*x111))+(((2.2892)*gclwh6_2*x78))+(((-1.0)*x452))+x271+(((-0.26486044)*x145))+((gclwh14_2*x80))+(((-2.2892)*gclwh10_2*x82))+(((1.1446)*gclwh10_2*x83))+((gclwh10_2*x115))+((gclwh4_8*x120))+(((-0.2832336)*x204)));
op[4]=((((-1.0)*gclwh14_8*x137))+(((-0.0397)*gclwh8_12*x76))+(((0.0397)*gclwh6_12*x71))+(((0.0794)*gclwh8_12*x103))+(((0.000531443653)*x122))+(((0.00918658)*x150))+(((-0.000531443653)*x174))+(((-0.000531443653)*x168))+(((-1.0)*x471))+(((-1.0)*x454))+(((-0.0794)*gclwh6_12*x78))+x208+(((-0.0397)*gclwh10_12*x83))+x462+((gclwh4_8*x129))+(((0.0794)*gclwh10_12*x82)));
op[5]=(((gclwh6_11*x71))+(((-1.0)*x481))+(((-1.0)*gclwh10_11*x83))+(((-1.0)*x456))+x482+x468+((gclwh14_3*x202))+(((-0.0034863305927034)*x119))+(((-0.0034863305927034)*x130))+(((-1.0)*gclwh8_11*x76)));
op[6]=(((gclwh7_10*x71))+(((-1.0)*x480))+((gclwh15_1*x105))+(((-0.327675509152703)*x144))+(((-1.0)*x457))+x483+x467+(((-0.327675509152703)*x169))+(((-1.0)*gclwh9_10*x76))+(((-1.0)*gclwh11_10*x83)));
op[7]=((((-1.1843)*gclwh9_13*x76))+(((-0.015853620107)*x101))+(((0.015853620107)*x139))+(((-1.0)*x470))+(((-1.0)*gclwh5_9*x87))+(((-1.0)*x232))+(((0.27404702)*x147))+x450+x460+(((2.3686)*gclwh11_13*x82))+(((-0.015853620107)*x187))+(((-1.1843)*gclwh11_13*x83))+(((1.1843)*gclwh7_13*x71))+(((-0.27404702)*x136))+(((-2.3686)*gclwh7_13*x78))+(((2.3686)*gclwh9_13*x103)));
op[8]=((((-1.1446)*gclwh7_0*x71))+(((1.1446)*gclwh11_0*x83))+(((-1.0)*gclwh5_9*x120))+((gclwh15_0*x80))+(((0.2832336)*x147))+((gclwh11_0*x115))+(((-0.2832336)*x136))+(((-1.0)*gclwh7_0*x162))+x453+(((-1.0)*x279))+(((-1.0)*x176*x74))+((gclwh9_0*x116))+(((1.1446)*gclwh9_0*x76))+(((-2.2892)*gclwh11_0*x82))+(((-1.0)*gclwh5_0*x90))+(((2.2892)*gclwh7_0*x78))+(((-0.26486044)*x109)));
op[9]=((-0.3752937372)+(((-1.0)*x476))+x477);
op[10]=((((-1.0)*x480))+(((-1.0)*x467))+(((-1.0)*gclwh7_10*x71))+(((-0.0034863305927034)*x144))+x483+x457+((gclwh15_1*x202))+((gclwh11_10*x83))+(((-0.0034863305927034)*x169))+((gclwh9_10*x76)));
op[11]=((((0.0794)*gclwh9_13*x103))+(((-0.0794)*gclwh7_13*x78))+(((0.0397)*gclwh7_13*x71))+((gclwh5_9*x129))+(((0.000531443653)*x139))+(((-1.0)*x470))+(((0.00918658)*x136))+(((-0.000531443653)*x101))+(((-0.000531443653)*x187))+(((-1.0)*x450))+x232+(((-0.0397)*gclwh11_13*x83))+(((0.0794)*gclwh11_13*x82))+x460+(((-1.0)*gclwh15_9*x137))+(((-0.0397)*gclwh9_13*x76)));
op[12]=((((2.3686)*gclwh12_8*x78))+(((-0.015853620107)*x110))+(((-1.1843)*gclwh12_8*x71))+(((0.015853620107)*x85))+(((-0.27404702)*x191))+(((-1.0)*x464))+(((-1.0)*gclwh4_8*x138))+((gclwh10_12*x87))+((gclwh8_12*x181))+x455+x474+(((-1.0)*x242))+(((-1.1843)*gclwh4_8*x83))+(((2.3686)*gclwh4_8*x82))+(((-2.3686)*gclwh14_8*x103))+(((1.1843)*gclwh14_8*x76)));
op[13]=((-1.429443141481)+(((-0.0189560282044839)*x75))+(((0.0189560282044839)*x186))+(((-1.429443141481)*gclwh1_3*x76))+(((-1.0)*x486))+(((-1.0)*gclwh4_11*x83))+(((-2.832113302962)*gclwh14_3*x103))+(((2.832113302962)*gclwh4_3*x82))+(((1.402670161481)*gclwh14_3*x76))+(((-1.0)*x465))+(((2.832113302962)*gclwh1_3*x103))+(((2.832113302962)*gclwh3_3*x78))+(((-1.0)*gclwh12_11*x71))+x485+x458+(((-1.402670161481)*gclwh12_3*x71))+((gclwh14_11*x76))+((gclwh1_3*x172))+(((-1.429443141481)*gclwh3_3*x71))+(((-0.0189560282044839)*x123))+((gclwh14_3*x172))+(((2.832113302962)*gclwh12_3*x78))+(((-1.402670161481)*pp*x75)));
op[14]=((-0.147786722962)+(((-1.0)*x479))+x472);
op[15]=((((-2.448)*gclwh12_8*x78))+(((2.2892)*gclwh4_2*x82))+(((-1.0)*gclwh12_2*x162))+(((0.01638506376)*x205))+(((-1.1446)*gclwh4_2*x83))+(((-1.0)*gclwh8_2*x80))+(((-1.0)*gclwh4_2*x115))+(((-0.01638506376)*x85))+(((1.1446)*gclwh14_2*x76))+((gclwh14_2*x116))+(((-1.0)*x473))+(((-2.448)*gclwh4_8*x82))+(((-1.0)*gclwh10_2*x90))+(((1.224)*gclwh4_8*x83))+x463+(((2.2892)*gclwh1_2*x103))+(((2.448)*gclwh14_8*x103))+(((-1.1446)*gclwh12_2*x71))+(((2.2892)*gclwh3_2*x78))+((gclwh1_2*x116))+(((2.2892)*gclwh12_2*x78))+(((-1.224)*gclwh14_8*x76))+(((-1.0)*x176*x91))+(((1.224)*gclwh12_8*x71))+((gclwh3_2*x162))+((gclwh6_2*x153))+(((-1.1446)*gclwh3_2*x71))+(((0.01638506376)*x110))+(((-1.1446)*gclwh1_2*x76)));
op[16]=(((gclwh8_12*x137))+(((0.0397)*gclwh12_8*x71))+(((-0.0794)*gclwh12_8*x78))+(((0.0794)*gclwh14_8*x103))+((gclwh10_12*x129))+(((-1.0)*x474))+(((0.000531443653)*x205))+(((0.000531443653)*x110))+x455+x464+(((-0.0397)*gclwh14_8*x76))+(((-1.0)*x242))+(((-0.000531443653)*x85))+(((-0.0794)*gclwh4_8*x82))+(((-0.00918658)*x191))+(((0.0397)*gclwh4_8*x83)));
op[17]=((0.028452741481)+(((-0.028452741481)*gclwh1_3*x76))+(((-0.000201684224787892)*x123))+(((-1.0)*x486))+(((0.000201684224787892)*x186))+((gclwh12_11*x71))+(((0.030132502962)*gclwh12_3*x78))+((gclwh4_11*x83))+(((-0.030132502962)*gclwh14_3*x103))+(((-1.0)*x458))+(((-0.001679761481)*gclwh12_3*x71))+x485+x465+(((0.030132502962)*gclwh3_3*x78))+(((0.001679761481)*gclwh14_3*x76))+((gclwh1_3*x97))+((gclwh14_3*x97))+(((-0.028452741481)*gclwh3_3*x71))+(((-0.001679761481)*pp*x75))+(((-0.000201684224787892)*x75))+(((-1.0)*gclwh14_11*x76))+(((0.030132502962)*gclwh4_3*x82))+(((0.030132502962)*gclwh1_3*x103)));
op[18]=((1.429443141481)+(((-1.0)*gclwh13_10*x71))+(((-1.402670161481)*gclwh15_1*x76))+(((0.0189560282044839)*x188))+(((-0.0189560282044839)*x84))+(((0.0189560282044839)*x177))+(((-1.0)*gclwh5_10*x83))+(((-1.0)*x484))+(((1.402670161481)*gclwh5_1*x83))+(((2.832113302962)*gclwh15_1*x103))+(((-1.429443141481)*gclwh2_1*x71))+(((2.832113302962)*gclwh2_1*x78))+(((-1.0)*x466))+(((-1.429443141481)*gclwh0_1*x76))+x487+x459+(((2.832113302962)*gclwh0_1*x103))+(((-2.832113302962)*gclwh13_1*x78))+(((1.402670161481)*gclwh13_1*x71))+((gclwh15_10*x76))+((gclwh0_1*x172))+(((0.0189560282044839)*x99))+(((-2.832113302962)*gclwh5_1*x82)));
op[19]=((((1.1843)*gclwh13_9*x71))+(((-0.015853620107)*x124))+(((2.3686)*gclwh15_9*x103))+(((-1.1843)*gclwh15_9*x76))+((gclwh5_9*x138))+(((0.015853620107)*x86))+(((1.1843)*gclwh5_9*x83))+(((-1.0)*x469))+(((-1.0)*gclwh11_13*x87))+(((-2.3686)*gclwh5_9*x82))+(((-1.0)*gclwh9_13*x181))+(((0.27404702)*x152))+(((-1.0)*x451))+x262+x461+(((-2.3686)*gclwh13_9*x78)));
op[20]=((((-1.1446)*gclwh0_0*x76))+((gclwh0_0*x116))+(((1.224)*gclwh5_9*x83))+((gclwh13_0*x162))+((gclwh2_0*x162))+(((0.01638506376)*x149))+(((1.224)*gclwh13_9*x71))+(((-2.448)*gclwh13_9*x78))+(((2.2892)*gclwh2_0*x78))+(((-0.01638506376)*x124))+(((-2.448)*gclwh5_9*x82))+(((-1.0)*gclwh15_0*x116))+(((0.01638506376)*x86))+(((-0.655764)*gclwh15_15*x103))+(((-1.224)*gclwh15_9*x76))+(((2.2892)*gclwh15_0*x103))+(((-1.1446)*gclwh2_0*x71))+(((1.1446)*gclwh13_0*x71))+((x104*x76))+(((2.2892)*gclwh0_0*x103))+(((-1.0)*gclwh13_15*x179))+(((1.1446)*gclwh5_0*x83))+(((-1.0)*gclwh7_0*x153))+((gclwh11_0*x90))+(((-2.2892)*gclwh13_0*x78))+(((-1.1446)*gclwh15_0*x76))+(((0.655764)*gclwh5_15*x82))+(((2.448)*gclwh15_9*x103))+(((-1.0)*x198*x71))+((gclwh15_15*x195))+(((0.655764)*gclwh13_15*x78))+((gclwh9_0*x80))+(((-1.0)*gclwh5_15*x189))+(((-2.2892)*gclwh5_0*x82))+((gclwh5_0*x115))+(((-1.0)*x182*x83)));
op[21]=((-0.147786722962)+(((-4.0)*gclwh5_10*x82))+((gclwh5_10*x88))+((gclwh11_10*x196))+((x190*x83))+((gclwh9_10*x170))+(((-1.0)*x192*x76))+(((-4.0)*gclwh13_10*x78))+((gclwh13_10*x126))+(((4.0)*gclwh15_10*x103))+(((-1.0)*gclwh7_10*x151))+(((-1.0)*gclwh15_10*x121))+((x201*x71)));
op[22]=((-0.028452741481)+(((-0.030132502962)*gclwh5_1*x82))+((gclwh5_10*x83))+(((0.000201684224787892)*x177))+(((-1.0)*x484))+((gclwh13_10*x71))+(((0.000201684224787892)*x188))+((gclwh0_1*x97))+(((0.000201684224787892)*x99))+(((-1.0)*x459))+(((0.030132502962)*gclwh2_1*x78))+(((-0.001679761481)*gclwh15_1*x76))+x487+x466+(((0.030132502962)*gclwh15_1*x103))+(((-0.028452741481)*gclwh0_1*x76))+(((-0.000201684224787892)*x84))+(((-0.028452741481)*gclwh2_1*x71))+(((0.001679761481)*gclwh13_1*x71))+(((0.001679761481)*gclwh5_1*x83))+(((0.030132502962)*gclwh0_1*x103))+(((-1.0)*gclwh15_10*x76))+(((-0.030132502962)*gclwh13_1*x78)));
op[23]=((((-1.0)*gclwh11_13*x129))+(((-0.000531443653)*x149))+(((0.000531443653)*x124))+(((-0.0794)*gclwh15_9*x103))+(((0.00918658)*x152))+(((-0.0397)*gclwh13_9*x71))+(((-1.0)*x461))+(((0.0794)*gclwh5_9*x82))+(((-1.0)*x451))+x262+x469+(((-1.0)*gclwh9_13*x137))+(((0.0794)*gclwh13_9*x78))+(((-0.000531443653)*x86))+(((0.0397)*gclwh15_9*x76))+(((-0.0397)*gclwh5_9*x83)));
op[24]=((-0.7766213052)+(((-1.0)*x475))+x478);
op[25]=(((gclwh8_2*x173))+(((-0.031707240214)*x111))+(((2.3686)*gclwh10_2*x83))+(((-1.0)*x452))+x271+(((4.7372)*gclwh6_2*x78))+(((-1.0)*x156*x98))+(((-2.3686)*gclwh6_2*x71))+((gclwh14_2*x160))+(((2.3686)*gclwh8_2*x76))+(((-4.7372)*gclwh10_2*x82))+(((-0.54809404)*x148))+(((-0.54809404)*x145))+((gclwh10_2*x114)));
op[26]=((((2.2892)*gclwh8_12*x76))+(((0.030644352908)*x168))+(((2.2892)*gclwh10_12*x83))+(((-0.030644352908)*x122))+(((0.1517437896)*x180))+(((-1.0)*gclwh12_14*x113))+(((-4.5784)*gclwh8_12*x103))+(((-4.5784)*gclwh10_12*x82))+(((-0.1517437896)*x108))+((gclwh8_12*x142))+(((-2.2892)*gclwh6_12*x71))+(((4.5784)*gclwh6_12*x78)));
op[27]=((((-1.0)*gclwh8_11*x125))+((gclwh4_11*x106))+(((-0.9256)*x112))+((x197*x71))+(((-1.0)*gclwh10_11*x157))+((gclwh12_11*x200))+(((8.0)*gclwh10_11*x82))+(((-1.0)*x133*x76))+(((-8.0)*gclwh6_11*x78))+(((-1.0)*x185*x83))+(((8.0)*gclwh8_11*x103))+((gclwh6_11*x155)));
op[28]=((-0.0260338308)+(((-1.0)*x478))+x475);
op[29]=((((0.0794)*gclwh10_2*x83))+(((0.0794)*gclwh8_2*x76))+(((0.1588)*gclwh6_2*x78))+(((-0.01837316)*x148))+(((-0.01837316)*x145))+(((-0.0794)*gclwh6_2*x71))+x452+(((-0.1588)*gclwh10_2*x82))+(((-1.0)*x271))+(((0.001062887306)*gclwh8_2*r20))+(((-0.1588)*gclwh8_2*x103))+(((-0.001062887306)*x111))+((gclwh14_2*x199))+((gclwh10_2*x117)));
op[30]=((((-0.54809404)*x109))+(((-1.0)*gclwh7_0*x131))+(((2.3686)*gclwh11_0*x83))+(((-4.7372)*gclwh11_0*x82))+(((-0.54809404)*x128))+(((-2.3686)*gclwh7_0*x71))+((gclwh11_0*x114))+(((2.3686)*gclwh9_0*x76))+(((-1.0)*x74*x98))+((gclwh15_0*x160))+x453+(((-1.0)*x279))+(((4.7372)*gclwh7_0*x78))+(((0.031707240214)*x163)));
op[31]=((-0.7766213052)+(((-1.0)*x476))+x477);
op[32]=(((x135*x83))+((x158*x76))+(((-8.0)*gclwh9_10*x103))+((gclwh11_10*x157))+(((-1.0)*gclwh13_10*x200))+(((8.0)*gclwh7_10*x78))+(((-1.0)*gclwh7_10*x155))+(((-1.0)*x165*x71))+(((-8.0)*gclwh11_10*x82))+(((0.9256)*gclwh15_10*rxp0_2))+((gclwh9_10*x125))+(((-1.0)*gclwh5_10*x106)));
op[33]=((((-1.0)*gclwh13_15*x113))+(((-0.1517437896)*x94))+(((0.030644352908)*x101))+(((-0.030644352908)*x139))+(((2.2892)*gclwh9_13*x76))+(((0.1517437896)*x164))+(((-4.5784)*gclwh11_13*x82))+((gclwh9_13*x142))+(((-4.5784)*gclwh9_13*x103))+(((-2.2892)*gclwh7_13*x71))+(((2.2892)*gclwh11_13*x83))+(((4.5784)*gclwh7_13*x78)));
op[34]=((((-0.01837316)*x109))+(((-0.0794)*gclwh7_0*x71))+(((-0.001062887306)*gclwh7_0*r21))+(((-0.1588)*npx*x74))+(((0.0794)*gclwh9_0*x76))+(((-0.1588)*gclwh11_0*x82))+((gclwh11_0*x117))+((gclwh15_0*x199))+(((0.0794)*gclwh11_0*x83))+(((-1.0)*x453))+x279+(((0.1588)*gclwh7_0*x78))+(((0.001062887306)*x163))+(((-0.01837316)*x128)));
op[35]=((-0.0260338308)+(((-1.0)*x477))+x476);
op[36]=((2.751379677038)+(((-1.0)*x479))+x472);
op[37]=((((4.7372)*gclwh12_2*x78))+(((4.7372)*gclwh4_2*x82))+((gclwh1_2*x173))+(((-2.3686)*gclwh1_2*x76))+((gclwh3_2*x131))+(((-1.0)*gclwh4_2*x114))+(((-1.0)*gclwh12_2*x131))+(((-1.0)*x91*x98))+(((-1.0)*x473))+(((-2.3686)*gclwh4_2*x83))+(((0.54809404)*x154))+((x140*x98))+x463+(((4.7372)*gclwh3_2*x78))+(((2.3686)*gclwh14_2*x76))+(((-2.3686)*gclwh3_2*x71))+((gclwh14_2*x173))+(((-2.3686)*gclwh12_2*x71))+(((-0.54809404)*gclwh10_2*rxp2_2))+(((-1.0)*gclwh8_2*x160)));
IkReal x488=pz*pz;
IkReal x489=pp*pp;
IkReal x490=((0.2314)*pz);
IkReal x491=(pp*r21);
IkReal x492=((0.2314)*rxp0_2);
IkReal x493=((0.01338649)*r22);
IkReal x494=(gclwh9_0*pz);
IkReal x495=(gclwh4_3*r22);
IkReal x496=(pp*r20);
IkReal x497=((0.327882)*gclwh14_14);
IkReal x498=(npy*pz);
IkReal x499=((0.655764)*gclwh12_14);
IkReal x500=((0.01338649)*r21);
IkReal x501=((4.0)*gclwh12_11);
IkReal x502=((0.26486044)*rxp0_2);
IkReal x503=((0.01837316)*rxp1_2);
IkReal x504=((0.00219459455709)*r21);
IkReal x505=(npz*pz);
IkReal x506=(gclwh15_1*r20);
IkReal x507=(gclwh14_8*r20);
IkReal x508=(gclwh13_9*r21);
IkReal x509=(pp*r22);
IkReal x510=((0.27404702)*rxp2_2);
IkReal x511=(npx*pz);
IkReal x512=((0.02677298)*r22);
IkReal x513=((2.0)*gclwh11_10);
IkReal x514=((0.26486044)*rxp2_2);
IkReal x515=(gclwh14_2*pz);
IkReal x516=(gclwh11_0*pz);
IkReal x517=((0.001062887306)*r20);
IkReal x518=((0.0379359474)*rxp1_2);
IkReal x519=((0.00219459455709)*r20);
IkReal x520=((2.0)*gclwh4_11);
IkReal x521=((0.000201684224787892)*r20);
IkReal x522=(gclwh13_1*r21);
IkReal x523=((0.2314)*rxp2_2);
IkReal x524=(gclwh11_13*r22);
IkReal x525=((0.01338649)*r20);
IkReal x526=((0.327882)*gclwh15_15);
IkReal x527=(gclwh12_8*r21);
IkReal x528=((0.655764)*gclwh14_14);
IkReal x529=(gclwh2_0*pz);
IkReal x530=((0.655764)*gclwh5_15);
IkReal x531=((0.015322176454)*r22);
IkReal x532=(gclwh15_0*r20);
IkReal x533=((2.0)*gclwh9_10);
IkReal x534=(gclwh12_3*rxp1_2);
IkReal x535=((2.0)*gclwh15_10);
IkReal x536=(gclwh15_10*r20);
IkReal x537=((4.0)*gclwh14_11);
IkReal x538=(gclwh12_3*r21);
IkReal x539=((0.655764)*gclwh15_15);
IkReal x540=((0.02677298)*r21);
IkReal x541=((0.0379359474)*rxp0_2);
IkReal x542=(gclwh11_13*rxp2_2);
IkReal x543=((0.05354596)*r22);
IkReal x544=(gclwh4_3*rxp2_2);
IkReal x545=(gclwh12_14*r21);
IkReal x546=((2.0)*gclwh10_11);
IkReal x547=((2.0)*pp);
IkReal x548=(gclwh13_9*rxp1_2);
IkReal x549=((0.0758718948)*rxp2_2);
IkReal x550=(gclwh14_8*rxp0_2);
IkReal x551=((0.015853620107)*r22);
IkReal x552=((0.001062887306)*r22);
IkReal x553=(gclwh7_13*r21);
IkReal x554=(gclwh1_2*pz);
IkReal x555=((2.0)*gclwh7_10);
IkReal x556=((1.0)*pz);
IkReal x557=((0.2314)*rxp1_2);
IkReal x558=(gclwh13_0*pz);
IkReal x559=((4.0)*gclwh15_10);
IkReal x560=(gclwh5_1*rxp2_2);
IkReal x561=(gclwh12_2*pz);
IkReal x562=(gclwh15_0*pz);
IkReal x563=((0.9256)*rxp0_2);
IkReal x564=(gclwh15_9*rxp0_2);
IkReal x565=((0.0189560282044839)*r21);
IkReal x566=(gclwh5_9*r22);
IkReal x567=(gclwh12_8*rxp1_2);
IkReal x568=((0.4628)*rxp1_2);
IkReal x569=(gclwh7_13*rxp1_2);
IkReal x570=((0.327882)*gclwh5_15);
IkReal x571=((0.26486044)*rxp1_2);
IkReal x572=(gclwh6_2*pz);
IkReal x573=(gclwh8_2*pz);
IkReal x574=(gclwh5_0*pz);
IkReal x575=((0.015322176454)*r20);
IkReal x576=(gclwh4_2*pz);
IkReal x577=(gclwh6_12*r21);
IkReal x578=(gclwh11_0*rxp2_2);
IkReal x579=((0.00918658)*rxp2_2);
IkReal x580=(gclwh13_0*r21);
IkReal x581=((0.0758718948)*rxp0_2);
IkReal x582=(gclwh10_2*pz);
IkReal x583=((0.001062887306)*r21);
IkReal x584=((0.015322176454)*r21);
IkReal x585=(gclwh10_11*rxp2_2);
IkReal x586=((0.327882)*gclwh12_14);
IkReal x587=((4.0)*gclwh4_11);
IkReal x588=(gclwh13_1*rxp1_2);
IkReal x589=((0.327675509152703)*rxp0_2);
IkReal x590=((0.4628)*rxp0_2);
IkReal x591=((0.0189560282044839)*r20);
IkReal x592=(gclwh8_12*r20);
IkReal x593=((2.0)*gclwh6_11);
IkReal x594=(gclwh8_12*rxp0_2);
IkReal x595=((2.0)*gclwh12_11);
IkReal x596=((0.9256)*rxp1_2);
IkReal x597=(gclwh9_13*rxp0_2);
IkReal x598=((0.0379359474)*rxp2_2);
IkReal x599=(gclwh5_15*r22);
IkReal x600=((0.05354596)*r21);
IkReal x601=((0.655764)*gclwh13_15);
IkReal x602=(gclwh13_15*r21);
IkReal x603=((0.02677298)*r20);
IkReal x604=((2.0)*gclwh8_11);
IkReal x605=((0.000201684224787892)*r21);
IkReal x606=((0.000531443653)*r20);
IkReal x607=((4.0)*gclwh5_10);
IkReal x608=(gclwh5_1*r22);
IkReal x609=((2.0)*gclwh5_10);
IkReal x610=(gclwh6_12*rxp1_2);
IkReal x611=((0.2832336)*rxp2_2);
IkReal x612=((4.0)*gclwh13_10);
IkReal x613=((0.0758718948)*rxp1_2);
IkReal x614=((0.327882)*gclwh4_14);
IkReal x615=((0.00438918911418)*r20);
IkReal x616=((0.4628)*rxp2_2);
IkReal x617=((0.000531443653)*r22);
IkReal x618=((0.327882)*gclwh13_15);
IkReal x619=((2.0)*gclwh13_10);
IkReal x620=(gclwh4_14*r22);
IkReal x621=(gclwh15_9*r20);
IkReal x622=((0.0034863305927034)*rxp0_2);
IkReal x623=((0.00219459455709)*r22);
IkReal x624=((0.655764)*gclwh4_14);
IkReal x625=(gclwh7_0*pz);
IkReal x626=((0.00877837822836)*r20);
IkReal x627=((0.01837316)*rxp0_2);
IkReal x628=(gclwh4_8*r22);
IkReal x629=((0.02677298)*rxp2_2);
IkReal x630=((2.0)*gclwh14_11);
IkReal x631=((0.00438918911418)*x602);
IkReal x632=((0.00438918911418)*x599);
IkReal x633=(gclwh15_15*x615);
IkReal x634=((0.02677298)*x536);
IkReal x635=(gclwh7_10*x568);
IkReal x636=(gclwh11_10*x616);
IkReal x637=(gclwh9_10*x590);
IkReal x638=(gclwh13_10*x540);
IkReal x639=(gclwh5_10*x512);
IkReal x640=(gclwh12_14*x518);
IkReal x641=(gclwh6_5*x504);
IkReal x642=(gclwh4_14*x598);
IkReal x643=(gclwh10_5*x623);
IkReal x644=(gclwh14_14*x541);
IkReal x645=(gclwh8_5*x519);
IkReal x646=(gclwh14_11*x492);
IkReal x647=(gclwh10_11*x493);
IkReal x648=(gclwh4_8*x629);
IkReal x649=(gclwh8_11*x525);
IkReal x650=((0.02677298)*x567);
IkReal x651=(gclwh4_11*x523);
IkReal x652=(gclwh12_11*x557);
IkReal x653=(gclwh6_11*x500);
IkReal x654=((0.02677298)*x550);
IkReal x655=(gclwh5_10*x523);
IkReal x656=(gclwh13_10*x557);
IkReal x657=((0.02677298)*x548);
IkReal x658=(gclwh5_9*x629);
IkReal x659=(gclwh7_10*x500);
IkReal x660=(gclwh11_10*x493);
IkReal x661=(gclwh9_10*x525);
IkReal x662=(gclwh15_10*x492);
IkReal x663=((0.02677298)*x564);
IkReal x664=(gclwh5_15*x598);
IkReal x665=(gclwh13_15*x518);
IkReal x666=(gclwh7_7*x504);
IkReal x667=(gclwh9_7*x519);
IkReal x668=(gclwh11_7*x623);
IkReal x669=(gclwh15_15*x541);
IkReal x670=(gclwh4_11*x512);
IkReal x671=((0.4628)*x585);
IkReal x672=(gclwh8_11*x590);
IkReal x673=(gclwh12_11*x540);
IkReal x674=((0.00438918911418)*x620);
IkReal x675=((0.00438918911418)*x545);
IkReal x676=(gclwh14_14*x615);
IkReal x677=(gclwh8_5*x541);
IkReal x678=((0.00219459455709)*x620);
IkReal x679=(gclwh12_14*x504);
IkReal x680=(gclwh10_5*x598);
IkReal x681=(gclwh14_14*x519);
IkReal x682=(gclwh6_5*x518);
IkReal x683=(gclwh14_11*x525);
IkReal x684=((0.001548816893)*x527);
IkReal x685=(gclwh6_11*x557);
IkReal x686=((0.001548816893)*x628);
IkReal x687=(gclwh4_11*x493);
IkReal x688=(gclwh12_11*x500);
IkReal x689=(gclwh8_11*x492);
IkReal x690=(gclwh10_11*x523);
IkReal x691=((0.001548816893)*x507);
IkReal x692=((0.001548816893)*x621);
IkReal x693=(gclwh7_10*x557);
IkReal x694=(gclwh15_10*x525);
IkReal x695=((0.001548816893)*x566);
IkReal x696=(gclwh5_10*x493);
IkReal x697=((0.001548816893)*x508);
IkReal x698=(gclwh9_10*x492);
IkReal x699=(gclwh11_10*x523);
IkReal x700=(gclwh13_10*x500);
IkReal x701=(gclwh7_7*x518);
IkReal x702=(gclwh15_15*x519);
IkReal x703=(gclwh9_7*x541);
IkReal x704=(gclwh11_7*x598);
IkReal x705=((0.00219459455709)*x599);
IkReal x706=(gclwh13_15*x504);
IkReal x707=(pp*x557);
IkReal x708=((2.0)*x488);
IkReal x709=((1.0)*x489);
IkReal x710=(r20*x489);
IkReal x711=(r21*x489);
IkReal x712=(x511*x539);
IkReal x713=(x509*x570);
IkReal x714=(x491*x618);
IkReal x715=(x496*x526);
IkReal x716=(x505*x530);
IkReal x717=(x498*x601);
IkReal x718=(x496*x535);
IkReal x719=(x505*x607);
IkReal x720=(x498*x612);
IkReal x721=(x491*x619);
IkReal x722=(x511*x559);
IkReal x723=(x509*x609);
IkReal x724=((0.163941)*gclwh6_5*x491);
IkReal x725=((0.327882)*gclwh10_5*x505);
IkReal x726=((0.327882)*gclwh8_5*x511);
IkReal x727=((0.163941)*gclwh10_5*x509);
IkReal x728=((0.327882)*gclwh6_5*x498);
IkReal x729=((0.163941)*gclwh8_5*x496);
IkReal x730=(gclwh14_2*rxp0_2*x490);
IkReal x731=((0.2314)*pp*x534);
IkReal x732=(x493*x582);
IkReal x733=(x498*x593);
IkReal x734=(x509*x582);
IkReal x735=(gclwh4_3*pp*x523);
IkReal x736=(x496*x573);
IkReal x737=(x525*x573);
IkReal x738=(x505*x546);
IkReal x739=(gclwh14_3*pp*x492);
IkReal x740=(gclwh4_2*rxp2_2*x490);
IkReal x741=(gclwh12_2*rxp1_2*x490);
IkReal x742=(x511*x604);
IkReal x743=(x500*x572);
IkReal x744=(x493*x516);
IkReal x745=(gclwh13_1*x707);
IkReal x746=(x505*x513);
IkReal x747=(x511*x533);
IkReal x748=(gclwh15_0*rxp0_2*x490);
IkReal x749=(gclwh5_1*pp*x523);
IkReal x750=(x494*x525);
IkReal x751=(x509*x516);
IkReal x752=(x494*x496);
IkReal x753=(x500*x625);
IkReal x754=(gclwh13_0*rxp1_2*x490);
IkReal x755=(gclwh15_1*pp*x492);
IkReal x756=(gclwh5_0*rxp2_2*x490);
IkReal x757=(x498*x555);
IkReal x758=((0.327882)*gclwh11_7*x505);
IkReal x759=((0.163941)*gclwh7_7*x491);
IkReal x760=((0.327882)*gclwh9_7*x511);
IkReal x761=((0.163941)*gclwh11_7*x509);
IkReal x762=((0.327882)*gclwh7_7*x498);
IkReal x763=((0.163941)*gclwh9_7*x496);
IkReal x764=(x509*x520);
IkReal x765=(x491*x595);
IkReal x766=(x511*x537);
IkReal x767=(x511*x528);
IkReal x768=(x491*x586);
IkReal x769=(x509*x614);
IkReal x770=(x496*x497);
IkReal x771=(x498*x499);
IkReal x772=(x505*x624);
IkReal x773=((0.163941)*gclwh12_14*x491);
IkReal x774=((0.163941)*gclwh4_14*x509);
IkReal x775=(x497*x511);
IkReal x776=((0.163941)*gclwh14_14*x496);
IkReal x777=(x498*x586);
IkReal x778=(x505*x614);
IkReal x779=(x496*x515);
IkReal x780=((0.1157)*gclwh4_8*x509);
IkReal x781=(gclwh6_2*rxp1_2*x490);
IkReal x782=(x489*x538);
IkReal x783=(x525*x554);
IkReal x784=((0.1157)*gclwh12_8*x491);
IkReal x785=(x505*x520);
IkReal x786=(x515*x525);
IkReal x787=(gclwh14_8*npx*x490);
IkReal x788=(gclwh3_3*x711);
IkReal x789=(gclwh1_3*x710);
IkReal x790=(gclwh3_2*pz*x500);
IkReal x791=(x489*x495);
IkReal x792=(x498*x595);
IkReal x793=(x500*x561);
IkReal x794=(gclwh12_8*npy*x490);
IkReal x795=(gclwh10_2*rxp2_2*x490);
IkReal x796=(x511*x630);
IkReal x797=(x493*x576);
IkReal x798=(gclwh4_8*npz*x490);
IkReal x799=((0.1157)*gclwh14_8*x496);
IkReal x800=(gclwh8_2*rxp0_2*x490);
IkReal x801=(x500*x529);
IkReal x802=(x489*x506);
IkReal x803=(x490*x578);
IkReal x804=(x509*x574);
IkReal x805=(x491*x558);
IkReal x806=(gclwh0_0*pz*x525);
IkReal x807=(gclwh5_9*npz*x490);
IkReal x808=(x493*x574);
IkReal x809=(x500*x558);
IkReal x810=(gclwh13_9*npy*x490);
IkReal x811=((0.1157)*gclwh15_9*x496);
IkReal x812=(gclwh9_0*rxp0_2*x490);
IkReal x813=(gclwh2_1*x711);
IkReal x814=(x505*x609);
IkReal x815=(x498*x619);
IkReal x816=(gclwh0_1*x710);
IkReal x817=((0.1157)*gclwh5_9*x509);
IkReal x818=(x511*x535);
IkReal x819=((0.1157)*gclwh13_9*x491);
IkReal x820=(gclwh7_0*rxp1_2*x490);
IkReal x821=(gclwh15_9*npx*x490);
IkReal x822=(x525*x562);
IkReal x823=(x498*x618);
IkReal x824=((0.163941)*gclwh15_15*x496);
IkReal x825=(x505*x570);
IkReal x826=((0.163941)*gclwh13_15*x491);
IkReal x827=((0.163941)*gclwh5_15*x509);
IkReal x828=(x511*x526);
IkReal x829=(gclwh6_2*npy*x708);
IkReal x830=(gclwh6_2*x491*x556);
IkReal x831=(gclwh10_2*npz*x708);
IkReal x832=(gclwh8_2*npx*x708);
IkReal x833=(gclwh7_0*npy*x708);
IkReal x834=(gclwh9_0*npx*x708);
IkReal x835=(gclwh11_0*npz*x708);
IkReal x836=(gclwh7_0*x491*x556);
IkReal x837=(gclwh12_2*npy*x708);
IkReal x838=(gclwh3_2*npy*x708);
IkReal x839=(gclwh1_2*npx*x708);
IkReal x840=(gclwh14_3*x511*x547);
IkReal x841=(gclwh4_2*npz*x708);
IkReal x842=(gclwh4_3*x505*x547);
IkReal x843=(gclwh12_2*x491*x556);
IkReal x844=((1.0)*x496*x554);
IkReal x845=(gclwh3_3*x498*x547);
IkReal x846=(gclwh4_2*x509*x556);
IkReal x847=(gclwh1_3*x511*x547);
IkReal x848=(gclwh3_2*x491*x556);
IkReal x849=(gclwh12_3*x498*x547);
IkReal x850=(gclwh14_2*npx*x708);
IkReal x851=(gclwh14_3*r20*x709);
IkReal x852=(gclwh0_0*npx*x708);
IkReal x853=(gclwh2_0*npy*x708);
IkReal x854=(gclwh5_1*x505*x547);
IkReal x855=(gclwh13_1*x498*x547);
IkReal x856=(gclwh15_0*npx*x708);
IkReal x857=(gclwh2_1*x498*x547);
IkReal x858=(gclwh0_1*x511*x547);
IkReal x859=(gclwh5_0*npz*x708);
IkReal x860=(gclwh13_0*npy*x708);
IkReal x861=(gclwh0_0*x496*x556);
IkReal x862=(gclwh15_0*x496*x556);
IkReal x863=((1.0)*x491*x529);
IkReal x864=(x522*x709);
IkReal x865=(x608*x709);
IkReal x866=(gclwh15_1*x511*x547);
IkReal x867=(x665+x664);
IkReal x868=(x703+x704);
IkReal x869=(x642+x640);
IkReal x870=(x677+x680);
IkReal x871=(x661+x660+x662+x757);
IkReal x872=(x647+x646+x649+x733);
IkReal x873=(x683+x685+x792+x785);
IkReal x874=(x694+x693+x814+x815);
IkReal x875=(x666+x759+x758+x760);
IkReal x876=(x633+x715+x717+x716);
IkReal x877=(x702+x823+x825+x824);
IkReal x878=(x681+x777+x776+x778);
IkReal x879=(x676+x772+x771+x770);
IkReal x880=(x641+x724+x725+x726);
IkReal x881=(x689+x688+x687+x690+x796);
IkReal x882=(x696+x698+x699+x700+x818);
IkReal x883=(x655+x656+x659+x746+x747);
IkReal x884=(x651+x652+x653+x738+x742);
IkReal x885=(((x505*x587))+((gclwh6_11*x568))+((x498*x501))+((x496*x630))+((gclwh14_11*x603)));
IkReal x886=(x668+x667+x761+x762+x763);
IkReal x887=(x632+x631+x713+x712+x714);
IkReal x888=(x706+x705+x828+x827+x826);
IkReal x889=(x645+x643+x727+x728+x729);
IkReal x890=(x674+x675+x768+x769+x767);
IkReal x891=(x634+x635+x719+x718+x720);
IkReal x892=(x678+x679+x773+x775+x774);
IkReal x893=(x636+x637+x638+x639+x721+x722+x723);
IkReal x894=(x672+x673+x670+x671+x764+x765+x766);
IkReal x895=(x663+x755+x754+x756+x753+x834+x835+x836);
IkReal x896=(x654+x739+x743+x740+x741+x830+x831+x832);
IkReal x897=(x657+x658+x751+x750+x752+x744+x745+x748+x749+x833);
IkReal x898=(x648+x650+x737+x736+x735+x734+x732+x731+x730+x829);
IkReal x899=(x695+x697+x857+x858+x859+x866+x865+x864+x863+x862+x861+x860+x819+x817+x822+x821+x820);
IkReal x900=(x490+x686+x684+x779+x791+x790+x782+x783+x780+x781+x786+x787+x784+x788+x789+x837+x838+x839+x841+x840);
IkReal x901=(x691+x793+x795+x794+x797+x799+x798+x850+x851+x843+x842+x845+x844+x847+x846+x849+x848+x800);
IkReal x902=(x490+x692+x852+x853+x856+x854+x855+x816+x812+x813+x810+x811+x809+x808+x805+x804+x807+x806+x801+x803+x802);
op[38]=((((1.311528)*gclwh4_14*x505))+(((0.52972088)*x610))+(((1.311528)*gclwh12_14*x498))+(((-0.00877837822836)*x620))+(((-1.0)*x491*x499))+(((-0.52972088)*x594))+((x496*x528))+(((-0.52972088)*gclwh10_12*rxp2_2))+((gclwh14_14*x626))+(((-1.0)*x509*x624))+(((-0.00877837822836)*x545))+(((-1.311528)*gclwh14_14*x511)));
op[39]=((-0.080560234076)+((x509*x587))+(((8.0)*gclwh14_11*x511))+(((-0.05354596)*gclwh14_11*r20))+((gclwh12_11*x600))+(((-8.0)*gclwh12_11*x498))+(((-1.0)*gclwh6_11*x596))+((x491*x501))+(((-8.0)*gclwh4_11*x505))+((gclwh8_11*x563))+((gclwh4_11*x543))+(((-1.0)*x496*x537))+(((0.9256)*x585)));
op[40]=((0.050601122962)+(((-1.0)*x885))+x894);
op[41]=((((-0.0794)*gclwh1_2*x496))+(((0.1588)*gclwh12_2*x498))+(((0.0794)*gclwh14_2*x496))+(((-1.0)*gclwh8_2*x627))+(((-0.0794)*gclwh4_2*x509))+(((0.1588)*gclwh4_2*x505))+(((-0.0794)*gclwh3_2*x491))+((gclwh6_2*x503))+(((-1.0)*gclwh12_2*x583))+((gclwh14_2*x517))+((gclwh1_2*x517))+(((0.1588)*gclwh3_2*x498))+(((-0.01837316)*gclwh10_2*rxp2_2))+(((-1.0)*gclwh4_2*x552))+(((0.1588)*gclwh1_2*x511))+x890+(((-0.0794)*gclwh12_2*x491))+((gclwh3_2*x583))+(((-0.1588)*gclwh14_2*x511))+(((-1.0)*x879)));
op[42]=((((0.54809404)*x578))+(((4.7372)*gclwh15_0*x511))+(((0.031707240214)*gclwh0_0*r20))+(((-4.7372)*gclwh13_0*x498))+(((2.3686)*gclwh13_0*x491))+(((-2.3686)*gclwh0_0*x496))+(((-2.3686)*gclwh15_0*x496))+(((2.3686)*gclwh5_0*x509))+(((0.54809404)*gclwh9_0*rxp0_2))+(((0.031707240214)*x580))+(((-0.031707240214)*x532))+(((-1.0)*x887))+(((4.7372)*gclwh2_0*x498))+(((-4.7372)*gclwh5_0*x505))+(((4.7372)*gclwh0_0*x511))+(((-2.3686)*gclwh2_0*x491))+(((0.031707240214)*gclwh5_0*r22))+(((0.031707240214)*gclwh2_0*r21))+x876+(((-0.54809404)*gclwh7_0*rxp1_2)));
op[43]=((2.751379677038)+(((-1.0)*x891))+x893);
op[44]=((0.080560234076)+(((-0.05354596)*x536))+(((-8.0)*gclwh5_10*x505))+((x491*x612))+((gclwh5_10*x543))+((gclwh9_10*x563))+(((-1.0)*gclwh7_10*x596))+(((-1.0)*x496*x559))+((gclwh13_10*x600))+(((-8.0)*gclwh13_10*x498))+(((8.0)*gclwh15_10*x511))+((x509*x607))+(((0.9256)*gclwh11_10*rxp2_2)));
op[45]=((((-0.52972088)*x569))+(((0.00877837822836)*x599))+(((-1.311528)*gclwh13_15*x498))+(((-1.311528)*gclwh5_15*x505))+((x491*x601))+(((1.311528)*gclwh15_15*x511))+(((0.00877837822836)*x602))+(((0.52972088)*x597))+(((-1.0)*gclwh15_15*x626))+((x509*x530))+(((-1.0)*x496*x539))+(((0.52972088)*x542)));
op[46]=((((-0.1588)*gclwh13_0*x498))+(((0.001062887306)*x580))+(((-1.0)*gclwh15_0*x517))+((gclwh0_0*x517))+(((-0.0794)*gclwh15_0*x496))+(((0.0794)*gclwh13_0*x491))+(((-0.0794)*gclwh2_0*x491))+(((0.1588)*gclwh0_0*x511))+(((-1.0)*gclwh7_0*x503))+((gclwh2_0*x583))+((gclwh5_0*x552))+((gclwh9_0*x627))+(((0.1588)*gclwh2_0*x498))+(((0.01837316)*x578))+(((0.0794)*gclwh5_0*x509))+x887+(((-0.1588)*gclwh5_0*x505))+(((-0.0794)*gclwh0_0*x496))+(((0.1588)*gclwh15_0*x511))+(((-1.0)*x876)));
op[47]=((0.050601122962)+(((-1.0)*x893))+x891);
op[48]=((((1.1843)*gclwh10_12*x509))+(((-0.27404702)*x567))+(((-2.3686)*gclwh10_12*x505))+(((-1.0)*x869))+(((1.1843)*gclwh8_12*x496))+(((0.27404702)*x550))+((gclwh10_12*x551))+(((-1.0)*gclwh4_8*x510))+(((2.3686)*gclwh6_12*x498))+(((-1.0)*x889))+(((-1.1843)*gclwh6_12*x491))+x644+(((-0.015853620107)*x577))+x880+(((0.015853620107)*x592))+(((-2.3686)*gclwh8_12*x511)));
op[49]=((((-1.0)*gclwh10_11*x509))+(((-1.0)*x896))+(((-1.0)*gclwh8_11*x496))+((gclwh6_11*x491))+(((-0.327675509152703)*x534))+x884+x898+(((-0.327675509152703)*x544))+((gclwh14_3*x589))+(((-1.0)*x872)));
op[50]=((0.3752937372)+((x491*x593))+((gclwh6_11*x540))+(((-1.0)*gclwh10_11*x512))+(((-1.0)*x496*x604))+(((-4.0)*gclwh6_11*x498))+(((4.0)*gclwh10_11*x505))+((gclwh12_11*x568))+(((-1.0)*x509*x546))+(((-1.0)*gclwh8_11*x603))+((gclwh4_11*x616))+(((-1.0)*gclwh14_11*x590))+(((4.0)*gclwh8_11*x511)));
op[51]=((((1.1446)*gclwh6_2*x491))+(((-1.0)*gclwh14_2*x502))+(((-1.0)*gclwh14_14*x581))+(((-1.1446)*gclwh8_2*x496))+(((-1.0)*gclwh8_2*x575))+(((-1.0)*gclwh10_2*x531))+((gclwh4_8*x611))+(((-0.2832336)*x550))+(((-2.2892)*gclwh6_2*x498))+(((0.2832336)*x567))+((gclwh4_2*x514))+((gclwh4_14*x549))+(((2.2892)*gclwh8_2*x511))+((gclwh6_2*x584))+((gclwh12_14*x613))+((gclwh12_2*x571))+(((2.2892)*gclwh10_2*x505))+(((-1.1446)*gclwh10_2*x509)));
op[52]=((((0.00918658)*x567))+(((-0.0794)*gclwh8_12*x511))+(((-0.0397)*gclwh6_12*x491))+(((0.0397)*gclwh8_12*x496))+(((0.0397)*gclwh10_12*x509))+((gclwh4_8*x579))+(((-1.0)*x889))+(((-0.00918658)*x550))+(((-0.000531443653)*x577))+(((-1.0)*x644))+x869+x880+(((0.0794)*gclwh6_12*x498))+(((-0.0794)*gclwh10_12*x505))+(((0.000531443653)*x592))+((gclwh10_12*x617)));
op[53]=((((-1.0)*x896))+((gclwh10_11*x509))+(((-0.0034863305927034)*x544))+(((-1.0)*x884))+(((-0.0034863305927034)*x534))+x872+x898+(((-1.0)*gclwh6_11*x491))+((gclwh14_3*x622))+((gclwh8_11*x496)));
op[54]=(((gclwh11_10*x509))+((gclwh9_10*x496))+((gclwh15_1*x589))+(((-0.327675509152703)*x560))+(((-1.0)*x895))+(((-1.0)*x883))+(((-1.0)*gclwh7_10*x491))+x871+x897+(((-0.327675509152703)*x588)));
op[55]=((((2.3686)*gclwh7_13*x498))+(((-1.0)*x867))+(((-2.3686)*gclwh11_13*x505))+(((-1.0)*gclwh5_9*x510))+(((1.1843)*gclwh11_13*x509))+(((-0.27404702)*x548))+(((0.015853620107)*gclwh9_13*r20))+(((-0.015853620107)*x553))+(((-1.0)*x886))+(((-2.3686)*gclwh9_13*x511))+(((0.015853620107)*x524))+x669+(((-1.1843)*gclwh7_13*x491))+(((0.27404702)*x564))+x875+(((1.1843)*gclwh9_13*x496)));
op[56]=((((-1.0)*gclwh13_15*x613))+(((-2.2892)*gclwh7_0*x498))+((gclwh13_0*x571))+(((-1.0)*gclwh5_15*x549))+((gclwh5_0*x514))+(((-0.2832336)*x548))+(((2.2892)*gclwh11_0*x505))+(((-1.0)*gclwh9_0*x575))+(((0.2832336)*x564))+(((-1.1446)*gclwh11_0*x509))+(((2.2892)*npx*x494))+(((-1.0)*gclwh5_9*x611))+((gclwh15_15*x581))+(((-1.0)*gclwh11_0*x531))+((gclwh7_0*x584))+(((-1.1446)*gclwh9_0*x496))+(((-1.0)*gclwh15_0*x502))+(((1.1446)*gclwh7_0*x491)));
op[57]=((0.3752937372)+(((-1.0)*gclwh9_10*x603))+(((4.0)*gclwh11_10*x505))+(((-1.0)*gclwh15_10*x590))+(((-1.0)*gclwh11_10*x512))+(((4.0)*gclwh9_10*x511))+(((-4.0)*gclwh7_10*x498))+((x491*x555))+((gclwh7_10*x540))+((gclwh13_10*x568))+((gclwh5_10*x616))+(((-1.0)*x496*x533))+(((-1.0)*x509*x513)));
op[58]=((((-0.0034863305927034)*x560))+(((-1.0)*gclwh11_10*x509))+((gclwh15_1*x622))+(((-1.0)*x895))+(((-1.0)*gclwh9_10*x496))+(((-0.0034863305927034)*x588))+x883+x897+((gclwh7_10*x491))+(((-1.0)*x871)));
op[59]=((((-0.00918658)*x564))+(((-0.0794)*gclwh11_13*x505))+(((0.0794)*gclwh7_13*x498))+(((-0.000531443653)*x553))+(((-1.0)*x886))+(((0.000531443653)*x524))+(((-1.0)*x669))+(((0.00918658)*x548))+(((0.0397)*gclwh11_13*x509))+x867+x875+(((0.0397)*gclwh9_13*x496))+((gclwh9_13*x606))+(((-0.0397)*gclwh7_13*x491))+(((-0.0794)*gclwh9_13*x511))+((gclwh5_9*x579)));
op[60]=((((2.3686)*gclwh4_8*x505))+(((-1.0)*gclwh10_12*x510))+(((-1.1843)*gclwh4_8*x509))+(((0.27404702)*x610))+(((0.015853620107)*x507))+(((-1.0)*x682))+(((-1.0)*gclwh4_8*x551))+(((-1.0)*x892))+(((-0.015853620107)*x527))+(((-0.27404702)*x594))+(((-1.1843)*gclwh12_8*x491))+(((1.1843)*gclwh14_8*x496))+x878+x870+(((-2.3686)*gclwh14_8*x511))+(((2.3686)*gclwh12_8*x498)));
op[61]=((1.429443141481)+(((-1.429443141481)*gclwh1_3*x496))+(((-0.0189560282044839)*x538))+((gclwh3_3*x565))+(((2.832113302962)*gclwh3_3*x498))+(((-1.0)*x901))+(((-1.402670161481)*gclwh12_3*x491))+((gclwh12_11*x491))+((gclwh14_3*x591))+(((-0.0189560282044839)*x495))+(((2.832113302962)*gclwh12_3*x498))+(((-2.832113302962)*gclwh14_3*x511))+((gclwh1_3*x591))+(((1.402670161481)*gclwh14_3*x496))+(((2.832113302962)*gclwh1_3*x511))+(((-1.0)*gclwh14_11*x496))+(((-1.402670161481)*pp*x495))+(((2.832113302962)*gclwh4_3*x505))+x881+x900+((gclwh4_11*x509))+(((-1.429443141481)*gclwh3_3*x491))+(((-1.0)*x873)));
op[62]=((0.147786722962)+(((-1.0)*x885))+x894);
op[63]=((((1.1446)*gclwh4_2*x509))+(((-2.2892)*gclwh1_2*x511))+(((1.1446)*gclwh3_2*x491))+(((-2.448)*gclwh12_8*x498))+(((0.01638506376)*x527))+(((-1.0)*gclwh14_2*x575))+(((-1.0)*gclwh3_2*x584))+(((-1.0)*gclwh1_2*x575))+(((1.224)*gclwh4_8*x509))+(((1.1446)*gclwh1_2*x496))+(((2.448)*gclwh14_8*x511))+(((0.01638506376)*x628))+(((-2.2892)*gclwh3_2*x498))+(((1.1446)*gclwh12_2*x491))+(((2.2892)*gclwh14_2*x511))+(((-2.2892)*gclwh4_2*x505))+(((-1.224)*gclwh14_8*x496))+((gclwh12_2*x584))+(((-2.448)*gclwh4_8*x505))+x890+(((-1.1446)*gclwh14_2*x496))+(((1.224)*gclwh12_8*x491))+((gclwh4_2*x531))+((gclwh8_2*x502))+((gclwh10_2*x514))+(((-1.0)*gclwh6_2*x571))+(((-2.2892)*gclwh12_2*x498))+(((-1.0)*x879))+(((-0.01638506376)*x507)));
op[64]=((((0.0794)*gclwh14_8*x511))+(((-0.000531443653)*x507))+(((-1.0)*gclwh10_12*x579))+(((-0.0794)*gclwh4_8*x505))+(((-1.0)*x682))+(((0.0397)*gclwh12_8*x491))+((gclwh4_8*x617))+(((0.0397)*gclwh4_8*x509))+(((0.00918658)*x610))+(((-0.0794)*gclwh12_8*x498))+(((0.000531443653)*x527))+(((-0.00918658)*x594))+(((-0.0397)*gclwh14_8*x496))+x870+x892+(((-1.0)*x878)));
op[65]=((-0.028452741481)+((gclwh1_3*x521))+((gclwh14_11*x496))+(((-0.001679761481)*pp*x495))+(((-0.001679761481)*gclwh12_3*x491))+(((0.030132502962)*gclwh4_3*x505))+(((-1.0)*x901))+(((-1.0)*x881))+(((-1.0)*gclwh4_11*x509))+((gclwh14_3*x521))+(((-0.028452741481)*gclwh1_3*x496))+(((0.001679761481)*gclwh14_3*x496))+(((-0.030132502962)*gclwh14_3*x511))+(((0.030132502962)*gclwh1_3*x511))+((gclwh3_3*x605))+(((-0.000201684224787892)*x495))+(((-0.028452741481)*gclwh3_3*x491))+(((-0.000201684224787892)*x538))+(((0.030132502962)*gclwh12_3*x498))+(((0.030132502962)*gclwh3_3*x498))+x873+x900+(((-1.0)*gclwh12_11*x491)));
op[66]=((-1.429443141481)+(((-0.0189560282044839)*x506))+(((0.0189560282044839)*x608))+(((-2.832113302962)*gclwh5_1*x505))+((gclwh2_1*x565))+(((-1.429443141481)*gclwh0_1*x496))+(((-1.0)*x899))+(((-1.0)*gclwh15_10*x496))+((gclwh5_10*x509))+(((1.402670161481)*gclwh5_1*x509))+((gclwh13_10*x491))+(((2.832113302962)*gclwh2_1*x498))+x882+(((2.832113302962)*gclwh0_1*x511))+((gclwh0_1*x591))+(((1.402670161481)*gclwh13_1*x491))+x902+(((0.0189560282044839)*x522))+(((2.832113302962)*gclwh15_1*x511))+(((-1.429443141481)*gclwh2_1*x491))+(((-1.402670161481)*gclwh15_1*x496))+(((-1.0)*x874))+(((-2.832113302962)*gclwh13_1*x498)));
op[67]=((((-0.27404702)*x569))+(((-1.0)*x868))+(((1.1843)*gclwh13_9*x491))+(((0.015853620107)*x508))+(((2.3686)*gclwh15_9*x511))+((gclwh11_13*x510))+(((-1.1843)*gclwh15_9*x496))+((gclwh5_9*x551))+(((1.1843)*gclwh5_9*x509))+(((0.27404702)*x597))+x701+(((-2.3686)*gclwh5_9*x505))+x888+(((-0.015853620107)*x621))+(((-2.3686)*gclwh13_9*x498))+(((-1.0)*x877)));
op[68]=((((-1.1446)*gclwh13_0*x491))+(((0.015322176454)*x532))+(((2.2892)*gclwh13_0*x498))+(((1.224)*gclwh13_9*x491))+(((-2.448)*gclwh13_9*x498))+(((-1.0)*gclwh11_0*x514))+(((-0.01638506376)*x621))+(((1.1446)*gclwh15_0*x496))+(((1.224)*gclwh5_9*x509))+(((-2.2892)*gclwh0_0*x511))+(((-1.224)*gclwh15_9*x496))+(((-2.448)*gclwh5_9*x505))+(((-1.0)*gclwh5_0*x531))+(((-0.015322176454)*x580))+(((0.01638506376)*x508))+(((-1.0)*gclwh9_0*x502))+(((0.01638506376)*x566))+(((1.1446)*gclwh0_0*x496))+((gclwh7_0*x571))+x887+(((-2.2892)*gclwh2_0*x498))+(((2.448)*gclwh15_9*x511))+(((-2.2892)*gclwh15_0*x511))+(((1.1446)*gclwh2_0*x491))+(((-1.0)*gclwh0_0*x575))+(((2.2892)*gclwh5_0*x505))+(((-1.1446)*gclwh5_0*x509))+(((-1.0)*x876))+(((-1.0)*gclwh2_0*x584)));
op[69]=((0.147786722962)+(((-1.0)*x893))+x891);
op[70]=((0.028452741481)+(((0.000201684224787892)*x522))+(((0.001679761481)*gclwh13_1*x491))+(((0.001679761481)*gclwh5_1*x509))+(((-1.0)*gclwh13_10*x491))+((gclwh15_10*x496))+(((0.030132502962)*gclwh2_1*x498))+(((0.000201684224787892)*x608))+(((-1.0)*gclwh5_10*x509))+((gclwh2_1*x605))+(((-0.000201684224787892)*x506))+(((-1.0)*x899))+(((-1.0)*x882))+(((-0.028452741481)*gclwh2_1*x491))+(((0.030132502962)*gclwh15_1*x511))+(((-0.001679761481)*gclwh15_1*x496))+(((0.030132502962)*gclwh0_1*x511))+(((-0.030132502962)*gclwh5_1*x505))+x874+(((-0.030132502962)*gclwh13_1*x498))+x902+((gclwh0_1*x521))+(((-0.028452741481)*gclwh0_1*x496)));
op[71]=((((-0.00918658)*x569))+(((-0.0397)*gclwh5_9*x509))+(((-1.0)*x868))+(((0.0794)*gclwh13_9*x498))+(((-0.000531443653)*x508))+((gclwh15_9*x606))+(((0.0397)*gclwh15_9*x496))+(((-1.0)*x888))+(((0.00918658)*x542))+(((-0.0794)*gclwh15_9*x511))+x701+x877+(((-0.0397)*gclwh13_9*x491))+(((0.0794)*gclwh5_9*x505))+(((0.00918658)*x597))+(((-0.000531443653)*x566)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x903=htj1*htj1;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(((1.0)+x903),-1);
if(!x904.valid){
continue;
}
cj1array[numsolutions]=((x904.value)*(((1.0)+(((-1.0)*x903)))));
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x905.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x905.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x906=htj2*htj2;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+x906),-1);
if(!x907.valid){
continue;
}
cj2array[numsolutions]=((x907.value)*(((1.0)+(((-1.0)*x906)))));
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x908.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x908.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x909=htj3*htj3;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj3array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x911.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x911.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x912=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x912);
rxp1_0=(pz*r11);
rxp1_1=(r01*x912);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x913=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x913);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(r22,-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915=IKPowWithIntegerCheck(sj3,-1);
if(!x915.valid){
continue;
}
sj4array[0]=((x914.value)*(x915.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
IkReal x917=((16.0)*sj4);
IkReal x918=(cj1*cj2);
IkReal x919=((4.0)*sj3);
IkReal x920=((8.0)*sj4);
IkReal x921=((4.0)*cj4);
IkReal x922=(sj1*sj2);
IkReal x923=((4.0)*sj4);
IkReal x924=(cj3*r02);
IkReal x925=((16.0)*sj3);
IkReal x926=((8.0)*sj3);
IkReal x927=((12.0)*cj4);
IkReal x928=((12.0)*sj4);
IkReal x929=(cj3*r12);
IkReal x930=(r11*x919);
IkReal x931=(r01*x919);
IkReal x932=(r01*x922);
IkReal x933=(cj3*cj4*r01);
IkReal x934=(cj3*cj4*r11);
IkReal x935=(cj3*r10*x921);
IkReal x936=(x928*x929);
IkReal x937=(cj3*r00*x921);
IkReal x938=(x924*x928);
IkReal x939=(r00*x922*x923);
IkReal x940=(r02*x922*x927);
IkReal x941=(r00*x918*x923);
IkReal x942=(r02*x918*x927);
IkReal x943=(r10*x922*x923);
IkReal x944=(r12*x918*x927);
IkReal x945=(r12*x922*x927);
IkReal x946=(r10*x918*x923);
IkReal x947=(x930+x941);
IkReal x948=(x931+x943);
IkReal x949=(x939+x935);
IkReal x950=(x936+x942);
IkReal x951=(x937+x946);
IkReal x952=(x938+x945);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x948+x944)))))+(((0.5)*(IKabs(((((-1.0)*x947))+(((-1.0)*x950))+x949+x940)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x950))+x940+x947)))))+(((0.5)*(IKabs((((r01*x917*x918))+(((-1.0)*r10*x925))+(((-16.0)*x934))+(((-1.0)*x917*x932)))))))+(((0.5)*(IKabs((((r11*x917*x922))+(((-1.0)*r11*x917*x918))+(((-16.0)*x933))+(((-1.0)*r00*x925)))))))+(((0.5)*(IKabs(((((-1.0)*x948))+(((-1.0)*x952))+x951+x944)))))+(((0.5)*(IKabs((((r12*x918*x921))+(((-1.0)*x951))+(((-1.0)*r12*x921*x922))+x948+(((-1.0)*x923*x924)))))))+(IKabs(((((-1.0)*r11*x918*x920))+((r11*x920*x922))+(((-8.0)*x933))+(((-1.0)*r00*x926)))))+(IKabs((((r01*x918*x920))+(((-1.0)*r10*x926))+(((-8.0)*x934))+(((-1.0)*x920*x932)))))+(((0.5)*(IKabs(((((-1.0)*x949))+((r02*x921*x922))+(((-1.0)*r02*x918*x921))+x947+(((-1.0)*x923*x929))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x953=(r10*sj3);
IkReal x954=(r01*sj4);
IkReal x955=(cj1*cj2);
IkReal x956=(cj3*cj4);
IkReal x957=(sj1*sj2);
IkReal x958=(cj4*r02);
IkReal x959=((4.0)*r11*sj3);
IkReal x960=(cj3*r12*sj4);
IkReal x961=((4.0)*r00*sj4);
IkReal x962=((4.0)*r10*x956);
IkReal x963=((12.0)*x960);
IkReal x964=((4.0)*x960);
IkReal x965=(x955*x961);
IkReal x966=(x957*x961);
IkReal x967=((12.0)*x957*x958);
IkReal x968=((12.0)*x955*x958);
IkReal x969=((4.0)*x957*x958);
IkReal x970=((4.0)*x955*x958);
IkReal x971=(x965+x959);
IkReal x972=(x962+x966);
IkReal x973=(x970+x964);
IkReal x974=(x963+x968);
IkReal x975=((((-8.0)*x953))+(((-8.0)*x954*x957))+(((8.0)*x954*x955))+(((-8.0)*r11*x956)));
op[0]=(x971+x969+(((-1.0)*x972))+(((-1.0)*x973)));
op[1]=x975;
op[2]=(x971+x967+(((-1.0)*x974))+(((-1.0)*x972)));
op[3]=((((-16.0)*r11*x956))+(((16.0)*x954*x955))+(((-16.0)*x953))+(((-16.0)*x954*x957)));
op[4]=(x972+x967+(((-1.0)*x974))+(((-1.0)*x971)));
op[5]=x975;
op[6]=(x972+x969+(((-1.0)*x973))+(((-1.0)*x971)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x976=(cj1*cj2);
IkReal x977=((4.0)*cj4);
IkReal x978=(sj1*sj2);
IkReal x979=((4.0)*sj4);
IkReal x980=(r00*sj3);
IkReal x981=(cj3*r02);
IkReal x982=((4.0)*r01*sj3);
IkReal x983=((16.0)*r11*sj4);
IkReal x984=(cj3*cj4*r01);
IkReal x985=((12.0)*cj4*r12);
IkReal x986=((8.0)*r11*sj4);
IkReal x987=(cj3*r00*x977);
IkReal x988=((12.0)*sj4*x981);
IkReal x989=(x979*x981);
IkReal x990=(r10*x976*x979);
IkReal x991=(r10*x978*x979);
IkReal x992=(x976*x985);
IkReal x993=(x978*x985);
IkReal x994=(r12*x976*x977);
IkReal x995=(r12*x977*x978);
IkReal x996=(x991+x982);
IkReal x997=(x990+x987);
IkReal x998=(x995+x989);
IkReal x999=(x993+x988);
IkReal x1000=((((-8.0)*x980))+(((-8.0)*x984))+(((-1.0)*x976*x986))+((x978*x986)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x996))+(((-1.0)*x999))+x992+x997))))+((x1000*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x997))+(((-1.0)*x999))+x992+x996))))+(((-1.0)*x996))+(((-1.0)*x998))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x997))+(((-1.0)*x998))+x996+x994))))+((htj5*x1000))+x997+x994+(((htj5*htj5*htj5)*(((((-16.0)*x980))+(((-16.0)*x984))+(((-1.0)*x976*x983))+((x978*x983)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1001=(cj5*sj4);
IkReal x1002=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1002))+((r00*x1001))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1001))+((r11*x1002))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1002))+((r00*x1001))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1001))+((r11*x1002))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1002))+((r00*x1001))+((cj4*r02))), ((((-1.0)*r10*x1001))+((r11*x1002))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1003=IKsin(j0);
IkReal x1004=IKcos(j0);
IkReal x1005=(cj5*r01);
IkReal x1006=((1.0)*sj3);
IkReal x1007=(r12*sj4);
IkReal x1008=((1.0)*cj3);
IkReal x1009=(r11*sj5);
IkReal x1010=(cj3*cj4);
IkReal x1011=(cj1*cj2);
IkReal x1012=(r02*sj4);
IkReal x1013=(r01*sj5);
IkReal x1014=(r10*sj5);
IkReal x1015=(cj5*r11);
IkReal x1016=(r00*sj5);
IkReal x1017=((0.5723)*sj2);
IkReal x1018=((1.0)*sj2);
IkReal x1019=((1.0)*cj4);
IkReal x1020=(cj4*cj5*r00);
IkReal x1021=(cj4*cj5*r10);
IkReal x1022=(cj1*x1003);
IkReal x1023=(sj1*x1004);
IkReal x1024=((1.0)*cj5*sj4);
IkReal x1025=(sj1*x1003);
IkReal x1026=(cj1*x1004);
evalcond[0]=(x1003+((sj4*x1013))+(((-1.0)*r02*x1019))+(((-1.0)*r00*x1024)));
evalcond[1]=(((sj4*x1009))+(((-1.0)*x1004))+(((-1.0)*r10*x1024))+(((-1.0)*r12*x1019)));
evalcond[2]=(((x1017*x1023))+(((-0.612)*x1026))+(((0.163941)*x1003))+(((-1.0)*px))+(((-0.1157)*x1005))+(((-0.5723)*x1004*x1011))+(((-0.1157)*x1016)));
evalcond[3]=(((x1017*x1025))+(((-0.612)*x1022))+(((-0.5723)*x1003*x1011))+(((-0.163941)*x1004))+(((-1.0)*py))+(((-0.1157)*x1014))+(((-0.1157)*x1015)));
evalcond[4]=(((cj2*x1023))+((cj3*x1005))+((cj3*x1016))+(((-1.0)*x1006*x1012))+((sj3*x1020))+((sj2*x1026))+(((-1.0)*cj4*x1006*x1013)));
evalcond[5]=(((cj3*x1012))+(((-1.0)*x1018*x1023))+((sj3*x1005))+(((-1.0)*x1008*x1020))+((sj3*x1016))+((x1004*x1011))+((x1010*x1013)));
evalcond[6]=(((cj2*x1025))+(((-1.0)*cj4*x1006*x1009))+((cj3*x1015))+((cj3*x1014))+(((-1.0)*x1006*x1007))+((sj3*x1021))+((sj2*x1022)));
evalcond[7]=(((cj3*x1007))+((x1009*x1010))+((x1003*x1011))+(((-1.0)*x1018*x1025))+(((-1.0)*x1008*x1021))+((sj3*x1015))+((sj3*x1014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(cj3,-1);
if(!x1027.valid){
continue;
}
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(r22,-1);
if(!x1028.valid){
continue;
}
sj4array[0]=((-1.0)*(x1027.value)*(x1028.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1029=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1029);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1029);
IkReal x1030=((16.0)*sj4);
IkReal x1031=(cj1*cj2);
IkReal x1032=((4.0)*sj3);
IkReal x1033=((8.0)*sj4);
IkReal x1034=((4.0)*cj4);
IkReal x1035=(sj1*sj2);
IkReal x1036=((4.0)*sj4);
IkReal x1037=(cj3*r02);
IkReal x1038=((16.0)*sj3);
IkReal x1039=((8.0)*sj3);
IkReal x1040=((12.0)*cj4);
IkReal x1041=((12.0)*sj4);
IkReal x1042=(cj3*r12);
IkReal x1043=(r11*x1032);
IkReal x1044=(r01*x1032);
IkReal x1045=(r01*x1035);
IkReal x1046=(cj3*cj4*r01);
IkReal x1047=(cj3*cj4*r11);
IkReal x1048=(cj3*r10*x1034);
IkReal x1049=(x1041*x1042);
IkReal x1050=(cj3*r00*x1034);
IkReal x1051=(x1037*x1041);
IkReal x1052=(r00*x1035*x1036);
IkReal x1053=(r02*x1035*x1040);
IkReal x1054=(r00*x1031*x1036);
IkReal x1055=(r02*x1031*x1040);
IkReal x1056=(r10*x1035*x1036);
IkReal x1057=(r12*x1031*x1040);
IkReal x1058=(r12*x1035*x1040);
IkReal x1059=(r10*x1031*x1036);
IkReal x1060=(x1054+x1043);
IkReal x1061=(x1056+x1044);
IkReal x1062=(x1052+x1048);
IkReal x1063=(x1055+x1049);
IkReal x1064=(x1050+x1059);
IkReal x1065=(x1051+x1058);
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*x1046))+((r11*x1030*x1035))+(((-1.0)*r00*x1038))+(((-1.0)*r11*x1030*x1031)))))))+(((0.5)*(IKabs((x1057+x1064+(((-1.0)*x1061))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1061+((r12*x1031*x1034))+(((-1.0)*r12*x1034*x1035))+(((-1.0)*x1036*x1037))+(((-1.0)*x1064)))))))+(((0.5)*(IKabs((x1057+x1061+(((-1.0)*x1064))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1038))+((r01*x1030*x1031))+(((-16.0)*x1047))+(((-1.0)*x1030*x1045)))))))+(((0.5)*(IKabs((x1053+x1060+(((-1.0)*x1062))+(((-1.0)*x1063)))))))+(IKabs(((((-1.0)*r10*x1039))+(((-8.0)*x1047))+(((-1.0)*x1033*x1045))+((r01*x1031*x1033)))))+(IKabs(((((-8.0)*x1046))+(((-1.0)*r11*x1031*x1033))+((r11*x1033*x1035))+(((-1.0)*r00*x1039)))))+(((0.5)*(IKabs((x1053+x1062+(((-1.0)*x1063))+(((-1.0)*x1060)))))))+(((0.5)*(IKabs((x1060+((r02*x1034*x1035))+(((-1.0)*r02*x1031*x1034))+(((-1.0)*x1062))+(((-1.0)*x1036*x1042))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1066=(r10*sj3);
IkReal x1067=(r01*sj4);
IkReal x1068=(cj1*cj2);
IkReal x1069=(cj3*cj4);
IkReal x1070=(sj1*sj2);
IkReal x1071=(cj4*r02);
IkReal x1072=((4.0)*r11*sj3);
IkReal x1073=(cj3*r12*sj4);
IkReal x1074=((4.0)*r00*sj4);
IkReal x1075=((4.0)*r10*x1069);
IkReal x1076=((12.0)*x1073);
IkReal x1077=((4.0)*x1073);
IkReal x1078=(x1068*x1074);
IkReal x1079=(x1070*x1074);
IkReal x1080=((12.0)*x1070*x1071);
IkReal x1081=((12.0)*x1068*x1071);
IkReal x1082=((4.0)*x1070*x1071);
IkReal x1083=((4.0)*x1068*x1071);
IkReal x1084=(x1078+x1072);
IkReal x1085=(x1079+x1075);
IkReal x1086=(x1077+x1083);
IkReal x1087=(x1076+x1081);
IkReal x1088=((((-8.0)*r11*x1069))+(((-8.0)*x1067*x1070))+(((8.0)*x1067*x1068))+(((-8.0)*x1066)));
op[0]=(x1084+x1082+(((-1.0)*x1085))+(((-1.0)*x1086)));
op[1]=x1088;
op[2]=(x1084+x1080+(((-1.0)*x1085))+(((-1.0)*x1087)));
op[3]=((((16.0)*x1067*x1068))+(((-16.0)*x1067*x1070))+(((-16.0)*r11*x1069))+(((-16.0)*x1066)));
op[4]=(x1085+x1080+(((-1.0)*x1084))+(((-1.0)*x1087)));
op[5]=x1088;
op[6]=(x1085+x1082+(((-1.0)*x1084))+(((-1.0)*x1086)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1089=(cj1*cj2);
IkReal x1090=((4.0)*cj4);
IkReal x1091=(sj1*sj2);
IkReal x1092=((4.0)*sj4);
IkReal x1093=(r00*sj3);
IkReal x1094=(cj3*r02);
IkReal x1095=((4.0)*r01*sj3);
IkReal x1096=((16.0)*r11*sj4);
IkReal x1097=(cj3*cj4*r01);
IkReal x1098=((12.0)*cj4*r12);
IkReal x1099=((8.0)*r11*sj4);
IkReal x1100=(cj3*r00*x1090);
IkReal x1101=((12.0)*sj4*x1094);
IkReal x1102=(x1092*x1094);
IkReal x1103=(r10*x1089*x1092);
IkReal x1104=(r10*x1091*x1092);
IkReal x1105=(x1089*x1098);
IkReal x1106=(x1091*x1098);
IkReal x1107=(r12*x1089*x1090);
IkReal x1108=(r12*x1090*x1091);
IkReal x1109=(x1104+x1095);
IkReal x1110=(x1103+x1100);
IkReal x1111=(x1102+x1108);
IkReal x1112=(x1106+x1101);
IkReal x1113=((((-1.0)*x1089*x1099))+(((-8.0)*x1093))+(((-8.0)*x1097))+((x1091*x1099)));
j5evalpoly[0]=(x1107+x1110+(((htj5*htj5*htj5)*(((((-1.0)*x1089*x1096))+(((-16.0)*x1097))+(((-16.0)*x1093))+((x1091*x1096))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1107+x1109+(((-1.0)*x1110))+(((-1.0)*x1111))))))+(((htj5*htj5*htj5*htj5)*((x1105+x1109+(((-1.0)*x1112))+(((-1.0)*x1110))))))+((x1113*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1109))+(((htj5*htj5)*((x1105+x1110+(((-1.0)*x1109))+(((-1.0)*x1112))))))+(((-1.0)*x1111))+((htj5*x1113)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1114=(cj5*sj4);
IkReal x1115=(sj4*sj5);
if( IKabs((((r00*x1114))+(((-1.0)*r01*x1115))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1114))+((r11*x1115))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1114))+(((-1.0)*r01*x1115))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1114))+((r11*x1115))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1114))+(((-1.0)*r01*x1115))+((cj4*r02))), ((((-1.0)*r10*x1114))+((r11*x1115))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1116=IKsin(j0);
IkReal x1117=IKcos(j0);
IkReal x1118=(cj5*r01);
IkReal x1119=((1.0)*sj3);
IkReal x1120=(r12*sj4);
IkReal x1121=((1.0)*cj3);
IkReal x1122=(r11*sj5);
IkReal x1123=(cj3*cj4);
IkReal x1124=(cj1*cj2);
IkReal x1125=(r02*sj4);
IkReal x1126=(r01*sj5);
IkReal x1127=(r10*sj5);
IkReal x1128=(cj5*r11);
IkReal x1129=(r00*sj5);
IkReal x1130=((0.5723)*sj2);
IkReal x1131=((1.0)*sj2);
IkReal x1132=((1.0)*cj4);
IkReal x1133=(cj4*cj5*r00);
IkReal x1134=(cj4*cj5*r10);
IkReal x1135=(cj1*x1116);
IkReal x1136=(sj1*x1117);
IkReal x1137=((1.0)*cj5*sj4);
IkReal x1138=(sj1*x1116);
IkReal x1139=(cj1*x1117);
evalcond[0]=(x1116+((sj4*x1126))+(((-1.0)*r02*x1132))+(((-1.0)*r00*x1137)));
evalcond[1]=((((-1.0)*r12*x1132))+(((-1.0)*r10*x1137))+((sj4*x1122))+(((-1.0)*x1117)));
evalcond[2]=((((-0.612)*x1139))+((x1130*x1136))+(((-0.5723)*x1117*x1124))+(((-1.0)*px))+(((0.163941)*x1116))+(((-0.1157)*x1118))+(((-0.1157)*x1129)));
evalcond[3]=((((-0.163941)*x1117))+(((-0.612)*x1135))+((x1130*x1138))+(((-0.5723)*x1116*x1124))+(((-1.0)*py))+(((-0.1157)*x1128))+(((-0.1157)*x1127)));
evalcond[4]=(((cj2*x1136))+(((-1.0)*cj4*x1119*x1126))+((sj2*x1139))+(((-1.0)*x1119*x1125))+((sj3*x1133))+((cj3*x1118))+((cj3*x1129)));
evalcond[5]=(((sj3*x1118))+(((-1.0)*x1131*x1136))+(((-1.0)*x1121*x1133))+((x1117*x1124))+((sj3*x1129))+((x1123*x1126))+((cj3*x1125)));
evalcond[6]=(((cj2*x1138))+(((-1.0)*cj4*x1119*x1122))+((sj2*x1135))+(((-1.0)*x1119*x1120))+((sj3*x1134))+((cj3*x1127))+((cj3*x1128)));
evalcond[7]=((((-1.0)*x1131*x1138))+(((-1.0)*x1121*x1134))+((sj3*x1128))+((sj3*x1127))+((x1122*x1123))+((x1116*x1124))+((cj3*x1120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1140=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1140);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1140);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1141=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1141);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1141);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1143=IKPowWithIntegerCheck(r22,-1);
if(!x1143.valid){
continue;
}
sj4array[0]=((-1.0)*(x1143.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
IkReal x1145=x1146.value;
j5array[0]=((-1.0)*x1145);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1145)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1147=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1147))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1147))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1147))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1148=IKcos(j0);
IkReal x1149=IKsin(j0);
IkReal x1150=(cj5*r01);
IkReal x1151=(sj4*sj5);
IkReal x1152=((0.1157)*sj5);
IkReal x1153=(cj2*sj1);
IkReal x1154=(cj5*r11);
IkReal x1155=(cj1*x1149);
IkReal x1156=((1.0)*cj5*sj4);
IkReal x1157=(cj1*x1148);
evalcond[0]=(x1149+(((-1.0)*r00*x1156))+((r01*x1151)));
evalcond[1]=(((r11*x1151))+(((-1.0)*x1148))+(((-1.0)*r10*x1156)));
evalcond[2]=(((r00*sj5))+x1150+((sj2*x1157))+((x1148*x1153)));
evalcond[3]=(x1154+((x1149*x1153))+((r10*sj5))+((sj2*x1155)));
evalcond[4]=((((0.163941)*x1149))+(((-1.0)*r00*x1152))+(((-1.0)*px))+(((-0.612)*x1157))+(((-0.1157)*x1150)));
evalcond[5]=((((-1.0)*py))+(((-0.612)*x1155))+(((-1.0)*r10*x1152))+(((-0.163941)*x1148))+(((-0.1157)*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(r22,-1);
if(!x1159.valid){
continue;
}
sj4array[0]=((x1159.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
IkReal x1161=x1162.value;
j5array[0]=((-1.0)*x1161);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1161)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1163=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1163))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1163))))+IKsqr(((((-1.0)*cj5*r10*x1163))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1163))), ((((-1.0)*cj5*r10*x1163))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1164=IKcos(j0);
IkReal x1165=IKsin(j0);
IkReal x1166=(cj5*r01);
IkReal x1167=(sj4*sj5);
IkReal x1168=((1.0)*cj5);
IkReal x1169=(r10*sj5);
IkReal x1170=(cj2*sj1);
IkReal x1171=(r00*sj5);
IkReal x1172=(cj1*x1165);
IkReal x1173=(cj1*x1164);
evalcond[0]=(x1165+((r01*x1167))+(((-1.0)*r00*sj4*x1168)));
evalcond[1]=((((-1.0)*r10*sj4*x1168))+((r11*x1167))+(((-1.0)*x1164)));
evalcond[2]=(((x1164*x1170))+(((-1.0)*x1166))+((sj2*x1173))+(((-1.0)*x1171)));
evalcond[3]=(((x1165*x1170))+(((-1.0)*r11*x1168))+(((-1.0)*x1169))+((sj2*x1172)));
evalcond[4]=((((-0.612)*x1173))+(((-0.1157)*x1171))+(((-1.0)*px))+(((-0.1157)*x1166))+(((0.163941)*x1165)));
evalcond[5]=((((-0.163941)*x1164))+(((-0.612)*x1172))+(((-1.0)*py))+(((-0.1157)*x1169))+(((-0.1157)*cj5*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1174=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1174);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1174);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(r22,-1);
if(!x1175.valid){
continue;
}
sj4array[0]=((x1175.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1178 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1178.valid){
continue;
}
IkReal x1177=x1178.value;
j5array[0]=((-1.0)*x1177);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1177)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1179=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1179))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1179))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1179))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1179))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1179))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1179))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1180=IKcos(j0);
IkReal x1181=IKsin(j0);
IkReal x1182=(cj5*r01);
IkReal x1183=(sj1*sj2);
IkReal x1184=(sj4*sj5);
IkReal x1185=(cj1*cj2);
IkReal x1186=((0.1157)*sj5);
IkReal x1187=((0.612)*cj1);
IkReal x1188=(cj5*r11);
IkReal x1189=((1.0)*x1180);
IkReal x1190=((0.5723)*x1180);
IkReal x1191=((1.0)*cj5*sj4);
IkReal x1192=((0.5723)*x1181);
evalcond[0]=((((-1.0)*r00*x1191))+x1181+((r01*x1184)));
evalcond[1]=((((-1.0)*r10*x1191))+(((-1.0)*x1189))+((r11*x1184)));
evalcond[2]=(((r00*sj5))+x1182+((x1180*x1185))+(((-1.0)*x1183*x1189)));
evalcond[3]=(x1188+(((-1.0)*x1181*x1183))+((r10*sj5))+((x1181*x1185)));
evalcond[4]=(((x1183*x1190))+(((0.163941)*x1181))+(((-1.0)*px))+(((-0.1157)*x1182))+(((-1.0)*x1180*x1187))+(((-1.0)*x1185*x1190))+(((-1.0)*r00*x1186)));
evalcond[5]=((((-1.0)*x1181*x1187))+((x1183*x1192))+(((-0.163941)*x1180))+(((-1.0)*r10*x1186))+(((-1.0)*py))+(((-0.1157)*x1188))+(((-1.0)*x1185*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1193=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1193);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1193);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(r22,-1);
if(!x1194.valid){
continue;
}
sj4array[0]=((-1.0)*(x1194.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1195=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1195);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1195);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
IkReal x1196=x1197.value;
j5array[0]=((-1.0)*x1196);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1196)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1198=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1198))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1198))))+IKsqr(((((-1.0)*cj5*r10*x1198))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1198))), ((((-1.0)*cj5*r10*x1198))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1199=IKcos(j0);
IkReal x1200=IKsin(j0);
IkReal x1201=(cj5*r01);
IkReal x1202=(sj1*sj2);
IkReal x1203=(sj4*sj5);
IkReal x1204=(cj1*cj2);
IkReal x1205=((1.0)*cj5);
IkReal x1206=(r10*sj5);
IkReal x1207=(r00*sj5);
IkReal x1208=((0.612)*cj1);
IkReal x1209=((1.0)*x1199);
IkReal x1210=((0.5723)*x1199);
IkReal x1211=((0.5723)*x1200);
evalcond[0]=(x1200+(((-1.0)*r00*sj4*x1205))+((r01*x1203)));
evalcond[1]=((((-1.0)*r10*sj4*x1205))+((r11*x1203))+(((-1.0)*x1209)));
evalcond[2]=(((x1199*x1204))+(((-1.0)*x1202*x1209))+(((-1.0)*x1207))+(((-1.0)*x1201)));
evalcond[3]=((((-1.0)*x1200*x1202))+((x1200*x1204))+(((-1.0)*x1206))+(((-1.0)*r11*x1205)));
evalcond[4]=((((-1.0)*x1204*x1210))+(((-1.0)*x1199*x1208))+(((-0.1157)*x1201))+(((-0.1157)*x1207))+(((0.163941)*x1200))+(((-1.0)*px))+((x1202*x1210)));
evalcond[5]=((((-1.0)*x1204*x1211))+(((-0.1157)*x1206))+(((-0.163941)*x1199))+(((-1.0)*py))+(((-1.0)*x1200*x1208))+(((-0.1157)*cj5*r11))+((x1202*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1212=IKPowWithIntegerCheck(r22,-1);
if(!x1212.valid){
continue;
}
CheckValue<IkReal> x1213=IKPowWithIntegerCheck(sj3,-1);
if(!x1213.valid){
continue;
}
sj4array[0]=((x1212.value)*(x1213.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1214=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1214);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1214);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1215=((4.0)*r01);
IkReal x1216=((16.0)*r00);
IkReal x1217=(cj3*sj2);
IkReal x1218=((8.0)*r00);
IkReal x1219=(cj2*cj3);
IkReal x1220=(cj4*r01);
IkReal x1221=((16.0)*cj1);
IkReal x1222=((8.0)*sj1);
IkReal x1223=((16.0)*sj1);
IkReal x1224=((8.0)*cj1);
IkReal x1225=(cj2*sj3);
IkReal x1226=(sj2*sj3);
IkReal x1227=(sj1*x1225);
IkReal x1228=((4.0)*cj4*r00);
IkReal x1229=(cj1*x1226);
IkReal x1230=(((sj1*x1215*x1217))+((x1215*x1227))+((x1215*x1229))+((sj1*x1226*x1228)));
IkReal x1231=(((cj1*x1225*x1228))+((sj1*x1219*x1228))+((cj1*x1217*x1228))+((cj1*x1215*x1219)));
IkReal x1232=(x1230+(((-1.0)*x1231)));
IkReal x1233=((((-1.0)*x1220*x1224*x1225))+(((-1.0)*x1218*x1229))+(((-1.0)*x1218*x1227))+(((-1.0)*x1219*x1220*x1222))+(((-1.0)*sj1*x1217*x1218))+((x1220*x1222*x1226))+(((-1.0)*x1217*x1220*x1224))+((cj1*x1218*x1219)));
IkReal x1234=(x1231+(((-1.0)*x1230)));
op[0]=x1232;
op[1]=x1233;
op[2]=x1232;
op[3]=((((-1.0)*x1219*x1220*x1223))+((x1220*x1223*x1226))+(((-1.0)*x1217*x1220*x1221))+(((-1.0)*sj1*x1216*x1217))+(((-1.0)*x1220*x1221*x1225))+(((-1.0)*x1216*x1227))+(((-1.0)*x1216*x1229))+((cj1*x1216*x1219)));
op[4]=x1234;
op[5]=x1233;
op[6]=x1234;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1235=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1235))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1235))))+IKsqr(((((-1.0)*cj5*r10*x1235))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1235))), ((((-1.0)*cj5*r10*x1235))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1236=IKcos(j0);
IkReal x1237=IKsin(j0);
IkReal x1238=(cj5*r01);
IkReal x1239=((1.0)*cj3);
IkReal x1240=((1.0)*sj1);
IkReal x1241=(r11*sj5);
IkReal x1242=(cj1*cj2);
IkReal x1243=(r01*sj5);
IkReal x1244=(r10*sj5);
IkReal x1245=(cj5*r11);
IkReal x1246=(cj2*sj1);
IkReal x1247=(cj3*cj4);
IkReal x1248=(r00*sj5);
IkReal x1249=((0.612)*cj1);
IkReal x1250=((0.5723)*sj1);
IkReal x1251=(cj4*cj5*r00);
IkReal x1252=(sj2*x1237);
IkReal x1253=(cj4*cj5*r10);
IkReal x1254=((1.0)*cj4*sj3);
IkReal x1255=(sj2*x1236);
IkReal x1256=((1.0)*cj5*sj4);
evalcond[0]=(x1237+(((-1.0)*r00*x1256))+((sj4*x1243)));
evalcond[1]=((((-1.0)*x1236))+((sj4*x1241))+(((-1.0)*r10*x1256)));
evalcond[2]=(((cj3*x1238))+((x1236*x1246))+((cj1*x1255))+((sj3*x1251))+(((-1.0)*x1243*x1254))+((cj3*x1248)));
evalcond[3]=((((-1.0)*x1241*x1254))+((cj1*x1252))+((sj3*x1253))+((cj3*x1244))+((cj3*x1245))+((x1237*x1246)));
evalcond[4]=(((x1236*x1242))+((sj3*x1238))+((sj3*x1248))+(((-1.0)*x1239*x1251))+((x1243*x1247))+(((-1.0)*x1240*x1255)));
evalcond[5]=(((sj3*x1244))+((sj3*x1245))+(((-1.0)*x1239*x1253))+((x1241*x1247))+(((-1.0)*x1240*x1252))+((x1237*x1242)));
evalcond[6]=((((-1.0)*x1236*x1249))+(((-0.1157)*x1248))+(((-1.0)*px))+((x1250*x1255))+(((-0.5723)*x1236*x1242))+(((-0.1157)*x1238))+(((0.163941)*x1237)));
evalcond[7]=((((-0.5723)*x1237*x1242))+(((-0.163941)*x1236))+(((-0.1157)*x1245))+(((-0.1157)*x1244))+(((-1.0)*py))+((x1250*x1252))+(((-1.0)*x1237*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1257=IKPowWithIntegerCheck(cj3,-1);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(r22,-1);
if(!x1258.valid){
continue;
}
sj4array[0]=((-1.0)*(x1257.value)*(x1258.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1259=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1259);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1259);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1260=((4.0)*r01);
IkReal x1261=((16.0)*r00);
IkReal x1262=(cj3*sj2);
IkReal x1263=((8.0)*r00);
IkReal x1264=(cj2*cj3);
IkReal x1265=(cj4*r01);
IkReal x1266=((16.0)*cj1);
IkReal x1267=((8.0)*sj1);
IkReal x1268=((16.0)*sj1);
IkReal x1269=((8.0)*cj1);
IkReal x1270=(cj2*sj3);
IkReal x1271=(sj2*sj3);
IkReal x1272=(sj1*x1270);
IkReal x1273=((4.0)*cj4*r00);
IkReal x1274=(cj1*x1271);
IkReal x1275=(((sj1*x1271*x1273))+((x1260*x1274))+((x1260*x1272))+((sj1*x1260*x1262)));
IkReal x1276=(((cj1*x1260*x1264))+((sj1*x1264*x1273))+((cj1*x1262*x1273))+((cj1*x1270*x1273)));
IkReal x1277=(x1275+(((-1.0)*x1276)));
IkReal x1278=((((-1.0)*x1265*x1269*x1270))+(((-1.0)*x1263*x1274))+(((-1.0)*x1263*x1272))+(((-1.0)*x1264*x1265*x1267))+(((-1.0)*x1262*x1265*x1269))+(((-1.0)*sj1*x1262*x1263))+((x1265*x1267*x1271))+((cj1*x1263*x1264)));
IkReal x1279=(x1276+(((-1.0)*x1275)));
op[0]=x1277;
op[1]=x1278;
op[2]=x1277;
op[3]=((((-1.0)*sj1*x1261*x1262))+(((-1.0)*x1261*x1272))+(((-1.0)*x1261*x1274))+((cj1*x1261*x1264))+(((-1.0)*x1264*x1265*x1268))+((x1265*x1268*x1271))+(((-1.0)*x1265*x1266*x1270))+(((-1.0)*x1262*x1265*x1266)));
op[4]=x1279;
op[5]=x1278;
op[6]=x1279;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1280=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1280))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1280))))+IKsqr(((((-1.0)*cj5*r10*x1280))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1280))), ((((-1.0)*cj5*r10*x1280))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1281=IKcos(j0);
IkReal x1282=IKsin(j0);
IkReal x1283=(cj5*r01);
IkReal x1284=((1.0)*cj3);
IkReal x1285=((1.0)*sj1);
IkReal x1286=(r11*sj5);
IkReal x1287=(cj1*cj2);
IkReal x1288=(r01*sj5);
IkReal x1289=(r10*sj5);
IkReal x1290=(cj5*r11);
IkReal x1291=(cj2*sj1);
IkReal x1292=(cj3*cj4);
IkReal x1293=(r00*sj5);
IkReal x1294=((0.612)*cj1);
IkReal x1295=((0.5723)*sj1);
IkReal x1296=(cj4*cj5*r00);
IkReal x1297=(sj2*x1282);
IkReal x1298=(cj4*cj5*r10);
IkReal x1299=((1.0)*cj4*sj3);
IkReal x1300=(sj2*x1281);
IkReal x1301=((1.0)*cj5*sj4);
evalcond[0]=(x1282+(((-1.0)*r00*x1301))+((sj4*x1288)));
evalcond[1]=((((-1.0)*x1281))+((sj4*x1286))+(((-1.0)*r10*x1301)));
evalcond[2]=(((cj3*x1293))+((sj3*x1296))+(((-1.0)*x1288*x1299))+((x1281*x1291))+((cj1*x1300))+((cj3*x1283)));
evalcond[3]=((((-1.0)*x1286*x1299))+((cj3*x1290))+((sj3*x1298))+((x1282*x1291))+((cj1*x1297))+((cj3*x1289)));
evalcond[4]=((((-1.0)*x1284*x1296))+((sj3*x1293))+((x1288*x1292))+((sj3*x1283))+((x1281*x1287))+(((-1.0)*x1285*x1300)));
evalcond[5]=((((-1.0)*x1284*x1298))+((x1286*x1292))+((sj3*x1290))+((sj3*x1289))+((x1282*x1287))+(((-1.0)*x1285*x1297)));
evalcond[6]=((((-0.1157)*x1283))+((x1295*x1300))+(((-1.0)*x1281*x1294))+(((-0.5723)*x1281*x1287))+(((-1.0)*px))+(((0.163941)*x1282))+(((-0.1157)*x1293)));
evalcond[7]=((((-0.163941)*x1281))+((x1295*x1297))+(((-0.1157)*x1289))+(((-1.0)*x1282*x1294))+(((-1.0)*py))+(((-0.1157)*x1290))+(((-0.5723)*x1282*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1304 = IKatan2WithCheck(IkReal(((-0.1157)*r21)),IkReal(((-0.1157)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1304.valid){
continue;
}
IkReal x1302=((1.0)*(x1304.value));
if((((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21)))))),-1);
if(!x1305.valid){
continue;
}
if( (((-1.0)*(x1305.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1305.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1303=((-1.0)*(IKasin(((-1.0)*(x1305.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1))))))));
j5array[0]=((((-1.0)*x1303))+(((-1.0)*x1302)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1302))+(((1.0)*x1303)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1306=cj5*cj5;
IkReal x1307=r21*r21;
IkReal x1308=(sj3*x1306);
IkReal x1309=(((sj3*(r22*r22)))+((x1308*(r20*r20)))+((sj3*x1307))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1307*x1308)));
j4eval[0]=x1309;
j4eval[1]=IKsign(x1309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1310=cj5*cj5;
IkReal x1311=r21*r21;
IkReal x1312=((1.0)*cj3);
IkReal x1313=(cj3*x1310);
IkReal x1314=((((-1.0)*x1311*x1312))+((x1311*x1313))+(((-1.0)*x1312*(r22*r22)))+(((-1.0)*x1310*x1312*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1315=cj1*cj1;
IkReal x1316=cj2*cj2;
IkReal x1317=(cj1*sj1*sj2);
IkReal x1318=(cj2*x1315);
IkReal x1319=(x1315*x1316);
j0eval[0]=((-7.53782945427275)+(((-1.0)*x1315))+(((14.8988561726246)*x1317))+(((6.96618904215118)*x1316))+(((-14.8988561726246)*x1318))+(((13.9323780843024)*cj2*x1317))+(((-13.9323780843024)*x1319)));
j0eval[1]=IKsign(((-354403941481.0)+(((327527290000.0)*x1316))+(((-47016710000.0)*x1315))+(((-700495200000.0)*x1318))+(((655054580000.0)*cj2*x1317))+(((700495200000.0)*x1317))+(((-655054580000.0)*x1319))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1320=((1.0)*cj5);
IkReal x1321=((1.0)*sj5);
IkReal x1322=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1322;
j0eval[1]=IKsign(x1322);
j0eval[2]=((IKabs(((((-1.0)*r01*x1320))+(((-1.0)*r00*x1321)))))+(IKabs(((((-1.0)*r11*x1320))+(((-1.0)*r10*x1321))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1323=cj5*cj5;
IkReal x1324=r21*r21;
IkReal x1325=(sj1*sj2);
IkReal x1326=(r21*sj5);
IkReal x1327=(cj5*r20);
IkReal x1328=(cj1*cj2);
IkReal x1329=(x1324+(((-1.0)*x1323*x1324))+((x1323*(r20*r20)))+(r22*r22)+(((-2.0)*x1326*x1327)));
j4eval[0]=x1329;
j4eval[1]=IKsign(x1329);
j4eval[2]=((IKabs(((((-1.0)*r22*x1328))+((r22*x1325)))))+(IKabs((((x1327*x1328))+((x1325*x1326))+(((-1.0)*x1325*x1327))+(((-1.0)*x1326*x1328))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1330=IKsin(j0);
IkReal x1331=IKcos(j0);
evalcond[0]=((((0.163941)*x1330))+(((-1.0)*px))+(((-0.612)*x1331)));
evalcond[1]=((((-1.0)*py))+(((-0.163941)*x1331))+(((-0.612)*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1332=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1332;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1333=cj5*cj5;
IkReal x1334=((1.0)*r21);
IkReal x1335=(cj5*sj5);
IkReal x1336=((1.0)*r20);
IkReal x1337=((((-1.0)*r01*x1333*x1334))+((r01*r21))+(((-1.0)*r00*x1334*x1335))+((r00*r20*x1333))+((r02*r22))+(((-1.0)*r01*x1335*x1336)));
j4eval[0]=x1337;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1336))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1338=cj5*cj5;
IkReal x1339=(r21*sj5);
IkReal x1340=(r11*r21);
IkReal x1341=((1.0)*cj5*r20);
IkReal x1342=(x1340+((r10*r20*x1338))+(((-1.0)*cj5*r10*x1339))+((r12*r22))+(((-1.0)*r11*sj5*x1341))+(((-1.0)*x1338*x1340)));
j4eval[0]=x1342;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1341))+((sj0*x1339)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1343=cj5*cj5;
IkReal x1344=(r21*sj5);
IkReal x1345=(r11*r21);
IkReal x1346=((1.0)*cj5*r20);
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(IKsign((x1345+(((-1.0)*cj5*r10*x1344))+((r12*r22))+((r10*r20*x1343))+(((-1.0)*x1343*x1345))+(((-1.0)*r11*sj5*x1346)))),-1);
if(!x1347.valid){
continue;
}
CheckValue<IkReal> x1348 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1344))+(((-1.0)*sj0*x1346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1347.value)))+(x1348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1349=IKsin(j4);
IkReal x1350=IKcos(j4);
IkReal x1351=(r11*sj5);
IkReal x1352=(cj5*r00);
IkReal x1353=(cj5*r10);
IkReal x1354=(r21*sj5);
IkReal x1355=(cj5*r20);
IkReal x1356=(r01*sj5);
IkReal x1357=((1.0)*x1350);
IkReal x1358=((1.0)*x1349);
evalcond[0]=((((-1.0)*x1355*x1358))+(((-1.0)*r22*x1357))+((x1349*x1354)));
evalcond[1]=((((-1.0)*x1354*x1357))+(((-1.0)*r22*x1358))+((x1350*x1355)));
evalcond[2]=((((-1.0)*x1352*x1358))+sj0+(((-1.0)*r02*x1357))+((x1349*x1356)));
evalcond[3]=(cj0+(((-1.0)*r02*x1358))+(((-1.0)*x1356*x1357))+((x1350*x1352)));
evalcond[4]=((((-1.0)*r12*x1358))+sj0+((x1350*x1353))+(((-1.0)*x1351*x1357)));
evalcond[5]=((((-1.0)*r12*x1357))+((x1349*x1351))+(((-1.0)*cj0))+(((-1.0)*x1353*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1359=cj5*cj5;
IkReal x1360=((1.0)*r21);
IkReal x1361=(cj5*sj5);
IkReal x1362=((1.0)*r20);
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1362))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
CheckValue<IkReal> x1364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1361*x1362))+(((-1.0)*r00*x1360*x1361))+((r01*r21))+(((-1.0)*r01*x1359*x1360))+((r00*r20*x1359))+((r02*r22)))),-1);
if(!x1364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1363.value)+(((1.5707963267949)*(x1364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1365=IKsin(j4);
IkReal x1366=IKcos(j4);
IkReal x1367=(r11*sj5);
IkReal x1368=(cj5*r00);
IkReal x1369=(cj5*r10);
IkReal x1370=(r21*sj5);
IkReal x1371=(cj5*r20);
IkReal x1372=(r01*sj5);
IkReal x1373=((1.0)*x1366);
IkReal x1374=((1.0)*x1365);
evalcond[0]=(((x1365*x1370))+(((-1.0)*x1371*x1374))+(((-1.0)*r22*x1373)));
evalcond[1]=((((-1.0)*x1370*x1373))+((x1366*x1371))+(((-1.0)*r22*x1374)));
evalcond[2]=(((x1365*x1372))+sj0+(((-1.0)*r02*x1373))+(((-1.0)*x1368*x1374)));
evalcond[3]=(((x1366*x1368))+cj0+(((-1.0)*x1372*x1373))+(((-1.0)*r02*x1374)));
evalcond[4]=(((x1366*x1369))+sj0+(((-1.0)*r12*x1374))+(((-1.0)*x1367*x1373)));
evalcond[5]=(((x1365*x1367))+(((-1.0)*r12*x1373))+(((-1.0)*x1369*x1374))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=(r11*sj5);
IkReal x1380=(cj5*r00);
IkReal x1381=(cj5*r10);
IkReal x1382=(r21*sj5);
IkReal x1383=(cj5*r20);
IkReal x1384=(r01*sj5);
IkReal x1385=((1.0)*x1378);
IkReal x1386=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1383*x1386))+((x1377*x1382))+(((-1.0)*r22*x1385)));
evalcond[1]=((((-1.0)*x1382*x1385))+(((-1.0)*r22*x1386))+((x1378*x1383)));
evalcond[2]=(sj0+(((-1.0)*r02*x1385))+(((-1.0)*x1380*x1386))+((x1377*x1384)));
evalcond[3]=(cj0+(((-1.0)*x1384*x1385))+(((-1.0)*r02*x1386))+((x1378*x1380)));
evalcond[4]=((((-1.0)*r12*x1386))+sj0+((x1378*x1381))+(((-1.0)*x1379*x1385)));
evalcond[5]=((((-1.0)*r12*x1385))+((x1377*x1379))+(((-1.0)*x1381*x1386))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1387=IKsin(j0);
IkReal x1388=IKcos(j0);
evalcond[0]=((((0.163941)*x1387))+(((-1.0)*px))+(((-0.612)*x1388)));
evalcond[1]=((((-0.163941)*x1388))+(((-1.0)*py))+(((-0.612)*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1389=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1389;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1390=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1390;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1391=cj5*cj5;
IkReal x1392=((1.0)*r21);
IkReal x1393=(cj5*r20);
IkReal x1394=((((-1.0)*r01*x1391*x1392))+(((-1.0)*r01*sj5*x1393))+(((-1.0)*cj5*r00*sj5*x1392))+((r01*r21))+((r02*r22))+((r00*r20*x1391)));
j4eval[0]=x1394;
j4eval[1]=IKsign(x1394);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1392))+((sj0*x1393))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1395=cj5*cj5;
IkReal x1396=((1.0)*r21);
IkReal x1397=(cj5*r20);
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1397))+(((-1.0)*cj5*r00*sj5*x1396))+(((-1.0)*r01*x1395*x1396))+((r01*r21))+((r02*r22))+((r00*r20*x1395)))),-1);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1396))+((sj0*x1397)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1398.value)))+(x1399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKsin(j4);
IkReal x1401=IKcos(j4);
IkReal x1402=((1.0)*cj0);
IkReal x1403=(cj5*r00);
IkReal x1404=(r11*sj5);
IkReal x1405=(cj5*r10);
IkReal x1406=(r21*sj5);
IkReal x1407=(cj5*r20);
IkReal x1408=(r01*sj5);
IkReal x1409=((1.0)*x1401);
IkReal x1410=((1.0)*x1400);
evalcond[0]=((((-1.0)*r22*x1409))+(((-1.0)*x1407*x1410))+((x1400*x1406)));
evalcond[1]=((((-1.0)*r22*x1410))+(((-1.0)*x1406*x1409))+((x1401*x1407)));
evalcond[2]=(sj0+(((-1.0)*r02*x1409))+(((-1.0)*x1403*x1410))+((x1400*x1408)));
evalcond[3]=((((-1.0)*r12*x1409))+(((-1.0)*x1402))+(((-1.0)*x1405*x1410))+((x1400*x1404)));
evalcond[4]=((((-1.0)*r02*x1410))+(((-1.0)*x1402))+((x1401*x1403))+(((-1.0)*x1408*x1409)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1404*x1409))+(((-1.0)*r12*x1410))+((x1401*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1411.value)))+(x1412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1413=IKsin(j4);
IkReal x1414=IKcos(j4);
IkReal x1415=((1.0)*cj0);
IkReal x1416=(cj5*r00);
IkReal x1417=(r11*sj5);
IkReal x1418=(cj5*r10);
IkReal x1419=(r21*sj5);
IkReal x1420=(cj5*r20);
IkReal x1421=(r01*sj5);
IkReal x1422=((1.0)*x1414);
IkReal x1423=((1.0)*x1413);
evalcond[0]=(((x1413*x1419))+(((-1.0)*x1420*x1423))+(((-1.0)*r22*x1422)));
evalcond[1]=(((x1414*x1420))+(((-1.0)*x1419*x1422))+(((-1.0)*r22*x1423)));
evalcond[2]=(sj0+(((-1.0)*x1416*x1423))+(((-1.0)*r02*x1422))+((x1413*x1421)));
evalcond[3]=(((x1413*x1417))+(((-1.0)*x1415))+(((-1.0)*x1418*x1423))+(((-1.0)*r12*x1422)));
evalcond[4]=((((-1.0)*x1421*x1422))+(((-1.0)*x1415))+(((-1.0)*r02*x1423))+((x1414*x1416)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1417*x1422))+(((-1.0)*r12*x1423))+((x1414*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1424.valid){
continue;
}
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1424.value)))+(x1425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1426=IKsin(j4);
IkReal x1427=IKcos(j4);
IkReal x1428=((1.0)*cj0);
IkReal x1429=(cj5*r00);
IkReal x1430=(r11*sj5);
IkReal x1431=(cj5*r10);
IkReal x1432=(r21*sj5);
IkReal x1433=(cj5*r20);
IkReal x1434=(r01*sj5);
IkReal x1435=((1.0)*x1427);
IkReal x1436=((1.0)*x1426);
evalcond[0]=((((-1.0)*r22*x1435))+((x1426*x1432))+(((-1.0)*x1433*x1436)));
evalcond[1]=((((-1.0)*r22*x1436))+((x1427*x1433))+(((-1.0)*x1432*x1435)));
evalcond[2]=(sj0+(((-1.0)*x1429*x1436))+(((-1.0)*r02*x1435))+((x1426*x1434)));
evalcond[3]=((((-1.0)*r12*x1435))+(((-1.0)*x1431*x1436))+((x1426*x1430))+(((-1.0)*x1428)));
evalcond[4]=((((-1.0)*x1434*x1435))+(((-1.0)*r02*x1436))+((x1427*x1429))+(((-1.0)*x1428)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1436))+((x1427*x1431))+(((-1.0)*x1430*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1437=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1437;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1438=cj5*cj5;
IkReal x1439=((1.0)*r21);
IkReal x1440=(cj5*sj5);
IkReal x1441=((1.0)*r20);
IkReal x1442=(((r01*r21))+(((-1.0)*r00*x1439*x1440))+(((-1.0)*r01*x1440*x1441))+(((-1.0)*r01*x1438*x1439))+((r00*r20*x1438))+((r02*r22)));
j4eval[0]=x1442;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1441)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1443=cj5*cj5;
IkReal x1444=(r21*sj5);
IkReal x1445=(r11*r21);
IkReal x1446=((1.0)*cj5*r20);
IkReal x1447=((((-1.0)*x1443*x1445))+((r12*r22))+x1445+(((-1.0)*cj5*r10*x1444))+((r10*r20*x1443))+(((-1.0)*r11*sj5*x1446)));
j4eval[0]=x1447;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1444))+(((-1.0)*sj0*x1446))))));
j4eval[2]=IKsign(x1447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1448=cj5*cj5;
IkReal x1449=(r21*sj5);
IkReal x1450=(r11*r21);
IkReal x1451=((1.0)*cj5*r20);
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1451))+((r12*r22))+(((-1.0)*x1448*x1450))+x1450+(((-1.0)*cj5*r10*x1449))+((r10*r20*x1448)))),-1);
if(!x1452.valid){
continue;
}
CheckValue<IkReal> x1453 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1451))+((sj0*x1449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1452.value)))+(x1453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1454=IKsin(j4);
IkReal x1455=IKcos(j4);
IkReal x1456=(r11*sj5);
IkReal x1457=(cj5*r00);
IkReal x1458=(cj5*r10);
IkReal x1459=(r21*sj5);
IkReal x1460=(cj5*r20);
IkReal x1461=(r01*sj5);
IkReal x1462=((1.0)*x1455);
IkReal x1463=((1.0)*x1454);
evalcond[0]=(((x1454*x1459))+(((-1.0)*r22*x1462))+(((-1.0)*x1460*x1463)));
evalcond[1]=((((-1.0)*x1459*x1462))+(((-1.0)*r22*x1463))+((x1455*x1460)));
evalcond[2]=(sj0+(((-1.0)*r02*x1462))+((x1454*x1461))+(((-1.0)*x1457*x1463)));
evalcond[3]=(((x1455*x1457))+(((-1.0)*r02*x1463))+cj0+(((-1.0)*x1461*x1462)));
evalcond[4]=(((x1455*x1458))+sj0+(((-1.0)*x1456*x1462))+(((-1.0)*r12*x1463)));
evalcond[5]=((((-1.0)*x1458*x1463))+((x1454*x1456))+(((-1.0)*r12*x1462))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1464=cj5*cj5;
IkReal x1465=((1.0)*r21);
IkReal x1466=(cj5*sj5);
IkReal x1467=((1.0)*r20);
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
CheckValue<IkReal> x1469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1465*x1466))+(((-1.0)*r01*x1466*x1467))+((r01*r21))+(((-1.0)*r01*x1464*x1465))+((r00*r20*x1464))+((r02*r22)))),-1);
if(!x1469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1468.value)+(((1.5707963267949)*(x1469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1470=IKsin(j4);
IkReal x1471=IKcos(j4);
IkReal x1472=(r11*sj5);
IkReal x1473=(cj5*r00);
IkReal x1474=(cj5*r10);
IkReal x1475=(r21*sj5);
IkReal x1476=(cj5*r20);
IkReal x1477=(r01*sj5);
IkReal x1478=((1.0)*x1471);
IkReal x1479=((1.0)*x1470);
evalcond[0]=((((-1.0)*r22*x1478))+(((-1.0)*x1476*x1479))+((x1470*x1475)));
evalcond[1]=((((-1.0)*r22*x1479))+((x1471*x1476))+(((-1.0)*x1475*x1478)));
evalcond[2]=(sj0+((x1470*x1477))+(((-1.0)*r02*x1478))+(((-1.0)*x1473*x1479)));
evalcond[3]=(((x1471*x1473))+cj0+(((-1.0)*x1477*x1478))+(((-1.0)*r02*x1479)));
evalcond[4]=(((x1471*x1474))+sj0+(((-1.0)*r12*x1479))+(((-1.0)*x1472*x1478)));
evalcond[5]=((((-1.0)*r12*x1478))+(((-1.0)*x1474*x1479))+((x1470*x1472))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1480.valid){
continue;
}
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1480.value)))+(x1481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1482=IKsin(j4);
IkReal x1483=IKcos(j4);
IkReal x1484=(r11*sj5);
IkReal x1485=(cj5*r00);
IkReal x1486=(cj5*r10);
IkReal x1487=(r21*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=(r01*sj5);
IkReal x1490=((1.0)*x1483);
IkReal x1491=((1.0)*x1482);
evalcond[0]=(((x1482*x1487))+(((-1.0)*r22*x1490))+(((-1.0)*x1488*x1491)));
evalcond[1]=((((-1.0)*x1487*x1490))+((x1483*x1488))+(((-1.0)*r22*x1491)));
evalcond[2]=(sj0+((x1482*x1489))+(((-1.0)*x1485*x1491))+(((-1.0)*r02*x1490)));
evalcond[3]=(cj0+((x1483*x1485))+(((-1.0)*r02*x1491))+(((-1.0)*x1489*x1490)));
evalcond[4]=((((-1.0)*r12*x1491))+sj0+(((-1.0)*x1484*x1490))+((x1483*x1486)));
evalcond[5]=((((-1.0)*r12*x1490))+((x1482*x1484))+(((-1.0)*x1486*x1491))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1492=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1492;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1493=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1493;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1494=cj5*cj5;
IkReal x1495=((1.0)*r21);
IkReal x1496=(cj5*r20);
IkReal x1497=(((r01*r21))+(((-1.0)*r01*sj5*x1496))+(((-1.0)*cj5*r00*sj5*x1495))+((r00*r20*x1494))+((r02*r22))+(((-1.0)*r01*x1494*x1495)));
j4eval[0]=x1497;
j4eval[1]=IKsign(x1497);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1496))+(((-1.0)*sj0*sj5*x1495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=cj5*cj5;
IkReal x1499=((1.0)*r21);
IkReal x1500=(cj5*r20);
CheckValue<IkReal> x1501=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*cj5*r00*sj5*x1499))+((r00*r20*x1498))+(((-1.0)*r01*x1498*x1499))+(((-1.0)*r01*sj5*x1500))+((r02*r22)))),-1);
if(!x1501.valid){
continue;
}
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((((sj0*x1500))+(((-1.0)*sj0*sj5*x1499)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1501.value)))+(x1502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1503=IKsin(j4);
IkReal x1504=IKcos(j4);
IkReal x1505=((1.0)*cj0);
IkReal x1506=(cj5*r00);
IkReal x1507=(r11*sj5);
IkReal x1508=(cj5*r10);
IkReal x1509=(r21*sj5);
IkReal x1510=(cj5*r20);
IkReal x1511=(r01*sj5);
IkReal x1512=((1.0)*x1504);
IkReal x1513=((1.0)*x1503);
evalcond[0]=((((-1.0)*r22*x1512))+(((-1.0)*x1510*x1513))+((x1503*x1509)));
evalcond[1]=((((-1.0)*r22*x1513))+((x1504*x1510))+(((-1.0)*x1509*x1512)));
evalcond[2]=(sj0+(((-1.0)*x1506*x1513))+(((-1.0)*r02*x1512))+((x1503*x1511)));
evalcond[3]=((((-1.0)*x1505))+((x1503*x1507))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1512)));
evalcond[4]=((((-1.0)*x1505))+((x1504*x1506))+(((-1.0)*r02*x1513))+(((-1.0)*x1511*x1512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1507*x1512))+((x1504*x1508))+(((-1.0)*r12*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1514.valid){
continue;
}
CheckValue<IkReal> x1515 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1514.value)))+(x1515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1516=IKsin(j4);
IkReal x1517=IKcos(j4);
IkReal x1518=((1.0)*cj0);
IkReal x1519=(cj5*r00);
IkReal x1520=(r11*sj5);
IkReal x1521=(cj5*r10);
IkReal x1522=(r21*sj5);
IkReal x1523=(cj5*r20);
IkReal x1524=(r01*sj5);
IkReal x1525=((1.0)*x1517);
IkReal x1526=((1.0)*x1516);
evalcond[0]=((((-1.0)*r22*x1525))+((x1516*x1522))+(((-1.0)*x1523*x1526)));
evalcond[1]=((((-1.0)*r22*x1526))+((x1517*x1523))+(((-1.0)*x1522*x1525)));
evalcond[2]=(sj0+(((-1.0)*x1519*x1526))+(((-1.0)*r02*x1525))+((x1516*x1524)));
evalcond[3]=((((-1.0)*r12*x1525))+(((-1.0)*x1518))+((x1516*x1520))+(((-1.0)*x1521*x1526)));
evalcond[4]=((((-1.0)*x1518))+(((-1.0)*x1524*x1525))+(((-1.0)*r02*x1526))+((x1517*x1519)));
evalcond[5]=((((-1.0)*r12*x1526))+(((-1.0)*sj0))+((x1517*x1521))+(((-1.0)*x1520*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1527.value)))+(x1528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1529=IKsin(j4);
IkReal x1530=IKcos(j4);
IkReal x1531=((1.0)*cj0);
IkReal x1532=(cj5*r00);
IkReal x1533=(r11*sj5);
IkReal x1534=(cj5*r10);
IkReal x1535=(r21*sj5);
IkReal x1536=(cj5*r20);
IkReal x1537=(r01*sj5);
IkReal x1538=((1.0)*x1530);
IkReal x1539=((1.0)*x1529);
evalcond[0]=((((-1.0)*r22*x1538))+((x1529*x1535))+(((-1.0)*x1536*x1539)));
evalcond[1]=((((-1.0)*r22*x1539))+((x1530*x1536))+(((-1.0)*x1535*x1538)));
evalcond[2]=(sj0+(((-1.0)*x1532*x1539))+(((-1.0)*r02*x1538))+((x1529*x1537)));
evalcond[3]=((((-1.0)*r12*x1538))+(((-1.0)*x1531))+((x1529*x1533))+(((-1.0)*x1534*x1539)));
evalcond[4]=((((-1.0)*x1531))+(((-1.0)*x1537*x1538))+((x1530*x1532))+(((-1.0)*r02*x1539)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1539))+((x1530*x1534))+(((-1.0)*x1533*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((0.408402007707268)*px))), ((((1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1540=IKsin(j0);
IkReal x1541=IKcos(j0);
evalcond[0]=((((0.163941)*x1540))+(((0.612)*x1541))+(((-1.0)*px)));
evalcond[1]=((((0.612)*x1540))+(((-1.0)*py))+(((-0.163941)*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1542=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1542;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1543=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1543;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1544=cj5*cj5;
IkReal x1545=((1.0)*r21);
IkReal x1546=(cj5*r20);
IkReal x1547=((((-1.0)*cj5*r00*sj5*x1545))+(((-1.0)*r01*sj5*x1546))+((r01*r21))+(((-1.0)*r01*x1544*x1545))+((r00*r20*x1544))+((r02*r22)));
j4eval[0]=x1547;
j4eval[1]=IKsign(x1547);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1546))+(((-1.0)*sj0*sj5*x1545))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1548=cj5*cj5;
IkReal x1549=((1.0)*r21);
IkReal x1550=(cj5*r20);
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1550))+(((-1.0)*cj5*r00*sj5*x1549))+((r01*r21))+((r00*r20*x1548))+((r02*r22))+(((-1.0)*r01*x1548*x1549)))),-1);
if(!x1551.valid){
continue;
}
CheckValue<IkReal> x1552 = IKatan2WithCheck(IkReal((((sj0*x1550))+(((-1.0)*sj0*sj5*x1549)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1551.value)))+(x1552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1553=IKsin(j4);
IkReal x1554=IKcos(j4);
IkReal x1555=((1.0)*cj0);
IkReal x1556=(cj5*r00);
IkReal x1557=(r11*sj5);
IkReal x1558=(cj5*r10);
IkReal x1559=(r21*sj5);
IkReal x1560=(cj5*r20);
IkReal x1561=(r01*sj5);
IkReal x1562=((1.0)*x1554);
IkReal x1563=((1.0)*x1553);
evalcond[0]=(((x1553*x1559))+(((-1.0)*x1560*x1563))+(((-1.0)*r22*x1562)));
evalcond[1]=((((-1.0)*x1559*x1562))+((x1554*x1560))+(((-1.0)*r22*x1563)));
evalcond[2]=(sj0+(((-1.0)*r02*x1562))+((x1553*x1561))+(((-1.0)*x1556*x1563)));
evalcond[3]=(((x1553*x1557))+(((-1.0)*r12*x1562))+(((-1.0)*x1555))+(((-1.0)*x1558*x1563)));
evalcond[4]=((((-1.0)*r02*x1563))+((x1554*x1556))+(((-1.0)*x1555))+(((-1.0)*x1561*x1562)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1557*x1562))+((x1554*x1558))+(((-1.0)*r12*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1564.valid){
continue;
}
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1564.value)))+(x1565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1566=IKsin(j4);
IkReal x1567=IKcos(j4);
IkReal x1568=((1.0)*cj0);
IkReal x1569=(cj5*r00);
IkReal x1570=(r11*sj5);
IkReal x1571=(cj5*r10);
IkReal x1572=(r21*sj5);
IkReal x1573=(cj5*r20);
IkReal x1574=(r01*sj5);
IkReal x1575=((1.0)*x1567);
IkReal x1576=((1.0)*x1566);
evalcond[0]=(((x1566*x1572))+(((-1.0)*x1573*x1576))+(((-1.0)*r22*x1575)));
evalcond[1]=(((x1567*x1573))+(((-1.0)*x1572*x1575))+(((-1.0)*r22*x1576)));
evalcond[2]=((((-1.0)*r02*x1575))+((x1566*x1574))+sj0+(((-1.0)*x1569*x1576)));
evalcond[3]=((((-1.0)*x1571*x1576))+((x1566*x1570))+(((-1.0)*r12*x1575))+(((-1.0)*x1568)));
evalcond[4]=(((x1567*x1569))+(((-1.0)*r02*x1576))+(((-1.0)*x1574*x1575))+(((-1.0)*x1568)));
evalcond[5]=(((x1567*x1571))+(((-1.0)*sj0))+(((-1.0)*x1570*x1575))+(((-1.0)*r12*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1577.value)))+(x1578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1579=IKsin(j4);
IkReal x1580=IKcos(j4);
IkReal x1581=((1.0)*cj0);
IkReal x1582=(cj5*r00);
IkReal x1583=(r11*sj5);
IkReal x1584=(cj5*r10);
IkReal x1585=(r21*sj5);
IkReal x1586=(cj5*r20);
IkReal x1587=(r01*sj5);
IkReal x1588=((1.0)*x1580);
IkReal x1589=((1.0)*x1579);
evalcond[0]=((((-1.0)*r22*x1588))+((x1579*x1585))+(((-1.0)*x1586*x1589)));
evalcond[1]=((((-1.0)*x1585*x1588))+((x1580*x1586))+(((-1.0)*r22*x1589)));
evalcond[2]=(sj0+(((-1.0)*r02*x1588))+((x1579*x1587))+(((-1.0)*x1582*x1589)));
evalcond[3]=((((-1.0)*x1581))+(((-1.0)*x1584*x1589))+((x1579*x1583))+(((-1.0)*r12*x1588)));
evalcond[4]=((((-1.0)*x1581))+(((-1.0)*r02*x1589))+((x1580*x1582))+(((-1.0)*x1587*x1588)));
evalcond[5]=((((-1.0)*sj0))+((x1580*x1584))+(((-1.0)*r12*x1589))+(((-1.0)*x1583*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((0.408402007707268)*px))), ((((1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1590=IKsin(j0);
IkReal x1591=IKcos(j0);
evalcond[0]=((((0.163941)*x1590))+(((0.612)*x1591))+(((-1.0)*px)));
evalcond[1]=((((0.612)*x1590))+(((-1.0)*py))+(((-0.163941)*x1591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1592=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1592;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1593=cj5*cj5;
IkReal x1594=((1.0)*r21);
IkReal x1595=(cj5*sj5);
IkReal x1596=((1.0)*r20);
IkReal x1597=(((r01*r21))+(((-1.0)*r01*x1593*x1594))+(((-1.0)*r01*x1595*x1596))+(((-1.0)*r00*x1594*x1595))+((r00*r20*x1593))+((r02*r22)));
j4eval[0]=x1597;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1596))))));
j4eval[2]=IKsign(x1597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1598=cj5*cj5;
IkReal x1599=(r21*sj5);
IkReal x1600=(r11*r21);
IkReal x1601=((1.0)*cj5*r20);
IkReal x1602=(((r10*r20*x1598))+x1600+(((-1.0)*r11*sj5*x1601))+(((-1.0)*x1598*x1600))+((r12*r22))+(((-1.0)*cj5*r10*x1599)));
j4eval[0]=x1602;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1601))+((sj0*x1599))))));
j4eval[2]=IKsign(x1602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1603=cj5*cj5;
IkReal x1604=(r21*sj5);
IkReal x1605=(r11*r21);
IkReal x1606=((1.0)*cj5*r20);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1606))+((sj0*x1604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1604))+((r10*r20*x1603))+x1605+(((-1.0)*r11*sj5*x1606))+((r12*r22))+(((-1.0)*x1603*x1605)))),-1);
if(!x1608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1607.value)+(((1.5707963267949)*(x1608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1609=IKsin(j4);
IkReal x1610=IKcos(j4);
IkReal x1611=(r11*sj5);
IkReal x1612=(cj5*r00);
IkReal x1613=(cj5*r10);
IkReal x1614=(r21*sj5);
IkReal x1615=(cj5*r20);
IkReal x1616=(r01*sj5);
IkReal x1617=((1.0)*x1610);
IkReal x1618=((1.0)*x1609);
evalcond[0]=(((x1609*x1614))+(((-1.0)*r22*x1617))+(((-1.0)*x1615*x1618)));
evalcond[1]=((((-1.0)*r22*x1618))+(((-1.0)*x1614*x1617))+((x1610*x1615)));
evalcond[2]=(sj0+(((-1.0)*r02*x1617))+((x1609*x1616))+(((-1.0)*x1612*x1618)));
evalcond[3]=(cj0+(((-1.0)*x1616*x1617))+(((-1.0)*r02*x1618))+((x1610*x1612)));
evalcond[4]=((((-1.0)*r12*x1618))+sj0+(((-1.0)*x1611*x1617))+((x1610*x1613)));
evalcond[5]=((((-1.0)*r12*x1617))+((x1609*x1611))+(((-1.0)*x1613*x1618))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1619=cj5*cj5;
IkReal x1620=((1.0)*r21);
IkReal x1621=(cj5*sj5);
IkReal x1622=((1.0)*r20);
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1620*x1621))+(((-1.0)*r01*x1621*x1622))+(((-1.0)*r01*x1619*x1620))+((r00*r20*x1619))+((r01*r21))+((r02*r22)))),-1);
if(!x1623.valid){
continue;
}
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1622))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1623.value)))+(x1624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1625=IKsin(j4);
IkReal x1626=IKcos(j4);
IkReal x1627=(r11*sj5);
IkReal x1628=(cj5*r00);
IkReal x1629=(cj5*r10);
IkReal x1630=(r21*sj5);
IkReal x1631=(cj5*r20);
IkReal x1632=(r01*sj5);
IkReal x1633=((1.0)*x1626);
IkReal x1634=((1.0)*x1625);
evalcond[0]=((((-1.0)*r22*x1633))+((x1625*x1630))+(((-1.0)*x1631*x1634)));
evalcond[1]=((((-1.0)*r22*x1634))+(((-1.0)*x1630*x1633))+((x1626*x1631)));
evalcond[2]=(sj0+((x1625*x1632))+(((-1.0)*x1628*x1634))+(((-1.0)*r02*x1633)));
evalcond[3]=(cj0+((x1626*x1628))+(((-1.0)*x1632*x1633))+(((-1.0)*r02*x1634)));
evalcond[4]=(sj0+((x1626*x1629))+(((-1.0)*r12*x1634))+(((-1.0)*x1627*x1633)));
evalcond[5]=((((-1.0)*r12*x1633))+(((-1.0)*x1629*x1634))+((x1625*x1627))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1635.value)))+(x1636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1637=IKsin(j4);
IkReal x1638=IKcos(j4);
IkReal x1639=(r11*sj5);
IkReal x1640=(cj5*r00);
IkReal x1641=(cj5*r10);
IkReal x1642=(r21*sj5);
IkReal x1643=(cj5*r20);
IkReal x1644=(r01*sj5);
IkReal x1645=((1.0)*x1638);
IkReal x1646=((1.0)*x1637);
evalcond[0]=(((x1637*x1642))+(((-1.0)*r22*x1645))+(((-1.0)*x1643*x1646)));
evalcond[1]=((((-1.0)*r22*x1646))+(((-1.0)*x1642*x1645))+((x1638*x1643)));
evalcond[2]=(sj0+((x1637*x1644))+(((-1.0)*x1640*x1646))+(((-1.0)*r02*x1645)));
evalcond[3]=(cj0+(((-1.0)*x1644*x1645))+(((-1.0)*r02*x1646))+((x1638*x1640)));
evalcond[4]=(sj0+(((-1.0)*r12*x1646))+(((-1.0)*x1639*x1645))+((x1638*x1641)));
evalcond[5]=(((x1637*x1639))+(((-1.0)*x1641*x1646))+(((-1.0)*r12*x1645))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1647=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1647;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1648=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1648;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1649=cj5*cj5;
IkReal x1650=((1.0)*r21);
IkReal x1651=(cj5*r20);
IkReal x1652=((((-1.0)*cj5*r00*sj5*x1650))+((r01*r21))+((r00*r20*x1649))+(((-1.0)*r01*sj5*x1651))+(((-1.0)*r01*x1649*x1650))+((r02*r22)));
j4eval[0]=x1652;
j4eval[1]=IKsign(x1652);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1651))+(((-1.0)*sj0*sj5*x1650))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1653=cj5*cj5;
IkReal x1654=((1.0)*r21);
IkReal x1655=(cj5*r20);
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1653*x1654))+(((-1.0)*cj5*r00*sj5*x1654))+((r01*r21))+((r00*r20*x1653))+(((-1.0)*r01*sj5*x1655))+((r02*r22)))),-1);
if(!x1656.valid){
continue;
}
CheckValue<IkReal> x1657 = IKatan2WithCheck(IkReal((((sj0*x1655))+(((-1.0)*sj0*sj5*x1654)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1656.value)))+(x1657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1658=IKsin(j4);
IkReal x1659=IKcos(j4);
IkReal x1660=((1.0)*cj0);
IkReal x1661=(cj5*r00);
IkReal x1662=(r11*sj5);
IkReal x1663=(cj5*r10);
IkReal x1664=(r21*sj5);
IkReal x1665=(cj5*r20);
IkReal x1666=(r01*sj5);
IkReal x1667=((1.0)*x1659);
IkReal x1668=((1.0)*x1658);
evalcond[0]=((((-1.0)*r22*x1667))+((x1658*x1664))+(((-1.0)*x1665*x1668)));
evalcond[1]=((((-1.0)*r22*x1668))+((x1659*x1665))+(((-1.0)*x1664*x1667)));
evalcond[2]=(sj0+(((-1.0)*x1661*x1668))+((x1658*x1666))+(((-1.0)*r02*x1667)));
evalcond[3]=((((-1.0)*r12*x1667))+(((-1.0)*x1663*x1668))+(((-1.0)*x1660))+((x1658*x1662)));
evalcond[4]=((((-1.0)*x1660))+((x1659*x1661))+(((-1.0)*r02*x1668))+(((-1.0)*x1666*x1667)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1662*x1667))+(((-1.0)*r12*x1668))+((x1659*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1669=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1669.valid){
continue;
}
CheckValue<IkReal> x1670 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1669.value)))+(x1670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1671=IKsin(j4);
IkReal x1672=IKcos(j4);
IkReal x1673=((1.0)*cj0);
IkReal x1674=(cj5*r00);
IkReal x1675=(r11*sj5);
IkReal x1676=(cj5*r10);
IkReal x1677=(r21*sj5);
IkReal x1678=(cj5*r20);
IkReal x1679=(r01*sj5);
IkReal x1680=((1.0)*x1672);
IkReal x1681=((1.0)*x1671);
evalcond[0]=((((-1.0)*x1678*x1681))+(((-1.0)*r22*x1680))+((x1671*x1677)));
evalcond[1]=((((-1.0)*x1677*x1680))+(((-1.0)*r22*x1681))+((x1672*x1678)));
evalcond[2]=(sj0+(((-1.0)*x1674*x1681))+(((-1.0)*r02*x1680))+((x1671*x1679)));
evalcond[3]=((((-1.0)*r12*x1680))+(((-1.0)*x1676*x1681))+((x1671*x1675))+(((-1.0)*x1673)));
evalcond[4]=((((-1.0)*x1679*x1680))+((x1672*x1674))+(((-1.0)*r02*x1681))+(((-1.0)*x1673)));
evalcond[5]=((((-1.0)*r12*x1681))+(((-1.0)*sj0))+(((-1.0)*x1675*x1680))+((x1672*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1682=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1682.valid){
continue;
}
CheckValue<IkReal> x1683 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1682.value)))+(x1683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1684=IKsin(j4);
IkReal x1685=IKcos(j4);
IkReal x1686=((1.0)*cj0);
IkReal x1687=(cj5*r00);
IkReal x1688=(r11*sj5);
IkReal x1689=(cj5*r10);
IkReal x1690=(r21*sj5);
IkReal x1691=(cj5*r20);
IkReal x1692=(r01*sj5);
IkReal x1693=((1.0)*x1685);
IkReal x1694=((1.0)*x1684);
evalcond[0]=((((-1.0)*x1691*x1694))+(((-1.0)*r22*x1693))+((x1684*x1690)));
evalcond[1]=((((-1.0)*x1690*x1693))+(((-1.0)*r22*x1694))+((x1685*x1691)));
evalcond[2]=(sj0+(((-1.0)*x1687*x1694))+(((-1.0)*r02*x1693))+((x1684*x1692)));
evalcond[3]=((((-1.0)*x1686))+(((-1.0)*r12*x1693))+((x1684*x1688))+(((-1.0)*x1689*x1694)));
evalcond[4]=((((-1.0)*x1692*x1693))+(((-1.0)*x1686))+(((-1.0)*r02*x1694))+((x1685*x1687)));
evalcond[5]=((((-1.0)*x1688*x1693))+(((-1.0)*sj0))+(((-1.0)*r12*x1694))+((x1685*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1695=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1695;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1696=cj5*cj5;
IkReal x1697=((1.0)*r21);
IkReal x1698=(cj5*sj5);
IkReal x1699=((1.0)*r20);
IkReal x1700=((((-1.0)*r01*x1698*x1699))+((r01*r21))+(((-1.0)*r01*x1696*x1697))+(((-1.0)*r00*x1697*x1698))+((r00*r20*x1696))+((r02*r22)));
j4eval[0]=x1700;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1699))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1701=cj5*cj5;
IkReal x1702=(r21*sj5);
IkReal x1703=(r11*r21);
IkReal x1704=((1.0)*cj5*r20);
IkReal x1705=(x1703+(((-1.0)*x1701*x1703))+((r12*r22))+(((-1.0)*r11*sj5*x1704))+((r10*r20*x1701))+(((-1.0)*cj5*r10*x1702)));
j4eval[0]=x1705;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1704))+((sj0*x1702))))));
j4eval[2]=IKsign(x1705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1706=cj5*cj5;
IkReal x1707=(r21*sj5);
IkReal x1708=(r11*r21);
IkReal x1709=((1.0)*cj5*r20);
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(IKsign((x1708+((r12*r22))+(((-1.0)*r11*sj5*x1709))+((r10*r20*x1706))+(((-1.0)*x1706*x1708))+(((-1.0)*cj5*r10*x1707)))),-1);
if(!x1710.valid){
continue;
}
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1709))+((sj0*x1707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1710.value)))+(x1711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1712=IKsin(j4);
IkReal x1713=IKcos(j4);
IkReal x1714=(r11*sj5);
IkReal x1715=(cj5*r00);
IkReal x1716=(cj5*r10);
IkReal x1717=(r21*sj5);
IkReal x1718=(cj5*r20);
IkReal x1719=(r01*sj5);
IkReal x1720=((1.0)*x1713);
IkReal x1721=((1.0)*x1712);
evalcond[0]=((((-1.0)*r22*x1720))+((x1712*x1717))+(((-1.0)*x1718*x1721)));
evalcond[1]=((((-1.0)*r22*x1721))+((x1713*x1718))+(((-1.0)*x1717*x1720)));
evalcond[2]=((((-1.0)*x1715*x1721))+sj0+((x1712*x1719))+(((-1.0)*r02*x1720)));
evalcond[3]=(cj0+((x1713*x1715))+(((-1.0)*x1719*x1720))+(((-1.0)*r02*x1721)));
evalcond[4]=(sj0+(((-1.0)*r12*x1721))+((x1713*x1716))+(((-1.0)*x1714*x1720)));
evalcond[5]=(((x1712*x1714))+(((-1.0)*r12*x1720))+(((-1.0)*x1716*x1721))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1722=cj5*cj5;
IkReal x1723=((1.0)*r21);
IkReal x1724=(cj5*sj5);
IkReal x1725=((1.0)*r20);
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1724*x1725))+(((-1.0)*r01*x1722*x1723))+((r01*r21))+(((-1.0)*r00*x1723*x1724))+((r02*r22))+((r00*r20*x1722)))),-1);
if(!x1726.valid){
continue;
}
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1726.value)))+(x1727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1728=IKsin(j4);
IkReal x1729=IKcos(j4);
IkReal x1730=(r11*sj5);
IkReal x1731=(cj5*r00);
IkReal x1732=(cj5*r10);
IkReal x1733=(r21*sj5);
IkReal x1734=(cj5*r20);
IkReal x1735=(r01*sj5);
IkReal x1736=((1.0)*x1729);
IkReal x1737=((1.0)*x1728);
evalcond[0]=(((x1728*x1733))+(((-1.0)*x1734*x1737))+(((-1.0)*r22*x1736)));
evalcond[1]=((((-1.0)*x1733*x1736))+((x1729*x1734))+(((-1.0)*r22*x1737)));
evalcond[2]=((((-1.0)*x1731*x1737))+((x1728*x1735))+sj0+(((-1.0)*r02*x1736)));
evalcond[3]=(cj0+((x1729*x1731))+(((-1.0)*x1735*x1736))+(((-1.0)*r02*x1737)));
evalcond[4]=(sj0+(((-1.0)*r12*x1737))+((x1729*x1732))+(((-1.0)*x1730*x1736)));
evalcond[5]=(((x1728*x1730))+(((-1.0)*r12*x1736))+(((-1.0)*x1732*x1737))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1738.value)))+(x1739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j4);
IkReal x1741=IKcos(j4);
IkReal x1742=(r11*sj5);
IkReal x1743=(cj5*r00);
IkReal x1744=(cj5*r10);
IkReal x1745=(r21*sj5);
IkReal x1746=(cj5*r20);
IkReal x1747=(r01*sj5);
IkReal x1748=((1.0)*x1741);
IkReal x1749=((1.0)*x1740);
evalcond[0]=((((-1.0)*r22*x1748))+(((-1.0)*x1746*x1749))+((x1740*x1745)));
evalcond[1]=((((-1.0)*r22*x1749))+(((-1.0)*x1745*x1748))+((x1741*x1746)));
evalcond[2]=(sj0+((x1740*x1747))+(((-1.0)*x1743*x1749))+(((-1.0)*r02*x1748)));
evalcond[3]=(cj0+(((-1.0)*x1747*x1748))+((x1741*x1743))+(((-1.0)*r02*x1749)));
evalcond[4]=((((-1.0)*r12*x1749))+sj0+(((-1.0)*x1742*x1748))+((x1741*x1744)));
evalcond[5]=((((-1.0)*r12*x1748))+(((-1.0)*x1744*x1749))+((x1740*x1742))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1750=(r00*sj5);
IkReal x1751=(sj1*sj2);
IkReal x1752=((612000.0)*cj1);
IkReal x1753=(cj5*r01);
IkReal x1754=(cj1*cj2);
IkReal x1755=((1000000.0)*px);
CheckValue<IkReal> x1756=IKPowWithIntegerCheck(((((163941.0)*x1754))+(((-163941.0)*x1751))),-1);
if(!x1756.valid){
continue;
}
CheckValue<IkReal> x1757=IKPowWithIntegerCheck((x1754+(((-1.0)*x1751))),-1);
if(!x1757.valid){
continue;
}
if( IKabs(((x1756.value)*(((((-456600.0)*x1750*x1754))+((x1754*x1755))+(((-456600.0)*x1753*x1754))+(((456600.0)*x1751*x1753))+(((-1.0)*x1750*x1752))+(((-1.0)*x1751*x1755))+(((-1.0)*x1752*x1753))+(((456600.0)*x1750*x1751)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1757.value)*(((((-1.0)*x1750))+(((-1.0)*x1753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1756.value)*(((((-456600.0)*x1750*x1754))+((x1754*x1755))+(((-456600.0)*x1753*x1754))+(((456600.0)*x1751*x1753))+(((-1.0)*x1750*x1752))+(((-1.0)*x1751*x1755))+(((-1.0)*x1752*x1753))+(((456600.0)*x1750*x1751))))))+IKsqr(((x1757.value)*(((((-1.0)*x1750))+(((-1.0)*x1753))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1756.value)*(((((-456600.0)*x1750*x1754))+((x1754*x1755))+(((-456600.0)*x1753*x1754))+(((456600.0)*x1751*x1753))+(((-1.0)*x1750*x1752))+(((-1.0)*x1751*x1755))+(((-1.0)*x1752*x1753))+(((456600.0)*x1750*x1751))))), ((x1757.value)*(((((-1.0)*x1750))+(((-1.0)*x1753))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1758=IKcos(j0);
IkReal x1759=IKsin(j0);
IkReal x1760=(cj5*r01);
IkReal x1761=(cj1*cj2);
IkReal x1762=((0.1157)*sj5);
IkReal x1763=((0.612)*cj1);
IkReal x1764=(cj5*r11);
IkReal x1765=(sj1*sj2*x1759);
IkReal x1766=(sj1*sj2*x1758);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1766))+x1760+((x1758*x1761)));
evalcond[1]=((((-1.0)*x1765))+((r10*sj5))+x1764+((x1759*x1761)));
evalcond[2]=((((-0.5723)*x1758*x1761))+(((-1.0)*r00*x1762))+(((0.163941)*x1759))+(((0.5723)*x1766))+(((-1.0)*px))+(((-1.0)*x1758*x1763))+(((-0.1157)*x1760)));
evalcond[3]=((((-0.5723)*x1759*x1761))+(((0.5723)*x1765))+(((-1.0)*x1759*x1763))+(((-1.0)*py))+(((-0.163941)*x1758))+(((-1.0)*r10*x1762))+(((-0.1157)*x1764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1767=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1767;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1768=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1768;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1769=((1.0)*cj5);
IkReal x1770=((((-1.0)*r21*x1769))+(((-1.0)*r20*sj5)));
j4eval[0]=x1770;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1769))+(((-1.0)*r10*sj0*x1769))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1771=((-1.0)*r20);
IkReal x1773 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1773)==0){
continue;
}
IkReal x1772=pow(x1773,-0.5);
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1771),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1774.value));
IkReal gconst79=(r21*x1772);
IkReal gconst80=(x1771*x1772);
CheckValue<IkReal> x1775 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1775.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1775.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1776=((-1.0)*r20);
IkReal x1777=x1772;
CheckValue<IkReal> x1779 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1776),IKFAST_ATAN2_MAGTHRESH);
if(!x1779.valid){
continue;
}
IkReal x1778=((-1.0)*(x1779.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1778;
IkReal gconst78=x1778;
IkReal gconst79=(r21*x1777);
IkReal gconst80=(x1776*x1777);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1780=((-1.0)*r20);
IkReal x1781=x1772;
CheckValue<IkReal> x1783 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1780),IKFAST_ATAN2_MAGTHRESH);
if(!x1783.valid){
continue;
}
IkReal x1782=((-1.0)*(x1783.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1782;
IkReal gconst78=x1782;
IkReal gconst79=(r21*x1781);
IkReal gconst80=(x1780*x1781);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1784=((-1.0)*r20);
IkReal x1785=x1772;
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1784),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
IkReal x1786=((-1.0)*(x1787.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1786;
IkReal gconst78=x1786;
IkReal gconst79=(r21*x1785);
IkReal gconst80=(x1784*x1785);
IkReal x1788=r22*r22;
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1788))),-1);
if(!x1791.valid){
continue;
}
IkReal x1789=x1791.value;
IkReal x1790=(((x1789*(r20*r20*r20*r20)))+x1788+(((2.0)*x1789*(r20*r20)*(r21*r21)))+((x1789*(r21*r21*r21*r21))));
j4eval[0]=x1790;
j4eval[1]=IKsign(x1790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1792=(sj1*sj2);
IkReal x1793=(gconst80*r20);
IkReal x1794=(gconst79*r21);
IkReal x1795=(cj1*cj2);
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1795))+((r22*x1792)))),IkReal((((x1793*x1795))+(((-1.0)*x1792*x1793))+((x1792*x1794))+(((-1.0)*x1794*x1795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1793*x1793)+(x1794*x1794)+(((-2.0)*x1793*x1794)))),-1);
if(!x1797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1796.value)+(((1.5707963267949)*(x1797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1798=IKsin(j4);
IkReal x1799=IKcos(j4);
IkReal x1800=(gconst79*r01);
IkReal x1801=(cj2*sj1);
IkReal x1802=(gconst79*r21);
IkReal x1803=(gconst79*r11);
IkReal x1804=(cj1*sj2);
IkReal x1805=((1.0)*x1799);
IkReal x1806=(gconst80*x1799);
IkReal x1807=((1.0)*x1798);
IkReal x1808=(gconst80*x1807);
evalcond[0]=((((-1.0)*r20*x1808))+((x1798*x1802))+(((-1.0)*r22*x1805)));
evalcond[1]=((((-1.0)*r00*x1808))+sj0+((x1798*x1800))+(((-1.0)*r02*x1805)));
evalcond[2]=((((-1.0)*r10*x1808))+((x1798*x1803))+(((-1.0)*r12*x1805))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1802*x1805))+((r20*x1806))+(((-1.0)*r22*x1807)));
evalcond[4]=(((cj0*x1804))+((cj0*x1801))+(((-1.0)*x1800*x1805))+(((-1.0)*r02*x1807))+((r00*x1806)));
evalcond[5]=(((sj0*x1804))+((sj0*x1801))+(((-1.0)*r12*x1807))+((r10*x1806))+(((-1.0)*x1803*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1809.valid){
continue;
}
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1809.value)))+(x1810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1811=IKsin(j4);
IkReal x1812=IKcos(j4);
IkReal x1813=(gconst79*r01);
IkReal x1814=(cj2*sj1);
IkReal x1815=(gconst79*r21);
IkReal x1816=(gconst79*r11);
IkReal x1817=(cj1*sj2);
IkReal x1818=((1.0)*x1812);
IkReal x1819=(gconst80*x1812);
IkReal x1820=((1.0)*x1811);
IkReal x1821=(gconst80*x1820);
evalcond[0]=(((x1811*x1815))+(((-1.0)*r20*x1821))+(((-1.0)*r22*x1818)));
evalcond[1]=(sj0+(((-1.0)*r02*x1818))+(((-1.0)*r00*x1821))+((x1811*x1813)));
evalcond[2]=((((-1.0)*r12*x1818))+((x1811*x1816))+(((-1.0)*cj0))+(((-1.0)*r10*x1821)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1819))+(((-1.0)*r22*x1820))+(((-1.0)*x1815*x1818)));
evalcond[4]=(((cj0*x1814))+((cj0*x1817))+(((-1.0)*x1813*x1818))+(((-1.0)*r02*x1820))+((r00*x1819)));
evalcond[5]=((((-1.0)*x1816*x1818))+((sj0*x1814))+((sj0*x1817))+(((-1.0)*r12*x1820))+((r10*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1822.valid){
continue;
}
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1822.value)))+(x1823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1824=IKsin(j4);
IkReal x1825=IKcos(j4);
IkReal x1826=(gconst79*r01);
IkReal x1827=(cj2*sj1);
IkReal x1828=(gconst79*r21);
IkReal x1829=(gconst79*r11);
IkReal x1830=(cj1*sj2);
IkReal x1831=((1.0)*x1825);
IkReal x1832=(gconst80*x1825);
IkReal x1833=((1.0)*x1824);
IkReal x1834=(gconst80*x1833);
evalcond[0]=((((-1.0)*r20*x1834))+((x1824*x1828))+(((-1.0)*r22*x1831)));
evalcond[1]=(sj0+(((-1.0)*r00*x1834))+((x1824*x1826))+(((-1.0)*r02*x1831)));
evalcond[2]=((((-1.0)*r10*x1834))+((x1824*x1829))+(((-1.0)*r12*x1831))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1828*x1831))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1832))+(((-1.0)*r22*x1833)));
evalcond[4]=(((cj0*x1827))+((cj0*x1830))+(((-1.0)*x1826*x1831))+(((-1.0)*r02*x1833))+((r00*x1832)));
evalcond[5]=(((r10*x1832))+((sj0*x1830))+((sj0*x1827))+(((-1.0)*r12*x1833))+(((-1.0)*x1829*x1831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1835=((-1.0)*r21);
IkReal x1837 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1837)==0){
continue;
}
IkReal x1836=pow(x1837,-0.5);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(x1835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1838.value))));
IkReal gconst82=(x1835*x1836);
IkReal gconst83=((1.0)*r20*x1836);
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1839.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1840=((-1.0)*r21);
CheckValue<IkReal> x1843 = IKatan2WithCheck(IkReal(x1840),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1843.valid){
continue;
}
IkReal x1841=((1.0)*(x1843.value));
IkReal x1842=x1836;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1841)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1841)));
IkReal gconst82=(x1840*x1842);
IkReal gconst83=((1.0)*r20*x1842);
IkReal x1844=r22*r22;
IkReal x1845=((1.0)*x1844);
CheckValue<IkReal> x1849=IKPowWithIntegerCheck(((-1.0)+x1844),-1);
if(!x1849.valid){
continue;
}
IkReal x1846=x1849.value;
if((((1.0)+(((-1.0)*x1845)))) < -0.00001)
continue;
IkReal x1847=IKsqrt(((1.0)+(((-1.0)*x1845))));
IkReal x1848=(sj0*x1846*x1847);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1848+(((-1.0)*x1845*x1848))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1850=((-1.0)*r21);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(x1850),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal x1851=((1.0)*(x1853.value));
IkReal x1852=x1836;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1851)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1851)));
IkReal gconst82=(x1850*x1852);
IkReal gconst83=((1.0)*r20*x1852);
IkReal x1854=r22*r22;
IkReal x1855=((1.0)*x1854);
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(((-1.0)+x1854),-1);
if(!x1859.valid){
continue;
}
IkReal x1856=x1859.value;
if((((1.0)+(((-1.0)*x1855)))) < -0.00001)
continue;
IkReal x1857=IKsqrt(((1.0)+(((-1.0)*x1855))));
IkReal x1858=(cj0*x1856*x1857);
j4eval[0]=((IKabs((x1858+(((-1.0)*x1855*x1858)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1860=((-1.0)*r21);
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal(x1860),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
IkReal x1861=((1.0)*(x1863.value));
IkReal x1862=x1836;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1861)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1861)));
IkReal gconst82=(x1860*x1862);
IkReal gconst83=((1.0)*r20*x1862);
IkReal x1864=r22*r22;
IkReal x1865=(cj0*r02);
IkReal x1866=(r12*sj0);
CheckValue<IkReal> x1870=IKPowWithIntegerCheck(((-1.0)+x1864),-1);
if(!x1870.valid){
continue;
}
IkReal x1867=x1870.value;
if((((1.0)+(((-1.0)*x1864)))) < -0.00001)
continue;
IkReal x1868=IKsqrt(((1.0)+(((-1.0)*x1864))));
IkReal x1869=((1.0)*r22*x1867*x1868);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x1865+x1866)))+(IKabs(((((-1.0)*x1866*x1869))+(((-1.0)*x1865*x1869))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1871=((1.0)*gconst83);
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1871)))),-1);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1871))+(((-1.0)*r10*sj0*x1871))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1872.value)))+(x1873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1874=IKsin(j4);
IkReal x1875=IKcos(j4);
IkReal x1876=(cj2*sj1);
IkReal x1877=(gconst82*r11);
IkReal x1878=(cj1*sj2);
IkReal x1879=((1.0)*x1875);
IkReal x1880=(gconst83*x1875);
IkReal x1881=(gconst82*x1874);
IkReal x1882=((1.0)*x1874);
evalcond[0]=(((r21*x1881))+(((-1.0)*r22*x1879))+(((-1.0)*gconst83*r20*x1882)));
evalcond[1]=((((-1.0)*gconst83*r00*x1882))+sj0+(((-1.0)*r02*x1879))+((r01*x1881)));
evalcond[2]=(((x1874*x1877))+(((-1.0)*gconst83*r10*x1882))+(((-1.0)*r12*x1879))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1880))+(((-1.0)*r22*x1882))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1879)));
evalcond[4]=((((-1.0)*r02*x1882))+((r00*x1880))+(((-1.0)*gconst82*r01*x1879))+((cj0*x1876))+((cj0*x1878)));
evalcond[5]=((((-1.0)*x1877*x1879))+(((-1.0)*r12*x1882))+((sj0*x1876))+((sj0*x1878))+((r10*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1883.valid){
continue;
}
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1883.value)+(((1.5707963267949)*(x1884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1885=IKsin(j4);
IkReal x1886=IKcos(j4);
IkReal x1887=(cj2*sj1);
IkReal x1888=(gconst82*r11);
IkReal x1889=(cj1*sj2);
IkReal x1890=((1.0)*x1886);
IkReal x1891=(gconst83*x1886);
IkReal x1892=(gconst82*x1885);
IkReal x1893=((1.0)*x1885);
evalcond[0]=((((-1.0)*r22*x1890))+(((-1.0)*gconst83*r20*x1893))+((r21*x1892)));
evalcond[1]=((((-1.0)*r02*x1890))+sj0+((r01*x1892))+(((-1.0)*gconst83*r00*x1893)));
evalcond[2]=((((-1.0)*r12*x1890))+((x1885*x1888))+(((-1.0)*gconst83*r10*x1893))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x1890))+((r20*x1891))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1893)));
evalcond[4]=((((-1.0)*r02*x1893))+((r00*x1891))+(((-1.0)*gconst82*r01*x1890))+((cj0*x1889))+((cj0*x1887)));
evalcond[5]=(((r10*x1891))+(((-1.0)*x1888*x1890))+(((-1.0)*r12*x1893))+((sj0*x1889))+((sj0*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1894.value)+(((1.5707963267949)*(x1895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1896=IKsin(j4);
IkReal x1897=IKcos(j4);
IkReal x1898=(cj2*sj1);
IkReal x1899=(gconst82*r11);
IkReal x1900=(cj1*sj2);
IkReal x1901=((1.0)*x1897);
IkReal x1902=(gconst83*x1897);
IkReal x1903=(gconst82*x1896);
IkReal x1904=((1.0)*x1896);
evalcond[0]=((((-1.0)*r22*x1901))+((r21*x1903))+(((-1.0)*gconst83*r20*x1904)));
evalcond[1]=(sj0+((r01*x1903))+(((-1.0)*gconst83*r00*x1904))+(((-1.0)*r02*x1901)));
evalcond[2]=(((x1896*x1899))+(((-1.0)*r12*x1901))+(((-1.0)*gconst83*r10*x1904))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1904))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1901))+((r20*x1902)));
evalcond[4]=(((r00*x1902))+((cj0*x1900))+((cj0*x1898))+(((-1.0)*gconst82*r01*x1901))+(((-1.0)*r02*x1904)));
evalcond[5]=((((-1.0)*x1899*x1901))+((sj0*x1900))+(((-1.0)*r12*x1904))+((sj0*x1898))+((r10*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1906 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1906)==0){
continue;
}
IkReal x1905=pow(x1906,-0.5);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1907.value));
IkReal gconst85=((-1.0)*r01*x1905);
IkReal gconst86=(r00*x1905);
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1908.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
IkReal x1909=((-1.0)*(x1911.value));
IkReal x1910=x1905;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1909;
IkReal gconst84=x1909;
IkReal gconst85=((-1.0)*r01*x1910);
IkReal gconst86=(r00*x1910);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1912=((1.0)*gconst86);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1912))+(((-1.0)*r10*sj0*x1912))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1912)))),-1);
if(!x1914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1913.value)+(((1.5707963267949)*(x1914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1915=IKsin(j4);
IkReal x1916=IKcos(j4);
IkReal x1917=(gconst85*r21);
IkReal x1918=(cj2*sj1);
IkReal x1919=(gconst86*r00);
IkReal x1920=(gconst86*r10);
IkReal x1921=(gconst85*r11);
IkReal x1922=(gconst85*r01);
IkReal x1923=(gconst86*r20);
IkReal x1924=(cj1*sj2);
IkReal x1925=((1.0)*x1916);
IkReal x1926=((1.0)*x1915);
evalcond[0]=((((-1.0)*r22*x1925))+((x1915*x1917))+(((-1.0)*x1923*x1926)));
evalcond[1]=(sj0+(((-1.0)*x1919*x1926))+((x1915*x1922))+(((-1.0)*r02*x1925)));
evalcond[2]=((((-1.0)*r12*x1925))+((x1915*x1921))+(((-1.0)*x1920*x1926))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1917*x1925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1926))+((x1916*x1923)));
evalcond[4]=(((x1916*x1919))+(((-1.0)*x1922*x1925))+((cj0*x1924))+(((-1.0)*r02*x1926))+((cj0*x1918)));
evalcond[5]=((((-1.0)*r12*x1926))+((x1916*x1920))+(((-1.0)*x1921*x1925))+((sj0*x1918))+((sj0*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(gconst85*r21);
IkReal x1932=(cj2*sj1);
IkReal x1933=(gconst86*r00);
IkReal x1934=(gconst86*r10);
IkReal x1935=(gconst85*r11);
IkReal x1936=(gconst85*r01);
IkReal x1937=(gconst86*r20);
IkReal x1938=(cj1*sj2);
IkReal x1939=((1.0)*x1930);
IkReal x1940=((1.0)*x1929);
evalcond[0]=((((-1.0)*x1937*x1940))+(((-1.0)*r22*x1939))+((x1929*x1931)));
evalcond[1]=(sj0+((x1929*x1936))+(((-1.0)*x1933*x1940))+(((-1.0)*r02*x1939)));
evalcond[2]=((((-1.0)*r12*x1939))+((x1929*x1935))+(((-1.0)*x1934*x1940))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1940))+((x1930*x1937))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1931*x1939)));
evalcond[4]=(((x1930*x1933))+(((-1.0)*r02*x1940))+((cj0*x1932))+((cj0*x1938))+(((-1.0)*x1936*x1939)));
evalcond[5]=(((x1930*x1934))+((sj0*x1938))+((sj0*x1932))+(((-1.0)*r12*x1940))+(((-1.0)*x1935*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1942)==0){
continue;
}
IkReal x1941=pow(x1942,-0.5);
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1943.value))));
IkReal gconst88=((1.0)*r01*x1941);
IkReal gconst89=((-1.0)*r00*x1941);
CheckValue<IkReal> x1944 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1944.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
IkReal x1945=((1.0)*(x1947.value));
IkReal x1946=x1941;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1945)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1945)));
IkReal gconst88=((1.0)*r01*x1946);
IkReal gconst89=((-1.0)*r00*x1946);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
IkReal x1948=((1.0)*(x1950.value));
IkReal x1949=x1941;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1948)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1948)));
IkReal gconst88=((1.0)*r01*x1949);
IkReal gconst89=((-1.0)*r00*x1949);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
IkReal x1951=((1.0)*(x1953.value));
IkReal x1952=x1941;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1951)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1951)));
IkReal gconst88=((1.0)*r01*x1952);
IkReal gconst89=((-1.0)*r00*x1952);
IkReal x1954=r02*r02;
IkReal x1955=(r12*sj0);
IkReal x1956=x1941;
IkReal x1957=(cj0*x1956);
j4eval[0]=((IKabs((x1955+((cj0*r02)))))+(IKabs((((r02*x1955*x1956))+((x1954*x1957))+(((-1.0)*x1957))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1958=((1.0)*gconst89);
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*cj0*r00*x1958))+((gconst88*r11*sj0))+(((-1.0)*r10*sj0*x1958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1958)))),-1);
if(!x1960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1959.value)+(((1.5707963267949)*(x1960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1961=IKsin(j4);
IkReal x1962=IKcos(j4);
IkReal x1963=(cj2*sj1);
IkReal x1964=(cj1*sj2);
IkReal x1965=((1.0)*x1962);
IkReal x1966=(gconst89*x1962);
IkReal x1967=((1.0)*x1961);
IkReal x1968=(gconst88*x1961);
IkReal x1969=(gconst89*x1967);
evalcond[0]=((((-1.0)*r22*x1965))+((r21*x1968))+(((-1.0)*r20*x1969)));
evalcond[1]=(sj0+(((-1.0)*r02*x1965))+(((-1.0)*r00*x1969))+((r01*x1968)));
evalcond[2]=(((r11*x1968))+(((-1.0)*r10*x1969))+(((-1.0)*r12*x1965))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1966))+(((-1.0)*r22*x1967))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1965)));
evalcond[4]=(((cj0*x1964))+((cj0*x1963))+(((-1.0)*r02*x1967))+(((-1.0)*gconst88*r01*x1965))+((r00*x1966)));
evalcond[5]=(((r10*x1966))+((sj0*x1963))+((sj0*x1964))+(((-1.0)*gconst88*r11*x1965))+(((-1.0)*r12*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1970.value)))+(x1971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1972=IKsin(j4);
IkReal x1973=IKcos(j4);
IkReal x1974=(cj2*sj1);
IkReal x1975=(cj1*sj2);
IkReal x1976=((1.0)*x1973);
IkReal x1977=(gconst89*x1973);
IkReal x1978=((1.0)*x1972);
IkReal x1979=(gconst88*x1972);
IkReal x1980=(gconst89*x1978);
evalcond[0]=((((-1.0)*r22*x1976))+((r21*x1979))+(((-1.0)*r20*x1980)));
evalcond[1]=(sj0+(((-1.0)*r02*x1976))+((r01*x1979))+(((-1.0)*r00*x1980)));
evalcond[2]=(((r11*x1979))+(((-1.0)*r10*x1980))+(((-1.0)*r12*x1976))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1977))+(((-1.0)*r22*x1978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1976)));
evalcond[4]=((((-1.0)*r02*x1978))+(((-1.0)*gconst88*r01*x1976))+((r00*x1977))+((cj0*x1974))+((cj0*x1975)));
evalcond[5]=(((r10*x1977))+((sj0*x1974))+((sj0*x1975))+(((-1.0)*gconst88*r11*x1976))+(((-1.0)*r12*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1981=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1981.value)))+(x1982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1983=IKsin(j4);
IkReal x1984=IKcos(j4);
IkReal x1985=(cj2*sj1);
IkReal x1986=(cj1*sj2);
IkReal x1987=((1.0)*x1984);
IkReal x1988=(gconst89*x1984);
IkReal x1989=((1.0)*x1983);
IkReal x1990=(gconst88*x1983);
IkReal x1991=(gconst89*x1989);
evalcond[0]=(((r21*x1990))+(((-1.0)*r22*x1987))+(((-1.0)*r20*x1991)));
evalcond[1]=(sj0+(((-1.0)*r02*x1987))+(((-1.0)*r00*x1991))+((r01*x1990)));
evalcond[2]=((((-1.0)*r10*x1991))+((r11*x1990))+(((-1.0)*r12*x1987))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst88*r21*x1987))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1989))+((r20*x1988)));
evalcond[4]=((((-1.0)*r02*x1989))+(((-1.0)*gconst88*r01*x1987))+((r00*x1988))+((cj0*x1986))+((cj0*x1985)));
evalcond[5]=(((r10*x1988))+((sj0*x1986))+((sj0*x1985))+(((-1.0)*r12*x1989))+(((-1.0)*gconst88*r11*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1992=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1992;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1993=((1.0)*cj5);
IkReal x1994=((((-1.0)*r21*x1993))+(((-1.0)*r20*sj5)));
j4eval[0]=x1994;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x1993))+((r11*sj5))))));
j4eval[2]=IKsign(x1994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1995=cj5*cj5;
IkReal x1996=r01*r01;
IkReal x1997=(cj5*r00);
IkReal x1998=(r01*sj5);
IkReal x1999=((((-1.0)*x1995*x1996))+(((-2.0)*x1997*x1998))+((x1995*(r00*r00)))+x1996+(r02*r02));
j4eval[0]=x1999;
j4eval[1]=((IKabs(r02))+(IKabs((x1997+(((-1.0)*x1998))))));
j4eval[2]=IKsign(x1999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2000=cj5*cj5;
IkReal x2001=r01*r01;
IkReal x2002=(r01*sj5);
IkReal x2003=(cj5*r00);
CheckValue<IkReal> x2004=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2002*x2003))+((x2000*(r00*r00)))+x2001+(((-1.0)*x2000*x2001))+(r02*r02))),-1);
if(!x2004.valid){
continue;
}
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal((x2003+(((-1.0)*x2002)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2004.value)))+(x2005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2006=IKsin(j4);
IkReal x2007=IKcos(j4);
IkReal x2008=(cj5*r10);
IkReal x2009=(r01*sj5);
IkReal x2010=(cj5*r00);
IkReal x2011=(cj5*r20);
IkReal x2012=((1.0)*x2007);
IkReal x2013=((1.0)*x2006);
IkReal x2014=(sj5*x2006);
evalcond[0]=((((-1.0)*x2011*x2013))+((r21*x2014))+(((-1.0)*r22*x2012)));
evalcond[1]=((((-1.0)*x2008*x2013))+(((-1.0)*r12*x2012))+((r11*x2014)));
evalcond[2]=((((-1.0)*x2009*x2012))+(((-1.0)*r02*x2013))+((x2007*x2010)));
evalcond[3]=((1.0)+(((-1.0)*x2010*x2013))+((x2006*x2009))+(((-1.0)*r02*x2012)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2012))+((cj1*sj2))+((x2007*x2008))+(((-1.0)*r12*x2013)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2012))+((x2007*x2011))+(((-1.0)*r22*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2015=((1.0)*cj5);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2015))+(((-1.0)*r20*sj5)))),-1);
if(!x2017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2016.value)+(((1.5707963267949)*(x2017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2018=IKsin(j4);
IkReal x2019=IKcos(j4);
IkReal x2020=(cj5*r10);
IkReal x2021=(r01*sj5);
IkReal x2022=(cj5*r00);
IkReal x2023=(cj5*r20);
IkReal x2024=((1.0)*x2019);
IkReal x2025=((1.0)*x2018);
IkReal x2026=(sj5*x2018);
evalcond[0]=((((-1.0)*x2023*x2025))+(((-1.0)*r22*x2024))+((r21*x2026)));
evalcond[1]=(((r11*x2026))+(((-1.0)*r12*x2024))+(((-1.0)*x2020*x2025)));
evalcond[2]=((((-1.0)*x2021*x2024))+((x2019*x2022))+(((-1.0)*r02*x2025)));
evalcond[3]=((1.0)+(((-1.0)*x2022*x2025))+((x2018*x2021))+(((-1.0)*r02*x2024)));
evalcond[4]=(((cj2*sj1))+((x2019*x2020))+((cj1*sj2))+(((-1.0)*r12*x2025))+(((-1.0)*r11*sj5*x2024)));
evalcond[5]=((((-1.0)*r21*sj5*x2024))+((x2019*x2023))+(((-1.0)*r22*x2025))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2027.value)+(((1.5707963267949)*(x2028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2029=IKsin(j4);
IkReal x2030=IKcos(j4);
IkReal x2031=(cj5*r10);
IkReal x2032=(r01*sj5);
IkReal x2033=(cj5*r00);
IkReal x2034=(cj5*r20);
IkReal x2035=((1.0)*x2030);
IkReal x2036=((1.0)*x2029);
IkReal x2037=(sj5*x2029);
evalcond[0]=(((r21*x2037))+(((-1.0)*r22*x2035))+(((-1.0)*x2034*x2036)));
evalcond[1]=((((-1.0)*r12*x2035))+(((-1.0)*x2031*x2036))+((r11*x2037)));
evalcond[2]=(((x2030*x2033))+(((-1.0)*r02*x2036))+(((-1.0)*x2032*x2035)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2035))+((x2029*x2032))+(((-1.0)*x2033*x2036)));
evalcond[4]=(((cj2*sj1))+((x2030*x2031))+(((-1.0)*r12*x2036))+(((-1.0)*r11*sj5*x2035))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x2036))+((x2030*x2034))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2038=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2038;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2039=((1.0)*cj5);
IkReal x2040=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2039)));
j4eval[0]=x2040;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2039))))));
j4eval[2]=IKsign(x2040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2041=cj5*cj5;
IkReal x2042=r01*r01;
IkReal x2043=(r01*sj5);
IkReal x2044=(cj5*r00);
IkReal x2045=(((x2041*x2042))+(((2.0)*x2043*x2044))+(((-1.0)*(r02*r02)))+(((-1.0)*x2042))+(((-1.0)*x2041*(r00*r00))));
j4eval[0]=x2045;
j4eval[1]=IKsign(x2045);
j4eval[2]=((IKabs(r02))+(IKabs((x2044+(((-1.0)*x2043))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2046=cj5*cj5;
IkReal x2047=r01*r01;
IkReal x2048=(r01*sj5);
IkReal x2049=(cj5*r00);
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x2046*x2047))+(((-1.0)*x2047))+(((2.0)*x2048*x2049))+(((-1.0)*x2046*(r00*r00))))),-1);
if(!x2050.valid){
continue;
}
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal((x2049+(((-1.0)*x2048)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2050.value)))+(x2051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2052=IKsin(j4);
IkReal x2053=IKcos(j4);
IkReal x2054=(cj5*r10);
IkReal x2055=(r01*sj5);
IkReal x2056=((1.0)*cj2);
IkReal x2057=(cj5*r00);
IkReal x2058=(cj5*r20);
IkReal x2059=((1.0)*x2053);
IkReal x2060=((1.0)*x2052);
IkReal x2061=(sj5*x2052);
evalcond[0]=(((r21*x2061))+(((-1.0)*x2058*x2060))+(((-1.0)*r22*x2059)));
evalcond[1]=((((-1.0)*r12*x2059))+((r11*x2061))+(((-1.0)*x2054*x2060)));
evalcond[2]=(((x2053*x2057))+(((-1.0)*r02*x2060))+(((-1.0)*x2055*x2059)));
evalcond[3]=((-1.0)+(((-1.0)*x2057*x2060))+((x2052*x2055))+(((-1.0)*r02*x2059)));
evalcond[4]=(((x2053*x2058))+(((-1.0)*r21*sj5*x2059))+(((-1.0)*cj1*x2056))+(((-1.0)*r22*x2060))+((sj1*sj2)));
evalcond[5]=((((-1.0)*r12*x2060))+((x2053*x2054))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2059))+(((-1.0)*sj1*x2056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2062=((1.0)*cj5);
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
CheckValue<IkReal> x2064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2062))+(((-1.0)*r10*sj5)))),-1);
if(!x2064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2063.value)+(((1.5707963267949)*(x2064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2065=IKsin(j4);
IkReal x2066=IKcos(j4);
IkReal x2067=(cj5*r10);
IkReal x2068=(r01*sj5);
IkReal x2069=((1.0)*cj2);
IkReal x2070=(cj5*r00);
IkReal x2071=(cj5*r20);
IkReal x2072=((1.0)*x2066);
IkReal x2073=((1.0)*x2065);
IkReal x2074=(sj5*x2065);
evalcond[0]=((((-1.0)*x2071*x2073))+(((-1.0)*r22*x2072))+((r21*x2074)));
evalcond[1]=((((-1.0)*r12*x2072))+((r11*x2074))+(((-1.0)*x2067*x2073)));
evalcond[2]=(((x2066*x2070))+(((-1.0)*r02*x2073))+(((-1.0)*x2068*x2072)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2072))+(((-1.0)*x2070*x2073))+((x2065*x2068)));
evalcond[4]=(((x2066*x2071))+(((-1.0)*r22*x2073))+((sj1*sj2))+(((-1.0)*cj1*x2069))+(((-1.0)*r21*sj5*x2072)));
evalcond[5]=(((x2066*x2067))+(((-1.0)*r12*x2073))+(((-1.0)*r11*sj5*x2072))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2075=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2075.value)))+(x2076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2077=IKsin(j4);
IkReal x2078=IKcos(j4);
IkReal x2079=(cj5*r10);
IkReal x2080=(r01*sj5);
IkReal x2081=((1.0)*cj2);
IkReal x2082=(cj5*r00);
IkReal x2083=(cj5*r20);
IkReal x2084=((1.0)*x2078);
IkReal x2085=((1.0)*x2077);
IkReal x2086=(sj5*x2077);
evalcond[0]=((((-1.0)*r22*x2084))+(((-1.0)*x2083*x2085))+((r21*x2086)));
evalcond[1]=((((-1.0)*r12*x2084))+(((-1.0)*x2079*x2085))+((r11*x2086)));
evalcond[2]=((((-1.0)*r02*x2085))+((x2078*x2082))+(((-1.0)*x2080*x2084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2084))+((x2077*x2080))+(((-1.0)*x2082*x2085)));
evalcond[4]=((((-1.0)*cj1*x2081))+(((-1.0)*r21*sj5*x2084))+(((-1.0)*r22*x2085))+((x2078*x2083))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x2081))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2084))+(((-1.0)*r12*x2085))+((x2078*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2088 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2088)==0){
continue;
}
IkReal x2087=pow(x2088,-0.5);
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2089.value));
IkReal gconst91=((-1.0)*r11*x2087);
IkReal gconst92=(r10*x2087);
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2090.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
IkReal x2091=((-1.0)*(x2093.value));
IkReal x2092=x2087;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2091;
IkReal gconst90=x2091;
IkReal gconst91=((-1.0)*r11*x2092);
IkReal gconst92=(r10*x2092);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2094=((1.0)*gconst92);
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2094))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*r10*sj0*x2094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2094))+(((-1.0)*gconst91*r20)))),-1);
if(!x2096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2095.value)+(((1.5707963267949)*(x2096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2097=IKsin(j4);
IkReal x2098=IKcos(j4);
IkReal x2099=(cj2*sj1);
IkReal x2100=(gconst92*r00);
IkReal x2101=(gconst92*r20);
IkReal x2102=(gconst92*r10);
IkReal x2103=(cj1*sj2);
IkReal x2104=((1.0)*x2098);
IkReal x2105=(gconst91*x2097);
IkReal x2106=((1.0)*x2097);
evalcond[0]=((((-1.0)*r22*x2104))+((r21*x2105))+(((-1.0)*x2101*x2106)));
evalcond[1]=((((-1.0)*r02*x2104))+sj0+(((-1.0)*x2100*x2106))+((r01*x2105)));
evalcond[2]=((((-1.0)*r12*x2104))+(((-1.0)*x2102*x2106))+((r11*x2105))+(((-1.0)*cj0)));
evalcond[3]=(((x2098*x2101))+(((-1.0)*gconst91*r21*x2104))+(((-1.0)*r22*x2106))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x2098*x2100))+(((-1.0)*r02*x2106))+(((-1.0)*gconst91*r01*x2104))+((cj0*x2103))+((cj0*x2099)));
evalcond[5]=(((x2098*x2102))+((sj0*x2099))+(((-1.0)*r12*x2106))+(((-1.0)*gconst91*r11*x2104))+((sj0*x2103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2107.value)+(((1.5707963267949)*(x2108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2109=IKsin(j4);
IkReal x2110=IKcos(j4);
IkReal x2111=(cj2*sj1);
IkReal x2112=(gconst92*r00);
IkReal x2113=(gconst92*r20);
IkReal x2114=(gconst92*r10);
IkReal x2115=(cj1*sj2);
IkReal x2116=((1.0)*x2110);
IkReal x2117=(gconst91*x2109);
IkReal x2118=((1.0)*x2109);
evalcond[0]=(((r21*x2117))+(((-1.0)*r22*x2116))+(((-1.0)*x2113*x2118)));
evalcond[1]=(sj0+((r01*x2117))+(((-1.0)*x2112*x2118))+(((-1.0)*r02*x2116)));
evalcond[2]=((((-1.0)*x2114*x2118))+(((-1.0)*r12*x2116))+(((-1.0)*cj0))+((r11*x2117)));
evalcond[3]=((((-1.0)*gconst91*r21*x2116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2110*x2113))+(((-1.0)*r22*x2118)));
evalcond[4]=(((cj0*x2111))+((cj0*x2115))+((x2110*x2112))+(((-1.0)*gconst91*r01*x2116))+(((-1.0)*r02*x2118)));
evalcond[5]=((((-1.0)*gconst91*r11*x2116))+((sj0*x2111))+((sj0*x2115))+((x2110*x2114))+(((-1.0)*r12*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2120 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2120)==0){
continue;
}
IkReal x2119=pow(x2120,-0.5);
CheckValue<IkReal> x2121 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2121.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2121.value))));
IkReal gconst94=((1.0)*r11*x2119);
IkReal gconst95=((-1.0)*r10*x2119);
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2122.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
IkReal x2123=((1.0)*(x2125.value));
IkReal x2124=x2119;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2123)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2123)));
IkReal gconst94=((1.0)*r11*x2124);
IkReal gconst95=((-1.0)*r10*x2124);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2128 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2128.valid){
continue;
}
IkReal x2126=((1.0)*(x2128.value));
IkReal x2127=x2119;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2126)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2126)));
IkReal gconst94=((1.0)*r11*x2127);
IkReal gconst95=((-1.0)*r10*x2127);
IkReal x2129=r12*r12;
IkReal x2130=(cj0*r02);
IkReal x2131=x2119;
IkReal x2132=(sj0*x2131);
j4eval[0]=((IKabs((((r12*x2130*x2131))+(((-1.0)*x2132))+((x2129*x2132)))))+(IKabs((x2130+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
IkReal x2133=((1.0)*(x2135.value));
IkReal x2134=x2119;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2133)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2133)));
IkReal gconst94=((1.0)*r11*x2134);
IkReal gconst95=((-1.0)*r10*x2134);
IkReal x2136=r12*r12;
IkReal x2137=(sj1*sj2);
IkReal x2138=((1.0)*cj1*cj2);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(((-1.0)+x2136),-1);
if(!x2142.valid){
continue;
}
IkReal x2139=x2142.value;
if((((1.0)+(((-1.0)*x2136)))) < -0.00001)
continue;
IkReal x2140=IKsqrt(((1.0)+(((-1.0)*x2136))));
IkReal x2141=(r12*r22*x2139*x2140);
j4eval[0]=((IKabs(((((-1.0)*r22*x2138))+((r22*x2137)))))+(IKabs(((((-1.0)*x2138*x2141))+((x2137*x2141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2143=(gconst94*r21);
IkReal x2144=(cj1*cj2);
IkReal x2145=(sj1*sj2);
IkReal x2146=(gconst95*r20);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2143*x2146))+(x2146*x2146)+(x2143*x2143))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2144))+((r22*x2145)))),IkReal(((((-1.0)*x2145*x2146))+((x2143*x2145))+(((-1.0)*x2143*x2144))+((x2144*x2146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2149=IKsin(j4);
IkReal x2150=IKcos(j4);
IkReal x2151=(cj2*sj1);
IkReal x2152=(gconst94*r11);
IkReal x2153=(gconst95*r10);
IkReal x2154=(gconst94*r21);
IkReal x2155=(gconst94*r01);
IkReal x2156=(cj1*sj2);
IkReal x2157=((1.0)*x2150);
IkReal x2158=((1.0)*x2149);
IkReal x2159=(gconst95*x2150);
evalcond[0]=(((x2149*x2154))+(((-1.0)*gconst95*r20*x2158))+(((-1.0)*r22*x2157)));
evalcond[1]=(sj0+((x2149*x2155))+(((-1.0)*gconst95*r00*x2158))+(((-1.0)*r02*x2157)));
evalcond[2]=(((x2149*x2152))+(((-1.0)*r12*x2157))+(((-1.0)*x2153*x2158))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2159))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2154*x2157))+(((-1.0)*r22*x2158)));
evalcond[4]=((((-1.0)*r02*x2158))+((cj0*x2156))+((cj0*x2151))+((r00*x2159))+(((-1.0)*x2155*x2157)));
evalcond[5]=((((-1.0)*x2152*x2157))+(((-1.0)*r12*x2158))+((x2150*x2153))+((sj0*x2156))+((sj0*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2160=((1.0)*gconst95);
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2160))+(((-1.0)*gconst94*r20)))),-1);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2160))+((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2160))+((cj0*gconst94*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2161.value)))+(x2162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2163=IKsin(j4);
IkReal x2164=IKcos(j4);
IkReal x2165=(cj2*sj1);
IkReal x2166=(gconst94*r11);
IkReal x2167=(gconst95*r10);
IkReal x2168=(gconst94*r21);
IkReal x2169=(gconst94*r01);
IkReal x2170=(cj1*sj2);
IkReal x2171=((1.0)*x2164);
IkReal x2172=((1.0)*x2163);
IkReal x2173=(gconst95*x2164);
evalcond[0]=((((-1.0)*gconst95*r20*x2172))+((x2163*x2168))+(((-1.0)*r22*x2171)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2172))+(((-1.0)*r02*x2171))+((x2163*x2169)));
evalcond[2]=(((x2163*x2166))+(((-1.0)*r12*x2171))+(((-1.0)*cj0))+(((-1.0)*x2167*x2172)));
evalcond[3]=((((-1.0)*x2168*x2171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2173))+(((-1.0)*r22*x2172)));
evalcond[4]=(((r00*x2173))+(((-1.0)*x2169*x2171))+((cj0*x2170))+((cj0*x2165))+(((-1.0)*r02*x2172)));
evalcond[5]=(((sj0*x2165))+((x2164*x2167))+(((-1.0)*x2166*x2171))+(((-1.0)*r12*x2172))+((sj0*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2174.value)+(((1.5707963267949)*(x2175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=(cj2*sj1);
IkReal x2179=(gconst94*r11);
IkReal x2180=(gconst95*r10);
IkReal x2181=(gconst94*r21);
IkReal x2182=(gconst94*r01);
IkReal x2183=(cj1*sj2);
IkReal x2184=((1.0)*x2177);
IkReal x2185=((1.0)*x2176);
IkReal x2186=(gconst95*x2177);
evalcond[0]=((((-1.0)*gconst95*r20*x2185))+(((-1.0)*r22*x2184))+((x2176*x2181)));
evalcond[1]=(sj0+((x2176*x2182))+(((-1.0)*r02*x2184))+(((-1.0)*gconst95*r00*x2185)));
evalcond[2]=((((-1.0)*x2180*x2185))+((x2176*x2179))+(((-1.0)*r12*x2184))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2185))+(((-1.0)*x2181*x2184)));
evalcond[4]=(((cj0*x2178))+((cj0*x2183))+(((-1.0)*r02*x2185))+(((-1.0)*x2182*x2184))+((r00*x2186)));
evalcond[5]=(((sj0*x2183))+((x2177*x2180))+(((-1.0)*x2179*x2184))+(((-1.0)*r12*x2185))+((sj0*x2178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2187=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2187;
j4eval[1]=IKsign(x2187);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2188=((1.0)*cj5);
IkReal x2189=((((-1.0)*r21*x2188))+(((-1.0)*r20*sj5)));
j4eval[0]=x2189;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2188)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2190=cj5*cj5;
IkReal x2191=r11*r11;
IkReal x2192=(cj5*r10);
IkReal x2193=(r11*sj5);
IkReal x2194=((((-1.0)*x2191))+(((2.0)*x2192*x2193))+((x2190*x2191))+(((-1.0)*(r12*r12)))+(((-1.0)*x2190*(r10*r10))));
j4eval[0]=x2194;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2193))+x2192))));
j4eval[2]=IKsign(x2194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2195=cj5*cj5;
IkReal x2196=r11*r11;
IkReal x2197=(cj5*r10);
IkReal x2198=(r11*sj5);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(((((-1.0)*x2198))+x2197)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign(((((2.0)*x2197*x2198))+(((-1.0)*x2196))+(((-1.0)*x2195*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2195*x2196)))),-1);
if(!x2200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2199.value)+(((1.5707963267949)*(x2200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2201=IKsin(j4);
IkReal x2202=IKcos(j4);
IkReal x2203=(cj5*r10);
IkReal x2204=(r01*sj5);
IkReal x2205=(cj5*r00);
IkReal x2206=(cj5*r20);
IkReal x2207=((1.0)*x2202);
IkReal x2208=((1.0)*x2201);
IkReal x2209=(sj5*x2201);
evalcond[0]=((((-1.0)*r22*x2207))+(((-1.0)*x2206*x2208))+((r21*x2209)));
evalcond[1]=((((-1.0)*x2205*x2208))+((x2201*x2204))+(((-1.0)*r02*x2207)));
evalcond[2]=(((x2202*x2203))+(((-1.0)*r12*x2208))+(((-1.0)*r11*sj5*x2207)));
evalcond[3]=((-1.0)+(((-1.0)*x2203*x2208))+(((-1.0)*r12*x2207))+((r11*x2209)));
evalcond[4]=(((x2202*x2205))+((cj2*sj1))+(((-1.0)*x2204*x2207))+((cj1*sj2))+(((-1.0)*r02*x2208)));
evalcond[5]=(((x2202*x2206))+(((-1.0)*r22*x2208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2210=((1.0)*cj5);
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2210))+(((-1.0)*r20*sj5)))),-1);
if(!x2212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2211.value)+(((1.5707963267949)*(x2212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2213=IKsin(j4);
IkReal x2214=IKcos(j4);
IkReal x2215=(cj5*r10);
IkReal x2216=(r01*sj5);
IkReal x2217=(cj5*r00);
IkReal x2218=(cj5*r20);
IkReal x2219=((1.0)*x2214);
IkReal x2220=((1.0)*x2213);
IkReal x2221=(sj5*x2213);
evalcond[0]=((((-1.0)*r22*x2219))+((r21*x2221))+(((-1.0)*x2218*x2220)));
evalcond[1]=((((-1.0)*x2217*x2220))+(((-1.0)*r02*x2219))+((x2213*x2216)));
evalcond[2]=(((x2214*x2215))+(((-1.0)*r12*x2220))+(((-1.0)*r11*sj5*x2219)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2219))+(((-1.0)*x2215*x2220))+((r11*x2221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2220))+((x2214*x2217))+(((-1.0)*x2216*x2219)));
evalcond[5]=((((-1.0)*r21*sj5*x2219))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2214*x2218))+(((-1.0)*r22*x2220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
CheckValue<IkReal> x2223=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2222.value)+(((1.5707963267949)*(x2223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2224=IKsin(j4);
IkReal x2225=IKcos(j4);
IkReal x2226=(cj5*r10);
IkReal x2227=(r01*sj5);
IkReal x2228=(cj5*r00);
IkReal x2229=(cj5*r20);
IkReal x2230=((1.0)*x2225);
IkReal x2231=((1.0)*x2224);
IkReal x2232=(sj5*x2224);
evalcond[0]=((((-1.0)*x2229*x2231))+((r21*x2232))+(((-1.0)*r22*x2230)));
evalcond[1]=((((-1.0)*r02*x2230))+(((-1.0)*x2228*x2231))+((x2224*x2227)));
evalcond[2]=((((-1.0)*r11*sj5*x2230))+((x2225*x2226))+(((-1.0)*r12*x2231)));
evalcond[3]=((-1.0)+(((-1.0)*x2226*x2231))+(((-1.0)*r12*x2230))+((r11*x2232)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2227*x2230))+((cj1*sj2))+((x2225*x2228))+(((-1.0)*r02*x2231)));
evalcond[5]=(((x2225*x2229))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2230))+(((-1.0)*r22*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2233=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2233;
j4eval[1]=IKsign(x2233);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2234=((1.0)*cj5);
IkReal x2235=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2234)));
j4eval[0]=x2235;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2234))+((r21*sj5))))));
j4eval[2]=IKsign(x2235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2236=cj5*cj5;
IkReal x2237=r11*r11;
IkReal x2238=(r11*sj5);
IkReal x2239=(cj5*r10);
IkReal x2240=((r12*r12)+x2237+(((-2.0)*x2238*x2239))+((x2236*(r10*r10)))+(((-1.0)*x2236*x2237)));
j4eval[0]=x2240;
j4eval[1]=IKsign(x2240);
j4eval[2]=((IKabs(r12))+(IKabs((x2239+(((-1.0)*x2238))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2241=cj5*cj5;
IkReal x2242=r11*r11;
IkReal x2243=(cj5*r10);
IkReal x2244=(r11*sj5);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal((x2243+(((-1.0)*x2244)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2241*x2242))+(r12*r12)+x2242+(((-2.0)*x2243*x2244))+((x2241*(r10*r10))))),-1);
if(!x2246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2245.value)+(((1.5707963267949)*(x2246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2247=IKsin(j4);
IkReal x2248=IKcos(j4);
IkReal x2249=(cj5*r10);
IkReal x2250=(r01*sj5);
IkReal x2251=((1.0)*cj2);
IkReal x2252=(cj5*r00);
IkReal x2253=(cj5*r20);
IkReal x2254=((1.0)*x2248);
IkReal x2255=((1.0)*x2247);
IkReal x2256=(sj5*x2247);
evalcond[0]=((((-1.0)*r22*x2254))+(((-1.0)*x2253*x2255))+((r21*x2256)));
evalcond[1]=((((-1.0)*r02*x2254))+(((-1.0)*x2252*x2255))+((x2247*x2250)));
evalcond[2]=((((-1.0)*r12*x2255))+(((-1.0)*r11*sj5*x2254))+((x2248*x2249)));
evalcond[3]=((1.0)+(((-1.0)*x2249*x2255))+(((-1.0)*r12*x2254))+((r11*x2256)));
evalcond[4]=((((-1.0)*r22*x2255))+((sj1*sj2))+(((-1.0)*r21*sj5*x2254))+(((-1.0)*cj1*x2251))+((x2248*x2253)));
evalcond[5]=((((-1.0)*sj1*x2251))+(((-1.0)*r02*x2255))+(((-1.0)*cj1*sj2))+(((-1.0)*x2250*x2254))+((x2248*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2257=((1.0)*cj5);
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2257)))),-1);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2258.value)+(((1.5707963267949)*(x2259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKsin(j4);
IkReal x2261=IKcos(j4);
IkReal x2262=(cj5*r10);
IkReal x2263=(r01*sj5);
IkReal x2264=((1.0)*cj2);
IkReal x2265=(cj5*r00);
IkReal x2266=(cj5*r20);
IkReal x2267=((1.0)*x2261);
IkReal x2268=((1.0)*x2260);
IkReal x2269=(sj5*x2260);
evalcond[0]=(((r21*x2269))+(((-1.0)*r22*x2267))+(((-1.0)*x2266*x2268)));
evalcond[1]=(((x2260*x2263))+(((-1.0)*r02*x2267))+(((-1.0)*x2265*x2268)));
evalcond[2]=(((x2261*x2262))+(((-1.0)*r11*sj5*x2267))+(((-1.0)*r12*x2268)));
evalcond[3]=((1.0)+((r11*x2269))+(((-1.0)*r12*x2267))+(((-1.0)*x2262*x2268)));
evalcond[4]=((((-1.0)*cj1*x2264))+((sj1*sj2))+((x2261*x2266))+(((-1.0)*r22*x2268))+(((-1.0)*r21*sj5*x2267)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2261*x2265))+(((-1.0)*x2263*x2267))+(((-1.0)*sj1*x2264))+(((-1.0)*r02*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(cj5*r10);
IkReal x2275=(r01*sj5);
IkReal x2276=((1.0)*cj2);
IkReal x2277=(cj5*r00);
IkReal x2278=(cj5*r20);
IkReal x2279=((1.0)*x2273);
IkReal x2280=((1.0)*x2272);
IkReal x2281=(sj5*x2272);
evalcond[0]=((((-1.0)*x2278*x2280))+(((-1.0)*r22*x2279))+((r21*x2281)));
evalcond[1]=((((-1.0)*x2277*x2280))+((x2272*x2275))+(((-1.0)*r02*x2279)));
evalcond[2]=(((x2273*x2274))+(((-1.0)*r12*x2280))+(((-1.0)*r11*sj5*x2279)));
evalcond[3]=((1.0)+((r11*x2281))+(((-1.0)*x2274*x2280))+(((-1.0)*r12*x2279)));
evalcond[4]=(((x2273*x2278))+(((-1.0)*cj1*x2276))+((sj1*sj2))+(((-1.0)*r21*sj5*x2279))+(((-1.0)*r22*x2280)));
evalcond[5]=((((-1.0)*r02*x2280))+((x2273*x2277))+(((-1.0)*x2275*x2279))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2282=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2282);
rxp0_2=(py*r00);
rxp1_0=(r21*x2282);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2283=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2283);
rxp0_2=(py*r00);
rxp1_0=(r21*x2283);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2284=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2284);
rxp0_2=(py*r00);
rxp1_0=(r21*x2284);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2287=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2287.valid){
continue;
}
IkReal x2285=x2287.value;
IkReal x2286=((1.0)*cj0*x2285);
cj4array[0]=((((-1.0)*cj2*sj1*x2286))+(((-1.0)*cj1*sj2*x2286)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2288=IKsin(j4);
IkReal x2289=IKcos(j4);
IkReal x2290=(r21*sj5);
IkReal x2291=((1.0)*x2289);
IkReal x2292=((1.0)*cj5*x2288);
evalcond[0]=((-1.0)*r12*x2288);
evalcond[1]=((((-1.0)*r12*x2291))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x2292))+((x2288*x2290)));
evalcond[3]=((((-1.0)*r00*x2292))+((r01*sj5*x2288)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2290*x2291))+((cj5*r20*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2294=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2294.valid){
continue;
}
IkReal x2293=x2294.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2293))+((cj1*cj2*x2293)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2295=IKsin(j4);
IkReal x2296=IKcos(j4);
IkReal x2297=(cj5*r00);
IkReal x2298=((1.0)*x2295);
IkReal x2299=(sj5*x2295);
IkReal x2300=((1.0)*x2296);
evalcond[0]=((-1.0)*r12*x2295);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2300)));
evalcond[2]=(((r21*x2299))+(((-1.0)*cj5*r20*x2298)));
evalcond[3]=((((-1.0)*x2297*x2298))+((r01*x2299)));
evalcond[4]=((((-1.0)*r01*sj5*x2300))+((x2296*x2297))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2301=IKPowWithIntegerCheck(r12,-1);
if(!x2301.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2301.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2302=IKsin(j4);
IkReal x2303=IKcos(j4);
IkReal x2304=(cj5*r00);
IkReal x2305=(cj5*r20);
IkReal x2306=(r21*sj5);
IkReal x2307=(r01*sj5);
IkReal x2308=((1.0)*x2302);
IkReal x2309=((1.0)*x2303);
evalcond[0]=((-1.0)*r12*x2302);
evalcond[1]=((((-1.0)*x2305*x2308))+((x2302*x2306)));
evalcond[2]=((((-1.0)*x2304*x2308))+((x2302*x2307)));
evalcond[3]=((((-1.0)*x2306*x2309))+((x2303*x2305))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x2303*x2304))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x2307*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2310=((1.0)*cj5);
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2310))+(((-1.0)*r20*sj5)))),-1);
if(!x2311.valid){
continue;
}
CheckValue<IkReal> x2312 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2310))+(((-1.0)*cj0*r00*x2310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2311.value)))+(x2312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2313=IKsin(j4);
IkReal x2314=IKcos(j4);
IkReal x2315=(cj5*r10);
IkReal x2316=(cj2*sj1);
IkReal x2317=(r01*sj5);
IkReal x2318=(cj5*r00);
IkReal x2319=(cj5*r20);
IkReal x2320=(cj1*sj2);
IkReal x2321=((1.0)*x2314);
IkReal x2322=((1.0)*x2313);
IkReal x2323=(sj5*x2313);
evalcond[0]=((((-1.0)*r22*x2321))+((r21*x2323))+(((-1.0)*x2319*x2322)));
evalcond[1]=(sj0+(((-1.0)*x2318*x2322))+(((-1.0)*r02*x2321))+((x2313*x2317)));
evalcond[2]=((((-1.0)*x2315*x2322))+((r11*x2323))+(((-1.0)*r12*x2321))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2322))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2314*x2319))+(((-1.0)*r21*sj5*x2321)));
evalcond[4]=(((cj0*x2320))+((x2314*x2318))+(((-1.0)*x2317*x2321))+(((-1.0)*r02*x2322))+((cj0*x2316)));
evalcond[5]=((((-1.0)*r11*sj5*x2321))+((sj0*x2316))+((sj0*x2320))+(((-1.0)*r12*x2322))+((x2314*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2324=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2324.valid){
continue;
}
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2324.value)))+(x2325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2326=IKsin(j4);
IkReal x2327=IKcos(j4);
IkReal x2328=(cj5*r10);
IkReal x2329=(cj2*sj1);
IkReal x2330=(r01*sj5);
IkReal x2331=(cj5*r00);
IkReal x2332=(cj5*r20);
IkReal x2333=(cj1*sj2);
IkReal x2334=((1.0)*x2327);
IkReal x2335=((1.0)*x2326);
IkReal x2336=(sj5*x2326);
evalcond[0]=(((r21*x2336))+(((-1.0)*x2332*x2335))+(((-1.0)*r22*x2334)));
evalcond[1]=(sj0+(((-1.0)*x2331*x2335))+(((-1.0)*r02*x2334))+((x2326*x2330)));
evalcond[2]=((((-1.0)*x2328*x2335))+((r11*x2336))+(((-1.0)*r12*x2334))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2335))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2327*x2332))+(((-1.0)*r21*sj5*x2334)));
evalcond[4]=(((cj0*x2329))+((x2327*x2331))+(((-1.0)*r02*x2335))+((cj0*x2333))+(((-1.0)*x2330*x2334)));
evalcond[5]=(((sj0*x2333))+((x2327*x2328))+((sj0*x2329))+(((-1.0)*r11*sj5*x2334))+(((-1.0)*r12*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2337=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2337.valid){
continue;
}
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2337.value)))+(x2338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2339=IKsin(j4);
IkReal x2340=IKcos(j4);
IkReal x2341=(cj5*r10);
IkReal x2342=(cj2*sj1);
IkReal x2343=(r01*sj5);
IkReal x2344=(cj5*r00);
IkReal x2345=(cj5*r20);
IkReal x2346=(cj1*sj2);
IkReal x2347=((1.0)*x2340);
IkReal x2348=((1.0)*x2339);
IkReal x2349=(sj5*x2339);
evalcond[0]=((((-1.0)*x2345*x2348))+(((-1.0)*r22*x2347))+((r21*x2349)));
evalcond[1]=(sj0+(((-1.0)*x2344*x2348))+(((-1.0)*r02*x2347))+((x2339*x2343)));
evalcond[2]=((((-1.0)*x2341*x2348))+((r11*x2349))+(((-1.0)*r12*x2347))+(((-1.0)*cj0)));
evalcond[3]=(((x2340*x2345))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2348))+(((-1.0)*r21*sj5*x2347)));
evalcond[4]=(((x2340*x2344))+(((-1.0)*r02*x2348))+(((-1.0)*x2343*x2347))+((cj0*x2346))+((cj0*x2342)));
evalcond[5]=(((sj0*x2346))+((sj0*x2342))+((x2340*x2341))+(((-1.0)*r11*sj5*x2347))+(((-1.0)*r12*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2350=cj5*cj5;
IkReal x2351=r21*r21;
IkReal x2352=(sj1*sj2);
IkReal x2353=(r21*sj5);
IkReal x2354=(cj1*cj2);
IkReal x2355=(cj5*r20);
CheckValue<IkReal> x2356=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2353*x2355))+(r22*r22)+x2351+((x2350*(r20*r20)))+(((-1.0)*x2350*x2351)))),-1);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357 = IKatan2WithCheck(IkReal((((r22*x2352))+(((-1.0)*r22*x2354)))),IkReal(((((-1.0)*x2352*x2355))+((x2354*x2355))+((x2352*x2353))+(((-1.0)*x2353*x2354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2356.value)))+(x2357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2358=IKsin(j4);
IkReal x2359=IKcos(j4);
IkReal x2360=(r21*sj5);
IkReal x2361=(cj5*r20);
IkReal x2362=((1.0)*x2359);
IkReal x2363=((1.0)*x2358);
evalcond[0]=(((x2358*x2360))+(((-1.0)*x2361*x2363))+(((-1.0)*r22*x2362)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2359*x2361))+(((-1.0)*x2360*x2362))+(((-1.0)*r22*x2363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2364=(cj5*sj4);
IkReal x2365=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2365))+((r00*x2364))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2365))+(((-1.0)*r10*x2364))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2365))+((r00*x2364))+((cj4*r02))))+IKsqr((((r11*x2365))+(((-1.0)*r10*x2364))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2365))+((r00*x2364))+((cj4*r02))), (((r11*x2365))+(((-1.0)*r10*x2364))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2366=IKcos(j0);
IkReal x2367=IKsin(j0);
IkReal x2368=(cj4*cj5);
IkReal x2369=(cj5*r01);
IkReal x2370=((1.0)*sj1);
IkReal x2371=(r11*sj5);
IkReal x2372=(cj1*cj2);
IkReal x2373=((0.1157)*sj5);
IkReal x2374=((1.0)*sj4);
IkReal x2375=(cj5*r11);
IkReal x2376=((1.0)*cj4);
IkReal x2377=(r01*sj5);
IkReal x2378=((0.612)*cj1);
IkReal x2379=(sj2*x2367);
IkReal x2380=(sj1*x2366);
IkReal x2381=(sj2*x2366);
evalcond[0]=((((-1.0)*r02*x2376))+x2367+((sj4*x2377))+(((-1.0)*cj5*r00*x2374)));
evalcond[1]=((((-1.0)*x2366))+(((-1.0)*cj5*r10*x2374))+((sj4*x2371))+(((-1.0)*r12*x2376)));
evalcond[2]=(((r00*sj5))+x2369+((x2366*x2372))+(((-1.0)*x2370*x2381)));
evalcond[3]=(((r10*sj5))+x2375+((x2367*x2372))+(((-1.0)*x2370*x2379)));
evalcond[4]=((((-1.0)*r02*x2374))+(((-1.0)*x2376*x2377))+((cj2*x2380))+((cj1*x2381))+((r00*x2368)));
evalcond[5]=(((r10*x2368))+((cj2*sj1*x2367))+((cj1*x2379))+(((-1.0)*x2371*x2376))+(((-1.0)*r12*x2374)));
evalcond[6]=((((-0.1157)*x2369))+(((-1.0)*r00*x2373))+(((-1.0)*px))+(((0.163941)*x2367))+(((0.5723)*sj2*x2380))+(((-0.5723)*x2366*x2372))+(((-1.0)*x2366*x2378)));
evalcond[7]=((((-0.1157)*x2375))+(((-1.0)*r10*x2373))+(((-1.0)*py))+(((-0.5723)*x2367*x2372))+(((0.5723)*sj1*x2379))+(((-1.0)*x2367*x2378))+(((-0.163941)*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2382=((1.0)*cj5);
IkReal x2383=((1.0)*sj5);
CheckValue<IkReal> x2384=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2384.valid){
continue;
}
CheckValue<IkReal> x2385 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2383))+(((-1.0)*r11*x2382)))),IkReal(((((-1.0)*r01*x2382))+(((-1.0)*r00*x2383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2385.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2384.value)))+(x2385.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2386=IKcos(j0);
IkReal x2387=IKsin(j0);
IkReal x2388=(cj5*r01);
IkReal x2389=(cj1*cj2);
IkReal x2390=((0.1157)*sj5);
IkReal x2391=((0.612)*cj1);
IkReal x2392=(cj5*r11);
IkReal x2393=(sj1*sj2*x2387);
IkReal x2394=(sj1*sj2*x2386);
evalcond[0]=(((r00*sj5))+x2388+(((-1.0)*x2394))+((x2386*x2389)));
evalcond[1]=(((x2387*x2389))+((r10*sj5))+x2392+(((-1.0)*x2393)));
evalcond[2]=((((-1.0)*r00*x2390))+(((-1.0)*x2386*x2391))+(((-1.0)*px))+(((0.5723)*x2394))+(((-0.1157)*x2388))+(((0.163941)*x2387))+(((-0.5723)*x2386*x2389)));
evalcond[3]=((((-1.0)*r10*x2390))+(((-0.5723)*x2387*x2389))+(((-1.0)*py))+(((0.5723)*x2393))+(((-0.163941)*x2386))+(((-0.1157)*x2392))+(((-1.0)*x2387*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2395=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2395;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2396=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2396;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2397=((1.0)*cj5);
IkReal x2398=((((-1.0)*r21*x2397))+(((-1.0)*r20*sj5)));
j4eval[0]=x2398;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2397))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2397))))));
j4eval[2]=IKsign(x2398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2399=((-1.0)*r20);
IkReal x2401 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2401)==0){
continue;
}
IkReal x2400=pow(x2401,-0.5);
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2399),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2402.value));
IkReal gconst79=(r21*x2400);
IkReal gconst80=(x2399*x2400);
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2404=((-1.0)*r20);
IkReal x2405=x2400;
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2404),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
IkReal x2406=((-1.0)*(x2407.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2406;
IkReal gconst78=x2406;
IkReal gconst79=(r21*x2405);
IkReal gconst80=(x2404*x2405);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2408=((-1.0)*r20);
IkReal x2409=x2400;
CheckValue<IkReal> x2411 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2408),IKFAST_ATAN2_MAGTHRESH);
if(!x2411.valid){
continue;
}
IkReal x2410=((-1.0)*(x2411.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2410;
IkReal gconst78=x2410;
IkReal gconst79=(r21*x2409);
IkReal gconst80=(x2408*x2409);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2412=((-1.0)*r20);
IkReal x2413=x2400;
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2412),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
IkReal x2414=((-1.0)*(x2415.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2414;
IkReal gconst78=x2414;
IkReal gconst79=(r21*x2413);
IkReal gconst80=(x2412*x2413);
IkReal x2416=r22*r22;
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2416))),-1);
if(!x2419.valid){
continue;
}
IkReal x2417=x2419.value;
IkReal x2418=(x2416+(((2.0)*x2417*(r20*r20)*(r21*r21)))+((x2417*(r20*r20*r20*r20)))+((x2417*(r21*r21*r21*r21))));
j4eval[0]=x2418;
j4eval[1]=IKsign(x2418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2420=(sj1*sj2);
IkReal x2421=(gconst80*r20);
IkReal x2422=(gconst79*r21);
IkReal x2423=(cj1*cj2);
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal((((r22*x2420))+(((-1.0)*r22*x2423)))),IkReal((((x2420*x2422))+(((-1.0)*x2420*x2421))+(((-1.0)*x2422*x2423))+((x2421*x2423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign(((x2422*x2422)+(r22*r22)+(x2421*x2421)+(((-2.0)*x2421*x2422)))),-1);
if(!x2425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2424.value)+(((1.5707963267949)*(x2425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2426=IKsin(j4);
IkReal x2427=IKcos(j4);
IkReal x2428=(gconst79*r01);
IkReal x2429=(cj2*sj1);
IkReal x2430=(gconst79*r21);
IkReal x2431=(gconst79*r11);
IkReal x2432=(cj1*sj2);
IkReal x2433=((1.0)*x2427);
IkReal x2434=(gconst80*x2427);
IkReal x2435=((1.0)*x2426);
IkReal x2436=(gconst80*x2435);
evalcond[0]=((((-1.0)*r22*x2433))+((x2426*x2430))+(((-1.0)*r20*x2436)));
evalcond[1]=(sj0+((x2426*x2428))+(((-1.0)*r00*x2436))+(((-1.0)*r02*x2433)));
evalcond[2]=(((x2426*x2431))+(((-1.0)*r12*x2433))+(((-1.0)*r10*x2436))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2435))+((r20*x2434))+(((-1.0)*x2430*x2433))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r00*x2434))+((cj0*x2432))+(((-1.0)*r02*x2435))+(((-1.0)*x2428*x2433))+((cj0*x2429)));
evalcond[5]=((((-1.0)*x2431*x2433))+((sj0*x2429))+(((-1.0)*r12*x2435))+((sj0*x2432))+((r10*x2434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2437.value)))+(x2438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2439=IKsin(j4);
IkReal x2440=IKcos(j4);
IkReal x2441=(gconst79*r01);
IkReal x2442=(cj2*sj1);
IkReal x2443=(gconst79*r21);
IkReal x2444=(gconst79*r11);
IkReal x2445=(cj1*sj2);
IkReal x2446=((1.0)*x2440);
IkReal x2447=(gconst80*x2440);
IkReal x2448=((1.0)*x2439);
IkReal x2449=(gconst80*x2448);
evalcond[0]=((((-1.0)*r20*x2449))+((x2439*x2443))+(((-1.0)*r22*x2446)));
evalcond[1]=(sj0+((x2439*x2441))+(((-1.0)*r00*x2449))+(((-1.0)*r02*x2446)));
evalcond[2]=((((-1.0)*r10*x2449))+(((-1.0)*r12*x2446))+((x2439*x2444))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2443*x2446))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2448))+((r20*x2447)));
evalcond[4]=(((r00*x2447))+(((-1.0)*x2441*x2446))+((cj0*x2442))+((cj0*x2445))+(((-1.0)*r02*x2448)));
evalcond[5]=(((r10*x2447))+((sj0*x2445))+((sj0*x2442))+(((-1.0)*x2444*x2446))+(((-1.0)*r12*x2448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2450.valid){
continue;
}
CheckValue<IkReal> x2451 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2450.value)))+(x2451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2452=IKsin(j4);
IkReal x2453=IKcos(j4);
IkReal x2454=(gconst79*r01);
IkReal x2455=(cj2*sj1);
IkReal x2456=(gconst79*r21);
IkReal x2457=(gconst79*r11);
IkReal x2458=(cj1*sj2);
IkReal x2459=((1.0)*x2453);
IkReal x2460=(gconst80*x2453);
IkReal x2461=((1.0)*x2452);
IkReal x2462=(gconst80*x2461);
evalcond[0]=(((x2452*x2456))+(((-1.0)*r20*x2462))+(((-1.0)*r22*x2459)));
evalcond[1]=(sj0+(((-1.0)*r00*x2462))+((x2452*x2454))+(((-1.0)*r02*x2459)));
evalcond[2]=(((x2452*x2457))+(((-1.0)*r12*x2459))+(((-1.0)*r10*x2462))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2461))+((r20*x2460))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2456*x2459)));
evalcond[4]=((((-1.0)*x2454*x2459))+((cj0*x2458))+((cj0*x2455))+(((-1.0)*r02*x2461))+((r00*x2460)));
evalcond[5]=(((sj0*x2458))+((sj0*x2455))+(((-1.0)*r12*x2461))+(((-1.0)*x2457*x2459))+((r10*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2463=((-1.0)*r21);
IkReal x2465 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2465)==0){
continue;
}
IkReal x2464=pow(x2465,-0.5);
CheckValue<IkReal> x2466 = IKatan2WithCheck(IkReal(x2463),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2466.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2466.value))));
IkReal gconst82=(x2463*x2464);
IkReal gconst83=((1.0)*r20*x2464);
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2467.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2468=((-1.0)*r21);
CheckValue<IkReal> x2471 = IKatan2WithCheck(IkReal(x2468),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2471.valid){
continue;
}
IkReal x2469=((1.0)*(x2471.value));
IkReal x2470=x2464;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2469)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2469)));
IkReal gconst82=(x2468*x2470);
IkReal gconst83=((1.0)*r20*x2470);
IkReal x2472=r22*r22;
IkReal x2473=((1.0)*x2472);
CheckValue<IkReal> x2477=IKPowWithIntegerCheck(((-1.0)+x2472),-1);
if(!x2477.valid){
continue;
}
IkReal x2474=x2477.value;
if((((1.0)+(((-1.0)*x2473)))) < -0.00001)
continue;
IkReal x2475=IKsqrt(((1.0)+(((-1.0)*x2473))));
IkReal x2476=(sj0*x2474*x2475);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2476+(((-1.0)*x2473*x2476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2478=((-1.0)*r21);
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal(x2478),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
IkReal x2479=((1.0)*(x2481.value));
IkReal x2480=x2464;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2479)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2479)));
IkReal gconst82=(x2478*x2480);
IkReal gconst83=((1.0)*r20*x2480);
IkReal x2482=r22*r22;
IkReal x2483=((1.0)*x2482);
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(((-1.0)+x2482),-1);
if(!x2487.valid){
continue;
}
IkReal x2484=x2487.value;
if((((1.0)+(((-1.0)*x2483)))) < -0.00001)
continue;
IkReal x2485=IKsqrt(((1.0)+(((-1.0)*x2483))));
IkReal x2486=(cj0*x2484*x2485);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2486+(((-1.0)*x2483*x2486))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2488=((-1.0)*r21);
CheckValue<IkReal> x2491 = IKatan2WithCheck(IkReal(x2488),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2491.valid){
continue;
}
IkReal x2489=((1.0)*(x2491.value));
IkReal x2490=x2464;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2489)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2489)));
IkReal gconst82=(x2488*x2490);
IkReal gconst83=((1.0)*r20*x2490);
IkReal x2492=r22*r22;
IkReal x2493=(cj0*r02);
IkReal x2494=(r12*sj0);
CheckValue<IkReal> x2498=IKPowWithIntegerCheck(((-1.0)+x2492),-1);
if(!x2498.valid){
continue;
}
IkReal x2495=x2498.value;
if((((1.0)+(((-1.0)*x2492)))) < -0.00001)
continue;
IkReal x2496=IKsqrt(((1.0)+(((-1.0)*x2492))));
IkReal x2497=((1.0)*r22*x2495*x2496);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2493*x2497))+(((-1.0)*x2494*x2497)))))+(IKabs((x2493+x2494))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2499=((1.0)*gconst83);
CheckValue<IkReal> x2500=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2499)))),-1);
if(!x2500.valid){
continue;
}
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2499))+(((-1.0)*cj0*r00*x2499))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2500.value)))+(x2501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2502=IKsin(j4);
IkReal x2503=IKcos(j4);
IkReal x2504=(cj2*sj1);
IkReal x2505=(gconst82*r11);
IkReal x2506=(cj1*sj2);
IkReal x2507=((1.0)*x2503);
IkReal x2508=(gconst83*x2503);
IkReal x2509=(gconst82*x2502);
IkReal x2510=((1.0)*x2502);
evalcond[0]=((((-1.0)*gconst83*r20*x2510))+(((-1.0)*r22*x2507))+((r21*x2509)));
evalcond[1]=((((-1.0)*r02*x2507))+sj0+(((-1.0)*gconst83*r00*x2510))+((r01*x2509)));
evalcond[2]=((((-1.0)*r12*x2507))+(((-1.0)*gconst83*r10*x2510))+(((-1.0)*cj0))+((x2502*x2505)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2510))+((r20*x2508))+(((-1.0)*gconst82*r21*x2507)));
evalcond[4]=(((cj0*x2506))+((cj0*x2504))+(((-1.0)*gconst82*r01*x2507))+(((-1.0)*r02*x2510))+((r00*x2508)));
evalcond[5]=(((r10*x2508))+(((-1.0)*r12*x2510))+((sj0*x2506))+((sj0*x2504))+(((-1.0)*x2505*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2511.value)+(((1.5707963267949)*(x2512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2513=IKsin(j4);
IkReal x2514=IKcos(j4);
IkReal x2515=(cj2*sj1);
IkReal x2516=(gconst82*r11);
IkReal x2517=(cj1*sj2);
IkReal x2518=((1.0)*x2514);
IkReal x2519=(gconst83*x2514);
IkReal x2520=(gconst82*x2513);
IkReal x2521=((1.0)*x2513);
evalcond[0]=((((-1.0)*r22*x2518))+(((-1.0)*gconst83*r20*x2521))+((r21*x2520)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2521))+((r01*x2520))+(((-1.0)*r02*x2518)));
evalcond[2]=((((-1.0)*gconst83*r10*x2521))+(((-1.0)*r12*x2518))+((x2513*x2516))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2518))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2521))+((r20*x2519)));
evalcond[4]=(((cj0*x2517))+((cj0*x2515))+(((-1.0)*r02*x2521))+(((-1.0)*gconst82*r01*x2518))+((r00*x2519)));
evalcond[5]=((((-1.0)*r12*x2521))+((r10*x2519))+((sj0*x2517))+((sj0*x2515))+(((-1.0)*x2516*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2522.value)+(((1.5707963267949)*(x2523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2524=IKsin(j4);
IkReal x2525=IKcos(j4);
IkReal x2526=(cj2*sj1);
IkReal x2527=(gconst82*r11);
IkReal x2528=(cj1*sj2);
IkReal x2529=((1.0)*x2525);
IkReal x2530=(gconst83*x2525);
IkReal x2531=(gconst82*x2524);
IkReal x2532=((1.0)*x2524);
evalcond[0]=((((-1.0)*gconst83*r20*x2532))+((r21*x2531))+(((-1.0)*r22*x2529)));
evalcond[1]=(((r01*x2531))+sj0+(((-1.0)*r02*x2529))+(((-1.0)*gconst83*r00*x2532)));
evalcond[2]=((((-1.0)*r12*x2529))+(((-1.0)*gconst83*r10*x2532))+((x2524*x2527))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2530))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2529))+(((-1.0)*r22*x2532)));
evalcond[4]=((((-1.0)*r02*x2532))+((cj0*x2526))+((cj0*x2528))+((r00*x2530))+(((-1.0)*gconst82*r01*x2529)));
evalcond[5]=((((-1.0)*x2527*x2529))+((r10*x2530))+((sj0*x2526))+((sj0*x2528))+(((-1.0)*r12*x2532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2534 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2534)==0){
continue;
}
IkReal x2533=pow(x2534,-0.5);
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2535.value));
IkReal gconst85=((-1.0)*r01*x2533);
IkReal gconst86=(r00*x2533);
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2536.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
IkReal x2537=((-1.0)*(x2539.value));
IkReal x2538=x2533;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2537;
IkReal gconst84=x2537;
IkReal gconst85=((-1.0)*r01*x2538);
IkReal gconst86=(r00*x2538);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2540=((1.0)*gconst86);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst85*r11*sj0))+((cj0*gconst85*r01))+(((-1.0)*cj0*r00*x2540))+(((-1.0)*r10*sj0*x2540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2540)))),-1);
if(!x2542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2541.value)+(((1.5707963267949)*(x2542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2543=IKsin(j4);
IkReal x2544=IKcos(j4);
IkReal x2545=(gconst85*r21);
IkReal x2546=(cj2*sj1);
IkReal x2547=(gconst86*r00);
IkReal x2548=(gconst86*r10);
IkReal x2549=(gconst85*r11);
IkReal x2550=(gconst85*r01);
IkReal x2551=(gconst86*r20);
IkReal x2552=(cj1*sj2);
IkReal x2553=((1.0)*x2544);
IkReal x2554=((1.0)*x2543);
evalcond[0]=(((x2543*x2545))+(((-1.0)*x2551*x2554))+(((-1.0)*r22*x2553)));
evalcond[1]=(sj0+((x2543*x2550))+(((-1.0)*r02*x2553))+(((-1.0)*x2547*x2554)));
evalcond[2]=((((-1.0)*r12*x2553))+(((-1.0)*x2548*x2554))+((x2543*x2549))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2545*x2553))+((x2544*x2551))+(((-1.0)*r22*x2554)));
evalcond[4]=((((-1.0)*x2550*x2553))+(((-1.0)*r02*x2554))+((cj0*x2552))+((cj0*x2546))+((x2544*x2547)));
evalcond[5]=((((-1.0)*x2549*x2553))+(((-1.0)*r12*x2554))+((sj0*x2552))+((sj0*x2546))+((x2544*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x2555.valid){
continue;
}
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2555.value)))+(x2556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2557=IKsin(j4);
IkReal x2558=IKcos(j4);
IkReal x2559=(gconst85*r21);
IkReal x2560=(cj2*sj1);
IkReal x2561=(gconst86*r00);
IkReal x2562=(gconst86*r10);
IkReal x2563=(gconst85*r11);
IkReal x2564=(gconst85*r01);
IkReal x2565=(gconst86*r20);
IkReal x2566=(cj1*sj2);
IkReal x2567=((1.0)*x2558);
IkReal x2568=((1.0)*x2557);
evalcond[0]=((((-1.0)*r22*x2567))+(((-1.0)*x2565*x2568))+((x2557*x2559)));
evalcond[1]=(sj0+(((-1.0)*r02*x2567))+((x2557*x2564))+(((-1.0)*x2561*x2568)));
evalcond[2]=((((-1.0)*x2562*x2568))+((x2557*x2563))+(((-1.0)*r12*x2567))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2568))+((x2558*x2565))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2559*x2567)));
evalcond[4]=((((-1.0)*r02*x2568))+((x2558*x2561))+((cj0*x2560))+((cj0*x2566))+(((-1.0)*x2564*x2567)));
evalcond[5]=((((-1.0)*x2563*x2567))+((x2558*x2562))+((sj0*x2566))+((sj0*x2560))+(((-1.0)*r12*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2570 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2570)==0){
continue;
}
IkReal x2569=pow(x2570,-0.5);
CheckValue<IkReal> x2571 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2571.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2571.value))));
IkReal gconst88=((1.0)*r01*x2569);
IkReal gconst89=((-1.0)*r00*x2569);
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2572.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2575 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2575.valid){
continue;
}
IkReal x2573=((1.0)*(x2575.value));
IkReal x2574=x2569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2573)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2573)));
IkReal gconst88=((1.0)*r01*x2574);
IkReal gconst89=((-1.0)*r00*x2574);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
IkReal x2576=((1.0)*(x2578.value));
IkReal x2577=x2569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2576)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2576)));
IkReal gconst88=((1.0)*r01*x2577);
IkReal gconst89=((-1.0)*r00*x2577);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
IkReal x2579=((1.0)*(x2581.value));
IkReal x2580=x2569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2579)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2579)));
IkReal gconst88=((1.0)*r01*x2580);
IkReal gconst89=((-1.0)*r00*x2580);
IkReal x2582=r02*r02;
IkReal x2583=(r12*sj0);
IkReal x2584=x2569;
IkReal x2585=(cj0*x2584);
j4eval[0]=((IKabs((x2583+((cj0*r02)))))+(IKabs((((r02*x2583*x2584))+(((-1.0)*x2585))+((x2582*x2585))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2586=((1.0)*gconst89);
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2586))+(((-1.0)*gconst88*r20)))),-1);
if(!x2587.valid){
continue;
}
CheckValue<IkReal> x2588 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*r10*sj0*x2586))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x2586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2587.value)))+(x2588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2589=IKsin(j4);
IkReal x2590=IKcos(j4);
IkReal x2591=(cj2*sj1);
IkReal x2592=(cj1*sj2);
IkReal x2593=((1.0)*x2590);
IkReal x2594=(gconst89*x2590);
IkReal x2595=((1.0)*x2589);
IkReal x2596=(gconst88*x2589);
IkReal x2597=(gconst89*x2595);
evalcond[0]=((((-1.0)*r22*x2593))+(((-1.0)*r20*x2597))+((r21*x2596)));
evalcond[1]=((((-1.0)*r00*x2597))+sj0+((r01*x2596))+(((-1.0)*r02*x2593)));
evalcond[2]=(((r11*x2596))+(((-1.0)*r12*x2593))+(((-1.0)*r10*x2597))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2594))+(((-1.0)*gconst88*r21*x2593)));
evalcond[4]=(((r00*x2594))+(((-1.0)*gconst88*r01*x2593))+(((-1.0)*r02*x2595))+((cj0*x2592))+((cj0*x2591)));
evalcond[5]=(((r10*x2594))+(((-1.0)*gconst88*r11*x2593))+((sj0*x2592))+((sj0*x2591))+(((-1.0)*r12*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2598=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2598.valid){
continue;
}
CheckValue<IkReal> x2599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2598.value)))+(x2599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2600=IKsin(j4);
IkReal x2601=IKcos(j4);
IkReal x2602=(cj2*sj1);
IkReal x2603=(cj1*sj2);
IkReal x2604=((1.0)*x2601);
IkReal x2605=(gconst89*x2601);
IkReal x2606=((1.0)*x2600);
IkReal x2607=(gconst88*x2600);
IkReal x2608=(gconst89*x2606);
evalcond[0]=((((-1.0)*r22*x2604))+((r21*x2607))+(((-1.0)*r20*x2608)));
evalcond[1]=(sj0+(((-1.0)*r02*x2604))+((r01*x2607))+(((-1.0)*r00*x2608)));
evalcond[2]=((((-1.0)*r10*x2608))+(((-1.0)*r12*x2604))+((r11*x2607))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2605))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2604))+(((-1.0)*r22*x2606)));
evalcond[4]=((((-1.0)*gconst88*r01*x2604))+(((-1.0)*r02*x2606))+((cj0*x2603))+((cj0*x2602))+((r00*x2605)));
evalcond[5]=((((-1.0)*gconst88*r11*x2604))+(((-1.0)*r12*x2606))+((r10*x2605))+((sj0*x2603))+((sj0*x2602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2609.valid){
continue;
}
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2609.value)))+(x2610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2611=IKsin(j4);
IkReal x2612=IKcos(j4);
IkReal x2613=(cj2*sj1);
IkReal x2614=(cj1*sj2);
IkReal x2615=((1.0)*x2612);
IkReal x2616=(gconst89*x2612);
IkReal x2617=((1.0)*x2611);
IkReal x2618=(gconst88*x2611);
IkReal x2619=(gconst89*x2617);
evalcond[0]=((((-1.0)*r22*x2615))+(((-1.0)*r20*x2619))+((r21*x2618)));
evalcond[1]=((((-1.0)*r00*x2619))+((r01*x2618))+sj0+(((-1.0)*r02*x2615)));
evalcond[2]=((((-1.0)*r12*x2615))+((r11*x2618))+(((-1.0)*r10*x2619))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2616))+(((-1.0)*gconst88*r21*x2615))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2617)));
evalcond[4]=(((r00*x2616))+(((-1.0)*gconst88*r01*x2615))+(((-1.0)*r02*x2617))+((cj0*x2614))+((cj0*x2613)));
evalcond[5]=((((-1.0)*gconst88*r11*x2615))+(((-1.0)*r12*x2617))+((r10*x2616))+((sj0*x2614))+((sj0*x2613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2620=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2620;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2621=((1.0)*cj5);
IkReal x2622=((((-1.0)*r21*x2621))+(((-1.0)*r20*sj5)));
j4eval[0]=x2622;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2621))))));
j4eval[2]=IKsign(x2622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2623=cj5*cj5;
IkReal x2624=r01*r01;
IkReal x2625=(cj5*r00);
IkReal x2626=(r01*sj5);
IkReal x2627=(((x2623*(r00*r00)))+(((-1.0)*x2623*x2624))+(((-2.0)*x2625*x2626))+(r02*r02)+x2624);
j4eval[0]=x2627;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2626))+x2625))));
j4eval[2]=IKsign(x2627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2628=cj5*cj5;
IkReal x2629=r01*r01;
IkReal x2630=(r01*sj5);
IkReal x2631=(cj5*r00);
CheckValue<IkReal> x2632 = IKatan2WithCheck(IkReal(((((-1.0)*x2630))+x2631)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2632.valid){
continue;
}
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2628*x2629))+(((-2.0)*x2630*x2631))+(r02*r02)+((x2628*(r00*r00)))+x2629)),-1);
if(!x2633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2632.value)+(((1.5707963267949)*(x2633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2634=IKsin(j4);
IkReal x2635=IKcos(j4);
IkReal x2636=(cj5*r10);
IkReal x2637=(r01*sj5);
IkReal x2638=(cj5*r00);
IkReal x2639=(cj5*r20);
IkReal x2640=((1.0)*x2635);
IkReal x2641=((1.0)*x2634);
IkReal x2642=(sj5*x2634);
evalcond[0]=((((-1.0)*r22*x2640))+((r21*x2642))+(((-1.0)*x2639*x2641)));
evalcond[1]=(((r11*x2642))+(((-1.0)*r12*x2640))+(((-1.0)*x2636*x2641)));
evalcond[2]=((((-1.0)*x2637*x2640))+(((-1.0)*r02*x2641))+((x2635*x2638)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2640))+((x2634*x2637))+(((-1.0)*x2638*x2641)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2640))+(((-1.0)*r12*x2641))+((cj1*sj2))+((x2635*x2636)));
evalcond[5]=((((-1.0)*r22*x2641))+(((-1.0)*r21*sj5*x2640))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2635*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2643=((1.0)*cj5);
CheckValue<IkReal> x2644 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2644.valid){
continue;
}
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2643))+(((-1.0)*r20*sj5)))),-1);
if(!x2645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2644.value)+(((1.5707963267949)*(x2645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2646=IKsin(j4);
IkReal x2647=IKcos(j4);
IkReal x2648=(cj5*r10);
IkReal x2649=(r01*sj5);
IkReal x2650=(cj5*r00);
IkReal x2651=(cj5*r20);
IkReal x2652=((1.0)*x2647);
IkReal x2653=((1.0)*x2646);
IkReal x2654=(sj5*x2646);
evalcond[0]=((((-1.0)*r22*x2652))+(((-1.0)*x2651*x2653))+((r21*x2654)));
evalcond[1]=(((r11*x2654))+(((-1.0)*r12*x2652))+(((-1.0)*x2648*x2653)));
evalcond[2]=((((-1.0)*r02*x2653))+(((-1.0)*x2649*x2652))+((x2647*x2650)));
evalcond[3]=((1.0)+(((-1.0)*x2650*x2653))+(((-1.0)*r02*x2652))+((x2646*x2649)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2652))+(((-1.0)*r12*x2653))+((cj1*sj2))+((x2647*x2648)));
evalcond[5]=((((-1.0)*r22*x2653))+(((-1.0)*r21*sj5*x2652))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2647*x2651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
CheckValue<IkReal> x2656=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2655.value)+(((1.5707963267949)*(x2656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2657=IKsin(j4);
IkReal x2658=IKcos(j4);
IkReal x2659=(cj5*r10);
IkReal x2660=(r01*sj5);
IkReal x2661=(cj5*r00);
IkReal x2662=(cj5*r20);
IkReal x2663=((1.0)*x2658);
IkReal x2664=((1.0)*x2657);
IkReal x2665=(sj5*x2657);
evalcond[0]=(((r21*x2665))+(((-1.0)*x2662*x2664))+(((-1.0)*r22*x2663)));
evalcond[1]=((((-1.0)*r12*x2663))+(((-1.0)*x2659*x2664))+((r11*x2665)));
evalcond[2]=((((-1.0)*x2660*x2663))+((x2658*x2661))+(((-1.0)*r02*x2664)));
evalcond[3]=((1.0)+((x2657*x2660))+(((-1.0)*r02*x2663))+(((-1.0)*x2661*x2664)));
evalcond[4]=((((-1.0)*r12*x2664))+((cj2*sj1))+((x2658*x2659))+((cj1*sj2))+(((-1.0)*r11*sj5*x2663)));
evalcond[5]=((((-1.0)*r21*sj5*x2663))+((x2658*x2662))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2666=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2666;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2667=((1.0)*cj5);
IkReal x2668=((((-1.0)*r11*x2667))+(((-1.0)*r10*sj5)));
j4eval[0]=x2668;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2667))))));
j4eval[2]=IKsign(x2668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2669=cj5*cj5;
IkReal x2670=r01*r01;
IkReal x2671=(r01*sj5);
IkReal x2672=(cj5*r00);
IkReal x2673=((((-1.0)*x2670))+(((2.0)*x2671*x2672))+(((-1.0)*(r02*r02)))+(((-1.0)*x2669*(r00*r00)))+((x2669*x2670)));
j4eval[0]=x2673;
j4eval[1]=IKsign(x2673);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2671))+x2672))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2674=cj5*cj5;
IkReal x2675=r01*r01;
IkReal x2676=(r01*sj5);
IkReal x2677=(cj5*r00);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((((-1.0)*x2676))+x2677)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2675))+(((2.0)*x2676*x2677))+(((-1.0)*(r02*r02)))+((x2674*x2675))+(((-1.0)*x2674*(r00*r00))))),-1);
if(!x2679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2678.value)+(((1.5707963267949)*(x2679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2680=IKsin(j4);
IkReal x2681=IKcos(j4);
IkReal x2682=(cj5*r10);
IkReal x2683=(r01*sj5);
IkReal x2684=((1.0)*cj2);
IkReal x2685=(cj5*r00);
IkReal x2686=(cj5*r20);
IkReal x2687=((1.0)*x2681);
IkReal x2688=((1.0)*x2680);
IkReal x2689=(sj5*x2680);
evalcond[0]=(((r21*x2689))+(((-1.0)*r22*x2687))+(((-1.0)*x2686*x2688)));
evalcond[1]=((((-1.0)*r12*x2687))+((r11*x2689))+(((-1.0)*x2682*x2688)));
evalcond[2]=((((-1.0)*r02*x2688))+(((-1.0)*x2683*x2687))+((x2681*x2685)));
evalcond[3]=((-1.0)+(((-1.0)*x2685*x2688))+(((-1.0)*r02*x2687))+((x2680*x2683)));
evalcond[4]=((((-1.0)*cj1*x2684))+((sj1*sj2))+(((-1.0)*r21*sj5*x2687))+(((-1.0)*r22*x2688))+((x2681*x2686)));
evalcond[5]=((((-1.0)*r12*x2688))+(((-1.0)*sj1*x2684))+(((-1.0)*r11*sj5*x2687))+(((-1.0)*cj1*sj2))+((x2681*x2682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2690=((1.0)*cj5);
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2690)))),-1);
if(!x2692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2691.value)+(((1.5707963267949)*(x2692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2693=IKsin(j4);
IkReal x2694=IKcos(j4);
IkReal x2695=(cj5*r10);
IkReal x2696=(r01*sj5);
IkReal x2697=((1.0)*cj2);
IkReal x2698=(cj5*r00);
IkReal x2699=(cj5*r20);
IkReal x2700=((1.0)*x2694);
IkReal x2701=((1.0)*x2693);
IkReal x2702=(sj5*x2693);
evalcond[0]=((((-1.0)*r22*x2700))+((r21*x2702))+(((-1.0)*x2699*x2701)));
evalcond[1]=(((r11*x2702))+(((-1.0)*r12*x2700))+(((-1.0)*x2695*x2701)));
evalcond[2]=((((-1.0)*r02*x2701))+(((-1.0)*x2696*x2700))+((x2694*x2698)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2700))+((x2693*x2696))+(((-1.0)*x2698*x2701)));
evalcond[4]=((((-1.0)*r22*x2701))+(((-1.0)*cj1*x2697))+((sj1*sj2))+((x2694*x2699))+(((-1.0)*r21*sj5*x2700)));
evalcond[5]=((((-1.0)*r11*sj5*x2700))+(((-1.0)*sj1*x2697))+(((-1.0)*r12*x2701))+(((-1.0)*cj1*sj2))+((x2694*x2695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2703=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2703.value)))+(x2704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2705=IKsin(j4);
IkReal x2706=IKcos(j4);
IkReal x2707=(cj5*r10);
IkReal x2708=(r01*sj5);
IkReal x2709=((1.0)*cj2);
IkReal x2710=(cj5*r00);
IkReal x2711=(cj5*r20);
IkReal x2712=((1.0)*x2706);
IkReal x2713=((1.0)*x2705);
IkReal x2714=(sj5*x2705);
evalcond[0]=((((-1.0)*r22*x2712))+((r21*x2714))+(((-1.0)*x2711*x2713)));
evalcond[1]=(((r11*x2714))+(((-1.0)*r12*x2712))+(((-1.0)*x2707*x2713)));
evalcond[2]=(((x2706*x2710))+(((-1.0)*r02*x2713))+(((-1.0)*x2708*x2712)));
evalcond[3]=((-1.0)+((x2705*x2708))+(((-1.0)*r02*x2712))+(((-1.0)*x2710*x2713)));
evalcond[4]=(((x2706*x2711))+(((-1.0)*r21*sj5*x2712))+((sj1*sj2))+(((-1.0)*cj1*x2709))+(((-1.0)*r22*x2713)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2712))+((x2706*x2707))+(((-1.0)*r12*x2713))+(((-1.0)*sj1*x2709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2716 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2716)==0){
continue;
}
IkReal x2715=pow(x2716,-0.5);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2717.value));
IkReal gconst91=((-1.0)*r11*x2715);
IkReal gconst92=(r10*x2715);
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2718.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal x2719=((-1.0)*(x2721.value));
IkReal x2720=x2715;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2719;
IkReal gconst90=x2719;
IkReal gconst91=((-1.0)*r11*x2720);
IkReal gconst92=(r10*x2720);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2722=((1.0)*gconst92);
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2722))+(((-1.0)*cj0*r00*x2722))+((gconst91*r11*sj0))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2722))+(((-1.0)*gconst91*r20)))),-1);
if(!x2724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2723.value)+(((1.5707963267949)*(x2724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2725=IKsin(j4);
IkReal x2726=IKcos(j4);
IkReal x2727=(cj2*sj1);
IkReal x2728=(gconst92*r00);
IkReal x2729=(gconst92*r20);
IkReal x2730=(gconst92*r10);
IkReal x2731=(cj1*sj2);
IkReal x2732=((1.0)*x2726);
IkReal x2733=(gconst91*x2725);
IkReal x2734=((1.0)*x2725);
evalcond[0]=(((r21*x2733))+(((-1.0)*r22*x2732))+(((-1.0)*x2729*x2734)));
evalcond[1]=(sj0+(((-1.0)*x2728*x2734))+((r01*x2733))+(((-1.0)*r02*x2732)));
evalcond[2]=((((-1.0)*x2730*x2734))+(((-1.0)*r12*x2732))+((r11*x2733))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2726*x2729))+(((-1.0)*gconst91*r21*x2732))+(((-1.0)*r22*x2734)));
evalcond[4]=((((-1.0)*gconst91*r01*x2732))+((x2726*x2728))+((cj0*x2731))+(((-1.0)*r02*x2734))+((cj0*x2727)));
evalcond[5]=((((-1.0)*gconst91*r11*x2732))+((x2726*x2730))+(((-1.0)*r12*x2734))+((sj0*x2731))+((sj0*x2727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2735.value)+(((1.5707963267949)*(x2736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2737=IKsin(j4);
IkReal x2738=IKcos(j4);
IkReal x2739=(cj2*sj1);
IkReal x2740=(gconst92*r00);
IkReal x2741=(gconst92*r20);
IkReal x2742=(gconst92*r10);
IkReal x2743=(cj1*sj2);
IkReal x2744=((1.0)*x2738);
IkReal x2745=(gconst91*x2737);
IkReal x2746=((1.0)*x2737);
evalcond[0]=(((r21*x2745))+(((-1.0)*x2741*x2746))+(((-1.0)*r22*x2744)));
evalcond[1]=(sj0+(((-1.0)*x2740*x2746))+((r01*x2745))+(((-1.0)*r02*x2744)));
evalcond[2]=(((r11*x2745))+(((-1.0)*r12*x2744))+(((-1.0)*cj0))+(((-1.0)*x2742*x2746)));
evalcond[3]=((((-1.0)*gconst91*r21*x2744))+((x2738*x2741))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2746)));
evalcond[4]=(((cj0*x2743))+((x2738*x2740))+(((-1.0)*gconst91*r01*x2744))+((cj0*x2739))+(((-1.0)*r02*x2746)));
evalcond[5]=((((-1.0)*gconst91*r11*x2744))+((x2738*x2742))+((sj0*x2743))+(((-1.0)*r12*x2746))+((sj0*x2739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2748 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2748)==0){
continue;
}
IkReal x2747=pow(x2748,-0.5);
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2749.value))));
IkReal gconst94=((1.0)*r11*x2747);
IkReal gconst95=((-1.0)*r10*x2747);
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2750.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2753 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2753.valid){
continue;
}
IkReal x2751=((1.0)*(x2753.value));
IkReal x2752=x2747;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2751)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2751)));
IkReal gconst94=((1.0)*r11*x2752);
IkReal gconst95=((-1.0)*r10*x2752);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
IkReal x2754=((1.0)*(x2756.value));
IkReal x2755=x2747;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2754)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2754)));
IkReal gconst94=((1.0)*r11*x2755);
IkReal gconst95=((-1.0)*r10*x2755);
IkReal x2757=r12*r12;
IkReal x2758=(cj0*r02);
IkReal x2759=x2747;
IkReal x2760=(sj0*x2759);
j4eval[0]=((IKabs(((((-1.0)*x2760))+((r12*x2758*x2759))+((x2757*x2760)))))+(IKabs((x2758+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
IkReal x2761=((1.0)*(x2763.value));
IkReal x2762=x2747;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2761)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2761)));
IkReal gconst94=((1.0)*r11*x2762);
IkReal gconst95=((-1.0)*r10*x2762);
IkReal x2764=r12*r12;
IkReal x2765=(sj1*sj2);
IkReal x2766=((1.0)*cj1*cj2);
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(((-1.0)+x2764),-1);
if(!x2770.valid){
continue;
}
IkReal x2767=x2770.value;
if((((1.0)+(((-1.0)*x2764)))) < -0.00001)
continue;
IkReal x2768=IKsqrt(((1.0)+(((-1.0)*x2764))));
IkReal x2769=(r12*r22*x2767*x2768);
j4eval[0]=((IKabs((((x2765*x2769))+(((-1.0)*x2766*x2769)))))+(IKabs((((r22*x2765))+(((-1.0)*r22*x2766))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2771=(gconst94*r21);
IkReal x2772=(cj1*cj2);
IkReal x2773=(sj1*sj2);
IkReal x2774=(gconst95*r20);
CheckValue<IkReal> x2775 = IKatan2WithCheck(IkReal((((r22*x2773))+(((-1.0)*r22*x2772)))),IkReal(((((-1.0)*x2773*x2774))+((x2771*x2773))+(((-1.0)*x2771*x2772))+((x2772*x2774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2771*x2774))+(x2774*x2774)+(r22*r22)+(x2771*x2771))),-1);
if(!x2776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2775.value)+(((1.5707963267949)*(x2776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2777=IKsin(j4);
IkReal x2778=IKcos(j4);
IkReal x2779=(cj2*sj1);
IkReal x2780=(gconst94*r11);
IkReal x2781=(gconst95*r10);
IkReal x2782=(gconst94*r21);
IkReal x2783=(gconst94*r01);
IkReal x2784=(cj1*sj2);
IkReal x2785=((1.0)*x2778);
IkReal x2786=((1.0)*x2777);
IkReal x2787=(gconst95*x2778);
evalcond[0]=(((x2777*x2782))+(((-1.0)*r22*x2785))+(((-1.0)*gconst95*r20*x2786)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2786))+((x2777*x2783))+(((-1.0)*r02*x2785)));
evalcond[2]=((((-1.0)*r12*x2785))+(((-1.0)*x2781*x2786))+((x2777*x2780))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2782*x2785))+(((-1.0)*r22*x2786))+((r20*x2787)));
evalcond[4]=(((cj0*x2779))+(((-1.0)*x2783*x2785))+((r00*x2787))+((cj0*x2784))+(((-1.0)*r02*x2786)));
evalcond[5]=((((-1.0)*r12*x2786))+((x2778*x2781))+(((-1.0)*x2780*x2785))+((sj0*x2784))+((sj0*x2779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2788=((1.0)*gconst95);
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2788))+(((-1.0)*gconst94*r20)))),-1);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2788))+((cj0*gconst94*r01))+(((-1.0)*r10*sj0*x2788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2789.value)))+(x2790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2791=IKsin(j4);
IkReal x2792=IKcos(j4);
IkReal x2793=(cj2*sj1);
IkReal x2794=(gconst94*r11);
IkReal x2795=(gconst95*r10);
IkReal x2796=(gconst94*r21);
IkReal x2797=(gconst94*r01);
IkReal x2798=(cj1*sj2);
IkReal x2799=((1.0)*x2792);
IkReal x2800=((1.0)*x2791);
IkReal x2801=(gconst95*x2792);
evalcond[0]=((((-1.0)*gconst95*r20*x2800))+((x2791*x2796))+(((-1.0)*r22*x2799)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2800))+((x2791*x2797))+(((-1.0)*r02*x2799)));
evalcond[2]=(((x2791*x2794))+(((-1.0)*x2795*x2800))+(((-1.0)*cj0))+(((-1.0)*r12*x2799)));
evalcond[3]=((((-1.0)*x2796*x2799))+((r20*x2801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2800)));
evalcond[4]=((((-1.0)*x2797*x2799))+(((-1.0)*r02*x2800))+((cj0*x2798))+((cj0*x2793))+((r00*x2801)));
evalcond[5]=(((x2792*x2795))+(((-1.0)*r12*x2800))+((sj0*x2793))+((sj0*x2798))+(((-1.0)*x2794*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2802.valid){
continue;
}
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2802.value)+(((1.5707963267949)*(x2803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2804=IKsin(j4);
IkReal x2805=IKcos(j4);
IkReal x2806=(cj2*sj1);
IkReal x2807=(gconst94*r11);
IkReal x2808=(gconst95*r10);
IkReal x2809=(gconst94*r21);
IkReal x2810=(gconst94*r01);
IkReal x2811=(cj1*sj2);
IkReal x2812=((1.0)*x2805);
IkReal x2813=((1.0)*x2804);
IkReal x2814=(gconst95*x2805);
evalcond[0]=(((x2804*x2809))+(((-1.0)*r22*x2812))+(((-1.0)*gconst95*r20*x2813)));
evalcond[1]=((((-1.0)*r02*x2812))+sj0+(((-1.0)*gconst95*r00*x2813))+((x2804*x2810)));
evalcond[2]=((((-1.0)*r12*x2812))+((x2804*x2807))+(((-1.0)*x2808*x2813))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2809*x2812))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2813))+((r20*x2814)));
evalcond[4]=(((r00*x2814))+(((-1.0)*x2810*x2812))+(((-1.0)*r02*x2813))+((cj0*x2806))+((cj0*x2811)));
evalcond[5]=((((-1.0)*r12*x2813))+((x2805*x2808))+(((-1.0)*x2807*x2812))+((sj0*x2811))+((sj0*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2815=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2815;
j4eval[1]=IKsign(x2815);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2816=((1.0)*cj5);
IkReal x2817=((((-1.0)*r21*x2816))+(((-1.0)*r20*sj5)));
j4eval[0]=x2817;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2816))))));
j4eval[2]=IKsign(x2817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2818=cj5*cj5;
IkReal x2819=r11*r11;
IkReal x2820=(cj5*r10);
IkReal x2821=(r11*sj5);
IkReal x2822=((((2.0)*x2820*x2821))+(((-1.0)*x2819))+((x2818*x2819))+(((-1.0)*(r12*r12)))+(((-1.0)*x2818*(r10*r10))));
j4eval[0]=x2822;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2821))+x2820))));
j4eval[2]=IKsign(x2822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2823=cj5*cj5;
IkReal x2824=r11*r11;
IkReal x2825=(cj5*r10);
IkReal x2826=(r11*sj5);
CheckValue<IkReal> x2827 = IKatan2WithCheck(IkReal(((((-1.0)*x2826))+x2825)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2827.valid){
continue;
}
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2823*(r10*r10)))+(((-1.0)*x2824))+((x2823*x2824))+(((-1.0)*(r12*r12)))+(((2.0)*x2825*x2826)))),-1);
if(!x2828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2827.value)+(((1.5707963267949)*(x2828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2829=IKsin(j4);
IkReal x2830=IKcos(j4);
IkReal x2831=(cj5*r10);
IkReal x2832=(r01*sj5);
IkReal x2833=(cj5*r00);
IkReal x2834=(cj5*r20);
IkReal x2835=((1.0)*x2830);
IkReal x2836=((1.0)*x2829);
IkReal x2837=(sj5*x2829);
evalcond[0]=((((-1.0)*x2834*x2836))+(((-1.0)*r22*x2835))+((r21*x2837)));
evalcond[1]=(((x2829*x2832))+(((-1.0)*x2833*x2836))+(((-1.0)*r02*x2835)));
evalcond[2]=(((x2830*x2831))+(((-1.0)*r12*x2836))+(((-1.0)*r11*sj5*x2835)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2835))+((r11*x2837))+(((-1.0)*x2831*x2836)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2830*x2833))+(((-1.0)*x2832*x2835))+(((-1.0)*r02*x2836)));
evalcond[5]=((((-1.0)*r21*sj5*x2835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2830*x2834))+(((-1.0)*r22*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2838=((1.0)*cj5);
CheckValue<IkReal> x2839 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2838))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2839.valid){
continue;
}
CheckValue<IkReal> x2840=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2838))+(((-1.0)*r20*sj5)))),-1);
if(!x2840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2839.value)+(((1.5707963267949)*(x2840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2841=IKsin(j4);
IkReal x2842=IKcos(j4);
IkReal x2843=(cj5*r10);
IkReal x2844=(r01*sj5);
IkReal x2845=(cj5*r00);
IkReal x2846=(cj5*r20);
IkReal x2847=((1.0)*x2842);
IkReal x2848=((1.0)*x2841);
IkReal x2849=(sj5*x2841);
evalcond[0]=((((-1.0)*x2846*x2848))+((r21*x2849))+(((-1.0)*r22*x2847)));
evalcond[1]=((((-1.0)*x2845*x2848))+(((-1.0)*r02*x2847))+((x2841*x2844)));
evalcond[2]=((((-1.0)*r12*x2848))+((x2842*x2843))+(((-1.0)*r11*sj5*x2847)));
evalcond[3]=((-1.0)+(((-1.0)*x2843*x2848))+((r11*x2849))+(((-1.0)*r12*x2847)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2842*x2845))+(((-1.0)*r02*x2848))+(((-1.0)*x2844*x2847)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2842*x2846))+(((-1.0)*r22*x2848))+(((-1.0)*r21*sj5*x2847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2850 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2850.valid){
continue;
}
CheckValue<IkReal> x2851=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2850.value)+(((1.5707963267949)*(x2851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2852=IKsin(j4);
IkReal x2853=IKcos(j4);
IkReal x2854=(cj5*r10);
IkReal x2855=(r01*sj5);
IkReal x2856=(cj5*r00);
IkReal x2857=(cj5*r20);
IkReal x2858=((1.0)*x2853);
IkReal x2859=((1.0)*x2852);
IkReal x2860=(sj5*x2852);
evalcond[0]=(((r21*x2860))+(((-1.0)*x2857*x2859))+(((-1.0)*r22*x2858)));
evalcond[1]=(((x2852*x2855))+(((-1.0)*r02*x2858))+(((-1.0)*x2856*x2859)));
evalcond[2]=((((-1.0)*r11*sj5*x2858))+(((-1.0)*r12*x2859))+((x2853*x2854)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2858))+(((-1.0)*x2854*x2859))+((r11*x2860)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2853*x2856))+(((-1.0)*r02*x2859))+(((-1.0)*x2855*x2858)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2853*x2857))+(((-1.0)*r22*x2859))+(((-1.0)*r21*sj5*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2861=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2861;
j4eval[1]=IKsign(x2861);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2862=((1.0)*cj5);
IkReal x2863=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2862)));
j4eval[0]=x2863;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2862))))));
j4eval[2]=IKsign(x2863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2864=cj5*cj5;
IkReal x2865=r11*r11;
IkReal x2866=(r11*sj5);
IkReal x2867=(cj5*r10);
IkReal x2868=((r12*r12)+(((-2.0)*x2866*x2867))+(((-1.0)*x2864*x2865))+((x2864*(r10*r10)))+x2865);
j4eval[0]=x2868;
j4eval[1]=IKsign(x2868);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2866))+x2867))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2869=cj5*cj5;
IkReal x2870=r11*r11;
IkReal x2871=(cj5*r10);
IkReal x2872=(r11*sj5);
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal(((((-1.0)*x2872))+x2871)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2869*(r10*r10)))+(((-2.0)*x2871*x2872))+(((-1.0)*x2869*x2870))+x2870)),-1);
if(!x2874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2873.value)+(((1.5707963267949)*(x2874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2875=IKsin(j4);
IkReal x2876=IKcos(j4);
IkReal x2877=(cj5*r10);
IkReal x2878=(r01*sj5);
IkReal x2879=((1.0)*cj2);
IkReal x2880=(cj5*r00);
IkReal x2881=(cj5*r20);
IkReal x2882=((1.0)*x2876);
IkReal x2883=((1.0)*x2875);
IkReal x2884=(sj5*x2875);
evalcond[0]=((((-1.0)*r22*x2882))+((r21*x2884))+(((-1.0)*x2881*x2883)));
evalcond[1]=((((-1.0)*r02*x2882))+((x2875*x2878))+(((-1.0)*x2880*x2883)));
evalcond[2]=(((x2876*x2877))+(((-1.0)*r11*sj5*x2882))+(((-1.0)*r12*x2883)));
evalcond[3]=((1.0)+((r11*x2884))+(((-1.0)*x2877*x2883))+(((-1.0)*r12*x2882)));
evalcond[4]=((((-1.0)*r22*x2883))+(((-1.0)*cj1*x2879))+((sj1*sj2))+((x2876*x2881))+(((-1.0)*r21*sj5*x2882)));
evalcond[5]=((((-1.0)*r02*x2883))+(((-1.0)*cj1*sj2))+((x2876*x2880))+(((-1.0)*sj1*x2879))+(((-1.0)*x2878*x2882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2885=((1.0)*cj5);
CheckValue<IkReal> x2886 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2886.valid){
continue;
}
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2885)))),-1);
if(!x2887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2886.value)+(((1.5707963267949)*(x2887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2888=IKsin(j4);
IkReal x2889=IKcos(j4);
IkReal x2890=(cj5*r10);
IkReal x2891=(r01*sj5);
IkReal x2892=((1.0)*cj2);
IkReal x2893=(cj5*r00);
IkReal x2894=(cj5*r20);
IkReal x2895=((1.0)*x2889);
IkReal x2896=((1.0)*x2888);
IkReal x2897=(sj5*x2888);
evalcond[0]=((((-1.0)*r22*x2895))+((r21*x2897))+(((-1.0)*x2894*x2896)));
evalcond[1]=((((-1.0)*r02*x2895))+(((-1.0)*x2893*x2896))+((x2888*x2891)));
evalcond[2]=((((-1.0)*r11*sj5*x2895))+((x2889*x2890))+(((-1.0)*r12*x2896)));
evalcond[3]=((1.0)+(((-1.0)*x2890*x2896))+((r11*x2897))+(((-1.0)*r12*x2895)));
evalcond[4]=((((-1.0)*r22*x2896))+((x2889*x2894))+((sj1*sj2))+(((-1.0)*r21*sj5*x2895))+(((-1.0)*cj1*x2892)));
evalcond[5]=((((-1.0)*x2891*x2895))+(((-1.0)*r02*x2896))+((x2889*x2893))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2898=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2898.valid){
continue;
}
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2898.value)))+(x2899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2900=IKsin(j4);
IkReal x2901=IKcos(j4);
IkReal x2902=(cj5*r10);
IkReal x2903=(r01*sj5);
IkReal x2904=((1.0)*cj2);
IkReal x2905=(cj5*r00);
IkReal x2906=(cj5*r20);
IkReal x2907=((1.0)*x2901);
IkReal x2908=((1.0)*x2900);
IkReal x2909=(sj5*x2900);
evalcond[0]=((((-1.0)*x2906*x2908))+((r21*x2909))+(((-1.0)*r22*x2907)));
evalcond[1]=((((-1.0)*r02*x2907))+(((-1.0)*x2905*x2908))+((x2900*x2903)));
evalcond[2]=(((x2901*x2902))+(((-1.0)*r11*sj5*x2907))+(((-1.0)*r12*x2908)));
evalcond[3]=((1.0)+(((-1.0)*x2902*x2908))+(((-1.0)*r12*x2907))+((r11*x2909)));
evalcond[4]=((((-1.0)*r21*sj5*x2907))+((x2901*x2906))+((sj1*sj2))+(((-1.0)*cj1*x2904))+(((-1.0)*r22*x2908)));
evalcond[5]=((((-1.0)*r02*x2908))+((x2901*x2905))+(((-1.0)*cj1*sj2))+(((-1.0)*x2903*x2907))+(((-1.0)*sj1*x2904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2910=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2910);
rxp0_2=(py*r00);
rxp1_0=(r21*x2910);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2911=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2911);
rxp0_2=(py*r00);
rxp1_0=(r21*x2911);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2912=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2912);
rxp0_2=(py*r00);
rxp1_0=(r21*x2912);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2915.valid){
continue;
}
IkReal x2913=x2915.value;
IkReal x2914=((1.0)*cj0*x2913);
cj4array[0]=((((-1.0)*cj2*sj1*x2914))+(((-1.0)*cj1*sj2*x2914)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2916=IKsin(j4);
IkReal x2917=IKcos(j4);
IkReal x2918=(r21*sj5);
IkReal x2919=((1.0)*x2917);
IkReal x2920=((1.0)*cj5*x2916);
evalcond[0]=((-1.0)*r12*x2916);
evalcond[1]=((((-1.0)*r12*x2919))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x2920))+((x2916*x2918)));
evalcond[3]=((((-1.0)*r00*x2920))+((r01*sj5*x2916)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*r20*x2917))+(((-1.0)*x2918*x2919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2922=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2922.valid){
continue;
}
IkReal x2921=x2922.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2921))+((cj1*cj2*x2921)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2923=IKsin(j4);
IkReal x2924=IKcos(j4);
IkReal x2925=(cj5*r00);
IkReal x2926=((1.0)*x2923);
IkReal x2927=(sj5*x2923);
IkReal x2928=((1.0)*x2924);
evalcond[0]=((-1.0)*r12*x2923);
evalcond[1]=((((-1.0)*r12*x2928))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2927))+(((-1.0)*cj5*r20*x2926)));
evalcond[3]=(((r01*x2927))+(((-1.0)*x2925*x2926)));
evalcond[4]=(((x2924*x2925))+(((-1.0)*r01*sj5*x2928))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(r12,-1);
if(!x2929.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2929.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2930=IKsin(j4);
IkReal x2931=IKcos(j4);
IkReal x2932=(cj5*r00);
IkReal x2933=(cj5*r20);
IkReal x2934=(r21*sj5);
IkReal x2935=(r01*sj5);
IkReal x2936=((1.0)*x2930);
IkReal x2937=((1.0)*x2931);
evalcond[0]=((-1.0)*r12*x2930);
evalcond[1]=((((-1.0)*x2933*x2936))+((x2930*x2934)));
evalcond[2]=((((-1.0)*x2932*x2936))+((x2930*x2935)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2934*x2937))+((x2931*x2933)));
evalcond[4]=((((-1.0)*x2935*x2937))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x2931*x2932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2938=((1.0)*cj5);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2938))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2938))+(((-1.0)*r20*sj5)))),-1);
if(!x2940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2939.value)+(((1.5707963267949)*(x2940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2941=IKsin(j4);
IkReal x2942=IKcos(j4);
IkReal x2943=(cj5*r10);
IkReal x2944=(cj2*sj1);
IkReal x2945=(r01*sj5);
IkReal x2946=(cj5*r00);
IkReal x2947=(cj5*r20);
IkReal x2948=(cj1*sj2);
IkReal x2949=((1.0)*x2942);
IkReal x2950=((1.0)*x2941);
IkReal x2951=(sj5*x2941);
evalcond[0]=((((-1.0)*x2947*x2950))+((r21*x2951))+(((-1.0)*r22*x2949)));
evalcond[1]=(sj0+(((-1.0)*r02*x2949))+((x2941*x2945))+(((-1.0)*x2946*x2950)));
evalcond[2]=((((-1.0)*r12*x2949))+(((-1.0)*x2943*x2950))+((r11*x2951))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2949))+(((-1.0)*r22*x2950))+((x2942*x2947)));
evalcond[4]=((((-1.0)*r02*x2950))+((cj0*x2948))+((cj0*x2944))+(((-1.0)*x2945*x2949))+((x2942*x2946)));
evalcond[5]=((((-1.0)*r11*sj5*x2949))+(((-1.0)*r12*x2950))+((sj0*x2948))+((sj0*x2944))+((x2942*x2943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2952=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2952.value)))+(x2953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2954=IKsin(j4);
IkReal x2955=IKcos(j4);
IkReal x2956=(cj5*r10);
IkReal x2957=(cj2*sj1);
IkReal x2958=(r01*sj5);
IkReal x2959=(cj5*r00);
IkReal x2960=(cj5*r20);
IkReal x2961=(cj1*sj2);
IkReal x2962=((1.0)*x2955);
IkReal x2963=((1.0)*x2954);
IkReal x2964=(sj5*x2954);
evalcond[0]=(((r21*x2964))+(((-1.0)*r22*x2962))+(((-1.0)*x2960*x2963)));
evalcond[1]=(((x2954*x2958))+sj0+(((-1.0)*x2959*x2963))+(((-1.0)*r02*x2962)));
evalcond[2]=(((r11*x2964))+(((-1.0)*x2956*x2963))+(((-1.0)*cj0))+(((-1.0)*r12*x2962)));
evalcond[3]=((((-1.0)*r21*sj5*x2962))+((x2955*x2960))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2963)));
evalcond[4]=(((cj0*x2957))+(((-1.0)*r02*x2963))+((cj0*x2961))+(((-1.0)*x2958*x2962))+((x2955*x2959)));
evalcond[5]=(((sj0*x2961))+((sj0*x2957))+(((-1.0)*r11*sj5*x2962))+(((-1.0)*r12*x2963))+((x2955*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2965=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2965.valid){
continue;
}
CheckValue<IkReal> x2966 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2965.value)))+(x2966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2967=IKsin(j4);
IkReal x2968=IKcos(j4);
IkReal x2969=(cj5*r10);
IkReal x2970=(cj2*sj1);
IkReal x2971=(r01*sj5);
IkReal x2972=(cj5*r00);
IkReal x2973=(cj5*r20);
IkReal x2974=(cj1*sj2);
IkReal x2975=((1.0)*x2968);
IkReal x2976=((1.0)*x2967);
IkReal x2977=(sj5*x2967);
evalcond[0]=((((-1.0)*r22*x2975))+(((-1.0)*x2973*x2976))+((r21*x2977)));
evalcond[1]=((((-1.0)*x2972*x2976))+sj0+(((-1.0)*r02*x2975))+((x2967*x2971)));
evalcond[2]=((((-1.0)*r12*x2975))+(((-1.0)*x2969*x2976))+((r11*x2977))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x2975))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2968*x2973))+(((-1.0)*r22*x2976)));
evalcond[4]=((((-1.0)*r02*x2976))+((cj0*x2974))+((cj0*x2970))+((x2968*x2972))+(((-1.0)*x2971*x2975)));
evalcond[5]=((((-1.0)*r12*x2976))+(((-1.0)*r11*sj5*x2975))+((x2968*x2969))+((sj0*x2970))+((sj0*x2974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2978=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2978;
j0eval[1]=IKsign(x2978);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2979=r21*r21;
IkReal x2980=cj5*cj5;
IkReal x2981=(sj1*sj2);
IkReal x2982=(r21*sj5);
IkReal x2983=(cj5*r20);
IkReal x2984=(cj1*cj2);
IkReal x2985=((((-1.0)*x2979))+(((-1.0)*(r22*r22)))+(((-1.0)*x2980*(r20*r20)))+(((2.0)*x2982*x2983))+((x2979*x2980)));
j4eval[0]=x2985;
j4eval[1]=((IKabs((((x2983*x2984))+(((-1.0)*x2982*x2984))+(((-1.0)*x2981*x2983))+((x2981*x2982)))))+(IKabs(((((-1.0)*r22*x2984))+((r22*x2981))))));
j4eval[2]=IKsign(x2985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2986=IKsin(j0);
IkReal x2987=IKcos(j0);
evalcond[0]=((((0.163941)*x2986))+(((-1.0)*px))+(((-0.612)*x2987)));
evalcond[1]=((((-0.163941)*x2987))+(((-1.0)*py))+(((-0.612)*x2986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2988=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2988;
j4eval[1]=IKsign(x2988);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2989=((1.0)*cj5);
IkReal x2990=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2989)));
j4eval[0]=x2990;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x2989))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2991=cj5*cj5;
IkReal x2992=((1.0)*r20);
IkReal x2993=(r01*r21);
IkReal x2994=(r21*sj5);
IkReal x2995=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2991*x2993))+(((-1.0)*r00*x2991*x2992))+(((-1.0)*x2993))+((cj5*r00*x2994)));
j4eval[0]=x2995;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x2994))+(((-1.0)*cj0*cj5*x2992))))));
j4eval[2]=IKsign(x2995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2996=cj5*cj5;
IkReal x2997=((1.0)*r20);
IkReal x2998=(r01*r21);
IkReal x2999=(r21*sj5);
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x2996*x2998))+(((-1.0)*r02*r22))+(((-1.0)*x2998))+((cj5*r00*x2999))+(((-1.0)*r00*x2996*x2997)))),-1);
if(!x3000.valid){
continue;
}
CheckValue<IkReal> x3001 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x2999))+(((-1.0)*cj0*cj5*x2997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3000.value)))+(x3001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3002=IKcos(j4);
IkReal x3003=IKsin(j4);
IkReal x3004=(cj5*r00);
IkReal x3005=(cj5*r10);
IkReal x3006=(cj5*r20);
IkReal x3007=((1.0)*x3002);
IkReal x3008=((1.0)*x3003);
IkReal x3009=(sj5*x3002);
IkReal x3010=(sj5*x3003);
evalcond[0]=(((r22*x3003))+((r21*x3009))+(((-1.0)*x3006*x3007)));
evalcond[1]=((((-1.0)*r22*x3007))+((r21*x3010))+(((-1.0)*x3006*x3008)));
evalcond[2]=(((r01*x3009))+cj0+(((-1.0)*x3004*x3007))+((r02*x3003)));
evalcond[3]=(sj0+((r12*x3003))+((r11*x3009))+(((-1.0)*x3005*x3007)));
evalcond[4]=(sj0+((r01*x3010))+(((-1.0)*r02*x3007))+(((-1.0)*x3004*x3008)));
evalcond[5]=((((-1.0)*r12*x3007))+((r11*x3010))+(((-1.0)*x3005*x3008))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3011=((1.0)*cj5);
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3011)))),-1);
if(!x3012.valid){
continue;
}
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3011)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3012.value)))+(x3013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3014=IKcos(j4);
IkReal x3015=IKsin(j4);
IkReal x3016=(cj5*r00);
IkReal x3017=(cj5*r10);
IkReal x3018=(cj5*r20);
IkReal x3019=((1.0)*x3014);
IkReal x3020=((1.0)*x3015);
IkReal x3021=(sj5*x3014);
IkReal x3022=(sj5*x3015);
evalcond[0]=(((r22*x3015))+((r21*x3021))+(((-1.0)*x3018*x3019)));
evalcond[1]=((((-1.0)*x3018*x3020))+(((-1.0)*r22*x3019))+((r21*x3022)));
evalcond[2]=(cj0+((r01*x3021))+(((-1.0)*x3016*x3019))+((r02*x3015)));
evalcond[3]=(sj0+((r11*x3021))+((r12*x3015))+(((-1.0)*x3017*x3019)));
evalcond[4]=(sj0+(((-1.0)*r02*x3019))+(((-1.0)*x3016*x3020))+((r01*x3022)));
evalcond[5]=(((r11*x3022))+(((-1.0)*r12*x3019))+(((-1.0)*x3017*x3020))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3023 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3023.value)+(((1.5707963267949)*(x3024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3025=IKcos(j4);
IkReal x3026=IKsin(j4);
IkReal x3027=(cj5*r00);
IkReal x3028=(cj5*r10);
IkReal x3029=(cj5*r20);
IkReal x3030=((1.0)*x3025);
IkReal x3031=((1.0)*x3026);
IkReal x3032=(sj5*x3025);
IkReal x3033=(sj5*x3026);
evalcond[0]=((((-1.0)*x3029*x3030))+((r21*x3032))+((r22*x3026)));
evalcond[1]=((((-1.0)*x3029*x3031))+((r21*x3033))+(((-1.0)*r22*x3030)));
evalcond[2]=(cj0+((r02*x3026))+((r01*x3032))+(((-1.0)*x3027*x3030)));
evalcond[3]=(((r12*x3026))+sj0+((r11*x3032))+(((-1.0)*x3028*x3030)));
evalcond[4]=(sj0+((r01*x3033))+(((-1.0)*x3027*x3031))+(((-1.0)*r02*x3030)));
evalcond[5]=(((r11*x3033))+(((-1.0)*x3028*x3031))+(((-1.0)*r12*x3030))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3034=IKsin(j0);
IkReal x3035=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.163941)*x3034))+(((-0.612)*x3035)));
evalcond[1]=((((-0.163941)*x3035))+(((-1.0)*py))+(((-0.612)*x3034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3036;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3037=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3037;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3038=((1.0)*cj5);
IkReal x3039=((((-1.0)*r01*x3038))+(((-1.0)*r00*sj5)));
j4eval[0]=x3039;
j4eval[1]=IKsign(x3039);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3038))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3040=((1.0)*cj5);
CheckValue<IkReal> x3041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3040)))),-1);
if(!x3041.valid){
continue;
}
CheckValue<IkReal> x3042 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3040)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3041.value)))+(x3042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3043=IKcos(j4);
IkReal x3044=IKsin(j4);
IkReal x3045=((1.0)*cj0);
IkReal x3046=(cj5*r00);
IkReal x3047=(cj5*r10);
IkReal x3048=(cj5*r20);
IkReal x3049=((1.0)*x3043);
IkReal x3050=((1.0)*x3044);
IkReal x3051=(sj5*x3043);
IkReal x3052=(sj5*x3044);
evalcond[0]=((((-1.0)*x3048*x3049))+((r22*x3044))+((r21*x3051)));
evalcond[1]=((((-1.0)*r22*x3049))+(((-1.0)*x3048*x3050))+((r21*x3052)));
evalcond[2]=(sj0+((r01*x3052))+(((-1.0)*x3046*x3050))+(((-1.0)*r02*x3049)));
evalcond[3]=((((-1.0)*x3046*x3049))+(((-1.0)*x3045))+((r01*x3051))+((r02*x3044)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3051))+(((-1.0)*x3047*x3049))+((r12*x3044)));
evalcond[5]=((((-1.0)*x3047*x3050))+(((-1.0)*r12*x3049))+(((-1.0)*x3045))+((r11*x3052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3053 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3053.value)+(((1.5707963267949)*(x3054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3055=IKcos(j4);
IkReal x3056=IKsin(j4);
IkReal x3057=((1.0)*cj0);
IkReal x3058=(cj5*r00);
IkReal x3059=(cj5*r10);
IkReal x3060=(cj5*r20);
IkReal x3061=((1.0)*x3055);
IkReal x3062=((1.0)*x3056);
IkReal x3063=(sj5*x3055);
IkReal x3064=(sj5*x3056);
evalcond[0]=((((-1.0)*x3060*x3061))+((r22*x3056))+((r21*x3063)));
evalcond[1]=((((-1.0)*r22*x3061))+(((-1.0)*x3060*x3062))+((r21*x3064)));
evalcond[2]=((((-1.0)*x3058*x3062))+sj0+((r01*x3064))+(((-1.0)*r02*x3061)));
evalcond[3]=((((-1.0)*x3058*x3061))+((r02*x3056))+((r01*x3063))+(((-1.0)*x3057)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3056))+((r11*x3063))+(((-1.0)*x3059*x3061)));
evalcond[5]=((((-1.0)*r12*x3061))+((r11*x3064))+(((-1.0)*x3057))+(((-1.0)*x3059*x3062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3065=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3065.value)))+(x3066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3067=IKcos(j4);
IkReal x3068=IKsin(j4);
IkReal x3069=((1.0)*cj0);
IkReal x3070=(cj5*r00);
IkReal x3071=(cj5*r10);
IkReal x3072=(cj5*r20);
IkReal x3073=((1.0)*x3067);
IkReal x3074=((1.0)*x3068);
IkReal x3075=(sj5*x3067);
IkReal x3076=(sj5*x3068);
evalcond[0]=((((-1.0)*x3072*x3073))+((r22*x3068))+((r21*x3075)));
evalcond[1]=((((-1.0)*x3072*x3074))+(((-1.0)*r22*x3073))+((r21*x3076)));
evalcond[2]=(((r01*x3076))+sj0+(((-1.0)*r02*x3073))+(((-1.0)*x3070*x3074)));
evalcond[3]=(((r01*x3075))+(((-1.0)*x3069))+(((-1.0)*x3070*x3073))+((r02*x3068)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3071*x3073))+((r11*x3075))+((r12*x3068)));
evalcond[5]=((((-1.0)*x3069))+(((-1.0)*r12*x3073))+(((-1.0)*x3071*x3074))+((r11*x3076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3077=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3077;
j4eval[1]=IKsign(x3077);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3078=((1.0)*cj5);
IkReal x3079=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3078)));
j4eval[0]=x3079;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3078))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3080=cj5*cj5;
IkReal x3081=((1.0)*r20);
IkReal x3082=(r01*r21);
IkReal x3083=(r21*sj5);
IkReal x3084=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3080*x3082))+(((-1.0)*r00*x3080*x3081))+(((-1.0)*x3082))+((cj5*r00*x3083)));
j4eval[0]=x3084;
j4eval[1]=((IKabs((((cj0*x3083))+(((-1.0)*cj0*cj5*x3081)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3085=cj5*cj5;
IkReal x3086=((1.0)*r20);
IkReal x3087=(r01*r21);
IkReal x3088=(r21*sj5);
CheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3088))+(((-1.0)*cj0*cj5*x3086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3089.valid){
continue;
}
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3087))+(((-1.0)*r00*x3085*x3086))+((x3085*x3087))+((cj5*r00*x3088)))),-1);
if(!x3090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3089.value)+(((1.5707963267949)*(x3090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3091=IKcos(j4);
IkReal x3092=IKsin(j4);
IkReal x3093=(cj5*r00);
IkReal x3094=(cj5*r10);
IkReal x3095=(cj5*r20);
IkReal x3096=((1.0)*x3091);
IkReal x3097=((1.0)*x3092);
IkReal x3098=(sj5*x3091);
IkReal x3099=(sj5*x3092);
evalcond[0]=(((r21*x3098))+((r22*x3092))+(((-1.0)*x3095*x3096)));
evalcond[1]=((((-1.0)*r22*x3096))+((r21*x3099))+(((-1.0)*x3095*x3097)));
evalcond[2]=(((r01*x3098))+cj0+((r02*x3092))+(((-1.0)*x3093*x3096)));
evalcond[3]=(sj0+((r11*x3098))+(((-1.0)*x3094*x3096))+((r12*x3092)));
evalcond[4]=(((r01*x3099))+(((-1.0)*r02*x3096))+sj0+(((-1.0)*x3093*x3097)));
evalcond[5]=((((-1.0)*r12*x3096))+((r11*x3099))+(((-1.0)*x3094*x3097))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3100=((1.0)*cj5);
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3100)))),-1);
if(!x3101.valid){
continue;
}
CheckValue<IkReal> x3102 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3100)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3101.value)))+(x3102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3103=IKcos(j4);
IkReal x3104=IKsin(j4);
IkReal x3105=(cj5*r00);
IkReal x3106=(cj5*r10);
IkReal x3107=(cj5*r20);
IkReal x3108=((1.0)*x3103);
IkReal x3109=((1.0)*x3104);
IkReal x3110=(sj5*x3103);
IkReal x3111=(sj5*x3104);
evalcond[0]=((((-1.0)*x3107*x3108))+((r22*x3104))+((r21*x3110)));
evalcond[1]=((((-1.0)*x3107*x3109))+((r21*x3111))+(((-1.0)*r22*x3108)));
evalcond[2]=(cj0+((r02*x3104))+(((-1.0)*x3105*x3108))+((r01*x3110)));
evalcond[3]=(sj0+(((-1.0)*x3106*x3108))+((r12*x3104))+((r11*x3110)));
evalcond[4]=(sj0+(((-1.0)*x3105*x3109))+((r01*x3111))+(((-1.0)*r02*x3108)));
evalcond[5]=((((-1.0)*r12*x3108))+(((-1.0)*x3106*x3109))+((r11*x3111))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3112 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3112.valid){
continue;
}
CheckValue<IkReal> x3113=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3112.value)+(((1.5707963267949)*(x3113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3114=IKcos(j4);
IkReal x3115=IKsin(j4);
IkReal x3116=(cj5*r00);
IkReal x3117=(cj5*r10);
IkReal x3118=(cj5*r20);
IkReal x3119=((1.0)*x3114);
IkReal x3120=((1.0)*x3115);
IkReal x3121=(sj5*x3114);
IkReal x3122=(sj5*x3115);
evalcond[0]=(((r22*x3115))+((r21*x3121))+(((-1.0)*x3118*x3119)));
evalcond[1]=(((r21*x3122))+(((-1.0)*r22*x3119))+(((-1.0)*x3118*x3120)));
evalcond[2]=(((r01*x3121))+cj0+((r02*x3115))+(((-1.0)*x3116*x3119)));
evalcond[3]=(((r12*x3115))+sj0+(((-1.0)*x3117*x3119))+((r11*x3121)));
evalcond[4]=((((-1.0)*r02*x3119))+sj0+((r01*x3122))+(((-1.0)*x3116*x3120)));
evalcond[5]=((((-1.0)*r12*x3119))+(((-1.0)*x3117*x3120))+((r11*x3122))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3123=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3123;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3124=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3124;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3125=((1.0)*cj5);
IkReal x3126=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3125)));
j4eval[0]=x3126;
j4eval[1]=IKsign(x3126);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3125))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3127=((1.0)*cj5);
CheckValue<IkReal> x3128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3127)))),-1);
if(!x3128.valid){
continue;
}
CheckValue<IkReal> x3129 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3127))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3128.value)))+(x3129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3130=IKcos(j4);
IkReal x3131=IKsin(j4);
IkReal x3132=((1.0)*cj0);
IkReal x3133=(cj5*r00);
IkReal x3134=(cj5*r10);
IkReal x3135=(cj5*r20);
IkReal x3136=((1.0)*x3130);
IkReal x3137=((1.0)*x3131);
IkReal x3138=(sj5*x3130);
IkReal x3139=(sj5*x3131);
evalcond[0]=(((r21*x3138))+((r22*x3131))+(((-1.0)*x3135*x3136)));
evalcond[1]=(((r21*x3139))+(((-1.0)*x3135*x3137))+(((-1.0)*r22*x3136)));
evalcond[2]=(sj0+((r01*x3139))+(((-1.0)*r02*x3136))+(((-1.0)*x3133*x3137)));
evalcond[3]=(((r01*x3138))+(((-1.0)*x3133*x3136))+((r02*x3131))+(((-1.0)*x3132)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3134*x3136))+((r12*x3131))+((r11*x3138)));
evalcond[5]=((((-1.0)*x3134*x3137))+(((-1.0)*r12*x3136))+((r11*x3139))+(((-1.0)*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
CheckValue<IkReal> x3141=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3140.value)+(((1.5707963267949)*(x3141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3142=IKcos(j4);
IkReal x3143=IKsin(j4);
IkReal x3144=((1.0)*cj0);
IkReal x3145=(cj5*r00);
IkReal x3146=(cj5*r10);
IkReal x3147=(cj5*r20);
IkReal x3148=((1.0)*x3142);
IkReal x3149=((1.0)*x3143);
IkReal x3150=(sj5*x3142);
IkReal x3151=(sj5*x3143);
evalcond[0]=((((-1.0)*x3147*x3148))+((r22*x3143))+((r21*x3150)));
evalcond[1]=((((-1.0)*r22*x3148))+(((-1.0)*x3147*x3149))+((r21*x3151)));
evalcond[2]=(sj0+(((-1.0)*x3145*x3149))+(((-1.0)*r02*x3148))+((r01*x3151)));
evalcond[3]=((((-1.0)*x3144))+((r02*x3143))+(((-1.0)*x3145*x3148))+((r01*x3150)));
evalcond[4]=((((-1.0)*x3146*x3148))+(((-1.0)*sj0))+((r12*x3143))+((r11*x3150)));
evalcond[5]=((((-1.0)*x3146*x3149))+(((-1.0)*x3144))+(((-1.0)*r12*x3148))+((r11*x3151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3152.value)))+(x3153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKcos(j4);
IkReal x3155=IKsin(j4);
IkReal x3156=((1.0)*cj0);
IkReal x3157=(cj5*r00);
IkReal x3158=(cj5*r10);
IkReal x3159=(cj5*r20);
IkReal x3160=((1.0)*x3154);
IkReal x3161=((1.0)*x3155);
IkReal x3162=(sj5*x3154);
IkReal x3163=(sj5*x3155);
evalcond[0]=(((r22*x3155))+(((-1.0)*x3159*x3160))+((r21*x3162)));
evalcond[1]=((((-1.0)*x3159*x3161))+((r21*x3163))+(((-1.0)*r22*x3160)));
evalcond[2]=((((-1.0)*x3157*x3161))+sj0+((r01*x3163))+(((-1.0)*r02*x3160)));
evalcond[3]=((((-1.0)*x3156))+(((-1.0)*x3157*x3160))+((r02*x3155))+((r01*x3162)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3162))+(((-1.0)*x3158*x3160))+((r12*x3155)));
evalcond[5]=((((-1.0)*x3156))+(((-1.0)*r12*x3160))+((r11*x3163))+(((-1.0)*x3158*x3161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((0.408402007707268)*px))), ((((1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3164=IKsin(j0);
IkReal x3165=IKcos(j0);
evalcond[0]=((((0.612)*x3165))+(((0.163941)*x3164))+(((-1.0)*px)));
evalcond[1]=((((0.612)*x3164))+(((-1.0)*py))+(((-0.163941)*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3166=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3166;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3167=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3167;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3168=((1.0)*cj5);
IkReal x3169=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3168)));
j4eval[0]=x3169;
j4eval[1]=IKsign(x3169);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3170=((1.0)*cj5);
CheckValue<IkReal> x3171 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3170))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3171.valid){
continue;
}
CheckValue<IkReal> x3172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3170)))),-1);
if(!x3172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3171.value)+(((1.5707963267949)*(x3172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3173=IKcos(j4);
IkReal x3174=IKsin(j4);
IkReal x3175=((1.0)*cj0);
IkReal x3176=(cj5*r00);
IkReal x3177=(cj5*r10);
IkReal x3178=(cj5*r20);
IkReal x3179=((1.0)*x3173);
IkReal x3180=((1.0)*x3174);
IkReal x3181=(sj5*x3173);
IkReal x3182=(sj5*x3174);
evalcond[0]=(((r22*x3174))+(((-1.0)*x3178*x3179))+((r21*x3181)));
evalcond[1]=((((-1.0)*x3178*x3180))+(((-1.0)*r22*x3179))+((r21*x3182)));
evalcond[2]=(sj0+(((-1.0)*x3176*x3180))+((r01*x3182))+(((-1.0)*r02*x3179)));
evalcond[3]=(((r01*x3181))+(((-1.0)*x3175))+((r02*x3174))+(((-1.0)*x3176*x3179)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3177*x3179))+((r11*x3181))+((r12*x3174)));
evalcond[5]=((((-1.0)*x3177*x3180))+(((-1.0)*r12*x3179))+(((-1.0)*x3175))+((r11*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3183 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3183.valid){
continue;
}
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3183.value)+(((1.5707963267949)*(x3184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3185=IKcos(j4);
IkReal x3186=IKsin(j4);
IkReal x3187=((1.0)*cj0);
IkReal x3188=(cj5*r00);
IkReal x3189=(cj5*r10);
IkReal x3190=(cj5*r20);
IkReal x3191=((1.0)*x3185);
IkReal x3192=((1.0)*x3186);
IkReal x3193=(sj5*x3185);
IkReal x3194=(sj5*x3186);
evalcond[0]=((((-1.0)*x3190*x3191))+((r22*x3186))+((r21*x3193)));
evalcond[1]=((((-1.0)*x3190*x3192))+(((-1.0)*r22*x3191))+((r21*x3194)));
evalcond[2]=(sj0+(((-1.0)*x3188*x3192))+((r01*x3194))+(((-1.0)*r02*x3191)));
evalcond[3]=((((-1.0)*x3188*x3191))+((r01*x3193))+(((-1.0)*x3187))+((r02*x3186)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3186))+((r11*x3193))+(((-1.0)*x3189*x3191)));
evalcond[5]=(((r11*x3194))+(((-1.0)*r12*x3191))+(((-1.0)*x3189*x3192))+(((-1.0)*x3187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3195.value)))+(x3196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3197=IKcos(j4);
IkReal x3198=IKsin(j4);
IkReal x3199=((1.0)*cj0);
IkReal x3200=(cj5*r00);
IkReal x3201=(cj5*r10);
IkReal x3202=(cj5*r20);
IkReal x3203=((1.0)*x3197);
IkReal x3204=((1.0)*x3198);
IkReal x3205=(sj5*x3197);
IkReal x3206=(sj5*x3198);
evalcond[0]=((((-1.0)*x3202*x3203))+((r22*x3198))+((r21*x3205)));
evalcond[1]=((((-1.0)*x3202*x3204))+(((-1.0)*r22*x3203))+((r21*x3206)));
evalcond[2]=((((-1.0)*r02*x3203))+sj0+(((-1.0)*x3200*x3204))+((r01*x3206)));
evalcond[3]=((((-1.0)*x3200*x3203))+((r01*x3205))+(((-1.0)*x3199))+((r02*x3198)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3205))+(((-1.0)*x3201*x3203))+((r12*x3198)));
evalcond[5]=(((r11*x3206))+(((-1.0)*r12*x3203))+(((-1.0)*x3201*x3204))+(((-1.0)*x3199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((-0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((-0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((0.408402007707268)*px))), ((((1.52458523930468)*px))+(((-0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3207=IKsin(j0);
IkReal x3208=IKcos(j0);
evalcond[0]=((((0.612)*x3208))+(((-1.0)*px))+(((0.163941)*x3207)));
evalcond[1]=((((0.612)*x3207))+(((-1.0)*py))+(((-0.163941)*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3209=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3209;
j4eval[1]=IKsign(x3209);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3210=((1.0)*cj5);
IkReal x3211=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3210)));
j4eval[0]=x3211;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3210)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3212=cj5*cj5;
IkReal x3213=((1.0)*r20);
IkReal x3214=(r01*r21);
IkReal x3215=(r21*sj5);
IkReal x3216=(((cj5*r01*r20*sj5))+((cj5*r00*x3215))+((x3212*x3214))+(((-1.0)*r02*r22))+(((-1.0)*x3214))+(((-1.0)*r00*x3212*x3213)));
j4eval[0]=x3216;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3213))+((cj0*x3215))))));
j4eval[2]=IKsign(x3216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3217=cj5*cj5;
IkReal x3218=((1.0)*r20);
IkReal x3219=(r01*r21);
IkReal x3220=(r21*sj5);
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3219))+((cj5*r00*x3220))+(((-1.0)*r00*x3217*x3218))+((x3217*x3219)))),-1);
if(!x3221.valid){
continue;
}
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3218))+((cj0*x3220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3221.value)))+(x3222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3223=IKcos(j4);
IkReal x3224=IKsin(j4);
IkReal x3225=(cj5*r00);
IkReal x3226=(cj5*r10);
IkReal x3227=(cj5*r20);
IkReal x3228=((1.0)*x3223);
IkReal x3229=((1.0)*x3224);
IkReal x3230=(sj5*x3223);
IkReal x3231=(sj5*x3224);
evalcond[0]=((((-1.0)*x3227*x3228))+((r22*x3224))+((r21*x3230)));
evalcond[1]=((((-1.0)*x3227*x3229))+(((-1.0)*r22*x3228))+((r21*x3231)));
evalcond[2]=(cj0+((r02*x3224))+((r01*x3230))+(((-1.0)*x3225*x3228)));
evalcond[3]=(((r12*x3224))+sj0+((r11*x3230))+(((-1.0)*x3226*x3228)));
evalcond[4]=((((-1.0)*r02*x3228))+sj0+((r01*x3231))+(((-1.0)*x3225*x3229)));
evalcond[5]=(((r11*x3231))+(((-1.0)*x3226*x3229))+(((-1.0)*r12*x3228))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3232=((1.0)*cj5);
CheckValue<IkReal> x3233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3232)))),-1);
if(!x3233.valid){
continue;
}
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3232)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3233.value)))+(x3234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3235=IKcos(j4);
IkReal x3236=IKsin(j4);
IkReal x3237=(cj5*r00);
IkReal x3238=(cj5*r10);
IkReal x3239=(cj5*r20);
IkReal x3240=((1.0)*x3235);
IkReal x3241=((1.0)*x3236);
IkReal x3242=(sj5*x3235);
IkReal x3243=(sj5*x3236);
evalcond[0]=(((r21*x3242))+(((-1.0)*x3239*x3240))+((r22*x3236)));
evalcond[1]=(((r21*x3243))+(((-1.0)*x3239*x3241))+(((-1.0)*r22*x3240)));
evalcond[2]=(((r01*x3242))+cj0+(((-1.0)*x3237*x3240))+((r02*x3236)));
evalcond[3]=(sj0+(((-1.0)*x3238*x3240))+((r12*x3236))+((r11*x3242)));
evalcond[4]=(((r01*x3243))+sj0+(((-1.0)*x3237*x3241))+(((-1.0)*r02*x3240)));
evalcond[5]=((((-1.0)*x3238*x3241))+(((-1.0)*r12*x3240))+((r11*x3243))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3244 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3244.valid){
continue;
}
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3244.value)+(((1.5707963267949)*(x3245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3246=IKcos(j4);
IkReal x3247=IKsin(j4);
IkReal x3248=(cj5*r00);
IkReal x3249=(cj5*r10);
IkReal x3250=(cj5*r20);
IkReal x3251=((1.0)*x3246);
IkReal x3252=((1.0)*x3247);
IkReal x3253=(sj5*x3246);
IkReal x3254=(sj5*x3247);
evalcond[0]=(((r22*x3247))+((r21*x3253))+(((-1.0)*x3250*x3251)));
evalcond[1]=(((r21*x3254))+(((-1.0)*r22*x3251))+(((-1.0)*x3250*x3252)));
evalcond[2]=(cj0+(((-1.0)*x3248*x3251))+((r01*x3253))+((r02*x3247)));
evalcond[3]=(sj0+((r11*x3253))+(((-1.0)*x3249*x3251))+((r12*x3247)));
evalcond[4]=(sj0+(((-1.0)*r02*x3251))+(((-1.0)*x3248*x3252))+((r01*x3254)));
evalcond[5]=(((r11*x3254))+(((-1.0)*x3249*x3252))+(((-1.0)*r12*x3251))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3255=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3255;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3256=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3256;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3257=((1.0)*cj5);
IkReal x3258=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3257)));
j4eval[0]=x3258;
j4eval[1]=IKsign(x3258);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3257))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3259=((1.0)*cj5);
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3259))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3259)))),-1);
if(!x3261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3260.value)+(((1.5707963267949)*(x3261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3262=IKcos(j4);
IkReal x3263=IKsin(j4);
IkReal x3264=((1.0)*cj0);
IkReal x3265=(cj5*r00);
IkReal x3266=(cj5*r10);
IkReal x3267=(cj5*r20);
IkReal x3268=((1.0)*x3262);
IkReal x3269=((1.0)*x3263);
IkReal x3270=(sj5*x3262);
IkReal x3271=(sj5*x3263);
evalcond[0]=(((r21*x3270))+(((-1.0)*x3267*x3268))+((r22*x3263)));
evalcond[1]=(((r21*x3271))+(((-1.0)*x3267*x3269))+(((-1.0)*r22*x3268)));
evalcond[2]=(sj0+((r01*x3271))+(((-1.0)*x3265*x3269))+(((-1.0)*r02*x3268)));
evalcond[3]=(((r01*x3270))+(((-1.0)*x3264))+(((-1.0)*x3265*x3268))+((r02*x3263)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3270))+(((-1.0)*x3266*x3268))+((r12*x3263)));
evalcond[5]=((((-1.0)*r12*x3268))+(((-1.0)*x3264))+((r11*x3271))+(((-1.0)*x3266*x3269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3272 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3272.valid){
continue;
}
CheckValue<IkReal> x3273=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3272.value)+(((1.5707963267949)*(x3273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3274=IKcos(j4);
IkReal x3275=IKsin(j4);
IkReal x3276=((1.0)*cj0);
IkReal x3277=(cj5*r00);
IkReal x3278=(cj5*r10);
IkReal x3279=(cj5*r20);
IkReal x3280=((1.0)*x3274);
IkReal x3281=((1.0)*x3275);
IkReal x3282=(sj5*x3274);
IkReal x3283=(sj5*x3275);
evalcond[0]=((((-1.0)*x3279*x3280))+((r21*x3282))+((r22*x3275)));
evalcond[1]=((((-1.0)*r22*x3280))+(((-1.0)*x3279*x3281))+((r21*x3283)));
evalcond[2]=(sj0+(((-1.0)*x3277*x3281))+(((-1.0)*r02*x3280))+((r01*x3283)));
evalcond[3]=((((-1.0)*x3277*x3280))+(((-1.0)*x3276))+((r02*x3275))+((r01*x3282)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3275))+((r11*x3282))+(((-1.0)*x3278*x3280)));
evalcond[5]=((((-1.0)*r12*x3280))+(((-1.0)*x3276))+((r11*x3283))+(((-1.0)*x3278*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3284=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3284.valid){
continue;
}
CheckValue<IkReal> x3285 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3284.value)))+(x3285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3286=IKcos(j4);
IkReal x3287=IKsin(j4);
IkReal x3288=((1.0)*cj0);
IkReal x3289=(cj5*r00);
IkReal x3290=(cj5*r10);
IkReal x3291=(cj5*r20);
IkReal x3292=((1.0)*x3286);
IkReal x3293=((1.0)*x3287);
IkReal x3294=(sj5*x3286);
IkReal x3295=(sj5*x3287);
evalcond[0]=((((-1.0)*x3291*x3292))+((r22*x3287))+((r21*x3294)));
evalcond[1]=((((-1.0)*r22*x3292))+(((-1.0)*x3291*x3293))+((r21*x3295)));
evalcond[2]=(((r01*x3295))+sj0+(((-1.0)*r02*x3292))+(((-1.0)*x3289*x3293)));
evalcond[3]=(((r01*x3294))+((r02*x3287))+(((-1.0)*x3288))+(((-1.0)*x3289*x3292)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3294))+((r12*x3287))+(((-1.0)*x3290*x3292)));
evalcond[5]=((((-1.0)*r12*x3292))+(((-1.0)*x3288))+((r11*x3295))+(((-1.0)*x3290*x3293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.09975539980847)*px))+IKsqr(((-6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((6.09975539980847)*px), ((-6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3296=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3296;
j4eval[1]=IKsign(x3296);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3297=((1.0)*cj5);
IkReal x3298=((((-1.0)*r11*x3297))+(((-1.0)*r10*sj5)));
j4eval[0]=x3298;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3297))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3299=cj5*cj5;
IkReal x3300=((1.0)*r20);
IkReal x3301=(r01*r21);
IkReal x3302=(r21*sj5);
IkReal x3303=(((cj5*r01*r20*sj5))+((cj5*r00*x3302))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3299*x3300))+(((-1.0)*x3301))+((x3299*x3301)));
j4eval[0]=x3303;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3302))+(((-1.0)*cj0*cj5*x3300))))));
j4eval[2]=IKsign(x3303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3304=cj5*cj5;
IkReal x3305=((1.0)*r20);
IkReal x3306=(r01*r21);
IkReal x3307=(r21*sj5);
CheckValue<IkReal> x3308 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3307))+(((-1.0)*cj0*cj5*x3305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3308.valid){
continue;
}
CheckValue<IkReal> x3309=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3304*x3305))+((cj5*r00*x3307))+(((-1.0)*r02*r22))+((x3304*x3306))+(((-1.0)*x3306)))),-1);
if(!x3309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3308.value)+(((1.5707963267949)*(x3309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3310=IKcos(j4);
IkReal x3311=IKsin(j4);
IkReal x3312=(cj5*r00);
IkReal x3313=(cj5*r10);
IkReal x3314=(cj5*r20);
IkReal x3315=((1.0)*x3310);
IkReal x3316=((1.0)*x3311);
IkReal x3317=(sj5*x3310);
IkReal x3318=(sj5*x3311);
evalcond[0]=(((r21*x3317))+((r22*x3311))+(((-1.0)*x3314*x3315)));
evalcond[1]=(((r21*x3318))+(((-1.0)*r22*x3315))+(((-1.0)*x3314*x3316)));
evalcond[2]=(cj0+((r02*x3311))+(((-1.0)*x3312*x3315))+((r01*x3317)));
evalcond[3]=(sj0+((r11*x3317))+((r12*x3311))+(((-1.0)*x3313*x3315)));
evalcond[4]=(sj0+(((-1.0)*x3312*x3316))+(((-1.0)*r02*x3315))+((r01*x3318)));
evalcond[5]=(((r11*x3318))+(((-1.0)*x3313*x3316))+(((-1.0)*r12*x3315))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3319=((1.0)*cj5);
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3319)))),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3319)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3320.value)))+(x3321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3322=IKcos(j4);
IkReal x3323=IKsin(j4);
IkReal x3324=(cj5*r00);
IkReal x3325=(cj5*r10);
IkReal x3326=(cj5*r20);
IkReal x3327=((1.0)*x3322);
IkReal x3328=((1.0)*x3323);
IkReal x3329=(sj5*x3322);
IkReal x3330=(sj5*x3323);
evalcond[0]=(((r22*x3323))+(((-1.0)*x3326*x3327))+((r21*x3329)));
evalcond[1]=(((r21*x3330))+(((-1.0)*x3326*x3328))+(((-1.0)*r22*x3327)));
evalcond[2]=((((-1.0)*x3324*x3327))+cj0+((r01*x3329))+((r02*x3323)));
evalcond[3]=(((r12*x3323))+sj0+(((-1.0)*x3325*x3327))+((r11*x3329)));
evalcond[4]=((((-1.0)*x3324*x3328))+sj0+(((-1.0)*r02*x3327))+((r01*x3330)));
evalcond[5]=((((-1.0)*x3325*x3328))+((r11*x3330))+(((-1.0)*r12*x3327))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3331.value)+(((1.5707963267949)*(x3332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3333=IKcos(j4);
IkReal x3334=IKsin(j4);
IkReal x3335=(cj5*r00);
IkReal x3336=(cj5*r10);
IkReal x3337=(cj5*r20);
IkReal x3338=((1.0)*x3333);
IkReal x3339=((1.0)*x3334);
IkReal x3340=(sj5*x3333);
IkReal x3341=(sj5*x3334);
evalcond[0]=((((-1.0)*x3337*x3338))+((r21*x3340))+((r22*x3334)));
evalcond[1]=((((-1.0)*r22*x3338))+(((-1.0)*x3337*x3339))+((r21*x3341)));
evalcond[2]=(cj0+((r02*x3334))+(((-1.0)*x3335*x3338))+((r01*x3340)));
evalcond[3]=(sj0+((r12*x3334))+(((-1.0)*x3336*x3338))+((r11*x3340)));
evalcond[4]=(sj0+(((-1.0)*r02*x3338))+(((-1.0)*x3335*x3339))+((r01*x3341)));
evalcond[5]=((((-1.0)*x3336*x3339))+((r11*x3341))+(((-1.0)*cj0))+(((-1.0)*r12*x3338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3342=(r00*sj5);
IkReal x3343=((612000.0)*cj1);
IkReal x3344=(cj5*r01);
IkReal x3345=(cj1*cj2);
IkReal x3346=((1000000.0)*px);
IkReal x3347=(sj1*sj2);
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(((((163941.0)*x3345))+(((-163941.0)*x3347))),-1);
if(!x3348.valid){
continue;
}
CheckValue<IkReal> x3349=IKPowWithIntegerCheck(((((-1.0)*x3347))+x3345),-1);
if(!x3349.valid){
continue;
}
if( IKabs(((x3348.value)*(((((688000.0)*x3342*x3345))+(((688000.0)*x3344*x3345))+((x3343*x3344))+((x3342*x3343))+(((-1.0)*x3346*x3347))+((x3345*x3346))+(((-688000.0)*x3344*x3347))+(((-688000.0)*x3342*x3347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3349.value)*((x3342+x3344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3348.value)*(((((688000.0)*x3342*x3345))+(((688000.0)*x3344*x3345))+((x3343*x3344))+((x3342*x3343))+(((-1.0)*x3346*x3347))+((x3345*x3346))+(((-688000.0)*x3344*x3347))+(((-688000.0)*x3342*x3347))))))+IKsqr(((x3349.value)*((x3342+x3344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3348.value)*(((((688000.0)*x3342*x3345))+(((688000.0)*x3344*x3345))+((x3343*x3344))+((x3342*x3343))+(((-1.0)*x3346*x3347))+((x3345*x3346))+(((-688000.0)*x3344*x3347))+(((-688000.0)*x3342*x3347))))), ((x3349.value)*((x3342+x3344))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3350=IKcos(j0);
IkReal x3351=IKsin(j0);
IkReal x3352=(cj5*r01);
IkReal x3353=(cj1*cj2);
IkReal x3354=(cj5*r11);
IkReal x3355=(r10*sj5);
IkReal x3356=(r00*sj5);
IkReal x3357=((0.612)*cj1);
IkReal x3358=(sj1*sj2*x3351);
IkReal x3359=(sj1*sj2*x3350);
evalcond[0]=(((x3350*x3353))+(((-1.0)*x3359))+(((-1.0)*x3352))+(((-1.0)*x3356)));
evalcond[1]=(((x3351*x3353))+(((-1.0)*x3355))+(((-1.0)*x3354))+(((-1.0)*x3358)));
evalcond[2]=((((-0.1157)*x3352))+(((-0.1157)*x3356))+(((-0.5723)*x3350*x3353))+(((0.163941)*x3351))+(((-1.0)*px))+(((-1.0)*x3350*x3357))+(((0.5723)*x3359)));
evalcond[3]=((((-0.5723)*x3351*x3353))+(((-0.1157)*x3355))+(((-0.1157)*x3354))+(((-0.163941)*x3350))+(((-1.0)*py))+(((-1.0)*x3351*x3357))+(((0.5723)*x3358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3360=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3360;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3361=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3361;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3362=((1.0)*cj5);
IkReal x3363=((((-1.0)*r21*x3362))+(((-1.0)*r20*sj5)));
j4eval[0]=x3363;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3362))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3362))))));
j4eval[2]=IKsign(x3363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3364=((-1.0)*r20);
IkReal x3366 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3366)==0){
continue;
}
IkReal x3365=pow(x3366,-0.5);
CheckValue<IkReal> x3367 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3364),IKFAST_ATAN2_MAGTHRESH);
if(!x3367.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3367.value));
IkReal gconst97=(r21*x3365);
IkReal gconst98=(x3364*x3365);
CheckValue<IkReal> x3368 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3368.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3369=((-1.0)*r20);
IkReal x3370=x3365;
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3369),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
IkReal x3371=((-1.0)*(x3372.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3371;
IkReal gconst96=x3371;
IkReal gconst97=(r21*x3370);
IkReal gconst98=(x3369*x3370);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3373=((-1.0)*r20);
IkReal x3374=x3365;
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3373),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
IkReal x3375=((-1.0)*(x3376.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3375;
IkReal gconst96=x3375;
IkReal gconst97=(r21*x3374);
IkReal gconst98=(x3373*x3374);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3377=((-1.0)*r20);
IkReal x3378=x3365;
CheckValue<IkReal> x3380 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3377),IKFAST_ATAN2_MAGTHRESH);
if(!x3380.valid){
continue;
}
IkReal x3379=((-1.0)*(x3380.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3379;
IkReal gconst96=x3379;
IkReal gconst97=(r21*x3378);
IkReal gconst98=(x3377*x3378);
IkReal x3381=((1.0)*(r22*r22));
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3381))),-1);
if(!x3385.valid){
continue;
}
IkReal x3382=x3385.value;
IkReal x3383=((1.0)*x3382);
IkReal x3384=((((-1.0)*x3383*(r20*r20*r20*r20)))+(((-1.0)*x3383*(r21*r21*r21*r21)))+(((-2.0)*x3382*(r20*r20)*(r21*r21)))+(((-1.0)*x3381)));
j4eval[0]=x3384;
j4eval[1]=IKsign(x3384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3386=(cj1*cj2);
IkReal x3387=(gconst98*r20);
IkReal x3388=(sj1*sj2);
IkReal x3389=(gconst97*r21);
CheckValue<IkReal> x3390 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3386))+((r22*x3388)))),IkReal(((((-1.0)*x3386*x3389))+((x3388*x3389))+(((-1.0)*x3387*x3388))+((x3386*x3387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3389*x3389)))+(((2.0)*x3387*x3389))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3387*x3387))))),-1);
if(!x3391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3390.value)+(((1.5707963267949)*(x3391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3392=IKsin(j4);
IkReal x3393=IKcos(j4);
IkReal x3394=(gconst98*r10);
IkReal x3395=(gconst97*r21);
IkReal x3396=(cj2*sj1);
IkReal x3397=(gconst98*r20);
IkReal x3398=(gconst98*r00);
IkReal x3399=(cj1*sj2);
IkReal x3400=((1.0)*x3393);
IkReal x3401=((1.0)*x3392);
IkReal x3402=(gconst97*x3392);
IkReal x3403=(gconst97*x3393);
evalcond[0]=((((-1.0)*x3397*x3401))+((x3392*x3395))+(((-1.0)*r22*x3400)));
evalcond[1]=(sj0+(((-1.0)*x3398*x3401))+(((-1.0)*r02*x3400))+((r01*x3402)));
evalcond[2]=((((-1.0)*x3394*x3401))+((r11*x3402))+(((-1.0)*r12*x3400))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3393*x3395))+((r22*x3392))+(((-1.0)*x3397*x3400)));
evalcond[4]=((((-1.0)*x3398*x3400))+((cj0*x3399))+((cj0*x3396))+((r02*x3392))+((r01*x3403)));
evalcond[5]=((((-1.0)*x3394*x3400))+((r11*x3403))+((sj0*x3399))+((sj0*x3396))+((r12*x3392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3404.value)+(((1.5707963267949)*(x3405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3406=IKsin(j4);
IkReal x3407=IKcos(j4);
IkReal x3408=(gconst98*r10);
IkReal x3409=(gconst97*r21);
IkReal x3410=(cj2*sj1);
IkReal x3411=(gconst98*r20);
IkReal x3412=(gconst98*r00);
IkReal x3413=(cj1*sj2);
IkReal x3414=((1.0)*x3407);
IkReal x3415=((1.0)*x3406);
IkReal x3416=(gconst97*x3406);
IkReal x3417=(gconst97*x3407);
evalcond[0]=((((-1.0)*r22*x3414))+(((-1.0)*x3411*x3415))+((x3406*x3409)));
evalcond[1]=((((-1.0)*x3412*x3415))+sj0+(((-1.0)*r02*x3414))+((r01*x3416)));
evalcond[2]=((((-1.0)*x3408*x3415))+((r11*x3416))+(((-1.0)*r12*x3414))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3406))+(((-1.0)*x3411*x3414))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3407*x3409)));
evalcond[4]=((((-1.0)*x3412*x3414))+((r02*x3406))+((cj0*x3410))+((cj0*x3413))+((r01*x3417)));
evalcond[5]=(((sj0*x3410))+((sj0*x3413))+(((-1.0)*x3408*x3414))+((r11*x3417))+((r12*x3406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3418 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3418.value)+(((1.5707963267949)*(x3419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3420=IKsin(j4);
IkReal x3421=IKcos(j4);
IkReal x3422=(gconst98*r10);
IkReal x3423=(gconst97*r21);
IkReal x3424=(cj2*sj1);
IkReal x3425=(gconst98*r20);
IkReal x3426=(gconst98*r00);
IkReal x3427=(cj1*sj2);
IkReal x3428=((1.0)*x3421);
IkReal x3429=((1.0)*x3420);
IkReal x3430=(gconst97*x3420);
IkReal x3431=(gconst97*x3421);
evalcond[0]=(((x3420*x3423))+(((-1.0)*x3425*x3429))+(((-1.0)*r22*x3428)));
evalcond[1]=(((r01*x3430))+sj0+(((-1.0)*x3426*x3429))+(((-1.0)*r02*x3428)));
evalcond[2]=((((-1.0)*r12*x3428))+(((-1.0)*x3422*x3429))+((r11*x3430))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3425*x3428))+((x3421*x3423))+((r22*x3420)));
evalcond[4]=(((r01*x3431))+(((-1.0)*x3426*x3428))+((r02*x3420))+((cj0*x3424))+((cj0*x3427)));
evalcond[5]=(((sj0*x3424))+((sj0*x3427))+(((-1.0)*x3422*x3428))+((r12*x3420))+((r11*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3432=((-1.0)*r21);
IkReal x3434 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3434)==0){
continue;
}
IkReal x3433=pow(x3434,-0.5);
CheckValue<IkReal> x3435 = IKatan2WithCheck(IkReal(x3432),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3435.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3435.value))));
IkReal gconst100=(x3432*x3433);
IkReal gconst101=((1.0)*r20*x3433);
CheckValue<IkReal> x3436 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3436.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3436.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3437=((-1.0)*r21);
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal(x3437),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
IkReal x3438=((1.0)*(x3440.value));
IkReal x3439=x3433;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3438)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3438)));
IkReal gconst100=(x3437*x3439);
IkReal gconst101=((1.0)*r20*x3439);
IkReal x3441=r22*r22;
IkReal x3442=((1.0)*x3441);
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(((-1.0)+x3441),-1);
if(!x3446.valid){
continue;
}
IkReal x3443=x3446.value;
if((((1.0)+(((-1.0)*x3442)))) < -0.00001)
continue;
IkReal x3444=IKsqrt(((1.0)+(((-1.0)*x3442))));
IkReal x3445=(sj0*x3443*x3444);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3445+(((-1.0)*x3442*x3445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3447=((-1.0)*r21);
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(x3447),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
IkReal x3448=((1.0)*(x3450.value));
IkReal x3449=x3433;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3448)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3448)));
IkReal gconst100=(x3447*x3449);
IkReal gconst101=((1.0)*r20*x3449);
IkReal x3451=r22*r22;
IkReal x3452=((1.0)*x3451);
CheckValue<IkReal> x3456=IKPowWithIntegerCheck(((-1.0)+x3451),-1);
if(!x3456.valid){
continue;
}
IkReal x3453=x3456.value;
if((((1.0)+(((-1.0)*x3452)))) < -0.00001)
continue;
IkReal x3454=IKsqrt(((1.0)+(((-1.0)*x3452))));
IkReal x3455=(cj0*x3453*x3454);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3455+(((-1.0)*x3452*x3455))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3457=((-1.0)*r21);
CheckValue<IkReal> x3460 = IKatan2WithCheck(IkReal(x3457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3460.valid){
continue;
}
IkReal x3458=((1.0)*(x3460.value));
IkReal x3459=x3433;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3458)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3458)));
IkReal gconst100=(x3457*x3459);
IkReal gconst101=((1.0)*r20*x3459);
IkReal x3461=r22*r22;
IkReal x3462=(cj0*r02);
IkReal x3463=(r12*sj0);
CheckValue<IkReal> x3467=IKPowWithIntegerCheck(((-1.0)+x3461),-1);
if(!x3467.valid){
continue;
}
IkReal x3464=x3467.value;
if((((1.0)+(((-1.0)*x3461)))) < -0.00001)
continue;
IkReal x3465=IKsqrt(((1.0)+(((-1.0)*x3461))));
IkReal x3466=((1.0)*r22*x3464*x3465);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3463*x3466))+(((-1.0)*x3462*x3466)))))+(IKabs((x3463+x3462))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3468=((1.0)*gconst101);
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3468)))),-1);
if(!x3469.valid){
continue;
}
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3468))+(((-1.0)*r10*sj0*x3468))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3469.value)))+(x3470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3471=IKsin(j4);
IkReal x3472=IKcos(j4);
IkReal x3473=(cj2*sj1);
IkReal x3474=(gconst101*r20);
IkReal x3475=(gconst101*r10);
IkReal x3476=(gconst101*r00);
IkReal x3477=(cj1*sj2);
IkReal x3478=((1.0)*x3472);
IkReal x3479=((1.0)*x3471);
IkReal x3480=(gconst100*x3471);
IkReal x3481=(gconst100*x3472);
evalcond[0]=((((-1.0)*r22*x3478))+((r21*x3480))+(((-1.0)*x3474*x3479)));
evalcond[1]=(sj0+(((-1.0)*r02*x3478))+((r01*x3480))+(((-1.0)*x3476*x3479)));
evalcond[2]=((((-1.0)*r12*x3478))+((r11*x3480))+(((-1.0)*x3475*x3479))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3481))+(((-1.0)*x3474*x3478))+((r22*x3471)));
evalcond[4]=(((cj0*x3477))+((cj0*x3473))+((r01*x3481))+((r02*x3471))+(((-1.0)*x3476*x3478)));
evalcond[5]=(((r12*x3471))+((sj0*x3477))+((sj0*x3473))+((r11*x3481))+(((-1.0)*x3475*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3482 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3482.valid){
continue;
}
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3482.value)+(((1.5707963267949)*(x3483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3484=IKsin(j4);
IkReal x3485=IKcos(j4);
IkReal x3486=(cj2*sj1);
IkReal x3487=(gconst101*r20);
IkReal x3488=(gconst101*r10);
IkReal x3489=(gconst101*r00);
IkReal x3490=(cj1*sj2);
IkReal x3491=((1.0)*x3485);
IkReal x3492=((1.0)*x3484);
IkReal x3493=(gconst100*x3484);
IkReal x3494=(gconst100*x3485);
evalcond[0]=((((-1.0)*x3487*x3492))+(((-1.0)*r22*x3491))+((r21*x3493)));
evalcond[1]=((((-1.0)*r02*x3491))+sj0+((r01*x3493))+(((-1.0)*x3489*x3492)));
evalcond[2]=((((-1.0)*r12*x3491))+(((-1.0)*x3488*x3492))+((r11*x3493))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3487*x3491))+((r21*x3494))+((r22*x3484)));
evalcond[4]=(((cj0*x3490))+((r01*x3494))+(((-1.0)*x3489*x3491))+((cj0*x3486))+((r02*x3484)));
evalcond[5]=((((-1.0)*x3488*x3491))+((r12*x3484))+((sj0*x3486))+((r11*x3494))+((sj0*x3490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3495.valid){
continue;
}
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3495.value)))+(x3496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3497=IKsin(j4);
IkReal x3498=IKcos(j4);
IkReal x3499=(cj2*sj1);
IkReal x3500=(gconst101*r20);
IkReal x3501=(gconst101*r10);
IkReal x3502=(gconst101*r00);
IkReal x3503=(cj1*sj2);
IkReal x3504=((1.0)*x3498);
IkReal x3505=((1.0)*x3497);
IkReal x3506=(gconst100*x3497);
IkReal x3507=(gconst100*x3498);
evalcond[0]=((((-1.0)*r22*x3504))+((r21*x3506))+(((-1.0)*x3500*x3505)));
evalcond[1]=(((r01*x3506))+sj0+(((-1.0)*x3502*x3505))+(((-1.0)*r02*x3504)));
evalcond[2]=((((-1.0)*r12*x3504))+(((-1.0)*x3501*x3505))+((r11*x3506))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3497))+((r21*x3507))+(((-1.0)*x3500*x3504)));
evalcond[4]=(((r01*x3507))+((cj0*x3503))+((cj0*x3499))+(((-1.0)*x3502*x3504))+((r02*x3497)));
evalcond[5]=(((sj0*x3503))+(((-1.0)*x3501*x3504))+((r11*x3507))+((sj0*x3499))+((r12*x3497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3509 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3509)==0){
continue;
}
IkReal x3508=pow(x3509,-0.5);
CheckValue<IkReal> x3510 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3510.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3510.value));
IkReal gconst103=((-1.0)*r01*x3508);
IkReal gconst104=(r00*x3508);
CheckValue<IkReal> x3511 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3511.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3511.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3514 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
IkReal x3512=((-1.0)*(x3514.value));
IkReal x3513=x3508;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3512;
IkReal gconst102=x3512;
IkReal gconst103=((-1.0)*r01*x3513);
IkReal gconst104=(r00*x3513);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3515=((1.0)*gconst104);
CheckValue<IkReal> x3516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3515)))),-1);
if(!x3516.valid){
continue;
}
CheckValue<IkReal> x3517 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3515))+((cj0*gconst103*r01))+(((-1.0)*r10*sj0*x3515))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3516.value)))+(x3517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3518=IKsin(j4);
IkReal x3519=IKcos(j4);
IkReal x3520=(gconst103*r11);
IkReal x3521=(cj2*sj1);
IkReal x3522=(gconst104*r10);
IkReal x3523=(gconst104*r20);
IkReal x3524=(gconst104*r00);
IkReal x3525=(cj1*sj2);
IkReal x3526=((1.0)*x3519);
IkReal x3527=(gconst103*x3519);
IkReal x3528=(gconst103*x3518);
IkReal x3529=((1.0)*x3518);
evalcond[0]=(((r21*x3528))+(((-1.0)*r22*x3526))+(((-1.0)*x3523*x3529)));
evalcond[1]=((((-1.0)*r02*x3526))+(((-1.0)*x3524*x3529))+sj0+((r01*x3528)));
evalcond[2]=((((-1.0)*x3522*x3529))+((x3518*x3520))+(((-1.0)*r12*x3526))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3527))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3518))+(((-1.0)*x3523*x3526)));
evalcond[4]=((((-1.0)*x3524*x3526))+((r01*x3527))+((cj0*x3525))+((cj0*x3521))+((r02*x3518)));
evalcond[5]=((((-1.0)*x3522*x3526))+((r12*x3518))+((sj0*x3521))+((sj0*x3525))+((x3519*x3520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
CheckValue<IkReal> x3531=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3530.value)+(((1.5707963267949)*(x3531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3532=IKsin(j4);
IkReal x3533=IKcos(j4);
IkReal x3534=(gconst103*r11);
IkReal x3535=(cj2*sj1);
IkReal x3536=(gconst104*r10);
IkReal x3537=(gconst104*r20);
IkReal x3538=(gconst104*r00);
IkReal x3539=(cj1*sj2);
IkReal x3540=((1.0)*x3533);
IkReal x3541=(gconst103*x3533);
IkReal x3542=(gconst103*x3532);
IkReal x3543=((1.0)*x3532);
evalcond[0]=(((r21*x3542))+(((-1.0)*r22*x3540))+(((-1.0)*x3537*x3543)));
evalcond[1]=((((-1.0)*r02*x3540))+sj0+(((-1.0)*x3538*x3543))+((r01*x3542)));
evalcond[2]=(((x3532*x3534))+(((-1.0)*r12*x3540))+(((-1.0)*x3536*x3543))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3532))+((r21*x3541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3537*x3540)));
evalcond[4]=(((r02*x3532))+(((-1.0)*x3538*x3540))+((r01*x3541))+((cj0*x3535))+((cj0*x3539)));
evalcond[5]=(((r12*x3532))+((sj0*x3535))+((sj0*x3539))+((x3533*x3534))+(((-1.0)*x3536*x3540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3545 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3545)==0){
continue;
}
IkReal x3544=pow(x3545,-0.5);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3546.value))));
IkReal gconst106=((1.0)*r01*x3544);
IkReal gconst107=((-1.0)*r00*x3544);
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3547.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3550 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3550.valid){
continue;
}
IkReal x3548=((1.0)*(x3550.value));
IkReal x3549=x3544;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3548)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3548)));
IkReal gconst106=((1.0)*r01*x3549);
IkReal gconst107=((-1.0)*r00*x3549);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3553 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3553.valid){
continue;
}
IkReal x3551=((1.0)*(x3553.value));
IkReal x3552=x3544;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3551)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3551)));
IkReal gconst106=((1.0)*r01*x3552);
IkReal gconst107=((-1.0)*r00*x3552);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3556 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3556.valid){
continue;
}
IkReal x3554=((1.0)*(x3556.value));
IkReal x3555=x3544;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3554)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3554)));
IkReal gconst106=((1.0)*r01*x3555);
IkReal gconst107=((-1.0)*r00*x3555);
IkReal x3557=r02*r02;
IkReal x3558=(r12*sj0);
IkReal x3559=x3544;
IkReal x3560=(cj0*x3559);
j4eval[0]=((IKabs((((r02*x3558*x3559))+(((-1.0)*x3560))+((x3557*x3560)))))+(IKabs((x3558+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3561=((1.0)*gconst107);
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3561))+(((-1.0)*gconst106*r20)))),-1);
if(!x3562.valid){
continue;
}
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3561))+((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3561))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3562.value)))+(x3563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3564=IKsin(j4);
IkReal x3565=IKcos(j4);
IkReal x3566=(gconst107*r10);
IkReal x3567=(gconst107*r00);
IkReal x3568=(gconst107*r20);
IkReal x3569=(cj2*sj1);
IkReal x3570=(cj1*sj2);
IkReal x3571=((1.0)*x3565);
IkReal x3572=(gconst106*x3565);
IkReal x3573=(gconst106*x3564);
IkReal x3574=((1.0)*x3564);
evalcond[0]=((((-1.0)*x3568*x3574))+((r21*x3573))+(((-1.0)*r22*x3571)));
evalcond[1]=(sj0+((r01*x3573))+(((-1.0)*x3567*x3574))+(((-1.0)*r02*x3571)));
evalcond[2]=((((-1.0)*x3566*x3574))+((r11*x3573))+(((-1.0)*r12*x3571))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3568*x3571))+((r21*x3572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3564)));
evalcond[4]=(((r01*x3572))+((cj0*x3570))+((cj0*x3569))+(((-1.0)*x3567*x3571))+((r02*x3564)));
evalcond[5]=((((-1.0)*x3566*x3571))+((sj0*x3569))+((sj0*x3570))+((r11*x3572))+((r12*x3564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3575.valid){
continue;
}
CheckValue<IkReal> x3576=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3575.value)+(((1.5707963267949)*(x3576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3577=IKsin(j4);
IkReal x3578=IKcos(j4);
IkReal x3579=(gconst107*r10);
IkReal x3580=(gconst107*r00);
IkReal x3581=(gconst107*r20);
IkReal x3582=(cj2*sj1);
IkReal x3583=(cj1*sj2);
IkReal x3584=((1.0)*x3578);
IkReal x3585=(gconst106*x3578);
IkReal x3586=(gconst106*x3577);
IkReal x3587=((1.0)*x3577);
evalcond[0]=((((-1.0)*r22*x3584))+(((-1.0)*x3581*x3587))+((r21*x3586)));
evalcond[1]=(sj0+(((-1.0)*r02*x3584))+((r01*x3586))+(((-1.0)*x3580*x3587)));
evalcond[2]=(((r11*x3586))+(((-1.0)*x3579*x3587))+(((-1.0)*r12*x3584))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3581*x3584))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3577))+((r21*x3585)));
evalcond[4]=(((r01*x3585))+(((-1.0)*x3580*x3584))+((r02*x3577))+((cj0*x3582))+((cj0*x3583)));
evalcond[5]=(((r11*x3585))+((r12*x3577))+(((-1.0)*x3579*x3584))+((sj0*x3583))+((sj0*x3582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3588=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3588.valid){
continue;
}
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3588.value)))+(x3589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3590=IKsin(j4);
IkReal x3591=IKcos(j4);
IkReal x3592=(gconst107*r10);
IkReal x3593=(gconst107*r00);
IkReal x3594=(gconst107*r20);
IkReal x3595=(cj2*sj1);
IkReal x3596=(cj1*sj2);
IkReal x3597=((1.0)*x3591);
IkReal x3598=(gconst106*x3591);
IkReal x3599=(gconst106*x3590);
IkReal x3600=((1.0)*x3590);
evalcond[0]=(((r21*x3599))+(((-1.0)*r22*x3597))+(((-1.0)*x3594*x3600)));
evalcond[1]=(sj0+(((-1.0)*r02*x3597))+(((-1.0)*x3593*x3600))+((r01*x3599)));
evalcond[2]=(((r11*x3599))+(((-1.0)*x3592*x3600))+(((-1.0)*r12*x3597))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3594*x3597))+((r21*x3598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3590)));
evalcond[4]=(((r02*x3590))+(((-1.0)*x3593*x3597))+((r01*x3598))+((cj0*x3595))+((cj0*x3596)));
evalcond[5]=(((sj0*x3595))+((sj0*x3596))+((r11*x3598))+((r12*x3590))+(((-1.0)*x3592*x3597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3601=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3601;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3602=((1.0)*cj5);
IkReal x3603=((((-1.0)*r21*x3602))+(((-1.0)*r20*sj5)));
j4eval[0]=x3603;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3602))+((r11*sj5))))));
j4eval[2]=IKsign(x3603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3604=cj5*cj5;
IkReal x3605=r01*r01;
IkReal x3606=(r01*sj5);
IkReal x3607=(cj5*r00);
IkReal x3608=(((x3604*x3605))+(((-1.0)*x3604*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x3605))+(((2.0)*x3606*x3607)));
j4eval[0]=x3608;
j4eval[1]=IKsign(x3608);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3607))+x3606))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=cj5*cj5;
IkReal x3610=r01*r01;
IkReal x3611=(r01*sj5);
IkReal x3612=(cj5*r00);
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(IKsign((((x3609*x3610))+(((-1.0)*(r02*r02)))+(((-1.0)*x3610))+(((-1.0)*x3609*(r00*r00)))+(((2.0)*x3611*x3612)))),-1);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal(((((-1.0)*x3612))+x3611)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3613.value)))+(x3614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3615=IKcos(j4);
IkReal x3616=IKsin(j4);
IkReal x3617=(cj5*r00);
IkReal x3618=(cj5*r10);
IkReal x3619=(r21*sj5);
IkReal x3620=(cj5*r20);
IkReal x3621=((1.0)*x3615);
IkReal x3622=((1.0)*x3616);
IkReal x3623=(sj5*x3616);
IkReal x3624=(sj5*x3615);
evalcond[0]=(((r02*x3616))+((r01*x3624))+(((-1.0)*x3617*x3621)));
evalcond[1]=(((x3616*x3619))+(((-1.0)*r22*x3621))+(((-1.0)*x3620*x3622)));
evalcond[2]=((((-1.0)*r12*x3621))+((r11*x3623))+(((-1.0)*x3618*x3622)));
evalcond[3]=((1.0)+((r01*x3623))+(((-1.0)*x3617*x3622))+(((-1.0)*r02*x3621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x3624))+(((-1.0)*x3618*x3621))+((r12*x3616)));
evalcond[5]=(((r22*x3616))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3615*x3619))+(((-1.0)*x3620*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3625=((1.0)*cj5);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
CheckValue<IkReal> x3627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3625))+(((-1.0)*r20*sj5)))),-1);
if(!x3627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3626.value)+(((1.5707963267949)*(x3627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3628=IKcos(j4);
IkReal x3629=IKsin(j4);
IkReal x3630=(cj5*r00);
IkReal x3631=(cj5*r10);
IkReal x3632=(r21*sj5);
IkReal x3633=(cj5*r20);
IkReal x3634=((1.0)*x3628);
IkReal x3635=((1.0)*x3629);
IkReal x3636=(sj5*x3629);
IkReal x3637=(sj5*x3628);
evalcond[0]=((((-1.0)*x3630*x3634))+((r02*x3629))+((r01*x3637)));
evalcond[1]=((((-1.0)*x3633*x3635))+(((-1.0)*r22*x3634))+((x3629*x3632)));
evalcond[2]=(((r11*x3636))+(((-1.0)*r12*x3634))+(((-1.0)*x3631*x3635)));
evalcond[3]=((1.0)+(((-1.0)*x3630*x3635))+(((-1.0)*r02*x3634))+((r01*x3636)));
evalcond[4]=(((r11*x3637))+((cj2*sj1))+(((-1.0)*x3631*x3634))+((cj1*sj2))+((r12*x3629)));
evalcond[5]=((((-1.0)*x3633*x3634))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3628*x3632))+((r22*x3629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3638.value)+(((1.5707963267949)*(x3639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3640=IKcos(j4);
IkReal x3641=IKsin(j4);
IkReal x3642=(cj5*r00);
IkReal x3643=(cj5*r10);
IkReal x3644=(r21*sj5);
IkReal x3645=(cj5*r20);
IkReal x3646=((1.0)*x3640);
IkReal x3647=((1.0)*x3641);
IkReal x3648=(sj5*x3641);
IkReal x3649=(sj5*x3640);
evalcond[0]=(((r01*x3649))+((r02*x3641))+(((-1.0)*x3642*x3646)));
evalcond[1]=(((x3641*x3644))+(((-1.0)*x3645*x3647))+(((-1.0)*r22*x3646)));
evalcond[2]=(((r11*x3648))+(((-1.0)*x3643*x3647))+(((-1.0)*r12*x3646)));
evalcond[3]=((1.0)+((r01*x3648))+(((-1.0)*x3642*x3647))+(((-1.0)*r02*x3646)));
evalcond[4]=(((cj2*sj1))+((r11*x3649))+(((-1.0)*x3643*x3646))+((cj1*sj2))+((r12*x3641)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3645*x3646))+((r22*x3641))+((x3640*x3644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3650=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3650;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3651=((1.0)*cj5);
IkReal x3652=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3651)));
j4eval[0]=x3652;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3651))))));
j4eval[2]=IKsign(x3652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3653=cj5*cj5;
IkReal x3654=r01*r01;
IkReal x3655=(cj5*r00);
IkReal x3656=(r01*sj5);
IkReal x3657=((((-2.0)*x3655*x3656))+x3654+((x3653*(r00*r00)))+(r02*r02)+(((-1.0)*x3653*x3654)));
j4eval[0]=x3657;
j4eval[1]=IKsign(x3657);
j4eval[2]=((IKabs(r02))+(IKabs((x3656+(((-1.0)*x3655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3658=cj5*cj5;
IkReal x3659=r01*r01;
IkReal x3660=(r01*sj5);
IkReal x3661=(cj5*r00);
CheckValue<IkReal> x3662=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3660*x3661))+x3659+(r02*r02)+(((-1.0)*x3658*x3659))+((x3658*(r00*r00))))),-1);
if(!x3662.valid){
continue;
}
CheckValue<IkReal> x3663 = IKatan2WithCheck(IkReal(((((-1.0)*x3661))+x3660)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3662.value)))+(x3663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3664=IKcos(j4);
IkReal x3665=IKsin(j4);
IkReal x3666=(cj5*r00);
IkReal x3667=(cj5*r10);
IkReal x3668=(r21*sj5);
IkReal x3669=((1.0)*cj2);
IkReal x3670=(cj5*r20);
IkReal x3671=((1.0)*x3664);
IkReal x3672=((1.0)*x3665);
IkReal x3673=(sj5*x3665);
IkReal x3674=(sj5*x3664);
evalcond[0]=(((r01*x3674))+(((-1.0)*x3666*x3671))+((r02*x3665)));
evalcond[1]=((((-1.0)*x3670*x3672))+(((-1.0)*r22*x3671))+((x3665*x3668)));
evalcond[2]=(((r11*x3673))+(((-1.0)*r12*x3671))+(((-1.0)*x3667*x3672)));
evalcond[3]=((-1.0)+((r01*x3673))+(((-1.0)*x3666*x3672))+(((-1.0)*r02*x3671)));
evalcond[4]=(((r22*x3665))+(((-1.0)*x3670*x3671))+((x3664*x3668))+((sj1*sj2))+(((-1.0)*cj1*x3669)));
evalcond[5]=(((r11*x3674))+((r12*x3665))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3669))+(((-1.0)*x3667*x3671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3675=((1.0)*cj5);
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3675)))),-1);
if(!x3676.valid){
continue;
}
CheckValue<IkReal> x3677 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3676.value)))+(x3677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3678=IKcos(j4);
IkReal x3679=IKsin(j4);
IkReal x3680=(cj5*r00);
IkReal x3681=(cj5*r10);
IkReal x3682=(r21*sj5);
IkReal x3683=((1.0)*cj2);
IkReal x3684=(cj5*r20);
IkReal x3685=((1.0)*x3678);
IkReal x3686=((1.0)*x3679);
IkReal x3687=(sj5*x3679);
IkReal x3688=(sj5*x3678);
evalcond[0]=(((r01*x3688))+((r02*x3679))+(((-1.0)*x3680*x3685)));
evalcond[1]=((((-1.0)*r22*x3685))+(((-1.0)*x3684*x3686))+((x3679*x3682)));
evalcond[2]=((((-1.0)*r12*x3685))+((r11*x3687))+(((-1.0)*x3681*x3686)));
evalcond[3]=((-1.0)+((r01*x3687))+(((-1.0)*x3680*x3686))+(((-1.0)*r02*x3685)));
evalcond[4]=(((x3678*x3682))+((sj1*sj2))+(((-1.0)*cj1*x3683))+(((-1.0)*x3684*x3685))+((r22*x3679)));
evalcond[5]=(((r12*x3679))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3683))+((r11*x3688))+(((-1.0)*x3681*x3685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3689=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3689.valid){
continue;
}
CheckValue<IkReal> x3690 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3689.value)))+(x3690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3691=IKcos(j4);
IkReal x3692=IKsin(j4);
IkReal x3693=(cj5*r00);
IkReal x3694=(cj5*r10);
IkReal x3695=(r21*sj5);
IkReal x3696=((1.0)*cj2);
IkReal x3697=(cj5*r20);
IkReal x3698=((1.0)*x3691);
IkReal x3699=((1.0)*x3692);
IkReal x3700=(sj5*x3692);
IkReal x3701=(sj5*x3691);
evalcond[0]=(((r01*x3701))+((r02*x3692))+(((-1.0)*x3693*x3698)));
evalcond[1]=((((-1.0)*r22*x3698))+((x3692*x3695))+(((-1.0)*x3697*x3699)));
evalcond[2]=(((r11*x3700))+(((-1.0)*r12*x3698))+(((-1.0)*x3694*x3699)));
evalcond[3]=((-1.0)+((r01*x3700))+(((-1.0)*r02*x3698))+(((-1.0)*x3693*x3699)));
evalcond[4]=((((-1.0)*cj1*x3696))+((sj1*sj2))+((r22*x3692))+(((-1.0)*x3697*x3698))+((x3691*x3695)));
evalcond[5]=((((-1.0)*sj1*x3696))+((r11*x3701))+(((-1.0)*cj1*sj2))+(((-1.0)*x3694*x3698))+((r12*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3703 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3703)==0){
continue;
}
IkReal x3702=pow(x3703,-0.5);
CheckValue<IkReal> x3704 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3704.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3704.value));
IkReal gconst109=((-1.0)*r11*x3702);
IkReal gconst110=(r10*x3702);
CheckValue<IkReal> x3705 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3705.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3705.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3708 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3708.valid){
continue;
}
IkReal x3706=((-1.0)*(x3708.value));
IkReal x3707=x3702;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3706;
IkReal gconst108=x3706;
IkReal gconst109=((-1.0)*r11*x3707);
IkReal gconst110=(r10*x3707);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3709=((1.0)*gconst110);
CheckValue<IkReal> x3710 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x3709))+((gconst109*r11*sj0))+(((-1.0)*r10*sj0*x3709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3710.valid){
continue;
}
CheckValue<IkReal> x3711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3709))+(((-1.0)*gconst109*r20)))),-1);
if(!x3711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3710.value)+(((1.5707963267949)*(x3711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3712=IKsin(j4);
IkReal x3713=IKcos(j4);
IkReal x3714=(gconst109*r21);
IkReal x3715=(cj2*sj1);
IkReal x3716=(cj1*sj2);
IkReal x3717=((1.0)*x3713);
IkReal x3718=(gconst109*x3712);
IkReal x3719=(gconst109*x3713);
IkReal x3720=((1.0)*gconst110*x3712);
evalcond[0]=((((-1.0)*r20*x3720))+((x3712*x3714))+(((-1.0)*r22*x3717)));
evalcond[1]=(sj0+(((-1.0)*r02*x3717))+(((-1.0)*r00*x3720))+((r01*x3718)));
evalcond[2]=(((r11*x3718))+(((-1.0)*r12*x3717))+(((-1.0)*r10*x3720))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3717))+((r22*x3712))+((x3713*x3714)));
evalcond[4]=((((-1.0)*gconst110*r00*x3717))+((r01*x3719))+((cj0*x3715))+((cj0*x3716))+((r02*x3712)));
evalcond[5]=(((r11*x3719))+(((-1.0)*gconst110*r10*x3717))+((sj0*x3715))+((sj0*x3716))+((r12*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x3721.valid){
continue;
}
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3721.value)))+(x3722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3723=IKsin(j4);
IkReal x3724=IKcos(j4);
IkReal x3725=(gconst109*r21);
IkReal x3726=(cj2*sj1);
IkReal x3727=(cj1*sj2);
IkReal x3728=((1.0)*x3724);
IkReal x3729=(gconst109*x3723);
IkReal x3730=(gconst109*x3724);
IkReal x3731=((1.0)*gconst110*x3723);
evalcond[0]=((((-1.0)*r22*x3728))+(((-1.0)*r20*x3731))+((x3723*x3725)));
evalcond[1]=(sj0+((r01*x3729))+(((-1.0)*r00*x3731))+(((-1.0)*r02*x3728)));
evalcond[2]=((((-1.0)*r12*x3728))+((r11*x3729))+(((-1.0)*r10*x3731))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3723))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3724*x3725))+(((-1.0)*gconst110*r20*x3728)));
evalcond[4]=(((r01*x3730))+(((-1.0)*gconst110*r00*x3728))+((r02*x3723))+((cj0*x3727))+((cj0*x3726)));
evalcond[5]=((((-1.0)*gconst110*r10*x3728))+((r11*x3730))+((sj0*x3727))+((sj0*x3726))+((r12*x3723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3733 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3733)==0){
continue;
}
IkReal x3732=pow(x3733,-0.5);
CheckValue<IkReal> x3734 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3734.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3734.value))));
IkReal gconst112=((1.0)*r11*x3732);
IkReal gconst113=((-1.0)*r10*x3732);
CheckValue<IkReal> x3735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3735.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3735.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
IkReal x3736=((1.0)*(x3738.value));
IkReal x3737=x3732;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3736)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3736)));
IkReal gconst112=((1.0)*r11*x3737);
IkReal gconst113=((-1.0)*r10*x3737);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3741 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3741.valid){
continue;
}
IkReal x3739=((1.0)*(x3741.value));
IkReal x3740=x3732;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3739)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3739)));
IkReal gconst112=((1.0)*r11*x3740);
IkReal gconst113=((-1.0)*r10*x3740);
IkReal x3742=r12*r12;
IkReal x3743=(cj0*r02);
IkReal x3744=x3732;
IkReal x3745=(sj0*x3744);
j4eval[0]=((IKabs((x3743+((r12*sj0)))))+(IKabs((((x3742*x3745))+(((-1.0)*x3745))+((r12*x3743*x3744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3748 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3748.valid){
continue;
}
IkReal x3746=((1.0)*(x3748.value));
IkReal x3747=x3732;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3746)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3746)));
IkReal gconst112=((1.0)*r11*x3747);
IkReal gconst113=((-1.0)*r10*x3747);
IkReal x3749=r12*r12;
IkReal x3750=(sj1*sj2);
IkReal x3751=((1.0)+(((-1.0)*x3749)));
IkReal x3752=((1.0)*cj1*cj2);
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(x3751,-1);
if(!x3759.valid){
continue;
}
IkReal x3753=x3759.value;
CheckValue<IkReal> x3760=IKPowWithIntegerCheck(((-1.0)+x3749),-1);
if(!x3760.valid){
continue;
}
IkReal x3754=x3760.value;
IkReal x3755=((1.0)*x3753);
if((x3751) < -0.00001)
continue;
IkReal x3756=IKsqrt(x3751);
IkReal x3757=(r12*r22*x3754*x3756);
IkReal x3758=((((-2.0)*r10*r11*r20*r21*x3753))+(((-1.0)*x3755*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3755*(r10*r10)*(r20*r20))));
j4eval[0]=x3758;
j4eval[1]=((IKabs(((((-1.0)*x3752*x3757))+((x3750*x3757)))))+(IKabs(((((-1.0)*r22*x3752))+((r22*x3750))))));
j4eval[2]=IKsign(x3758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3761=(sj1*sj2);
IkReal x3762=(gconst112*r21);
IkReal x3763=(gconst113*r20);
IkReal x3764=(cj1*cj2);
CheckValue<IkReal> x3765=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3762*x3762)))+(((-1.0)*(x3763*x3763)))+(((2.0)*x3762*x3763)))),-1);
if(!x3765.valid){
continue;
}
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal((((r22*x3761))+(((-1.0)*r22*x3764)))),IkReal(((((-1.0)*x3762*x3764))+((x3761*x3762))+((x3763*x3764))+(((-1.0)*x3761*x3763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3765.value)))+(x3766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3767=IKsin(j4);
IkReal x3768=IKcos(j4);
IkReal x3769=(cj2*sj1);
IkReal x3770=(gconst113*r20);
IkReal x3771=(gconst112*r21);
IkReal x3772=(gconst113*r00);
IkReal x3773=(gconst113*r10);
IkReal x3774=(cj1*sj2);
IkReal x3775=((1.0)*x3768);
IkReal x3776=((1.0)*x3767);
IkReal x3777=(gconst112*x3768);
IkReal x3778=(gconst112*x3767);
evalcond[0]=((((-1.0)*r22*x3775))+((x3767*x3771))+(((-1.0)*x3770*x3776)));
evalcond[1]=(sj0+(((-1.0)*r02*x3775))+(((-1.0)*x3772*x3776))+((r01*x3778)));
evalcond[2]=((((-1.0)*x3773*x3776))+((r11*x3778))+(((-1.0)*cj0))+(((-1.0)*r12*x3775)));
evalcond[3]=(((r22*x3767))+((x3768*x3771))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3770*x3775)));
evalcond[4]=(((cj0*x3774))+((r02*x3767))+((cj0*x3769))+(((-1.0)*x3772*x3775))+((r01*x3777)));
evalcond[5]=((((-1.0)*x3773*x3775))+((sj0*x3774))+((sj0*x3769))+((r11*x3777))+((r12*x3767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3779=((1.0)*gconst113);
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*cj0*r00*x3779))+(((-1.0)*r10*sj0*x3779))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3779))+(((-1.0)*gconst112*r20)))),-1);
if(!x3781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3780.value)+(((1.5707963267949)*(x3781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3782=IKsin(j4);
IkReal x3783=IKcos(j4);
IkReal x3784=(cj2*sj1);
IkReal x3785=(gconst113*r20);
IkReal x3786=(gconst112*r21);
IkReal x3787=(gconst113*r00);
IkReal x3788=(gconst113*r10);
IkReal x3789=(cj1*sj2);
IkReal x3790=((1.0)*x3783);
IkReal x3791=((1.0)*x3782);
IkReal x3792=(gconst112*x3783);
IkReal x3793=(gconst112*x3782);
evalcond[0]=(((x3782*x3786))+(((-1.0)*r22*x3790))+(((-1.0)*x3785*x3791)));
evalcond[1]=(sj0+(((-1.0)*r02*x3790))+((r01*x3793))+(((-1.0)*x3787*x3791)));
evalcond[2]=((((-1.0)*r12*x3790))+((r11*x3793))+(((-1.0)*x3788*x3791))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3782))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3785*x3790))+((x3783*x3786)));
evalcond[4]=(((r02*x3782))+((cj0*x3789))+((cj0*x3784))+((r01*x3792))+(((-1.0)*x3787*x3790)));
evalcond[5]=(((r12*x3782))+((r11*x3792))+((sj0*x3784))+((sj0*x3789))+(((-1.0)*x3788*x3790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3794=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3794.value)))+(x3795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3796=IKsin(j4);
IkReal x3797=IKcos(j4);
IkReal x3798=(cj2*sj1);
IkReal x3799=(gconst113*r20);
IkReal x3800=(gconst112*r21);
IkReal x3801=(gconst113*r00);
IkReal x3802=(gconst113*r10);
IkReal x3803=(cj1*sj2);
IkReal x3804=((1.0)*x3797);
IkReal x3805=((1.0)*x3796);
IkReal x3806=(gconst112*x3797);
IkReal x3807=(gconst112*x3796);
evalcond[0]=(((x3796*x3800))+(((-1.0)*x3799*x3805))+(((-1.0)*r22*x3804)));
evalcond[1]=(((r01*x3807))+sj0+(((-1.0)*x3801*x3805))+(((-1.0)*r02*x3804)));
evalcond[2]=(((r11*x3807))+(((-1.0)*x3802*x3805))+(((-1.0)*r12*x3804))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3796))+((x3797*x3800))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3799*x3804)));
evalcond[4]=(((r01*x3806))+((cj0*x3798))+(((-1.0)*x3801*x3804))+((r02*x3796))+((cj0*x3803)));
evalcond[5]=(((r11*x3806))+(((-1.0)*x3802*x3804))+((sj0*x3798))+((r12*x3796))+((sj0*x3803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3808=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3808;
j4eval[1]=IKsign(x3808);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3809=((1.0)*cj5);
IkReal x3810=((((-1.0)*r21*x3809))+(((-1.0)*r20*sj5)));
j4eval[0]=x3810;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3809))))));
j4eval[2]=IKsign(x3810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3811=cj5*cj5;
IkReal x3812=r11*r11;
IkReal x3813=(r11*sj5);
IkReal x3814=(cj5*r10);
IkReal x3815=((r12*r12)+((x3811*(r10*r10)))+x3812+(((-2.0)*x3813*x3814))+(((-1.0)*x3811*x3812)));
j4eval[0]=x3815;
j4eval[1]=IKsign(x3815);
j4eval[2]=((IKabs(((((-1.0)*x3814))+x3813)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3816=cj5*cj5;
IkReal x3817=r11*r11;
IkReal x3818=(cj5*r10);
IkReal x3819=(r11*sj5);
CheckValue<IkReal> x3820 = IKatan2WithCheck(IkReal(((((-1.0)*x3818))+x3819)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3820.valid){
continue;
}
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3818*x3819))+((x3816*(r10*r10)))+x3817+(((-1.0)*x3816*x3817)))),-1);
if(!x3821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3820.value)+(((1.5707963267949)*(x3821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3822=IKcos(j4);
IkReal x3823=IKsin(j4);
IkReal x3824=(cj5*r00);
IkReal x3825=(cj5*r10);
IkReal x3826=(r21*sj5);
IkReal x3827=(cj5*r20);
IkReal x3828=((1.0)*x3822);
IkReal x3829=((1.0)*x3823);
IkReal x3830=(sj5*x3823);
IkReal x3831=(sj5*x3822);
evalcond[0]=(((r12*x3823))+(((-1.0)*x3825*x3828))+((r11*x3831)));
evalcond[1]=((((-1.0)*r22*x3828))+(((-1.0)*x3827*x3829))+((x3823*x3826)));
evalcond[2]=((((-1.0)*x3824*x3829))+(((-1.0)*r02*x3828))+((r01*x3830)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3828))+(((-1.0)*x3825*x3829))+((r11*x3830)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3824*x3828))+((cj1*sj2))+((r01*x3831))+((r02*x3823)));
evalcond[5]=((((-1.0)*x3827*x3828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3823))+((x3822*x3826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3832=((1.0)*cj5);
CheckValue<IkReal> x3833 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3833.valid){
continue;
}
CheckValue<IkReal> x3834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3832))+(((-1.0)*r20*sj5)))),-1);
if(!x3834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3833.value)+(((1.5707963267949)*(x3834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3835=IKcos(j4);
IkReal x3836=IKsin(j4);
IkReal x3837=(cj5*r00);
IkReal x3838=(cj5*r10);
IkReal x3839=(r21*sj5);
IkReal x3840=(cj5*r20);
IkReal x3841=((1.0)*x3835);
IkReal x3842=((1.0)*x3836);
IkReal x3843=(sj5*x3836);
IkReal x3844=(sj5*x3835);
evalcond[0]=(((r12*x3836))+(((-1.0)*x3838*x3841))+((r11*x3844)));
evalcond[1]=((((-1.0)*x3840*x3842))+((x3836*x3839))+(((-1.0)*r22*x3841)));
evalcond[2]=((((-1.0)*r02*x3841))+((r01*x3843))+(((-1.0)*x3837*x3842)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3841))+(((-1.0)*x3838*x3842))+((r11*x3843)));
evalcond[4]=(((cj2*sj1))+((r02*x3836))+((cj1*sj2))+((r01*x3844))+(((-1.0)*x3837*x3841)));
evalcond[5]=(((x3835*x3839))+(((-1.0)*x3840*x3841))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3845 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3845.valid){
continue;
}
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3845.value)+(((1.5707963267949)*(x3846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3847=IKcos(j4);
IkReal x3848=IKsin(j4);
IkReal x3849=(cj5*r00);
IkReal x3850=(cj5*r10);
IkReal x3851=(r21*sj5);
IkReal x3852=(cj5*r20);
IkReal x3853=((1.0)*x3847);
IkReal x3854=((1.0)*x3848);
IkReal x3855=(sj5*x3848);
IkReal x3856=(sj5*x3847);
evalcond[0]=(((r12*x3848))+((r11*x3856))+(((-1.0)*x3850*x3853)));
evalcond[1]=(((x3848*x3851))+(((-1.0)*x3852*x3854))+(((-1.0)*r22*x3853)));
evalcond[2]=(((r01*x3855))+(((-1.0)*r02*x3853))+(((-1.0)*x3849*x3854)));
evalcond[3]=((-1.0)+((r11*x3855))+(((-1.0)*x3850*x3854))+(((-1.0)*r12*x3853)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3856))+((r02*x3848))+(((-1.0)*x3849*x3853)));
evalcond[5]=(((x3847*x3851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3852*x3853))+((r22*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3857=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3857;
j4eval[1]=IKsign(x3857);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3858=((1.0)*cj5);
IkReal x3859=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3858)));
j4eval[0]=x3859;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3858))+((r21*sj5))))));
j4eval[2]=IKsign(x3859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3860=(sj1*sj2);
IkReal x3861=(cj5*r10);
IkReal x3862=(r11*sj5);
IkReal x3863=(cj1*cj2);
IkReal x3864=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3864;
j4eval[1]=((IKabs((((x3860*x3862))+(((-1.0)*x3860*x3861))+((x3861*x3863))+(((-1.0)*x3862*x3863)))))+(IKabs(((((-1.0)*r12*x3860))+((r12*x3863))))));
j4eval[2]=IKsign(x3864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3865=(sj1*sj2);
IkReal x3866=(cj5*r10);
IkReal x3867=(r11*sj5);
IkReal x3868=(cj1*cj2);
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3869.valid){
continue;
}
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal(((((-1.0)*x3867*x3868))+((x3866*x3868))+((x3865*x3867))+(((-1.0)*x3865*x3866)))),IkReal(((((-1.0)*r12*x3865))+((r12*x3868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3869.value)))+(x3870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3871=IKcos(j4);
IkReal x3872=IKsin(j4);
IkReal x3873=(cj5*r00);
IkReal x3874=(cj5*r10);
IkReal x3875=(r21*sj5);
IkReal x3876=((1.0)*cj2);
IkReal x3877=(cj5*r20);
IkReal x3878=((1.0)*x3871);
IkReal x3879=((1.0)*x3872);
IkReal x3880=(sj5*x3872);
IkReal x3881=(sj5*x3871);
evalcond[0]=(((r11*x3881))+(((-1.0)*x3874*x3878))+((r12*x3872)));
evalcond[1]=((((-1.0)*x3877*x3879))+((x3872*x3875))+(((-1.0)*r22*x3878)));
evalcond[2]=((((-1.0)*x3873*x3879))+(((-1.0)*r02*x3878))+((r01*x3880)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3878))+((r11*x3880))+(((-1.0)*x3874*x3879)));
evalcond[4]=((((-1.0)*x3877*x3878))+((x3871*x3875))+((sj1*sj2))+(((-1.0)*cj1*x3876))+((r22*x3872)));
evalcond[5]=((((-1.0)*x3873*x3878))+(((-1.0)*cj1*sj2))+((r01*x3881))+(((-1.0)*sj1*x3876))+((r02*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3882=((1.0)*cj5);
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3882)))),-1);
if(!x3883.valid){
continue;
}
CheckValue<IkReal> x3884 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3883.value)))+(x3884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3885=IKcos(j4);
IkReal x3886=IKsin(j4);
IkReal x3887=(cj5*r00);
IkReal x3888=(cj5*r10);
IkReal x3889=(r21*sj5);
IkReal x3890=((1.0)*cj2);
IkReal x3891=(cj5*r20);
IkReal x3892=((1.0)*x3885);
IkReal x3893=((1.0)*x3886);
IkReal x3894=(sj5*x3886);
IkReal x3895=(sj5*x3885);
evalcond[0]=(((r12*x3886))+((r11*x3895))+(((-1.0)*x3888*x3892)));
evalcond[1]=(((x3886*x3889))+(((-1.0)*r22*x3892))+(((-1.0)*x3891*x3893)));
evalcond[2]=(((r01*x3894))+(((-1.0)*x3887*x3893))+(((-1.0)*r02*x3892)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3892))+((r11*x3894))+(((-1.0)*x3888*x3893)));
evalcond[4]=(((r22*x3886))+((sj1*sj2))+(((-1.0)*x3891*x3892))+((x3885*x3889))+(((-1.0)*cj1*x3890)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3895))+((r02*x3886))+(((-1.0)*x3887*x3892))+(((-1.0)*sj1*x3890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3896=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3896.valid){
continue;
}
CheckValue<IkReal> x3897 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3896.value)))+(x3897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3898=IKcos(j4);
IkReal x3899=IKsin(j4);
IkReal x3900=(cj5*r00);
IkReal x3901=(cj5*r10);
IkReal x3902=(r21*sj5);
IkReal x3903=((1.0)*cj2);
IkReal x3904=(cj5*r20);
IkReal x3905=((1.0)*x3898);
IkReal x3906=((1.0)*x3899);
IkReal x3907=(sj5*x3899);
IkReal x3908=(sj5*x3898);
evalcond[0]=((((-1.0)*x3901*x3905))+((r12*x3899))+((r11*x3908)));
evalcond[1]=((((-1.0)*x3904*x3906))+(((-1.0)*r22*x3905))+((x3899*x3902)));
evalcond[2]=((((-1.0)*x3900*x3906))+((r01*x3907))+(((-1.0)*r02*x3905)));
evalcond[3]=((1.0)+(((-1.0)*x3901*x3906))+(((-1.0)*r12*x3905))+((r11*x3907)));
evalcond[4]=((((-1.0)*x3904*x3905))+((sj1*sj2))+(((-1.0)*cj1*x3903))+((x3898*x3902))+((r22*x3899)));
evalcond[5]=((((-1.0)*x3900*x3905))+(((-1.0)*sj1*x3903))+(((-1.0)*cj1*sj2))+((r01*x3908))+((r02*x3899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3909=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3909);
rxp0_2=(py*r00);
rxp1_0=(r21*x3909);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3910=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3910);
rxp0_2=(py*r00);
rxp1_0=(r21*x3910);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3911=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3911);
rxp0_2=(py*r00);
rxp1_0=(r21*x3911);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3914=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3914.valid){
continue;
}
IkReal x3912=x3914.value;
IkReal x3913=((1.0)*cj0*x3912);
cj4array[0]=((((-1.0)*cj2*sj1*x3913))+(((-1.0)*cj1*sj2*x3913)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3915=IKsin(j4);
IkReal x3916=IKcos(j4);
IkReal x3917=(r21*sj5);
IkReal x3918=((1.0)*x3916);
IkReal x3919=((1.0)*cj5*x3915);
evalcond[0]=(r12*x3915);
evalcond[1]=((((-1.0)*r12*x3918))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x3919))+((x3915*x3917)));
evalcond[3]=(((r01*sj5*x3915))+(((-1.0)*r00*x3919)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x3918))+((x3916*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3921=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3921.valid){
continue;
}
IkReal x3920=x3921.value;
cj4array[0]=(((cj1*cj2*x3920))+(((-1.0)*sj1*sj2*x3920)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3922=IKsin(j4);
IkReal x3923=IKcos(j4);
IkReal x3924=(r01*sj5);
IkReal x3925=((1.0)*cj5*r00);
evalcond[0]=(r12*x3922);
evalcond[1]=((((-1.0)*r12*x3923))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x3922))+((r21*sj5*x3922)));
evalcond[3]=((((-1.0)*x3922*x3925))+((x3922*x3924)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x3923*x3925))+((cj0*cj1*sj2))+((x3923*x3924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3926=IKPowWithIntegerCheck(r12,-1);
if(!x3926.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3926.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3927=IKsin(j4);
IkReal x3928=IKcos(j4);
IkReal x3929=(sj5*x3928);
IkReal x3930=(sj5*x3927);
IkReal x3931=((1.0)*cj5*x3927);
IkReal x3932=((1.0)*cj5*x3928);
evalcond[0]=(r12*x3927);
evalcond[1]=(((r21*x3930))+(((-1.0)*r20*x3931)));
evalcond[2]=(((r01*x3930))+(((-1.0)*r00*x3931)));
evalcond[3]=(((r21*x3929))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x3932)));
evalcond[4]=((((-1.0)*r00*x3932))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3933=((1.0)*cj5);
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3933))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
CheckValue<IkReal> x3935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3933))+(((-1.0)*r20*sj5)))),-1);
if(!x3935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3934.value)+(((1.5707963267949)*(x3935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3936=IKsin(j4);
IkReal x3937=IKcos(j4);
IkReal x3938=(cj5*r00);
IkReal x3939=(cj5*r10);
IkReal x3940=(cj2*sj1);
IkReal x3941=(r21*sj5);
IkReal x3942=(cj5*r20);
IkReal x3943=(cj1*sj2);
IkReal x3944=((1.0)*x3937);
IkReal x3945=((1.0)*x3936);
IkReal x3946=(sj5*x3936);
IkReal x3947=(sj5*x3937);
evalcond[0]=((((-1.0)*x3942*x3945))+(((-1.0)*r22*x3944))+((x3936*x3941)));
evalcond[1]=(((r01*x3946))+sj0+(((-1.0)*r02*x3944))+(((-1.0)*x3938*x3945)));
evalcond[2]=((((-1.0)*x3939*x3945))+(((-1.0)*r12*x3944))+(((-1.0)*cj0))+((r11*x3946)));
evalcond[3]=(((r22*x3936))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3942*x3944))+((x3937*x3941)));
evalcond[4]=(((r01*x3947))+((cj0*x3940))+((cj0*x3943))+(((-1.0)*x3938*x3944))+((r02*x3936)));
evalcond[5]=(((sj0*x3940))+((sj0*x3943))+(((-1.0)*x3939*x3944))+((r12*x3936))+((r11*x3947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3948=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3948.valid){
continue;
}
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3948.value)))+(x3949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3950=IKsin(j4);
IkReal x3951=IKcos(j4);
IkReal x3952=(cj5*r00);
IkReal x3953=(cj5*r10);
IkReal x3954=(cj2*sj1);
IkReal x3955=(r21*sj5);
IkReal x3956=(cj5*r20);
IkReal x3957=(cj1*sj2);
IkReal x3958=((1.0)*x3951);
IkReal x3959=((1.0)*x3950);
IkReal x3960=(sj5*x3950);
IkReal x3961=(sj5*x3951);
evalcond[0]=((((-1.0)*x3956*x3959))+(((-1.0)*r22*x3958))+((x3950*x3955)));
evalcond[1]=(sj0+(((-1.0)*x3952*x3959))+(((-1.0)*r02*x3958))+((r01*x3960)));
evalcond[2]=((((-1.0)*x3953*x3959))+((r11*x3960))+(((-1.0)*r12*x3958))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3956*x3958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3951*x3955))+((r22*x3950)));
evalcond[4]=(((cj0*x3954))+((cj0*x3957))+(((-1.0)*x3952*x3958))+((r02*x3950))+((r01*x3961)));
evalcond[5]=((((-1.0)*x3953*x3958))+((r11*x3961))+((sj0*x3957))+((sj0*x3954))+((r12*x3950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3962.valid){
continue;
}
CheckValue<IkReal> x3963 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3962.value)))+(x3963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3964=IKsin(j4);
IkReal x3965=IKcos(j4);
IkReal x3966=(cj5*r00);
IkReal x3967=(cj5*r10);
IkReal x3968=(cj2*sj1);
IkReal x3969=(r21*sj5);
IkReal x3970=(cj5*r20);
IkReal x3971=(cj1*sj2);
IkReal x3972=((1.0)*x3965);
IkReal x3973=((1.0)*x3964);
IkReal x3974=(sj5*x3964);
IkReal x3975=(sj5*x3965);
evalcond[0]=((((-1.0)*x3970*x3973))+((x3964*x3969))+(((-1.0)*r22*x3972)));
evalcond[1]=((((-1.0)*r02*x3972))+sj0+((r01*x3974))+(((-1.0)*x3966*x3973)));
evalcond[2]=((((-1.0)*r12*x3972))+((r11*x3974))+(((-1.0)*x3967*x3973))+(((-1.0)*cj0)));
evalcond[3]=(((x3965*x3969))+((r22*x3964))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3970*x3972)));
evalcond[4]=(((r02*x3964))+((r01*x3975))+((cj0*x3971))+((cj0*x3968))+(((-1.0)*x3966*x3972)));
evalcond[5]=(((r11*x3975))+((r12*x3964))+(((-1.0)*x3967*x3972))+((sj0*x3971))+((sj0*x3968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3976=r21*r21;
IkReal x3977=cj5*cj5;
IkReal x3978=(sj1*sj2);
IkReal x3979=(r21*sj5);
IkReal x3980=(cj1*cj2);
IkReal x3981=(cj5*r20);
CheckValue<IkReal> x3982=IKPowWithIntegerCheck(IKsign(((((2.0)*x3979*x3981))+(((-1.0)*x3977*(r20*r20)))+((x3976*x3977))+(((-1.0)*(r22*r22)))+(((-1.0)*x3976)))),-1);
if(!x3982.valid){
continue;
}
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3980))+((r22*x3978)))),IkReal((((x3978*x3979))+(((-1.0)*x3979*x3980))+((x3980*x3981))+(((-1.0)*x3978*x3981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3982.value)))+(x3983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3984=IKsin(j4);
IkReal x3985=IKcos(j4);
IkReal x3986=(r21*sj5);
IkReal x3987=(cj5*r20);
IkReal x3988=((1.0)*x3985);
evalcond[0]=(((x3984*x3986))+(((-1.0)*x3984*x3987))+(((-1.0)*r22*x3988)));
evalcond[1]=(((x3985*x3986))+(((-1.0)*cj1*cj2))+(((-1.0)*x3987*x3988))+((sj1*sj2))+((r22*x3984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3989=(cj5*sj4);
IkReal x3990=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x3990))+((r00*x3989))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3989))+((r11*x3990))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3990))+((r00*x3989))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x3989))+((r11*x3990))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x3990))+((r00*x3989))+((cj4*r02))), ((((-1.0)*r10*x3989))+((r11*x3990))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3991=IKcos(j0);
IkReal x3992=IKsin(j0);
IkReal x3993=(cj5*r01);
IkReal x3994=((1.0)*sj1);
IkReal x3995=(r11*sj5);
IkReal x3996=(cj1*cj2);
IkReal x3997=((1.0)*cj5);
IkReal x3998=(r10*sj5);
IkReal x3999=(r00*sj5);
IkReal x4000=((0.612)*cj1);
IkReal x4001=((1.0)*cj4);
IkReal x4002=(r01*sj5);
IkReal x4003=(sj2*x3992);
IkReal x4004=(sj1*x3991);
IkReal x4005=(sj2*x3991);
evalcond[0]=((((-1.0)*r02*x4001))+((sj4*x4002))+x3992+(((-1.0)*r00*sj4*x3997)));
evalcond[1]=(((sj4*x3995))+(((-1.0)*x3991))+(((-1.0)*r12*x4001))+(((-1.0)*r10*sj4*x3997)));
evalcond[2]=((((-1.0)*x3994*x4005))+(((-1.0)*x3993))+(((-1.0)*x3999))+((x3991*x3996)));
evalcond[3]=((((-1.0)*x3994*x4003))+(((-1.0)*r11*x3997))+(((-1.0)*x3998))+((x3992*x3996)));
evalcond[4]=(((cj1*x4005))+((r02*sj4))+((cj2*x4004))+(((-1.0)*cj4*r00*x3997))+((cj4*x4002)));
evalcond[5]=(((cj4*x3995))+((cj1*x4003))+((r12*sj4))+(((-1.0)*cj4*r10*x3997))+((cj2*sj1*x3992)));
evalcond[6]=((((0.5723)*sj2*x4004))+(((-1.0)*x3991*x4000))+(((-0.5723)*x3991*x3996))+(((-1.0)*px))+(((0.163941)*x3992))+(((-0.1157)*x3993))+(((-0.1157)*x3999)));
evalcond[7]=((((-1.0)*x3992*x4000))+(((-1.0)*py))+(((-0.163941)*x3991))+(((-0.5723)*x3992*x3996))+(((0.5723)*sj1*x4003))+(((-0.1157)*x3998))+(((-0.1157)*cj5*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4006=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4006.valid){
continue;
}
CheckValue<IkReal> x4007 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4007.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4006.value)))+(x4007.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4008=IKcos(j0);
IkReal x4009=IKsin(j0);
IkReal x4010=(cj5*r01);
IkReal x4011=(cj1*cj2);
IkReal x4012=(cj5*r11);
IkReal x4013=(r10*sj5);
IkReal x4014=(r00*sj5);
IkReal x4015=((0.612)*cj1);
IkReal x4016=(sj1*sj2*x4009);
IkReal x4017=(sj1*sj2*x4008);
evalcond[0]=((((-1.0)*x4014))+(((-1.0)*x4010))+(((-1.0)*x4017))+((x4008*x4011)));
evalcond[1]=((((-1.0)*x4016))+(((-1.0)*x4013))+(((-1.0)*x4012))+((x4009*x4011)));
evalcond[2]=((((-0.1157)*x4010))+(((-0.1157)*x4014))+(((0.163941)*x4009))+(((-0.5723)*x4008*x4011))+(((-1.0)*px))+(((0.5723)*x4017))+(((-1.0)*x4008*x4015)));
evalcond[3]=((((-0.1157)*x4012))+(((-0.1157)*x4013))+(((-0.5723)*x4009*x4011))+(((-1.0)*py))+(((0.5723)*x4016))+(((-0.163941)*x4008))+(((-1.0)*x4009*x4015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4018=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4018;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4019=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4019;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4019);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4020=((1.0)*cj5);
IkReal x4021=((((-1.0)*r21*x4020))+(((-1.0)*r20*sj5)));
j4eval[0]=x4021;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4020))+(((-1.0)*cj0*r00*x4020))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x4021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4022=((-1.0)*r20);
IkReal x4024 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4024)==0){
continue;
}
IkReal x4023=pow(x4024,-0.5);
CheckValue<IkReal> x4025 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4022),IKFAST_ATAN2_MAGTHRESH);
if(!x4025.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4025.value));
IkReal gconst97=(r21*x4023);
IkReal gconst98=(x4022*x4023);
CheckValue<IkReal> x4026 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4026.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4026.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4027=((-1.0)*r20);
IkReal x4028=x4023;
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4027),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
IkReal x4029=((-1.0)*(x4030.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4029;
IkReal gconst96=x4029;
IkReal gconst97=(r21*x4028);
IkReal gconst98=(x4027*x4028);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4031=((-1.0)*r20);
IkReal x4032=x4023;
CheckValue<IkReal> x4034 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4031),IKFAST_ATAN2_MAGTHRESH);
if(!x4034.valid){
continue;
}
IkReal x4033=((-1.0)*(x4034.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4033;
IkReal gconst96=x4033;
IkReal gconst97=(r21*x4032);
IkReal gconst98=(x4031*x4032);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4035=((-1.0)*r20);
IkReal x4036=x4023;
CheckValue<IkReal> x4038 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4035),IKFAST_ATAN2_MAGTHRESH);
if(!x4038.valid){
continue;
}
IkReal x4037=((-1.0)*(x4038.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4037;
IkReal gconst96=x4037;
IkReal gconst97=(r21*x4036);
IkReal gconst98=(x4035*x4036);
IkReal x4039=((1.0)*(r22*r22));
CheckValue<IkReal> x4043=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4039))),-1);
if(!x4043.valid){
continue;
}
IkReal x4040=x4043.value;
IkReal x4041=((1.0)*x4040);
IkReal x4042=((((-1.0)*x4041*(r20*r20*r20*r20)))+(((-1.0)*x4041*(r21*r21*r21*r21)))+(((-1.0)*x4039))+(((-2.0)*x4040*(r20*r20)*(r21*r21))));
j4eval[0]=x4042;
j4eval[1]=IKsign(x4042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4044=(cj1*cj2);
IkReal x4045=(gconst98*r20);
IkReal x4046=(sj1*sj2);
IkReal x4047=(gconst97*r21);
CheckValue<IkReal> x4048=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4045*x4045)))+(((-1.0)*(r22*r22)))+(((2.0)*x4045*x4047))+(((-1.0)*(x4047*x4047))))),-1);
if(!x4048.valid){
continue;
}
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal((((r22*x4046))+(((-1.0)*r22*x4044)))),IkReal(((((-1.0)*x4045*x4046))+((x4046*x4047))+((x4044*x4045))+(((-1.0)*x4044*x4047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4048.value)))+(x4049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4050=IKsin(j4);
IkReal x4051=IKcos(j4);
IkReal x4052=(gconst98*r10);
IkReal x4053=(gconst97*r21);
IkReal x4054=(cj2*sj1);
IkReal x4055=(gconst98*r20);
IkReal x4056=(gconst98*r00);
IkReal x4057=(cj1*sj2);
IkReal x4058=((1.0)*x4051);
IkReal x4059=((1.0)*x4050);
IkReal x4060=(gconst97*x4050);
IkReal x4061=(gconst97*x4051);
evalcond[0]=((((-1.0)*x4055*x4059))+((x4050*x4053))+(((-1.0)*r22*x4058)));
evalcond[1]=(sj0+(((-1.0)*r02*x4058))+((r01*x4060))+(((-1.0)*x4056*x4059)));
evalcond[2]=((((-1.0)*r12*x4058))+(((-1.0)*x4052*x4059))+((r11*x4060))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4055*x4058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4051*x4053))+((r22*x4050)));
evalcond[4]=(((r02*x4050))+((cj0*x4054))+((cj0*x4057))+((r01*x4061))+(((-1.0)*x4056*x4058)));
evalcond[5]=(((sj0*x4057))+((sj0*x4054))+(((-1.0)*x4052*x4058))+((r11*x4061))+((r12*x4050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4062 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
CheckValue<IkReal> x4063=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4062.value)+(((1.5707963267949)*(x4063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4064=IKsin(j4);
IkReal x4065=IKcos(j4);
IkReal x4066=(gconst98*r10);
IkReal x4067=(gconst97*r21);
IkReal x4068=(cj2*sj1);
IkReal x4069=(gconst98*r20);
IkReal x4070=(gconst98*r00);
IkReal x4071=(cj1*sj2);
IkReal x4072=((1.0)*x4065);
IkReal x4073=((1.0)*x4064);
IkReal x4074=(gconst97*x4064);
IkReal x4075=(gconst97*x4065);
evalcond[0]=((((-1.0)*x4069*x4073))+((x4064*x4067))+(((-1.0)*r22*x4072)));
evalcond[1]=((((-1.0)*x4070*x4073))+sj0+(((-1.0)*r02*x4072))+((r01*x4074)));
evalcond[2]=((((-1.0)*r12*x4072))+(((-1.0)*x4066*x4073))+((r11*x4074))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4069*x4072))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4065*x4067))+((r22*x4064)));
evalcond[4]=((((-1.0)*x4070*x4072))+((cj0*x4071))+((r02*x4064))+((r01*x4075))+((cj0*x4068)));
evalcond[5]=(((sj0*x4068))+((sj0*x4071))+((r12*x4064))+(((-1.0)*x4066*x4072))+((r11*x4075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4076 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4076.valid){
continue;
}
CheckValue<IkReal> x4077=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x4077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4076.value)+(((1.5707963267949)*(x4077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4078=IKsin(j4);
IkReal x4079=IKcos(j4);
IkReal x4080=(gconst98*r10);
IkReal x4081=(gconst97*r21);
IkReal x4082=(cj2*sj1);
IkReal x4083=(gconst98*r20);
IkReal x4084=(gconst98*r00);
IkReal x4085=(cj1*sj2);
IkReal x4086=((1.0)*x4079);
IkReal x4087=((1.0)*x4078);
IkReal x4088=(gconst97*x4078);
IkReal x4089=(gconst97*x4079);
evalcond[0]=((((-1.0)*x4083*x4087))+(((-1.0)*r22*x4086))+((x4078*x4081)));
evalcond[1]=(((r01*x4088))+sj0+(((-1.0)*r02*x4086))+(((-1.0)*x4084*x4087)));
evalcond[2]=((((-1.0)*r12*x4086))+((r11*x4088))+(((-1.0)*cj0))+(((-1.0)*x4080*x4087)));
evalcond[3]=(((x4079*x4081))+((r22*x4078))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4083*x4086)));
evalcond[4]=(((r01*x4089))+((cj0*x4085))+((cj0*x4082))+((r02*x4078))+(((-1.0)*x4084*x4086)));
evalcond[5]=(((r12*x4078))+((r11*x4089))+((sj0*x4085))+((sj0*x4082))+(((-1.0)*x4080*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4090=((-1.0)*r21);
IkReal x4092 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4092)==0){
continue;
}
IkReal x4091=pow(x4092,-0.5);
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(x4090),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4093.value))));
IkReal gconst100=(x4090*x4091);
IkReal gconst101=((1.0)*r20*x4091);
CheckValue<IkReal> x4094 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4094.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4094.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4095=((-1.0)*r21);
CheckValue<IkReal> x4098 = IKatan2WithCheck(IkReal(x4095),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4098.valid){
continue;
}
IkReal x4096=((1.0)*(x4098.value));
IkReal x4097=x4091;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4096)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4096)));
IkReal gconst100=(x4095*x4097);
IkReal gconst101=((1.0)*r20*x4097);
IkReal x4099=r22*r22;
IkReal x4100=((1.0)*x4099);
CheckValue<IkReal> x4104=IKPowWithIntegerCheck(((-1.0)+x4099),-1);
if(!x4104.valid){
continue;
}
IkReal x4101=x4104.value;
if((((1.0)+(((-1.0)*x4100)))) < -0.00001)
continue;
IkReal x4102=IKsqrt(((1.0)+(((-1.0)*x4100))));
IkReal x4103=(sj0*x4101*x4102);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4103+(((-1.0)*x4100*x4103))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4105=((-1.0)*r21);
CheckValue<IkReal> x4108 = IKatan2WithCheck(IkReal(x4105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4108.valid){
continue;
}
IkReal x4106=((1.0)*(x4108.value));
IkReal x4107=x4091;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4106)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4106)));
IkReal gconst100=(x4105*x4107);
IkReal gconst101=((1.0)*r20*x4107);
IkReal x4109=r22*r22;
IkReal x4110=((1.0)*x4109);
CheckValue<IkReal> x4114=IKPowWithIntegerCheck(((-1.0)+x4109),-1);
if(!x4114.valid){
continue;
}
IkReal x4111=x4114.value;
if((((1.0)+(((-1.0)*x4110)))) < -0.00001)
continue;
IkReal x4112=IKsqrt(((1.0)+(((-1.0)*x4110))));
IkReal x4113=(cj0*x4111*x4112);
j4eval[0]=((IKabs(((((-1.0)*x4110*x4113))+x4113)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4115=((-1.0)*r21);
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(x4115),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
IkReal x4116=((1.0)*(x4118.value));
IkReal x4117=x4091;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4116)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4116)));
IkReal gconst100=(x4115*x4117);
IkReal gconst101=((1.0)*r20*x4117);
IkReal x4119=r22*r22;
IkReal x4120=(cj0*r02);
IkReal x4121=(r12*sj0);
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(((-1.0)+x4119),-1);
if(!x4125.valid){
continue;
}
IkReal x4122=x4125.value;
if((((1.0)+(((-1.0)*x4119)))) < -0.00001)
continue;
IkReal x4123=IKsqrt(((1.0)+(((-1.0)*x4119))));
IkReal x4124=((1.0)*r22*x4122*x4123);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4121*x4124))+(((-1.0)*x4120*x4124)))))+(IKabs((x4121+x4120))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4126=((1.0)*gconst101);
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4126))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*r10*sj0*x4126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
CheckValue<IkReal> x4128=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x4126)))),-1);
if(!x4128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4127.value)+(((1.5707963267949)*(x4128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4129=IKsin(j4);
IkReal x4130=IKcos(j4);
IkReal x4131=(cj2*sj1);
IkReal x4132=(gconst101*r20);
IkReal x4133=(gconst101*r10);
IkReal x4134=(gconst101*r00);
IkReal x4135=(cj1*sj2);
IkReal x4136=((1.0)*x4130);
IkReal x4137=((1.0)*x4129);
IkReal x4138=(gconst100*x4129);
IkReal x4139=(gconst100*x4130);
evalcond[0]=(((r21*x4138))+(((-1.0)*r22*x4136))+(((-1.0)*x4132*x4137)));
evalcond[1]=(sj0+(((-1.0)*x4134*x4137))+((r01*x4138))+(((-1.0)*r02*x4136)));
evalcond[2]=(((r11*x4138))+(((-1.0)*x4133*x4137))+(((-1.0)*r12*x4136))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4139))+((r22*x4129))+(((-1.0)*x4132*x4136)));
evalcond[4]=(((r02*x4129))+(((-1.0)*x4134*x4136))+((r01*x4139))+((cj0*x4131))+((cj0*x4135)));
evalcond[5]=(((r12*x4129))+((r11*x4139))+(((-1.0)*x4133*x4136))+((sj0*x4135))+((sj0*x4131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4140 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4140.valid){
continue;
}
CheckValue<IkReal> x4141=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4140.value)+(((1.5707963267949)*(x4141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4142=IKsin(j4);
IkReal x4143=IKcos(j4);
IkReal x4144=(cj2*sj1);
IkReal x4145=(gconst101*r20);
IkReal x4146=(gconst101*r10);
IkReal x4147=(gconst101*r00);
IkReal x4148=(cj1*sj2);
IkReal x4149=((1.0)*x4143);
IkReal x4150=((1.0)*x4142);
IkReal x4151=(gconst100*x4142);
IkReal x4152=(gconst100*x4143);
evalcond[0]=(((r21*x4151))+(((-1.0)*x4145*x4150))+(((-1.0)*r22*x4149)));
evalcond[1]=(sj0+(((-1.0)*r02*x4149))+(((-1.0)*x4147*x4150))+((r01*x4151)));
evalcond[2]=((((-1.0)*x4146*x4150))+((r11*x4151))+(((-1.0)*r12*x4149))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4152))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4142))+(((-1.0)*x4145*x4149)));
evalcond[4]=(((r02*x4142))+(((-1.0)*x4147*x4149))+((r01*x4152))+((cj0*x4148))+((cj0*x4144)));
evalcond[5]=((((-1.0)*x4146*x4149))+((r12*x4142))+((sj0*x4148))+((sj0*x4144))+((r11*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4153.valid){
continue;
}
CheckValue<IkReal> x4154 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4153.value)))+(x4154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4155=IKsin(j4);
IkReal x4156=IKcos(j4);
IkReal x4157=(cj2*sj1);
IkReal x4158=(gconst101*r20);
IkReal x4159=(gconst101*r10);
IkReal x4160=(gconst101*r00);
IkReal x4161=(cj1*sj2);
IkReal x4162=((1.0)*x4156);
IkReal x4163=((1.0)*x4155);
IkReal x4164=(gconst100*x4155);
IkReal x4165=(gconst100*x4156);
evalcond[0]=((((-1.0)*x4158*x4163))+((r21*x4164))+(((-1.0)*r22*x4162)));
evalcond[1]=(((r01*x4164))+(((-1.0)*r02*x4162))+sj0+(((-1.0)*x4160*x4163)));
evalcond[2]=((((-1.0)*x4159*x4163))+(((-1.0)*r12*x4162))+((r11*x4164))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4155))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4158*x4162))+((r21*x4165)));
evalcond[4]=(((r01*x4165))+((r02*x4155))+(((-1.0)*x4160*x4162))+((cj0*x4161))+((cj0*x4157)));
evalcond[5]=((((-1.0)*x4159*x4162))+((r12*x4155))+((sj0*x4157))+((r11*x4165))+((sj0*x4161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4167 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4167)==0){
continue;
}
IkReal x4166=pow(x4167,-0.5);
CheckValue<IkReal> x4168 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4168.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4168.value));
IkReal gconst103=((-1.0)*r01*x4166);
IkReal gconst104=(r00*x4166);
CheckValue<IkReal> x4169 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4169.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4172 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4172.valid){
continue;
}
IkReal x4170=((-1.0)*(x4172.value));
IkReal x4171=x4166;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4170;
IkReal gconst102=x4170;
IkReal gconst103=((-1.0)*r01*x4171);
IkReal gconst104=(r00*x4171);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4173=((1.0)*gconst104);
CheckValue<IkReal> x4174 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4173))+((cj0*gconst103*r01))+((gconst103*r11*sj0))+(((-1.0)*r10*sj0*x4173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4174.valid){
continue;
}
CheckValue<IkReal> x4175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x4173)))),-1);
if(!x4175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4174.value)+(((1.5707963267949)*(x4175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4176=IKsin(j4);
IkReal x4177=IKcos(j4);
IkReal x4178=(gconst103*r11);
IkReal x4179=(cj2*sj1);
IkReal x4180=(gconst104*r10);
IkReal x4181=(gconst104*r20);
IkReal x4182=(gconst104*r00);
IkReal x4183=(cj1*sj2);
IkReal x4184=((1.0)*x4177);
IkReal x4185=(gconst103*x4177);
IkReal x4186=(gconst103*x4176);
IkReal x4187=((1.0)*x4176);
evalcond[0]=((((-1.0)*x4181*x4187))+((r21*x4186))+(((-1.0)*r22*x4184)));
evalcond[1]=(sj0+(((-1.0)*r02*x4184))+((r01*x4186))+(((-1.0)*x4182*x4187)));
evalcond[2]=((((-1.0)*r12*x4184))+(((-1.0)*x4180*x4187))+((x4176*x4178))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4181*x4184))+((r21*x4185))+((r22*x4176))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*x4179))+((r01*x4185))+(((-1.0)*x4182*x4184))+((r02*x4176))+((cj0*x4183)));
evalcond[5]=((((-1.0)*x4180*x4184))+((sj0*x4183))+((r12*x4176))+((x4177*x4178))+((sj0*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4188.valid){
continue;
}
CheckValue<IkReal> x4189=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x4189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4188.value)+(((1.5707963267949)*(x4189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4190=IKsin(j4);
IkReal x4191=IKcos(j4);
IkReal x4192=(gconst103*r11);
IkReal x4193=(cj2*sj1);
IkReal x4194=(gconst104*r10);
IkReal x4195=(gconst104*r20);
IkReal x4196=(gconst104*r00);
IkReal x4197=(cj1*sj2);
IkReal x4198=((1.0)*x4191);
IkReal x4199=(gconst103*x4191);
IkReal x4200=(gconst103*x4190);
IkReal x4201=((1.0)*x4190);
evalcond[0]=((((-1.0)*x4195*x4201))+((r21*x4200))+(((-1.0)*r22*x4198)));
evalcond[1]=(sj0+((r01*x4200))+(((-1.0)*r02*x4198))+(((-1.0)*x4196*x4201)));
evalcond[2]=((((-1.0)*r12*x4198))+(((-1.0)*x4194*x4201))+((x4190*x4192))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4195*x4198))+((r21*x4199))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4190)));
evalcond[4]=(((cj0*x4197))+((cj0*x4193))+((r02*x4190))+(((-1.0)*x4196*x4198))+((r01*x4199)));
evalcond[5]=((((-1.0)*x4194*x4198))+((r12*x4190))+((sj0*x4193))+((sj0*x4197))+((x4191*x4192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4203 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4203)==0){
continue;
}
IkReal x4202=pow(x4203,-0.5);
CheckValue<IkReal> x4204 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4204.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4204.value))));
IkReal gconst106=((1.0)*r01*x4202);
IkReal gconst107=((-1.0)*r00*x4202);
CheckValue<IkReal> x4205 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4205.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4208 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4208.valid){
continue;
}
IkReal x4206=((1.0)*(x4208.value));
IkReal x4207=x4202;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4206)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4206)));
IkReal gconst106=((1.0)*r01*x4207);
IkReal gconst107=((-1.0)*r00*x4207);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4211 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4211.valid){
continue;
}
IkReal x4209=((1.0)*(x4211.value));
IkReal x4210=x4202;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4209)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4209)));
IkReal gconst106=((1.0)*r01*x4210);
IkReal gconst107=((-1.0)*r00*x4210);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4214 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4214.valid){
continue;
}
IkReal x4212=((1.0)*(x4214.value));
IkReal x4213=x4202;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4212)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4212)));
IkReal gconst106=((1.0)*r01*x4213);
IkReal gconst107=((-1.0)*r00*x4213);
IkReal x4215=r02*r02;
IkReal x4216=(r12*sj0);
IkReal x4217=x4202;
IkReal x4218=(cj0*x4217);
j4eval[0]=((IKabs((((x4215*x4218))+(((-1.0)*x4218))+((r02*x4216*x4217)))))+(IKabs((x4216+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4219=((1.0)*gconst107);
CheckValue<IkReal> x4220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4219))+(((-1.0)*gconst106*r20)))),-1);
if(!x4220.valid){
continue;
}
CheckValue<IkReal> x4221 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x4219))+((cj0*gconst106*r01))+((gconst106*r11*sj0))+(((-1.0)*cj0*r00*x4219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4220.value)))+(x4221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4222=IKsin(j4);
IkReal x4223=IKcos(j4);
IkReal x4224=(gconst107*r10);
IkReal x4225=(gconst107*r00);
IkReal x4226=(gconst107*r20);
IkReal x4227=(cj2*sj1);
IkReal x4228=(cj1*sj2);
IkReal x4229=((1.0)*x4223);
IkReal x4230=(gconst106*x4223);
IkReal x4231=(gconst106*x4222);
IkReal x4232=((1.0)*x4222);
evalcond[0]=((((-1.0)*x4226*x4232))+(((-1.0)*r22*x4229))+((r21*x4231)));
evalcond[1]=(sj0+((r01*x4231))+(((-1.0)*r02*x4229))+(((-1.0)*x4225*x4232)));
evalcond[2]=((((-1.0)*x4224*x4232))+(((-1.0)*r12*x4229))+((r11*x4231))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4226*x4229))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4222))+((r21*x4230)));
evalcond[4]=(((r01*x4230))+((r02*x4222))+(((-1.0)*x4225*x4229))+((cj0*x4228))+((cj0*x4227)));
evalcond[5]=((((-1.0)*x4224*x4229))+((sj0*x4228))+((sj0*x4227))+((r11*x4230))+((r12*x4222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
CheckValue<IkReal> x4234=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4233.value)+(((1.5707963267949)*(x4234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4235=IKsin(j4);
IkReal x4236=IKcos(j4);
IkReal x4237=(gconst107*r10);
IkReal x4238=(gconst107*r00);
IkReal x4239=(gconst107*r20);
IkReal x4240=(cj2*sj1);
IkReal x4241=(cj1*sj2);
IkReal x4242=((1.0)*x4236);
IkReal x4243=(gconst106*x4236);
IkReal x4244=(gconst106*x4235);
IkReal x4245=((1.0)*x4235);
evalcond[0]=((((-1.0)*r22*x4242))+(((-1.0)*x4239*x4245))+((r21*x4244)));
evalcond[1]=(sj0+((r01*x4244))+(((-1.0)*x4238*x4245))+(((-1.0)*r02*x4242)));
evalcond[2]=((((-1.0)*r12*x4242))+(((-1.0)*x4237*x4245))+(((-1.0)*cj0))+((r11*x4244)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4235))+(((-1.0)*x4239*x4242))+((r21*x4243)));
evalcond[4]=(((r01*x4243))+((r02*x4235))+(((-1.0)*x4238*x4242))+((cj0*x4241))+((cj0*x4240)));
evalcond[5]=(((r12*x4235))+((sj0*x4241))+((sj0*x4240))+(((-1.0)*x4237*x4242))+((r11*x4243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4246=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x4246.valid){
continue;
}
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4246.value)))+(x4247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4248=IKsin(j4);
IkReal x4249=IKcos(j4);
IkReal x4250=(gconst107*r10);
IkReal x4251=(gconst107*r00);
IkReal x4252=(gconst107*r20);
IkReal x4253=(cj2*sj1);
IkReal x4254=(cj1*sj2);
IkReal x4255=((1.0)*x4249);
IkReal x4256=(gconst106*x4249);
IkReal x4257=(gconst106*x4248);
IkReal x4258=((1.0)*x4248);
evalcond[0]=((((-1.0)*x4252*x4258))+(((-1.0)*r22*x4255))+((r21*x4257)));
evalcond[1]=(sj0+(((-1.0)*x4251*x4258))+((r01*x4257))+(((-1.0)*r02*x4255)));
evalcond[2]=(((r11*x4257))+(((-1.0)*cj0))+(((-1.0)*x4250*x4258))+(((-1.0)*r12*x4255)));
evalcond[3]=((((-1.0)*x4252*x4255))+((r22*x4248))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4256)));
evalcond[4]=(((cj0*x4253))+((cj0*x4254))+(((-1.0)*x4251*x4255))+((r01*x4256))+((r02*x4248)));
evalcond[5]=(((r11*x4256))+((sj0*x4253))+((sj0*x4254))+((r12*x4248))+(((-1.0)*x4250*x4255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4259=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4259;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4260=((1.0)*cj5);
IkReal x4261=((((-1.0)*r21*x4260))+(((-1.0)*r20*sj5)));
j4eval[0]=x4261;
j4eval[1]=((IKabs(((((-1.0)*r10*x4260))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4262=cj5*cj5;
IkReal x4263=r01*r01;
IkReal x4264=(r01*sj5);
IkReal x4265=(cj5*r00);
IkReal x4266=((((-1.0)*(r02*r02)))+(((2.0)*x4264*x4265))+((x4262*x4263))+(((-1.0)*x4262*(r00*r00)))+(((-1.0)*x4263)));
j4eval[0]=x4266;
j4eval[1]=IKsign(x4266);
j4eval[2]=((IKabs(r02))+(IKabs((x4264+(((-1.0)*x4265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4267=cj5*cj5;
IkReal x4268=r01*r01;
IkReal x4269=(r01*sj5);
IkReal x4270=(cj5*r00);
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal((x4269+(((-1.0)*x4270)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(IKsign((((x4267*x4268))+(((-1.0)*(r02*r02)))+(((-1.0)*x4267*(r00*r00)))+(((2.0)*x4269*x4270))+(((-1.0)*x4268)))),-1);
if(!x4272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4271.value)+(((1.5707963267949)*(x4272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4273=IKcos(j4);
IkReal x4274=IKsin(j4);
IkReal x4275=(cj5*r00);
IkReal x4276=(cj5*r10);
IkReal x4277=(r21*sj5);
IkReal x4278=(cj5*r20);
IkReal x4279=((1.0)*x4273);
IkReal x4280=((1.0)*x4274);
IkReal x4281=(sj5*x4274);
IkReal x4282=(sj5*x4273);
evalcond[0]=(((r02*x4274))+(((-1.0)*x4275*x4279))+((r01*x4282)));
evalcond[1]=(((x4274*x4277))+(((-1.0)*r22*x4279))+(((-1.0)*x4278*x4280)));
evalcond[2]=((((-1.0)*r12*x4279))+((r11*x4281))+(((-1.0)*x4276*x4280)));
evalcond[3]=((1.0)+(((-1.0)*x4275*x4280))+(((-1.0)*r02*x4279))+((r01*x4281)));
evalcond[4]=(((cj2*sj1))+((r11*x4282))+((r12*x4274))+((cj1*sj2))+(((-1.0)*x4276*x4279)));
evalcond[5]=((((-1.0)*x4278*x4279))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4273*x4277))+((r22*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4283=((1.0)*cj5);
CheckValue<IkReal> x4284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4283))+(((-1.0)*r20*sj5)))),-1);
if(!x4284.valid){
continue;
}
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4283))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4284.value)))+(x4285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4286=IKcos(j4);
IkReal x4287=IKsin(j4);
IkReal x4288=(cj5*r00);
IkReal x4289=(cj5*r10);
IkReal x4290=(r21*sj5);
IkReal x4291=(cj5*r20);
IkReal x4292=((1.0)*x4286);
IkReal x4293=((1.0)*x4287);
IkReal x4294=(sj5*x4287);
IkReal x4295=(sj5*x4286);
evalcond[0]=((((-1.0)*x4288*x4292))+((r01*x4295))+((r02*x4287)));
evalcond[1]=((((-1.0)*r22*x4292))+(((-1.0)*x4291*x4293))+((x4287*x4290)));
evalcond[2]=((((-1.0)*x4289*x4293))+(((-1.0)*r12*x4292))+((r11*x4294)));
evalcond[3]=((1.0)+(((-1.0)*x4288*x4293))+((r01*x4294))+(((-1.0)*r02*x4292)));
evalcond[4]=(((cj2*sj1))+((r12*x4287))+(((-1.0)*x4289*x4292))+((cj1*sj2))+((r11*x4295)));
evalcond[5]=(((r22*x4287))+(((-1.0)*x4291*x4292))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4286*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4296 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4296.valid){
continue;
}
CheckValue<IkReal> x4297=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4296.value)+(((1.5707963267949)*(x4297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4298=IKcos(j4);
IkReal x4299=IKsin(j4);
IkReal x4300=(cj5*r00);
IkReal x4301=(cj5*r10);
IkReal x4302=(r21*sj5);
IkReal x4303=(cj5*r20);
IkReal x4304=((1.0)*x4298);
IkReal x4305=((1.0)*x4299);
IkReal x4306=(sj5*x4299);
IkReal x4307=(sj5*x4298);
evalcond[0]=(((r01*x4307))+(((-1.0)*x4300*x4304))+((r02*x4299)));
evalcond[1]=((((-1.0)*r22*x4304))+(((-1.0)*x4303*x4305))+((x4299*x4302)));
evalcond[2]=((((-1.0)*r12*x4304))+((r11*x4306))+(((-1.0)*x4301*x4305)));
evalcond[3]=((1.0)+((r01*x4306))+(((-1.0)*r02*x4304))+(((-1.0)*x4300*x4305)));
evalcond[4]=(((cj2*sj1))+((r11*x4307))+((cj1*sj2))+((r12*x4299))+(((-1.0)*x4301*x4304)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4303*x4304))+((x4298*x4302))+((r22*x4299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4308=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4308;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4309=((1.0)*cj5);
IkReal x4310=((((-1.0)*r11*x4309))+(((-1.0)*r10*sj5)));
j4eval[0]=x4310;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4309)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4311=cj5*cj5;
IkReal x4312=r01*r01;
IkReal x4313=(cj5*r00);
IkReal x4314=(r01*sj5);
IkReal x4315=(((x4311*(r00*r00)))+(((-2.0)*x4313*x4314))+x4312+(r02*r02)+(((-1.0)*x4311*x4312)));
j4eval[0]=x4315;
j4eval[1]=IKsign(x4315);
j4eval[2]=((IKabs(r02))+(IKabs((x4314+(((-1.0)*x4313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4316=cj5*cj5;
IkReal x4317=r01*r01;
IkReal x4318=(r01*sj5);
IkReal x4319=(cj5*r00);
CheckValue<IkReal> x4320 = IKatan2WithCheck(IkReal((x4318+(((-1.0)*x4319)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4320.valid){
continue;
}
CheckValue<IkReal> x4321=IKPowWithIntegerCheck(IKsign((((x4316*(r00*r00)))+(((-2.0)*x4318*x4319))+(((-1.0)*x4316*x4317))+x4317+(r02*r02))),-1);
if(!x4321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4320.value)+(((1.5707963267949)*(x4321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4322=IKcos(j4);
IkReal x4323=IKsin(j4);
IkReal x4324=(cj5*r00);
IkReal x4325=(cj5*r10);
IkReal x4326=(r21*sj5);
IkReal x4327=((1.0)*cj2);
IkReal x4328=(cj5*r20);
IkReal x4329=((1.0)*x4322);
IkReal x4330=((1.0)*x4323);
IkReal x4331=(sj5*x4323);
IkReal x4332=(sj5*x4322);
evalcond[0]=(((r01*x4332))+(((-1.0)*x4324*x4329))+((r02*x4323)));
evalcond[1]=((((-1.0)*r22*x4329))+((x4323*x4326))+(((-1.0)*x4328*x4330)));
evalcond[2]=((((-1.0)*x4325*x4330))+(((-1.0)*r12*x4329))+((r11*x4331)));
evalcond[3]=((-1.0)+((r01*x4331))+(((-1.0)*r02*x4329))+(((-1.0)*x4324*x4330)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4327))+((x4322*x4326))+(((-1.0)*x4328*x4329))+((r22*x4323)));
evalcond[5]=((((-1.0)*sj1*x4327))+(((-1.0)*x4325*x4329))+(((-1.0)*cj1*sj2))+((r12*x4323))+((r11*x4332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4333=((1.0)*cj5);
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4333)))),-1);
if(!x4334.valid){
continue;
}
CheckValue<IkReal> x4335 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4333))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4334.value)))+(x4335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4336=IKcos(j4);
IkReal x4337=IKsin(j4);
IkReal x4338=(cj5*r00);
IkReal x4339=(cj5*r10);
IkReal x4340=(r21*sj5);
IkReal x4341=((1.0)*cj2);
IkReal x4342=(cj5*r20);
IkReal x4343=((1.0)*x4336);
IkReal x4344=((1.0)*x4337);
IkReal x4345=(sj5*x4337);
IkReal x4346=(sj5*x4336);
evalcond[0]=((((-1.0)*x4338*x4343))+((r02*x4337))+((r01*x4346)));
evalcond[1]=((((-1.0)*x4342*x4344))+((x4337*x4340))+(((-1.0)*r22*x4343)));
evalcond[2]=((((-1.0)*x4339*x4344))+(((-1.0)*r12*x4343))+((r11*x4345)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4343))+(((-1.0)*x4338*x4344))+((r01*x4345)));
evalcond[4]=((((-1.0)*x4342*x4343))+((sj1*sj2))+((x4336*x4340))+((r22*x4337))+(((-1.0)*cj1*x4341)));
evalcond[5]=((((-1.0)*x4339*x4343))+(((-1.0)*cj1*sj2))+((r12*x4337))+(((-1.0)*sj1*x4341))+((r11*x4346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4347.valid){
continue;
}
CheckValue<IkReal> x4348 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4347.value)))+(x4348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4349=IKcos(j4);
IkReal x4350=IKsin(j4);
IkReal x4351=(cj5*r00);
IkReal x4352=(cj5*r10);
IkReal x4353=(r21*sj5);
IkReal x4354=((1.0)*cj2);
IkReal x4355=(cj5*r20);
IkReal x4356=((1.0)*x4349);
IkReal x4357=((1.0)*x4350);
IkReal x4358=(sj5*x4350);
IkReal x4359=(sj5*x4349);
evalcond[0]=(((r02*x4350))+(((-1.0)*x4351*x4356))+((r01*x4359)));
evalcond[1]=(((x4350*x4353))+(((-1.0)*x4355*x4357))+(((-1.0)*r22*x4356)));
evalcond[2]=((((-1.0)*r12*x4356))+(((-1.0)*x4352*x4357))+((r11*x4358)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4356))+(((-1.0)*x4351*x4357))+((r01*x4358)));
evalcond[4]=(((r22*x4350))+((sj1*sj2))+((x4349*x4353))+(((-1.0)*cj1*x4354))+(((-1.0)*x4355*x4356)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4352*x4356))+((r12*x4350))+((r11*x4359))+(((-1.0)*sj1*x4354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4361 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4361)==0){
continue;
}
IkReal x4360=pow(x4361,-0.5);
CheckValue<IkReal> x4362 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4362.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4362.value));
IkReal gconst109=((-1.0)*r11*x4360);
IkReal gconst110=(r10*x4360);
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4363.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4366 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4366.valid){
continue;
}
IkReal x4364=((-1.0)*(x4366.value));
IkReal x4365=x4360;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4364;
IkReal gconst108=x4364;
IkReal gconst109=((-1.0)*r11*x4365);
IkReal gconst110=(r10*x4365);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4367=((1.0)*gconst110);
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x4367))+((gconst109*r11*sj0))+(((-1.0)*r10*sj0*x4367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4367)))),-1);
if(!x4369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4368.value)+(((1.5707963267949)*(x4369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4370=IKsin(j4);
IkReal x4371=IKcos(j4);
IkReal x4372=(gconst109*r21);
IkReal x4373=(cj2*sj1);
IkReal x4374=(cj1*sj2);
IkReal x4375=((1.0)*x4371);
IkReal x4376=(gconst109*x4370);
IkReal x4377=(gconst109*x4371);
IkReal x4378=((1.0)*gconst110*x4370);
evalcond[0]=(((x4370*x4372))+(((-1.0)*r22*x4375))+(((-1.0)*r20*x4378)));
evalcond[1]=(sj0+((r01*x4376))+(((-1.0)*r02*x4375))+(((-1.0)*r00*x4378)));
evalcond[2]=(((r11*x4376))+(((-1.0)*r10*x4378))+(((-1.0)*r12*x4375))+(((-1.0)*cj0)));
evalcond[3]=(((x4371*x4372))+((r22*x4370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4375)));
evalcond[4]=(((r02*x4370))+((r01*x4377))+((cj0*x4373))+((cj0*x4374))+(((-1.0)*gconst110*r00*x4375)));
evalcond[5]=(((sj0*x4373))+((sj0*x4374))+((r12*x4370))+((r11*x4377))+(((-1.0)*gconst110*r10*x4375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4379=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x4379.valid){
continue;
}
CheckValue<IkReal> x4380 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4379.value)))+(x4380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4381=IKsin(j4);
IkReal x4382=IKcos(j4);
IkReal x4383=(gconst109*r21);
IkReal x4384=(cj2*sj1);
IkReal x4385=(cj1*sj2);
IkReal x4386=((1.0)*x4382);
IkReal x4387=(gconst109*x4381);
IkReal x4388=(gconst109*x4382);
IkReal x4389=((1.0)*gconst110*x4381);
evalcond[0]=((((-1.0)*r22*x4386))+((x4381*x4383))+(((-1.0)*r20*x4389)));
evalcond[1]=((((-1.0)*r02*x4386))+sj0+(((-1.0)*r00*x4389))+((r01*x4387)));
evalcond[2]=((((-1.0)*r12*x4386))+(((-1.0)*r10*x4389))+((r11*x4387))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst110*r20*x4386))+((r22*x4381))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4382*x4383)));
evalcond[4]=((((-1.0)*gconst110*r00*x4386))+((r02*x4381))+((r01*x4388))+((cj0*x4384))+((cj0*x4385)));
evalcond[5]=((((-1.0)*gconst110*r10*x4386))+((sj0*x4384))+((sj0*x4385))+((r11*x4388))+((r12*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4391 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4391)==0){
continue;
}
IkReal x4390=pow(x4391,-0.5);
CheckValue<IkReal> x4392 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4392.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4392.value))));
IkReal gconst112=((1.0)*r11*x4390);
IkReal gconst113=((-1.0)*r10*x4390);
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4393.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
IkReal x4394=((1.0)*(x4396.value));
IkReal x4395=x4390;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4394)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4394)));
IkReal gconst112=((1.0)*r11*x4395);
IkReal gconst113=((-1.0)*r10*x4395);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
IkReal x4397=((1.0)*(x4399.value));
IkReal x4398=x4390;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4397)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4397)));
IkReal gconst112=((1.0)*r11*x4398);
IkReal gconst113=((-1.0)*r10*x4398);
IkReal x4400=r12*r12;
IkReal x4401=(cj0*r02);
IkReal x4402=x4390;
IkReal x4403=(sj0*x4402);
j4eval[0]=((IKabs((x4401+((r12*sj0)))))+(IKabs((((x4400*x4403))+(((-1.0)*x4403))+((r12*x4401*x4402))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
IkReal x4404=((1.0)*(x4406.value));
IkReal x4405=x4390;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4404)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4404)));
IkReal gconst112=((1.0)*r11*x4405);
IkReal gconst113=((-1.0)*r10*x4405);
IkReal x4407=r12*r12;
IkReal x4408=(sj1*sj2);
IkReal x4409=((1.0)+(((-1.0)*x4407)));
IkReal x4410=((1.0)*cj1*cj2);
CheckValue<IkReal> x4417=IKPowWithIntegerCheck(x4409,-1);
if(!x4417.valid){
continue;
}
IkReal x4411=x4417.value;
CheckValue<IkReal> x4418=IKPowWithIntegerCheck(((-1.0)+x4407),-1);
if(!x4418.valid){
continue;
}
IkReal x4412=x4418.value;
IkReal x4413=((1.0)*x4411);
if((x4409) < -0.00001)
continue;
IkReal x4414=IKsqrt(x4409);
IkReal x4415=(r12*r22*x4412*x4414);
IkReal x4416=((((-2.0)*r10*r11*r20*r21*x4411))+(((-1.0)*(r22*r22)))+(((-1.0)*x4413*(r11*r11)*(r21*r21)))+(((-1.0)*x4413*(r10*r10)*(r20*r20))));
j4eval[0]=x4416;
j4eval[1]=((IKabs((((r22*x4408))+(((-1.0)*r22*x4410)))))+(IKabs(((((-1.0)*x4410*x4415))+((x4408*x4415))))));
j4eval[2]=IKsign(x4416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4419=(sj1*sj2);
IkReal x4420=(gconst112*r21);
IkReal x4421=(gconst113*r20);
IkReal x4422=(cj1*cj2);
CheckValue<IkReal> x4423=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4421*x4421)))+(((-1.0)*(x4420*x4420)))+(((-1.0)*(r22*r22)))+(((2.0)*x4420*x4421)))),-1);
if(!x4423.valid){
continue;
}
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal((((r22*x4419))+(((-1.0)*r22*x4422)))),IkReal((((x4419*x4420))+(((-1.0)*x4420*x4422))+((x4421*x4422))+(((-1.0)*x4419*x4421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4423.value)))+(x4424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4425=IKsin(j4);
IkReal x4426=IKcos(j4);
IkReal x4427=(cj2*sj1);
IkReal x4428=(gconst113*r20);
IkReal x4429=(gconst112*r21);
IkReal x4430=(gconst113*r00);
IkReal x4431=(gconst113*r10);
IkReal x4432=(cj1*sj2);
IkReal x4433=((1.0)*x4426);
IkReal x4434=((1.0)*x4425);
IkReal x4435=(gconst112*x4426);
IkReal x4436=(gconst112*x4425);
evalcond[0]=((((-1.0)*x4428*x4434))+((x4425*x4429))+(((-1.0)*r22*x4433)));
evalcond[1]=(sj0+(((-1.0)*r02*x4433))+(((-1.0)*x4430*x4434))+((r01*x4436)));
evalcond[2]=((((-1.0)*r12*x4433))+(((-1.0)*x4431*x4434))+((r11*x4436))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4428*x4433))+((x4426*x4429))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4425)));
evalcond[4]=((((-1.0)*x4430*x4433))+((r02*x4425))+((cj0*x4432))+((cj0*x4427))+((r01*x4435)));
evalcond[5]=(((sj0*x4427))+(((-1.0)*x4431*x4433))+((r11*x4435))+((r12*x4425))+((sj0*x4432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4437=((1.0)*gconst113);
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4437))+(((-1.0)*gconst112*r20)))),-1);
if(!x4438.valid){
continue;
}
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x4437))+(((-1.0)*cj0*r00*x4437))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4438.value)))+(x4439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4440=IKsin(j4);
IkReal x4441=IKcos(j4);
IkReal x4442=(cj2*sj1);
IkReal x4443=(gconst113*r20);
IkReal x4444=(gconst112*r21);
IkReal x4445=(gconst113*r00);
IkReal x4446=(gconst113*r10);
IkReal x4447=(cj1*sj2);
IkReal x4448=((1.0)*x4441);
IkReal x4449=((1.0)*x4440);
IkReal x4450=(gconst112*x4441);
IkReal x4451=(gconst112*x4440);
evalcond[0]=((((-1.0)*x4443*x4449))+((x4440*x4444))+(((-1.0)*r22*x4448)));
evalcond[1]=(sj0+((r01*x4451))+(((-1.0)*r02*x4448))+(((-1.0)*x4445*x4449)));
evalcond[2]=((((-1.0)*x4446*x4449))+(((-1.0)*r12*x4448))+((r11*x4451))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4443*x4448))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4441*x4444))+((r22*x4440)));
evalcond[4]=(((r01*x4450))+((cj0*x4442))+((cj0*x4447))+((r02*x4440))+(((-1.0)*x4445*x4448)));
evalcond[5]=(((sj0*x4447))+((sj0*x4442))+(((-1.0)*x4446*x4448))+((r11*x4450))+((r12*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4452.valid){
continue;
}
CheckValue<IkReal> x4453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4452.value)))+(x4453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4454=IKsin(j4);
IkReal x4455=IKcos(j4);
IkReal x4456=(cj2*sj1);
IkReal x4457=(gconst113*r20);
IkReal x4458=(gconst112*r21);
IkReal x4459=(gconst113*r00);
IkReal x4460=(gconst113*r10);
IkReal x4461=(cj1*sj2);
IkReal x4462=((1.0)*x4455);
IkReal x4463=((1.0)*x4454);
IkReal x4464=(gconst112*x4455);
IkReal x4465=(gconst112*x4454);
evalcond[0]=((((-1.0)*r22*x4462))+(((-1.0)*x4457*x4463))+((x4454*x4458)));
evalcond[1]=(sj0+((r01*x4465))+(((-1.0)*r02*x4462))+(((-1.0)*x4459*x4463)));
evalcond[2]=(((r11*x4465))+(((-1.0)*r12*x4462))+(((-1.0)*x4460*x4463))+(((-1.0)*cj0)));
evalcond[3]=(((x4455*x4458))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4457*x4462))+((r22*x4454)));
evalcond[4]=(((r01*x4464))+((cj0*x4456))+(((-1.0)*x4459*x4462))+((r02*x4454))+((cj0*x4461)));
evalcond[5]=(((r11*x4464))+((sj0*x4461))+((r12*x4454))+(((-1.0)*x4460*x4462))+((sj0*x4456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4466=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4466;
j4eval[1]=IKsign(x4466);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4467=((1.0)*cj5);
IkReal x4468=((((-1.0)*r21*x4467))+(((-1.0)*r20*sj5)));
j4eval[0]=x4468;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4467))))));
j4eval[2]=IKsign(x4468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4469=cj5*cj5;
IkReal x4470=r11*r11;
IkReal x4471=(r11*sj5);
IkReal x4472=(cj5*r10);
IkReal x4473=((r12*r12)+x4470+(((-2.0)*x4471*x4472))+((x4469*(r10*r10)))+(((-1.0)*x4469*x4470)));
j4eval[0]=x4473;
j4eval[1]=IKsign(x4473);
j4eval[2]=((IKabs(r12))+(IKabs((x4471+(((-1.0)*x4472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4474=cj5*cj5;
IkReal x4475=r11*r11;
IkReal x4476=(cj5*r10);
IkReal x4477=(r11*sj5);
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal((x4477+(((-1.0)*x4476)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4474*x4475))+x4475+((x4474*(r10*r10)))+(((-2.0)*x4476*x4477)))),-1);
if(!x4479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4478.value)+(((1.5707963267949)*(x4479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4480=IKcos(j4);
IkReal x4481=IKsin(j4);
IkReal x4482=(cj5*r00);
IkReal x4483=(cj5*r10);
IkReal x4484=(r21*sj5);
IkReal x4485=(cj5*r20);
IkReal x4486=((1.0)*x4480);
IkReal x4487=((1.0)*x4481);
IkReal x4488=(sj5*x4481);
IkReal x4489=(sj5*x4480);
evalcond[0]=(((r11*x4489))+((r12*x4481))+(((-1.0)*x4483*x4486)));
evalcond[1]=(((x4481*x4484))+(((-1.0)*x4485*x4487))+(((-1.0)*r22*x4486)));
evalcond[2]=(((r01*x4488))+(((-1.0)*r02*x4486))+(((-1.0)*x4482*x4487)));
evalcond[3]=((-1.0)+((r11*x4488))+(((-1.0)*r12*x4486))+(((-1.0)*x4483*x4487)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4481))+((r01*x4489))+(((-1.0)*x4482*x4486)));
evalcond[5]=(((x4480*x4484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4485*x4486))+((r22*x4481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4490=((1.0)*cj5);
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4490))+(((-1.0)*r20*sj5)))),-1);
if(!x4492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4491.value)+(((1.5707963267949)*(x4492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4493=IKcos(j4);
IkReal x4494=IKsin(j4);
IkReal x4495=(cj5*r00);
IkReal x4496=(cj5*r10);
IkReal x4497=(r21*sj5);
IkReal x4498=(cj5*r20);
IkReal x4499=((1.0)*x4493);
IkReal x4500=((1.0)*x4494);
IkReal x4501=(sj5*x4494);
IkReal x4502=(sj5*x4493);
evalcond[0]=(((r12*x4494))+(((-1.0)*x4496*x4499))+((r11*x4502)));
evalcond[1]=((((-1.0)*x4498*x4500))+((x4494*x4497))+(((-1.0)*r22*x4499)));
evalcond[2]=((((-1.0)*r02*x4499))+(((-1.0)*x4495*x4500))+((r01*x4501)));
evalcond[3]=((-1.0)+((r11*x4501))+(((-1.0)*x4496*x4500))+(((-1.0)*r12*x4499)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4495*x4499))+((r02*x4494))+((r01*x4502)));
evalcond[5]=((((-1.0)*x4498*x4499))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4494))+((x4493*x4497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4503 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4503.valid){
continue;
}
CheckValue<IkReal> x4504=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4503.value)+(((1.5707963267949)*(x4504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4505=IKcos(j4);
IkReal x4506=IKsin(j4);
IkReal x4507=(cj5*r00);
IkReal x4508=(cj5*r10);
IkReal x4509=(r21*sj5);
IkReal x4510=(cj5*r20);
IkReal x4511=((1.0)*x4505);
IkReal x4512=((1.0)*x4506);
IkReal x4513=(sj5*x4506);
IkReal x4514=(sj5*x4505);
evalcond[0]=(((r12*x4506))+((r11*x4514))+(((-1.0)*x4508*x4511)));
evalcond[1]=(((x4506*x4509))+(((-1.0)*x4510*x4512))+(((-1.0)*r22*x4511)));
evalcond[2]=((((-1.0)*r02*x4511))+((r01*x4513))+(((-1.0)*x4507*x4512)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4511))+((r11*x4513))+(((-1.0)*x4508*x4512)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4506))+((r01*x4514))+(((-1.0)*x4507*x4511)));
evalcond[5]=(((r22*x4506))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4510*x4511))+((x4505*x4509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4515=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4515;
j4eval[1]=IKsign(x4515);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4516=((1.0)*cj5);
IkReal x4517=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4516)));
j4eval[0]=x4517;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4516)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4518=(sj1*sj2);
IkReal x4519=(cj5*r10);
IkReal x4520=(r11*sj5);
IkReal x4521=(cj1*cj2);
IkReal x4522=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4522;
j4eval[1]=((IKabs(((((-1.0)*x4520*x4521))+(((-1.0)*x4518*x4519))+((x4518*x4520))+((x4519*x4521)))))+(IKabs((((r12*x4521))+(((-1.0)*r12*x4518))))));
j4eval[2]=IKsign(x4522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4523=(sj1*sj2);
IkReal x4524=(cj5*r10);
IkReal x4525=(r11*sj5);
IkReal x4526=(cj1*cj2);
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal((((x4523*x4525))+(((-1.0)*x4525*x4526))+((x4524*x4526))+(((-1.0)*x4523*x4524)))),IkReal((((r12*x4526))+(((-1.0)*r12*x4523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4527.value)+(((1.5707963267949)*(x4528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4529=IKcos(j4);
IkReal x4530=IKsin(j4);
IkReal x4531=(cj5*r00);
IkReal x4532=(cj5*r10);
IkReal x4533=(r21*sj5);
IkReal x4534=((1.0)*cj2);
IkReal x4535=(cj5*r20);
IkReal x4536=((1.0)*x4529);
IkReal x4537=((1.0)*x4530);
IkReal x4538=(sj5*x4530);
IkReal x4539=(sj5*x4529);
evalcond[0]=(((r12*x4530))+(((-1.0)*x4532*x4536))+((r11*x4539)));
evalcond[1]=(((x4530*x4533))+(((-1.0)*r22*x4536))+(((-1.0)*x4535*x4537)));
evalcond[2]=(((r01*x4538))+(((-1.0)*x4531*x4537))+(((-1.0)*r02*x4536)));
evalcond[3]=((1.0)+(((-1.0)*x4532*x4537))+(((-1.0)*r12*x4536))+((r11*x4538)));
evalcond[4]=(((x4529*x4533))+(((-1.0)*cj1*x4534))+((sj1*sj2))+((r22*x4530))+(((-1.0)*x4535*x4536)));
evalcond[5]=(((r01*x4539))+(((-1.0)*sj1*x4534))+(((-1.0)*x4531*x4536))+(((-1.0)*cj1*sj2))+((r02*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4540=((1.0)*cj5);
CheckValue<IkReal> x4541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4540)))),-1);
if(!x4541.valid){
continue;
}
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4541.value)))+(x4542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4543=IKcos(j4);
IkReal x4544=IKsin(j4);
IkReal x4545=(cj5*r00);
IkReal x4546=(cj5*r10);
IkReal x4547=(r21*sj5);
IkReal x4548=((1.0)*cj2);
IkReal x4549=(cj5*r20);
IkReal x4550=((1.0)*x4543);
IkReal x4551=((1.0)*x4544);
IkReal x4552=(sj5*x4544);
IkReal x4553=(sj5*x4543);
evalcond[0]=(((r11*x4553))+((r12*x4544))+(((-1.0)*x4546*x4550)));
evalcond[1]=(((x4544*x4547))+(((-1.0)*x4549*x4551))+(((-1.0)*r22*x4550)));
evalcond[2]=(((r01*x4552))+(((-1.0)*x4545*x4551))+(((-1.0)*r02*x4550)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4550))+((r11*x4552))+(((-1.0)*x4546*x4551)));
evalcond[4]=(((r22*x4544))+((sj1*sj2))+(((-1.0)*x4549*x4550))+(((-1.0)*cj1*x4548))+((x4543*x4547)));
evalcond[5]=(((r01*x4553))+((r02*x4544))+(((-1.0)*cj1*sj2))+(((-1.0)*x4545*x4550))+(((-1.0)*sj1*x4548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4554=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4554.valid){
continue;
}
CheckValue<IkReal> x4555 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4554.value)))+(x4555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4556=IKcos(j4);
IkReal x4557=IKsin(j4);
IkReal x4558=(cj5*r00);
IkReal x4559=(cj5*r10);
IkReal x4560=(r21*sj5);
IkReal x4561=((1.0)*cj2);
IkReal x4562=(cj5*r20);
IkReal x4563=((1.0)*x4556);
IkReal x4564=((1.0)*x4557);
IkReal x4565=(sj5*x4557);
IkReal x4566=(sj5*x4556);
evalcond[0]=(((r11*x4566))+((r12*x4557))+(((-1.0)*x4559*x4563)));
evalcond[1]=(((x4557*x4560))+(((-1.0)*r22*x4563))+(((-1.0)*x4562*x4564)));
evalcond[2]=((((-1.0)*r02*x4563))+(((-1.0)*x4558*x4564))+((r01*x4565)));
evalcond[3]=((1.0)+((r11*x4565))+(((-1.0)*x4559*x4564))+(((-1.0)*r12*x4563)));
evalcond[4]=((((-1.0)*cj1*x4561))+((x4556*x4560))+((sj1*sj2))+((r22*x4557))+(((-1.0)*x4562*x4563)));
evalcond[5]=((((-1.0)*sj1*x4561))+(((-1.0)*cj1*sj2))+((r02*x4557))+(((-1.0)*x4558*x4563))+((r01*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4567=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4567);
rxp0_2=(py*r00);
rxp1_0=(r21*x4567);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4568=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4568);
rxp0_2=(py*r00);
rxp1_0=(r21*x4568);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4569=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4569);
rxp0_2=(py*r00);
rxp1_0=(r21*x4569);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4572=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x4572.valid){
continue;
}
IkReal x4570=x4572.value;
IkReal x4571=((1.0)*cj0*x4570);
cj4array[0]=((((-1.0)*cj2*sj1*x4571))+(((-1.0)*cj1*sj2*x4571)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4573=IKsin(j4);
IkReal x4574=IKcos(j4);
IkReal x4575=(r21*sj5);
IkReal x4576=((1.0)*x4574);
IkReal x4577=((1.0)*cj5*x4573);
evalcond[0]=(r12*x4573);
evalcond[1]=((((-1.0)*r12*x4576))+(((-1.0)*cj0)));
evalcond[2]=(((x4573*x4575))+(((-1.0)*r20*x4577)));
evalcond[3]=((((-1.0)*r00*x4577))+((r01*sj5*x4573)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4574*x4575))+(((-1.0)*cj5*r20*x4576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4579=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4579.valid){
continue;
}
IkReal x4578=x4579.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4578))+((cj1*cj2*x4578)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4580=IKsin(j4);
IkReal x4581=IKcos(j4);
IkReal x4582=(r01*sj5);
IkReal x4583=((1.0)*cj5*r00);
evalcond[0]=(r12*x4580);
evalcond[1]=((((-1.0)*r12*x4581))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x4580))+(((-1.0)*cj5*r20*x4580)));
evalcond[3]=((((-1.0)*x4580*x4583))+((x4580*x4582)));
evalcond[4]=(((x4581*x4582))+(((-1.0)*x4581*x4583))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(r12,-1);
if(!x4584.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4584.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4585=IKsin(j4);
IkReal x4586=IKcos(j4);
IkReal x4587=(sj5*x4586);
IkReal x4588=(sj5*x4585);
IkReal x4589=((1.0)*cj5*x4585);
IkReal x4590=((1.0)*cj5*x4586);
evalcond[0]=(r12*x4585);
evalcond[1]=(((r21*x4588))+(((-1.0)*r20*x4589)));
evalcond[2]=((((-1.0)*r00*x4589))+((r01*x4588)));
evalcond[3]=(((r21*x4587))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x4590)));
evalcond[4]=((((-1.0)*r00*x4590))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x4587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4591=((1.0)*cj5);
CheckValue<IkReal> x4592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4591))+(((-1.0)*r20*sj5)))),-1);
if(!x4592.valid){
continue;
}
CheckValue<IkReal> x4593 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4591))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x4591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4592.value)))+(x4593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4594=IKsin(j4);
IkReal x4595=IKcos(j4);
IkReal x4596=(cj5*r00);
IkReal x4597=(cj5*r10);
IkReal x4598=(cj2*sj1);
IkReal x4599=(r21*sj5);
IkReal x4600=(cj5*r20);
IkReal x4601=(cj1*sj2);
IkReal x4602=((1.0)*x4595);
IkReal x4603=((1.0)*x4594);
IkReal x4604=(sj5*x4594);
IkReal x4605=(sj5*x4595);
evalcond[0]=((((-1.0)*x4600*x4603))+(((-1.0)*r22*x4602))+((x4594*x4599)));
evalcond[1]=(sj0+((r01*x4604))+(((-1.0)*r02*x4602))+(((-1.0)*x4596*x4603)));
evalcond[2]=(((r11*x4604))+(((-1.0)*x4597*x4603))+(((-1.0)*r12*x4602))+(((-1.0)*cj0)));
evalcond[3]=(((x4595*x4599))+((r22*x4594))+(((-1.0)*x4600*x4602))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*x4601))+((r01*x4605))+((r02*x4594))+(((-1.0)*x4596*x4602))+((cj0*x4598)));
evalcond[5]=(((r11*x4605))+((sj0*x4598))+((sj0*x4601))+(((-1.0)*x4597*x4602))+((r12*x4594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4606.valid){
continue;
}
CheckValue<IkReal> x4607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4606.value)))+(x4607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4608=IKsin(j4);
IkReal x4609=IKcos(j4);
IkReal x4610=(cj5*r00);
IkReal x4611=(cj5*r10);
IkReal x4612=(cj2*sj1);
IkReal x4613=(r21*sj5);
IkReal x4614=(cj5*r20);
IkReal x4615=(cj1*sj2);
IkReal x4616=((1.0)*x4609);
IkReal x4617=((1.0)*x4608);
IkReal x4618=(sj5*x4608);
IkReal x4619=(sj5*x4609);
evalcond[0]=(((x4608*x4613))+(((-1.0)*x4614*x4617))+(((-1.0)*r22*x4616)));
evalcond[1]=((((-1.0)*r02*x4616))+sj0+((r01*x4618))+(((-1.0)*x4610*x4617)));
evalcond[2]=(((r11*x4618))+(((-1.0)*r12*x4616))+(((-1.0)*x4611*x4617))+(((-1.0)*cj0)));
evalcond[3]=(((x4609*x4613))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4614*x4616))+((r22*x4608)));
evalcond[4]=(((r01*x4619))+((r02*x4608))+(((-1.0)*x4610*x4616))+((cj0*x4612))+((cj0*x4615)));
evalcond[5]=(((r12*x4608))+((sj0*x4612))+((sj0*x4615))+((r11*x4619))+(((-1.0)*x4611*x4616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4620=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4620.valid){
continue;
}
CheckValue<IkReal> x4621 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4620.value)))+(x4621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4622=IKsin(j4);
IkReal x4623=IKcos(j4);
IkReal x4624=(cj5*r00);
IkReal x4625=(cj5*r10);
IkReal x4626=(cj2*sj1);
IkReal x4627=(r21*sj5);
IkReal x4628=(cj5*r20);
IkReal x4629=(cj1*sj2);
IkReal x4630=((1.0)*x4623);
IkReal x4631=((1.0)*x4622);
IkReal x4632=(sj5*x4622);
IkReal x4633=(sj5*x4623);
evalcond[0]=((((-1.0)*x4628*x4631))+((x4622*x4627))+(((-1.0)*r22*x4630)));
evalcond[1]=(((r01*x4632))+sj0+(((-1.0)*r02*x4630))+(((-1.0)*x4624*x4631)));
evalcond[2]=(((r11*x4632))+(((-1.0)*r12*x4630))+(((-1.0)*x4625*x4631))+(((-1.0)*cj0)));
evalcond[3]=(((x4623*x4627))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4628*x4630))+((r22*x4622)));
evalcond[4]=(((r01*x4633))+((cj0*x4626))+((cj0*x4629))+(((-1.0)*x4624*x4630))+((r02*x4622)));
evalcond[5]=(((r12*x4622))+((r11*x4633))+(((-1.0)*x4625*x4630))+((sj0*x4629))+((sj0*x4626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4634=((1.0)*cj5);
IkReal x4635=((1.0)*sj5);
IkReal x4636=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4636;
j0eval[1]=((IKabs(((((-1.0)*r10*x4635))+(((-1.0)*r11*x4634)))))+(IKabs(((((-1.0)*r01*x4634))+(((-1.0)*r00*x4635))))));
j0eval[2]=IKsign(x4636);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4637=r21*r21;
IkReal x4638=cj5*cj5;
IkReal x4639=(cj2*sj1);
IkReal x4640=(cj1*sj2);
IkReal x4641=(r21*sj5);
IkReal x4642=((1.0)*cj5*r20);
IkReal x4643=((((-1.0)*x4637))+(((-1.0)*(r22*r22)))+(((-1.0)*x4638*(r20*r20)))+(((2.0)*cj5*r20*x4641))+((x4637*x4638)));
j4eval[0]=x4643;
j4eval[1]=((IKabs((((r22*x4640))+((r22*x4639)))))+(IKabs(((((-1.0)*x4640*x4642))+((x4639*x4641))+((x4640*x4641))+(((-1.0)*x4639*x4642))))));
j4eval[2]=IKsign(x4643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4644=cj1*cj1;
IkReal x4645=(cj2*sj2);
IkReal x4646=(cj1*sj1);
j0eval[0]=((((-2.0)*x4646*(cj2*cj2)))+x4646+x4645+(((-2.0)*x4644*x4645))+(((-1.06936921195177)*sj2*x4644))+(((-1.06936921195177)*cj2*x4646)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((-0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((-0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((-0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4647=IKsin(j0);
IkReal x4648=IKcos(j0);
evalcond[0]=((((0.163941)*x4647))+(((-1.1843)*x4648))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*x4648))+(((-1.1843)*x4647))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4649=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4649;
j4eval[1]=IKsign(x4649);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4650=((1.0)*cj5);
IkReal x4651=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4650)));
j4eval[0]=x4651;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4650))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4652=cj5*cj5;
IkReal x4653=((1.0)*r20);
IkReal x4654=(r01*r21);
IkReal x4655=(r21*sj5);
IkReal x4656=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4654))+((x4652*x4654))+((cj5*r00*x4655))+(((-1.0)*r00*x4652*x4653)));
j4eval[0]=x4656;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4653))+((cj0*x4655)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4656);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4657=cj5*cj5;
IkReal x4658=((1.0)*r20);
IkReal x4659=(r01*r21);
IkReal x4660=(r21*sj5);
CheckValue<IkReal> x4661=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4659))+((x4657*x4659))+((cj5*r00*x4660))+(((-1.0)*r00*x4657*x4658)))),-1);
if(!x4661.valid){
continue;
}
CheckValue<IkReal> x4662 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4658))+((cj0*x4660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4661.value)))+(x4662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4663=IKcos(j4);
IkReal x4664=IKsin(j4);
IkReal x4665=(cj5*r00);
IkReal x4666=(cj5*r10);
IkReal x4667=(cj5*r20);
IkReal x4668=((1.0)*x4663);
IkReal x4669=((1.0)*x4664);
IkReal x4670=(sj5*x4663);
IkReal x4671=(sj5*x4664);
evalcond[0]=((((-1.0)*x4667*x4668))+((r21*x4670))+((r22*x4664)));
evalcond[1]=((((-1.0)*x4667*x4669))+((r21*x4671))+(((-1.0)*r22*x4668)));
evalcond[2]=(((r02*x4664))+cj0+(((-1.0)*x4665*x4668))+((r01*x4670)));
evalcond[3]=(sj0+((r12*x4664))+((r11*x4670))+(((-1.0)*x4666*x4668)));
evalcond[4]=(sj0+(((-1.0)*x4665*x4669))+((r01*x4671))+(((-1.0)*r02*x4668)));
evalcond[5]=(((r11*x4671))+(((-1.0)*r12*x4668))+(((-1.0)*cj0))+(((-1.0)*x4666*x4669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4672=((1.0)*cj5);
CheckValue<IkReal> x4673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4672)))),-1);
if(!x4673.valid){
continue;
}
CheckValue<IkReal> x4674 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4672)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4673.value)))+(x4674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4675=IKcos(j4);
IkReal x4676=IKsin(j4);
IkReal x4677=(cj5*r00);
IkReal x4678=(cj5*r10);
IkReal x4679=(cj5*r20);
IkReal x4680=((1.0)*x4675);
IkReal x4681=((1.0)*x4676);
IkReal x4682=(sj5*x4675);
IkReal x4683=(sj5*x4676);
evalcond[0]=((((-1.0)*x4679*x4680))+((r22*x4676))+((r21*x4682)));
evalcond[1]=((((-1.0)*x4679*x4681))+((r21*x4683))+(((-1.0)*r22*x4680)));
evalcond[2]=(((r02*x4676))+cj0+((r01*x4682))+(((-1.0)*x4677*x4680)));
evalcond[3]=(sj0+((r12*x4676))+((r11*x4682))+(((-1.0)*x4678*x4680)));
evalcond[4]=(sj0+(((-1.0)*r02*x4680))+((r01*x4683))+(((-1.0)*x4677*x4681)));
evalcond[5]=(((r11*x4683))+(((-1.0)*x4678*x4681))+(((-1.0)*cj0))+(((-1.0)*r12*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
CheckValue<IkReal> x4685=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4684.value)+(((1.5707963267949)*(x4685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4686=IKcos(j4);
IkReal x4687=IKsin(j4);
IkReal x4688=(cj5*r00);
IkReal x4689=(cj5*r10);
IkReal x4690=(cj5*r20);
IkReal x4691=((1.0)*x4686);
IkReal x4692=((1.0)*x4687);
IkReal x4693=(sj5*x4686);
IkReal x4694=(sj5*x4687);
evalcond[0]=((((-1.0)*x4690*x4691))+((r22*x4687))+((r21*x4693)));
evalcond[1]=((((-1.0)*x4690*x4692))+((r21*x4694))+(((-1.0)*r22*x4691)));
evalcond[2]=(cj0+((r02*x4687))+(((-1.0)*x4688*x4691))+((r01*x4693)));
evalcond[3]=(sj0+((r12*x4687))+((r11*x4693))+(((-1.0)*x4689*x4691)));
evalcond[4]=(sj0+(((-1.0)*x4688*x4692))+(((-1.0)*r02*x4691))+((r01*x4694)));
evalcond[5]=((((-1.0)*r12*x4691))+((r11*x4694))+(((-1.0)*x4689*x4692))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((-5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((-5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((-5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4695=IKsin(j0);
IkReal x4696=IKcos(j0);
evalcond[0]=((((-0.0397)*x4696))+(((0.163941)*x4695))+(((-1.0)*px)));
evalcond[1]=((((-0.0397)*x4695))+(((-0.163941)*x4696))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4697=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4697;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4698=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4698;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4699=((1.0)*cj5);
IkReal x4700=((((-1.0)*r01*x4699))+(((-1.0)*r00*sj5)));
j4eval[0]=x4700;
j4eval[1]=IKsign(x4700);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4699))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4701=((1.0)*cj5);
CheckValue<IkReal> x4702 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4701)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4702.valid){
continue;
}
CheckValue<IkReal> x4703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4701))+(((-1.0)*r00*sj5)))),-1);
if(!x4703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4702.value)+(((1.5707963267949)*(x4703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4704=IKcos(j4);
IkReal x4705=IKsin(j4);
IkReal x4706=((1.0)*cj0);
IkReal x4707=(cj5*r00);
IkReal x4708=(cj5*r10);
IkReal x4709=(cj5*r20);
IkReal x4710=((1.0)*x4704);
IkReal x4711=((1.0)*x4705);
IkReal x4712=(sj5*x4704);
IkReal x4713=(sj5*x4705);
evalcond[0]=((((-1.0)*x4709*x4710))+((r21*x4712))+((r22*x4705)));
evalcond[1]=((((-1.0)*x4709*x4711))+(((-1.0)*r22*x4710))+((r21*x4713)));
evalcond[2]=((((-1.0)*r02*x4710))+sj0+((r01*x4713))+(((-1.0)*x4707*x4711)));
evalcond[3]=(((r01*x4712))+(((-1.0)*x4707*x4710))+((r02*x4705))+(((-1.0)*x4706)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4708*x4710))+((r11*x4712))+((r12*x4705)));
evalcond[5]=((((-1.0)*r12*x4710))+(((-1.0)*x4708*x4711))+(((-1.0)*x4706))+((r11*x4713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4714 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4714.value)+(((1.5707963267949)*(x4715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4716=IKcos(j4);
IkReal x4717=IKsin(j4);
IkReal x4718=((1.0)*cj0);
IkReal x4719=(cj5*r00);
IkReal x4720=(cj5*r10);
IkReal x4721=(cj5*r20);
IkReal x4722=((1.0)*x4716);
IkReal x4723=((1.0)*x4717);
IkReal x4724=(sj5*x4716);
IkReal x4725=(sj5*x4717);
evalcond[0]=(((r22*x4717))+((r21*x4724))+(((-1.0)*x4721*x4722)));
evalcond[1]=(((r21*x4725))+(((-1.0)*x4721*x4723))+(((-1.0)*r22*x4722)));
evalcond[2]=(sj0+(((-1.0)*x4719*x4723))+((r01*x4725))+(((-1.0)*r02*x4722)));
evalcond[3]=((((-1.0)*x4719*x4722))+((r01*x4724))+((r02*x4717))+(((-1.0)*x4718)));
evalcond[4]=(((r11*x4724))+(((-1.0)*sj0))+((r12*x4717))+(((-1.0)*x4720*x4722)));
evalcond[5]=(((r11*x4725))+(((-1.0)*r12*x4722))+(((-1.0)*x4720*x4723))+(((-1.0)*x4718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4726=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4726.valid){
continue;
}
CheckValue<IkReal> x4727 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4726.value)))+(x4727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4728=IKcos(j4);
IkReal x4729=IKsin(j4);
IkReal x4730=((1.0)*cj0);
IkReal x4731=(cj5*r00);
IkReal x4732=(cj5*r10);
IkReal x4733=(cj5*r20);
IkReal x4734=((1.0)*x4728);
IkReal x4735=((1.0)*x4729);
IkReal x4736=(sj5*x4728);
IkReal x4737=(sj5*x4729);
evalcond[0]=(((r21*x4736))+(((-1.0)*x4733*x4734))+((r22*x4729)));
evalcond[1]=(((r21*x4737))+(((-1.0)*x4733*x4735))+(((-1.0)*r22*x4734)));
evalcond[2]=(sj0+(((-1.0)*x4731*x4735))+((r01*x4737))+(((-1.0)*r02*x4734)));
evalcond[3]=((((-1.0)*x4731*x4734))+(((-1.0)*x4730))+((r02*x4729))+((r01*x4736)));
evalcond[4]=(((r11*x4736))+(((-1.0)*sj0))+(((-1.0)*x4732*x4734))+((r12*x4729)));
evalcond[5]=(((r11*x4737))+(((-1.0)*r12*x4734))+(((-1.0)*x4730))+(((-1.0)*x4732*x4735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4738=((1.0)*sj5);
IkReal x4739=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x4738))+(((-1.0)*r11*x4739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4739))+(((-1.0)*r00*x4738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4738))+(((-1.0)*r11*x4739))))+IKsqr(((((-1.0)*r01*x4739))+(((-1.0)*r00*x4738))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x4738))+(((-1.0)*r11*x4739))), ((((-1.0)*r01*x4739))+(((-1.0)*r00*x4738))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4740=IKsin(j0);
IkReal x4741=IKcos(j0);
IkReal x4742=(cj5*r01);
IkReal x4743=((0.1157)*sj5);
IkReal x4744=(cj5*r11);
evalcond[0]=(((r00*sj5))+x4742+x4741);
evalcond[1]=(((r10*sj5))+x4740+x4744);
evalcond[2]=((((-1.0)*r00*x4743))+(((-1.0)*px))+(((0.163941)*x4740))+(((-0.1157)*x4742)));
evalcond[3]=((((-1.0)*r10*x4743))+(((-0.163941)*x4741))+(((-1.0)*py))+(((-0.1157)*x4744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4745=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4745;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4746=((1.0)*cj5);
IkReal x4747=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4746)));
j4eval[0]=x4747;
j4eval[1]=((IKabs(((((-1.0)*r10*x4746))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4748=cj5*cj5;
IkReal x4749=r01*r01;
IkReal x4750=(cj5*r00);
IkReal x4751=(r01*sj5);
IkReal x4752=((((-1.0)*(r02*r02)))+(((2.0)*x4750*x4751))+((x4748*x4749))+(((-1.0)*x4748*(r00*r00)))+(((-1.0)*x4749)));
j4eval[0]=x4752;
j4eval[1]=IKsign(x4752);
j4eval[2]=((IKabs((((sj0*x4751))+(((-1.0)*sj0*x4750)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4753=cj5*cj5;
IkReal x4754=r01*r01;
IkReal x4755=(cj5*r00);
IkReal x4756=(r01*sj5);
CheckValue<IkReal> x4757=IKPowWithIntegerCheck(IKsign((((x4753*x4754))+(((-1.0)*(r02*r02)))+(((-1.0)*x4753*(r00*r00)))+(((2.0)*x4755*x4756))+(((-1.0)*x4754)))),-1);
if(!x4757.valid){
continue;
}
CheckValue<IkReal> x4758 = IKatan2WithCheck(IkReal((((sj0*x4756))+(((-1.0)*sj0*x4755)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4757.value)))+(x4758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4759=IKcos(j4);
IkReal x4760=IKsin(j4);
IkReal x4761=(cj5*r00);
IkReal x4762=(r01*sj5);
IkReal x4763=(cj5*r10);
IkReal x4764=(cj5*r20);
IkReal x4765=((1.0)*x4759);
IkReal x4766=((1.0)*x4760);
IkReal x4767=(sj5*x4760);
IkReal x4768=(sj5*x4759);
evalcond[0]=(((r02*x4760))+(((-1.0)*x4761*x4765))+((x4759*x4762)));
evalcond[1]=((((-1.0)*x4763*x4765))+((r12*x4760))+((r11*x4768)));
evalcond[2]=((((-1.0)*r22*x4765))+((r21*x4767))+(((-1.0)*x4764*x4766)));
evalcond[3]=((1.0)+((r22*x4760))+((r21*x4768))+(((-1.0)*x4764*x4765)));
evalcond[4]=(sj0+(((-1.0)*r02*x4765))+(((-1.0)*x4761*x4766))+((x4760*x4762)));
evalcond[5]=((((-1.0)*x4763*x4766))+(((-1.0)*r12*x4765))+((r11*x4767))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4769=((1.0)*cj5);
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4769)))),-1);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4769)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4770.value)))+(x4771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4772=IKcos(j4);
IkReal x4773=IKsin(j4);
IkReal x4774=(cj5*r00);
IkReal x4775=(r01*sj5);
IkReal x4776=(cj5*r10);
IkReal x4777=(cj5*r20);
IkReal x4778=((1.0)*x4772);
IkReal x4779=((1.0)*x4773);
IkReal x4780=(sj5*x4773);
IkReal x4781=(sj5*x4772);
evalcond[0]=(((x4772*x4775))+(((-1.0)*x4774*x4778))+((r02*x4773)));
evalcond[1]=((((-1.0)*x4776*x4778))+((r12*x4773))+((r11*x4781)));
evalcond[2]=((((-1.0)*x4777*x4779))+(((-1.0)*r22*x4778))+((r21*x4780)));
evalcond[3]=((1.0)+(((-1.0)*x4777*x4778))+((r22*x4773))+((r21*x4781)));
evalcond[4]=(sj0+(((-1.0)*x4774*x4779))+((x4773*x4775))+(((-1.0)*r02*x4778)));
evalcond[5]=((((-1.0)*x4776*x4779))+(((-1.0)*r12*x4778))+((r11*x4780))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4782 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4782.valid){
continue;
}
CheckValue<IkReal> x4783=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4782.value)+(((1.5707963267949)*(x4783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4784=IKcos(j4);
IkReal x4785=IKsin(j4);
IkReal x4786=(cj5*r00);
IkReal x4787=(r01*sj5);
IkReal x4788=(cj5*r10);
IkReal x4789=(cj5*r20);
IkReal x4790=((1.0)*x4784);
IkReal x4791=((1.0)*x4785);
IkReal x4792=(sj5*x4785);
IkReal x4793=(sj5*x4784);
evalcond[0]=(((r02*x4785))+(((-1.0)*x4786*x4790))+((x4784*x4787)));
evalcond[1]=((((-1.0)*x4788*x4790))+((r12*x4785))+((r11*x4793)));
evalcond[2]=(((r21*x4792))+(((-1.0)*x4789*x4791))+(((-1.0)*r22*x4790)));
evalcond[3]=((1.0)+((r21*x4793))+((r22*x4785))+(((-1.0)*x4789*x4790)));
evalcond[4]=(sj0+(((-1.0)*r02*x4790))+((x4785*x4787))+(((-1.0)*x4786*x4791)));
evalcond[5]=((((-1.0)*x4788*x4791))+(((-1.0)*r12*x4790))+((r11*x4792))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((0.462582327146012)*px))), ((((1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4794=IKsin(j0);
IkReal x4795=IKcos(j0);
evalcond[0]=((((0.5723)*x4795))+(((-1.0)*px))+(((0.163941)*x4794)));
evalcond[1]=((((-0.163941)*x4795))+(((0.5723)*x4794))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4796=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4796;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4797=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4797;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4798=((1.0)*cj5);
IkReal x4799=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4798)));
j4eval[0]=x4799;
j4eval[1]=IKsign(x4799);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4800=((1.0)*cj5);
CheckValue<IkReal> x4801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4800)))),-1);
if(!x4801.valid){
continue;
}
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4800)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4801.value)))+(x4802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4803=IKcos(j4);
IkReal x4804=IKsin(j4);
IkReal x4805=((1.0)*cj0);
IkReal x4806=(cj5*r00);
IkReal x4807=(cj5*r10);
IkReal x4808=(cj5*r20);
IkReal x4809=((1.0)*x4803);
IkReal x4810=((1.0)*x4804);
IkReal x4811=(sj5*x4803);
IkReal x4812=(sj5*x4804);
evalcond[0]=(((r21*x4811))+((r22*x4804))+(((-1.0)*x4808*x4809)));
evalcond[1]=((((-1.0)*r22*x4809))+(((-1.0)*x4808*x4810))+((r21*x4812)));
evalcond[2]=(sj0+(((-1.0)*x4806*x4810))+(((-1.0)*r02*x4809))+((r01*x4812)));
evalcond[3]=(((r02*x4804))+(((-1.0)*x4806*x4809))+(((-1.0)*x4805))+((r01*x4811)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4811))+((r12*x4804))+(((-1.0)*x4807*x4809)));
evalcond[5]=(((r11*x4812))+(((-1.0)*x4807*x4810))+(((-1.0)*r12*x4809))+(((-1.0)*x4805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4813 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4813.valid){
continue;
}
CheckValue<IkReal> x4814=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4813.value)+(((1.5707963267949)*(x4814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4815=IKcos(j4);
IkReal x4816=IKsin(j4);
IkReal x4817=((1.0)*cj0);
IkReal x4818=(cj5*r00);
IkReal x4819=(cj5*r10);
IkReal x4820=(cj5*r20);
IkReal x4821=((1.0)*x4815);
IkReal x4822=((1.0)*x4816);
IkReal x4823=(sj5*x4815);
IkReal x4824=(sj5*x4816);
evalcond[0]=(((r21*x4823))+(((-1.0)*x4820*x4821))+((r22*x4816)));
evalcond[1]=(((r21*x4824))+(((-1.0)*r22*x4821))+(((-1.0)*x4820*x4822)));
evalcond[2]=(sj0+(((-1.0)*r02*x4821))+(((-1.0)*x4818*x4822))+((r01*x4824)));
evalcond[3]=((((-1.0)*x4817))+((r02*x4816))+(((-1.0)*x4818*x4821))+((r01*x4823)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4823))+(((-1.0)*x4819*x4821))+((r12*x4816)));
evalcond[5]=((((-1.0)*x4817))+((r11*x4824))+(((-1.0)*x4819*x4822))+(((-1.0)*r12*x4821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4825=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4825.valid){
continue;
}
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4825.value)))+(x4826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4827=IKcos(j4);
IkReal x4828=IKsin(j4);
IkReal x4829=((1.0)*cj0);
IkReal x4830=(cj5*r00);
IkReal x4831=(cj5*r10);
IkReal x4832=(cj5*r20);
IkReal x4833=((1.0)*x4827);
IkReal x4834=((1.0)*x4828);
IkReal x4835=(sj5*x4827);
IkReal x4836=(sj5*x4828);
evalcond[0]=(((r22*x4828))+(((-1.0)*x4832*x4833))+((r21*x4835)));
evalcond[1]=((((-1.0)*x4832*x4834))+(((-1.0)*r22*x4833))+((r21*x4836)));
evalcond[2]=(((r01*x4836))+sj0+(((-1.0)*x4830*x4834))+(((-1.0)*r02*x4833)));
evalcond[3]=(((r01*x4835))+(((-1.0)*x4830*x4833))+(((-1.0)*x4829))+((r02*x4828)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4835))+(((-1.0)*x4831*x4833))+((r12*x4828)));
evalcond[5]=(((r11*x4836))+(((-1.0)*x4831*x4834))+(((-1.0)*x4829))+(((-1.0)*r12*x4833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4837=IKsin(j0);
IkReal x4838=IKcos(j0);
IkReal x4839=(cj5*r01);
IkReal x4840=((0.1157)*sj5);
IkReal x4841=(cj5*r11);
evalcond[0]=(((r00*sj5))+(((-1.0)*x4838))+x4839);
evalcond[1]=(((r10*sj5))+(((-1.0)*x4837))+x4841);
evalcond[2]=((((-1.0)*r00*x4840))+(((0.163941)*x4837))+(((-1.0)*px))+(((-0.1157)*x4839)));
evalcond[3]=((((-0.163941)*x4838))+(((-0.1157)*x4841))+(((-1.0)*py))+(((-1.0)*r10*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4842=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4842;
j4eval[1]=IKsign(x4842);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4843=((1.0)*cj5);
IkReal x4844=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4843)));
j4eval[0]=x4844;
j4eval[1]=IKsign(x4844);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4845=cj5*cj5;
IkReal x4846=r01*r01;
IkReal x4847=(cj5*r00);
IkReal x4848=(r01*sj5);
IkReal x4849=((((2.0)*x4847*x4848))+(((-1.0)*(r02*r02)))+(((-1.0)*x4845*(r00*r00)))+((x4845*x4846))+(((-1.0)*x4846)));
j4eval[0]=x4849;
j4eval[1]=IKsign(x4849);
j4eval[2]=((IKabs(((((-1.0)*sj0*x4847))+((sj0*x4848)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4850=cj5*cj5;
IkReal x4851=r01*r01;
IkReal x4852=(cj5*r00);
IkReal x4853=(r01*sj5);
CheckValue<IkReal> x4854=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4850*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4852*x4853))+(((-1.0)*x4851))+((x4850*x4851)))),-1);
if(!x4854.valid){
continue;
}
CheckValue<IkReal> x4855 = IKatan2WithCheck(IkReal((((sj0*x4853))+(((-1.0)*sj0*x4852)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4854.value)))+(x4855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4856=IKcos(j4);
IkReal x4857=IKsin(j4);
IkReal x4858=(cj5*r00);
IkReal x4859=(r01*sj5);
IkReal x4860=(cj5*r10);
IkReal x4861=(cj5*r20);
IkReal x4862=((1.0)*x4856);
IkReal x4863=((1.0)*x4857);
IkReal x4864=(sj5*x4857);
IkReal x4865=(sj5*x4856);
evalcond[0]=((((-1.0)*x4858*x4862))+((r02*x4857))+((x4856*x4859)));
evalcond[1]=(((r11*x4865))+((r12*x4857))+(((-1.0)*x4860*x4862)));
evalcond[2]=((((-1.0)*r22*x4862))+(((-1.0)*x4861*x4863))+((r21*x4864)));
evalcond[3]=((-1.0)+((r22*x4857))+(((-1.0)*x4861*x4862))+((r21*x4865)));
evalcond[4]=(sj0+(((-1.0)*x4858*x4863))+(((-1.0)*r02*x4862))+((x4857*x4859)));
evalcond[5]=(((r11*x4864))+(((-1.0)*r12*x4862))+(((-1.0)*x4860*x4863))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4866=((1.0)*cj5);
CheckValue<IkReal> x4867 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4866))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4867.valid){
continue;
}
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4866)))),-1);
if(!x4868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4867.value)+(((1.5707963267949)*(x4868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4869=IKcos(j4);
IkReal x4870=IKsin(j4);
IkReal x4871=(cj5*r00);
IkReal x4872=(r01*sj5);
IkReal x4873=(cj5*r10);
IkReal x4874=(cj5*r20);
IkReal x4875=((1.0)*x4869);
IkReal x4876=((1.0)*x4870);
IkReal x4877=(sj5*x4870);
IkReal x4878=(sj5*x4869);
evalcond[0]=(((r02*x4870))+((x4869*x4872))+(((-1.0)*x4871*x4875)));
evalcond[1]=(((r12*x4870))+((r11*x4878))+(((-1.0)*x4873*x4875)));
evalcond[2]=((((-1.0)*r22*x4875))+(((-1.0)*x4874*x4876))+((r21*x4877)));
evalcond[3]=((-1.0)+(((-1.0)*x4874*x4875))+((r21*x4878))+((r22*x4870)));
evalcond[4]=(sj0+(((-1.0)*x4871*x4876))+(((-1.0)*r02*x4875))+((x4870*x4872)));
evalcond[5]=((((-1.0)*r12*x4875))+((r11*x4877))+(((-1.0)*x4873*x4876))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4879=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4879.valid){
continue;
}
CheckValue<IkReal> x4880 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4879.value)))+(x4880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4881=IKcos(j4);
IkReal x4882=IKsin(j4);
IkReal x4883=(cj5*r00);
IkReal x4884=(r01*sj5);
IkReal x4885=(cj5*r10);
IkReal x4886=(cj5*r20);
IkReal x4887=((1.0)*x4881);
IkReal x4888=((1.0)*x4882);
IkReal x4889=(sj5*x4882);
IkReal x4890=(sj5*x4881);
evalcond[0]=(((r02*x4882))+(((-1.0)*x4883*x4887))+((x4881*x4884)));
evalcond[1]=(((r11*x4890))+((r12*x4882))+(((-1.0)*x4885*x4887)));
evalcond[2]=((((-1.0)*x4886*x4888))+(((-1.0)*r22*x4887))+((r21*x4889)));
evalcond[3]=((-1.0)+((r21*x4890))+(((-1.0)*x4886*x4887))+((r22*x4882)));
evalcond[4]=(sj0+(((-1.0)*x4883*x4888))+(((-1.0)*r02*x4887))+((x4882*x4884)));
evalcond[5]=(((r11*x4889))+(((-1.0)*r12*x4887))+(((-1.0)*x4885*x4888))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4891=IKsin(j0);
IkReal x4892=IKcos(j0);
evalcond[0]=((((-0.5723)*x4892))+(((-1.0)*px))+(((0.163941)*x4891)));
evalcond[1]=((((-0.5723)*x4891))+(((-0.163941)*x4892))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4893=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4893;
j4eval[1]=IKsign(x4893);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4894=((1.0)*cj5);
IkReal x4895=((((-1.0)*r11*x4894))+(((-1.0)*r10*sj5)));
j4eval[0]=x4895;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4894)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4896=cj5*cj5;
IkReal x4897=((1.0)*r20);
IkReal x4898=(r01*r21);
IkReal x4899=(r21*sj5);
IkReal x4900=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4896*x4897))+(((-1.0)*x4898))+((x4896*x4898))+((cj5*r00*x4899)));
j4eval[0]=x4900;
j4eval[1]=((IKabs((((cj0*x4899))+(((-1.0)*cj0*cj5*x4897)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4901=cj5*cj5;
IkReal x4902=((1.0)*r20);
IkReal x4903=(r01*r21);
IkReal x4904=(r21*sj5);
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4901*x4902))+(((-1.0)*x4903))+((x4901*x4903))+((cj5*r00*x4904)))),-1);
if(!x4905.valid){
continue;
}
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4904))+(((-1.0)*cj0*cj5*x4902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4905.value)))+(x4906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4907=IKcos(j4);
IkReal x4908=IKsin(j4);
IkReal x4909=(cj5*r00);
IkReal x4910=(cj5*r10);
IkReal x4911=(cj5*r20);
IkReal x4912=((1.0)*x4907);
IkReal x4913=((1.0)*x4908);
IkReal x4914=(sj5*x4907);
IkReal x4915=(sj5*x4908);
evalcond[0]=(((r21*x4914))+(((-1.0)*x4911*x4912))+((r22*x4908)));
evalcond[1]=(((r21*x4915))+(((-1.0)*x4911*x4913))+(((-1.0)*r22*x4912)));
evalcond[2]=((((-1.0)*x4909*x4912))+((r02*x4908))+cj0+((r01*x4914)));
evalcond[3]=(sj0+(((-1.0)*x4910*x4912))+((r11*x4914))+((r12*x4908)));
evalcond[4]=((((-1.0)*x4909*x4913))+sj0+(((-1.0)*r02*x4912))+((r01*x4915)));
evalcond[5]=((((-1.0)*r12*x4912))+(((-1.0)*x4910*x4913))+((r11*x4915))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4916=((1.0)*cj5);
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4916))+(((-1.0)*r10*sj5)))),-1);
if(!x4917.valid){
continue;
}
CheckValue<IkReal> x4918 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x4916))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4917.value)))+(x4918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4919=IKcos(j4);
IkReal x4920=IKsin(j4);
IkReal x4921=(cj5*r00);
IkReal x4922=(cj5*r10);
IkReal x4923=(cj5*r20);
IkReal x4924=((1.0)*x4919);
IkReal x4925=((1.0)*x4920);
IkReal x4926=(sj5*x4919);
IkReal x4927=(sj5*x4920);
evalcond[0]=(((r22*x4920))+((r21*x4926))+(((-1.0)*x4923*x4924)));
evalcond[1]=(((r21*x4927))+(((-1.0)*r22*x4924))+(((-1.0)*x4923*x4925)));
evalcond[2]=(cj0+((r01*x4926))+((r02*x4920))+(((-1.0)*x4921*x4924)));
evalcond[3]=(sj0+(((-1.0)*x4922*x4924))+((r11*x4926))+((r12*x4920)));
evalcond[4]=((((-1.0)*r02*x4924))+sj0+((r01*x4927))+(((-1.0)*x4921*x4925)));
evalcond[5]=((((-1.0)*x4922*x4925))+(((-1.0)*r12*x4924))+((r11*x4927))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4928 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4928.valid){
continue;
}
CheckValue<IkReal> x4929=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4928.value)+(((1.5707963267949)*(x4929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4930=IKcos(j4);
IkReal x4931=IKsin(j4);
IkReal x4932=(cj5*r00);
IkReal x4933=(cj5*r10);
IkReal x4934=(cj5*r20);
IkReal x4935=((1.0)*x4930);
IkReal x4936=((1.0)*x4931);
IkReal x4937=(sj5*x4930);
IkReal x4938=(sj5*x4931);
evalcond[0]=((((-1.0)*x4934*x4935))+((r22*x4931))+((r21*x4937)));
evalcond[1]=((((-1.0)*x4934*x4936))+((r21*x4938))+(((-1.0)*r22*x4935)));
evalcond[2]=(cj0+(((-1.0)*x4932*x4935))+((r01*x4937))+((r02*x4931)));
evalcond[3]=(((r12*x4931))+sj0+(((-1.0)*x4933*x4935))+((r11*x4937)));
evalcond[4]=(sj0+(((-1.0)*r02*x4935))+(((-1.0)*x4932*x4936))+((r01*x4938)));
evalcond[5]=((((-1.0)*x4933*x4936))+(((-1.0)*r12*x4935))+((r11*x4938))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((-0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.114688717055332)*px))+(((0.828504447384304)*py))), ((((-0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4939=IKsin(j0);
IkReal x4940=IKcos(j0);
evalcond[0]=((((0.163941)*x4939))+(((-1.0)*px))+(((1.1843)*x4940)));
evalcond[1]=((((-0.163941)*x4940))+(((1.1843)*x4939))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4941=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4941;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4942=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4942;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4943=((1.0)*cj5);
IkReal x4944=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4943)));
j4eval[0]=x4944;
j4eval[1]=IKsign(x4944);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4943))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4945=((1.0)*cj5);
CheckValue<IkReal> x4946 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4945))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4946.valid){
continue;
}
CheckValue<IkReal> x4947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4945)))),-1);
if(!x4947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4946.value)+(((1.5707963267949)*(x4947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4948=IKcos(j4);
IkReal x4949=IKsin(j4);
IkReal x4950=((1.0)*cj0);
IkReal x4951=(cj5*r00);
IkReal x4952=(cj5*r10);
IkReal x4953=(cj5*r20);
IkReal x4954=((1.0)*x4948);
IkReal x4955=((1.0)*x4949);
IkReal x4956=(sj5*x4948);
IkReal x4957=(sj5*x4949);
evalcond[0]=(((r21*x4956))+(((-1.0)*x4953*x4954))+((r22*x4949)));
evalcond[1]=((((-1.0)*r22*x4954))+((r21*x4957))+(((-1.0)*x4953*x4955)));
evalcond[2]=(sj0+(((-1.0)*r02*x4954))+((r01*x4957))+(((-1.0)*x4951*x4955)));
evalcond[3]=(((r02*x4949))+(((-1.0)*x4950))+((r01*x4956))+(((-1.0)*x4951*x4954)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4949))+((r11*x4956))+(((-1.0)*x4952*x4954)));
evalcond[5]=((((-1.0)*x4950))+((r11*x4957))+(((-1.0)*r12*x4954))+(((-1.0)*x4952*x4955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4958 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4958.value)+(((1.5707963267949)*(x4959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKcos(j4);
IkReal x4961=IKsin(j4);
IkReal x4962=((1.0)*cj0);
IkReal x4963=(cj5*r00);
IkReal x4964=(cj5*r10);
IkReal x4965=(cj5*r20);
IkReal x4966=((1.0)*x4960);
IkReal x4967=((1.0)*x4961);
IkReal x4968=(sj5*x4960);
IkReal x4969=(sj5*x4961);
evalcond[0]=(((r22*x4961))+(((-1.0)*x4965*x4966))+((r21*x4968)));
evalcond[1]=((((-1.0)*r22*x4966))+(((-1.0)*x4965*x4967))+((r21*x4969)));
evalcond[2]=(sj0+(((-1.0)*x4963*x4967))+(((-1.0)*r02*x4966))+((r01*x4969)));
evalcond[3]=((((-1.0)*x4962))+(((-1.0)*x4963*x4966))+((r02*x4961))+((r01*x4968)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4961))+((r11*x4968))+(((-1.0)*x4964*x4966)));
evalcond[5]=((((-1.0)*x4962))+((r11*x4969))+(((-1.0)*r12*x4966))+(((-1.0)*x4964*x4967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4970.valid){
continue;
}
CheckValue<IkReal> x4971 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4970.value)))+(x4971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4972=IKcos(j4);
IkReal x4973=IKsin(j4);
IkReal x4974=((1.0)*cj0);
IkReal x4975=(cj5*r00);
IkReal x4976=(cj5*r10);
IkReal x4977=(cj5*r20);
IkReal x4978=((1.0)*x4972);
IkReal x4979=((1.0)*x4973);
IkReal x4980=(sj5*x4972);
IkReal x4981=(sj5*x4973);
evalcond[0]=(((r22*x4973))+((r21*x4980))+(((-1.0)*x4977*x4978)));
evalcond[1]=(((r21*x4981))+(((-1.0)*r22*x4978))+(((-1.0)*x4977*x4979)));
evalcond[2]=(((r01*x4981))+(((-1.0)*x4975*x4979))+sj0+(((-1.0)*r02*x4978)));
evalcond[3]=(((r01*x4980))+(((-1.0)*x4975*x4978))+(((-1.0)*x4974))+((r02*x4973)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4980))+((r12*x4973))+(((-1.0)*x4976*x4978)));
evalcond[5]=(((r11*x4981))+(((-1.0)*r12*x4978))+(((-1.0)*x4974))+(((-1.0)*x4976*x4979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((-5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((-5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((5.76187008585712)*px))), ((((1.39529612731731)*px))+(((-5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4982=IKsin(j0);
IkReal x4983=IKcos(j0);
evalcond[0]=((((0.163941)*x4982))+(((0.0397)*x4983))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*x4983))+(((0.0397)*x4982))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4984=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4984;
j4eval[1]=IKsign(x4984);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4985=((1.0)*cj5);
IkReal x4986=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4985)));
j4eval[0]=x4986;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4985))))));
j4eval[2]=IKsign(x4986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4987=cj5*cj5;
IkReal x4988=((1.0)*r20);
IkReal x4989=(r01*r21);
IkReal x4990=(r21*sj5);
IkReal x4991=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4987*x4988))+((x4987*x4989))+(((-1.0)*x4989))+((cj5*r00*x4990)));
j4eval[0]=x4991;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4988))+((cj0*x4990)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4992=cj5*cj5;
IkReal x4993=((1.0)*r20);
IkReal x4994=(r01*r21);
IkReal x4995=(r21*sj5);
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4992*x4994))+(((-1.0)*r00*x4992*x4993))+(((-1.0)*x4994))+((cj5*r00*x4995)))),-1);
if(!x4996.valid){
continue;
}
CheckValue<IkReal> x4997 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4993))+((cj0*x4995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4996.value)))+(x4997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4998=IKcos(j4);
IkReal x4999=IKsin(j4);
IkReal x5000=(cj5*r00);
IkReal x5001=(cj5*r10);
IkReal x5002=(cj5*r20);
IkReal x5003=((1.0)*x4998);
IkReal x5004=((1.0)*x4999);
IkReal x5005=(sj5*x4998);
IkReal x5006=(sj5*x4999);
evalcond[0]=(((r22*x4999))+(((-1.0)*x5002*x5003))+((r21*x5005)));
evalcond[1]=((((-1.0)*x5002*x5004))+((r21*x5006))+(((-1.0)*r22*x5003)));
evalcond[2]=(cj0+((r02*x4999))+(((-1.0)*x5000*x5003))+((r01*x5005)));
evalcond[3]=(sj0+((r11*x5005))+(((-1.0)*x5001*x5003))+((r12*x4999)));
evalcond[4]=(sj0+(((-1.0)*x5000*x5004))+((r01*x5006))+(((-1.0)*r02*x5003)));
evalcond[5]=(((r11*x5006))+(((-1.0)*x5001*x5004))+(((-1.0)*r12*x5003))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5007=((1.0)*cj5);
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5007)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5007)))),-1);
if(!x5009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5008.value)+(((1.5707963267949)*(x5009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5010=IKcos(j4);
IkReal x5011=IKsin(j4);
IkReal x5012=(cj5*r00);
IkReal x5013=(cj5*r10);
IkReal x5014=(cj5*r20);
IkReal x5015=((1.0)*x5010);
IkReal x5016=((1.0)*x5011);
IkReal x5017=(sj5*x5010);
IkReal x5018=(sj5*x5011);
evalcond[0]=((((-1.0)*x5014*x5015))+((r21*x5017))+((r22*x5011)));
evalcond[1]=((((-1.0)*x5014*x5016))+(((-1.0)*r22*x5015))+((r21*x5018)));
evalcond[2]=(cj0+((r02*x5011))+(((-1.0)*x5012*x5015))+((r01*x5017)));
evalcond[3]=(sj0+(((-1.0)*x5013*x5015))+((r11*x5017))+((r12*x5011)));
evalcond[4]=(sj0+(((-1.0)*r02*x5015))+(((-1.0)*x5012*x5016))+((r01*x5018)));
evalcond[5]=((((-1.0)*x5013*x5016))+(((-1.0)*r12*x5015))+((r11*x5018))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
CheckValue<IkReal> x5020=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5019.value)+(((1.5707963267949)*(x5020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5021=IKcos(j4);
IkReal x5022=IKsin(j4);
IkReal x5023=(cj5*r00);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5021);
IkReal x5027=((1.0)*x5022);
IkReal x5028=(sj5*x5021);
IkReal x5029=(sj5*x5022);
evalcond[0]=((((-1.0)*x5025*x5026))+((r22*x5022))+((r21*x5028)));
evalcond[1]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5029)));
evalcond[2]=(((r02*x5022))+cj0+(((-1.0)*x5023*x5026))+((r01*x5028)));
evalcond[3]=(((r11*x5028))+sj0+((r12*x5022))+(((-1.0)*x5024*x5026)));
evalcond[4]=((((-1.0)*r02*x5026))+sj0+(((-1.0)*x5023*x5027))+((r01*x5029)));
evalcond[5]=(((r11*x5029))+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5030=IKsin(j0);
IkReal x5031=IKcos(j0);
IkReal x5032=(cj5*r01);
IkReal x5033=((0.1157)*sj5);
IkReal x5034=(cj5*r11);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5031))+x5032);
evalcond[1]=(((r10*sj5))+(((-1.0)*x5030))+x5034);
evalcond[2]=((((-0.1157)*x5032))+(((-1.0)*px))+(((0.163941)*x5030))+(((-1.0)*r00*x5033)));
evalcond[3]=((((-0.1157)*x5034))+(((-1.0)*py))+(((-0.163941)*x5031))+(((-1.0)*r10*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5035=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5035;
j4eval[1]=IKsign(x5035);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5036=((1.0)*cj5);
IkReal x5037=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5036)));
j4eval[0]=x5037;
j4eval[1]=IKsign(x5037);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5038=cj5*cj5;
IkReal x5039=r01*r01;
IkReal x5040=(cj5*r00);
IkReal x5041=(r01*sj5);
IkReal x5042=(((x5038*x5039))+(((2.0)*x5040*x5041))+(((-1.0)*(r02*r02)))+(((-1.0)*x5039))+(((-1.0)*x5038*(r00*r00))));
j4eval[0]=x5042;
j4eval[1]=IKsign(x5042);
j4eval[2]=((IKabs((r02*sj0)))+(IKabs(((((-1.0)*sj0*x5040))+((sj0*x5041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5043=cj5*cj5;
IkReal x5044=r01*r01;
IkReal x5045=(cj5*r00);
IkReal x5046=(r01*sj5);
CheckValue<IkReal> x5047 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5045))+((sj0*x5046)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5047.valid){
continue;
}
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((2.0)*x5045*x5046))+(((-1.0)*(r02*r02)))+((x5043*x5044))+(((-1.0)*x5043*(r00*r00)))+(((-1.0)*x5044)))),-1);
if(!x5048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5047.value)+(((1.5707963267949)*(x5048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5049=IKcos(j4);
IkReal x5050=IKsin(j4);
IkReal x5051=(cj5*r00);
IkReal x5052=(r01*sj5);
IkReal x5053=(cj5*r10);
IkReal x5054=(cj5*r20);
IkReal x5055=((1.0)*x5049);
IkReal x5056=((1.0)*x5050);
IkReal x5057=(sj5*x5050);
IkReal x5058=(sj5*x5049);
evalcond[0]=(((x5049*x5052))+((r02*x5050))+(((-1.0)*x5051*x5055)));
evalcond[1]=(((r12*x5050))+((r11*x5058))+(((-1.0)*x5053*x5055)));
evalcond[2]=(((r21*x5057))+(((-1.0)*x5054*x5056))+(((-1.0)*r22*x5055)));
evalcond[3]=((-1.0)+((r21*x5058))+(((-1.0)*x5054*x5055))+((r22*x5050)));
evalcond[4]=(sj0+((x5050*x5052))+(((-1.0)*r02*x5055))+(((-1.0)*x5051*x5056)));
evalcond[5]=((((-1.0)*r12*x5055))+((r11*x5057))+(((-1.0)*x5053*x5056))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5059=((1.0)*cj5);
CheckValue<IkReal> x5060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5059)))),-1);
if(!x5060.valid){
continue;
}
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5059)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5060.value)))+(x5061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5062=IKcos(j4);
IkReal x5063=IKsin(j4);
IkReal x5064=(cj5*r00);
IkReal x5065=(r01*sj5);
IkReal x5066=(cj5*r10);
IkReal x5067=(cj5*r20);
IkReal x5068=((1.0)*x5062);
IkReal x5069=((1.0)*x5063);
IkReal x5070=(sj5*x5063);
IkReal x5071=(sj5*x5062);
evalcond[0]=(((x5062*x5065))+((r02*x5063))+(((-1.0)*x5064*x5068)));
evalcond[1]=((((-1.0)*x5066*x5068))+((r12*x5063))+((r11*x5071)));
evalcond[2]=(((r21*x5070))+(((-1.0)*r22*x5068))+(((-1.0)*x5067*x5069)));
evalcond[3]=((-1.0)+((r21*x5071))+((r22*x5063))+(((-1.0)*x5067*x5068)));
evalcond[4]=(sj0+((x5063*x5065))+(((-1.0)*r02*x5068))+(((-1.0)*x5064*x5069)));
evalcond[5]=((((-1.0)*x5066*x5069))+(((-1.0)*r12*x5068))+(((-1.0)*cj0))+((r11*x5070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5072=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5072.valid){
continue;
}
CheckValue<IkReal> x5073 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5072.value)))+(x5073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5074=IKcos(j4);
IkReal x5075=IKsin(j4);
IkReal x5076=(cj5*r00);
IkReal x5077=(r01*sj5);
IkReal x5078=(cj5*r10);
IkReal x5079=(cj5*r20);
IkReal x5080=((1.0)*x5074);
IkReal x5081=((1.0)*x5075);
IkReal x5082=(sj5*x5075);
IkReal x5083=(sj5*x5074);
evalcond[0]=(((r02*x5075))+((x5074*x5077))+(((-1.0)*x5076*x5080)));
evalcond[1]=(((r11*x5083))+(((-1.0)*x5078*x5080))+((r12*x5075)));
evalcond[2]=(((r21*x5082))+(((-1.0)*x5079*x5081))+(((-1.0)*r22*x5080)));
evalcond[3]=((-1.0)+((r21*x5083))+(((-1.0)*x5079*x5080))+((r22*x5075)));
evalcond[4]=(sj0+((x5075*x5077))+(((-1.0)*r02*x5080))+(((-1.0)*x5076*x5081)));
evalcond[5]=((((-1.0)*r12*x5080))+((r11*x5082))+(((-1.0)*x5078*x5081))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5084=IKsin(j0);
IkReal x5085=IKcos(j0);
evalcond[0]=((((-0.5723)*x5085))+(((0.163941)*x5084))+(((-1.0)*px)));
evalcond[1]=((((-0.5723)*x5084))+(((-1.0)*py))+(((-0.163941)*x5085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5086=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5086;
j4eval[1]=IKsign(x5086);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5087=((1.0)*cj5);
IkReal x5088=((((-1.0)*r11*x5087))+(((-1.0)*r10*sj5)));
j4eval[0]=x5088;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5087)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5089=cj5*cj5;
IkReal x5090=((1.0)*r20);
IkReal x5091=(r01*r21);
IkReal x5092=(r21*sj5);
IkReal x5093=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5091))+(((-1.0)*r00*x5089*x5090))+((x5089*x5091))+((cj5*r00*x5092)));
j4eval[0]=x5093;
j4eval[1]=((IKabs((((cj0*x5092))+(((-1.0)*cj0*cj5*x5090)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5094=cj5*cj5;
IkReal x5095=((1.0)*r20);
IkReal x5096=(r01*r21);
IkReal x5097=(r21*sj5);
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5097))+(((-1.0)*cj0*cj5*x5095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
CheckValue<IkReal> x5099=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5096))+((x5094*x5096))+(((-1.0)*r00*x5094*x5095))+((cj5*r00*x5097)))),-1);
if(!x5099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5098.value)+(((1.5707963267949)*(x5099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5100=IKcos(j4);
IkReal x5101=IKsin(j4);
IkReal x5102=(cj5*r00);
IkReal x5103=(cj5*r10);
IkReal x5104=(cj5*r20);
IkReal x5105=((1.0)*x5100);
IkReal x5106=((1.0)*x5101);
IkReal x5107=(sj5*x5100);
IkReal x5108=(sj5*x5101);
evalcond[0]=(((r22*x5101))+((r21*x5107))+(((-1.0)*x5104*x5105)));
evalcond[1]=((((-1.0)*r22*x5105))+((r21*x5108))+(((-1.0)*x5104*x5106)));
evalcond[2]=(((r01*x5107))+cj0+((r02*x5101))+(((-1.0)*x5102*x5105)));
evalcond[3]=(((r12*x5101))+sj0+(((-1.0)*x5103*x5105))+((r11*x5107)));
evalcond[4]=(((r01*x5108))+sj0+(((-1.0)*r02*x5105))+(((-1.0)*x5102*x5106)));
evalcond[5]=((((-1.0)*x5103*x5106))+((r11*x5108))+(((-1.0)*r12*x5105))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5109=((1.0)*cj5);
CheckValue<IkReal> x5110 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5109)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5110.valid){
continue;
}
CheckValue<IkReal> x5111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5109)))),-1);
if(!x5111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5110.value)+(((1.5707963267949)*(x5111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5112=IKcos(j4);
IkReal x5113=IKsin(j4);
IkReal x5114=(cj5*r00);
IkReal x5115=(cj5*r10);
IkReal x5116=(cj5*r20);
IkReal x5117=((1.0)*x5112);
IkReal x5118=((1.0)*x5113);
IkReal x5119=(sj5*x5112);
IkReal x5120=(sj5*x5113);
evalcond[0]=((((-1.0)*x5116*x5117))+((r21*x5119))+((r22*x5113)));
evalcond[1]=((((-1.0)*r22*x5117))+(((-1.0)*x5116*x5118))+((r21*x5120)));
evalcond[2]=(((r01*x5119))+cj0+((r02*x5113))+(((-1.0)*x5114*x5117)));
evalcond[3]=(sj0+(((-1.0)*x5115*x5117))+((r11*x5119))+((r12*x5113)));
evalcond[4]=(sj0+(((-1.0)*r02*x5117))+(((-1.0)*x5114*x5118))+((r01*x5120)));
evalcond[5]=((((-1.0)*x5115*x5118))+((r11*x5120))+(((-1.0)*r12*x5117))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
CheckValue<IkReal> x5122=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5121.value)+(((1.5707963267949)*(x5122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5123=IKcos(j4);
IkReal x5124=IKsin(j4);
IkReal x5125=(cj5*r00);
IkReal x5126=(cj5*r10);
IkReal x5127=(cj5*r20);
IkReal x5128=((1.0)*x5123);
IkReal x5129=((1.0)*x5124);
IkReal x5130=(sj5*x5123);
IkReal x5131=(sj5*x5124);
evalcond[0]=(((r22*x5124))+((r21*x5130))+(((-1.0)*x5127*x5128)));
evalcond[1]=(((r21*x5131))+(((-1.0)*x5127*x5129))+(((-1.0)*r22*x5128)));
evalcond[2]=((((-1.0)*x5125*x5128))+cj0+((r01*x5130))+((r02*x5124)));
evalcond[3]=(sj0+(((-1.0)*x5126*x5128))+((r12*x5124))+((r11*x5130)));
evalcond[4]=(sj0+(((-1.0)*x5125*x5129))+((r01*x5131))+(((-1.0)*r02*x5128)));
evalcond[5]=((((-1.0)*x5126*x5129))+((r11*x5131))+(((-1.0)*r12*x5128))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5132=((1.0)*sj5);
IkReal x5133=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5133))+(((-1.0)*r00*x5132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5133))))+IKsqr(((((-1.0)*r01*x5133))+(((-1.0)*r00*x5132))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5132))+(((-1.0)*r11*x5133))), ((((-1.0)*r01*x5133))+(((-1.0)*r00*x5132))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5134=IKsin(j0);
IkReal x5135=IKcos(j0);
IkReal x5136=(cj5*r01);
IkReal x5137=((0.1157)*sj5);
IkReal x5138=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5136+x5135);
evalcond[1]=(((r10*sj5))+x5138+x5134);
evalcond[2]=((((-0.1157)*x5136))+(((-1.0)*r00*x5137))+(((-1.0)*px))+(((0.163941)*x5134)));
evalcond[3]=((((-0.1157)*x5138))+(((-1.0)*r10*x5137))+(((-0.163941)*x5135))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5139=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5139;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5140=((1.0)*cj5);
IkReal x5141=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5140)));
j4eval[0]=x5141;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5140))))));
j4eval[2]=IKsign(x5141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5142=cj5*cj5;
IkReal x5143=r01*r01;
IkReal x5144=(cj5*r00);
IkReal x5145=(r01*sj5);
IkReal x5146=(((x5142*x5143))+(((-1.0)*x5142*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5143))+(((2.0)*x5144*x5145)));
j4eval[0]=x5146;
j4eval[1]=IKsign(x5146);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5144))+((sj0*x5145)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5147=cj5*cj5;
IkReal x5148=r01*r01;
IkReal x5149=(cj5*r00);
IkReal x5150=(r01*sj5);
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign((((x5147*x5148))+(((2.0)*x5149*x5150))+(((-1.0)*(r02*r02)))+(((-1.0)*x5147*(r00*r00)))+(((-1.0)*x5148)))),-1);
if(!x5151.valid){
continue;
}
CheckValue<IkReal> x5152 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5149))+((sj0*x5150)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5151.value)))+(x5152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5153=IKcos(j4);
IkReal x5154=IKsin(j4);
IkReal x5155=(cj5*r00);
IkReal x5156=(r01*sj5);
IkReal x5157=(cj5*r10);
IkReal x5158=(cj5*r20);
IkReal x5159=((1.0)*x5153);
IkReal x5160=((1.0)*x5154);
IkReal x5161=(sj5*x5154);
IkReal x5162=(sj5*x5153);
evalcond[0]=(((x5153*x5156))+((r02*x5154))+(((-1.0)*x5155*x5159)));
evalcond[1]=(((r12*x5154))+((r11*x5162))+(((-1.0)*x5157*x5159)));
evalcond[2]=(((r21*x5161))+(((-1.0)*r22*x5159))+(((-1.0)*x5158*x5160)));
evalcond[3]=((1.0)+((r21*x5162))+((r22*x5154))+(((-1.0)*x5158*x5159)));
evalcond[4]=(sj0+((x5154*x5156))+(((-1.0)*x5155*x5160))+(((-1.0)*r02*x5159)));
evalcond[5]=((((-1.0)*x5157*x5160))+(((-1.0)*r12*x5159))+((r11*x5161))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5163=((1.0)*cj5);
CheckValue<IkReal> x5164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5163)))),-1);
if(!x5164.valid){
continue;
}
CheckValue<IkReal> x5165 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5163)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5164.value)))+(x5165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5166=IKcos(j4);
IkReal x5167=IKsin(j4);
IkReal x5168=(cj5*r00);
IkReal x5169=(r01*sj5);
IkReal x5170=(cj5*r10);
IkReal x5171=(cj5*r20);
IkReal x5172=((1.0)*x5166);
IkReal x5173=((1.0)*x5167);
IkReal x5174=(sj5*x5167);
IkReal x5175=(sj5*x5166);
evalcond[0]=(((x5166*x5169))+(((-1.0)*x5168*x5172))+((r02*x5167)));
evalcond[1]=((((-1.0)*x5170*x5172))+((r12*x5167))+((r11*x5175)));
evalcond[2]=((((-1.0)*r22*x5172))+((r21*x5174))+(((-1.0)*x5171*x5173)));
evalcond[3]=((1.0)+((r22*x5167))+((r21*x5175))+(((-1.0)*x5171*x5172)));
evalcond[4]=(sj0+(((-1.0)*r02*x5172))+((x5167*x5169))+(((-1.0)*x5168*x5173)));
evalcond[5]=((((-1.0)*x5170*x5173))+(((-1.0)*r12*x5172))+((r11*x5174))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5176 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5176.valid){
continue;
}
CheckValue<IkReal> x5177=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5176.value)+(((1.5707963267949)*(x5177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5178=IKcos(j4);
IkReal x5179=IKsin(j4);
IkReal x5180=(cj5*r00);
IkReal x5181=(r01*sj5);
IkReal x5182=(cj5*r10);
IkReal x5183=(cj5*r20);
IkReal x5184=((1.0)*x5178);
IkReal x5185=((1.0)*x5179);
IkReal x5186=(sj5*x5179);
IkReal x5187=(sj5*x5178);
evalcond[0]=(((r02*x5179))+((x5178*x5181))+(((-1.0)*x5180*x5184)));
evalcond[1]=((((-1.0)*x5182*x5184))+((r12*x5179))+((r11*x5187)));
evalcond[2]=((((-1.0)*x5183*x5185))+(((-1.0)*r22*x5184))+((r21*x5186)));
evalcond[3]=((1.0)+(((-1.0)*x5183*x5184))+((r21*x5187))+((r22*x5179)));
evalcond[4]=(sj0+(((-1.0)*r02*x5184))+((x5179*x5181))+(((-1.0)*x5180*x5185)));
evalcond[5]=((((-1.0)*x5182*x5185))+(((-1.0)*r12*x5184))+((r11*x5186))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((0.462582327146012)*px))), ((((1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5188=IKsin(j0);
IkReal x5189=IKcos(j0);
evalcond[0]=((((0.163941)*x5188))+(((0.5723)*x5189))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*x5189))+(((0.5723)*x5188))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5190=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5190;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5191=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5191;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5192=((1.0)*cj5);
IkReal x5193=((((-1.0)*r01*x5192))+(((-1.0)*r00*sj5)));
j4eval[0]=x5193;
j4eval[1]=IKsign(x5193);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5192))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5194=((1.0)*cj5);
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5194))+(((-1.0)*r00*sj5)))),-1);
if(!x5195.valid){
continue;
}
CheckValue<IkReal> x5196 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5194)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5195.value)))+(x5196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5197=IKcos(j4);
IkReal x5198=IKsin(j4);
IkReal x5199=((1.0)*cj0);
IkReal x5200=(cj5*r00);
IkReal x5201=(cj5*r10);
IkReal x5202=(cj5*r20);
IkReal x5203=((1.0)*x5197);
IkReal x5204=((1.0)*x5198);
IkReal x5205=(sj5*x5197);
IkReal x5206=(sj5*x5198);
evalcond[0]=(((r22*x5198))+(((-1.0)*x5202*x5203))+((r21*x5205)));
evalcond[1]=((((-1.0)*r22*x5203))+(((-1.0)*x5202*x5204))+((r21*x5206)));
evalcond[2]=((((-1.0)*r02*x5203))+sj0+(((-1.0)*x5200*x5204))+((r01*x5206)));
evalcond[3]=((((-1.0)*x5200*x5203))+((r01*x5205))+((r02*x5198))+(((-1.0)*x5199)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5201*x5203))+((r11*x5205))+((r12*x5198)));
evalcond[5]=((((-1.0)*x5201*x5204))+(((-1.0)*x5199))+((r11*x5206))+(((-1.0)*r12*x5203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5207 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5207.valid){
continue;
}
CheckValue<IkReal> x5208=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5207.value)+(((1.5707963267949)*(x5208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5209=IKcos(j4);
IkReal x5210=IKsin(j4);
IkReal x5211=((1.0)*cj0);
IkReal x5212=(cj5*r00);
IkReal x5213=(cj5*r10);
IkReal x5214=(cj5*r20);
IkReal x5215=((1.0)*x5209);
IkReal x5216=((1.0)*x5210);
IkReal x5217=(sj5*x5209);
IkReal x5218=(sj5*x5210);
evalcond[0]=((((-1.0)*x5214*x5215))+((r22*x5210))+((r21*x5217)));
evalcond[1]=((((-1.0)*x5214*x5216))+(((-1.0)*r22*x5215))+((r21*x5218)));
evalcond[2]=(((r01*x5218))+sj0+(((-1.0)*x5212*x5216))+(((-1.0)*r02*x5215)));
evalcond[3]=(((r01*x5217))+(((-1.0)*x5212*x5215))+(((-1.0)*x5211))+((r02*x5210)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5213*x5215))+((r12*x5210))+((r11*x5217)));
evalcond[5]=((((-1.0)*x5211))+(((-1.0)*x5213*x5216))+((r11*x5218))+(((-1.0)*r12*x5215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5219=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5219.valid){
continue;
}
CheckValue<IkReal> x5220 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5219.value)))+(x5220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5221=IKcos(j4);
IkReal x5222=IKsin(j4);
IkReal x5223=((1.0)*cj0);
IkReal x5224=(cj5*r00);
IkReal x5225=(cj5*r10);
IkReal x5226=(cj5*r20);
IkReal x5227=((1.0)*x5221);
IkReal x5228=((1.0)*x5222);
IkReal x5229=(sj5*x5221);
IkReal x5230=(sj5*x5222);
evalcond[0]=(((r21*x5229))+((r22*x5222))+(((-1.0)*x5226*x5227)));
evalcond[1]=(((r21*x5230))+(((-1.0)*x5226*x5228))+(((-1.0)*r22*x5227)));
evalcond[2]=(sj0+((r01*x5230))+(((-1.0)*x5224*x5228))+(((-1.0)*r02*x5227)));
evalcond[3]=(((r02*x5222))+(((-1.0)*x5224*x5227))+(((-1.0)*x5223))+((r01*x5229)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5225*x5227))+((r11*x5229))+((r12*x5222)));
evalcond[5]=(((r11*x5230))+(((-1.0)*r12*x5227))+(((-1.0)*x5225*x5228))+(((-1.0)*x5223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5231=cj1*cj1;
IkReal x5232=(cj1*sj2);
IkReal x5233=(cj2*sj1);
IkReal x5234=(cj5*r01);
IkReal x5235=(r00*sj5);
IkReal x5236=((1000000.0)*py);
IkReal x5237=(cj1*sj1);
IkReal x5238=(sj2*x5231);
IkReal x5239=((115700.0)*r10*sj5);
IkReal x5240=((115700.0)*cj5*r11);
CheckValue<IkReal> x5241=IKPowWithIntegerCheck(((((-1144600.0)*cj1*cj2*x5233))+(((-1144600.0)*cj2*x5238))+(((572300.0)*cj2*sj2))+(((-612000.0)*x5238))+(((-612000.0)*cj1*x5233))+(((572300.0)*x5237))),-1);
if(!x5241.valid){
continue;
}
CheckValue<IkReal> x5242=IKPowWithIntegerCheck((x5232+x5233),-1);
if(!x5242.valid){
continue;
}
if( IKabs(((x5241.value)*((((x5233*x5239))+((x5233*x5236))+((x5232*x5240))+((x5232*x5236))+((x5232*x5239))+((x5233*x5240))+(((-163941.0)*x5235))+(((-163941.0)*x5234)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5242.value)*(((((-1.0)*x5234))+(((-1.0)*x5235)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5241.value)*((((x5233*x5239))+((x5233*x5236))+((x5232*x5240))+((x5232*x5236))+((x5232*x5239))+((x5233*x5240))+(((-163941.0)*x5235))+(((-163941.0)*x5234))))))+IKsqr(((x5242.value)*(((((-1.0)*x5234))+(((-1.0)*x5235))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5241.value)*((((x5233*x5239))+((x5233*x5236))+((x5232*x5240))+((x5232*x5236))+((x5232*x5239))+((x5233*x5240))+(((-163941.0)*x5235))+(((-163941.0)*x5234))))), ((x5242.value)*(((((-1.0)*x5234))+(((-1.0)*x5235))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5243=IKcos(j0);
IkReal x5244=IKsin(j0);
IkReal x5245=(cj5*r01);
IkReal x5246=((0.1157)*sj5);
IkReal x5247=(cj5*r11);
IkReal x5248=((0.5723)*sj1*sj2);
IkReal x5249=(cj2*x5243);
IkReal x5250=(cj1*x5244);
IkReal x5251=(cj1*x5243);
evalcond[0]=(((r00*sj5))+((sj2*x5251))+x5245+((sj1*x5249)));
evalcond[1]=(((sj2*x5250))+((r10*sj5))+((cj2*sj1*x5244))+x5247);
evalcond[2]=((((0.163941)*x5244))+(((-1.0)*r00*x5246))+(((-1.0)*px))+(((-0.612)*x5251))+(((-0.5723)*cj1*x5249))+((x5243*x5248))+(((-0.1157)*x5245)));
evalcond[3]=((((-1.0)*r10*x5246))+((x5244*x5248))+(((-1.0)*py))+(((-0.612)*x5250))+(((-0.163941)*x5243))+(((-0.1157)*x5247))+(((-0.5723)*cj2*x5250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5252=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5252;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5253=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5253;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5254=((1.0)*cj5);
IkReal x5255=((((-1.0)*r21*x5254))+(((-1.0)*r20*sj5)));
j4eval[0]=x5255;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5254))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5254))))));
j4eval[2]=IKsign(x5255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5256=((-1.0)*r20);
IkReal x5258 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5258)==0){
continue;
}
IkReal x5257=pow(x5258,-0.5);
CheckValue<IkReal> x5259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5256),IKFAST_ATAN2_MAGTHRESH);
if(!x5259.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5259.value));
IkReal gconst115=(r21*x5257);
IkReal gconst116=(x5256*x5257);
CheckValue<IkReal> x5260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5260.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5261=((-1.0)*r20);
IkReal x5262=x5257;
CheckValue<IkReal> x5264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5261),IKFAST_ATAN2_MAGTHRESH);
if(!x5264.valid){
continue;
}
IkReal x5263=((-1.0)*(x5264.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5263;
IkReal gconst114=x5263;
IkReal gconst115=(r21*x5262);
IkReal gconst116=(x5261*x5262);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5265=((-1.0)*r20);
IkReal x5266=x5257;
CheckValue<IkReal> x5268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5265),IKFAST_ATAN2_MAGTHRESH);
if(!x5268.valid){
continue;
}
IkReal x5267=((-1.0)*(x5268.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5267;
IkReal gconst114=x5267;
IkReal gconst115=(r21*x5266);
IkReal gconst116=(x5265*x5266);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5269=((-1.0)*r20);
IkReal x5270=x5257;
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5269),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
IkReal x5271=((-1.0)*(x5272.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5271;
IkReal gconst114=x5271;
IkReal gconst115=(r21*x5270);
IkReal gconst116=(x5269*x5270);
IkReal x5273=((1.0)*(r22*r22));
CheckValue<IkReal> x5277=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5273))),-1);
if(!x5277.valid){
continue;
}
IkReal x5274=x5277.value;
IkReal x5275=((1.0)*x5274);
IkReal x5276=((((-1.0)*x5275*(r20*r20*r20*r20)))+(((-1.0)*x5273))+(((-1.0)*x5275*(r21*r21*r21*r21)))+(((-2.0)*x5274*(r20*r20)*(r21*r21))));
j4eval[0]=x5276;
j4eval[1]=IKsign(x5276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5278=(cj2*sj1);
IkReal x5279=(gconst115*r21);
IkReal x5280=(cj1*sj2);
IkReal x5281=((1.0)*gconst116*r20);
CheckValue<IkReal> x5282 = IKatan2WithCheck(IkReal((((r22*x5278))+((r22*x5280)))),IkReal((((x5279*x5280))+(((-1.0)*x5278*x5281))+((x5278*x5279))+(((-1.0)*x5280*x5281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5282.valid){
continue;
}
CheckValue<IkReal> x5283=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5279))+(((-1.0)*gconst116*r20*x5281))+(((-1.0)*(x5279*x5279)))+(((-1.0)*(r22*r22))))),-1);
if(!x5283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5282.value)+(((1.5707963267949)*(x5283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5284=IKsin(j4);
IkReal x5285=IKcos(j4);
IkReal x5286=(cj1*cj2);
IkReal x5287=((1.0)*x5285);
IkReal x5288=(gconst115*x5284);
IkReal x5289=(gconst115*x5285);
IkReal x5290=((1.0)*sj1*sj2);
IkReal x5291=((1.0)*gconst116*x5284);
evalcond[0]=((((-1.0)*r22*x5287))+((r21*x5288))+(((-1.0)*r20*x5291)));
evalcond[1]=(sj0+(((-1.0)*r00*x5291))+((r01*x5288))+(((-1.0)*r02*x5287)));
evalcond[2]=((((-1.0)*r12*x5287))+(((-1.0)*r10*x5291))+(((-1.0)*cj0))+((r11*x5288)));
evalcond[3]=(((cj2*sj1))+((r22*x5284))+(((-1.0)*gconst116*r20*x5287))+((r21*x5289))+((cj1*sj2)));
evalcond[4]=((((-1.0)*gconst116*r00*x5287))+((r02*x5284))+((cj0*x5286))+((r01*x5289))+(((-1.0)*cj0*x5290)));
evalcond[5]=(((r12*x5284))+((sj0*x5286))+(((-1.0)*sj0*x5290))+(((-1.0)*gconst116*r10*x5287))+((r11*x5289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
CheckValue<IkReal> x5293=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5292.value)+(((1.5707963267949)*(x5293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5294=IKsin(j4);
IkReal x5295=IKcos(j4);
IkReal x5296=(cj1*cj2);
IkReal x5297=((1.0)*x5295);
IkReal x5298=(gconst115*x5294);
IkReal x5299=(gconst115*x5295);
IkReal x5300=((1.0)*sj1*sj2);
IkReal x5301=((1.0)*gconst116*x5294);
evalcond[0]=((((-1.0)*r22*x5297))+((r21*x5298))+(((-1.0)*r20*x5301)));
evalcond[1]=(sj0+(((-1.0)*r00*x5301))+((r01*x5298))+(((-1.0)*r02*x5297)));
evalcond[2]=((((-1.0)*r12*x5297))+(((-1.0)*r10*x5301))+((r11*x5298))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x5294))+((cj1*sj2))+((r21*x5299))+(((-1.0)*gconst116*r20*x5297)));
evalcond[4]=((((-1.0)*gconst116*r00*x5297))+(((-1.0)*cj0*x5300))+((r02*x5294))+((cj0*x5296))+((r01*x5299)));
evalcond[5]=(((r12*x5294))+((sj0*x5296))+(((-1.0)*gconst116*r10*x5297))+((r11*x5299))+(((-1.0)*sj0*x5300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5302.valid){
continue;
}
CheckValue<IkReal> x5303 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5302.value)))+(x5303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5304=IKsin(j4);
IkReal x5305=IKcos(j4);
IkReal x5306=(cj1*cj2);
IkReal x5307=((1.0)*x5305);
IkReal x5308=(gconst115*x5304);
IkReal x5309=(gconst115*x5305);
IkReal x5310=((1.0)*sj1*sj2);
IkReal x5311=((1.0)*gconst116*x5304);
evalcond[0]=((((-1.0)*r22*x5307))+((r21*x5308))+(((-1.0)*r20*x5311)));
evalcond[1]=(sj0+(((-1.0)*r00*x5311))+(((-1.0)*r02*x5307))+((r01*x5308)));
evalcond[2]=((((-1.0)*r12*x5307))+((r11*x5308))+(((-1.0)*cj0))+(((-1.0)*r10*x5311)));
evalcond[3]=(((r21*x5309))+((cj2*sj1))+((cj1*sj2))+((r22*x5304))+(((-1.0)*gconst116*r20*x5307)));
evalcond[4]=((((-1.0)*cj0*x5310))+((r02*x5304))+(((-1.0)*gconst116*r00*x5307))+((r01*x5309))+((cj0*x5306)));
evalcond[5]=((((-1.0)*sj0*x5310))+((sj0*x5306))+((r12*x5304))+(((-1.0)*gconst116*r10*x5307))+((r11*x5309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5312=((-1.0)*r21);
IkReal x5314 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5314)==0){
continue;
}
IkReal x5313=pow(x5314,-0.5);
CheckValue<IkReal> x5315 = IKatan2WithCheck(IkReal(x5312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5315.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5315.value))));
IkReal gconst118=(x5312*x5313);
IkReal gconst119=((1.0)*r20*x5313);
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5316.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5317=((-1.0)*r21);
CheckValue<IkReal> x5320 = IKatan2WithCheck(IkReal(x5317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5320.valid){
continue;
}
IkReal x5318=((1.0)*(x5320.value));
IkReal x5319=x5313;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5318)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5318)));
IkReal gconst118=(x5317*x5319);
IkReal gconst119=((1.0)*r20*x5319);
IkReal x5321=r22*r22;
IkReal x5322=((1.0)*x5321);
CheckValue<IkReal> x5326=IKPowWithIntegerCheck(((-1.0)+x5321),-1);
if(!x5326.valid){
continue;
}
IkReal x5323=x5326.value;
if((((1.0)+(((-1.0)*x5322)))) < -0.00001)
continue;
IkReal x5324=IKsqrt(((1.0)+(((-1.0)*x5322))));
IkReal x5325=(sj0*x5323*x5324);
j4eval[0]=((IKabs((x5325+(((-1.0)*x5322*x5325)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5327=((-1.0)*r21);
CheckValue<IkReal> x5330 = IKatan2WithCheck(IkReal(x5327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5330.valid){
continue;
}
IkReal x5328=((1.0)*(x5330.value));
IkReal x5329=x5313;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5328)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5328)));
IkReal gconst118=(x5327*x5329);
IkReal gconst119=((1.0)*r20*x5329);
IkReal x5331=r22*r22;
IkReal x5332=((1.0)*x5331);
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(((-1.0)+x5331),-1);
if(!x5336.valid){
continue;
}
IkReal x5333=x5336.value;
if((((1.0)+(((-1.0)*x5332)))) < -0.00001)
continue;
IkReal x5334=IKsqrt(((1.0)+(((-1.0)*x5332))));
IkReal x5335=(cj0*x5333*x5334);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5335+(((-1.0)*x5332*x5335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5337=((-1.0)*r21);
CheckValue<IkReal> x5340 = IKatan2WithCheck(IkReal(x5337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5340.valid){
continue;
}
IkReal x5338=((1.0)*(x5340.value));
IkReal x5339=x5313;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5338)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5338)));
IkReal gconst118=(x5337*x5339);
IkReal gconst119=((1.0)*r20*x5339);
IkReal x5341=r22*r22;
IkReal x5342=(cj0*r02);
IkReal x5343=(r12*sj0);
CheckValue<IkReal> x5347=IKPowWithIntegerCheck(((-1.0)+x5341),-1);
if(!x5347.valid){
continue;
}
IkReal x5344=x5347.value;
if((((1.0)+(((-1.0)*x5341)))) < -0.00001)
continue;
IkReal x5345=IKsqrt(((1.0)+(((-1.0)*x5341))));
IkReal x5346=((1.0)*r22*x5344*x5345);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5343*x5346))+(((-1.0)*x5342*x5346)))))+(IKabs((x5342+x5343))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5348=((1.0)*gconst119);
CheckValue<IkReal> x5349 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5348))+(((-1.0)*r10*sj0*x5348))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5348)))),-1);
if(!x5350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5349.value)+(((1.5707963267949)*(x5350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5351=IKsin(j4);
IkReal x5352=IKcos(j4);
IkReal x5353=(cj1*cj2);
IkReal x5354=(gconst118*r01);
IkReal x5355=(gconst119*r20);
IkReal x5356=(gconst119*r10);
IkReal x5357=(gconst119*r00);
IkReal x5358=(gconst118*r21);
IkReal x5359=(gconst118*r11);
IkReal x5360=((1.0)*cj0);
IkReal x5361=(sj1*sj2);
IkReal x5362=((1.0)*x5352);
IkReal x5363=((1.0)*x5351);
evalcond[0]=((((-1.0)*r22*x5362))+((x5351*x5358))+(((-1.0)*x5355*x5363)));
evalcond[1]=(sj0+((x5351*x5354))+(((-1.0)*r02*x5362))+(((-1.0)*x5357*x5363)));
evalcond[2]=(((x5351*x5359))+(((-1.0)*x5356*x5363))+(((-1.0)*r12*x5362))+(((-1.0)*x5360)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5351))+((x5352*x5358))+(((-1.0)*x5355*x5362)));
evalcond[4]=((((-1.0)*x5360*x5361))+((cj0*x5353))+((x5352*x5354))+((r02*x5351))+(((-1.0)*x5357*x5362)));
evalcond[5]=(((sj0*x5353))+((x5352*x5359))+((r12*x5351))+(((-1.0)*sj0*x5361))+(((-1.0)*x5356*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5364=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5364.valid){
continue;
}
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5364.value)))+(x5365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5366=IKsin(j4);
IkReal x5367=IKcos(j4);
IkReal x5368=(cj1*cj2);
IkReal x5369=(gconst118*r01);
IkReal x5370=(gconst119*r20);
IkReal x5371=(gconst119*r10);
IkReal x5372=(gconst119*r00);
IkReal x5373=(gconst118*r21);
IkReal x5374=(gconst118*r11);
IkReal x5375=((1.0)*cj0);
IkReal x5376=(sj1*sj2);
IkReal x5377=((1.0)*x5367);
IkReal x5378=((1.0)*x5366);
evalcond[0]=((((-1.0)*r22*x5377))+(((-1.0)*x5370*x5378))+((x5366*x5373)));
evalcond[1]=(sj0+(((-1.0)*x5372*x5378))+(((-1.0)*r02*x5377))+((x5366*x5369)));
evalcond[2]=((((-1.0)*r12*x5377))+(((-1.0)*x5375))+(((-1.0)*x5371*x5378))+((x5366*x5374)));
evalcond[3]=(((r22*x5366))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5370*x5377))+((x5367*x5373)));
evalcond[4]=(((r02*x5366))+(((-1.0)*x5372*x5377))+(((-1.0)*x5375*x5376))+((x5367*x5369))+((cj0*x5368)));
evalcond[5]=(((r12*x5366))+(((-1.0)*sj0*x5376))+(((-1.0)*x5371*x5377))+((sj0*x5368))+((x5367*x5374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5379=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5379.valid){
continue;
}
CheckValue<IkReal> x5380 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5379.value)))+(x5380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5381=IKsin(j4);
IkReal x5382=IKcos(j4);
IkReal x5383=(cj1*cj2);
IkReal x5384=(gconst118*r01);
IkReal x5385=(gconst119*r20);
IkReal x5386=(gconst119*r10);
IkReal x5387=(gconst119*r00);
IkReal x5388=(gconst118*r21);
IkReal x5389=(gconst118*r11);
IkReal x5390=((1.0)*cj0);
IkReal x5391=(sj1*sj2);
IkReal x5392=((1.0)*x5382);
IkReal x5393=((1.0)*x5381);
evalcond[0]=((((-1.0)*x5385*x5393))+((x5381*x5388))+(((-1.0)*r22*x5392)));
evalcond[1]=(sj0+((x5381*x5384))+(((-1.0)*r02*x5392))+(((-1.0)*x5387*x5393)));
evalcond[2]=(((x5381*x5389))+(((-1.0)*x5390))+(((-1.0)*r12*x5392))+(((-1.0)*x5386*x5393)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5385*x5392))+((x5382*x5388))+((cj1*sj2))+((r22*x5381)));
evalcond[4]=(((r02*x5381))+((x5382*x5384))+((cj0*x5383))+(((-1.0)*x5387*x5392))+(((-1.0)*x5390*x5391)));
evalcond[5]=(((sj0*x5383))+((x5382*x5389))+(((-1.0)*sj0*x5391))+((r12*x5381))+(((-1.0)*x5386*x5392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5395 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5395)==0){
continue;
}
IkReal x5394=pow(x5395,-0.5);
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5396.value));
IkReal gconst121=((-1.0)*r01*x5394);
IkReal gconst122=(r00*x5394);
CheckValue<IkReal> x5397 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5397.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5400 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5400.valid){
continue;
}
IkReal x5398=((-1.0)*(x5400.value));
IkReal x5399=x5394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5398;
IkReal gconst120=x5398;
IkReal gconst121=((-1.0)*r01*x5399);
IkReal gconst122=(r00*x5399);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5401=((1.0)*gconst122);
CheckValue<IkReal> x5402=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5401)))),-1);
if(!x5402.valid){
continue;
}
CheckValue<IkReal> x5403 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5401))+(((-1.0)*r10*sj0*x5401))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5402.value)))+(x5403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5404=IKsin(j4);
IkReal x5405=IKcos(j4);
IkReal x5406=(cj1*cj2);
IkReal x5407=(gconst121*r11);
IkReal x5408=(gconst122*r00);
IkReal x5409=(gconst122*r10);
IkReal x5410=(gconst122*r20);
IkReal x5411=((1.0)*cj0);
IkReal x5412=(sj1*sj2);
IkReal x5413=((1.0)*x5405);
IkReal x5414=((1.0)*x5404);
IkReal x5415=(gconst121*x5404);
IkReal x5416=(gconst121*x5405);
evalcond[0]=((((-1.0)*x5410*x5414))+(((-1.0)*r22*x5413))+((r21*x5415)));
evalcond[1]=((((-1.0)*r02*x5413))+sj0+((r01*x5415))+(((-1.0)*x5408*x5414)));
evalcond[2]=((((-1.0)*x5411))+(((-1.0)*r12*x5413))+((x5404*x5407))+(((-1.0)*x5409*x5414)));
evalcond[3]=(((cj2*sj1))+((r22*x5404))+((cj1*sj2))+(((-1.0)*x5410*x5413))+((r21*x5416)));
evalcond[4]=(((r02*x5404))+((r01*x5416))+(((-1.0)*x5411*x5412))+((cj0*x5406))+(((-1.0)*x5408*x5413)));
evalcond[5]=(((r12*x5404))+(((-1.0)*sj0*x5412))+((sj0*x5406))+((x5405*x5407))+(((-1.0)*x5409*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5417 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5417.valid){
continue;
}
CheckValue<IkReal> x5418=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x5418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5417.value)+(((1.5707963267949)*(x5418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5419=IKsin(j4);
IkReal x5420=IKcos(j4);
IkReal x5421=(cj1*cj2);
IkReal x5422=(gconst121*r11);
IkReal x5423=(gconst122*r00);
IkReal x5424=(gconst122*r10);
IkReal x5425=(gconst122*r20);
IkReal x5426=((1.0)*cj0);
IkReal x5427=(sj1*sj2);
IkReal x5428=((1.0)*x5420);
IkReal x5429=((1.0)*x5419);
IkReal x5430=(gconst121*x5419);
IkReal x5431=(gconst121*x5420);
evalcond[0]=((((-1.0)*x5425*x5429))+(((-1.0)*r22*x5428))+((r21*x5430)));
evalcond[1]=(sj0+(((-1.0)*r02*x5428))+((r01*x5430))+(((-1.0)*x5423*x5429)));
evalcond[2]=((((-1.0)*x5426))+(((-1.0)*x5424*x5429))+((x5419*x5422))+(((-1.0)*r12*x5428)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5419))+(((-1.0)*x5425*x5428))+((r21*x5431)));
evalcond[4]=((((-1.0)*x5426*x5427))+((r02*x5419))+((cj0*x5421))+((r01*x5431))+(((-1.0)*x5423*x5428)));
evalcond[5]=((((-1.0)*sj0*x5427))+(((-1.0)*x5424*x5428))+((x5420*x5422))+((sj0*x5421))+((r12*x5419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5433 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5433)==0){
continue;
}
IkReal x5432=pow(x5433,-0.5);
CheckValue<IkReal> x5434 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5434.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5434.value))));
IkReal gconst124=((1.0)*r01*x5432);
IkReal gconst125=((-1.0)*r00*x5432);
CheckValue<IkReal> x5435 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5435.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5435.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5438 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5438.valid){
continue;
}
IkReal x5436=((1.0)*(x5438.value));
IkReal x5437=x5432;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5436)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5436)));
IkReal gconst124=((1.0)*r01*x5437);
IkReal gconst125=((-1.0)*r00*x5437);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5441 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5441.valid){
continue;
}
IkReal x5439=((1.0)*(x5441.value));
IkReal x5440=x5432;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5439)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5439)));
IkReal gconst124=((1.0)*r01*x5440);
IkReal gconst125=((-1.0)*r00*x5440);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5444 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5444.valid){
continue;
}
IkReal x5442=((1.0)*(x5444.value));
IkReal x5443=x5432;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5442)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5442)));
IkReal gconst124=((1.0)*r01*x5443);
IkReal gconst125=((-1.0)*r00*x5443);
IkReal x5445=r02*r02;
IkReal x5446=(r12*sj0);
IkReal x5447=x5432;
IkReal x5448=(cj0*x5447);
j4eval[0]=((IKabs(((((-1.0)*x5448))+((r02*x5446*x5447))+((x5445*x5448)))))+(IKabs((x5446+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5449=((1.0)*gconst125);
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5449)))),-1);
if(!x5450.valid){
continue;
}
CheckValue<IkReal> x5451 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5449))+(((-1.0)*cj0*r00*x5449))+((cj0*gconst124*r01))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5450.value)))+(x5451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5452=IKsin(j4);
IkReal x5453=IKcos(j4);
IkReal x5454=(cj1*cj2);
IkReal x5455=(gconst125*r20);
IkReal x5456=(gconst124*r01);
IkReal x5457=(gconst125*r00);
IkReal x5458=(gconst125*r10);
IkReal x5459=((1.0)*cj0);
IkReal x5460=(sj1*sj2);
IkReal x5461=((1.0)*x5453);
IkReal x5462=((1.0)*x5452);
IkReal x5463=(gconst124*x5452);
IkReal x5464=(gconst124*x5453);
evalcond[0]=(((r21*x5463))+(((-1.0)*x5455*x5462))+(((-1.0)*r22*x5461)));
evalcond[1]=(sj0+(((-1.0)*r02*x5461))+(((-1.0)*x5457*x5462))+((x5452*x5456)));
evalcond[2]=(((r11*x5463))+(((-1.0)*x5458*x5462))+(((-1.0)*r12*x5461))+(((-1.0)*x5459)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5452))+((r21*x5464))+(((-1.0)*x5455*x5461)));
evalcond[4]=((((-1.0)*x5459*x5460))+((r02*x5452))+(((-1.0)*x5457*x5461))+((cj0*x5454))+((x5453*x5456)));
evalcond[5]=(((r12*x5452))+((r11*x5464))+(((-1.0)*x5458*x5461))+(((-1.0)*sj0*x5460))+((sj0*x5454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5465=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5465.valid){
continue;
}
CheckValue<IkReal> x5466 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5465.value)))+(x5466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5467=IKsin(j4);
IkReal x5468=IKcos(j4);
IkReal x5469=(cj1*cj2);
IkReal x5470=(gconst125*r20);
IkReal x5471=(gconst124*r01);
IkReal x5472=(gconst125*r00);
IkReal x5473=(gconst125*r10);
IkReal x5474=((1.0)*cj0);
IkReal x5475=(sj1*sj2);
IkReal x5476=((1.0)*x5468);
IkReal x5477=((1.0)*x5467);
IkReal x5478=(gconst124*x5467);
IkReal x5479=(gconst124*x5468);
evalcond[0]=((((-1.0)*x5470*x5477))+(((-1.0)*r22*x5476))+((r21*x5478)));
evalcond[1]=(sj0+((x5467*x5471))+(((-1.0)*x5472*x5477))+(((-1.0)*r02*x5476)));
evalcond[2]=((((-1.0)*x5474))+(((-1.0)*r12*x5476))+(((-1.0)*x5473*x5477))+((r11*x5478)));
evalcond[3]=(((cj2*sj1))+((r22*x5467))+((cj1*sj2))+(((-1.0)*x5470*x5476))+((r21*x5479)));
evalcond[4]=(((r02*x5467))+((cj0*x5469))+(((-1.0)*x5474*x5475))+(((-1.0)*x5472*x5476))+((x5468*x5471)));
evalcond[5]=(((r12*x5467))+(((-1.0)*x5473*x5476))+(((-1.0)*sj0*x5475))+((r11*x5479))+((sj0*x5469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5480 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5480.valid){
continue;
}
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5480.value)+(((1.5707963267949)*(x5481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5482=IKsin(j4);
IkReal x5483=IKcos(j4);
IkReal x5484=(cj1*cj2);
IkReal x5485=(gconst125*r20);
IkReal x5486=(gconst124*r01);
IkReal x5487=(gconst125*r00);
IkReal x5488=(gconst125*r10);
IkReal x5489=((1.0)*cj0);
IkReal x5490=(sj1*sj2);
IkReal x5491=((1.0)*x5483);
IkReal x5492=((1.0)*x5482);
IkReal x5493=(gconst124*x5482);
IkReal x5494=(gconst124*x5483);
evalcond[0]=(((r21*x5493))+(((-1.0)*r22*x5491))+(((-1.0)*x5485*x5492)));
evalcond[1]=(sj0+((x5482*x5486))+(((-1.0)*x5487*x5492))+(((-1.0)*r02*x5491)));
evalcond[2]=((((-1.0)*x5489))+(((-1.0)*x5488*x5492))+(((-1.0)*r12*x5491))+((r11*x5493)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5494))+(((-1.0)*x5485*x5491))+((r22*x5482)));
evalcond[4]=(((x5483*x5486))+(((-1.0)*x5489*x5490))+((cj0*x5484))+(((-1.0)*x5487*x5491))+((r02*x5482)));
evalcond[5]=((((-1.0)*x5488*x5491))+((r12*x5482))+((r11*x5494))+(((-1.0)*sj0*x5490))+((sj0*x5484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5495=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5495;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5496=((1.0)*cj5);
IkReal x5497=((((-1.0)*r21*x5496))+(((-1.0)*r20*sj5)));
j4eval[0]=x5497;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5496)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5498=(r01*sj5);
IkReal x5499=(cj1*sj2);
IkReal x5500=(cj2*sj1);
IkReal x5501=((1.0)*r02);
IkReal x5502=((1.0)*cj5*r00);
IkReal x5503=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5503;
j4eval[1]=((IKabs(((((-1.0)*x5500*x5502))+((x5498*x5499))+((x5498*x5500))+(((-1.0)*x5499*x5502)))))+(IKabs(((((-1.0)*x5500*x5501))+(((-1.0)*x5499*x5501))))));
j4eval[2]=IKsign(x5503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5504=(r01*sj5);
IkReal x5505=(cj1*sj2);
IkReal x5506=(cj2*sj1);
IkReal x5507=((1.0)*r02);
IkReal x5508=((1.0)*cj5*r00);
CheckValue<IkReal> x5509 = IKatan2WithCheck(IkReal(((((-1.0)*x5506*x5508))+(((-1.0)*x5505*x5508))+((x5504*x5505))+((x5504*x5506)))),IkReal(((((-1.0)*x5506*x5507))+(((-1.0)*x5505*x5507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5509.valid){
continue;
}
CheckValue<IkReal> x5510=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5509.value)+(((1.5707963267949)*(x5510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5511=IKcos(j4);
IkReal x5512=IKsin(j4);
IkReal x5513=(cj5*r00);
IkReal x5514=(cj5*r10);
IkReal x5515=(r21*sj5);
IkReal x5516=(cj5*r20);
IkReal x5517=((1.0)*x5511);
IkReal x5518=((1.0)*x5512);
IkReal x5519=(sj5*x5512);
IkReal x5520=(sj5*x5511);
evalcond[0]=((((-1.0)*x5513*x5517))+((r02*x5512))+((r01*x5520)));
evalcond[1]=(((x5512*x5515))+(((-1.0)*r22*x5517))+(((-1.0)*x5516*x5518)));
evalcond[2]=((((-1.0)*r12*x5517))+((r11*x5519))+(((-1.0)*x5514*x5518)));
evalcond[3]=((1.0)+(((-1.0)*x5513*x5518))+(((-1.0)*r02*x5517))+((r01*x5519)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5511*x5515))+((r22*x5512))+(((-1.0)*x5516*x5517)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x5512))+(((-1.0)*x5514*x5517))+((r11*x5520))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5521=((1.0)*cj5);
CheckValue<IkReal> x5522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5521))+(((-1.0)*r20*sj5)))),-1);
if(!x5522.valid){
continue;
}
CheckValue<IkReal> x5523 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5521))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5522.value)))+(x5523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5524=IKcos(j4);
IkReal x5525=IKsin(j4);
IkReal x5526=(cj5*r00);
IkReal x5527=(cj5*r10);
IkReal x5528=(r21*sj5);
IkReal x5529=(cj5*r20);
IkReal x5530=((1.0)*x5524);
IkReal x5531=((1.0)*x5525);
IkReal x5532=(sj5*x5525);
IkReal x5533=(sj5*x5524);
evalcond[0]=(((r02*x5525))+(((-1.0)*x5526*x5530))+((r01*x5533)));
evalcond[1]=((((-1.0)*r22*x5530))+((x5525*x5528))+(((-1.0)*x5529*x5531)));
evalcond[2]=((((-1.0)*x5527*x5531))+((r11*x5532))+(((-1.0)*r12*x5530)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5530))+(((-1.0)*x5526*x5531))+((r01*x5532)));
evalcond[4]=(((cj2*sj1))+((r22*x5525))+((cj1*sj2))+((x5524*x5528))+(((-1.0)*x5529*x5530)));
evalcond[5]=((((-1.0)*x5527*x5530))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x5533))+((r12*x5525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5534 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5534.valid){
continue;
}
CheckValue<IkReal> x5535=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5534.value)+(((1.5707963267949)*(x5535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5536=IKcos(j4);
IkReal x5537=IKsin(j4);
IkReal x5538=(cj5*r00);
IkReal x5539=(cj5*r10);
IkReal x5540=(r21*sj5);
IkReal x5541=(cj5*r20);
IkReal x5542=((1.0)*x5536);
IkReal x5543=((1.0)*x5537);
IkReal x5544=(sj5*x5537);
IkReal x5545=(sj5*x5536);
evalcond[0]=((((-1.0)*x5538*x5542))+((r02*x5537))+((r01*x5545)));
evalcond[1]=((((-1.0)*x5541*x5543))+((x5537*x5540))+(((-1.0)*r22*x5542)));
evalcond[2]=((((-1.0)*x5539*x5543))+((r11*x5544))+(((-1.0)*r12*x5542)));
evalcond[3]=((1.0)+(((-1.0)*x5538*x5543))+(((-1.0)*r02*x5542))+((r01*x5544)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5541*x5542))+((cj1*sj2))+((r22*x5537))+((x5536*x5540)));
evalcond[5]=((((-1.0)*x5539*x5542))+(((-1.0)*sj1*sj2))+((r11*x5545))+((cj1*cj2))+((r12*x5537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5546=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5546;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5547=((1.0)*cj5);
IkReal x5548=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5547)));
j4eval[0]=x5548;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5547)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5549=cj5*cj5;
IkReal x5550=r01*r01;
IkReal x5551=(cj5*r00);
IkReal x5552=(r01*sj5);
IkReal x5553=(x5550+((x5549*(r00*r00)))+(((-2.0)*x5551*x5552))+(r02*r02)+(((-1.0)*x5549*x5550)));
j4eval[0]=x5553;
j4eval[1]=IKsign(x5553);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5551))+x5552))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5554=cj5*cj5;
IkReal x5555=r01*r01;
IkReal x5556=(r01*sj5);
IkReal x5557=(cj5*r00);
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(IKsign((x5555+((x5554*(r00*r00)))+(((-2.0)*x5556*x5557))+(r02*r02)+(((-1.0)*x5554*x5555)))),-1);
if(!x5558.valid){
continue;
}
CheckValue<IkReal> x5559 = IKatan2WithCheck(IkReal(((((-1.0)*x5557))+x5556)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5558.value)))+(x5559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5560=IKcos(j4);
IkReal x5561=IKsin(j4);
IkReal x5562=(cj5*r00);
IkReal x5563=(cj5*r10);
IkReal x5564=(r21*sj5);
IkReal x5565=(cj5*r20);
IkReal x5566=((1.0)*x5560);
IkReal x5567=((1.0)*x5561);
IkReal x5568=(sj5*x5561);
IkReal x5569=(sj5*x5560);
evalcond[0]=(((r02*x5561))+(((-1.0)*x5562*x5566))+((r01*x5569)));
evalcond[1]=((((-1.0)*r22*x5566))+((x5561*x5564))+(((-1.0)*x5565*x5567)));
evalcond[2]=((((-1.0)*r12*x5566))+(((-1.0)*x5563*x5567))+((r11*x5568)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5566))+(((-1.0)*x5562*x5567))+((r01*x5568)));
evalcond[4]=(((cj2*sj1))+((x5560*x5564))+((cj1*sj2))+((r22*x5561))+(((-1.0)*x5565*x5566)));
evalcond[5]=((((-1.0)*x5563*x5566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5569))+((r12*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5570=((1.0)*cj5);
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5570))+(((-1.0)*r10*sj5)))),-1);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5571.value)))+(x5572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5573=IKcos(j4);
IkReal x5574=IKsin(j4);
IkReal x5575=(cj5*r00);
IkReal x5576=(cj5*r10);
IkReal x5577=(r21*sj5);
IkReal x5578=(cj5*r20);
IkReal x5579=((1.0)*x5573);
IkReal x5580=((1.0)*x5574);
IkReal x5581=(sj5*x5574);
IkReal x5582=(sj5*x5573);
evalcond[0]=(((r02*x5574))+(((-1.0)*x5575*x5579))+((r01*x5582)));
evalcond[1]=(((x5574*x5577))+(((-1.0)*x5578*x5580))+(((-1.0)*r22*x5579)));
evalcond[2]=((((-1.0)*x5576*x5580))+(((-1.0)*r12*x5579))+((r11*x5581)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5579))+(((-1.0)*x5575*x5580))+((r01*x5581)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5578*x5579))+((cj1*sj2))+((r22*x5574))+((x5573*x5577)));
evalcond[5]=(((r11*x5582))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5574))+(((-1.0)*x5576*x5579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5583.valid){
continue;
}
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5583.value)))+(x5584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5585=IKcos(j4);
IkReal x5586=IKsin(j4);
IkReal x5587=(cj5*r00);
IkReal x5588=(cj5*r10);
IkReal x5589=(r21*sj5);
IkReal x5590=(cj5*r20);
IkReal x5591=((1.0)*x5585);
IkReal x5592=((1.0)*x5586);
IkReal x5593=(sj5*x5586);
IkReal x5594=(sj5*x5585);
evalcond[0]=(((r02*x5586))+(((-1.0)*x5587*x5591))+((r01*x5594)));
evalcond[1]=(((x5586*x5589))+(((-1.0)*x5590*x5592))+(((-1.0)*r22*x5591)));
evalcond[2]=((((-1.0)*x5588*x5592))+(((-1.0)*r12*x5591))+((r11*x5593)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5591))+(((-1.0)*x5587*x5592))+((r01*x5593)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5590*x5591))+((x5585*x5589))+((r22*x5586)));
evalcond[5]=((((-1.0)*x5588*x5591))+((r11*x5594))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5596 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5596)==0){
continue;
}
IkReal x5595=pow(x5596,-0.5);
CheckValue<IkReal> x5597 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5597.value));
IkReal gconst127=((-1.0)*r11*x5595);
IkReal gconst128=(r10*x5595);
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5598.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
IkReal x5599=((-1.0)*(x5601.value));
IkReal x5600=x5595;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5599;
IkReal gconst126=x5599;
IkReal gconst127=((-1.0)*r11*x5600);
IkReal gconst128=(r10*x5600);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5602=((1.0)*gconst128);
CheckValue<IkReal> x5603 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5602))+((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*r10*sj0*x5602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5603.valid){
continue;
}
CheckValue<IkReal> x5604=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5602)))),-1);
if(!x5604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5603.value)+(((1.5707963267949)*(x5604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5605=IKsin(j4);
IkReal x5606=IKcos(j4);
IkReal x5607=(cj1*cj2);
IkReal x5608=(gconst127*r01);
IkReal x5609=(gconst128*r10);
IkReal x5610=(gconst128*r00);
IkReal x5611=(gconst128*r20);
IkReal x5612=((1.0)*cj0);
IkReal x5613=(sj1*sj2);
IkReal x5614=((1.0)*x5606);
IkReal x5615=((1.0)*x5605);
IkReal x5616=(gconst127*x5606);
IkReal x5617=(gconst127*x5605);
evalcond[0]=((((-1.0)*r22*x5614))+((r21*x5617))+(((-1.0)*x5611*x5615)));
evalcond[1]=(sj0+((x5605*x5608))+(((-1.0)*r02*x5614))+(((-1.0)*x5610*x5615)));
evalcond[2]=((((-1.0)*x5609*x5615))+(((-1.0)*r12*x5614))+((r11*x5617))+(((-1.0)*x5612)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5616))+((r22*x5605))+(((-1.0)*x5611*x5614)));
evalcond[4]=((((-1.0)*x5612*x5613))+((r02*x5605))+(((-1.0)*x5610*x5614))+((x5606*x5608))+((cj0*x5607)));
evalcond[5]=((((-1.0)*x5609*x5614))+((sj0*x5607))+((r12*x5605))+((r11*x5616))+(((-1.0)*sj0*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5618.valid){
continue;
}
CheckValue<IkReal> x5619=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5618.value)+(((1.5707963267949)*(x5619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5620=IKsin(j4);
IkReal x5621=IKcos(j4);
IkReal x5622=(cj1*cj2);
IkReal x5623=(gconst127*r01);
IkReal x5624=(gconst128*r10);
IkReal x5625=(gconst128*r00);
IkReal x5626=(gconst128*r20);
IkReal x5627=((1.0)*cj0);
IkReal x5628=(sj1*sj2);
IkReal x5629=((1.0)*x5621);
IkReal x5630=((1.0)*x5620);
IkReal x5631=(gconst127*x5621);
IkReal x5632=(gconst127*x5620);
evalcond[0]=((((-1.0)*r22*x5629))+(((-1.0)*x5626*x5630))+((r21*x5632)));
evalcond[1]=(sj0+((x5620*x5623))+(((-1.0)*r02*x5629))+(((-1.0)*x5625*x5630)));
evalcond[2]=(((r11*x5632))+(((-1.0)*r12*x5629))+(((-1.0)*x5627))+(((-1.0)*x5624*x5630)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5626*x5629))+((r22*x5620))+((r21*x5631)));
evalcond[4]=(((cj0*x5622))+(((-1.0)*x5627*x5628))+((r02*x5620))+(((-1.0)*x5625*x5629))+((x5621*x5623)));
evalcond[5]=(((r11*x5631))+((sj0*x5622))+(((-1.0)*x5624*x5629))+((r12*x5620))+(((-1.0)*sj0*x5628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5634 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5634)==0){
continue;
}
IkReal x5633=pow(x5634,-0.5);
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5635.value))));
IkReal gconst130=((1.0)*r11*x5633);
IkReal gconst131=((-1.0)*r10*x5633);
CheckValue<IkReal> x5636 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5639 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5639.valid){
continue;
}
IkReal x5637=((1.0)*(x5639.value));
IkReal x5638=x5633;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5637)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5637)));
IkReal gconst130=((1.0)*r11*x5638);
IkReal gconst131=((-1.0)*r10*x5638);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
IkReal x5640=((1.0)*(x5642.value));
IkReal x5641=x5633;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5640)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5640)));
IkReal gconst130=((1.0)*r11*x5641);
IkReal gconst131=((-1.0)*r10*x5641);
IkReal x5643=r12*r12;
IkReal x5644=(cj0*r02);
IkReal x5645=x5633;
IkReal x5646=(sj0*x5645);
j4eval[0]=((IKabs((((x5643*x5646))+((r12*x5644*x5645))+(((-1.0)*x5646)))))+(IKabs((x5644+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
IkReal x5647=((1.0)*(x5649.value));
IkReal x5648=x5633;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5647)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5647)));
IkReal gconst130=((1.0)*r11*x5648);
IkReal gconst131=((-1.0)*r10*x5648);
IkReal x5650=(cj1*sj2);
IkReal x5651=(cj2*sj1);
IkReal x5652=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5658=IKPowWithIntegerCheck(x5652,-1);
if(!x5658.valid){
continue;
}
IkReal x5653=x5658.value;
IkReal x5654=((1.0)*x5653);
IkReal x5655=x5633;
IkReal x5656=(r12*r22*x5655);
IkReal x5657=((((-1.0)*x5654*(r11*r11)*(r21*r21)))+(((-1.0)*x5654*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5653))+(((-1.0)*(r22*r22))));
j4eval[0]=x5657;
j4eval[1]=((IKabs((((x5651*x5656))+((x5650*x5656)))))+(IKabs((((r22*x5650))+((r22*x5651))))));
j4eval[2]=IKsign(x5657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5659=(cj2*sj1);
IkReal x5660=(cj1*sj2);
IkReal x5661=(gconst130*r21);
IkReal x5662=((1.0)*gconst131*r20);
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal((((r22*x5660))+((r22*x5659)))),IkReal((((x5659*x5661))+((x5660*x5661))+(((-1.0)*x5659*x5662))+(((-1.0)*x5660*x5662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst131*r20*x5661))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5661*x5661)))+(((-1.0)*gconst131*r20*x5662)))),-1);
if(!x5664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5663.value)+(((1.5707963267949)*(x5664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5665=IKsin(j4);
IkReal x5666=IKcos(j4);
IkReal x5667=(cj1*cj2);
IkReal x5668=(gconst131*r10);
IkReal x5669=(gconst130*r11);
IkReal x5670=(gconst131*r20);
IkReal x5671=(gconst131*r00);
IkReal x5672=((1.0)*cj0);
IkReal x5673=(sj1*sj2);
IkReal x5674=((1.0)*x5666);
IkReal x5675=((1.0)*x5665);
IkReal x5676=(gconst130*x5666);
IkReal x5677=(gconst130*x5665);
evalcond[0]=((((-1.0)*x5670*x5675))+(((-1.0)*r22*x5674))+((r21*x5677)));
evalcond[1]=(sj0+(((-1.0)*x5671*x5675))+((r01*x5677))+(((-1.0)*r02*x5674)));
evalcond[2]=((((-1.0)*r12*x5674))+(((-1.0)*x5668*x5675))+((x5665*x5669))+(((-1.0)*x5672)));
evalcond[3]=(((cj2*sj1))+((r22*x5665))+(((-1.0)*x5670*x5674))+((cj1*sj2))+((r21*x5676)));
evalcond[4]=((((-1.0)*x5672*x5673))+(((-1.0)*x5671*x5674))+((r02*x5665))+((r01*x5676))+((cj0*x5667)));
evalcond[5]=(((x5666*x5669))+(((-1.0)*x5668*x5674))+((sj0*x5667))+((r12*x5665))+(((-1.0)*sj0*x5673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5678=((1.0)*gconst131);
CheckValue<IkReal> x5679=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x5678)))),-1);
if(!x5679.valid){
continue;
}
CheckValue<IkReal> x5680 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x5678))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x5678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5679.value)))+(x5680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5681=IKsin(j4);
IkReal x5682=IKcos(j4);
IkReal x5683=(cj1*cj2);
IkReal x5684=(gconst131*r10);
IkReal x5685=(gconst130*r11);
IkReal x5686=(gconst131*r20);
IkReal x5687=(gconst131*r00);
IkReal x5688=((1.0)*cj0);
IkReal x5689=(sj1*sj2);
IkReal x5690=((1.0)*x5682);
IkReal x5691=((1.0)*x5681);
IkReal x5692=(gconst130*x5682);
IkReal x5693=(gconst130*x5681);
evalcond[0]=((((-1.0)*x5686*x5691))+(((-1.0)*r22*x5690))+((r21*x5693)));
evalcond[1]=(sj0+(((-1.0)*r02*x5690))+(((-1.0)*x5687*x5691))+((r01*x5693)));
evalcond[2]=(((x5681*x5685))+(((-1.0)*x5688))+(((-1.0)*x5684*x5691))+(((-1.0)*r12*x5690)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5686*x5690))+((r22*x5681))+((cj1*sj2))+((r21*x5692)));
evalcond[4]=(((r02*x5681))+(((-1.0)*x5687*x5690))+((cj0*x5683))+(((-1.0)*x5688*x5689))+((r01*x5692)));
evalcond[5]=((((-1.0)*x5684*x5690))+((sj0*x5683))+((r12*x5681))+(((-1.0)*sj0*x5689))+((x5682*x5685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5694=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5694.valid){
continue;
}
CheckValue<IkReal> x5695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5694.value)))+(x5695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5696=IKsin(j4);
IkReal x5697=IKcos(j4);
IkReal x5698=(cj1*cj2);
IkReal x5699=(gconst131*r10);
IkReal x5700=(gconst130*r11);
IkReal x5701=(gconst131*r20);
IkReal x5702=(gconst131*r00);
IkReal x5703=((1.0)*cj0);
IkReal x5704=(sj1*sj2);
IkReal x5705=((1.0)*x5697);
IkReal x5706=((1.0)*x5696);
IkReal x5707=(gconst130*x5697);
IkReal x5708=(gconst130*x5696);
evalcond[0]=((((-1.0)*r22*x5705))+(((-1.0)*x5701*x5706))+((r21*x5708)));
evalcond[1]=(sj0+(((-1.0)*x5702*x5706))+((r01*x5708))+(((-1.0)*r02*x5705)));
evalcond[2]=((((-1.0)*r12*x5705))+((x5696*x5700))+(((-1.0)*x5699*x5706))+(((-1.0)*x5703)));
evalcond[3]=(((cj2*sj1))+((r22*x5696))+((cj1*sj2))+(((-1.0)*x5701*x5705))+((r21*x5707)));
evalcond[4]=((((-1.0)*x5702*x5705))+((r02*x5696))+(((-1.0)*x5703*x5704))+((r01*x5707))+((cj0*x5698)));
evalcond[5]=(((x5697*x5700))+(((-1.0)*x5699*x5705))+(((-1.0)*sj0*x5704))+((sj0*x5698))+((r12*x5696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5709=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5709;
j4eval[1]=IKsign(x5709);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5710=((1.0)*cj5);
IkReal x5711=((((-1.0)*r21*x5710))+(((-1.0)*r20*sj5)));
j4eval[0]=x5711;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5710))+((r01*sj5))))));
j4eval[2]=IKsign(x5711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5712=cj5*cj5;
IkReal x5713=r11*r11;
IkReal x5714=(r11*sj5);
IkReal x5715=(cj5*r10);
IkReal x5716=((((-2.0)*x5714*x5715))+(r12*r12)+(((-1.0)*x5712*x5713))+x5713+((x5712*(r10*r10))));
j4eval[0]=x5716;
j4eval[1]=IKsign(x5716);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5715))+x5714))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5717=cj5*cj5;
IkReal x5718=r11*r11;
IkReal x5719=(cj5*r10);
IkReal x5720=(r11*sj5);
CheckValue<IkReal> x5721 = IKatan2WithCheck(IkReal(((((-1.0)*x5719))+x5720)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5721.valid){
continue;
}
CheckValue<IkReal> x5722=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5717*x5718))+(r12*r12)+(((-2.0)*x5719*x5720))+((x5717*(r10*r10)))+x5718)),-1);
if(!x5722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5721.value)+(((1.5707963267949)*(x5722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5723=IKcos(j4);
IkReal x5724=IKsin(j4);
IkReal x5725=(cj5*r00);
IkReal x5726=(cj5*r10);
IkReal x5727=(r21*sj5);
IkReal x5728=(cj5*r20);
IkReal x5729=((1.0)*x5723);
IkReal x5730=((1.0)*x5724);
IkReal x5731=(sj5*x5724);
IkReal x5732=(sj5*x5723);
evalcond[0]=(((r11*x5732))+((r12*x5724))+(((-1.0)*x5726*x5729)));
evalcond[1]=(((x5724*x5727))+(((-1.0)*x5728*x5730))+(((-1.0)*r22*x5729)));
evalcond[2]=(((r01*x5731))+(((-1.0)*x5725*x5730))+(((-1.0)*r02*x5729)));
evalcond[3]=((-1.0)+((r11*x5731))+(((-1.0)*r12*x5729))+(((-1.0)*x5726*x5730)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5728*x5729))+((x5723*x5727))+((cj1*sj2))+((r22*x5724)));
evalcond[5]=((((-1.0)*x5725*x5729))+((r01*x5732))+(((-1.0)*sj1*sj2))+((r02*x5724))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5733=((1.0)*cj5);
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
CheckValue<IkReal> x5735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5733))+(((-1.0)*r20*sj5)))),-1);
if(!x5735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5734.value)+(((1.5707963267949)*(x5735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5736=IKcos(j4);
IkReal x5737=IKsin(j4);
IkReal x5738=(cj5*r00);
IkReal x5739=(cj5*r10);
IkReal x5740=(r21*sj5);
IkReal x5741=(cj5*r20);
IkReal x5742=((1.0)*x5736);
IkReal x5743=((1.0)*x5737);
IkReal x5744=(sj5*x5737);
IkReal x5745=(sj5*x5736);
evalcond[0]=(((r11*x5745))+((r12*x5737))+(((-1.0)*x5739*x5742)));
evalcond[1]=(((x5737*x5740))+(((-1.0)*x5741*x5743))+(((-1.0)*r22*x5742)));
evalcond[2]=(((r01*x5744))+(((-1.0)*r02*x5742))+(((-1.0)*x5738*x5743)));
evalcond[3]=((-1.0)+((r11*x5744))+(((-1.0)*x5739*x5743))+(((-1.0)*r12*x5742)));
evalcond[4]=(((cj2*sj1))+((x5736*x5740))+((cj1*sj2))+(((-1.0)*x5741*x5742))+((r22*x5737)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x5745))+(((-1.0)*x5738*x5742))+((r02*x5737))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5746.value)+(((1.5707963267949)*(x5747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5748=IKcos(j4);
IkReal x5749=IKsin(j4);
IkReal x5750=(cj5*r00);
IkReal x5751=(cj5*r10);
IkReal x5752=(r21*sj5);
IkReal x5753=(cj5*r20);
IkReal x5754=((1.0)*x5748);
IkReal x5755=((1.0)*x5749);
IkReal x5756=(sj5*x5749);
IkReal x5757=(sj5*x5748);
evalcond[0]=((((-1.0)*x5751*x5754))+((r11*x5757))+((r12*x5749)));
evalcond[1]=((((-1.0)*r22*x5754))+((x5749*x5752))+(((-1.0)*x5753*x5755)));
evalcond[2]=(((r01*x5756))+(((-1.0)*r02*x5754))+(((-1.0)*x5750*x5755)));
evalcond[3]=((-1.0)+(((-1.0)*x5751*x5755))+(((-1.0)*r12*x5754))+((r11*x5756)));
evalcond[4]=(((cj2*sj1))+((r22*x5749))+((x5748*x5752))+((cj1*sj2))+(((-1.0)*x5753*x5754)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x5757))+((cj1*cj2))+((r02*x5749))+(((-1.0)*x5750*x5754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5758=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5758;
j4eval[1]=IKsign(x5758);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5759=((1.0)*cj5);
IkReal x5760=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5759)));
j4eval[0]=x5760;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5759)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5761=cj5*cj5;
IkReal x5762=r11*r11;
IkReal x5763=(cj5*r10);
IkReal x5764=(r11*sj5);
IkReal x5765=((((2.0)*x5763*x5764))+(((-1.0)*(r12*r12)))+(((-1.0)*x5761*(r10*r10)))+(((-1.0)*x5762))+((x5761*x5762)));
j4eval[0]=x5765;
j4eval[1]=IKsign(x5765);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5763))+x5764))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5766=cj5*cj5;
IkReal x5767=r11*r11;
IkReal x5768=(cj5*r10);
IkReal x5769=(r11*sj5);
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal(((((-1.0)*x5768))+x5769)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
CheckValue<IkReal> x5771=IKPowWithIntegerCheck(IKsign((((x5766*x5767))+(((2.0)*x5768*x5769))+(((-1.0)*(r12*r12)))+(((-1.0)*x5767))+(((-1.0)*x5766*(r10*r10))))),-1);
if(!x5771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5770.value)+(((1.5707963267949)*(x5771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5772=IKcos(j4);
IkReal x5773=IKsin(j4);
IkReal x5774=(cj5*r00);
IkReal x5775=(cj5*r10);
IkReal x5776=(r21*sj5);
IkReal x5777=(cj5*r20);
IkReal x5778=((1.0)*x5772);
IkReal x5779=((1.0)*x5773);
IkReal x5780=(sj5*x5773);
IkReal x5781=(sj5*x5772);
evalcond[0]=(((r11*x5781))+(((-1.0)*x5775*x5778))+((r12*x5773)));
evalcond[1]=((((-1.0)*x5777*x5779))+(((-1.0)*r22*x5778))+((x5773*x5776)));
evalcond[2]=((((-1.0)*x5774*x5779))+((r01*x5780))+(((-1.0)*r02*x5778)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5778))+((r11*x5780))+(((-1.0)*x5775*x5779)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5777*x5778))+((cj1*sj2))+((r22*x5773))+((x5772*x5776)));
evalcond[5]=((((-1.0)*x5774*x5778))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5781))+((r02*x5773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5782=((1.0)*cj5);
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5782))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5782)))),-1);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5783.value)+(((1.5707963267949)*(x5784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKcos(j4);
IkReal x5786=IKsin(j4);
IkReal x5787=(cj5*r00);
IkReal x5788=(cj5*r10);
IkReal x5789=(r21*sj5);
IkReal x5790=(cj5*r20);
IkReal x5791=((1.0)*x5785);
IkReal x5792=((1.0)*x5786);
IkReal x5793=(sj5*x5786);
IkReal x5794=(sj5*x5785);
evalcond[0]=(((r12*x5786))+((r11*x5794))+(((-1.0)*x5788*x5791)));
evalcond[1]=((((-1.0)*r22*x5791))+(((-1.0)*x5790*x5792))+((x5786*x5789)));
evalcond[2]=(((r01*x5793))+(((-1.0)*x5787*x5792))+(((-1.0)*r02*x5791)));
evalcond[3]=((1.0)+((r11*x5793))+(((-1.0)*r12*x5791))+(((-1.0)*x5788*x5792)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5785*x5789))+((r22*x5786))+(((-1.0)*x5790*x5791)));
evalcond[5]=(((r01*x5794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5787*x5791))+((r02*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5795=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5795.valid){
continue;
}
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5795.value)))+(x5796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5797=IKcos(j4);
IkReal x5798=IKsin(j4);
IkReal x5799=(cj5*r00);
IkReal x5800=(cj5*r10);
IkReal x5801=(r21*sj5);
IkReal x5802=(cj5*r20);
IkReal x5803=((1.0)*x5797);
IkReal x5804=((1.0)*x5798);
IkReal x5805=(sj5*x5798);
IkReal x5806=(sj5*x5797);
evalcond[0]=((((-1.0)*x5800*x5803))+((r12*x5798))+((r11*x5806)));
evalcond[1]=((((-1.0)*r22*x5803))+(((-1.0)*x5802*x5804))+((x5798*x5801)));
evalcond[2]=(((r01*x5805))+(((-1.0)*x5799*x5804))+(((-1.0)*r02*x5803)));
evalcond[3]=((1.0)+(((-1.0)*x5800*x5804))+(((-1.0)*r12*x5803))+((r11*x5805)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5802*x5803))+((x5797*x5801))+((r22*x5798)));
evalcond[5]=(((r01*x5806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5799*x5803))+((r02*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5807=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5807);
rxp0_2=(py*r00);
rxp1_0=(r21*x5807);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5808=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5808);
rxp0_2=(py*r00);
rxp1_0=(r21*x5808);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5809=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5809);
rxp0_2=(py*r00);
rxp1_0=(r21*x5809);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5812=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5812.valid){
continue;
}
IkReal x5810=x5812.value;
IkReal x5811=(cj0*x5810);
cj4array[0]=(((sj1*sj2*x5811))+(((-1.0)*cj1*cj2*x5811)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5813=IKsin(j4);
IkReal x5814=IKcos(j4);
IkReal x5815=(r21*sj5);
IkReal x5816=((1.0)*x5814);
IkReal x5817=((1.0)*cj5*x5813);
evalcond[0]=(r12*x5813);
evalcond[1]=((((-1.0)*r12*x5816))+(((-1.0)*cj0)));
evalcond[2]=(((x5813*x5815))+(((-1.0)*r20*x5817)));
evalcond[3]=(((r01*sj5*x5813))+(((-1.0)*r00*x5817)));
evalcond[4]=(((cj2*sj1))+((x5814*x5815))+((cj1*sj2))+(((-1.0)*cj5*r20*x5816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5820=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5820.valid){
continue;
}
IkReal x5818=x5820.value;
IkReal x5819=((1.0)*x5818);
cj4array[0]=((((-1.0)*cj1*sj2*x5819))+(((-1.0)*cj2*sj1*x5819)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5821=IKsin(j4);
IkReal x5822=IKcos(j4);
IkReal x5823=((1.0)*cj0);
IkReal x5824=(r01*sj5);
IkReal x5825=((1.0)*cj5*r00);
evalcond[0]=(r12*x5821);
evalcond[1]=((((-1.0)*x5823))+(((-1.0)*r12*x5822)));
evalcond[2]=(((r21*sj5*x5821))+(((-1.0)*cj5*r20*x5821)));
evalcond[3]=(((x5821*x5824))+(((-1.0)*x5821*x5825)));
evalcond[4]=(((x5822*x5824))+(((-1.0)*sj1*sj2*x5823))+((cj0*cj1*cj2))+(((-1.0)*x5822*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5826=IKPowWithIntegerCheck(r12,-1);
if(!x5826.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5826.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5827=IKsin(j4);
IkReal x5828=IKcos(j4);
IkReal x5829=((1.0)*cj5*r00);
IkReal x5830=(sj5*x5828);
IkReal x5831=(sj5*x5827);
IkReal x5832=((1.0)*cj5*r20);
evalcond[0]=(r12*x5827);
evalcond[1]=(((r21*x5831))+(((-1.0)*x5827*x5832)));
evalcond[2]=(((r01*x5831))+(((-1.0)*x5827*x5829)));
evalcond[3]=(((r21*x5830))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5828*x5832)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x5828*x5829))+((r01*x5830))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5833=((1.0)*cj5);
CheckValue<IkReal> x5834 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x5833))+(((-1.0)*r10*sj0*x5833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5834.valid){
continue;
}
CheckValue<IkReal> x5835=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5833))+(((-1.0)*r20*sj5)))),-1);
if(!x5835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5834.value)+(((1.5707963267949)*(x5835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5836=IKsin(j4);
IkReal x5837=IKcos(j4);
IkReal x5838=(cj5*r00);
IkReal x5839=(cj1*cj2);
IkReal x5840=(cj5*r10);
IkReal x5841=(r21*sj5);
IkReal x5842=(cj5*r20);
IkReal x5843=((1.0)*x5837);
IkReal x5844=((1.0)*x5836);
IkReal x5845=(sj5*x5836);
IkReal x5846=(sj5*x5837);
IkReal x5847=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5842*x5844))+((x5836*x5841))+(((-1.0)*r22*x5843)));
evalcond[1]=(sj0+(((-1.0)*r02*x5843))+((r01*x5845))+(((-1.0)*x5838*x5844)));
evalcond[2]=(((r11*x5845))+(((-1.0)*x5840*x5844))+(((-1.0)*r12*x5843))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x5837*x5841))+((cj1*sj2))+(((-1.0)*x5842*x5843))+((r22*x5836)));
evalcond[4]=(((r02*x5836))+((r01*x5846))+(((-1.0)*x5838*x5843))+((cj0*x5839))+(((-1.0)*cj0*x5847)));
evalcond[5]=(((r11*x5846))+((r12*x5836))+((sj0*x5839))+(((-1.0)*x5840*x5843))+(((-1.0)*sj0*x5847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5848=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5848.valid){
continue;
}
CheckValue<IkReal> x5849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5848.value)))+(x5849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5850=IKsin(j4);
IkReal x5851=IKcos(j4);
IkReal x5852=(cj5*r00);
IkReal x5853=(cj1*cj2);
IkReal x5854=(cj5*r10);
IkReal x5855=(r21*sj5);
IkReal x5856=(cj5*r20);
IkReal x5857=((1.0)*x5851);
IkReal x5858=((1.0)*x5850);
IkReal x5859=(sj5*x5850);
IkReal x5860=(sj5*x5851);
IkReal x5861=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5856*x5858))+((x5850*x5855))+(((-1.0)*r22*x5857)));
evalcond[1]=(sj0+((r01*x5859))+(((-1.0)*x5852*x5858))+(((-1.0)*r02*x5857)));
evalcond[2]=(((r11*x5859))+(((-1.0)*r12*x5857))+(((-1.0)*x5854*x5858))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5851*x5855))+(((-1.0)*x5856*x5857))+((r22*x5850)));
evalcond[4]=((((-1.0)*cj0*x5861))+((r02*x5850))+(((-1.0)*x5852*x5857))+((cj0*x5853))+((r01*x5860)));
evalcond[5]=((((-1.0)*sj0*x5861))+((r12*x5850))+((r11*x5860))+(((-1.0)*x5854*x5857))+((sj0*x5853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5862=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5862.valid){
continue;
}
CheckValue<IkReal> x5863 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5862.value)))+(x5863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5864=IKsin(j4);
IkReal x5865=IKcos(j4);
IkReal x5866=(cj5*r00);
IkReal x5867=(cj1*cj2);
IkReal x5868=(cj5*r10);
IkReal x5869=(r21*sj5);
IkReal x5870=(cj5*r20);
IkReal x5871=((1.0)*x5865);
IkReal x5872=((1.0)*x5864);
IkReal x5873=(sj5*x5864);
IkReal x5874=(sj5*x5865);
IkReal x5875=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x5871))+(((-1.0)*x5870*x5872))+((x5864*x5869)));
evalcond[1]=(sj0+(((-1.0)*x5866*x5872))+(((-1.0)*r02*x5871))+((r01*x5873)));
evalcond[2]=((((-1.0)*r12*x5871))+((r11*x5873))+(((-1.0)*x5868*x5872))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x5864))+((cj1*sj2))+(((-1.0)*x5870*x5871))+((x5865*x5869)));
evalcond[4]=((((-1.0)*cj0*x5875))+(((-1.0)*x5866*x5871))+((r02*x5864))+((cj0*x5867))+((r01*x5874)));
evalcond[5]=((((-1.0)*sj0*x5875))+((sj0*x5867))+((r11*x5874))+((r12*x5864))+(((-1.0)*x5868*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5876=r21*r21;
IkReal x5877=cj5*cj5;
IkReal x5878=(cj2*sj1);
IkReal x5879=(cj1*sj2);
IkReal x5880=(r21*sj5);
IkReal x5881=((1.0)*cj5*r20);
CheckValue<IkReal> x5882 = IKatan2WithCheck(IkReal((((r22*x5878))+((r22*x5879)))),IkReal((((x5879*x5880))+(((-1.0)*x5879*x5881))+((x5878*x5880))+(((-1.0)*x5878*x5881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5882.valid){
continue;
}
CheckValue<IkReal> x5883=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*r20*x5880))+(((-1.0)*(r22*r22)))+(((-1.0)*x5877*(r20*r20)))+((x5876*x5877))+(((-1.0)*x5876)))),-1);
if(!x5883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5882.value)+(((1.5707963267949)*(x5883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5884=IKsin(j4);
IkReal x5885=IKcos(j4);
IkReal x5886=(r21*sj5);
IkReal x5887=(cj5*r20);
IkReal x5888=((1.0)*x5885);
evalcond[0]=(((x5884*x5886))+(((-1.0)*r22*x5888))+(((-1.0)*x5884*x5887)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x5887*x5888))+((cj1*sj2))+((r22*x5884))+((x5885*x5886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5889=(cj5*sj4);
IkReal x5890=(sj4*sj5);
if( IKabs((((r00*x5889))+(((-1.0)*r01*x5890))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x5889))+((r11*x5890))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x5889))+(((-1.0)*r01*x5890))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x5889))+((r11*x5890))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x5889))+(((-1.0)*r01*x5890))+((cj4*r02))), ((((-1.0)*r10*x5889))+((r11*x5890))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5891=IKcos(j0);
IkReal x5892=IKsin(j0);
IkReal x5893=(cj5*r01);
IkReal x5894=((1.0)*sj1);
IkReal x5895=(r11*sj5);
IkReal x5896=(cj1*cj2);
IkReal x5897=((0.1157)*sj5);
IkReal x5898=((0.612)*cj1);
IkReal x5899=(cj5*r11);
IkReal x5900=((1.0)*cj4);
IkReal x5901=(r01*sj5);
IkReal x5902=(sj2*x5892);
IkReal x5903=(cj5*x5900);
IkReal x5904=(sj1*x5891);
IkReal x5905=(sj2*x5891);
IkReal x5906=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r00*x5906))+((sj4*x5901))+(((-1.0)*r02*x5900))+x5892);
evalcond[1]=((((-1.0)*r12*x5900))+(((-1.0)*x5891))+((sj4*x5895))+(((-1.0)*r10*x5906)));
evalcond[2]=(((cj2*x5904))+((r00*sj5))+((cj1*x5905))+x5893);
evalcond[3]=(((cj2*sj1*x5892))+((r10*sj5))+((cj1*x5902))+x5899);
evalcond[4]=((((-1.0)*r00*x5903))+(((-1.0)*x5894*x5905))+((r02*sj4))+((cj4*x5901))+((x5891*x5896)));
evalcond[5]=((((-1.0)*x5894*x5902))+((cj4*x5895))+((r12*sj4))+((x5892*x5896))+(((-1.0)*r10*x5903)));
evalcond[6]=((((-0.5723)*x5891*x5896))+(((-1.0)*px))+(((0.163941)*x5892))+(((-0.1157)*x5893))+(((-1.0)*x5891*x5898))+(((-1.0)*r00*x5897))+(((0.5723)*sj2*x5904)));
evalcond[7]=((((-1.0)*x5892*x5898))+(((-1.0)*r10*x5897))+(((0.5723)*sj1*x5902))+(((-1.0)*py))+(((-0.163941)*x5891))+(((-0.1157)*x5899))+(((-0.5723)*x5892*x5896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5907=((1.0)*cj5);
IkReal x5908=((1.0)*sj5);
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5907))+(((-1.0)*r10*x5908)))),IkReal(((((-1.0)*r01*x5907))+(((-1.0)*r00*x5908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5910.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5909.value)+(((1.5707963267949)*(x5910.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5911=IKcos(j0);
IkReal x5912=IKsin(j0);
IkReal x5913=(cj5*r01);
IkReal x5914=((0.1157)*sj5);
IkReal x5915=(cj5*r11);
IkReal x5916=((0.5723)*sj1*sj2);
IkReal x5917=(cj2*x5911);
IkReal x5918=(cj1*x5912);
IkReal x5919=(cj1*x5911);
evalcond[0]=(((r00*sj5))+((sj1*x5917))+((sj2*x5919))+x5913);
evalcond[1]=(((r10*sj5))+((cj2*sj1*x5912))+((sj2*x5918))+x5915);
evalcond[2]=((((-1.0)*r00*x5914))+((x5911*x5916))+(((0.163941)*x5912))+(((-0.5723)*cj1*x5917))+(((-1.0)*px))+(((-0.612)*x5919))+(((-0.1157)*x5913)));
evalcond[3]=((((-0.163941)*x5911))+((x5912*x5916))+(((-0.5723)*cj2*x5918))+(((-1.0)*py))+(((-0.612)*x5918))+(((-1.0)*r10*x5914))+(((-0.1157)*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5920=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5920;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5921=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5921;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5922=((1.0)*cj5);
IkReal x5923=((((-1.0)*r21*x5922))+(((-1.0)*r20*sj5)));
j4eval[0]=x5923;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5922))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5922)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x5923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5924=((-1.0)*r20);
IkReal x5926 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5926)==0){
continue;
}
IkReal x5925=pow(x5926,-0.5);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5924),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5927.value));
IkReal gconst115=(r21*x5925);
IkReal gconst116=(x5924*x5925);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5929=((-1.0)*r20);
IkReal x5930=x5925;
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5929),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5931=((-1.0)*(x5932.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5931;
IkReal gconst114=x5931;
IkReal gconst115=(r21*x5930);
IkReal gconst116=(x5929*x5930);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5933=((-1.0)*r20);
IkReal x5934=x5925;
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5933),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
IkReal x5935=((-1.0)*(x5936.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5935;
IkReal gconst114=x5935;
IkReal gconst115=(r21*x5934);
IkReal gconst116=(x5933*x5934);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5937=((-1.0)*r20);
IkReal x5938=x5925;
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5937),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
IkReal x5939=((-1.0)*(x5940.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5939;
IkReal gconst114=x5939;
IkReal gconst115=(r21*x5938);
IkReal gconst116=(x5937*x5938);
IkReal x5941=((1.0)*(r22*r22));
CheckValue<IkReal> x5945=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5941))),-1);
if(!x5945.valid){
continue;
}
IkReal x5942=x5945.value;
IkReal x5943=((1.0)*x5942);
IkReal x5944=((((-1.0)*x5943*(r21*r21*r21*r21)))+(((-1.0)*x5941))+(((-2.0)*x5942*(r20*r20)*(r21*r21)))+(((-1.0)*x5943*(r20*r20*r20*r20))));
j4eval[0]=x5944;
j4eval[1]=IKsign(x5944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5946=(cj2*sj1);
IkReal x5947=(gconst115*r21);
IkReal x5948=(cj1*sj2);
IkReal x5949=((1.0)*gconst116*r20);
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5949))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5947))+(((-1.0)*(x5947*x5947))))),-1);
if(!x5950.valid){
continue;
}
CheckValue<IkReal> x5951 = IKatan2WithCheck(IkReal((((r22*x5948))+((r22*x5946)))),IkReal(((((-1.0)*x5948*x5949))+((x5947*x5948))+((x5946*x5947))+(((-1.0)*x5946*x5949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5950.value)))+(x5951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5952=IKsin(j4);
IkReal x5953=IKcos(j4);
IkReal x5954=(cj1*cj2);
IkReal x5955=((1.0)*x5953);
IkReal x5956=(gconst115*x5952);
IkReal x5957=(gconst115*x5953);
IkReal x5958=((1.0)*sj1*sj2);
IkReal x5959=((1.0)*gconst116*x5952);
evalcond[0]=(((r21*x5956))+(((-1.0)*r22*x5955))+(((-1.0)*r20*x5959)));
evalcond[1]=(sj0+(((-1.0)*r00*x5959))+(((-1.0)*r02*x5955))+((r01*x5956)));
evalcond[2]=((((-1.0)*r10*x5959))+((r11*x5956))+(((-1.0)*r12*x5955))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x5957))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5955))+((r22*x5952)));
evalcond[4]=(((r02*x5952))+((cj0*x5954))+(((-1.0)*cj0*x5958))+((r01*x5957))+(((-1.0)*gconst116*r00*x5955)));
evalcond[5]=(((sj0*x5954))+((r11*x5957))+((r12*x5952))+(((-1.0)*gconst116*r10*x5955))+(((-1.0)*sj0*x5958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5960 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5960.valid){
continue;
}
CheckValue<IkReal> x5961=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5960.value)+(((1.5707963267949)*(x5961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5962=IKsin(j4);
IkReal x5963=IKcos(j4);
IkReal x5964=(cj1*cj2);
IkReal x5965=((1.0)*x5963);
IkReal x5966=(gconst115*x5962);
IkReal x5967=(gconst115*x5963);
IkReal x5968=((1.0)*sj1*sj2);
IkReal x5969=((1.0)*gconst116*x5962);
evalcond[0]=((((-1.0)*r22*x5965))+(((-1.0)*r20*x5969))+((r21*x5966)));
evalcond[1]=(sj0+((r01*x5966))+(((-1.0)*r00*x5969))+(((-1.0)*r02*x5965)));
evalcond[2]=((((-1.0)*r12*x5965))+(((-1.0)*r10*x5969))+((r11*x5966))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5962))+((r21*x5967))+(((-1.0)*gconst116*r20*x5965)));
evalcond[4]=(((r02*x5962))+((cj0*x5964))+(((-1.0)*gconst116*r00*x5965))+((r01*x5967))+(((-1.0)*cj0*x5968)));
evalcond[5]=((((-1.0)*gconst116*r10*x5965))+(((-1.0)*sj0*x5968))+((r12*x5962))+((r11*x5967))+((sj0*x5964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5970=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5970.valid){
continue;
}
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5970.value)))+(x5971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5972=IKsin(j4);
IkReal x5973=IKcos(j4);
IkReal x5974=(cj1*cj2);
IkReal x5975=((1.0)*x5973);
IkReal x5976=(gconst115*x5972);
IkReal x5977=(gconst115*x5973);
IkReal x5978=((1.0)*sj1*sj2);
IkReal x5979=((1.0)*gconst116*x5972);
evalcond[0]=((((-1.0)*r22*x5975))+(((-1.0)*r20*x5979))+((r21*x5976)));
evalcond[1]=((((-1.0)*r02*x5975))+sj0+((r01*x5976))+(((-1.0)*r00*x5979)));
evalcond[2]=((((-1.0)*r12*x5975))+((r11*x5976))+(((-1.0)*r10*x5979))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5975))+((cj1*sj2))+((r22*x5972))+((r21*x5977)));
evalcond[4]=(((cj0*x5974))+(((-1.0)*gconst116*r00*x5975))+((r01*x5977))+(((-1.0)*cj0*x5978))+((r02*x5972)));
evalcond[5]=((((-1.0)*gconst116*r10*x5975))+(((-1.0)*sj0*x5978))+((r11*x5977))+((r12*x5972))+((sj0*x5974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5980=((-1.0)*r21);
IkReal x5982 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5982)==0){
continue;
}
IkReal x5981=pow(x5982,-0.5);
CheckValue<IkReal> x5983 = IKatan2WithCheck(IkReal(x5980),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5983.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5983.value))));
IkReal gconst118=(x5980*x5981);
IkReal gconst119=((1.0)*r20*x5981);
CheckValue<IkReal> x5984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5984.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5984.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5985=((-1.0)*r21);
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal(x5985),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
IkReal x5986=((1.0)*(x5988.value));
IkReal x5987=x5981;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5986)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5986)));
IkReal gconst118=(x5985*x5987);
IkReal gconst119=((1.0)*r20*x5987);
IkReal x5989=r22*r22;
IkReal x5990=((1.0)*x5989);
CheckValue<IkReal> x5994=IKPowWithIntegerCheck(((-1.0)+x5989),-1);
if(!x5994.valid){
continue;
}
IkReal x5991=x5994.value;
if((((1.0)+(((-1.0)*x5990)))) < -0.00001)
continue;
IkReal x5992=IKsqrt(((1.0)+(((-1.0)*x5990))));
IkReal x5993=(sj0*x5991*x5992);
j4eval[0]=((IKabs(((((-1.0)*x5990*x5993))+x5993)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5995=((-1.0)*r21);
CheckValue<IkReal> x5998 = IKatan2WithCheck(IkReal(x5995),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
IkReal x5996=((1.0)*(x5998.value));
IkReal x5997=x5981;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5996)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5996)));
IkReal gconst118=(x5995*x5997);
IkReal gconst119=((1.0)*r20*x5997);
IkReal x5999=r22*r22;
IkReal x6000=((1.0)*x5999);
CheckValue<IkReal> x6004=IKPowWithIntegerCheck(((-1.0)+x5999),-1);
if(!x6004.valid){
continue;
}
IkReal x6001=x6004.value;
if((((1.0)+(((-1.0)*x6000)))) < -0.00001)
continue;
IkReal x6002=IKsqrt(((1.0)+(((-1.0)*x6000))));
IkReal x6003=(cj0*x6001*x6002);
j4eval[0]=((IKabs((x6003+(((-1.0)*x6000*x6003)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6005=((-1.0)*r21);
CheckValue<IkReal> x6008 = IKatan2WithCheck(IkReal(x6005),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6008.valid){
continue;
}
IkReal x6006=((1.0)*(x6008.value));
IkReal x6007=x5981;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6006)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6006)));
IkReal gconst118=(x6005*x6007);
IkReal gconst119=((1.0)*r20*x6007);
IkReal x6009=r22*r22;
IkReal x6010=(cj0*r02);
IkReal x6011=(r12*sj0);
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(((-1.0)+x6009),-1);
if(!x6015.valid){
continue;
}
IkReal x6012=x6015.value;
if((((1.0)+(((-1.0)*x6009)))) < -0.00001)
continue;
IkReal x6013=IKsqrt(((1.0)+(((-1.0)*x6009))));
IkReal x6014=((1.0)*r22*x6012*x6013);
j4eval[0]=0;
j4eval[1]=((IKabs((x6011+x6010)))+(IKabs(((((-1.0)*x6010*x6014))+(((-1.0)*x6011*x6014))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6016=((1.0)*gconst119);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6016))+(((-1.0)*gconst118*r20)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6016))+((gconst118*r11*sj0))+(((-1.0)*r10*sj0*x6016))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKsin(j4);
IkReal x6020=IKcos(j4);
IkReal x6021=(cj1*cj2);
IkReal x6022=(gconst118*r01);
IkReal x6023=(gconst119*r20);
IkReal x6024=(gconst119*r10);
IkReal x6025=(gconst119*r00);
IkReal x6026=(gconst118*r21);
IkReal x6027=(gconst118*r11);
IkReal x6028=((1.0)*cj0);
IkReal x6029=(sj1*sj2);
IkReal x6030=((1.0)*x6020);
IkReal x6031=((1.0)*x6019);
evalcond[0]=(((x6019*x6026))+(((-1.0)*x6023*x6031))+(((-1.0)*r22*x6030)));
evalcond[1]=(sj0+(((-1.0)*x6025*x6031))+((x6019*x6022))+(((-1.0)*r02*x6030)));
evalcond[2]=((((-1.0)*r12*x6030))+(((-1.0)*x6028))+((x6019*x6027))+(((-1.0)*x6024*x6031)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6020*x6026))+(((-1.0)*x6023*x6030))+((r22*x6019)));
evalcond[4]=((((-1.0)*x6028*x6029))+((x6020*x6022))+((r02*x6019))+(((-1.0)*x6025*x6030))+((cj0*x6021)));
evalcond[5]=(((sj0*x6021))+(((-1.0)*sj0*x6029))+((x6020*x6027))+((r12*x6019))+(((-1.0)*x6024*x6030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6032=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6032.valid){
continue;
}
CheckValue<IkReal> x6033 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6032.value)))+(x6033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6034=IKsin(j4);
IkReal x6035=IKcos(j4);
IkReal x6036=(cj1*cj2);
IkReal x6037=(gconst118*r01);
IkReal x6038=(gconst119*r20);
IkReal x6039=(gconst119*r10);
IkReal x6040=(gconst119*r00);
IkReal x6041=(gconst118*r21);
IkReal x6042=(gconst118*r11);
IkReal x6043=((1.0)*cj0);
IkReal x6044=(sj1*sj2);
IkReal x6045=((1.0)*x6035);
IkReal x6046=((1.0)*x6034);
evalcond[0]=((((-1.0)*r22*x6045))+((x6034*x6041))+(((-1.0)*x6038*x6046)));
evalcond[1]=(sj0+(((-1.0)*r02*x6045))+(((-1.0)*x6040*x6046))+((x6034*x6037)));
evalcond[2]=((((-1.0)*x6043))+(((-1.0)*x6039*x6046))+((x6034*x6042))+(((-1.0)*r12*x6045)));
evalcond[3]=(((r22*x6034))+((cj2*sj1))+((cj1*sj2))+((x6035*x6041))+(((-1.0)*x6038*x6045)));
evalcond[4]=(((cj0*x6036))+((x6035*x6037))+(((-1.0)*x6043*x6044))+((r02*x6034))+(((-1.0)*x6040*x6045)));
evalcond[5]=(((r12*x6034))+((x6035*x6042))+((sj0*x6036))+(((-1.0)*x6039*x6045))+(((-1.0)*sj0*x6044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6047=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x6047.valid){
continue;
}
CheckValue<IkReal> x6048 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6047.value)))+(x6048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6049=IKsin(j4);
IkReal x6050=IKcos(j4);
IkReal x6051=(cj1*cj2);
IkReal x6052=(gconst118*r01);
IkReal x6053=(gconst119*r20);
IkReal x6054=(gconst119*r10);
IkReal x6055=(gconst119*r00);
IkReal x6056=(gconst118*r21);
IkReal x6057=(gconst118*r11);
IkReal x6058=((1.0)*cj0);
IkReal x6059=(sj1*sj2);
IkReal x6060=((1.0)*x6050);
IkReal x6061=((1.0)*x6049);
evalcond[0]=((((-1.0)*r22*x6060))+(((-1.0)*x6053*x6061))+((x6049*x6056)));
evalcond[1]=(sj0+(((-1.0)*x6055*x6061))+((x6049*x6052))+(((-1.0)*r02*x6060)));
evalcond[2]=((((-1.0)*x6054*x6061))+(((-1.0)*x6058))+((x6049*x6057))+(((-1.0)*r12*x6060)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6049))+(((-1.0)*x6053*x6060))+((x6050*x6056)));
evalcond[4]=((((-1.0)*x6055*x6060))+(((-1.0)*x6058*x6059))+((cj0*x6051))+((x6050*x6052))+((r02*x6049)));
evalcond[5]=((((-1.0)*x6054*x6060))+((sj0*x6051))+((x6050*x6057))+(((-1.0)*sj0*x6059))+((r12*x6049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6063 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6063)==0){
continue;
}
IkReal x6062=pow(x6063,-0.5);
CheckValue<IkReal> x6064 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6064.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6064.value));
IkReal gconst121=((-1.0)*r01*x6062);
IkReal gconst122=(r00*x6062);
CheckValue<IkReal> x6065 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6065.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6065.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6068 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
IkReal x6066=((-1.0)*(x6068.value));
IkReal x6067=x6062;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6066;
IkReal gconst120=x6066;
IkReal gconst121=((-1.0)*r01*x6067);
IkReal gconst122=(r00*x6067);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6069=((1.0)*gconst122);
CheckValue<IkReal> x6070=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x6069)))),-1);
if(!x6070.valid){
continue;
}
CheckValue<IkReal> x6071 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst121*r01))+(((-1.0)*cj0*r00*x6069))+(((-1.0)*r10*sj0*x6069))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6070.value)))+(x6071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6072=IKsin(j4);
IkReal x6073=IKcos(j4);
IkReal x6074=(cj1*cj2);
IkReal x6075=(gconst121*r11);
IkReal x6076=(gconst122*r00);
IkReal x6077=(gconst122*r10);
IkReal x6078=(gconst122*r20);
IkReal x6079=((1.0)*cj0);
IkReal x6080=(sj1*sj2);
IkReal x6081=((1.0)*x6073);
IkReal x6082=((1.0)*x6072);
IkReal x6083=(gconst121*x6072);
IkReal x6084=(gconst121*x6073);
evalcond[0]=((((-1.0)*r22*x6081))+((r21*x6083))+(((-1.0)*x6078*x6082)));
evalcond[1]=(sj0+((r01*x6083))+(((-1.0)*r02*x6081))+(((-1.0)*x6076*x6082)));
evalcond[2]=((((-1.0)*r12*x6081))+(((-1.0)*x6079))+(((-1.0)*x6077*x6082))+((x6072*x6075)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6072))+((r21*x6084))+(((-1.0)*x6078*x6081)));
evalcond[4]=(((r01*x6084))+((cj0*x6074))+(((-1.0)*x6079*x6080))+((r02*x6072))+(((-1.0)*x6076*x6081)));
evalcond[5]=(((sj0*x6074))+(((-1.0)*sj0*x6080))+(((-1.0)*x6077*x6081))+((x6073*x6075))+((r12*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6085 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6085.valid){
continue;
}
CheckValue<IkReal> x6086=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x6086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6085.value)+(((1.5707963267949)*(x6086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6087=IKsin(j4);
IkReal x6088=IKcos(j4);
IkReal x6089=(cj1*cj2);
IkReal x6090=(gconst121*r11);
IkReal x6091=(gconst122*r00);
IkReal x6092=(gconst122*r10);
IkReal x6093=(gconst122*r20);
IkReal x6094=((1.0)*cj0);
IkReal x6095=(sj1*sj2);
IkReal x6096=((1.0)*x6088);
IkReal x6097=((1.0)*x6087);
IkReal x6098=(gconst121*x6087);
IkReal x6099=(gconst121*x6088);
evalcond[0]=((((-1.0)*r22*x6096))+(((-1.0)*x6093*x6097))+((r21*x6098)));
evalcond[1]=(sj0+(((-1.0)*x6091*x6097))+((r01*x6098))+(((-1.0)*r02*x6096)));
evalcond[2]=((((-1.0)*x6094))+(((-1.0)*x6092*x6097))+((x6087*x6090))+(((-1.0)*r12*x6096)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6093*x6096))+((r21*x6099))+((r22*x6087)));
evalcond[4]=((((-1.0)*x6091*x6096))+((r01*x6099))+((cj0*x6089))+(((-1.0)*x6094*x6095))+((r02*x6087)));
evalcond[5]=(((sj0*x6089))+((x6088*x6090))+(((-1.0)*x6092*x6096))+(((-1.0)*sj0*x6095))+((r12*x6087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6101 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6101)==0){
continue;
}
IkReal x6100=pow(x6101,-0.5);
CheckValue<IkReal> x6102 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6102.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6102.value))));
IkReal gconst124=((1.0)*r01*x6100);
IkReal gconst125=((-1.0)*r00*x6100);
CheckValue<IkReal> x6103 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6103.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6103.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6106 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6106.valid){
continue;
}
IkReal x6104=((1.0)*(x6106.value));
IkReal x6105=x6100;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6104)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6104)));
IkReal gconst124=((1.0)*r01*x6105);
IkReal gconst125=((-1.0)*r00*x6105);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6109 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6109.valid){
continue;
}
IkReal x6107=((1.0)*(x6109.value));
IkReal x6108=x6100;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6107)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6107)));
IkReal gconst124=((1.0)*r01*x6108);
IkReal gconst125=((-1.0)*r00*x6108);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6112 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6112.valid){
continue;
}
IkReal x6110=((1.0)*(x6112.value));
IkReal x6111=x6100;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6110)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6110)));
IkReal gconst124=((1.0)*r01*x6111);
IkReal gconst125=((-1.0)*r00*x6111);
IkReal x6113=r02*r02;
IkReal x6114=(r12*sj0);
IkReal x6115=x6100;
IkReal x6116=(cj0*x6115);
j4eval[0]=((IKabs((((r02*x6114*x6115))+((x6113*x6116))+(((-1.0)*x6116)))))+(IKabs((x6114+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6117=((1.0)*gconst125);
CheckValue<IkReal> x6118=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x6117)))),-1);
if(!x6118.valid){
continue;
}
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6117))+(((-1.0)*r10*sj0*x6117))+((cj0*gconst124*r01))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6118.value)))+(x6119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6120=IKsin(j4);
IkReal x6121=IKcos(j4);
IkReal x6122=(cj1*cj2);
IkReal x6123=(gconst125*r20);
IkReal x6124=(gconst124*r01);
IkReal x6125=(gconst125*r00);
IkReal x6126=(gconst125*r10);
IkReal x6127=((1.0)*cj0);
IkReal x6128=(sj1*sj2);
IkReal x6129=((1.0)*x6121);
IkReal x6130=((1.0)*x6120);
IkReal x6131=(gconst124*x6120);
IkReal x6132=(gconst124*x6121);
evalcond[0]=(((r21*x6131))+(((-1.0)*r22*x6129))+(((-1.0)*x6123*x6130)));
evalcond[1]=(sj0+(((-1.0)*x6125*x6130))+(((-1.0)*r02*x6129))+((x6120*x6124)));
evalcond[2]=(((r11*x6131))+(((-1.0)*x6126*x6130))+(((-1.0)*r12*x6129))+(((-1.0)*x6127)));
evalcond[3]=(((r21*x6132))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6123*x6129))+((r22*x6120)));
evalcond[4]=((((-1.0)*x6125*x6129))+((cj0*x6122))+((x6121*x6124))+(((-1.0)*x6127*x6128))+((r02*x6120)));
evalcond[5]=(((r11*x6132))+((r12*x6120))+((sj0*x6122))+(((-1.0)*x6126*x6129))+(((-1.0)*sj0*x6128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6133=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6133.valid){
continue;
}
CheckValue<IkReal> x6134 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6133.value)))+(x6134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6135=IKsin(j4);
IkReal x6136=IKcos(j4);
IkReal x6137=(cj1*cj2);
IkReal x6138=(gconst125*r20);
IkReal x6139=(gconst124*r01);
IkReal x6140=(gconst125*r00);
IkReal x6141=(gconst125*r10);
IkReal x6142=((1.0)*cj0);
IkReal x6143=(sj1*sj2);
IkReal x6144=((1.0)*x6136);
IkReal x6145=((1.0)*x6135);
IkReal x6146=(gconst124*x6135);
IkReal x6147=(gconst124*x6136);
evalcond[0]=((((-1.0)*x6138*x6145))+((r21*x6146))+(((-1.0)*r22*x6144)));
evalcond[1]=(sj0+(((-1.0)*r02*x6144))+((x6135*x6139))+(((-1.0)*x6140*x6145)));
evalcond[2]=((((-1.0)*x6142))+((r11*x6146))+(((-1.0)*x6141*x6145))+(((-1.0)*r12*x6144)));
evalcond[3]=(((cj2*sj1))+((r22*x6135))+((cj1*sj2))+(((-1.0)*x6138*x6144))+((r21*x6147)));
evalcond[4]=(((x6136*x6139))+((cj0*x6137))+(((-1.0)*x6142*x6143))+((r02*x6135))+(((-1.0)*x6140*x6144)));
evalcond[5]=(((r11*x6147))+(((-1.0)*x6141*x6144))+((r12*x6135))+(((-1.0)*sj0*x6143))+((sj0*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6148 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6148.valid){
continue;
}
CheckValue<IkReal> x6149=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x6149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6148.value)+(((1.5707963267949)*(x6149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6150=IKsin(j4);
IkReal x6151=IKcos(j4);
IkReal x6152=(cj1*cj2);
IkReal x6153=(gconst125*r20);
IkReal x6154=(gconst124*r01);
IkReal x6155=(gconst125*r00);
IkReal x6156=(gconst125*r10);
IkReal x6157=((1.0)*cj0);
IkReal x6158=(sj1*sj2);
IkReal x6159=((1.0)*x6151);
IkReal x6160=((1.0)*x6150);
IkReal x6161=(gconst124*x6150);
IkReal x6162=(gconst124*x6151);
evalcond[0]=((((-1.0)*x6153*x6160))+(((-1.0)*r22*x6159))+((r21*x6161)));
evalcond[1]=((((-1.0)*r02*x6159))+sj0+(((-1.0)*x6155*x6160))+((x6150*x6154)));
evalcond[2]=((((-1.0)*x6156*x6160))+((r11*x6161))+(((-1.0)*x6157))+(((-1.0)*r12*x6159)));
evalcond[3]=(((r22*x6150))+((cj2*sj1))+((cj1*sj2))+((r21*x6162))+(((-1.0)*x6153*x6159)));
evalcond[4]=(((cj0*x6152))+(((-1.0)*x6155*x6159))+((r02*x6150))+(((-1.0)*x6157*x6158))+((x6151*x6154)));
evalcond[5]=(((r12*x6150))+((sj0*x6152))+((r11*x6162))+(((-1.0)*sj0*x6158))+(((-1.0)*x6156*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6163=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6163;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6164=((1.0)*cj5);
IkReal x6165=((((-1.0)*r21*x6164))+(((-1.0)*r20*sj5)));
j4eval[0]=x6165;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6164))))));
j4eval[2]=IKsign(x6165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6166=(r01*sj5);
IkReal x6167=(cj1*sj2);
IkReal x6168=(cj2*sj1);
IkReal x6169=((1.0)*r02);
IkReal x6170=((1.0)*cj5*r00);
IkReal x6171=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6171;
j4eval[1]=((IKabs(((((-1.0)*x6168*x6170))+((x6166*x6168))+((x6166*x6167))+(((-1.0)*x6167*x6170)))))+(IKabs(((((-1.0)*x6168*x6169))+(((-1.0)*x6167*x6169))))));
j4eval[2]=IKsign(x6171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6172=(r01*sj5);
IkReal x6173=(cj1*sj2);
IkReal x6174=(cj2*sj1);
IkReal x6175=((1.0)*r02);
IkReal x6176=((1.0)*cj5*r00);
CheckValue<IkReal> x6177 = IKatan2WithCheck(IkReal((((x6172*x6174))+((x6172*x6173))+(((-1.0)*x6174*x6176))+(((-1.0)*x6173*x6176)))),IkReal(((((-1.0)*x6174*x6175))+(((-1.0)*x6173*x6175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6177.valid){
continue;
}
CheckValue<IkReal> x6178=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6177.value)+(((1.5707963267949)*(x6178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6179=IKcos(j4);
IkReal x6180=IKsin(j4);
IkReal x6181=(cj5*r00);
IkReal x6182=(cj5*r10);
IkReal x6183=(r21*sj5);
IkReal x6184=(cj5*r20);
IkReal x6185=((1.0)*x6179);
IkReal x6186=((1.0)*x6180);
IkReal x6187=(sj5*x6180);
IkReal x6188=(sj5*x6179);
evalcond[0]=(((r01*x6188))+((r02*x6180))+(((-1.0)*x6181*x6185)));
evalcond[1]=((((-1.0)*r22*x6185))+(((-1.0)*x6184*x6186))+((x6180*x6183)));
evalcond[2]=((((-1.0)*x6182*x6186))+(((-1.0)*r12*x6185))+((r11*x6187)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6185))+((r01*x6187))+(((-1.0)*x6181*x6186)));
evalcond[4]=(((cj2*sj1))+((r22*x6180))+(((-1.0)*x6184*x6185))+((cj1*sj2))+((x6179*x6183)));
evalcond[5]=((((-1.0)*x6182*x6185))+(((-1.0)*sj1*sj2))+((r11*x6188))+((cj1*cj2))+((r12*x6180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6189=((1.0)*cj5);
CheckValue<IkReal> x6190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6189))+(((-1.0)*r20*sj5)))),-1);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6190.value)))+(x6191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKcos(j4);
IkReal x6193=IKsin(j4);
IkReal x6194=(cj5*r00);
IkReal x6195=(cj5*r10);
IkReal x6196=(r21*sj5);
IkReal x6197=(cj5*r20);
IkReal x6198=((1.0)*x6192);
IkReal x6199=((1.0)*x6193);
IkReal x6200=(sj5*x6193);
IkReal x6201=(sj5*x6192);
evalcond[0]=(((r01*x6201))+((r02*x6193))+(((-1.0)*x6194*x6198)));
evalcond[1]=((((-1.0)*x6197*x6199))+(((-1.0)*r22*x6198))+((x6193*x6196)));
evalcond[2]=((((-1.0)*r12*x6198))+(((-1.0)*x6195*x6199))+((r11*x6200)));
evalcond[3]=((1.0)+((r01*x6200))+(((-1.0)*x6194*x6199))+(((-1.0)*r02*x6198)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6197*x6198))+((r22*x6193))+((x6192*x6196)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6193))+(((-1.0)*x6195*x6198))+((cj1*cj2))+((r11*x6201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6202 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6202.valid){
continue;
}
CheckValue<IkReal> x6203=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6202.value)+(((1.5707963267949)*(x6203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6204=IKcos(j4);
IkReal x6205=IKsin(j4);
IkReal x6206=(cj5*r00);
IkReal x6207=(cj5*r10);
IkReal x6208=(r21*sj5);
IkReal x6209=(cj5*r20);
IkReal x6210=((1.0)*x6204);
IkReal x6211=((1.0)*x6205);
IkReal x6212=(sj5*x6205);
IkReal x6213=(sj5*x6204);
evalcond[0]=((((-1.0)*x6206*x6210))+((r02*x6205))+((r01*x6213)));
evalcond[1]=((((-1.0)*x6209*x6211))+((x6205*x6208))+(((-1.0)*r22*x6210)));
evalcond[2]=(((r11*x6212))+(((-1.0)*r12*x6210))+(((-1.0)*x6207*x6211)));
evalcond[3]=((1.0)+(((-1.0)*x6206*x6211))+((r01*x6212))+(((-1.0)*r02*x6210)));
evalcond[4]=(((cj2*sj1))+((r22*x6205))+(((-1.0)*x6209*x6210))+((cj1*sj2))+((x6204*x6208)));
evalcond[5]=(((r11*x6213))+(((-1.0)*sj1*sj2))+(((-1.0)*x6207*x6210))+((cj1*cj2))+((r12*x6205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6214=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6214;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6215=((1.0)*cj5);
IkReal x6216=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6215)));
j4eval[0]=x6216;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6215))))));
j4eval[2]=IKsign(x6216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6217=cj5*cj5;
IkReal x6218=r01*r01;
IkReal x6219=(cj5*r00);
IkReal x6220=(r01*sj5);
IkReal x6221=(x6218+(((-2.0)*x6219*x6220))+(((-1.0)*x6217*x6218))+((x6217*(r00*r00)))+(r02*r02));
j4eval[0]=x6221;
j4eval[1]=IKsign(x6221);
j4eval[2]=((IKabs(r02))+(IKabs((x6220+(((-1.0)*x6219))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6222=cj5*cj5;
IkReal x6223=r01*r01;
IkReal x6224=(r01*sj5);
IkReal x6225=(cj5*r00);
CheckValue<IkReal> x6226=IKPowWithIntegerCheck(IKsign((((x6222*(r00*r00)))+x6223+(((-1.0)*x6222*x6223))+(((-2.0)*x6224*x6225))+(r02*r02))),-1);
if(!x6226.valid){
continue;
}
CheckValue<IkReal> x6227 = IKatan2WithCheck(IkReal((x6224+(((-1.0)*x6225)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6226.value)))+(x6227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6228=IKcos(j4);
IkReal x6229=IKsin(j4);
IkReal x6230=(cj5*r00);
IkReal x6231=(cj5*r10);
IkReal x6232=(r21*sj5);
IkReal x6233=(cj5*r20);
IkReal x6234=((1.0)*x6228);
IkReal x6235=((1.0)*x6229);
IkReal x6236=(sj5*x6229);
IkReal x6237=(sj5*x6228);
evalcond[0]=(((r02*x6229))+((r01*x6237))+(((-1.0)*x6230*x6234)));
evalcond[1]=(((x6229*x6232))+(((-1.0)*r22*x6234))+(((-1.0)*x6233*x6235)));
evalcond[2]=((((-1.0)*r12*x6234))+(((-1.0)*x6231*x6235))+((r11*x6236)));
evalcond[3]=((-1.0)+((r01*x6236))+(((-1.0)*r02*x6234))+(((-1.0)*x6230*x6235)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6228*x6232))+((r22*x6229))+(((-1.0)*x6233*x6234)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6231*x6234))+((r12*x6229))+((r11*x6237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6238=((1.0)*cj5);
CheckValue<IkReal> x6239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6238))+(((-1.0)*r10*sj5)))),-1);
if(!x6239.valid){
continue;
}
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6239.value)))+(x6240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6241=IKcos(j4);
IkReal x6242=IKsin(j4);
IkReal x6243=(cj5*r00);
IkReal x6244=(cj5*r10);
IkReal x6245=(r21*sj5);
IkReal x6246=(cj5*r20);
IkReal x6247=((1.0)*x6241);
IkReal x6248=((1.0)*x6242);
IkReal x6249=(sj5*x6242);
IkReal x6250=(sj5*x6241);
evalcond[0]=(((r01*x6250))+((r02*x6242))+(((-1.0)*x6243*x6247)));
evalcond[1]=(((x6242*x6245))+(((-1.0)*r22*x6247))+(((-1.0)*x6246*x6248)));
evalcond[2]=(((r11*x6249))+(((-1.0)*r12*x6247))+(((-1.0)*x6244*x6248)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6247))+((r01*x6249))+(((-1.0)*x6243*x6248)));
evalcond[4]=(((cj2*sj1))+((x6241*x6245))+((cj1*sj2))+((r22*x6242))+(((-1.0)*x6246*x6247)));
evalcond[5]=(((r12*x6242))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6244*x6247))+((r11*x6250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6251.valid){
continue;
}
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6251.value)))+(x6252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6253=IKcos(j4);
IkReal x6254=IKsin(j4);
IkReal x6255=(cj5*r00);
IkReal x6256=(cj5*r10);
IkReal x6257=(r21*sj5);
IkReal x6258=(cj5*r20);
IkReal x6259=((1.0)*x6253);
IkReal x6260=((1.0)*x6254);
IkReal x6261=(sj5*x6254);
IkReal x6262=(sj5*x6253);
evalcond[0]=(((r01*x6262))+(((-1.0)*x6255*x6259))+((r02*x6254)));
evalcond[1]=(((x6254*x6257))+(((-1.0)*x6258*x6260))+(((-1.0)*r22*x6259)));
evalcond[2]=((((-1.0)*r12*x6259))+(((-1.0)*x6256*x6260))+((r11*x6261)));
evalcond[3]=((-1.0)+((r01*x6261))+(((-1.0)*r02*x6259))+(((-1.0)*x6255*x6260)));
evalcond[4]=(((cj2*sj1))+((r22*x6254))+((cj1*sj2))+((x6253*x6257))+(((-1.0)*x6258*x6259)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6256*x6259))+((r12*x6254))+((r11*x6262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6264 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6264)==0){
continue;
}
IkReal x6263=pow(x6264,-0.5);
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6265.value));
IkReal gconst127=((-1.0)*r11*x6263);
IkReal gconst128=(r10*x6263);
CheckValue<IkReal> x6266 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6266.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6266.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
IkReal x6267=((-1.0)*(x6269.value));
IkReal x6268=x6263;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6267;
IkReal gconst126=x6267;
IkReal gconst127=((-1.0)*r11*x6268);
IkReal gconst128=(r10*x6268);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6270=((1.0)*gconst128);
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6270))+(((-1.0)*r10*sj0*x6270))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
CheckValue<IkReal> x6272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6270))+(((-1.0)*gconst127*r20)))),-1);
if(!x6272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6271.value)+(((1.5707963267949)*(x6272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6273=IKsin(j4);
IkReal x6274=IKcos(j4);
IkReal x6275=(cj1*cj2);
IkReal x6276=(gconst127*r01);
IkReal x6277=(gconst128*r10);
IkReal x6278=(gconst128*r00);
IkReal x6279=(gconst128*r20);
IkReal x6280=((1.0)*cj0);
IkReal x6281=(sj1*sj2);
IkReal x6282=((1.0)*x6274);
IkReal x6283=((1.0)*x6273);
IkReal x6284=(gconst127*x6274);
IkReal x6285=(gconst127*x6273);
evalcond[0]=((((-1.0)*x6279*x6283))+(((-1.0)*r22*x6282))+((r21*x6285)));
evalcond[1]=(sj0+((x6273*x6276))+(((-1.0)*r02*x6282))+(((-1.0)*x6278*x6283)));
evalcond[2]=(((r11*x6285))+(((-1.0)*x6280))+(((-1.0)*r12*x6282))+(((-1.0)*x6277*x6283)));
evalcond[3]=(((r22*x6273))+((cj2*sj1))+(((-1.0)*x6279*x6282))+((cj1*sj2))+((r21*x6284)));
evalcond[4]=(((r02*x6273))+(((-1.0)*x6280*x6281))+((x6274*x6276))+(((-1.0)*x6278*x6282))+((cj0*x6275)));
evalcond[5]=(((r12*x6273))+(((-1.0)*sj0*x6281))+((sj0*x6275))+((r11*x6284))+(((-1.0)*x6277*x6282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6286 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6286.valid){
continue;
}
CheckValue<IkReal> x6287=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x6287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6286.value)+(((1.5707963267949)*(x6287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6288=IKsin(j4);
IkReal x6289=IKcos(j4);
IkReal x6290=(cj1*cj2);
IkReal x6291=(gconst127*r01);
IkReal x6292=(gconst128*r10);
IkReal x6293=(gconst128*r00);
IkReal x6294=(gconst128*r20);
IkReal x6295=((1.0)*cj0);
IkReal x6296=(sj1*sj2);
IkReal x6297=((1.0)*x6289);
IkReal x6298=((1.0)*x6288);
IkReal x6299=(gconst127*x6289);
IkReal x6300=(gconst127*x6288);
evalcond[0]=((((-1.0)*x6294*x6298))+(((-1.0)*r22*x6297))+((r21*x6300)));
evalcond[1]=(sj0+(((-1.0)*r02*x6297))+(((-1.0)*x6293*x6298))+((x6288*x6291)));
evalcond[2]=((((-1.0)*x6295))+(((-1.0)*r12*x6297))+((r11*x6300))+(((-1.0)*x6292*x6298)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6294*x6297))+((r22*x6288))+((cj1*sj2))+((r21*x6299)));
evalcond[4]=(((cj0*x6290))+(((-1.0)*x6293*x6297))+((r02*x6288))+(((-1.0)*x6295*x6296))+((x6289*x6291)));
evalcond[5]=(((r11*x6299))+(((-1.0)*sj0*x6296))+((r12*x6288))+((sj0*x6290))+(((-1.0)*x6292*x6297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6302 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6302)==0){
continue;
}
IkReal x6301=pow(x6302,-0.5);
CheckValue<IkReal> x6303 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6303.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6303.value))));
IkReal gconst130=((1.0)*r11*x6301);
IkReal gconst131=((-1.0)*r10*x6301);
CheckValue<IkReal> x6304 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6304.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6304.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6307 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6307.valid){
continue;
}
IkReal x6305=((1.0)*(x6307.value));
IkReal x6306=x6301;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6305)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6305)));
IkReal gconst130=((1.0)*r11*x6306);
IkReal gconst131=((-1.0)*r10*x6306);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
IkReal x6308=((1.0)*(x6310.value));
IkReal x6309=x6301;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6308)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6308)));
IkReal gconst130=((1.0)*r11*x6309);
IkReal gconst131=((-1.0)*r10*x6309);
IkReal x6311=r12*r12;
IkReal x6312=(cj0*r02);
IkReal x6313=x6301;
IkReal x6314=(sj0*x6313);
j4eval[0]=((IKabs((x6312+((r12*sj0)))))+(IKabs((((x6311*x6314))+(((-1.0)*x6314))+((r12*x6312*x6313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
IkReal x6315=((1.0)*(x6317.value));
IkReal x6316=x6301;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6315)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6315)));
IkReal gconst130=((1.0)*r11*x6316);
IkReal gconst131=((-1.0)*r10*x6316);
IkReal x6318=(cj1*sj2);
IkReal x6319=(cj2*sj1);
IkReal x6320=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6326=IKPowWithIntegerCheck(x6320,-1);
if(!x6326.valid){
continue;
}
IkReal x6321=x6326.value;
IkReal x6322=((1.0)*x6321);
IkReal x6323=x6301;
IkReal x6324=(r12*r22*x6323);
IkReal x6325=((((-1.0)*x6322*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x6321))+(((-1.0)*x6322*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x6325;
j4eval[1]=((IKabs((((r22*x6318))+((r22*x6319)))))+(IKabs((((x6318*x6324))+((x6319*x6324))))));
j4eval[2]=IKsign(x6325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6327=(cj2*sj1);
IkReal x6328=(cj1*sj2);
IkReal x6329=(gconst130*r21);
IkReal x6330=((1.0)*gconst131*r20);
CheckValue<IkReal> x6331=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r20*x6330))+(((-1.0)*(x6329*x6329)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst131*r20*x6329)))),-1);
if(!x6331.valid){
continue;
}
CheckValue<IkReal> x6332 = IKatan2WithCheck(IkReal((((r22*x6327))+((r22*x6328)))),IkReal(((((-1.0)*x6327*x6330))+((x6327*x6329))+((x6328*x6329))+(((-1.0)*x6328*x6330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6331.value)))+(x6332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6333=IKsin(j4);
IkReal x6334=IKcos(j4);
IkReal x6335=(cj1*cj2);
IkReal x6336=(gconst131*r10);
IkReal x6337=(gconst130*r11);
IkReal x6338=(gconst131*r20);
IkReal x6339=(gconst131*r00);
IkReal x6340=((1.0)*cj0);
IkReal x6341=(sj1*sj2);
IkReal x6342=((1.0)*x6334);
IkReal x6343=((1.0)*x6333);
IkReal x6344=(gconst130*x6334);
IkReal x6345=(gconst130*x6333);
evalcond[0]=((((-1.0)*r22*x6342))+((r21*x6345))+(((-1.0)*x6338*x6343)));
evalcond[1]=(sj0+(((-1.0)*x6339*x6343))+((r01*x6345))+(((-1.0)*r02*x6342)));
evalcond[2]=(((x6333*x6337))+(((-1.0)*x6336*x6343))+(((-1.0)*r12*x6342))+(((-1.0)*x6340)));
evalcond[3]=(((cj2*sj1))+((r22*x6333))+((cj1*sj2))+((r21*x6344))+(((-1.0)*x6338*x6342)));
evalcond[4]=((((-1.0)*x6340*x6341))+((r02*x6333))+(((-1.0)*x6339*x6342))+((r01*x6344))+((cj0*x6335)));
evalcond[5]=(((r12*x6333))+((sj0*x6335))+((x6334*x6337))+(((-1.0)*sj0*x6341))+(((-1.0)*x6336*x6342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6346=((1.0)*gconst131);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x6346))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x6346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6346))+(((-1.0)*gconst130*r20)))),-1);
if(!x6348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6347.value)+(((1.5707963267949)*(x6348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6349=IKsin(j4);
IkReal x6350=IKcos(j4);
IkReal x6351=(cj1*cj2);
IkReal x6352=(gconst131*r10);
IkReal x6353=(gconst130*r11);
IkReal x6354=(gconst131*r20);
IkReal x6355=(gconst131*r00);
IkReal x6356=((1.0)*cj0);
IkReal x6357=(sj1*sj2);
IkReal x6358=((1.0)*x6350);
IkReal x6359=((1.0)*x6349);
IkReal x6360=(gconst130*x6350);
IkReal x6361=(gconst130*x6349);
evalcond[0]=((((-1.0)*x6354*x6359))+(((-1.0)*r22*x6358))+((r21*x6361)));
evalcond[1]=(sj0+(((-1.0)*x6355*x6359))+((r01*x6361))+(((-1.0)*r02*x6358)));
evalcond[2]=(((x6349*x6353))+(((-1.0)*r12*x6358))+(((-1.0)*x6356))+(((-1.0)*x6352*x6359)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6354*x6358))+((r22*x6349))+((cj1*sj2))+((r21*x6360)));
evalcond[4]=((((-1.0)*x6355*x6358))+((r01*x6360))+((r02*x6349))+(((-1.0)*x6356*x6357))+((cj0*x6351)));
evalcond[5]=(((r12*x6349))+((sj0*x6351))+((x6350*x6353))+(((-1.0)*sj0*x6357))+(((-1.0)*x6352*x6358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6362=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6362.valid){
continue;
}
CheckValue<IkReal> x6363 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6362.value)))+(x6363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6364=IKsin(j4);
IkReal x6365=IKcos(j4);
IkReal x6366=(cj1*cj2);
IkReal x6367=(gconst131*r10);
IkReal x6368=(gconst130*r11);
IkReal x6369=(gconst131*r20);
IkReal x6370=(gconst131*r00);
IkReal x6371=((1.0)*cj0);
IkReal x6372=(sj1*sj2);
IkReal x6373=((1.0)*x6365);
IkReal x6374=((1.0)*x6364);
IkReal x6375=(gconst130*x6365);
IkReal x6376=(gconst130*x6364);
evalcond[0]=(((r21*x6376))+(((-1.0)*r22*x6373))+(((-1.0)*x6369*x6374)));
evalcond[1]=(sj0+(((-1.0)*r02*x6373))+((r01*x6376))+(((-1.0)*x6370*x6374)));
evalcond[2]=((((-1.0)*x6367*x6374))+(((-1.0)*r12*x6373))+(((-1.0)*x6371))+((x6364*x6368)));
evalcond[3]=(((r21*x6375))+((cj2*sj1))+((cj1*sj2))+((r22*x6364))+(((-1.0)*x6369*x6373)));
evalcond[4]=(((r01*x6375))+(((-1.0)*x6370*x6373))+(((-1.0)*x6371*x6372))+((cj0*x6366))+((r02*x6364)));
evalcond[5]=(((r12*x6364))+((sj0*x6366))+((x6365*x6368))+(((-1.0)*x6367*x6373))+(((-1.0)*sj0*x6372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6377=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6377;
j4eval[1]=IKsign(x6377);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6378=((1.0)*cj5);
IkReal x6379=((((-1.0)*r21*x6378))+(((-1.0)*r20*sj5)));
j4eval[0]=x6379;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6378))))));
j4eval[2]=IKsign(x6379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6380=cj5*cj5;
IkReal x6381=r11*r11;
IkReal x6382=(r11*sj5);
IkReal x6383=(cj5*r10);
IkReal x6384=(((x6380*(r10*r10)))+(((-1.0)*x6380*x6381))+(r12*r12)+x6381+(((-2.0)*x6382*x6383)));
j4eval[0]=x6384;
j4eval[1]=IKsign(x6384);
j4eval[2]=((IKabs(((((-1.0)*x6383))+x6382)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6385=cj5*cj5;
IkReal x6386=r11*r11;
IkReal x6387=(cj5*r10);
IkReal x6388=(r11*sj5);
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6386+(((-1.0)*x6385*x6386))+((x6385*(r10*r10)))+(((-2.0)*x6387*x6388)))),-1);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal(((((-1.0)*x6387))+x6388)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6389.value)))+(x6390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKcos(j4);
IkReal x6392=IKsin(j4);
IkReal x6393=(cj5*r00);
IkReal x6394=(cj5*r10);
IkReal x6395=(r21*sj5);
IkReal x6396=(cj5*r20);
IkReal x6397=((1.0)*x6391);
IkReal x6398=((1.0)*x6392);
IkReal x6399=(sj5*x6392);
IkReal x6400=(sj5*x6391);
evalcond[0]=(((r12*x6392))+(((-1.0)*x6394*x6397))+((r11*x6400)));
evalcond[1]=(((x6392*x6395))+(((-1.0)*r22*x6397))+(((-1.0)*x6396*x6398)));
evalcond[2]=(((r01*x6399))+(((-1.0)*r02*x6397))+(((-1.0)*x6393*x6398)));
evalcond[3]=((-1.0)+((r11*x6399))+(((-1.0)*x6394*x6398))+(((-1.0)*r12*x6397)));
evalcond[4]=(((x6391*x6395))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6396*x6397))+((r22*x6392)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x6400))+((cj1*cj2))+(((-1.0)*x6393*x6397))+((r02*x6392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6401=((1.0)*cj5);
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
CheckValue<IkReal> x6403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6401))+(((-1.0)*r20*sj5)))),-1);
if(!x6403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6402.value)+(((1.5707963267949)*(x6403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6404=IKcos(j4);
IkReal x6405=IKsin(j4);
IkReal x6406=(cj5*r00);
IkReal x6407=(cj5*r10);
IkReal x6408=(r21*sj5);
IkReal x6409=(cj5*r20);
IkReal x6410=((1.0)*x6404);
IkReal x6411=((1.0)*x6405);
IkReal x6412=(sj5*x6405);
IkReal x6413=(sj5*x6404);
evalcond[0]=((((-1.0)*x6407*x6410))+((r12*x6405))+((r11*x6413)));
evalcond[1]=(((x6405*x6408))+(((-1.0)*r22*x6410))+(((-1.0)*x6409*x6411)));
evalcond[2]=(((r01*x6412))+(((-1.0)*x6406*x6411))+(((-1.0)*r02*x6410)));
evalcond[3]=((-1.0)+(((-1.0)*x6407*x6411))+(((-1.0)*r12*x6410))+((r11*x6412)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6404*x6408))+((r22*x6405))+(((-1.0)*x6409*x6410)));
evalcond[5]=(((r02*x6405))+((r01*x6413))+(((-1.0)*sj1*sj2))+(((-1.0)*x6406*x6410))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6414 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6414.value)+(((1.5707963267949)*(x6415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6416=IKcos(j4);
IkReal x6417=IKsin(j4);
IkReal x6418=(cj5*r00);
IkReal x6419=(cj5*r10);
IkReal x6420=(r21*sj5);
IkReal x6421=(cj5*r20);
IkReal x6422=((1.0)*x6416);
IkReal x6423=((1.0)*x6417);
IkReal x6424=(sj5*x6417);
IkReal x6425=(sj5*x6416);
evalcond[0]=((((-1.0)*x6419*x6422))+((r11*x6425))+((r12*x6417)));
evalcond[1]=((((-1.0)*x6421*x6423))+(((-1.0)*r22*x6422))+((x6417*x6420)));
evalcond[2]=((((-1.0)*x6418*x6423))+((r01*x6424))+(((-1.0)*r02*x6422)));
evalcond[3]=((-1.0)+(((-1.0)*x6419*x6423))+((r11*x6424))+(((-1.0)*r12*x6422)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6421*x6422))+((cj1*sj2))+((x6416*x6420))+((r22*x6417)));
evalcond[5]=(((r02*x6417))+(((-1.0)*x6418*x6422))+(((-1.0)*sj1*sj2))+((r01*x6425))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6426=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6426;
j4eval[1]=IKsign(x6426);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6427=((1.0)*cj5);
IkReal x6428=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6427)));
j4eval[0]=x6428;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6427))))));
j4eval[2]=IKsign(x6428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6429=cj5*cj5;
IkReal x6430=r11*r11;
IkReal x6431=(cj5*r10);
IkReal x6432=(r11*sj5);
IkReal x6433=(((x6429*x6430))+(((-1.0)*(r12*r12)))+(((2.0)*x6431*x6432))+(((-1.0)*x6429*(r10*r10)))+(((-1.0)*x6430)));
j4eval[0]=x6433;
j4eval[1]=IKsign(x6433);
j4eval[2]=((IKabs(r12))+(IKabs((x6432+(((-1.0)*x6431))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6434=cj5*cj5;
IkReal x6435=r11*r11;
IkReal x6436=(cj5*r10);
IkReal x6437=(r11*sj5);
CheckValue<IkReal> x6438 = IKatan2WithCheck(IkReal((x6437+(((-1.0)*x6436)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6438.valid){
continue;
}
CheckValue<IkReal> x6439=IKPowWithIntegerCheck(IKsign((((x6434*x6435))+(((2.0)*x6436*x6437))+(((-1.0)*x6434*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6435)))),-1);
if(!x6439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6438.value)+(((1.5707963267949)*(x6439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6440=IKcos(j4);
IkReal x6441=IKsin(j4);
IkReal x6442=(cj5*r00);
IkReal x6443=(cj5*r10);
IkReal x6444=(r21*sj5);
IkReal x6445=(cj5*r20);
IkReal x6446=((1.0)*x6440);
IkReal x6447=((1.0)*x6441);
IkReal x6448=(sj5*x6441);
IkReal x6449=(sj5*x6440);
evalcond[0]=(((r12*x6441))+((r11*x6449))+(((-1.0)*x6443*x6446)));
evalcond[1]=((((-1.0)*x6445*x6447))+(((-1.0)*r22*x6446))+((x6441*x6444)));
evalcond[2]=(((r01*x6448))+(((-1.0)*r02*x6446))+(((-1.0)*x6442*x6447)));
evalcond[3]=((1.0)+((r11*x6448))+(((-1.0)*r12*x6446))+(((-1.0)*x6443*x6447)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6440*x6444))+((r22*x6441))+(((-1.0)*x6445*x6446)));
evalcond[5]=(((r01*x6449))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6442*x6446))+((r02*x6441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6450=((1.0)*cj5);
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6450))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
CheckValue<IkReal> x6452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6450)))),-1);
if(!x6452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6451.value)+(((1.5707963267949)*(x6452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6453=IKcos(j4);
IkReal x6454=IKsin(j4);
IkReal x6455=(cj5*r00);
IkReal x6456=(cj5*r10);
IkReal x6457=(r21*sj5);
IkReal x6458=(cj5*r20);
IkReal x6459=((1.0)*x6453);
IkReal x6460=((1.0)*x6454);
IkReal x6461=(sj5*x6454);
IkReal x6462=(sj5*x6453);
evalcond[0]=((((-1.0)*x6456*x6459))+((r11*x6462))+((r12*x6454)));
evalcond[1]=((((-1.0)*x6458*x6460))+((x6454*x6457))+(((-1.0)*r22*x6459)));
evalcond[2]=((((-1.0)*r02*x6459))+((r01*x6461))+(((-1.0)*x6455*x6460)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6459))+(((-1.0)*x6456*x6460))+((r11*x6461)));
evalcond[4]=(((cj2*sj1))+((x6453*x6457))+((cj1*sj2))+((r22*x6454))+(((-1.0)*x6458*x6459)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6462))+(((-1.0)*x6455*x6459))+((r02*x6454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6463=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6463.valid){
continue;
}
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6463.value)))+(x6464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6465=IKcos(j4);
IkReal x6466=IKsin(j4);
IkReal x6467=(cj5*r00);
IkReal x6468=(cj5*r10);
IkReal x6469=(r21*sj5);
IkReal x6470=(cj5*r20);
IkReal x6471=((1.0)*x6465);
IkReal x6472=((1.0)*x6466);
IkReal x6473=(sj5*x6466);
IkReal x6474=(sj5*x6465);
evalcond[0]=(((r11*x6474))+(((-1.0)*x6468*x6471))+((r12*x6466)));
evalcond[1]=(((x6466*x6469))+(((-1.0)*r22*x6471))+(((-1.0)*x6470*x6472)));
evalcond[2]=((((-1.0)*x6467*x6472))+((r01*x6473))+(((-1.0)*r02*x6471)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6471))+((r11*x6473))+(((-1.0)*x6468*x6472)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6465*x6469))+((r22*x6466))+(((-1.0)*x6470*x6471)));
evalcond[5]=((((-1.0)*x6467*x6471))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6474))+((r02*x6466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6475=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6475);
rxp0_2=(py*r00);
rxp1_0=(r21*x6475);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6476=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6476);
rxp0_2=(py*r00);
rxp1_0=(r21*x6476);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6477=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6477);
rxp0_2=(py*r00);
rxp1_0=(r21*x6477);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6480=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6480.valid){
continue;
}
IkReal x6478=x6480.value;
IkReal x6479=(cj0*x6478);
cj4array[0]=((((-1.0)*cj1*cj2*x6479))+((sj1*sj2*x6479)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6481=IKsin(j4);
IkReal x6482=IKcos(j4);
IkReal x6483=(r21*sj5);
IkReal x6484=((1.0)*x6482);
IkReal x6485=((1.0)*cj5*x6481);
evalcond[0]=(r12*x6481);
evalcond[1]=((((-1.0)*r12*x6484))+(((-1.0)*cj0)));
evalcond[2]=(((x6481*x6483))+(((-1.0)*r20*x6485)));
evalcond[3]=((((-1.0)*r00*x6485))+((r01*sj5*x6481)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*cj5*r20*x6484))+((x6482*x6483))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6488=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6488.valid){
continue;
}
IkReal x6486=x6488.value;
IkReal x6487=((1.0)*x6486);
cj4array[0]=((((-1.0)*cj2*sj1*x6487))+(((-1.0)*cj1*sj2*x6487)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6489=IKsin(j4);
IkReal x6490=IKcos(j4);
IkReal x6491=((1.0)*cj0);
IkReal x6492=(r01*sj5);
IkReal x6493=((1.0)*cj5*r00);
evalcond[0]=(r12*x6489);
evalcond[1]=((((-1.0)*x6491))+(((-1.0)*r12*x6490)));
evalcond[2]=((((-1.0)*cj5*r20*x6489))+((r21*sj5*x6489)));
evalcond[3]=((((-1.0)*x6489*x6493))+((x6489*x6492)));
evalcond[4]=((((-1.0)*sj1*sj2*x6491))+(((-1.0)*x6490*x6493))+((cj0*cj1*cj2))+((x6490*x6492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6494=IKPowWithIntegerCheck(r12,-1);
if(!x6494.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6494.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6495=IKsin(j4);
IkReal x6496=IKcos(j4);
IkReal x6497=((1.0)*cj5*r00);
IkReal x6498=(sj5*x6496);
IkReal x6499=(sj5*x6495);
IkReal x6500=((1.0)*cj5*r20);
evalcond[0]=(r12*x6495);
evalcond[1]=(((r21*x6499))+(((-1.0)*x6495*x6500)));
evalcond[2]=((((-1.0)*x6495*x6497))+((r01*x6499)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6496*x6500))+((r21*x6498)));
evalcond[4]=(((r01*x6498))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x6496*x6497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6501=((1.0)*cj5);
CheckValue<IkReal> x6502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6501))+(((-1.0)*r20*sj5)))),-1);
if(!x6502.valid){
continue;
}
CheckValue<IkReal> x6503 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x6501))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x6501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6502.value)))+(x6503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6504=IKsin(j4);
IkReal x6505=IKcos(j4);
IkReal x6506=(cj5*r00);
IkReal x6507=(cj1*cj2);
IkReal x6508=(cj5*r10);
IkReal x6509=(r21*sj5);
IkReal x6510=(cj5*r20);
IkReal x6511=((1.0)*x6505);
IkReal x6512=((1.0)*x6504);
IkReal x6513=(sj5*x6504);
IkReal x6514=(sj5*x6505);
IkReal x6515=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6511))+((x6504*x6509))+(((-1.0)*x6510*x6512)));
evalcond[1]=((((-1.0)*r02*x6511))+((r01*x6513))+sj0+(((-1.0)*x6506*x6512)));
evalcond[2]=(((r11*x6513))+(((-1.0)*r12*x6511))+(((-1.0)*x6508*x6512))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6504))+(((-1.0)*x6510*x6511))+((x6505*x6509)));
evalcond[4]=((((-1.0)*cj0*x6515))+((r02*x6504))+((r01*x6514))+(((-1.0)*x6506*x6511))+((cj0*x6507)));
evalcond[5]=(((r12*x6504))+((sj0*x6507))+((r11*x6514))+(((-1.0)*x6508*x6511))+(((-1.0)*sj0*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6516=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6516.valid){
continue;
}
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6516.value)))+(x6517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6518=IKsin(j4);
IkReal x6519=IKcos(j4);
IkReal x6520=(cj5*r00);
IkReal x6521=(cj1*cj2);
IkReal x6522=(cj5*r10);
IkReal x6523=(r21*sj5);
IkReal x6524=(cj5*r20);
IkReal x6525=((1.0)*x6519);
IkReal x6526=((1.0)*x6518);
IkReal x6527=(sj5*x6518);
IkReal x6528=(sj5*x6519);
IkReal x6529=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6525))+((x6518*x6523))+(((-1.0)*x6524*x6526)));
evalcond[1]=(sj0+(((-1.0)*r02*x6525))+(((-1.0)*x6520*x6526))+((r01*x6527)));
evalcond[2]=((((-1.0)*x6522*x6526))+(((-1.0)*r12*x6525))+((r11*x6527))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6524*x6525))+((r22*x6518))+((x6519*x6523)));
evalcond[4]=((((-1.0)*cj0*x6529))+(((-1.0)*x6520*x6525))+((r02*x6518))+((cj0*x6521))+((r01*x6528)));
evalcond[5]=((((-1.0)*x6522*x6525))+((r12*x6518))+((sj0*x6521))+((r11*x6528))+(((-1.0)*sj0*x6529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6530=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6530.valid){
continue;
}
CheckValue<IkReal> x6531 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6530.value)))+(x6531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6532=IKsin(j4);
IkReal x6533=IKcos(j4);
IkReal x6534=(cj5*r00);
IkReal x6535=(cj1*cj2);
IkReal x6536=(cj5*r10);
IkReal x6537=(r21*sj5);
IkReal x6538=(cj5*r20);
IkReal x6539=((1.0)*x6533);
IkReal x6540=((1.0)*x6532);
IkReal x6541=(sj5*x6532);
IkReal x6542=(sj5*x6533);
IkReal x6543=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6539))+(((-1.0)*x6538*x6540))+((x6532*x6537)));
evalcond[1]=(sj0+(((-1.0)*r02*x6539))+(((-1.0)*x6534*x6540))+((r01*x6541)));
evalcond[2]=((((-1.0)*r12*x6539))+(((-1.0)*x6536*x6540))+((r11*x6541))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x6533*x6537))+((cj1*sj2))+((r22*x6532))+(((-1.0)*x6538*x6539)));
evalcond[4]=(((r02*x6532))+(((-1.0)*x6534*x6539))+((cj0*x6535))+(((-1.0)*cj0*x6543))+((r01*x6542)));
evalcond[5]=((((-1.0)*sj0*x6543))+((sj0*x6535))+(((-1.0)*x6536*x6539))+((r11*x6542))+((r12*x6532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6544=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6544;
j0eval[1]=IKsign(x6544);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6545=cj5*cj5;
IkReal x6546=r21*r21;
IkReal x6547=(cj2*sj1);
IkReal x6548=(cj1*sj2);
IkReal x6549=(r21*sj5);
IkReal x6550=((1.0)*cj5*r20);
IkReal x6551=(((x6545*(r20*r20)))+(r22*r22)+(((-1.0)*x6545*x6546))+x6546+(((-2.0)*cj5*r20*x6549)));
j4eval[0]=x6551;
j4eval[1]=IKsign(x6551);
j4eval[2]=((IKabs(((((-1.0)*x6548*x6550))+(((-1.0)*x6547*x6550))+((x6547*x6549))+((x6548*x6549)))))+(IKabs((((r22*x6548))+((r22*x6547))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6552=cj1*cj1;
IkReal x6553=(cj2*sj2);
IkReal x6554=(cj1*sj1);
j0eval[0]=((((-2.0)*x6552*x6553))+(((-2.0)*x6554*(cj2*cj2)))+(((-1.06936921195177)*sj2*x6552))+(((-1.06936921195177)*cj2*x6554))+x6554+x6553);
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((-0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((-0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((-0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6555=IKsin(j0);
IkReal x6556=IKcos(j0);
evalcond[0]=((((0.163941)*x6555))+(((-1.0)*px))+(((-1.1843)*x6556)));
evalcond[1]=((((-0.163941)*x6556))+(((-1.0)*py))+(((-1.1843)*x6555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6557=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6557;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6558=cj5*cj5;
IkReal x6559=((1.0)*r21);
IkReal x6560=(cj5*sj5);
IkReal x6561=((1.0)*r20);
IkReal x6562=(((r00*r20*x6558))+(((-1.0)*r01*x6560*x6561))+(((-1.0)*r01*x6558*x6559))+((r01*r21))+(((-1.0)*r00*x6559*x6560))+((r02*r22)));
j4eval[0]=x6562;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6561)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6563=cj5*cj5;
IkReal x6564=(r21*sj5);
IkReal x6565=(r11*r21);
IkReal x6566=((1.0)*cj5*r20);
IkReal x6567=((((-1.0)*r11*sj5*x6566))+((r10*r20*x6563))+((r12*r22))+x6565+(((-1.0)*cj5*r10*x6564))+(((-1.0)*x6563*x6565)));
j4eval[0]=x6567;
j4eval[1]=((IKabs((((sj0*x6564))+(((-1.0)*sj0*x6566)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6568=cj5*cj5;
IkReal x6569=(r21*sj5);
IkReal x6570=(r11*r21);
IkReal x6571=((1.0)*cj5*r20);
CheckValue<IkReal> x6572 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6569))+(((-1.0)*sj0*x6571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6572.valid){
continue;
}
CheckValue<IkReal> x6573=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6568*x6570))+(((-1.0)*r11*sj5*x6571))+((r10*r20*x6568))+((r12*r22))+x6570+(((-1.0)*cj5*r10*x6569)))),-1);
if(!x6573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6572.value)+(((1.5707963267949)*(x6573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6574=IKsin(j4);
IkReal x6575=IKcos(j4);
IkReal x6576=(r11*sj5);
IkReal x6577=(cj5*r00);
IkReal x6578=(cj5*r10);
IkReal x6579=(r21*sj5);
IkReal x6580=(cj5*r20);
IkReal x6581=(r01*sj5);
IkReal x6582=((1.0)*x6575);
IkReal x6583=((1.0)*x6574);
evalcond[0]=((((-1.0)*r22*x6582))+((x6574*x6579))+(((-1.0)*x6580*x6583)));
evalcond[1]=(((x6575*x6580))+(((-1.0)*r22*x6583))+(((-1.0)*x6579*x6582)));
evalcond[2]=(sj0+(((-1.0)*r02*x6582))+((x6574*x6581))+(((-1.0)*x6577*x6583)));
evalcond[3]=(cj0+(((-1.0)*r02*x6583))+(((-1.0)*x6581*x6582))+((x6575*x6577)));
evalcond[4]=((((-1.0)*x6576*x6582))+sj0+(((-1.0)*r12*x6583))+((x6575*x6578)));
evalcond[5]=((((-1.0)*r12*x6582))+(((-1.0)*x6578*x6583))+((x6574*x6576))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6584=cj5*cj5;
IkReal x6585=((1.0)*r21);
IkReal x6586=(cj5*sj5);
IkReal x6587=((1.0)*r20);
CheckValue<IkReal> x6588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6588.valid){
continue;
}
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6586*x6587))+((r00*r20*x6584))+(((-1.0)*r01*x6584*x6585))+(((-1.0)*r00*x6585*x6586))+((r02*r22)))),-1);
if(!x6589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6588.value)+(((1.5707963267949)*(x6589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6590=IKsin(j4);
IkReal x6591=IKcos(j4);
IkReal x6592=(r11*sj5);
IkReal x6593=(cj5*r00);
IkReal x6594=(cj5*r10);
IkReal x6595=(r21*sj5);
IkReal x6596=(cj5*r20);
IkReal x6597=(r01*sj5);
IkReal x6598=((1.0)*x6591);
IkReal x6599=((1.0)*x6590);
evalcond[0]=((((-1.0)*x6596*x6599))+((x6590*x6595))+(((-1.0)*r22*x6598)));
evalcond[1]=(((x6591*x6596))+(((-1.0)*r22*x6599))+(((-1.0)*x6595*x6598)));
evalcond[2]=(sj0+(((-1.0)*r02*x6598))+(((-1.0)*x6593*x6599))+((x6590*x6597)));
evalcond[3]=(cj0+(((-1.0)*r02*x6599))+((x6591*x6593))+(((-1.0)*x6597*x6598)));
evalcond[4]=(sj0+(((-1.0)*r12*x6599))+((x6591*x6594))+(((-1.0)*x6592*x6598)));
evalcond[5]=((((-1.0)*r12*x6598))+(((-1.0)*x6594*x6599))+((x6590*x6592))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6600.valid){
continue;
}
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6600.value)))+(x6601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6602=IKsin(j4);
IkReal x6603=IKcos(j4);
IkReal x6604=(r11*sj5);
IkReal x6605=(cj5*r00);
IkReal x6606=(cj5*r10);
IkReal x6607=(r21*sj5);
IkReal x6608=(cj5*r20);
IkReal x6609=(r01*sj5);
IkReal x6610=((1.0)*x6603);
IkReal x6611=((1.0)*x6602);
evalcond[0]=((((-1.0)*x6608*x6611))+(((-1.0)*r22*x6610))+((x6602*x6607)));
evalcond[1]=((((-1.0)*x6607*x6610))+(((-1.0)*r22*x6611))+((x6603*x6608)));
evalcond[2]=((((-1.0)*x6605*x6611))+sj0+(((-1.0)*r02*x6610))+((x6602*x6609)));
evalcond[3]=(cj0+(((-1.0)*x6609*x6610))+(((-1.0)*r02*x6611))+((x6603*x6605)));
evalcond[4]=((((-1.0)*r12*x6611))+sj0+(((-1.0)*x6604*x6610))+((x6603*x6606)));
evalcond[5]=((((-1.0)*r12*x6610))+(((-1.0)*x6606*x6611))+((x6602*x6604))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((-5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((-5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((-5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6612=IKsin(j0);
IkReal x6613=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.163941)*x6612))+(((-0.0397)*x6613)));
evalcond[1]=((((-0.163941)*x6613))+(((-1.0)*py))+(((-0.0397)*x6612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6614=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6614;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6615=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6615;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6616=cj5*cj5;
IkReal x6617=((1.0)*r21);
IkReal x6618=(cj5*r20);
IkReal x6619=(((r00*r20*x6616))+((r01*r21))+(((-1.0)*r01*x6616*x6617))+(((-1.0)*cj5*r00*sj5*x6617))+((r02*r22))+(((-1.0)*r01*sj5*x6618)));
j4eval[0]=x6619;
j4eval[1]=IKsign(x6619);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x6617))+((sj0*x6618)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6620=cj5*cj5;
IkReal x6621=((1.0)*r21);
IkReal x6622=(cj5*r20);
CheckValue<IkReal> x6623=IKPowWithIntegerCheck(IKsign((((r00*r20*x6620))+(((-1.0)*cj5*r00*sj5*x6621))+((r01*r21))+(((-1.0)*r01*x6620*x6621))+((r02*r22))+(((-1.0)*r01*sj5*x6622)))),-1);
if(!x6623.valid){
continue;
}
CheckValue<IkReal> x6624 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6621))+((sj0*x6622)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6623.value)))+(x6624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6625=IKsin(j4);
IkReal x6626=IKcos(j4);
IkReal x6627=((1.0)*cj0);
IkReal x6628=(cj5*r00);
IkReal x6629=(r11*sj5);
IkReal x6630=(cj5*r10);
IkReal x6631=(r21*sj5);
IkReal x6632=(cj5*r20);
IkReal x6633=(r01*sj5);
IkReal x6634=((1.0)*x6626);
IkReal x6635=((1.0)*x6625);
evalcond[0]=((((-1.0)*r22*x6634))+((x6625*x6631))+(((-1.0)*x6632*x6635)));
evalcond[1]=((((-1.0)*r22*x6635))+((x6626*x6632))+(((-1.0)*x6631*x6634)));
evalcond[2]=((((-1.0)*x6628*x6635))+sj0+((x6625*x6633))+(((-1.0)*r02*x6634)));
evalcond[3]=((((-1.0)*x6627))+(((-1.0)*x6630*x6635))+((x6625*x6629))+(((-1.0)*r12*x6634)));
evalcond[4]=((((-1.0)*x6627))+((x6626*x6628))+(((-1.0)*r02*x6635))+(((-1.0)*x6633*x6634)));
evalcond[5]=((((-1.0)*sj0))+((x6626*x6630))+(((-1.0)*x6629*x6634))+(((-1.0)*r12*x6635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6636.value)))+(x6637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=((1.0)*cj0);
IkReal x6641=(cj5*r00);
IkReal x6642=(r11*sj5);
IkReal x6643=(cj5*r10);
IkReal x6644=(r21*sj5);
IkReal x6645=(cj5*r20);
IkReal x6646=(r01*sj5);
IkReal x6647=((1.0)*x6639);
IkReal x6648=((1.0)*x6638);
evalcond[0]=((((-1.0)*r22*x6647))+((x6638*x6644))+(((-1.0)*x6645*x6648)));
evalcond[1]=((((-1.0)*r22*x6648))+((x6639*x6645))+(((-1.0)*x6644*x6647)));
evalcond[2]=(sj0+((x6638*x6646))+(((-1.0)*x6641*x6648))+(((-1.0)*r02*x6647)));
evalcond[3]=((((-1.0)*x6640))+((x6638*x6642))+(((-1.0)*x6643*x6648))+(((-1.0)*r12*x6647)));
evalcond[4]=((((-1.0)*x6640))+((x6639*x6641))+(((-1.0)*x6646*x6647))+(((-1.0)*r02*x6648)));
evalcond[5]=((((-1.0)*sj0))+((x6639*x6643))+(((-1.0)*x6642*x6647))+(((-1.0)*r12*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6649.valid){
continue;
}
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6649.value)))+(x6650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6651=IKsin(j4);
IkReal x6652=IKcos(j4);
IkReal x6653=((1.0)*cj0);
IkReal x6654=(cj5*r00);
IkReal x6655=(r11*sj5);
IkReal x6656=(cj5*r10);
IkReal x6657=(r21*sj5);
IkReal x6658=(cj5*r20);
IkReal x6659=(r01*sj5);
IkReal x6660=((1.0)*x6652);
IkReal x6661=((1.0)*x6651);
evalcond[0]=((((-1.0)*x6658*x6661))+((x6651*x6657))+(((-1.0)*r22*x6660)));
evalcond[1]=((((-1.0)*x6657*x6660))+((x6652*x6658))+(((-1.0)*r22*x6661)));
evalcond[2]=(sj0+(((-1.0)*x6654*x6661))+(((-1.0)*r02*x6660))+((x6651*x6659)));
evalcond[3]=((((-1.0)*x6653))+(((-1.0)*r12*x6660))+((x6651*x6655))+(((-1.0)*x6656*x6661)));
evalcond[4]=((((-1.0)*x6653))+((x6652*x6654))+(((-1.0)*x6659*x6660))+(((-1.0)*r02*x6661)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6661))+((x6652*x6656))+(((-1.0)*x6655*x6660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6662=IKsin(j0);
IkReal x6663=IKcos(j0);
IkReal x6664=(cj5*r01);
IkReal x6665=(cj5*r11);
IkReal x6666=((0.1157)*sj5);
IkReal x6667=((1.0)*sj5);
evalcond[0]=(x6663+(((-1.0)*r00*x6667))+(((-1.0)*x6664)));
evalcond[1]=(x6662+(((-1.0)*r10*x6667))+(((-1.0)*x6665)));
evalcond[2]=((((-1.0)*r00*x6666))+(((-1.0)*px))+(((0.163941)*x6662))+(((-0.1157)*x6664)));
evalcond[3]=((((-0.163941)*x6663))+(((-1.0)*r10*x6666))+(((-1.0)*py))+(((-0.1157)*x6665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6668=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6668;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6669=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6669;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6670=cj5*cj5;
IkReal x6671=r21*r21;
IkReal x6672=(r21*sj5);
IkReal x6673=(cj5*r20);
IkReal x6674=((r22*r22)+x6671+(((-2.0)*x6672*x6673))+((x6670*(r20*r20)))+(((-1.0)*x6670*x6671)));
j4eval[0]=x6674;
j4eval[1]=IKsign(x6674);
j4eval[2]=((IKabs(r22))+(IKabs((x6672+(((-1.0)*x6673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6675=cj5*cj5;
IkReal x6676=r21*r21;
IkReal x6677=(r21*sj5);
IkReal x6678=(cj5*r20);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(r22),IkReal((x6677+(((-1.0)*x6678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6676+((x6675*(r20*r20)))+(((-1.0)*x6675*x6676))+(((-2.0)*x6677*x6678)))),-1);
if(!x6680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6679.value)+(((1.5707963267949)*(x6680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6681=IKsin(j4);
IkReal x6682=IKcos(j4);
IkReal x6683=(r11*sj5);
IkReal x6684=(r21*sj5);
IkReal x6685=(cj5*r00);
IkReal x6686=(cj5*r10);
IkReal x6687=(cj5*r20);
IkReal x6688=(r01*sj5);
IkReal x6689=((1.0)*x6682);
IkReal x6690=((1.0)*x6681);
evalcond[0]=((((-1.0)*x6687*x6690))+((x6681*x6684))+(((-1.0)*r22*x6689)));
evalcond[1]=((((-1.0)*r02*x6690))+(((-1.0)*x6688*x6689))+((x6682*x6685)));
evalcond[2]=((((-1.0)*x6683*x6689))+(((-1.0)*r12*x6690))+((x6682*x6686)));
evalcond[3]=((((-1.0)*x6685*x6690))+sj0+(((-1.0)*r02*x6689))+((x6681*x6688)));
evalcond[4]=((1.0)+(((-1.0)*x6684*x6689))+((x6682*x6687))+(((-1.0)*r22*x6690)));
evalcond[5]=((((-1.0)*x6686*x6690))+((x6681*x6683))+(((-1.0)*r12*x6689))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6691=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6691.valid){
continue;
}
CheckValue<IkReal> x6692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6691.value)))+(x6692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6693=IKsin(j4);
IkReal x6694=IKcos(j4);
IkReal x6695=(r11*sj5);
IkReal x6696=(r21*sj5);
IkReal x6697=(cj5*r00);
IkReal x6698=(cj5*r10);
IkReal x6699=(cj5*r20);
IkReal x6700=(r01*sj5);
IkReal x6701=((1.0)*x6694);
IkReal x6702=((1.0)*x6693);
evalcond[0]=((((-1.0)*r22*x6701))+((x6693*x6696))+(((-1.0)*x6699*x6702)));
evalcond[1]=((((-1.0)*r02*x6702))+(((-1.0)*x6700*x6701))+((x6694*x6697)));
evalcond[2]=((((-1.0)*x6695*x6701))+(((-1.0)*r12*x6702))+((x6694*x6698)));
evalcond[3]=(sj0+(((-1.0)*r02*x6701))+(((-1.0)*x6697*x6702))+((x6693*x6700)));
evalcond[4]=((1.0)+(((-1.0)*x6696*x6701))+(((-1.0)*r22*x6702))+((x6694*x6699)));
evalcond[5]=((((-1.0)*x6698*x6702))+((x6693*x6695))+(((-1.0)*r12*x6701))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6703 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6703.valid){
continue;
}
CheckValue<IkReal> x6704=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6703.value)+(((1.5707963267949)*(x6704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6705=IKsin(j4);
IkReal x6706=IKcos(j4);
IkReal x6707=(r11*sj5);
IkReal x6708=(r21*sj5);
IkReal x6709=(cj5*r00);
IkReal x6710=(cj5*r10);
IkReal x6711=(cj5*r20);
IkReal x6712=(r01*sj5);
IkReal x6713=((1.0)*x6706);
IkReal x6714=((1.0)*x6705);
evalcond[0]=(((x6705*x6708))+(((-1.0)*x6711*x6714))+(((-1.0)*r22*x6713)));
evalcond[1]=(((x6706*x6709))+(((-1.0)*x6712*x6713))+(((-1.0)*r02*x6714)));
evalcond[2]=((((-1.0)*x6707*x6713))+(((-1.0)*r12*x6714))+((x6706*x6710)));
evalcond[3]=(sj0+((x6705*x6712))+(((-1.0)*r02*x6713))+(((-1.0)*x6709*x6714)));
evalcond[4]=((1.0)+(((-1.0)*x6708*x6713))+((x6706*x6711))+(((-1.0)*r22*x6714)));
evalcond[5]=(((x6705*x6707))+(((-1.0)*x6710*x6714))+(((-1.0)*r12*x6713))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((0.462582327146012)*px))), ((((1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6715=IKsin(j0);
IkReal x6716=IKcos(j0);
evalcond[0]=((((0.5723)*x6716))+(((-1.0)*px))+(((0.163941)*x6715)));
evalcond[1]=((((0.5723)*x6715))+(((-1.0)*py))+(((-0.163941)*x6716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6717=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6717;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6718=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6718;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6719=cj5*cj5;
IkReal x6720=((1.0)*r21);
IkReal x6721=(cj5*r20);
IkReal x6722=(((r00*r20*x6719))+((r01*r21))+(((-1.0)*r01*sj5*x6721))+(((-1.0)*cj5*r00*sj5*x6720))+(((-1.0)*r01*x6719*x6720))+((r02*r22)));
j4eval[0]=x6722;
j4eval[1]=IKsign(x6722);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6720))+((sj0*x6721))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6723=cj5*cj5;
IkReal x6724=((1.0)*r21);
IkReal x6725=(cj5*r20);
CheckValue<IkReal> x6726=IKPowWithIntegerCheck(IKsign((((r00*r20*x6723))+((r01*r21))+(((-1.0)*r01*sj5*x6725))+(((-1.0)*cj5*r00*sj5*x6724))+((r02*r22))+(((-1.0)*r01*x6723*x6724)))),-1);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6724))+((sj0*x6725)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6726.value)))+(x6727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6728=IKsin(j4);
IkReal x6729=IKcos(j4);
IkReal x6730=((1.0)*cj0);
IkReal x6731=(cj5*r00);
IkReal x6732=(r11*sj5);
IkReal x6733=(cj5*r10);
IkReal x6734=(r21*sj5);
IkReal x6735=(cj5*r20);
IkReal x6736=(r01*sj5);
IkReal x6737=((1.0)*x6729);
IkReal x6738=((1.0)*x6728);
evalcond[0]=((((-1.0)*r22*x6737))+(((-1.0)*x6735*x6738))+((x6728*x6734)));
evalcond[1]=((((-1.0)*r22*x6738))+((x6729*x6735))+(((-1.0)*x6734*x6737)));
evalcond[2]=(sj0+(((-1.0)*r02*x6737))+(((-1.0)*x6731*x6738))+((x6728*x6736)));
evalcond[3]=((((-1.0)*r12*x6737))+(((-1.0)*x6733*x6738))+(((-1.0)*x6730))+((x6728*x6732)));
evalcond[4]=(((x6729*x6731))+(((-1.0)*r02*x6738))+(((-1.0)*x6736*x6737))+(((-1.0)*x6730)));
evalcond[5]=((((-1.0)*sj0))+((x6729*x6733))+(((-1.0)*r12*x6738))+(((-1.0)*x6732*x6737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKsin(j4);
IkReal x6742=IKcos(j4);
IkReal x6743=((1.0)*cj0);
IkReal x6744=(cj5*r00);
IkReal x6745=(r11*sj5);
IkReal x6746=(cj5*r10);
IkReal x6747=(r21*sj5);
IkReal x6748=(cj5*r20);
IkReal x6749=(r01*sj5);
IkReal x6750=((1.0)*x6742);
IkReal x6751=((1.0)*x6741);
evalcond[0]=(((x6741*x6747))+(((-1.0)*x6748*x6751))+(((-1.0)*r22*x6750)));
evalcond[1]=(((x6742*x6748))+(((-1.0)*r22*x6751))+(((-1.0)*x6747*x6750)));
evalcond[2]=(sj0+((x6741*x6749))+(((-1.0)*r02*x6750))+(((-1.0)*x6744*x6751)));
evalcond[3]=(((x6741*x6745))+(((-1.0)*x6746*x6751))+(((-1.0)*r12*x6750))+(((-1.0)*x6743)));
evalcond[4]=(((x6742*x6744))+(((-1.0)*x6749*x6750))+(((-1.0)*r02*x6751))+(((-1.0)*x6743)));
evalcond[5]=((((-1.0)*sj0))+((x6742*x6746))+(((-1.0)*x6745*x6750))+(((-1.0)*r12*x6751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6752.valid){
continue;
}
CheckValue<IkReal> x6753 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6752.value)))+(x6753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6754=IKsin(j4);
IkReal x6755=IKcos(j4);
IkReal x6756=((1.0)*cj0);
IkReal x6757=(cj5*r00);
IkReal x6758=(r11*sj5);
IkReal x6759=(cj5*r10);
IkReal x6760=(r21*sj5);
IkReal x6761=(cj5*r20);
IkReal x6762=(r01*sj5);
IkReal x6763=((1.0)*x6755);
IkReal x6764=((1.0)*x6754);
evalcond[0]=(((x6754*x6760))+(((-1.0)*r22*x6763))+(((-1.0)*x6761*x6764)));
evalcond[1]=((((-1.0)*x6760*x6763))+(((-1.0)*r22*x6764))+((x6755*x6761)));
evalcond[2]=(sj0+((x6754*x6762))+(((-1.0)*r02*x6763))+(((-1.0)*x6757*x6764)));
evalcond[3]=((((-1.0)*x6759*x6764))+((x6754*x6758))+(((-1.0)*x6756))+(((-1.0)*r12*x6763)));
evalcond[4]=((((-1.0)*x6762*x6763))+(((-1.0)*x6756))+(((-1.0)*r02*x6764))+((x6755*x6757)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6758*x6763))+(((-1.0)*r12*x6764))+((x6755*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6765=((1.0)*sj5);
IkReal x6766=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6765))+(((-1.0)*r11*x6766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6766))+(((-1.0)*r00*x6765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6765))+(((-1.0)*r11*x6766))))+IKsqr(((((-1.0)*r01*x6766))+(((-1.0)*r00*x6765))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6765))+(((-1.0)*r11*x6766))), ((((-1.0)*r01*x6766))+(((-1.0)*r00*x6765))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6767=IKsin(j0);
IkReal x6768=IKcos(j0);
IkReal x6769=(cj5*r01);
IkReal x6770=(cj5*r11);
IkReal x6771=((0.1157)*sj5);
IkReal x6772=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x6772))+(((-1.0)*x6769))+(((-1.0)*x6768)));
evalcond[1]=((((-1.0)*x6767))+(((-1.0)*x6770))+(((-1.0)*r10*x6772)));
evalcond[2]=((((-1.0)*r00*x6771))+(((0.163941)*x6767))+(((-1.0)*px))+(((-0.1157)*x6769)));
evalcond[3]=((((-0.163941)*x6768))+(((-0.1157)*x6770))+(((-1.0)*r10*x6771))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6773=((1.0)*sj5);
IkReal x6774=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6773)));
j4eval[0]=x6774;
j4eval[1]=IKsign(x6774);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6773))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6775=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6775;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6776=r21*r21;
IkReal x6777=cj5*cj5;
IkReal x6778=(r21*sj5);
IkReal x6779=(cj5*r20);
IkReal x6780=(((x6776*x6777))+(((-1.0)*x6777*(r20*r20)))+(((-1.0)*x6776))+(((2.0)*x6778*x6779))+(((-1.0)*(r22*r22))));
j4eval[0]=x6780;
j4eval[1]=((IKabs(r22))+(IKabs((x6778+(((-1.0)*x6779))))));
j4eval[2]=IKsign(x6780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6781=r21*r21;
IkReal x6782=cj5*cj5;
IkReal x6783=(r21*sj5);
IkReal x6784=(cj5*r20);
CheckValue<IkReal> x6785 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6784))+x6783)),IKFAST_ATAN2_MAGTHRESH);
if(!x6785.valid){
continue;
}
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6781))+(((-1.0)*x6782*(r20*r20)))+((x6781*x6782))+(((2.0)*x6783*x6784))+(((-1.0)*(r22*r22))))),-1);
if(!x6786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6785.value)+(((1.5707963267949)*(x6786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6787=IKsin(j4);
IkReal x6788=IKcos(j4);
IkReal x6789=(r11*sj5);
IkReal x6790=(r21*sj5);
IkReal x6791=(cj5*r00);
IkReal x6792=(cj5*r10);
IkReal x6793=(cj5*r20);
IkReal x6794=(r01*sj5);
IkReal x6795=((1.0)*x6788);
IkReal x6796=((1.0)*x6787);
evalcond[0]=((((-1.0)*x6793*x6796))+((x6787*x6790))+(((-1.0)*r22*x6795)));
evalcond[1]=(((x6788*x6791))+(((-1.0)*x6794*x6795))+(((-1.0)*r02*x6796)));
evalcond[2]=((((-1.0)*x6789*x6795))+((x6788*x6792))+(((-1.0)*r12*x6796)));
evalcond[3]=(sj0+((x6787*x6794))+(((-1.0)*x6791*x6796))+(((-1.0)*r02*x6795)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6796))+((x6788*x6793))+(((-1.0)*x6790*x6795)));
evalcond[5]=((((-1.0)*x6792*x6796))+((x6787*x6789))+(((-1.0)*cj0))+(((-1.0)*r12*x6795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6797=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6797.valid){
continue;
}
CheckValue<IkReal> x6798 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6797.value)))+(x6798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6799=IKsin(j4);
IkReal x6800=IKcos(j4);
IkReal x6801=(r11*sj5);
IkReal x6802=(r21*sj5);
IkReal x6803=(cj5*r00);
IkReal x6804=(cj5*r10);
IkReal x6805=(cj5*r20);
IkReal x6806=(r01*sj5);
IkReal x6807=((1.0)*x6800);
IkReal x6808=((1.0)*x6799);
evalcond[0]=((((-1.0)*r22*x6807))+((x6799*x6802))+(((-1.0)*x6805*x6808)));
evalcond[1]=(((x6800*x6803))+(((-1.0)*r02*x6808))+(((-1.0)*x6806*x6807)));
evalcond[2]=(((x6800*x6804))+(((-1.0)*r12*x6808))+(((-1.0)*x6801*x6807)));
evalcond[3]=(sj0+(((-1.0)*x6803*x6808))+(((-1.0)*r02*x6807))+((x6799*x6806)));
evalcond[4]=((-1.0)+((x6800*x6805))+(((-1.0)*r22*x6808))+(((-1.0)*x6802*x6807)));
evalcond[5]=((((-1.0)*r12*x6807))+(((-1.0)*x6804*x6808))+((x6799*x6801))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6809=((1.0)*sj5);
CheckValue<IkReal> x6810=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6809)))),-1);
if(!x6810.valid){
continue;
}
CheckValue<IkReal> x6811 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6809))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6810.value)))+(x6811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6812=IKsin(j4);
IkReal x6813=IKcos(j4);
IkReal x6814=(r11*sj5);
IkReal x6815=(r21*sj5);
IkReal x6816=(cj5*r00);
IkReal x6817=(cj5*r10);
IkReal x6818=(cj5*r20);
IkReal x6819=(r01*sj5);
IkReal x6820=((1.0)*x6813);
IkReal x6821=((1.0)*x6812);
evalcond[0]=((((-1.0)*x6818*x6821))+((x6812*x6815))+(((-1.0)*r22*x6820)));
evalcond[1]=((((-1.0)*r02*x6821))+((x6813*x6816))+(((-1.0)*x6819*x6820)));
evalcond[2]=((((-1.0)*x6814*x6820))+(((-1.0)*r12*x6821))+((x6813*x6817)));
evalcond[3]=(sj0+(((-1.0)*r02*x6820))+(((-1.0)*x6816*x6821))+((x6812*x6819)));
evalcond[4]=((-1.0)+(((-1.0)*x6815*x6820))+((x6813*x6818))+(((-1.0)*r22*x6821)));
evalcond[5]=((((-1.0)*x6817*x6821))+(((-1.0)*r12*x6820))+((x6812*x6814))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6822=IKsin(j0);
IkReal x6823=IKcos(j0);
evalcond[0]=((((-0.5723)*x6823))+(((-1.0)*px))+(((0.163941)*x6822)));
evalcond[1]=((((-0.5723)*x6822))+(((-1.0)*py))+(((-0.163941)*x6823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6824=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6824;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6825=cj5*cj5;
IkReal x6826=((1.0)*r21);
IkReal x6827=(cj5*sj5);
IkReal x6828=((1.0)*r20);
IkReal x6829=((((-1.0)*r01*x6825*x6826))+(((-1.0)*r01*x6827*x6828))+((r01*r21))+((r02*r22))+((r00*r20*x6825))+(((-1.0)*r00*x6826*x6827)));
j4eval[0]=x6829;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6828)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6830=cj5*cj5;
IkReal x6831=(r21*sj5);
IkReal x6832=(r11*r21);
IkReal x6833=((1.0)*cj5*r20);
IkReal x6834=((((-1.0)*cj5*r10*x6831))+(((-1.0)*x6830*x6832))+((r12*r22))+(((-1.0)*r11*sj5*x6833))+x6832+((r10*r20*x6830)));
j4eval[0]=x6834;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6833))+((sj0*x6831)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6835=cj5*cj5;
IkReal x6836=(r21*sj5);
IkReal x6837=(r11*r21);
IkReal x6838=((1.0)*cj5*r20);
CheckValue<IkReal> x6839 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6838))+((sj0*x6836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6839.valid){
continue;
}
CheckValue<IkReal> x6840=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6836))+(((-1.0)*x6835*x6837))+((r12*r22))+(((-1.0)*r11*sj5*x6838))+x6837+((r10*r20*x6835)))),-1);
if(!x6840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6839.value)+(((1.5707963267949)*(x6840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6841=IKsin(j4);
IkReal x6842=IKcos(j4);
IkReal x6843=(r11*sj5);
IkReal x6844=(cj5*r00);
IkReal x6845=(cj5*r10);
IkReal x6846=(r21*sj5);
IkReal x6847=(cj5*r20);
IkReal x6848=(r01*sj5);
IkReal x6849=((1.0)*x6842);
IkReal x6850=((1.0)*x6841);
evalcond[0]=((((-1.0)*r22*x6849))+(((-1.0)*x6847*x6850))+((x6841*x6846)));
evalcond[1]=((((-1.0)*x6846*x6849))+(((-1.0)*r22*x6850))+((x6842*x6847)));
evalcond[2]=(sj0+(((-1.0)*x6844*x6850))+((x6841*x6848))+(((-1.0)*r02*x6849)));
evalcond[3]=(cj0+(((-1.0)*r02*x6850))+((x6842*x6844))+(((-1.0)*x6848*x6849)));
evalcond[4]=((((-1.0)*x6843*x6849))+sj0+(((-1.0)*r12*x6850))+((x6842*x6845)));
evalcond[5]=(((x6841*x6843))+(((-1.0)*r12*x6849))+(((-1.0)*x6845*x6850))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6851=cj5*cj5;
IkReal x6852=((1.0)*r21);
IkReal x6853=(cj5*sj5);
IkReal x6854=((1.0)*r20);
CheckValue<IkReal> x6855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6853*x6854))+((r01*r21))+(((-1.0)*r00*x6852*x6853))+(((-1.0)*r01*x6851*x6852))+((r02*r22))+((r00*r20*x6851)))),-1);
if(!x6855.valid){
continue;
}
CheckValue<IkReal> x6856 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6855.value)))+(x6856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6857=IKsin(j4);
IkReal x6858=IKcos(j4);
IkReal x6859=(r11*sj5);
IkReal x6860=(cj5*r00);
IkReal x6861=(cj5*r10);
IkReal x6862=(r21*sj5);
IkReal x6863=(cj5*r20);
IkReal x6864=(r01*sj5);
IkReal x6865=((1.0)*x6858);
IkReal x6866=((1.0)*x6857);
evalcond[0]=((((-1.0)*r22*x6865))+(((-1.0)*x6863*x6866))+((x6857*x6862)));
evalcond[1]=((((-1.0)*x6862*x6865))+(((-1.0)*r22*x6866))+((x6858*x6863)));
evalcond[2]=(sj0+(((-1.0)*x6860*x6866))+((x6857*x6864))+(((-1.0)*r02*x6865)));
evalcond[3]=(cj0+(((-1.0)*x6864*x6865))+(((-1.0)*r02*x6866))+((x6858*x6860)));
evalcond[4]=(sj0+(((-1.0)*r12*x6866))+((x6858*x6861))+(((-1.0)*x6859*x6865)));
evalcond[5]=(((x6857*x6859))+(((-1.0)*r12*x6865))+(((-1.0)*x6861*x6866))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6867=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6867.valid){
continue;
}
CheckValue<IkReal> x6868 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6867.value)))+(x6868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6869=IKsin(j4);
IkReal x6870=IKcos(j4);
IkReal x6871=(r11*sj5);
IkReal x6872=(cj5*r00);
IkReal x6873=(cj5*r10);
IkReal x6874=(r21*sj5);
IkReal x6875=(cj5*r20);
IkReal x6876=(r01*sj5);
IkReal x6877=((1.0)*x6870);
IkReal x6878=((1.0)*x6869);
evalcond[0]=((((-1.0)*x6875*x6878))+(((-1.0)*r22*x6877))+((x6869*x6874)));
evalcond[1]=(((x6870*x6875))+(((-1.0)*x6874*x6877))+(((-1.0)*r22*x6878)));
evalcond[2]=(sj0+(((-1.0)*x6872*x6878))+(((-1.0)*r02*x6877))+((x6869*x6876)));
evalcond[3]=((((-1.0)*x6876*x6877))+((x6870*x6872))+cj0+(((-1.0)*r02*x6878)));
evalcond[4]=((((-1.0)*x6871*x6877))+sj0+((x6870*x6873))+(((-1.0)*r12*x6878)));
evalcond[5]=((((-1.0)*r12*x6877))+((x6869*x6871))+(((-1.0)*x6873*x6878))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((-0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.114688717055332)*px))+(((0.828504447384304)*py))), ((((-0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6879=IKsin(j0);
IkReal x6880=IKcos(j0);
evalcond[0]=((((1.1843)*x6880))+(((-1.0)*px))+(((0.163941)*x6879)));
evalcond[1]=((((1.1843)*x6879))+(((-0.163941)*x6880))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6881=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6881;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6882=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6882;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6883=cj5*cj5;
IkReal x6884=((1.0)*r21);
IkReal x6885=(cj5*r20);
IkReal x6886=((((-1.0)*cj5*r00*sj5*x6884))+((r00*r20*x6883))+((r01*r21))+(((-1.0)*r01*x6883*x6884))+((r02*r22))+(((-1.0)*r01*sj5*x6885)));
j4eval[0]=x6886;
j4eval[1]=IKsign(x6886);
j4eval[2]=((IKabs((((sj0*x6885))+(((-1.0)*sj0*sj5*x6884)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6887=cj5*cj5;
IkReal x6888=((1.0)*r21);
IkReal x6889=(cj5*r20);
CheckValue<IkReal> x6890 = IKatan2WithCheck(IkReal((((sj0*x6889))+(((-1.0)*sj0*sj5*x6888)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6890.valid){
continue;
}
CheckValue<IkReal> x6891=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x6888))+(((-1.0)*r01*x6887*x6888))+((r00*r20*x6887))+((r01*r21))+((r02*r22))+(((-1.0)*r01*sj5*x6889)))),-1);
if(!x6891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6890.value)+(((1.5707963267949)*(x6891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6892=IKsin(j4);
IkReal x6893=IKcos(j4);
IkReal x6894=((1.0)*cj0);
IkReal x6895=(cj5*r00);
IkReal x6896=(r11*sj5);
IkReal x6897=(cj5*r10);
IkReal x6898=(r21*sj5);
IkReal x6899=(cj5*r20);
IkReal x6900=(r01*sj5);
IkReal x6901=((1.0)*x6893);
IkReal x6902=((1.0)*x6892);
evalcond[0]=((((-1.0)*r22*x6901))+((x6892*x6898))+(((-1.0)*x6899*x6902)));
evalcond[1]=(((x6893*x6899))+(((-1.0)*r22*x6902))+(((-1.0)*x6898*x6901)));
evalcond[2]=((((-1.0)*r02*x6901))+sj0+((x6892*x6900))+(((-1.0)*x6895*x6902)));
evalcond[3]=(((x6892*x6896))+(((-1.0)*r12*x6901))+(((-1.0)*x6894))+(((-1.0)*x6897*x6902)));
evalcond[4]=((((-1.0)*r02*x6902))+(((-1.0)*x6900*x6901))+((x6893*x6895))+(((-1.0)*x6894)));
evalcond[5]=((((-1.0)*sj0))+((x6893*x6897))+(((-1.0)*r12*x6902))+(((-1.0)*x6896*x6901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6903=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6903.valid){
continue;
}
CheckValue<IkReal> x6904 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6903.value)))+(x6904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6905=IKsin(j4);
IkReal x6906=IKcos(j4);
IkReal x6907=((1.0)*cj0);
IkReal x6908=(cj5*r00);
IkReal x6909=(r11*sj5);
IkReal x6910=(cj5*r10);
IkReal x6911=(r21*sj5);
IkReal x6912=(cj5*r20);
IkReal x6913=(r01*sj5);
IkReal x6914=((1.0)*x6906);
IkReal x6915=((1.0)*x6905);
evalcond[0]=((((-1.0)*x6912*x6915))+(((-1.0)*r22*x6914))+((x6905*x6911)));
evalcond[1]=((((-1.0)*x6911*x6914))+(((-1.0)*r22*x6915))+((x6906*x6912)));
evalcond[2]=((((-1.0)*x6908*x6915))+sj0+((x6905*x6913))+(((-1.0)*r02*x6914)));
evalcond[3]=((((-1.0)*x6910*x6915))+(((-1.0)*x6907))+(((-1.0)*r12*x6914))+((x6905*x6909)));
evalcond[4]=((((-1.0)*x6907))+(((-1.0)*r02*x6915))+((x6906*x6908))+(((-1.0)*x6913*x6914)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6915))+(((-1.0)*x6909*x6914))+((x6906*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6916.value)))+(x6917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKsin(j4);
IkReal x6919=IKcos(j4);
IkReal x6920=((1.0)*cj0);
IkReal x6921=(cj5*r00);
IkReal x6922=(r11*sj5);
IkReal x6923=(cj5*r10);
IkReal x6924=(r21*sj5);
IkReal x6925=(cj5*r20);
IkReal x6926=(r01*sj5);
IkReal x6927=((1.0)*x6919);
IkReal x6928=((1.0)*x6918);
evalcond[0]=((((-1.0)*r22*x6927))+(((-1.0)*x6925*x6928))+((x6918*x6924)));
evalcond[1]=((((-1.0)*r22*x6928))+(((-1.0)*x6924*x6927))+((x6919*x6925)));
evalcond[2]=(sj0+(((-1.0)*r02*x6927))+(((-1.0)*x6921*x6928))+((x6918*x6926)));
evalcond[3]=((((-1.0)*r12*x6927))+(((-1.0)*x6920))+(((-1.0)*x6923*x6928))+((x6918*x6922)));
evalcond[4]=((((-1.0)*r02*x6928))+((x6919*x6921))+(((-1.0)*x6920))+(((-1.0)*x6926*x6927)));
evalcond[5]=((((-1.0)*sj0))+((x6919*x6923))+(((-1.0)*r12*x6928))+(((-1.0)*x6922*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((-5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((-5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((5.76187008585712)*px))), ((((1.39529612731731)*px))+(((-5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6929=IKsin(j0);
IkReal x6930=IKcos(j0);
evalcond[0]=((((0.163941)*x6929))+(((0.0397)*x6930))+(((-1.0)*px)));
evalcond[1]=((((0.0397)*x6929))+(((-1.0)*py))+(((-0.163941)*x6930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6931=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6931;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6932=cj5*cj5;
IkReal x6933=((1.0)*r21);
IkReal x6934=(cj5*sj5);
IkReal x6935=((1.0)*r20);
IkReal x6936=((((-1.0)*r01*x6934*x6935))+((r01*r21))+((r00*r20*x6932))+((r02*r22))+(((-1.0)*r01*x6932*x6933))+(((-1.0)*r00*x6933*x6934)));
j4eval[0]=x6936;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6935)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6937=cj5*cj5;
IkReal x6938=(r21*sj5);
IkReal x6939=(r11*r21);
IkReal x6940=((1.0)*cj5*r20);
IkReal x6941=((((-1.0)*cj5*r10*x6938))+((r12*r22))+(((-1.0)*r11*sj5*x6940))+x6939+((r10*r20*x6937))+(((-1.0)*x6937*x6939)));
j4eval[0]=x6941;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6938))+(((-1.0)*sj0*x6940))))));
j4eval[2]=IKsign(x6941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6942=cj5*cj5;
IkReal x6943=(r21*sj5);
IkReal x6944=(r11*r21);
IkReal x6945=((1.0)*cj5*r20);
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6945))+((sj0*x6943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
CheckValue<IkReal> x6947=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6942*x6944))+(((-1.0)*cj5*r10*x6943))+((r12*r22))+(((-1.0)*r11*sj5*x6945))+x6944+((r10*r20*x6942)))),-1);
if(!x6947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6946.value)+(((1.5707963267949)*(x6947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6948=IKsin(j4);
IkReal x6949=IKcos(j4);
IkReal x6950=(r11*sj5);
IkReal x6951=(cj5*r00);
IkReal x6952=(cj5*r10);
IkReal x6953=(r21*sj5);
IkReal x6954=(cj5*r20);
IkReal x6955=(r01*sj5);
IkReal x6956=((1.0)*x6949);
IkReal x6957=((1.0)*x6948);
evalcond[0]=((((-1.0)*r22*x6956))+((x6948*x6953))+(((-1.0)*x6954*x6957)));
evalcond[1]=(((x6949*x6954))+(((-1.0)*r22*x6957))+(((-1.0)*x6953*x6956)));
evalcond[2]=((((-1.0)*x6951*x6957))+sj0+(((-1.0)*r02*x6956))+((x6948*x6955)));
evalcond[3]=(((x6949*x6951))+cj0+(((-1.0)*x6955*x6956))+(((-1.0)*r02*x6957)));
evalcond[4]=(sj0+(((-1.0)*x6950*x6956))+((x6949*x6952))+(((-1.0)*r12*x6957)));
evalcond[5]=((((-1.0)*r12*x6956))+(((-1.0)*x6952*x6957))+((x6948*x6950))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6958=cj5*cj5;
IkReal x6959=((1.0)*r21);
IkReal x6960=(cj5*sj5);
IkReal x6961=((1.0)*r20);
CheckValue<IkReal> x6962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6959*x6960))+((r00*r20*x6958))+((r01*r21))+(((-1.0)*r01*x6958*x6959))+((r02*r22))+(((-1.0)*r01*x6960*x6961)))),-1);
if(!x6962.valid){
continue;
}
CheckValue<IkReal> x6963 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6962.value)))+(x6963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6964=IKsin(j4);
IkReal x6965=IKcos(j4);
IkReal x6966=(r11*sj5);
IkReal x6967=(cj5*r00);
IkReal x6968=(cj5*r10);
IkReal x6969=(r21*sj5);
IkReal x6970=(cj5*r20);
IkReal x6971=(r01*sj5);
IkReal x6972=((1.0)*x6965);
IkReal x6973=((1.0)*x6964);
evalcond[0]=((((-1.0)*x6970*x6973))+((x6964*x6969))+(((-1.0)*r22*x6972)));
evalcond[1]=((((-1.0)*x6969*x6972))+(((-1.0)*r22*x6973))+((x6965*x6970)));
evalcond[2]=(sj0+(((-1.0)*r02*x6972))+((x6964*x6971))+(((-1.0)*x6967*x6973)));
evalcond[3]=(((x6965*x6967))+(((-1.0)*r02*x6973))+cj0+(((-1.0)*x6971*x6972)));
evalcond[4]=(((x6965*x6968))+sj0+(((-1.0)*r12*x6973))+(((-1.0)*x6966*x6972)));
evalcond[5]=((((-1.0)*x6968*x6973))+((x6964*x6966))+(((-1.0)*r12*x6972))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6974.value)))+(x6975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6976=IKsin(j4);
IkReal x6977=IKcos(j4);
IkReal x6978=(r11*sj5);
IkReal x6979=(cj5*r00);
IkReal x6980=(cj5*r10);
IkReal x6981=(r21*sj5);
IkReal x6982=(cj5*r20);
IkReal x6983=(r01*sj5);
IkReal x6984=((1.0)*x6977);
IkReal x6985=((1.0)*x6976);
evalcond[0]=((((-1.0)*r22*x6984))+((x6976*x6981))+(((-1.0)*x6982*x6985)));
evalcond[1]=((((-1.0)*r22*x6985))+((x6977*x6982))+(((-1.0)*x6981*x6984)));
evalcond[2]=(sj0+(((-1.0)*x6979*x6985))+((x6976*x6983))+(((-1.0)*r02*x6984)));
evalcond[3]=(cj0+(((-1.0)*x6983*x6984))+((x6977*x6979))+(((-1.0)*r02*x6985)));
evalcond[4]=((((-1.0)*x6978*x6984))+sj0+(((-1.0)*r12*x6985))+((x6977*x6980)));
evalcond[5]=((((-1.0)*r12*x6984))+((x6976*x6978))+(((-1.0)*x6980*x6985))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6986=((1.0)*sj5);
IkReal x6987=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6986))+(((-1.0)*r11*x6987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6986))+(((-1.0)*r01*x6987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6986))+(((-1.0)*r11*x6987))))+IKsqr(((((-1.0)*r00*x6986))+(((-1.0)*r01*x6987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6986))+(((-1.0)*r11*x6987))), ((((-1.0)*r00*x6986))+(((-1.0)*r01*x6987))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6988=IKsin(j0);
IkReal x6989=IKcos(j0);
IkReal x6990=(cj5*r01);
IkReal x6991=(cj5*r11);
IkReal x6992=((0.1157)*sj5);
IkReal x6993=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x6993))+(((-1.0)*x6990))+(((-1.0)*x6989)));
evalcond[1]=((((-1.0)*x6991))+(((-1.0)*x6988))+(((-1.0)*r10*x6993)));
evalcond[2]=((((-1.0)*r00*x6992))+(((-1.0)*px))+(((-0.1157)*x6990))+(((0.163941)*x6988)));
evalcond[3]=((((-0.163941)*x6989))+(((-1.0)*r10*x6992))+(((-1.0)*py))+(((-0.1157)*x6991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6994=((1.0)*sj5);
IkReal x6995=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6994)));
j4eval[0]=x6995;
j4eval[1]=IKsign(x6995);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6994))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6996=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6996;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6997=r21*r21;
IkReal x6998=cj5*cj5;
IkReal x6999=(r21*sj5);
IkReal x7000=(cj5*r20);
IkReal x7001=((((2.0)*x6999*x7000))+(((-1.0)*x6997))+((x6997*x6998))+(((-1.0)*x6998*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x7001;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x7000))+x6999))));
j4eval[2]=IKsign(x7001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7002=r21*r21;
IkReal x7003=cj5*cj5;
IkReal x7004=(r21*sj5);
IkReal x7005=(cj5*r20);
CheckValue<IkReal> x7006 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7005))+x7004)),IKFAST_ATAN2_MAGTHRESH);
if(!x7006.valid){
continue;
}
CheckValue<IkReal> x7007=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7002))+(((-1.0)*x7003*(r20*r20)))+((x7002*x7003))+(((2.0)*x7004*x7005))+(((-1.0)*(r22*r22))))),-1);
if(!x7007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7006.value)+(((1.5707963267949)*(x7007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7008=IKsin(j4);
IkReal x7009=IKcos(j4);
IkReal x7010=(r11*sj5);
IkReal x7011=(r21*sj5);
IkReal x7012=(cj5*r00);
IkReal x7013=(cj5*r10);
IkReal x7014=(cj5*r20);
IkReal x7015=(r01*sj5);
IkReal x7016=((1.0)*x7009);
IkReal x7017=((1.0)*x7008);
evalcond[0]=((((-1.0)*r22*x7016))+((x7008*x7011))+(((-1.0)*x7014*x7017)));
evalcond[1]=((((-1.0)*x7015*x7016))+((x7009*x7012))+(((-1.0)*r02*x7017)));
evalcond[2]=((((-1.0)*x7010*x7016))+((x7009*x7013))+(((-1.0)*r12*x7017)));
evalcond[3]=(sj0+(((-1.0)*x7012*x7017))+((x7008*x7015))+(((-1.0)*r02*x7016)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7017))+(((-1.0)*x7011*x7016))+((x7009*x7014)));
evalcond[5]=(((x7008*x7010))+(((-1.0)*r12*x7016))+(((-1.0)*x7013*x7017))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7018=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7018.valid){
continue;
}
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7018.value)))+(x7019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7020=IKsin(j4);
IkReal x7021=IKcos(j4);
IkReal x7022=(r11*sj5);
IkReal x7023=(r21*sj5);
IkReal x7024=(cj5*r00);
IkReal x7025=(cj5*r10);
IkReal x7026=(cj5*r20);
IkReal x7027=(r01*sj5);
IkReal x7028=((1.0)*x7021);
IkReal x7029=((1.0)*x7020);
evalcond[0]=((((-1.0)*r22*x7028))+((x7020*x7023))+(((-1.0)*x7026*x7029)));
evalcond[1]=((((-1.0)*r02*x7029))+(((-1.0)*x7027*x7028))+((x7021*x7024)));
evalcond[2]=((((-1.0)*r12*x7029))+(((-1.0)*x7022*x7028))+((x7021*x7025)));
evalcond[3]=((((-1.0)*x7024*x7029))+sj0+((x7020*x7027))+(((-1.0)*r02*x7028)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7029))+((x7021*x7026))+(((-1.0)*x7023*x7028)));
evalcond[5]=((((-1.0)*r12*x7028))+(((-1.0)*x7025*x7029))+((x7020*x7022))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7030=((1.0)*sj5);
CheckValue<IkReal> x7031=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7030)))),-1);
if(!x7031.valid){
continue;
}
CheckValue<IkReal> x7032 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7030))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7031.value)))+(x7032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7033=IKsin(j4);
IkReal x7034=IKcos(j4);
IkReal x7035=(r11*sj5);
IkReal x7036=(r21*sj5);
IkReal x7037=(cj5*r00);
IkReal x7038=(cj5*r10);
IkReal x7039=(cj5*r20);
IkReal x7040=(r01*sj5);
IkReal x7041=((1.0)*x7034);
IkReal x7042=((1.0)*x7033);
evalcond[0]=((((-1.0)*r22*x7041))+((x7033*x7036))+(((-1.0)*x7039*x7042)));
evalcond[1]=((((-1.0)*r02*x7042))+(((-1.0)*x7040*x7041))+((x7034*x7037)));
evalcond[2]=((((-1.0)*r12*x7042))+(((-1.0)*x7035*x7041))+((x7034*x7038)));
evalcond[3]=(sj0+(((-1.0)*r02*x7041))+(((-1.0)*x7037*x7042))+((x7033*x7040)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7042))+(((-1.0)*x7036*x7041))+((x7034*x7039)));
evalcond[5]=((((-1.0)*r12*x7041))+((x7033*x7035))+(((-1.0)*x7038*x7042))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7043=IKsin(j0);
IkReal x7044=IKcos(j0);
evalcond[0]=((((-0.5723)*x7044))+(((-1.0)*px))+(((0.163941)*x7043)));
evalcond[1]=((((-0.5723)*x7043))+(((-0.163941)*x7044))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7045=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7045;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7046=cj5*cj5;
IkReal x7047=((1.0)*r21);
IkReal x7048=(cj5*sj5);
IkReal x7049=((1.0)*r20);
IkReal x7050=((((-1.0)*r01*x7048*x7049))+(((-1.0)*r01*x7046*x7047))+((r01*r21))+(((-1.0)*r00*x7047*x7048))+((r00*r20*x7046))+((r02*r22)));
j4eval[0]=x7050;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7049)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7051=cj5*cj5;
IkReal x7052=(r21*sj5);
IkReal x7053=(r11*r21);
IkReal x7054=((1.0)*cj5*r20);
IkReal x7055=(x7053+((r10*r20*x7051))+((r12*r22))+(((-1.0)*cj5*r10*x7052))+(((-1.0)*r11*sj5*x7054))+(((-1.0)*x7051*x7053)));
j4eval[0]=x7055;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7052))+(((-1.0)*sj0*x7054))))));
j4eval[2]=IKsign(x7055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7056=cj5*cj5;
IkReal x7057=(r21*sj5);
IkReal x7058=(r11*r21);
IkReal x7059=((1.0)*cj5*r20);
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7057))+(((-1.0)*sj0*x7059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
CheckValue<IkReal> x7061=IKPowWithIntegerCheck(IKsign((x7058+(((-1.0)*x7056*x7058))+((r10*r20*x7056))+((r12*r22))+(((-1.0)*cj5*r10*x7057))+(((-1.0)*r11*sj5*x7059)))),-1);
if(!x7061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7060.value)+(((1.5707963267949)*(x7061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7062=IKsin(j4);
IkReal x7063=IKcos(j4);
IkReal x7064=(r11*sj5);
IkReal x7065=(cj5*r00);
IkReal x7066=(cj5*r10);
IkReal x7067=(r21*sj5);
IkReal x7068=(cj5*r20);
IkReal x7069=(r01*sj5);
IkReal x7070=((1.0)*x7063);
IkReal x7071=((1.0)*x7062);
evalcond[0]=(((x7062*x7067))+(((-1.0)*x7068*x7071))+(((-1.0)*r22*x7070)));
evalcond[1]=(((x7063*x7068))+(((-1.0)*x7067*x7070))+(((-1.0)*r22*x7071)));
evalcond[2]=(((x7062*x7069))+sj0+(((-1.0)*x7065*x7071))+(((-1.0)*r02*x7070)));
evalcond[3]=((((-1.0)*x7069*x7070))+cj0+((x7063*x7065))+(((-1.0)*r02*x7071)));
evalcond[4]=(sj0+(((-1.0)*x7064*x7070))+((x7063*x7066))+(((-1.0)*r12*x7071)));
evalcond[5]=(((x7062*x7064))+(((-1.0)*x7066*x7071))+(((-1.0)*r12*x7070))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7072=cj5*cj5;
IkReal x7073=((1.0)*r21);
IkReal x7074=(cj5*sj5);
IkReal x7075=((1.0)*r20);
CheckValue<IkReal> x7076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7072*x7073))+(((-1.0)*r01*x7074*x7075))+(((-1.0)*r00*x7073*x7074))+((r01*r21))+((r02*r22))+((r00*r20*x7072)))),-1);
if(!x7076.valid){
continue;
}
CheckValue<IkReal> x7077 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7076.value)))+(x7077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7078=IKsin(j4);
IkReal x7079=IKcos(j4);
IkReal x7080=(r11*sj5);
IkReal x7081=(cj5*r00);
IkReal x7082=(cj5*r10);
IkReal x7083=(r21*sj5);
IkReal x7084=(cj5*r20);
IkReal x7085=(r01*sj5);
IkReal x7086=((1.0)*x7079);
IkReal x7087=((1.0)*x7078);
evalcond[0]=((((-1.0)*x7084*x7087))+(((-1.0)*r22*x7086))+((x7078*x7083)));
evalcond[1]=((((-1.0)*x7083*x7086))+(((-1.0)*r22*x7087))+((x7079*x7084)));
evalcond[2]=(sj0+((x7078*x7085))+(((-1.0)*r02*x7086))+(((-1.0)*x7081*x7087)));
evalcond[3]=(cj0+((x7079*x7081))+(((-1.0)*r02*x7087))+(((-1.0)*x7085*x7086)));
evalcond[4]=(sj0+(((-1.0)*r12*x7087))+((x7079*x7082))+(((-1.0)*x7080*x7086)));
evalcond[5]=((((-1.0)*r12*x7086))+(((-1.0)*x7082*x7087))+((x7078*x7080))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7088=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7088.valid){
continue;
}
CheckValue<IkReal> x7089 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7088.value)))+(x7089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7090=IKsin(j4);
IkReal x7091=IKcos(j4);
IkReal x7092=(r11*sj5);
IkReal x7093=(cj5*r00);
IkReal x7094=(cj5*r10);
IkReal x7095=(r21*sj5);
IkReal x7096=(cj5*r20);
IkReal x7097=(r01*sj5);
IkReal x7098=((1.0)*x7091);
IkReal x7099=((1.0)*x7090);
evalcond[0]=((((-1.0)*x7096*x7099))+((x7090*x7095))+(((-1.0)*r22*x7098)));
evalcond[1]=((((-1.0)*x7095*x7098))+(((-1.0)*r22*x7099))+((x7091*x7096)));
evalcond[2]=((((-1.0)*x7093*x7099))+sj0+((x7090*x7097))+(((-1.0)*r02*x7098)));
evalcond[3]=(cj0+(((-1.0)*x7097*x7098))+((x7091*x7093))+(((-1.0)*r02*x7099)));
evalcond[4]=(sj0+(((-1.0)*x7092*x7098))+(((-1.0)*r12*x7099))+((x7091*x7094)));
evalcond[5]=((((-1.0)*x7094*x7099))+(((-1.0)*r12*x7098))+((x7090*x7092))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7100=IKsin(j0);
IkReal x7101=IKcos(j0);
IkReal x7102=(cj5*r01);
IkReal x7103=(cj5*r11);
IkReal x7104=((0.1157)*sj5);
IkReal x7105=((1.0)*sj5);
evalcond[0]=(x7101+(((-1.0)*x7102))+(((-1.0)*r00*x7105)));
evalcond[1]=(x7100+(((-1.0)*x7103))+(((-1.0)*r10*x7105)));
evalcond[2]=((((-0.1157)*x7102))+(((-1.0)*px))+(((-1.0)*r00*x7104))+(((0.163941)*x7100)));
evalcond[3]=((((-0.1157)*x7103))+(((-1.0)*r10*x7104))+(((-1.0)*py))+(((-0.163941)*x7101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7106=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7106;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7107=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7107;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7108=cj5*cj5;
IkReal x7109=r21*r21;
IkReal x7110=(r21*sj5);
IkReal x7111=(cj5*r20);
IkReal x7112=(x7109+(r22*r22)+((x7108*(r20*r20)))+(((-2.0)*x7110*x7111))+(((-1.0)*x7108*x7109)));
j4eval[0]=x7112;
j4eval[1]=IKsign(x7112);
j4eval[2]=((IKabs(r22))+(IKabs((x7110+(((-1.0)*x7111))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7113=cj5*cj5;
IkReal x7114=r21*r21;
IkReal x7115=(r21*sj5);
IkReal x7116=(cj5*r20);
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal(r22),IkReal((x7115+(((-1.0)*x7116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
CheckValue<IkReal> x7118=IKPowWithIntegerCheck(IKsign((x7114+((x7113*(r20*r20)))+(r22*r22)+(((-1.0)*x7113*x7114))+(((-2.0)*x7115*x7116)))),-1);
if(!x7118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7117.value)+(((1.5707963267949)*(x7118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7119=IKsin(j4);
IkReal x7120=IKcos(j4);
IkReal x7121=(r11*sj5);
IkReal x7122=(r21*sj5);
IkReal x7123=(cj5*r00);
IkReal x7124=(cj5*r10);
IkReal x7125=(cj5*r20);
IkReal x7126=(r01*sj5);
IkReal x7127=((1.0)*x7120);
IkReal x7128=((1.0)*x7119);
evalcond[0]=(((x7119*x7122))+(((-1.0)*r22*x7127))+(((-1.0)*x7125*x7128)));
evalcond[1]=(((x7120*x7123))+(((-1.0)*x7126*x7127))+(((-1.0)*r02*x7128)));
evalcond[2]=((((-1.0)*x7121*x7127))+((x7120*x7124))+(((-1.0)*r12*x7128)));
evalcond[3]=((((-1.0)*x7123*x7128))+sj0+((x7119*x7126))+(((-1.0)*r02*x7127)));
evalcond[4]=((1.0)+((x7120*x7125))+(((-1.0)*x7122*x7127))+(((-1.0)*r22*x7128)));
evalcond[5]=(((x7119*x7121))+(((-1.0)*r12*x7127))+(((-1.0)*x7124*x7128))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7129=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7129.valid){
continue;
}
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7129.value)))+(x7130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7131=IKsin(j4);
IkReal x7132=IKcos(j4);
IkReal x7133=(r11*sj5);
IkReal x7134=(r21*sj5);
IkReal x7135=(cj5*r00);
IkReal x7136=(cj5*r10);
IkReal x7137=(cj5*r20);
IkReal x7138=(r01*sj5);
IkReal x7139=((1.0)*x7132);
IkReal x7140=((1.0)*x7131);
evalcond[0]=((((-1.0)*r22*x7139))+(((-1.0)*x7137*x7140))+((x7131*x7134)));
evalcond[1]=((((-1.0)*x7138*x7139))+((x7132*x7135))+(((-1.0)*r02*x7140)));
evalcond[2]=(((x7132*x7136))+(((-1.0)*r12*x7140))+(((-1.0)*x7133*x7139)));
evalcond[3]=(sj0+(((-1.0)*x7135*x7140))+((x7131*x7138))+(((-1.0)*r02*x7139)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7140))+((x7132*x7137))+(((-1.0)*x7134*x7139)));
evalcond[5]=((((-1.0)*r12*x7139))+(((-1.0)*x7136*x7140))+((x7131*x7133))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7141 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7141.valid){
continue;
}
CheckValue<IkReal> x7142=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7141.value)+(((1.5707963267949)*(x7142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7143=IKsin(j4);
IkReal x7144=IKcos(j4);
IkReal x7145=(r11*sj5);
IkReal x7146=(r21*sj5);
IkReal x7147=(cj5*r00);
IkReal x7148=(cj5*r10);
IkReal x7149=(cj5*r20);
IkReal x7150=(r01*sj5);
IkReal x7151=((1.0)*x7144);
IkReal x7152=((1.0)*x7143);
evalcond[0]=((((-1.0)*r22*x7151))+(((-1.0)*x7149*x7152))+((x7143*x7146)));
evalcond[1]=(((x7144*x7147))+(((-1.0)*x7150*x7151))+(((-1.0)*r02*x7152)));
evalcond[2]=((((-1.0)*r12*x7152))+((x7144*x7148))+(((-1.0)*x7145*x7151)));
evalcond[3]=(sj0+(((-1.0)*r02*x7151))+(((-1.0)*x7147*x7152))+((x7143*x7150)));
evalcond[4]=((1.0)+(((-1.0)*x7146*x7151))+(((-1.0)*r22*x7152))+((x7144*x7149)));
evalcond[5]=((((-1.0)*r12*x7151))+(((-1.0)*x7148*x7152))+(((-1.0)*cj0))+((x7143*x7145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((-0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((-0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((0.462582327146012)*px))), ((((1.61482402709306)*px))+(((-0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7153=IKsin(j0);
IkReal x7154=IKcos(j0);
evalcond[0]=((((0.163941)*x7153))+(((0.5723)*x7154))+(((-1.0)*px)));
evalcond[1]=((((-0.163941)*x7154))+(((0.5723)*x7153))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7155=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7155;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7156=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7156;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7157=cj5*cj5;
IkReal x7158=((1.0)*r21);
IkReal x7159=(cj5*r20);
IkReal x7160=(((r00*r20*x7157))+(((-1.0)*r01*sj5*x7159))+((r01*r21))+(((-1.0)*r01*x7157*x7158))+(((-1.0)*cj5*r00*sj5*x7158))+((r02*r22)));
j4eval[0]=x7160;
j4eval[1]=IKsign(x7160);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7159))+(((-1.0)*sj0*sj5*x7158))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7161=cj5*cj5;
IkReal x7162=((1.0)*r21);
IkReal x7163=(cj5*r20);
CheckValue<IkReal> x7164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x7163))+(((-1.0)*cj5*r00*sj5*x7162))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x7161*x7162))+((r00*r20*x7161)))),-1);
if(!x7164.valid){
continue;
}
CheckValue<IkReal> x7165 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x7162))+((sj0*x7163)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7164.value)))+(x7165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7166=IKsin(j4);
IkReal x7167=IKcos(j4);
IkReal x7168=((1.0)*cj0);
IkReal x7169=(cj5*r00);
IkReal x7170=(r11*sj5);
IkReal x7171=(cj5*r10);
IkReal x7172=(r21*sj5);
IkReal x7173=(cj5*r20);
IkReal x7174=(r01*sj5);
IkReal x7175=((1.0)*x7167);
IkReal x7176=((1.0)*x7166);
evalcond[0]=(((x7166*x7172))+(((-1.0)*x7173*x7176))+(((-1.0)*r22*x7175)));
evalcond[1]=((((-1.0)*r22*x7176))+((x7167*x7173))+(((-1.0)*x7172*x7175)));
evalcond[2]=((((-1.0)*x7169*x7176))+sj0+((x7166*x7174))+(((-1.0)*r02*x7175)));
evalcond[3]=((((-1.0)*x7171*x7176))+((x7166*x7170))+(((-1.0)*x7168))+(((-1.0)*r12*x7175)));
evalcond[4]=((((-1.0)*x7174*x7175))+(((-1.0)*r02*x7176))+(((-1.0)*x7168))+((x7167*x7169)));
evalcond[5]=((((-1.0)*x7170*x7175))+(((-1.0)*sj0))+(((-1.0)*r12*x7176))+((x7167*x7171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7177=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7177.valid){
continue;
}
CheckValue<IkReal> x7178 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7177.value)))+(x7178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7179=IKsin(j4);
IkReal x7180=IKcos(j4);
IkReal x7181=((1.0)*cj0);
IkReal x7182=(cj5*r00);
IkReal x7183=(r11*sj5);
IkReal x7184=(cj5*r10);
IkReal x7185=(r21*sj5);
IkReal x7186=(cj5*r20);
IkReal x7187=(r01*sj5);
IkReal x7188=((1.0)*x7180);
IkReal x7189=((1.0)*x7179);
evalcond[0]=(((x7179*x7185))+(((-1.0)*x7186*x7189))+(((-1.0)*r22*x7188)));
evalcond[1]=((((-1.0)*x7185*x7188))+((x7180*x7186))+(((-1.0)*r22*x7189)));
evalcond[2]=(sj0+((x7179*x7187))+(((-1.0)*x7182*x7189))+(((-1.0)*r02*x7188)));
evalcond[3]=(((x7179*x7183))+(((-1.0)*x7184*x7189))+(((-1.0)*x7181))+(((-1.0)*r12*x7188)));
evalcond[4]=((((-1.0)*x7187*x7188))+(((-1.0)*x7181))+((x7180*x7182))+(((-1.0)*r02*x7189)));
evalcond[5]=((((-1.0)*sj0))+((x7180*x7184))+(((-1.0)*x7183*x7188))+(((-1.0)*r12*x7189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7190=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7190.valid){
continue;
}
CheckValue<IkReal> x7191 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7190.value)))+(x7191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7192=IKsin(j4);
IkReal x7193=IKcos(j4);
IkReal x7194=((1.0)*cj0);
IkReal x7195=(cj5*r00);
IkReal x7196=(r11*sj5);
IkReal x7197=(cj5*r10);
IkReal x7198=(r21*sj5);
IkReal x7199=(cj5*r20);
IkReal x7200=(r01*sj5);
IkReal x7201=((1.0)*x7193);
IkReal x7202=((1.0)*x7192);
evalcond[0]=((((-1.0)*x7199*x7202))+((x7192*x7198))+(((-1.0)*r22*x7201)));
evalcond[1]=((((-1.0)*x7198*x7201))+((x7193*x7199))+(((-1.0)*r22*x7202)));
evalcond[2]=(sj0+(((-1.0)*x7195*x7202))+((x7192*x7200))+(((-1.0)*r02*x7201)));
evalcond[3]=((((-1.0)*x7194))+(((-1.0)*x7197*x7202))+((x7192*x7196))+(((-1.0)*r12*x7201)));
evalcond[4]=((((-1.0)*x7194))+((x7193*x7195))+(((-1.0)*x7200*x7201))+(((-1.0)*r02*x7202)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7196*x7201))+((x7193*x7197))+(((-1.0)*r12*x7202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7203=cj1*cj1;
IkReal x7204=(cj1*sj2);
IkReal x7205=(r00*sj5);
IkReal x7206=(cj2*sj1);
IkReal x7207=(cj5*r01);
IkReal x7208=((1000000.0)*py);
IkReal x7209=(cj1*sj1);
IkReal x7210=(sj2*x7203);
IkReal x7211=((115700.0)*r10*sj5);
IkReal x7212=((115700.0)*cj5*r11);
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(((((572300.0)*cj2*sj2))+(((572300.0)*x7209))+(((-612000.0)*cj1*x7206))+(((-1144600.0)*cj1*cj2*x7206))+(((-1144600.0)*cj2*x7210))+(((-612000.0)*x7210))),-1);
if(!x7213.valid){
continue;
}
CheckValue<IkReal> x7214=IKPowWithIntegerCheck((x7206+x7204),-1);
if(!x7214.valid){
continue;
}
if( IKabs(((x7213.value)*((((x7204*x7211))+((x7204*x7212))+((x7206*x7212))+((x7206*x7211))+((x7206*x7208))+((x7204*x7208))+(((163941.0)*x7207))+(((163941.0)*x7205)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7214.value)*((x7207+x7205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7213.value)*((((x7204*x7211))+((x7204*x7212))+((x7206*x7212))+((x7206*x7211))+((x7206*x7208))+((x7204*x7208))+(((163941.0)*x7207))+(((163941.0)*x7205))))))+IKsqr(((x7214.value)*((x7207+x7205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7213.value)*((((x7204*x7211))+((x7204*x7212))+((x7206*x7212))+((x7206*x7211))+((x7206*x7208))+((x7204*x7208))+(((163941.0)*x7207))+(((163941.0)*x7205))))), ((x7214.value)*((x7207+x7205))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7215=IKcos(j0);
IkReal x7216=IKsin(j0);
IkReal x7217=(cj5*r01);
IkReal x7218=(cj5*r11);
IkReal x7219=(r10*sj5);
IkReal x7220=(r00*sj5);
IkReal x7221=((0.5723)*sj1*sj2);
IkReal x7222=(cj2*x7215);
IkReal x7223=(cj1*x7216);
IkReal x7224=(cj1*x7215);
evalcond[0]=(((sj2*x7224))+(((-1.0)*x7217))+(((-1.0)*x7220))+((sj1*x7222)));
evalcond[1]=(((cj2*sj1*x7216))+((sj2*x7223))+(((-1.0)*x7219))+(((-1.0)*x7218)));
evalcond[2]=((((-0.1157)*x7220))+(((0.163941)*x7216))+((x7215*x7221))+(((-0.1157)*x7217))+(((-1.0)*px))+(((-0.612)*x7224))+(((-0.5723)*cj1*x7222)));
evalcond[3]=(((x7216*x7221))+(((-0.1157)*x7219))+(((-0.1157)*x7218))+(((-1.0)*py))+(((-0.612)*x7223))+(((-0.5723)*cj2*x7223))+(((-0.163941)*x7215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7225=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7225;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7226=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7226;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7227=((1.0)*cj5);
IkReal x7228=((((-1.0)*r21*x7227))+(((-1.0)*r20*sj5)));
j4eval[0]=x7228;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7227))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7227))))));
j4eval[2]=IKsign(x7228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7229=((-1.0)*r20);
IkReal x7231 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7231)==0){
continue;
}
IkReal x7230=pow(x7231,-0.5);
CheckValue<IkReal> x7232 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7229),IKFAST_ATAN2_MAGTHRESH);
if(!x7232.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7232.value));
IkReal gconst133=(r21*x7230);
IkReal gconst134=(x7229*x7230);
CheckValue<IkReal> x7233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7233.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7233.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7234=((-1.0)*r20);
IkReal x7235=x7230;
CheckValue<IkReal> x7237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7234),IKFAST_ATAN2_MAGTHRESH);
if(!x7237.valid){
continue;
}
IkReal x7236=((-1.0)*(x7237.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7236;
IkReal gconst132=x7236;
IkReal gconst133=(r21*x7235);
IkReal gconst134=(x7234*x7235);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7238=((-1.0)*r20);
IkReal x7239=x7230;
CheckValue<IkReal> x7241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7238),IKFAST_ATAN2_MAGTHRESH);
if(!x7241.valid){
continue;
}
IkReal x7240=((-1.0)*(x7241.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7240;
IkReal gconst132=x7240;
IkReal gconst133=(r21*x7239);
IkReal gconst134=(x7238*x7239);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7242=((-1.0)*r20);
IkReal x7243=x7230;
CheckValue<IkReal> x7245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7242),IKFAST_ATAN2_MAGTHRESH);
if(!x7245.valid){
continue;
}
IkReal x7244=((-1.0)*(x7245.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7244;
IkReal gconst132=x7244;
IkReal gconst133=(r21*x7243);
IkReal gconst134=(x7242*x7243);
IkReal x7246=r22*r22;
CheckValue<IkReal> x7249=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7246))),-1);
if(!x7249.valid){
continue;
}
IkReal x7247=x7249.value;
IkReal x7248=(x7246+((x7247*(r20*r20*r20*r20)))+(((2.0)*x7247*(r20*r20)*(r21*r21)))+((x7247*(r21*r21*r21*r21))));
j4eval[0]=x7248;
j4eval[1]=IKsign(x7248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7250=(gconst133*r21);
IkReal x7251=(cj1*sj2);
IkReal x7252=(gconst134*r20);
IkReal x7253=(cj2*sj1);
CheckValue<IkReal> x7254 = IKatan2WithCheck(IkReal((((r22*x7251))+((r22*x7253)))),IkReal((((x7250*x7253))+((x7250*x7251))+(((-1.0)*x7251*x7252))+(((-1.0)*x7252*x7253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7254.valid){
continue;
}
CheckValue<IkReal> x7255=IKPowWithIntegerCheck(IKsign(((x7250*x7250)+(((-2.0)*x7250*x7252))+(r22*r22)+(x7252*x7252))),-1);
if(!x7255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7254.value)+(((1.5707963267949)*(x7255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7256=IKsin(j4);
IkReal x7257=IKcos(j4);
IkReal x7258=(cj1*cj2);
IkReal x7259=(gconst133*r11);
IkReal x7260=(gconst133*r21);
IkReal x7261=(gconst133*r01);
IkReal x7262=((1.0)*cj0);
IkReal x7263=(sj1*sj2);
IkReal x7264=((1.0)*x7257);
IkReal x7265=(gconst134*x7257);
IkReal x7266=((1.0)*x7256);
evalcond[0]=(((x7256*x7260))+(((-1.0)*gconst134*r20*x7266))+(((-1.0)*r22*x7264)));
evalcond[1]=(((x7256*x7261))+sj0+(((-1.0)*gconst134*r00*x7266))+(((-1.0)*r02*x7264)));
evalcond[2]=((((-1.0)*x7262))+(((-1.0)*r12*x7264))+((x7256*x7259))+(((-1.0)*gconst134*r10*x7266)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7266))+((cj1*sj2))+(((-1.0)*x7260*x7264))+((r20*x7265)));
evalcond[4]=((((-1.0)*x7261*x7264))+(((-1.0)*x7262*x7263))+((r00*x7265))+(((-1.0)*r02*x7266))+((cj0*x7258)));
evalcond[5]=((((-1.0)*x7259*x7264))+((r10*x7265))+((sj0*x7258))+(((-1.0)*r12*x7266))+(((-1.0)*sj0*x7263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7267=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7267.valid){
continue;
}
CheckValue<IkReal> x7268 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7267.value)))+(x7268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7269=IKsin(j4);
IkReal x7270=IKcos(j4);
IkReal x7271=(cj1*cj2);
IkReal x7272=(gconst133*r11);
IkReal x7273=(gconst133*r21);
IkReal x7274=(gconst133*r01);
IkReal x7275=((1.0)*cj0);
IkReal x7276=(sj1*sj2);
IkReal x7277=((1.0)*x7270);
IkReal x7278=(gconst134*x7270);
IkReal x7279=((1.0)*x7269);
evalcond[0]=((((-1.0)*r22*x7277))+((x7269*x7273))+(((-1.0)*gconst134*r20*x7279)));
evalcond[1]=(sj0+(((-1.0)*gconst134*r00*x7279))+((x7269*x7274))+(((-1.0)*r02*x7277)));
evalcond[2]=((((-1.0)*r12*x7277))+((x7269*x7272))+(((-1.0)*gconst134*r10*x7279))+(((-1.0)*x7275)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7279))+((cj1*sj2))+(((-1.0)*x7273*x7277))+((r20*x7278)));
evalcond[4]=((((-1.0)*x7274*x7277))+(((-1.0)*r02*x7279))+((r00*x7278))+(((-1.0)*x7275*x7276))+((cj0*x7271)));
evalcond[5]=((((-1.0)*r12*x7279))+(((-1.0)*x7272*x7277))+(((-1.0)*sj0*x7276))+((r10*x7278))+((sj0*x7271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7280 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7280.valid){
continue;
}
CheckValue<IkReal> x7281=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7280.value)+(((1.5707963267949)*(x7281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7282=IKsin(j4);
IkReal x7283=IKcos(j4);
IkReal x7284=(cj1*cj2);
IkReal x7285=(gconst133*r11);
IkReal x7286=(gconst133*r21);
IkReal x7287=(gconst133*r01);
IkReal x7288=((1.0)*cj0);
IkReal x7289=(sj1*sj2);
IkReal x7290=((1.0)*x7283);
IkReal x7291=(gconst134*x7283);
IkReal x7292=((1.0)*x7282);
evalcond[0]=((((-1.0)*r22*x7290))+((x7282*x7286))+(((-1.0)*gconst134*r20*x7292)));
evalcond[1]=(sj0+((x7282*x7287))+(((-1.0)*gconst134*r00*x7292))+(((-1.0)*r02*x7290)));
evalcond[2]=(((x7282*x7285))+(((-1.0)*x7288))+(((-1.0)*r12*x7290))+(((-1.0)*gconst134*r10*x7292)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7286*x7290))+(((-1.0)*r22*x7292))+((cj1*sj2))+((r20*x7291)));
evalcond[4]=(((cj0*x7284))+(((-1.0)*x7288*x7289))+(((-1.0)*r02*x7292))+((r00*x7291))+(((-1.0)*x7287*x7290)));
evalcond[5]=((((-1.0)*x7285*x7290))+(((-1.0)*sj0*x7289))+((sj0*x7284))+((r10*x7291))+(((-1.0)*r12*x7292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7293=((-1.0)*r21);
IkReal x7295 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7295)==0){
continue;
}
IkReal x7294=pow(x7295,-0.5);
CheckValue<IkReal> x7296 = IKatan2WithCheck(IkReal(x7293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7296.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7296.value))));
IkReal gconst136=(x7293*x7294);
IkReal gconst137=((1.0)*r20*x7294);
CheckValue<IkReal> x7297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7297.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7297.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7298=((-1.0)*r21);
CheckValue<IkReal> x7301 = IKatan2WithCheck(IkReal(x7298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7301.valid){
continue;
}
IkReal x7299=((1.0)*(x7301.value));
IkReal x7300=x7294;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7299)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7299)));
IkReal gconst136=(x7298*x7300);
IkReal gconst137=((1.0)*r20*x7300);
IkReal x7302=r22*r22;
IkReal x7303=((1.0)*x7302);
CheckValue<IkReal> x7307=IKPowWithIntegerCheck(((-1.0)+x7302),-1);
if(!x7307.valid){
continue;
}
IkReal x7304=x7307.value;
if((((1.0)+(((-1.0)*x7303)))) < -0.00001)
continue;
IkReal x7305=IKsqrt(((1.0)+(((-1.0)*x7303))));
IkReal x7306=(sj0*x7304*x7305);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7306+(((-1.0)*x7303*x7306))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7308=((-1.0)*r21);
CheckValue<IkReal> x7311 = IKatan2WithCheck(IkReal(x7308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7311.valid){
continue;
}
IkReal x7309=((1.0)*(x7311.value));
IkReal x7310=x7294;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7309)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7309)));
IkReal gconst136=(x7308*x7310);
IkReal gconst137=((1.0)*r20*x7310);
IkReal x7312=r22*r22;
IkReal x7313=((1.0)*x7312);
CheckValue<IkReal> x7317=IKPowWithIntegerCheck(((-1.0)+x7312),-1);
if(!x7317.valid){
continue;
}
IkReal x7314=x7317.value;
if((((1.0)+(((-1.0)*x7313)))) < -0.00001)
continue;
IkReal x7315=IKsqrt(((1.0)+(((-1.0)*x7313))));
IkReal x7316=(cj0*x7314*x7315);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7316+(((-1.0)*x7313*x7316))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7318=((-1.0)*r21);
CheckValue<IkReal> x7321 = IKatan2WithCheck(IkReal(x7318),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7321.valid){
continue;
}
IkReal x7319=((1.0)*(x7321.value));
IkReal x7320=x7294;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7319)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7319)));
IkReal gconst136=(x7318*x7320);
IkReal gconst137=((1.0)*r20*x7320);
IkReal x7322=r22*r22;
IkReal x7323=(cj0*r02);
IkReal x7324=(r12*sj0);
CheckValue<IkReal> x7328=IKPowWithIntegerCheck(((-1.0)+x7322),-1);
if(!x7328.valid){
continue;
}
IkReal x7325=x7328.value;
if((((1.0)+(((-1.0)*x7322)))) < -0.00001)
continue;
IkReal x7326=IKsqrt(((1.0)+(((-1.0)*x7322))));
IkReal x7327=((1.0)*r22*x7325*x7326);
j4eval[0]=0;
j4eval[1]=((IKabs((x7324+x7323)))+(IKabs(((((-1.0)*x7324*x7327))+(((-1.0)*x7323*x7327))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7329=((1.0)*gconst137);
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7329))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*r10*sj0*x7329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
CheckValue<IkReal> x7331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7329))+(((-1.0)*gconst136*r20)))),-1);
if(!x7331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7330.value)+(((1.5707963267949)*(x7331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7332=IKsin(j4);
IkReal x7333=IKcos(j4);
IkReal x7334=(gconst136*r01);
IkReal x7335=(gconst137*r10);
IkReal x7336=(cj1*cj2);
IkReal x7337=(gconst137*r20);
IkReal x7338=(gconst136*r11);
IkReal x7339=(gconst136*r21);
IkReal x7340=(gconst137*r00);
IkReal x7341=((1.0)*cj0);
IkReal x7342=(sj1*sj2);
IkReal x7343=((1.0)*x7333);
IkReal x7344=((1.0)*x7332);
evalcond[0]=((((-1.0)*r22*x7343))+(((-1.0)*x7337*x7344))+((x7332*x7339)));
evalcond[1]=(sj0+(((-1.0)*x7340*x7344))+((x7332*x7334))+(((-1.0)*r02*x7343)));
evalcond[2]=((((-1.0)*r12*x7343))+((x7332*x7338))+(((-1.0)*x7341))+(((-1.0)*x7335*x7344)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7344))+((cj1*sj2))+((x7333*x7337))+(((-1.0)*x7339*x7343)));
evalcond[4]=((((-1.0)*x7341*x7342))+(((-1.0)*x7334*x7343))+(((-1.0)*r02*x7344))+((x7333*x7340))+((cj0*x7336)));
evalcond[5]=((((-1.0)*sj0*x7342))+(((-1.0)*r12*x7344))+((sj0*x7336))+((x7333*x7335))+(((-1.0)*x7338*x7343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7345 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7345.valid){
continue;
}
CheckValue<IkReal> x7346=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7345.value)+(((1.5707963267949)*(x7346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7347=IKsin(j4);
IkReal x7348=IKcos(j4);
IkReal x7349=(gconst136*r01);
IkReal x7350=(gconst137*r10);
IkReal x7351=(cj1*cj2);
IkReal x7352=(gconst137*r20);
IkReal x7353=(gconst136*r11);
IkReal x7354=(gconst136*r21);
IkReal x7355=(gconst137*r00);
IkReal x7356=((1.0)*cj0);
IkReal x7357=(sj1*sj2);
IkReal x7358=((1.0)*x7348);
IkReal x7359=((1.0)*x7347);
evalcond[0]=((((-1.0)*r22*x7358))+((x7347*x7354))+(((-1.0)*x7352*x7359)));
evalcond[1]=(sj0+((x7347*x7349))+(((-1.0)*r02*x7358))+(((-1.0)*x7355*x7359)));
evalcond[2]=((((-1.0)*r12*x7358))+((x7347*x7353))+(((-1.0)*x7356))+(((-1.0)*x7350*x7359)));
evalcond[3]=(((x7348*x7352))+(((-1.0)*r22*x7359))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7354*x7358)));
evalcond[4]=(((x7348*x7355))+(((-1.0)*x7356*x7357))+(((-1.0)*x7349*x7358))+((cj0*x7351))+(((-1.0)*r02*x7359)));
evalcond[5]=(((x7348*x7350))+(((-1.0)*sj0*x7357))+(((-1.0)*r12*x7359))+((sj0*x7351))+(((-1.0)*x7353*x7358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7360.valid){
continue;
}
CheckValue<IkReal> x7361 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7360.value)))+(x7361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7362=IKsin(j4);
IkReal x7363=IKcos(j4);
IkReal x7364=(gconst136*r01);
IkReal x7365=(gconst137*r10);
IkReal x7366=(cj1*cj2);
IkReal x7367=(gconst137*r20);
IkReal x7368=(gconst136*r11);
IkReal x7369=(gconst136*r21);
IkReal x7370=(gconst137*r00);
IkReal x7371=((1.0)*cj0);
IkReal x7372=(sj1*sj2);
IkReal x7373=((1.0)*x7363);
IkReal x7374=((1.0)*x7362);
evalcond[0]=((((-1.0)*r22*x7373))+(((-1.0)*x7367*x7374))+((x7362*x7369)));
evalcond[1]=(sj0+(((-1.0)*x7370*x7374))+(((-1.0)*r02*x7373))+((x7362*x7364)));
evalcond[2]=((((-1.0)*r12*x7373))+(((-1.0)*x7371))+((x7362*x7368))+(((-1.0)*x7365*x7374)));
evalcond[3]=(((cj2*sj1))+((x7363*x7367))+(((-1.0)*r22*x7374))+((cj1*sj2))+(((-1.0)*x7369*x7373)));
evalcond[4]=(((x7363*x7370))+((cj0*x7366))+(((-1.0)*r02*x7374))+(((-1.0)*x7364*x7373))+(((-1.0)*x7371*x7372)));
evalcond[5]=(((x7363*x7365))+((sj0*x7366))+(((-1.0)*r12*x7374))+(((-1.0)*x7368*x7373))+(((-1.0)*sj0*x7372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7376 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7376)==0){
continue;
}
IkReal x7375=pow(x7376,-0.5);
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7377.value));
IkReal gconst139=((-1.0)*r01*x7375);
IkReal gconst140=(r00*x7375);
CheckValue<IkReal> x7378 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7378.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7378.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
IkReal x7379=((-1.0)*(x7381.value));
IkReal x7380=x7375;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7379;
IkReal gconst138=x7379;
IkReal gconst139=((-1.0)*r01*x7380);
IkReal gconst140=(r00*x7380);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7382=((1.0)*gconst140);
CheckValue<IkReal> x7383 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7382))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*r10*sj0*x7382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7383.valid){
continue;
}
CheckValue<IkReal> x7384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7382))+(((-1.0)*gconst139*r20)))),-1);
if(!x7384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7383.value)+(((1.5707963267949)*(x7384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7385=IKsin(j4);
IkReal x7386=IKcos(j4);
IkReal x7387=(gconst140*r00);
IkReal x7388=(cj1*cj2);
IkReal x7389=(gconst139*r11);
IkReal x7390=(gconst139*r01);
IkReal x7391=((1.0)*cj0);
IkReal x7392=(gconst139*r21);
IkReal x7393=(sj1*sj2);
IkReal x7394=((1.0)*x7386);
IkReal x7395=((1.0)*x7385);
IkReal x7396=(gconst140*x7386);
evalcond[0]=((((-1.0)*r22*x7394))+((x7385*x7392))+(((-1.0)*gconst140*r20*x7395)));
evalcond[1]=(sj0+((x7385*x7390))+(((-1.0)*r02*x7394))+(((-1.0)*x7387*x7395)));
evalcond[2]=((((-1.0)*r12*x7394))+(((-1.0)*gconst140*r10*x7395))+((x7385*x7389))+(((-1.0)*x7391)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7395))+(((-1.0)*x7392*x7394))+((cj1*sj2))+((r20*x7396)));
evalcond[4]=((((-1.0)*x7390*x7394))+((x7386*x7387))+(((-1.0)*r02*x7395))+((cj0*x7388))+(((-1.0)*x7391*x7393)));
evalcond[5]=((((-1.0)*r12*x7395))+((sj0*x7388))+((r10*x7396))+(((-1.0)*x7389*x7394))+(((-1.0)*sj0*x7393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7397 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7397.valid){
continue;
}
CheckValue<IkReal> x7398=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x7398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7397.value)+(((1.5707963267949)*(x7398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7399=IKsin(j4);
IkReal x7400=IKcos(j4);
IkReal x7401=(gconst140*r00);
IkReal x7402=(cj1*cj2);
IkReal x7403=(gconst139*r11);
IkReal x7404=(gconst139*r01);
IkReal x7405=((1.0)*cj0);
IkReal x7406=(gconst139*r21);
IkReal x7407=(sj1*sj2);
IkReal x7408=((1.0)*x7400);
IkReal x7409=((1.0)*x7399);
IkReal x7410=(gconst140*x7400);
evalcond[0]=((((-1.0)*gconst140*r20*x7409))+((x7399*x7406))+(((-1.0)*r22*x7408)));
evalcond[1]=(sj0+((x7399*x7404))+(((-1.0)*x7401*x7409))+(((-1.0)*r02*x7408)));
evalcond[2]=((((-1.0)*r12*x7408))+(((-1.0)*x7405))+((x7399*x7403))+(((-1.0)*gconst140*r10*x7409)));
evalcond[3]=(((cj2*sj1))+((r20*x7410))+((cj1*sj2))+(((-1.0)*r22*x7409))+(((-1.0)*x7406*x7408)));
evalcond[4]=((((-1.0)*x7405*x7407))+((x7400*x7401))+(((-1.0)*x7404*x7408))+(((-1.0)*r02*x7409))+((cj0*x7402)));
evalcond[5]=((((-1.0)*x7403*x7408))+(((-1.0)*r12*x7409))+(((-1.0)*sj0*x7407))+((r10*x7410))+((sj0*x7402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7412 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7412)==0){
continue;
}
IkReal x7411=pow(x7412,-0.5);
CheckValue<IkReal> x7413 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7413.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7413.value))));
IkReal gconst142=((1.0)*r01*x7411);
IkReal gconst143=((-1.0)*r00*x7411);
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7414.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
IkReal x7415=((1.0)*(x7417.value));
IkReal x7416=x7411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7415)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7415)));
IkReal gconst142=((1.0)*r01*x7416);
IkReal gconst143=((-1.0)*r00*x7416);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7420 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7420.valid){
continue;
}
IkReal x7418=((1.0)*(x7420.value));
IkReal x7419=x7411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7418)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7418)));
IkReal gconst142=((1.0)*r01*x7419);
IkReal gconst143=((-1.0)*r00*x7419);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7423 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7423.valid){
continue;
}
IkReal x7421=((1.0)*(x7423.value));
IkReal x7422=x7411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7421)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7421)));
IkReal gconst142=((1.0)*r01*x7422);
IkReal gconst143=((-1.0)*r00*x7422);
IkReal x7424=r02*r02;
IkReal x7425=(r12*sj0);
IkReal x7426=x7411;
IkReal x7427=(cj0*x7426);
j4eval[0]=((IKabs((x7425+((cj0*r02)))))+(IKabs(((((-1.0)*x7427))+((x7424*x7427))+((r02*x7425*x7426))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7428=((1.0)*gconst143);
CheckValue<IkReal> x7429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7428))+(((-1.0)*gconst142*r20)))),-1);
if(!x7429.valid){
continue;
}
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst142*r01))+(((-1.0)*r10*sj0*x7428))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x7428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7429.value)))+(x7430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7431=IKsin(j4);
IkReal x7432=IKcos(j4);
IkReal x7433=(cj1*cj2);
IkReal x7434=(gconst143*r20);
IkReal x7435=((1.0)*cj0);
IkReal x7436=(sj1*sj2);
IkReal x7437=((1.0)*x7432);
IkReal x7438=((1.0)*x7431);
IkReal x7439=(gconst142*x7431);
IkReal x7440=(gconst143*x7432);
evalcond[0]=(((r21*x7439))+(((-1.0)*r22*x7437))+(((-1.0)*x7434*x7438)));
evalcond[1]=(((r01*x7439))+sj0+(((-1.0)*r02*x7437))+(((-1.0)*gconst143*r00*x7438)));
evalcond[2]=((((-1.0)*r12*x7437))+(((-1.0)*x7435))+((r11*x7439))+(((-1.0)*gconst143*r10*x7438)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7438))+((cj1*sj2))+((x7432*x7434))+(((-1.0)*gconst142*r21*x7437)));
evalcond[4]=((((-1.0)*r02*x7438))+((cj0*x7433))+((r00*x7440))+(((-1.0)*x7435*x7436))+(((-1.0)*gconst142*r01*x7437)));
evalcond[5]=((((-1.0)*sj0*x7436))+(((-1.0)*r12*x7438))+((r10*x7440))+(((-1.0)*gconst142*r11*x7437))+((sj0*x7433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7441=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7441.value)))+(x7442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKsin(j4);
IkReal x7444=IKcos(j4);
IkReal x7445=(cj1*cj2);
IkReal x7446=(gconst143*r20);
IkReal x7447=((1.0)*cj0);
IkReal x7448=(sj1*sj2);
IkReal x7449=((1.0)*x7444);
IkReal x7450=((1.0)*x7443);
IkReal x7451=(gconst142*x7443);
IkReal x7452=(gconst143*x7444);
evalcond[0]=((((-1.0)*x7446*x7450))+((r21*x7451))+(((-1.0)*r22*x7449)));
evalcond[1]=(sj0+(((-1.0)*gconst143*r00*x7450))+((r01*x7451))+(((-1.0)*r02*x7449)));
evalcond[2]=((((-1.0)*x7447))+((r11*x7451))+(((-1.0)*gconst143*r10*x7450))+(((-1.0)*r12*x7449)));
evalcond[3]=(((cj2*sj1))+((x7444*x7446))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7449))+(((-1.0)*r22*x7450)));
evalcond[4]=(((r00*x7452))+(((-1.0)*x7447*x7448))+(((-1.0)*gconst142*r01*x7449))+(((-1.0)*r02*x7450))+((cj0*x7445)));
evalcond[5]=((((-1.0)*gconst142*r11*x7449))+((sj0*x7445))+(((-1.0)*sj0*x7448))+((r10*x7452))+(((-1.0)*r12*x7450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7453.valid){
continue;
}
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7453.value)))+(x7454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7455=IKsin(j4);
IkReal x7456=IKcos(j4);
IkReal x7457=(cj1*cj2);
IkReal x7458=(gconst143*r20);
IkReal x7459=((1.0)*cj0);
IkReal x7460=(sj1*sj2);
IkReal x7461=((1.0)*x7456);
IkReal x7462=((1.0)*x7455);
IkReal x7463=(gconst142*x7455);
IkReal x7464=(gconst143*x7456);
evalcond[0]=(((r21*x7463))+(((-1.0)*x7458*x7462))+(((-1.0)*r22*x7461)));
evalcond[1]=(sj0+(((-1.0)*r02*x7461))+(((-1.0)*gconst143*r00*x7462))+((r01*x7463)));
evalcond[2]=((((-1.0)*x7459))+(((-1.0)*r12*x7461))+((r11*x7463))+(((-1.0)*gconst143*r10*x7462)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7462))+((x7456*x7458))+(((-1.0)*gconst142*r21*x7461)));
evalcond[4]=((((-1.0)*r02*x7462))+(((-1.0)*x7459*x7460))+((cj0*x7457))+((r00*x7464))+(((-1.0)*gconst142*r01*x7461)));
evalcond[5]=(((r10*x7464))+((sj0*x7457))+(((-1.0)*r12*x7462))+(((-1.0)*gconst142*r11*x7461))+(((-1.0)*sj0*x7460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7465=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7465;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7466=((1.0)*cj5);
IkReal x7467=((((-1.0)*r21*x7466))+(((-1.0)*r20*sj5)));
j4eval[0]=x7467;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x7466)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7468=cj5*cj5;
IkReal x7469=r01*r01;
IkReal x7470=(cj5*r00);
IkReal x7471=(r01*sj5);
IkReal x7472=((((-2.0)*x7470*x7471))+(((-1.0)*x7468*x7469))+(r02*r02)+x7469+((x7468*(r00*r00))));
j4eval[0]=x7472;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7471))+x7470))));
j4eval[2]=IKsign(x7472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7473=cj5*cj5;
IkReal x7474=r01*r01;
IkReal x7475=(r01*sj5);
IkReal x7476=(cj5*r00);
CheckValue<IkReal> x7477 = IKatan2WithCheck(IkReal(((((-1.0)*x7475))+x7476)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7477.valid){
continue;
}
CheckValue<IkReal> x7478=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7473*x7474))+(r02*r02)+x7474+(((-2.0)*x7475*x7476))+((x7473*(r00*r00))))),-1);
if(!x7478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7477.value)+(((1.5707963267949)*(x7478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7479=IKsin(j4);
IkReal x7480=IKcos(j4);
IkReal x7481=(cj5*r10);
IkReal x7482=(r01*sj5);
IkReal x7483=(cj5*r00);
IkReal x7484=(cj5*r20);
IkReal x7485=((1.0)*x7480);
IkReal x7486=((1.0)*x7479);
IkReal x7487=(sj5*x7479);
evalcond[0]=((((-1.0)*r22*x7485))+(((-1.0)*x7484*x7486))+((r21*x7487)));
evalcond[1]=((((-1.0)*x7481*x7486))+((r11*x7487))+(((-1.0)*r12*x7485)));
evalcond[2]=(((x7480*x7483))+(((-1.0)*x7482*x7485))+(((-1.0)*r02*x7486)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7485))+(((-1.0)*x7483*x7486))+((x7479*x7482)));
evalcond[4]=(((x7480*x7484))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7485))+(((-1.0)*r22*x7486)));
evalcond[5]=(((x7480*x7481))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x7486))+(((-1.0)*r11*sj5*x7485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7488=((1.0)*cj5);
CheckValue<IkReal> x7489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7488))+(((-1.0)*r20*sj5)))),-1);
if(!x7489.valid){
continue;
}
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7489.value)))+(x7490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7491=IKsin(j4);
IkReal x7492=IKcos(j4);
IkReal x7493=(cj5*r10);
IkReal x7494=(r01*sj5);
IkReal x7495=(cj5*r00);
IkReal x7496=(cj5*r20);
IkReal x7497=((1.0)*x7492);
IkReal x7498=((1.0)*x7491);
IkReal x7499=(sj5*x7491);
evalcond[0]=((((-1.0)*x7496*x7498))+(((-1.0)*r22*x7497))+((r21*x7499)));
evalcond[1]=(((r11*x7499))+(((-1.0)*x7493*x7498))+(((-1.0)*r12*x7497)));
evalcond[2]=((((-1.0)*x7494*x7497))+((x7492*x7495))+(((-1.0)*r02*x7498)));
evalcond[3]=((1.0)+((x7491*x7494))+(((-1.0)*x7495*x7498))+(((-1.0)*r02*x7497)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7492*x7496))+(((-1.0)*r21*sj5*x7497))+(((-1.0)*r22*x7498)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7492*x7493))+((cj1*cj2))+(((-1.0)*r12*x7498))+(((-1.0)*r11*sj5*x7497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7500 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7500.valid){
continue;
}
CheckValue<IkReal> x7501=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7500.value)+(((1.5707963267949)*(x7501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7502=IKsin(j4);
IkReal x7503=IKcos(j4);
IkReal x7504=(cj5*r10);
IkReal x7505=(r01*sj5);
IkReal x7506=(cj5*r00);
IkReal x7507=(cj5*r20);
IkReal x7508=((1.0)*x7503);
IkReal x7509=((1.0)*x7502);
IkReal x7510=(sj5*x7502);
evalcond[0]=((((-1.0)*r22*x7508))+((r21*x7510))+(((-1.0)*x7507*x7509)));
evalcond[1]=(((r11*x7510))+(((-1.0)*x7504*x7509))+(((-1.0)*r12*x7508)));
evalcond[2]=(((x7503*x7506))+(((-1.0)*r02*x7509))+(((-1.0)*x7505*x7508)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7508))+(((-1.0)*x7506*x7509))+((x7502*x7505)));
evalcond[4]=(((x7503*x7507))+(((-1.0)*r22*x7509))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7508)));
evalcond[5]=(((x7503*x7504))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x7508))+(((-1.0)*r12*x7509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7511=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7511;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7512=((1.0)*cj5);
IkReal x7513=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7512)));
j4eval[0]=x7513;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7512))))));
j4eval[2]=IKsign(x7513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7514=cj5*cj5;
IkReal x7515=r01*r01;
IkReal x7516=(r01*sj5);
IkReal x7517=(cj5*r00);
IkReal x7518=((((-1.0)*x7514*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x7516*x7517))+((x7514*x7515))+(((-1.0)*x7515)));
j4eval[0]=x7518;
j4eval[1]=IKsign(x7518);
j4eval[2]=((IKabs(r02))+(IKabs((x7517+(((-1.0)*x7516))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7519=cj5*cj5;
IkReal x7520=r01*r01;
IkReal x7521=(r01*sj5);
IkReal x7522=(cj5*r00);
CheckValue<IkReal> x7523=IKPowWithIntegerCheck(IKsign((((x7519*x7520))+(((2.0)*x7521*x7522))+(((-1.0)*(r02*r02)))+(((-1.0)*x7519*(r00*r00)))+(((-1.0)*x7520)))),-1);
if(!x7523.valid){
continue;
}
CheckValue<IkReal> x7524 = IKatan2WithCheck(IkReal((x7522+(((-1.0)*x7521)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7523.value)))+(x7524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7525=IKsin(j4);
IkReal x7526=IKcos(j4);
IkReal x7527=(cj5*r10);
IkReal x7528=(r01*sj5);
IkReal x7529=(cj5*r00);
IkReal x7530=(cj5*r20);
IkReal x7531=((1.0)*x7526);
IkReal x7532=((1.0)*x7525);
IkReal x7533=(sj5*x7525);
evalcond[0]=((((-1.0)*r22*x7531))+(((-1.0)*x7530*x7532))+((r21*x7533)));
evalcond[1]=((((-1.0)*x7527*x7532))+(((-1.0)*r12*x7531))+((r11*x7533)));
evalcond[2]=(((x7526*x7529))+(((-1.0)*x7528*x7531))+(((-1.0)*r02*x7532)));
evalcond[3]=((-1.0)+((x7525*x7528))+(((-1.0)*x7529*x7532))+(((-1.0)*r02*x7531)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7531))+((cj1*sj2))+(((-1.0)*r22*x7532))+((x7526*x7530)));
evalcond[5]=(((x7526*x7527))+(((-1.0)*r12*x7532))+(((-1.0)*r11*sj5*x7531))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7534=((1.0)*cj5);
CheckValue<IkReal> x7535 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7535.valid){
continue;
}
CheckValue<IkReal> x7536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7534))+(((-1.0)*r10*sj5)))),-1);
if(!x7536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7535.value)+(((1.5707963267949)*(x7536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7537=IKsin(j4);
IkReal x7538=IKcos(j4);
IkReal x7539=(cj5*r10);
IkReal x7540=(r01*sj5);
IkReal x7541=(cj5*r00);
IkReal x7542=(cj5*r20);
IkReal x7543=((1.0)*x7538);
IkReal x7544=((1.0)*x7537);
IkReal x7545=(sj5*x7537);
evalcond[0]=(((r21*x7545))+(((-1.0)*x7542*x7544))+(((-1.0)*r22*x7543)));
evalcond[1]=((((-1.0)*x7539*x7544))+((r11*x7545))+(((-1.0)*r12*x7543)));
evalcond[2]=((((-1.0)*x7540*x7543))+((x7538*x7541))+(((-1.0)*r02*x7544)));
evalcond[3]=((-1.0)+((x7537*x7540))+(((-1.0)*x7541*x7544))+(((-1.0)*r02*x7543)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7544))+((x7538*x7542))+(((-1.0)*r21*sj5*x7543)));
evalcond[5]=((((-1.0)*r11*sj5*x7543))+((x7538*x7539))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7546=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7546.valid){
continue;
}
CheckValue<IkReal> x7547 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7546.value)))+(x7547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7548=IKsin(j4);
IkReal x7549=IKcos(j4);
IkReal x7550=(cj5*r10);
IkReal x7551=(r01*sj5);
IkReal x7552=(cj5*r00);
IkReal x7553=(cj5*r20);
IkReal x7554=((1.0)*x7549);
IkReal x7555=((1.0)*x7548);
IkReal x7556=(sj5*x7548);
evalcond[0]=(((r21*x7556))+(((-1.0)*r22*x7554))+(((-1.0)*x7553*x7555)));
evalcond[1]=((((-1.0)*x7550*x7555))+(((-1.0)*r12*x7554))+((r11*x7556)));
evalcond[2]=((((-1.0)*x7551*x7554))+((x7549*x7552))+(((-1.0)*r02*x7555)));
evalcond[3]=((-1.0)+((x7548*x7551))+(((-1.0)*x7552*x7555))+(((-1.0)*r02*x7554)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7549*x7553))+(((-1.0)*r22*x7555))+(((-1.0)*r21*sj5*x7554)));
evalcond[5]=((((-1.0)*r11*sj5*x7554))+((x7549*x7550))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7558 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7558)==0){
continue;
}
IkReal x7557=pow(x7558,-0.5);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7559.value));
IkReal gconst145=((-1.0)*r11*x7557);
IkReal gconst146=(r10*x7557);
CheckValue<IkReal> x7560 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7560.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7560.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
IkReal x7561=((-1.0)*(x7563.value));
IkReal x7562=x7557;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7561;
IkReal gconst144=x7561;
IkReal gconst145=((-1.0)*r11*x7562);
IkReal gconst146=(r10*x7562);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7564=((1.0)*gconst146);
CheckValue<IkReal> x7565 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x7564))+(((-1.0)*cj0*r00*x7564))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7565.valid){
continue;
}
CheckValue<IkReal> x7566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7564))+(((-1.0)*gconst145*r20)))),-1);
if(!x7566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7565.value)+(((1.5707963267949)*(x7566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7567=IKsin(j4);
IkReal x7568=IKcos(j4);
IkReal x7569=(gconst146*r10);
IkReal x7570=(cj1*cj2);
IkReal x7571=(gconst145*r11);
IkReal x7572=(gconst146*r20);
IkReal x7573=(gconst146*r00);
IkReal x7574=((1.0)*cj0);
IkReal x7575=(sj1*sj2);
IkReal x7576=((1.0)*x7568);
IkReal x7577=((1.0)*x7567);
IkReal x7578=(gconst145*x7567);
evalcond[0]=((((-1.0)*r22*x7576))+((r21*x7578))+(((-1.0)*x7572*x7577)));
evalcond[1]=(sj0+((r01*x7578))+(((-1.0)*r02*x7576))+(((-1.0)*x7573*x7577)));
evalcond[2]=((((-1.0)*x7574))+((x7567*x7571))+(((-1.0)*x7569*x7577))+(((-1.0)*r12*x7576)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7568*x7572))+(((-1.0)*r22*x7577))+(((-1.0)*gconst145*r21*x7576)));
evalcond[4]=((((-1.0)*gconst145*r01*x7576))+(((-1.0)*x7574*x7575))+((x7568*x7573))+(((-1.0)*r02*x7577))+((cj0*x7570)));
evalcond[5]=((((-1.0)*x7571*x7576))+((x7568*x7569))+(((-1.0)*sj0*x7575))+(((-1.0)*r12*x7577))+((sj0*x7570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
CheckValue<IkReal> x7580=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x7580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7579.value)+(((1.5707963267949)*(x7580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7581=IKsin(j4);
IkReal x7582=IKcos(j4);
IkReal x7583=(gconst146*r10);
IkReal x7584=(cj1*cj2);
IkReal x7585=(gconst145*r11);
IkReal x7586=(gconst146*r20);
IkReal x7587=(gconst146*r00);
IkReal x7588=((1.0)*cj0);
IkReal x7589=(sj1*sj2);
IkReal x7590=((1.0)*x7582);
IkReal x7591=((1.0)*x7581);
IkReal x7592=(gconst145*x7581);
evalcond[0]=((((-1.0)*x7586*x7591))+(((-1.0)*r22*x7590))+((r21*x7592)));
evalcond[1]=(sj0+(((-1.0)*x7587*x7591))+(((-1.0)*r02*x7590))+((r01*x7592)));
evalcond[2]=((((-1.0)*r12*x7590))+(((-1.0)*x7588))+((x7581*x7585))+(((-1.0)*x7583*x7591)));
evalcond[3]=(((cj2*sj1))+((x7582*x7586))+((cj1*sj2))+(((-1.0)*r22*x7591))+(((-1.0)*gconst145*r21*x7590)));
evalcond[4]=(((x7582*x7587))+(((-1.0)*gconst145*r01*x7590))+((cj0*x7584))+(((-1.0)*r02*x7591))+(((-1.0)*x7588*x7589)));
evalcond[5]=(((x7582*x7583))+(((-1.0)*r12*x7591))+(((-1.0)*sj0*x7589))+((sj0*x7584))+(((-1.0)*x7585*x7590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7594 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7594)==0){
continue;
}
IkReal x7593=pow(x7594,-0.5);
CheckValue<IkReal> x7595 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7595.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7595.value))));
IkReal gconst148=((1.0)*r11*x7593);
IkReal gconst149=((-1.0)*r10*x7593);
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7596.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7599 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7599.valid){
continue;
}
IkReal x7597=((1.0)*(x7599.value));
IkReal x7598=x7593;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7597)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7597)));
IkReal gconst148=((1.0)*r11*x7598);
IkReal gconst149=((-1.0)*r10*x7598);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7602 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7602.valid){
continue;
}
IkReal x7600=((1.0)*(x7602.value));
IkReal x7601=x7593;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7600)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7600)));
IkReal gconst148=((1.0)*r11*x7601);
IkReal gconst149=((-1.0)*r10*x7601);
IkReal x7603=r12*r12;
IkReal x7604=(cj0*r02);
IkReal x7605=x7593;
IkReal x7606=(sj0*x7605);
j4eval[0]=((IKabs((((r12*sj0))+x7604)))+(IKabs((((x7603*x7606))+((r12*x7604*x7605))+(((-1.0)*x7606))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7609 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7609.valid){
continue;
}
IkReal x7607=((1.0)*(x7609.value));
IkReal x7608=x7593;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7607)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7607)));
IkReal gconst148=((1.0)*r11*x7608);
IkReal gconst149=((-1.0)*r10*x7608);
IkReal x7610=(cj1*r22*sj2);
IkReal x7611=(cj2*r22*sj1);
IkReal x7612=x7593;
IkReal x7613=(r12*x7612);
j4eval[0]=((IKabs((((x7610*x7613))+((x7611*x7613)))))+(IKabs((x7610+x7611))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7614=(cj2*sj1);
IkReal x7615=(cj1*sj2);
IkReal x7616=(gconst148*r21);
IkReal x7617=((1.0)*gconst149*r20);
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal((((r22*x7614))+((r22*x7615)))),IkReal((((x7615*x7616))+(((-1.0)*x7614*x7617))+(((-1.0)*x7615*x7617))+((x7614*x7616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(x7616*x7616)+(((-2.0)*gconst149*r20*x7616)))),-1);
if(!x7619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7618.value)+(((1.5707963267949)*(x7619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7620=IKsin(j4);
IkReal x7621=IKcos(j4);
IkReal x7622=(cj1*cj2);
IkReal x7623=(gconst148*r11);
IkReal x7624=((1.0)*cj0);
IkReal x7625=(sj1*sj2);
IkReal x7626=((1.0)*x7621);
IkReal x7627=(gconst149*x7621);
IkReal x7628=((1.0)*x7620);
IkReal x7629=(gconst148*x7620);
evalcond[0]=(((r21*x7629))+(((-1.0)*gconst149*r20*x7628))+(((-1.0)*r22*x7626)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x7628))+((r01*x7629))+(((-1.0)*r02*x7626)));
evalcond[2]=((((-1.0)*gconst149*r10*x7628))+((x7620*x7623))+(((-1.0)*r12*x7626))+(((-1.0)*x7624)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7627))+(((-1.0)*gconst148*r21*x7626))+(((-1.0)*r22*x7628)));
evalcond[4]=(((r00*x7627))+(((-1.0)*x7624*x7625))+(((-1.0)*gconst148*r01*x7626))+((cj0*x7622))+(((-1.0)*r02*x7628)));
evalcond[5]=((((-1.0)*x7623*x7626))+(((-1.0)*r12*x7628))+((sj0*x7622))+((r10*x7627))+(((-1.0)*sj0*x7625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7630=((1.0)*gconst149);
CheckValue<IkReal> x7631=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7630)))),-1);
if(!x7631.valid){
continue;
}
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7630))+(((-1.0)*r10*sj0*x7630))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7631.value)))+(x7632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7633=IKsin(j4);
IkReal x7634=IKcos(j4);
IkReal x7635=(cj1*cj2);
IkReal x7636=(gconst148*r11);
IkReal x7637=((1.0)*cj0);
IkReal x7638=(sj1*sj2);
IkReal x7639=((1.0)*x7634);
IkReal x7640=(gconst149*x7634);
IkReal x7641=((1.0)*x7633);
IkReal x7642=(gconst148*x7633);
evalcond[0]=((((-1.0)*gconst149*r20*x7641))+(((-1.0)*r22*x7639))+((r21*x7642)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x7641))+(((-1.0)*r02*x7639))+((r01*x7642)));
evalcond[2]=(((x7633*x7636))+(((-1.0)*x7637))+(((-1.0)*gconst149*r10*x7641))+(((-1.0)*r12*x7639)));
evalcond[3]=((((-1.0)*r22*x7641))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7639))+((r20*x7640)));
evalcond[4]=((((-1.0)*gconst148*r01*x7639))+(((-1.0)*r02*x7641))+(((-1.0)*x7637*x7638))+((cj0*x7635))+((r00*x7640)));
evalcond[5]=((((-1.0)*sj0*x7638))+(((-1.0)*x7636*x7639))+(((-1.0)*r12*x7641))+((r10*x7640))+((sj0*x7635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7643=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7643.valid){
continue;
}
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7643.value)))+(x7644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7645=IKsin(j4);
IkReal x7646=IKcos(j4);
IkReal x7647=(cj1*cj2);
IkReal x7648=(gconst148*r11);
IkReal x7649=((1.0)*cj0);
IkReal x7650=(sj1*sj2);
IkReal x7651=((1.0)*x7646);
IkReal x7652=(gconst149*x7646);
IkReal x7653=((1.0)*x7645);
IkReal x7654=(gconst148*x7645);
evalcond[0]=((((-1.0)*r22*x7651))+((r21*x7654))+(((-1.0)*gconst149*r20*x7653)));
evalcond[1]=(sj0+(((-1.0)*r02*x7651))+(((-1.0)*gconst149*r00*x7653))+((r01*x7654)));
evalcond[2]=((((-1.0)*gconst149*r10*x7653))+((x7645*x7648))+(((-1.0)*x7649))+(((-1.0)*r12*x7651)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7653))+(((-1.0)*gconst148*r21*x7651))+((cj1*sj2))+((r20*x7652)));
evalcond[4]=((((-1.0)*x7649*x7650))+(((-1.0)*r02*x7653))+(((-1.0)*gconst148*r01*x7651))+((r00*x7652))+((cj0*x7647)));
evalcond[5]=(((sj0*x7647))+(((-1.0)*x7648*x7651))+((r10*x7652))+(((-1.0)*r12*x7653))+(((-1.0)*sj0*x7650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7655=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7655;
j4eval[1]=IKsign(x7655);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7656=((1.0)*cj5);
IkReal x7657=((((-1.0)*r21*x7656))+(((-1.0)*r20*sj5)));
j4eval[0]=x7657;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7656))+((r01*sj5))))));
j4eval[2]=IKsign(x7657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7658=cj5*cj5;
IkReal x7659=r11*r11;
IkReal x7660=(cj5*r10);
IkReal x7661=(r11*sj5);
IkReal x7662=((((-1.0)*x7658*(r10*r10)))+((x7658*x7659))+(((2.0)*x7660*x7661))+(((-1.0)*(r12*r12)))+(((-1.0)*x7659)));
j4eval[0]=x7662;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7661))+x7660))));
j4eval[2]=IKsign(x7662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7663=cj5*cj5;
IkReal x7664=r11*r11;
IkReal x7665=(cj5*r10);
IkReal x7666=(r11*sj5);
CheckValue<IkReal> x7667=IKPowWithIntegerCheck(IKsign(((((2.0)*x7665*x7666))+(((-1.0)*x7663*(r10*r10)))+(((-1.0)*(r12*r12)))+((x7663*x7664))+(((-1.0)*x7664)))),-1);
if(!x7667.valid){
continue;
}
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal(((((-1.0)*x7666))+x7665)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7667.value)))+(x7668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7669=IKsin(j4);
IkReal x7670=IKcos(j4);
IkReal x7671=(cj5*r10);
IkReal x7672=(r01*sj5);
IkReal x7673=(cj5*r00);
IkReal x7674=(cj5*r20);
IkReal x7675=((1.0)*x7670);
IkReal x7676=((1.0)*x7669);
IkReal x7677=(sj5*x7669);
evalcond[0]=((((-1.0)*x7674*x7676))+((r21*x7677))+(((-1.0)*r22*x7675)));
evalcond[1]=(((x7669*x7672))+(((-1.0)*r02*x7675))+(((-1.0)*x7673*x7676)));
evalcond[2]=((((-1.0)*r11*sj5*x7675))+(((-1.0)*r12*x7676))+((x7670*x7671)));
evalcond[3]=((-1.0)+((r11*x7677))+(((-1.0)*r12*x7675))+(((-1.0)*x7671*x7676)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7675))+((x7670*x7674))+(((-1.0)*r22*x7676)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7676))+((cj1*cj2))+(((-1.0)*x7672*x7675))+((x7670*x7673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7678=((1.0)*cj5);
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7678))+(((-1.0)*r20*sj5)))),-1);
if(!x7679.valid){
continue;
}
CheckValue<IkReal> x7680 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7679.value)))+(x7680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7681=IKsin(j4);
IkReal x7682=IKcos(j4);
IkReal x7683=(cj5*r10);
IkReal x7684=(r01*sj5);
IkReal x7685=(cj5*r00);
IkReal x7686=(cj5*r20);
IkReal x7687=((1.0)*x7682);
IkReal x7688=((1.0)*x7681);
IkReal x7689=(sj5*x7681);
evalcond[0]=((((-1.0)*r22*x7687))+(((-1.0)*x7686*x7688))+((r21*x7689)));
evalcond[1]=(((x7681*x7684))+(((-1.0)*x7685*x7688))+(((-1.0)*r02*x7687)));
evalcond[2]=((((-1.0)*r11*sj5*x7687))+(((-1.0)*r12*x7688))+((x7682*x7683)));
evalcond[3]=((-1.0)+((r11*x7689))+(((-1.0)*r12*x7687))+(((-1.0)*x7683*x7688)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7687))+((cj1*sj2))+(((-1.0)*r22*x7688))+((x7682*x7686)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x7684*x7687))+((x7682*x7685))+(((-1.0)*r02*x7688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7690 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7690.valid){
continue;
}
CheckValue<IkReal> x7691=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7690.value)+(((1.5707963267949)*(x7691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7692=IKsin(j4);
IkReal x7693=IKcos(j4);
IkReal x7694=(cj5*r10);
IkReal x7695=(r01*sj5);
IkReal x7696=(cj5*r00);
IkReal x7697=(cj5*r20);
IkReal x7698=((1.0)*x7693);
IkReal x7699=((1.0)*x7692);
IkReal x7700=(sj5*x7692);
evalcond[0]=(((r21*x7700))+(((-1.0)*r22*x7698))+(((-1.0)*x7697*x7699)));
evalcond[1]=((((-1.0)*r02*x7698))+((x7692*x7695))+(((-1.0)*x7696*x7699)));
evalcond[2]=(((x7693*x7694))+(((-1.0)*r11*sj5*x7698))+(((-1.0)*r12*x7699)));
evalcond[3]=((-1.0)+((r11*x7700))+(((-1.0)*r12*x7698))+(((-1.0)*x7694*x7699)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7698))+((x7693*x7697))+(((-1.0)*r22*x7699)));
evalcond[5]=((((-1.0)*r02*x7699))+(((-1.0)*x7695*x7698))+(((-1.0)*sj1*sj2))+((x7693*x7696))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7701=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7701;
j4eval[1]=IKsign(x7701);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7702=((1.0)*cj5);
IkReal x7703=((((-1.0)*r01*x7702))+(((-1.0)*r00*sj5)));
j4eval[0]=x7703;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7702)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7704=cj5*cj5;
IkReal x7705=r11*r11;
IkReal x7706=(r11*sj5);
IkReal x7707=(cj5*r10);
IkReal x7708=((r12*r12)+(((-2.0)*x7706*x7707))+(((-1.0)*x7704*x7705))+((x7704*(r10*r10)))+x7705);
j4eval[0]=x7708;
j4eval[1]=IKsign(x7708);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7706))+x7707))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7709=cj5*cj5;
IkReal x7710=r11*r11;
IkReal x7711=(cj5*r10);
IkReal x7712=(r11*sj5);
CheckValue<IkReal> x7713 = IKatan2WithCheck(IkReal(((((-1.0)*x7712))+x7711)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7713.valid){
continue;
}
CheckValue<IkReal> x7714=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7709*(r10*r10)))+(((-2.0)*x7711*x7712))+(((-1.0)*x7709*x7710))+x7710)),-1);
if(!x7714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7713.value)+(((1.5707963267949)*(x7714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7715=IKsin(j4);
IkReal x7716=IKcos(j4);
IkReal x7717=(cj5*r10);
IkReal x7718=(r01*sj5);
IkReal x7719=(cj5*r00);
IkReal x7720=(cj5*r20);
IkReal x7721=((1.0)*x7716);
IkReal x7722=((1.0)*x7715);
IkReal x7723=(sj5*x7715);
evalcond[0]=(((r21*x7723))+(((-1.0)*x7720*x7722))+(((-1.0)*r22*x7721)));
evalcond[1]=((((-1.0)*r02*x7721))+(((-1.0)*x7719*x7722))+((x7715*x7718)));
evalcond[2]=((((-1.0)*r11*sj5*x7721))+((x7716*x7717))+(((-1.0)*r12*x7722)));
evalcond[3]=((1.0)+((r11*x7723))+(((-1.0)*x7717*x7722))+(((-1.0)*r12*x7721)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7716*x7720))+(((-1.0)*r21*sj5*x7721))+(((-1.0)*r22*x7722)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7722))+(((-1.0)*x7718*x7721))+((x7716*x7719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7724=((1.0)*cj5);
CheckValue<IkReal> x7725 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7725.valid){
continue;
}
CheckValue<IkReal> x7726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7724))+(((-1.0)*r00*sj5)))),-1);
if(!x7726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7725.value)+(((1.5707963267949)*(x7726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7727=IKsin(j4);
IkReal x7728=IKcos(j4);
IkReal x7729=(cj5*r10);
IkReal x7730=(r01*sj5);
IkReal x7731=(cj5*r00);
IkReal x7732=(cj5*r20);
IkReal x7733=((1.0)*x7728);
IkReal x7734=((1.0)*x7727);
IkReal x7735=(sj5*x7727);
evalcond[0]=((((-1.0)*x7732*x7734))+((r21*x7735))+(((-1.0)*r22*x7733)));
evalcond[1]=((((-1.0)*x7731*x7734))+((x7727*x7730))+(((-1.0)*r02*x7733)));
evalcond[2]=((((-1.0)*r11*sj5*x7733))+((x7728*x7729))+(((-1.0)*r12*x7734)));
evalcond[3]=((1.0)+((r11*x7735))+(((-1.0)*r12*x7733))+(((-1.0)*x7729*x7734)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7733))+((cj1*sj2))+(((-1.0)*r22*x7734))+((x7728*x7732)));
evalcond[5]=((((-1.0)*x7730*x7733))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7728*x7731))+(((-1.0)*r02*x7734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7736=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7736.value)))+(x7737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7738=IKsin(j4);
IkReal x7739=IKcos(j4);
IkReal x7740=(cj5*r10);
IkReal x7741=(r01*sj5);
IkReal x7742=(cj5*r00);
IkReal x7743=(cj5*r20);
IkReal x7744=((1.0)*x7739);
IkReal x7745=((1.0)*x7738);
IkReal x7746=(sj5*x7738);
evalcond[0]=((((-1.0)*r22*x7744))+(((-1.0)*x7743*x7745))+((r21*x7746)));
evalcond[1]=((((-1.0)*x7742*x7745))+(((-1.0)*r02*x7744))+((x7738*x7741)));
evalcond[2]=((((-1.0)*r12*x7745))+(((-1.0)*r11*sj5*x7744))+((x7739*x7740)));
evalcond[3]=((1.0)+(((-1.0)*x7740*x7745))+(((-1.0)*r12*x7744))+((r11*x7746)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7745))+(((-1.0)*r21*sj5*x7744))+((cj1*sj2))+((x7739*x7743)));
evalcond[5]=((((-1.0)*r02*x7745))+(((-1.0)*x7741*x7744))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7739*x7742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7747=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7747);
rxp0_2=(py*r00);
rxp1_0=(r21*x7747);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7748=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7748);
rxp0_2=(py*r00);
rxp1_0=(r21*x7748);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7749=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7749);
rxp0_2=(py*r00);
rxp1_0=(r21*x7749);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7752.valid){
continue;
}
IkReal x7750=x7752.value;
IkReal x7751=(cj0*x7750);
cj4array[0]=(((sj1*sj2*x7751))+(((-1.0)*cj1*cj2*x7751)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7753=IKsin(j4);
IkReal x7754=IKcos(j4);
IkReal x7755=(r21*sj5);
IkReal x7756=((1.0)*x7754);
IkReal x7757=((1.0)*cj5*x7753);
evalcond[0]=((-1.0)*r12*x7753);
evalcond[1]=((((-1.0)*r12*x7756))+(((-1.0)*cj0)));
evalcond[2]=(((x7753*x7755))+(((-1.0)*r20*x7757)));
evalcond[3]=((((-1.0)*r00*x7757))+((r01*sj5*x7753)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7755*x7756))+((cj1*sj2))+((cj5*r20*x7754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7760=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7760.valid){
continue;
}
IkReal x7758=x7760.value;
IkReal x7759=((1.0)*x7758);
cj4array[0]=((((-1.0)*cj2*sj1*x7759))+(((-1.0)*cj1*sj2*x7759)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7761=IKsin(j4);
IkReal x7762=IKcos(j4);
IkReal x7763=(cj5*r00);
IkReal x7764=((1.0)*cj0);
IkReal x7765=((1.0)*x7761);
IkReal x7766=(sj5*x7761);
IkReal x7767=((1.0)*x7762);
evalcond[0]=((-1.0)*r12*x7761);
evalcond[1]=((((-1.0)*r12*x7767))+(((-1.0)*x7764)));
evalcond[2]=(((r21*x7766))+(((-1.0)*cj5*r20*x7765)));
evalcond[3]=((((-1.0)*x7763*x7765))+((r01*x7766)));
evalcond[4]=((((-1.0)*r01*sj5*x7767))+(((-1.0)*sj1*sj2*x7764))+((cj0*cj1*cj2))+((x7762*x7763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7768=IKPowWithIntegerCheck(r12,-1);
if(!x7768.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7768.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7769=IKsin(j4);
IkReal x7770=IKcos(j4);
IkReal x7771=(cj5*r00);
IkReal x7772=(r21*sj5);
IkReal x7773=(cj5*r20);
IkReal x7774=(r01*sj5);
IkReal x7775=((1.0)*x7769);
IkReal x7776=((1.0)*x7770);
evalcond[0]=((-1.0)*r12*x7769);
evalcond[1]=(((x7769*x7772))+(((-1.0)*x7773*x7775)));
evalcond[2]=((((-1.0)*x7771*x7775))+((x7769*x7774)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7772*x7776))+((x7770*x7773))+((cj1*sj2)));
evalcond[4]=(((x7770*x7771))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x7774*x7776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7777=((1.0)*cj5);
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7777))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
CheckValue<IkReal> x7779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7777))+(((-1.0)*r20*sj5)))),-1);
if(!x7779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7778.value)+(((1.5707963267949)*(x7779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7780=IKsin(j4);
IkReal x7781=IKcos(j4);
IkReal x7782=(cj1*cj2);
IkReal x7783=(cj5*r10);
IkReal x7784=(r01*sj5);
IkReal x7785=(cj5*r00);
IkReal x7786=(cj5*r20);
IkReal x7787=((1.0)*cj0);
IkReal x7788=(sj1*sj2);
IkReal x7789=((1.0)*x7781);
IkReal x7790=((1.0)*x7780);
IkReal x7791=(sj5*x7780);
evalcond[0]=((((-1.0)*x7786*x7790))+((r21*x7791))+(((-1.0)*r22*x7789)));
evalcond[1]=(sj0+((x7780*x7784))+(((-1.0)*r02*x7789))+(((-1.0)*x7785*x7790)));
evalcond[2]=((((-1.0)*x7783*x7790))+(((-1.0)*x7787))+((r11*x7791))+(((-1.0)*r12*x7789)));
evalcond[3]=((((-1.0)*r22*x7790))+((cj2*sj1))+((x7781*x7786))+((cj1*sj2))+(((-1.0)*r21*sj5*x7789)));
evalcond[4]=((((-1.0)*x7784*x7789))+((x7781*x7785))+(((-1.0)*x7787*x7788))+(((-1.0)*r02*x7790))+((cj0*x7782)));
evalcond[5]=(((sj0*x7782))+((x7781*x7783))+(((-1.0)*r12*x7790))+(((-1.0)*r11*sj5*x7789))+(((-1.0)*sj0*x7788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7792=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7792.valid){
continue;
}
CheckValue<IkReal> x7793 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7792.value)))+(x7793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7794=IKsin(j4);
IkReal x7795=IKcos(j4);
IkReal x7796=(cj1*cj2);
IkReal x7797=(cj5*r10);
IkReal x7798=(r01*sj5);
IkReal x7799=(cj5*r00);
IkReal x7800=(cj5*r20);
IkReal x7801=((1.0)*cj0);
IkReal x7802=(sj1*sj2);
IkReal x7803=((1.0)*x7795);
IkReal x7804=((1.0)*x7794);
IkReal x7805=(sj5*x7794);
evalcond[0]=(((r21*x7805))+(((-1.0)*r22*x7803))+(((-1.0)*x7800*x7804)));
evalcond[1]=(sj0+(((-1.0)*r02*x7803))+((x7794*x7798))+(((-1.0)*x7799*x7804)));
evalcond[2]=(((r11*x7805))+(((-1.0)*r12*x7803))+(((-1.0)*x7797*x7804))+(((-1.0)*x7801)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7803))+((cj1*sj2))+(((-1.0)*r22*x7804))+((x7795*x7800)));
evalcond[4]=((((-1.0)*x7801*x7802))+(((-1.0)*r02*x7804))+((x7795*x7799))+(((-1.0)*x7798*x7803))+((cj0*x7796)));
evalcond[5]=((((-1.0)*r12*x7804))+(((-1.0)*sj0*x7802))+((x7795*x7797))+(((-1.0)*r11*sj5*x7803))+((sj0*x7796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7806=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7806.valid){
continue;
}
CheckValue<IkReal> x7807 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7806.value)))+(x7807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7808=IKsin(j4);
IkReal x7809=IKcos(j4);
IkReal x7810=(cj1*cj2);
IkReal x7811=(cj5*r10);
IkReal x7812=(r01*sj5);
IkReal x7813=(cj5*r00);
IkReal x7814=(cj5*r20);
IkReal x7815=((1.0)*cj0);
IkReal x7816=(sj1*sj2);
IkReal x7817=((1.0)*x7809);
IkReal x7818=((1.0)*x7808);
IkReal x7819=(sj5*x7808);
evalcond[0]=((((-1.0)*x7814*x7818))+(((-1.0)*r22*x7817))+((r21*x7819)));
evalcond[1]=(sj0+(((-1.0)*r02*x7817))+((x7808*x7812))+(((-1.0)*x7813*x7818)));
evalcond[2]=((((-1.0)*x7811*x7818))+((r11*x7819))+(((-1.0)*x7815))+(((-1.0)*r12*x7817)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7817))+((cj1*sj2))+(((-1.0)*r22*x7818))+((x7809*x7814)));
evalcond[4]=((((-1.0)*x7812*x7817))+(((-1.0)*r02*x7818))+((x7809*x7813))+(((-1.0)*x7815*x7816))+((cj0*x7810)));
evalcond[5]=((((-1.0)*sj0*x7816))+((sj0*x7810))+(((-1.0)*r12*x7818))+((x7809*x7811))+(((-1.0)*r11*sj5*x7817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7820=cj5*cj5;
IkReal x7821=r21*r21;
IkReal x7822=(cj2*sj1);
IkReal x7823=(cj1*sj2);
IkReal x7824=(r21*sj5);
IkReal x7825=((1.0)*cj5*r20);
CheckValue<IkReal> x7826 = IKatan2WithCheck(IkReal((((r22*x7823))+((r22*x7822)))),IkReal(((((-1.0)*x7823*x7825))+((x7823*x7824))+(((-1.0)*x7822*x7825))+((x7822*x7824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7826.valid){
continue;
}
CheckValue<IkReal> x7827=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x7820*(r20*r20)))+(((-1.0)*x7820*x7821))+x7821+(((-2.0)*cj5*r20*x7824)))),-1);
if(!x7827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7826.value)+(((1.5707963267949)*(x7827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7828=IKsin(j4);
IkReal x7829=IKcos(j4);
IkReal x7830=(r21*sj5);
IkReal x7831=(cj5*r20);
IkReal x7832=((1.0)*x7829);
IkReal x7833=((1.0)*x7828);
evalcond[0]=((((-1.0)*r22*x7832))+(((-1.0)*x7831*x7833))+((x7828*x7830)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x7833))+((cj1*sj2))+(((-1.0)*x7830*x7832))+((x7829*x7831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7834=(cj5*sj4);
IkReal x7835=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x7835))+((r00*x7834))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x7834))+(((-1.0)*cj4*r12))+((r11*x7835)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x7835))+((r00*x7834))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x7834))+(((-1.0)*cj4*r12))+((r11*x7835))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x7835))+((r00*x7834))+((cj4*r02))), ((((-1.0)*r10*x7834))+(((-1.0)*cj4*r12))+((r11*x7835))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7836=IKcos(j0);
IkReal x7837=IKsin(j0);
IkReal x7838=(cj4*cj5);
IkReal x7839=(cj5*r01);
IkReal x7840=((1.0)*sj1);
IkReal x7841=(r11*sj5);
IkReal x7842=(cj1*cj2);
IkReal x7843=((1.0)*cj5);
IkReal x7844=(r10*sj5);
IkReal x7845=((1.0)*sj4);
IkReal x7846=(r00*sj5);
IkReal x7847=((1.0)*cj4);
IkReal x7848=(r01*sj5);
IkReal x7849=((0.612)*cj1);
IkReal x7850=(sj2*x7837);
IkReal x7851=(sj1*x7836);
IkReal x7852=(sj2*x7836);
evalcond[0]=((((-1.0)*r00*sj4*x7843))+x7837+((sj4*x7848))+(((-1.0)*r02*x7847)));
evalcond[1]=((((-1.0)*r12*x7847))+((sj4*x7841))+(((-1.0)*x7836))+(((-1.0)*r10*sj4*x7843)));
evalcond[2]=(((cj2*x7851))+(((-1.0)*x7846))+(((-1.0)*x7839))+((cj1*x7852)));
evalcond[3]=(((cj2*sj1*x7837))+(((-1.0)*x7844))+(((-1.0)*r11*x7843))+((cj1*x7850)));
evalcond[4]=(((x7836*x7842))+((r00*x7838))+(((-1.0)*r02*x7845))+(((-1.0)*x7847*x7848))+(((-1.0)*x7840*x7852)));
evalcond[5]=(((r10*x7838))+(((-1.0)*x7841*x7847))+(((-1.0)*r12*x7845))+((x7837*x7842))+(((-1.0)*x7840*x7850)));
evalcond[6]=((((-0.5723)*x7836*x7842))+(((0.163941)*x7837))+(((-1.0)*px))+(((0.5723)*sj2*x7851))+(((-0.1157)*x7839))+(((-1.0)*x7836*x7849))+(((-0.1157)*x7846)));
evalcond[7]=((((-1.0)*x7837*x7849))+(((-0.5723)*x7837*x7842))+(((-0.163941)*x7836))+(((-1.0)*py))+(((-0.1157)*x7844))+(((-0.1157)*cj5*r11))+(((0.5723)*sj1*x7850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7853=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7853.valid){
continue;
}
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7853.value)))+(x7854.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7855=IKcos(j0);
IkReal x7856=IKsin(j0);
IkReal x7857=(cj5*r01);
IkReal x7858=(cj5*r11);
IkReal x7859=(r10*sj5);
IkReal x7860=(r00*sj5);
IkReal x7861=((0.5723)*sj1*sj2);
IkReal x7862=(cj2*x7855);
IkReal x7863=(cj1*x7856);
IkReal x7864=(cj1*x7855);
evalcond[0]=(((sj2*x7864))+(((-1.0)*x7860))+((sj1*x7862))+(((-1.0)*x7857)));
evalcond[1]=(((sj2*x7863))+((cj2*sj1*x7856))+(((-1.0)*x7859))+(((-1.0)*x7858)));
evalcond[2]=((((-0.1157)*x7857))+(((-0.1157)*x7860))+(((0.163941)*x7856))+(((-1.0)*px))+((x7855*x7861))+(((-0.612)*x7864))+(((-0.5723)*cj1*x7862)));
evalcond[3]=((((-0.1157)*x7859))+(((-0.1157)*x7858))+(((-0.163941)*x7855))+((x7856*x7861))+(((-1.0)*py))+(((-0.5723)*cj2*x7863))+(((-0.612)*x7863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7865=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7865;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7866=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7866;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7867=((1.0)*cj5);
IkReal x7868=((((-1.0)*r21*x7867))+(((-1.0)*r20*sj5)));
j4eval[0]=x7868;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7867))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7867))))));
j4eval[2]=IKsign(x7868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7869=((-1.0)*r20);
IkReal x7871 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7871)==0){
continue;
}
IkReal x7870=pow(x7871,-0.5);
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7869),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7872.value));
IkReal gconst133=(r21*x7870);
IkReal gconst134=(x7869*x7870);
CheckValue<IkReal> x7873 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7873.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7873.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7874=((-1.0)*r20);
IkReal x7875=x7870;
CheckValue<IkReal> x7877 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7874),IKFAST_ATAN2_MAGTHRESH);
if(!x7877.valid){
continue;
}
IkReal x7876=((-1.0)*(x7877.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7876;
IkReal gconst132=x7876;
IkReal gconst133=(r21*x7875);
IkReal gconst134=(x7874*x7875);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7878=((-1.0)*r20);
IkReal x7879=x7870;
CheckValue<IkReal> x7881 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7878),IKFAST_ATAN2_MAGTHRESH);
if(!x7881.valid){
continue;
}
IkReal x7880=((-1.0)*(x7881.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7880;
IkReal gconst132=x7880;
IkReal gconst133=(r21*x7879);
IkReal gconst134=(x7878*x7879);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7882=((-1.0)*r20);
IkReal x7883=x7870;
CheckValue<IkReal> x7885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7882),IKFAST_ATAN2_MAGTHRESH);
if(!x7885.valid){
continue;
}
IkReal x7884=((-1.0)*(x7885.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7884;
IkReal gconst132=x7884;
IkReal gconst133=(r21*x7883);
IkReal gconst134=(x7882*x7883);
IkReal x7886=r22*r22;
CheckValue<IkReal> x7889=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7886))),-1);
if(!x7889.valid){
continue;
}
IkReal x7887=x7889.value;
IkReal x7888=((((2.0)*x7887*(r20*r20)*(r21*r21)))+x7886+((x7887*(r21*r21*r21*r21)))+((x7887*(r20*r20*r20*r20))));
j4eval[0]=x7888;
j4eval[1]=IKsign(x7888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7890=(gconst133*r21);
IkReal x7891=(cj1*sj2);
IkReal x7892=(gconst134*r20);
IkReal x7893=(cj2*sj1);
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7892*x7892)+(x7890*x7890)+(((-2.0)*x7890*x7892)))),-1);
if(!x7894.valid){
continue;
}
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal((((r22*x7891))+((r22*x7893)))),IkReal((((x7890*x7893))+((x7890*x7891))+(((-1.0)*x7892*x7893))+(((-1.0)*x7891*x7892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7894.value)))+(x7895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7896=IKsin(j4);
IkReal x7897=IKcos(j4);
IkReal x7898=(cj1*cj2);
IkReal x7899=(gconst133*r11);
IkReal x7900=(gconst133*r21);
IkReal x7901=(gconst133*r01);
IkReal x7902=((1.0)*cj0);
IkReal x7903=(sj1*sj2);
IkReal x7904=((1.0)*x7897);
IkReal x7905=(gconst134*x7897);
IkReal x7906=((1.0)*x7896);
evalcond[0]=((((-1.0)*gconst134*r20*x7906))+(((-1.0)*r22*x7904))+((x7896*x7900)));
evalcond[1]=(sj0+(((-1.0)*gconst134*r00*x7906))+((x7896*x7901))+(((-1.0)*r02*x7904)));
evalcond[2]=((((-1.0)*r12*x7904))+((x7896*x7899))+(((-1.0)*x7902))+(((-1.0)*gconst134*r10*x7906)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7906))+(((-1.0)*x7900*x7904))+((r20*x7905)));
evalcond[4]=(((cj0*x7898))+((r00*x7905))+(((-1.0)*x7902*x7903))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7906)));
evalcond[5]=((((-1.0)*r12*x7906))+((r10*x7905))+(((-1.0)*x7899*x7904))+(((-1.0)*sj0*x7903))+((sj0*x7898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7907=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7907.valid){
continue;
}
CheckValue<IkReal> x7908 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7907.value)))+(x7908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7909=IKsin(j4);
IkReal x7910=IKcos(j4);
IkReal x7911=(cj1*cj2);
IkReal x7912=(gconst133*r11);
IkReal x7913=(gconst133*r21);
IkReal x7914=(gconst133*r01);
IkReal x7915=((1.0)*cj0);
IkReal x7916=(sj1*sj2);
IkReal x7917=((1.0)*x7910);
IkReal x7918=(gconst134*x7910);
IkReal x7919=((1.0)*x7909);
evalcond[0]=((((-1.0)*r22*x7917))+(((-1.0)*gconst134*r20*x7919))+((x7909*x7913)));
evalcond[1]=(sj0+(((-1.0)*r02*x7917))+(((-1.0)*gconst134*r00*x7919))+((x7909*x7914)));
evalcond[2]=((((-1.0)*gconst134*r10*x7919))+(((-1.0)*x7915))+(((-1.0)*r12*x7917))+((x7909*x7912)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7913*x7917))+(((-1.0)*r22*x7919))+((r20*x7918)));
evalcond[4]=((((-1.0)*x7915*x7916))+(((-1.0)*r02*x7919))+(((-1.0)*x7914*x7917))+((r00*x7918))+((cj0*x7911)));
evalcond[5]=(((sj0*x7911))+(((-1.0)*sj0*x7916))+((r10*x7918))+(((-1.0)*x7912*x7917))+(((-1.0)*r12*x7919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
CheckValue<IkReal> x7921=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7920.value)+(((1.5707963267949)*(x7921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7922=IKsin(j4);
IkReal x7923=IKcos(j4);
IkReal x7924=(cj1*cj2);
IkReal x7925=(gconst133*r11);
IkReal x7926=(gconst133*r21);
IkReal x7927=(gconst133*r01);
IkReal x7928=((1.0)*cj0);
IkReal x7929=(sj1*sj2);
IkReal x7930=((1.0)*x7923);
IkReal x7931=(gconst134*x7923);
IkReal x7932=((1.0)*x7922);
evalcond[0]=((((-1.0)*r22*x7930))+((x7922*x7926))+(((-1.0)*gconst134*r20*x7932)));
evalcond[1]=(sj0+(((-1.0)*r02*x7930))+((x7922*x7927))+(((-1.0)*gconst134*r00*x7932)));
evalcond[2]=((((-1.0)*x7928))+(((-1.0)*gconst134*r10*x7932))+(((-1.0)*r12*x7930))+((x7922*x7925)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7926*x7930))+(((-1.0)*r22*x7932))+((r20*x7931))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x7927*x7930))+(((-1.0)*r02*x7932))+(((-1.0)*x7928*x7929))+((r00*x7931))+((cj0*x7924)));
evalcond[5]=((((-1.0)*sj0*x7929))+(((-1.0)*r12*x7932))+(((-1.0)*x7925*x7930))+((r10*x7931))+((sj0*x7924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7933=((-1.0)*r21);
IkReal x7935 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7935)==0){
continue;
}
IkReal x7934=pow(x7935,-0.5);
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal(x7933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7936.value))));
IkReal gconst136=(x7933*x7934);
IkReal gconst137=((1.0)*r20*x7934);
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7937.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7938=((-1.0)*r21);
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(x7938),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
IkReal x7939=((1.0)*(x7941.value));
IkReal x7940=x7934;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7939)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7939)));
IkReal gconst136=(x7938*x7940);
IkReal gconst137=((1.0)*r20*x7940);
IkReal x7942=r22*r22;
IkReal x7943=((1.0)*x7942);
CheckValue<IkReal> x7947=IKPowWithIntegerCheck(((-1.0)+x7942),-1);
if(!x7947.valid){
continue;
}
IkReal x7944=x7947.value;
if((((1.0)+(((-1.0)*x7943)))) < -0.00001)
continue;
IkReal x7945=IKsqrt(((1.0)+(((-1.0)*x7943))));
IkReal x7946=(sj0*x7944*x7945);
j4eval[0]=((IKabs((x7946+(((-1.0)*x7943*x7946)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7948=((-1.0)*r21);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(x7948),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
IkReal x7949=((1.0)*(x7951.value));
IkReal x7950=x7934;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7949)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7949)));
IkReal gconst136=(x7948*x7950);
IkReal gconst137=((1.0)*r20*x7950);
IkReal x7952=r22*r22;
IkReal x7953=((1.0)*x7952);
CheckValue<IkReal> x7957=IKPowWithIntegerCheck(((-1.0)+x7952),-1);
if(!x7957.valid){
continue;
}
IkReal x7954=x7957.value;
if((((1.0)+(((-1.0)*x7953)))) < -0.00001)
continue;
IkReal x7955=IKsqrt(((1.0)+(((-1.0)*x7953))));
IkReal x7956=(cj0*x7954*x7955);
j4eval[0]=((IKabs(((((-1.0)*x7953*x7956))+x7956)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7958=((-1.0)*r21);
CheckValue<IkReal> x7961 = IKatan2WithCheck(IkReal(x7958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7961.valid){
continue;
}
IkReal x7959=((1.0)*(x7961.value));
IkReal x7960=x7934;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7959)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7959)));
IkReal gconst136=(x7958*x7960);
IkReal gconst137=((1.0)*r20*x7960);
IkReal x7962=r22*r22;
IkReal x7963=(cj0*r02);
IkReal x7964=(r12*sj0);
CheckValue<IkReal> x7968=IKPowWithIntegerCheck(((-1.0)+x7962),-1);
if(!x7968.valid){
continue;
}
IkReal x7965=x7968.value;
if((((1.0)+(((-1.0)*x7962)))) < -0.00001)
continue;
IkReal x7966=IKsqrt(((1.0)+(((-1.0)*x7962))));
IkReal x7967=((1.0)*r22*x7965*x7966);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7963*x7967))+(((-1.0)*x7964*x7967)))))+(IKabs((x7963+x7964))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7969=((1.0)*gconst137);
CheckValue<IkReal> x7970 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7969))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*r10*sj0*x7969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7970.valid){
continue;
}
CheckValue<IkReal> x7971=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x7969)))),-1);
if(!x7971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7970.value)+(((1.5707963267949)*(x7971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7972=IKsin(j4);
IkReal x7973=IKcos(j4);
IkReal x7974=(gconst136*r01);
IkReal x7975=(gconst137*r10);
IkReal x7976=(cj1*cj2);
IkReal x7977=(gconst137*r20);
IkReal x7978=(gconst136*r11);
IkReal x7979=(gconst136*r21);
IkReal x7980=(gconst137*r00);
IkReal x7981=((1.0)*cj0);
IkReal x7982=(sj1*sj2);
IkReal x7983=((1.0)*x7973);
IkReal x7984=((1.0)*x7972);
evalcond[0]=((((-1.0)*r22*x7983))+((x7972*x7979))+(((-1.0)*x7977*x7984)));
evalcond[1]=(sj0+(((-1.0)*x7980*x7984))+((x7972*x7974))+(((-1.0)*r02*x7983)));
evalcond[2]=((((-1.0)*r12*x7983))+((x7972*x7978))+(((-1.0)*x7981))+(((-1.0)*x7975*x7984)));
evalcond[3]=((((-1.0)*r22*x7984))+((cj2*sj1))+(((-1.0)*x7979*x7983))+((x7973*x7977))+((cj1*sj2)));
evalcond[4]=(((x7973*x7980))+(((-1.0)*x7981*x7982))+((cj0*x7976))+(((-1.0)*x7974*x7983))+(((-1.0)*r02*x7984)));
evalcond[5]=((((-1.0)*r12*x7984))+((x7973*x7975))+(((-1.0)*x7978*x7983))+(((-1.0)*sj0*x7982))+((sj0*x7976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7985 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7985.valid){
continue;
}
CheckValue<IkReal> x7986=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7985.value)+(((1.5707963267949)*(x7986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7987=IKsin(j4);
IkReal x7988=IKcos(j4);
IkReal x7989=(gconst136*r01);
IkReal x7990=(gconst137*r10);
IkReal x7991=(cj1*cj2);
IkReal x7992=(gconst137*r20);
IkReal x7993=(gconst136*r11);
IkReal x7994=(gconst136*r21);
IkReal x7995=(gconst137*r00);
IkReal x7996=((1.0)*cj0);
IkReal x7997=(sj1*sj2);
IkReal x7998=((1.0)*x7988);
IkReal x7999=((1.0)*x7987);
evalcond[0]=((((-1.0)*x7992*x7999))+(((-1.0)*r22*x7998))+((x7987*x7994)));
evalcond[1]=(sj0+(((-1.0)*x7995*x7999))+(((-1.0)*r02*x7998))+((x7987*x7989)));
evalcond[2]=((((-1.0)*r12*x7998))+(((-1.0)*x7990*x7999))+(((-1.0)*x7996))+((x7987*x7993)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7988*x7992))+(((-1.0)*x7994*x7998))+(((-1.0)*r22*x7999)));
evalcond[4]=(((x7988*x7995))+(((-1.0)*x7996*x7997))+((cj0*x7991))+(((-1.0)*x7989*x7998))+(((-1.0)*r02*x7999)));
evalcond[5]=((((-1.0)*r12*x7999))+((x7988*x7990))+(((-1.0)*sj0*x7997))+((sj0*x7991))+(((-1.0)*x7993*x7998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8000=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x8000.valid){
continue;
}
CheckValue<IkReal> x8001 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8000.value)))+(x8001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8002=IKsin(j4);
IkReal x8003=IKcos(j4);
IkReal x8004=(gconst136*r01);
IkReal x8005=(gconst137*r10);
IkReal x8006=(cj1*cj2);
IkReal x8007=(gconst137*r20);
IkReal x8008=(gconst136*r11);
IkReal x8009=(gconst136*r21);
IkReal x8010=(gconst137*r00);
IkReal x8011=((1.0)*cj0);
IkReal x8012=(sj1*sj2);
IkReal x8013=((1.0)*x8003);
IkReal x8014=((1.0)*x8002);
evalcond[0]=((((-1.0)*r22*x8013))+(((-1.0)*x8007*x8014))+((x8002*x8009)));
evalcond[1]=((((-1.0)*r02*x8013))+sj0+(((-1.0)*x8010*x8014))+((x8002*x8004)));
evalcond[2]=((((-1.0)*x8011))+(((-1.0)*x8005*x8014))+(((-1.0)*r12*x8013))+((x8002*x8008)));
evalcond[3]=((((-1.0)*r22*x8014))+(((-1.0)*x8009*x8013))+((cj2*sj1))+((cj1*sj2))+((x8003*x8007)));
evalcond[4]=((((-1.0)*x8011*x8012))+(((-1.0)*r02*x8014))+(((-1.0)*x8004*x8013))+((cj0*x8006))+((x8003*x8010)));
evalcond[5]=(((sj0*x8006))+(((-1.0)*x8008*x8013))+(((-1.0)*sj0*x8012))+(((-1.0)*r12*x8014))+((x8003*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8016 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8016)==0){
continue;
}
IkReal x8015=pow(x8016,-0.5);
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8017.value));
IkReal gconst139=((-1.0)*r01*x8015);
IkReal gconst140=(r00*x8015);
CheckValue<IkReal> x8018 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8018.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8018.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
IkReal x8019=((-1.0)*(x8021.value));
IkReal x8020=x8015;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8019;
IkReal gconst138=x8019;
IkReal gconst139=((-1.0)*r01*x8020);
IkReal gconst140=(r00*x8020);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8022=((1.0)*gconst140);
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8022))+((gconst139*r11*sj0))+(((-1.0)*r10*sj0*x8022))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
CheckValue<IkReal> x8024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8022))+(((-1.0)*gconst139*r20)))),-1);
if(!x8024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8023.value)+(((1.5707963267949)*(x8024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8025=IKsin(j4);
IkReal x8026=IKcos(j4);
IkReal x8027=(gconst140*r00);
IkReal x8028=(cj1*cj2);
IkReal x8029=(gconst139*r11);
IkReal x8030=(gconst139*r01);
IkReal x8031=((1.0)*cj0);
IkReal x8032=(gconst139*r21);
IkReal x8033=(sj1*sj2);
IkReal x8034=((1.0)*x8026);
IkReal x8035=((1.0)*x8025);
IkReal x8036=(gconst140*x8026);
evalcond[0]=((((-1.0)*gconst140*r20*x8035))+((x8025*x8032))+(((-1.0)*r22*x8034)));
evalcond[1]=(sj0+((x8025*x8030))+(((-1.0)*r02*x8034))+(((-1.0)*x8027*x8035)));
evalcond[2]=((((-1.0)*r12*x8034))+((x8025*x8029))+(((-1.0)*x8031))+(((-1.0)*gconst140*r10*x8035)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8036))+(((-1.0)*r22*x8035))+(((-1.0)*x8032*x8034)));
evalcond[4]=(((x8026*x8027))+(((-1.0)*r02*x8035))+((cj0*x8028))+(((-1.0)*x8030*x8034))+(((-1.0)*x8031*x8033)));
evalcond[5]=((((-1.0)*sj0*x8033))+((r10*x8036))+(((-1.0)*r12*x8035))+((sj0*x8028))+(((-1.0)*x8029*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8037 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8037.valid){
continue;
}
CheckValue<IkReal> x8038=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x8038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8037.value)+(((1.5707963267949)*(x8038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8039=IKsin(j4);
IkReal x8040=IKcos(j4);
IkReal x8041=(gconst140*r00);
IkReal x8042=(cj1*cj2);
IkReal x8043=(gconst139*r11);
IkReal x8044=(gconst139*r01);
IkReal x8045=((1.0)*cj0);
IkReal x8046=(gconst139*r21);
IkReal x8047=(sj1*sj2);
IkReal x8048=((1.0)*x8040);
IkReal x8049=((1.0)*x8039);
IkReal x8050=(gconst140*x8040);
evalcond[0]=((((-1.0)*gconst140*r20*x8049))+((x8039*x8046))+(((-1.0)*r22*x8048)));
evalcond[1]=(sj0+((x8039*x8044))+(((-1.0)*x8041*x8049))+(((-1.0)*r02*x8048)));
evalcond[2]=(((x8039*x8043))+(((-1.0)*x8045))+(((-1.0)*r12*x8048))+(((-1.0)*gconst140*r10*x8049)));
evalcond[3]=(((cj2*sj1))+((r20*x8050))+((cj1*sj2))+(((-1.0)*r22*x8049))+(((-1.0)*x8046*x8048)));
evalcond[4]=((((-1.0)*x8045*x8047))+((x8040*x8041))+(((-1.0)*r02*x8049))+((cj0*x8042))+(((-1.0)*x8044*x8048)));
evalcond[5]=((((-1.0)*sj0*x8047))+((r10*x8050))+((sj0*x8042))+(((-1.0)*x8043*x8048))+(((-1.0)*r12*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8052 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8052)==0){
continue;
}
IkReal x8051=pow(x8052,-0.5);
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8053.value))));
IkReal gconst142=((1.0)*r01*x8051);
IkReal gconst143=((-1.0)*r00*x8051);
CheckValue<IkReal> x8054 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8054.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8054.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
IkReal x8055=((1.0)*(x8057.value));
IkReal x8056=x8051;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8055)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8055)));
IkReal gconst142=((1.0)*r01*x8056);
IkReal gconst143=((-1.0)*r00*x8056);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x8060 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8060.valid){
continue;
}
IkReal x8058=((1.0)*(x8060.value));
IkReal x8059=x8051;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8058)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8058)));
IkReal gconst142=((1.0)*r01*x8059);
IkReal gconst143=((-1.0)*r00*x8059);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8063 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8063.valid){
continue;
}
IkReal x8061=((1.0)*(x8063.value));
IkReal x8062=x8051;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8061)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8061)));
IkReal gconst142=((1.0)*r01*x8062);
IkReal gconst143=((-1.0)*r00*x8062);
IkReal x8064=r02*r02;
IkReal x8065=(r12*sj0);
IkReal x8066=x8051;
IkReal x8067=(cj0*x8066);
j4eval[0]=((IKabs(((((-1.0)*x8067))+((x8064*x8067))+((r02*x8065*x8066)))))+(IKabs((x8065+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8068=((1.0)*gconst143);
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x8068))+((cj0*gconst142*r01))+(((-1.0)*cj0*r00*x8068))+((gconst142*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
CheckValue<IkReal> x8070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8068))+(((-1.0)*gconst142*r20)))),-1);
if(!x8070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8069.value)+(((1.5707963267949)*(x8070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8071=IKsin(j4);
IkReal x8072=IKcos(j4);
IkReal x8073=(cj1*cj2);
IkReal x8074=(gconst143*r20);
IkReal x8075=((1.0)*cj0);
IkReal x8076=(sj1*sj2);
IkReal x8077=((1.0)*x8072);
IkReal x8078=((1.0)*x8071);
IkReal x8079=(gconst142*x8071);
IkReal x8080=(gconst143*x8072);
evalcond[0]=(((r21*x8079))+(((-1.0)*x8074*x8078))+(((-1.0)*r22*x8077)));
evalcond[1]=(sj0+(((-1.0)*r02*x8077))+((r01*x8079))+(((-1.0)*gconst143*r00*x8078)));
evalcond[2]=((((-1.0)*x8075))+((r11*x8079))+(((-1.0)*r12*x8077))+(((-1.0)*gconst143*r10*x8078)));
evalcond[3]=(((x8072*x8074))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8077))+(((-1.0)*r22*x8078)));
evalcond[4]=((((-1.0)*gconst142*r01*x8077))+(((-1.0)*r02*x8078))+((r00*x8080))+(((-1.0)*x8075*x8076))+((cj0*x8073)));
evalcond[5]=(((r10*x8080))+((sj0*x8073))+(((-1.0)*gconst142*r11*x8077))+(((-1.0)*sj0*x8076))+(((-1.0)*r12*x8078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8081=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8081.value)))+(x8082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(cj1*cj2);
IkReal x8086=(gconst143*r20);
IkReal x8087=((1.0)*cj0);
IkReal x8088=(sj1*sj2);
IkReal x8089=((1.0)*x8084);
IkReal x8090=((1.0)*x8083);
IkReal x8091=(gconst142*x8083);
IkReal x8092=(gconst143*x8084);
evalcond[0]=((((-1.0)*r22*x8089))+(((-1.0)*x8086*x8090))+((r21*x8091)));
evalcond[1]=((((-1.0)*r02*x8089))+sj0+(((-1.0)*gconst143*r00*x8090))+((r01*x8091)));
evalcond[2]=((((-1.0)*x8087))+((r11*x8091))+(((-1.0)*gconst143*r10*x8090))+(((-1.0)*r12*x8089)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8084*x8086))+(((-1.0)*r22*x8090))+(((-1.0)*gconst142*r21*x8089)));
evalcond[4]=((((-1.0)*r02*x8090))+((r00*x8092))+((cj0*x8085))+(((-1.0)*x8087*x8088))+(((-1.0)*gconst142*r01*x8089)));
evalcond[5]=(((r10*x8092))+((sj0*x8085))+(((-1.0)*gconst142*r11*x8089))+(((-1.0)*r12*x8090))+(((-1.0)*sj0*x8088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8093=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x8093.valid){
continue;
}
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8093.value)))+(x8094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8095=IKsin(j4);
IkReal x8096=IKcos(j4);
IkReal x8097=(cj1*cj2);
IkReal x8098=(gconst143*r20);
IkReal x8099=((1.0)*cj0);
IkReal x8100=(sj1*sj2);
IkReal x8101=((1.0)*x8096);
IkReal x8102=((1.0)*x8095);
IkReal x8103=(gconst142*x8095);
IkReal x8104=(gconst143*x8096);
evalcond[0]=((((-1.0)*x8098*x8102))+(((-1.0)*r22*x8101))+((r21*x8103)));
evalcond[1]=(sj0+((r01*x8103))+(((-1.0)*gconst143*r00*x8102))+(((-1.0)*r02*x8101)));
evalcond[2]=((((-1.0)*gconst143*r10*x8102))+(((-1.0)*x8099))+((r11*x8103))+(((-1.0)*r12*x8101)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8101))+((cj1*sj2))+(((-1.0)*r22*x8102))+((x8096*x8098)));
evalcond[4]=((((-1.0)*x8099*x8100))+(((-1.0)*gconst142*r01*x8101))+((r00*x8104))+((cj0*x8097))+(((-1.0)*r02*x8102)));
evalcond[5]=(((r10*x8104))+((sj0*x8097))+(((-1.0)*sj0*x8100))+(((-1.0)*gconst142*r11*x8101))+(((-1.0)*r12*x8102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8105=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8105;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8106=((1.0)*cj5);
IkReal x8107=((((-1.0)*r21*x8106))+(((-1.0)*r20*sj5)));
j4eval[0]=x8107;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8106))))));
j4eval[2]=IKsign(x8107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8108=cj5*cj5;
IkReal x8109=r01*r01;
IkReal x8110=(cj5*r00);
IkReal x8111=(r01*sj5);
IkReal x8112=((((-2.0)*x8110*x8111))+(((-1.0)*x8108*x8109))+((x8108*(r00*r00)))+(r02*r02)+x8109);
j4eval[0]=x8112;
j4eval[1]=((IKabs(r02))+(IKabs((x8110+(((-1.0)*x8111))))));
j4eval[2]=IKsign(x8112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8113=cj5*cj5;
IkReal x8114=r01*r01;
IkReal x8115=(r01*sj5);
IkReal x8116=(cj5*r00);
CheckValue<IkReal> x8117=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8113*x8114))+((x8113*(r00*r00)))+(r02*r02)+(((-2.0)*x8115*x8116))+x8114)),-1);
if(!x8117.valid){
continue;
}
CheckValue<IkReal> x8118 = IKatan2WithCheck(IkReal((x8116+(((-1.0)*x8115)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8117.value)))+(x8118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(cj5*r10);
IkReal x8122=(r01*sj5);
IkReal x8123=(cj5*r00);
IkReal x8124=(cj5*r20);
IkReal x8125=((1.0)*x8120);
IkReal x8126=((1.0)*x8119);
IkReal x8127=(sj5*x8119);
evalcond[0]=((((-1.0)*x8124*x8126))+((r21*x8127))+(((-1.0)*r22*x8125)));
evalcond[1]=((((-1.0)*r12*x8125))+(((-1.0)*x8121*x8126))+((r11*x8127)));
evalcond[2]=((((-1.0)*x8122*x8125))+((x8120*x8123))+(((-1.0)*r02*x8126)));
evalcond[3]=((1.0)+(((-1.0)*x8123*x8126))+(((-1.0)*r02*x8125))+((x8119*x8122)));
evalcond[4]=(((cj2*sj1))+((x8120*x8124))+(((-1.0)*r21*sj5*x8125))+((cj1*sj2))+(((-1.0)*r22*x8126)));
evalcond[5]=((((-1.0)*r11*sj5*x8125))+(((-1.0)*r12*x8126))+((x8120*x8121))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8128=((1.0)*cj5);
CheckValue<IkReal> x8129 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8129.valid){
continue;
}
CheckValue<IkReal> x8130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8128))+(((-1.0)*r20*sj5)))),-1);
if(!x8130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8129.value)+(((1.5707963267949)*(x8130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8131=IKsin(j4);
IkReal x8132=IKcos(j4);
IkReal x8133=(cj5*r10);
IkReal x8134=(r01*sj5);
IkReal x8135=(cj5*r00);
IkReal x8136=(cj5*r20);
IkReal x8137=((1.0)*x8132);
IkReal x8138=((1.0)*x8131);
IkReal x8139=(sj5*x8131);
evalcond[0]=((((-1.0)*r22*x8137))+((r21*x8139))+(((-1.0)*x8136*x8138)));
evalcond[1]=(((r11*x8139))+(((-1.0)*r12*x8137))+(((-1.0)*x8133*x8138)));
evalcond[2]=((((-1.0)*r02*x8138))+(((-1.0)*x8134*x8137))+((x8132*x8135)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8137))+((x8131*x8134))+(((-1.0)*x8135*x8138)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8138))+((x8132*x8136))+(((-1.0)*r21*sj5*x8137))+((cj1*sj2)));
evalcond[5]=(((x8132*x8133))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8138))+(((-1.0)*r11*sj5*x8137))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
CheckValue<IkReal> x8141=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8140.value)+(((1.5707963267949)*(x8141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8142=IKsin(j4);
IkReal x8143=IKcos(j4);
IkReal x8144=(cj5*r10);
IkReal x8145=(r01*sj5);
IkReal x8146=(cj5*r00);
IkReal x8147=(cj5*r20);
IkReal x8148=((1.0)*x8143);
IkReal x8149=((1.0)*x8142);
IkReal x8150=(sj5*x8142);
evalcond[0]=((((-1.0)*r22*x8148))+((r21*x8150))+(((-1.0)*x8147*x8149)));
evalcond[1]=((((-1.0)*x8144*x8149))+(((-1.0)*r12*x8148))+((r11*x8150)));
evalcond[2]=(((x8143*x8146))+(((-1.0)*r02*x8149))+(((-1.0)*x8145*x8148)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8148))+(((-1.0)*x8146*x8149))+((x8142*x8145)));
evalcond[4]=(((cj2*sj1))+((x8143*x8147))+((cj1*sj2))+(((-1.0)*r22*x8149))+(((-1.0)*r21*sj5*x8148)));
evalcond[5]=((((-1.0)*r11*sj5*x8148))+((x8143*x8144))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8149))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8151=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8151;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8152=((1.0)*cj5);
IkReal x8153=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8152)));
j4eval[0]=x8153;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8152))))));
j4eval[2]=IKsign(x8153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8154=cj5*cj5;
IkReal x8155=r01*r01;
IkReal x8156=(r01*sj5);
IkReal x8157=(cj5*r00);
IkReal x8158=((((-1.0)*(r02*r02)))+(((-1.0)*x8154*(r00*r00)))+(((-1.0)*x8155))+((x8154*x8155))+(((2.0)*x8156*x8157)));
j4eval[0]=x8158;
j4eval[1]=IKsign(x8158);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8156))+x8157))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8159=cj5*cj5;
IkReal x8160=r01*r01;
IkReal x8161=(r01*sj5);
IkReal x8162=(cj5*r00);
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal(((((-1.0)*x8161))+x8162)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
CheckValue<IkReal> x8164=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8161*x8162))+((x8159*x8160))+(((-1.0)*x8160))+(((-1.0)*x8159*(r00*r00))))),-1);
if(!x8164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8163.value)+(((1.5707963267949)*(x8164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8165=IKsin(j4);
IkReal x8166=IKcos(j4);
IkReal x8167=(cj5*r10);
IkReal x8168=(r01*sj5);
IkReal x8169=(cj5*r00);
IkReal x8170=(cj5*r20);
IkReal x8171=((1.0)*x8166);
IkReal x8172=((1.0)*x8165);
IkReal x8173=(sj5*x8165);
evalcond[0]=((((-1.0)*x8170*x8172))+(((-1.0)*r22*x8171))+((r21*x8173)));
evalcond[1]=((((-1.0)*r12*x8171))+((r11*x8173))+(((-1.0)*x8167*x8172)));
evalcond[2]=((((-1.0)*x8168*x8171))+(((-1.0)*r02*x8172))+((x8166*x8169)));
evalcond[3]=((-1.0)+(((-1.0)*x8169*x8172))+(((-1.0)*r02*x8171))+((x8165*x8168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8166*x8170))+(((-1.0)*r22*x8172))+(((-1.0)*r21*sj5*x8171)));
evalcond[5]=((((-1.0)*r12*x8172))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8171))+((x8166*x8167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8174=((1.0)*cj5);
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
CheckValue<IkReal> x8176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8174))+(((-1.0)*r10*sj5)))),-1);
if(!x8176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8175.value)+(((1.5707963267949)*(x8176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8177=IKsin(j4);
IkReal x8178=IKcos(j4);
IkReal x8179=(cj5*r10);
IkReal x8180=(r01*sj5);
IkReal x8181=(cj5*r00);
IkReal x8182=(cj5*r20);
IkReal x8183=((1.0)*x8178);
IkReal x8184=((1.0)*x8177);
IkReal x8185=(sj5*x8177);
evalcond[0]=((((-1.0)*r22*x8183))+((r21*x8185))+(((-1.0)*x8182*x8184)));
evalcond[1]=(((r11*x8185))+(((-1.0)*x8179*x8184))+(((-1.0)*r12*x8183)));
evalcond[2]=((((-1.0)*r02*x8184))+((x8178*x8181))+(((-1.0)*x8180*x8183)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8183))+((x8177*x8180))+(((-1.0)*x8181*x8184)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8184))+((cj1*sj2))+((x8178*x8182))+(((-1.0)*r21*sj5*x8183)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8184))+(((-1.0)*r11*sj5*x8183))+((x8178*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8186=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8186.valid){
continue;
}
CheckValue<IkReal> x8187 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8186.value)))+(x8187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8188=IKsin(j4);
IkReal x8189=IKcos(j4);
IkReal x8190=(cj5*r10);
IkReal x8191=(r01*sj5);
IkReal x8192=(cj5*r00);
IkReal x8193=(cj5*r20);
IkReal x8194=((1.0)*x8189);
IkReal x8195=((1.0)*x8188);
IkReal x8196=(sj5*x8188);
evalcond[0]=(((r21*x8196))+(((-1.0)*r22*x8194))+(((-1.0)*x8193*x8195)));
evalcond[1]=(((r11*x8196))+(((-1.0)*r12*x8194))+(((-1.0)*x8190*x8195)));
evalcond[2]=((((-1.0)*r02*x8195))+((x8189*x8192))+(((-1.0)*x8191*x8194)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8194))+(((-1.0)*x8192*x8195))+((x8188*x8191)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8195))+((cj1*sj2))+(((-1.0)*r21*sj5*x8194))+((x8189*x8193)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8195))+(((-1.0)*r11*sj5*x8194))+((x8189*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8198 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8198)==0){
continue;
}
IkReal x8197=pow(x8198,-0.5);
CheckValue<IkReal> x8199 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8199.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8199.value));
IkReal gconst145=((-1.0)*r11*x8197);
IkReal gconst146=(r10*x8197);
CheckValue<IkReal> x8200 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8200.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8200.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
IkReal x8201=((-1.0)*(x8203.value));
IkReal x8202=x8197;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8201;
IkReal gconst144=x8201;
IkReal gconst145=((-1.0)*r11*x8202);
IkReal gconst146=(r10*x8202);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8204=((1.0)*gconst146);
CheckValue<IkReal> x8205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8204))+(((-1.0)*gconst145*r20)))),-1);
if(!x8205.valid){
continue;
}
CheckValue<IkReal> x8206 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*cj0*r00*x8204))+(((-1.0)*r10*sj0*x8204))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8205.value)))+(x8206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8207=IKsin(j4);
IkReal x8208=IKcos(j4);
IkReal x8209=(gconst146*r10);
IkReal x8210=(cj1*cj2);
IkReal x8211=(gconst145*r11);
IkReal x8212=(gconst146*r20);
IkReal x8213=(gconst146*r00);
IkReal x8214=((1.0)*cj0);
IkReal x8215=(sj1*sj2);
IkReal x8216=((1.0)*x8208);
IkReal x8217=((1.0)*x8207);
IkReal x8218=(gconst145*x8207);
evalcond[0]=((((-1.0)*r22*x8216))+(((-1.0)*x8212*x8217))+((r21*x8218)));
evalcond[1]=(sj0+(((-1.0)*r02*x8216))+(((-1.0)*x8213*x8217))+((r01*x8218)));
evalcond[2]=((((-1.0)*x8209*x8217))+(((-1.0)*x8214))+(((-1.0)*r12*x8216))+((x8207*x8211)));
evalcond[3]=(((cj2*sj1))+((x8208*x8212))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8216))+(((-1.0)*r22*x8217)));
evalcond[4]=(((x8208*x8213))+((cj0*x8210))+(((-1.0)*r02*x8217))+(((-1.0)*gconst145*r01*x8216))+(((-1.0)*x8214*x8215)));
evalcond[5]=(((x8208*x8209))+(((-1.0)*sj0*x8215))+(((-1.0)*x8211*x8216))+(((-1.0)*r12*x8217))+((sj0*x8210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x8220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8219.value)+(((1.5707963267949)*(x8220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8221=IKsin(j4);
IkReal x8222=IKcos(j4);
IkReal x8223=(gconst146*r10);
IkReal x8224=(cj1*cj2);
IkReal x8225=(gconst145*r11);
IkReal x8226=(gconst146*r20);
IkReal x8227=(gconst146*r00);
IkReal x8228=((1.0)*cj0);
IkReal x8229=(sj1*sj2);
IkReal x8230=((1.0)*x8222);
IkReal x8231=((1.0)*x8221);
IkReal x8232=(gconst145*x8221);
evalcond[0]=(((r21*x8232))+(((-1.0)*r22*x8230))+(((-1.0)*x8226*x8231)));
evalcond[1]=(sj0+(((-1.0)*r02*x8230))+((r01*x8232))+(((-1.0)*x8227*x8231)));
evalcond[2]=((((-1.0)*x8228))+((x8221*x8225))+(((-1.0)*r12*x8230))+(((-1.0)*x8223*x8231)));
evalcond[3]=(((x8222*x8226))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8230))+(((-1.0)*r22*x8231)));
evalcond[4]=(((x8222*x8227))+((cj0*x8224))+(((-1.0)*r02*x8231))+(((-1.0)*gconst145*r01*x8230))+(((-1.0)*x8228*x8229)));
evalcond[5]=(((x8222*x8223))+(((-1.0)*sj0*x8229))+(((-1.0)*r12*x8231))+(((-1.0)*x8225*x8230))+((sj0*x8224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8234 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8234)==0){
continue;
}
IkReal x8233=pow(x8234,-0.5);
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8235.value))));
IkReal gconst148=((1.0)*r11*x8233);
IkReal gconst149=((-1.0)*r10*x8233);
CheckValue<IkReal> x8236 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8236.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8236.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
IkReal x8237=((1.0)*(x8239.value));
IkReal x8238=x8233;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8237)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8237)));
IkReal gconst148=((1.0)*r11*x8238);
IkReal gconst149=((-1.0)*r10*x8238);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8242.valid){
continue;
}
IkReal x8240=((1.0)*(x8242.value));
IkReal x8241=x8233;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8240)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8240)));
IkReal gconst148=((1.0)*r11*x8241);
IkReal gconst149=((-1.0)*r10*x8241);
IkReal x8243=r12*r12;
IkReal x8244=(cj0*r02);
IkReal x8245=x8233;
IkReal x8246=(sj0*x8245);
j4eval[0]=((IKabs((((x8243*x8246))+((r12*x8244*x8245))+(((-1.0)*x8246)))))+(IKabs((((r12*sj0))+x8244))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8249 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8249.valid){
continue;
}
IkReal x8247=((1.0)*(x8249.value));
IkReal x8248=x8233;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8247)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8247)));
IkReal gconst148=((1.0)*r11*x8248);
IkReal gconst149=((-1.0)*r10*x8248);
IkReal x8250=(cj1*r22*sj2);
IkReal x8251=(cj2*r22*sj1);
IkReal x8252=x8233;
IkReal x8253=(r12*x8252);
j4eval[0]=((IKabs((x8251+x8250)))+(IKabs((((x8251*x8253))+((x8250*x8253))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8254=(cj2*sj1);
IkReal x8255=(cj1*sj2);
IkReal x8256=(gconst148*r21);
IkReal x8257=((1.0)*gconst149*r20);
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal((((r22*x8255))+((r22*x8254)))),IkReal((((x8255*x8256))+((x8254*x8256))+(((-1.0)*x8255*x8257))+(((-1.0)*x8254*x8257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
CheckValue<IkReal> x8259=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(x8256*x8256)+(((-2.0)*gconst149*r20*x8256)))),-1);
if(!x8259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8258.value)+(((1.5707963267949)*(x8259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8260=IKsin(j4);
IkReal x8261=IKcos(j4);
IkReal x8262=(cj1*cj2);
IkReal x8263=(gconst148*r11);
IkReal x8264=((1.0)*cj0);
IkReal x8265=(sj1*sj2);
IkReal x8266=((1.0)*x8261);
IkReal x8267=(gconst149*x8261);
IkReal x8268=((1.0)*x8260);
IkReal x8269=(gconst148*x8260);
evalcond[0]=(((r21*x8269))+(((-1.0)*r22*x8266))+(((-1.0)*gconst149*r20*x8268)));
evalcond[1]=(sj0+(((-1.0)*r02*x8266))+(((-1.0)*gconst149*r00*x8268))+((r01*x8269)));
evalcond[2]=((((-1.0)*r12*x8266))+(((-1.0)*x8264))+((x8260*x8263))+(((-1.0)*gconst149*r10*x8268)));
evalcond[3]=(((cj2*sj1))+((r20*x8267))+((cj1*sj2))+(((-1.0)*r22*x8268))+(((-1.0)*gconst148*r21*x8266)));
evalcond[4]=((((-1.0)*gconst148*r01*x8266))+((cj0*x8262))+(((-1.0)*x8264*x8265))+(((-1.0)*r02*x8268))+((r00*x8267)));
evalcond[5]=((((-1.0)*r12*x8268))+(((-1.0)*x8263*x8266))+((sj0*x8262))+((r10*x8267))+(((-1.0)*sj0*x8265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8270=((1.0)*gconst149);
CheckValue<IkReal> x8271=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x8270)))),-1);
if(!x8271.valid){
continue;
}
CheckValue<IkReal> x8272 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x8270))+((cj0*gconst148*r01))+(((-1.0)*cj0*r00*x8270))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8271.value)))+(x8272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8273=IKsin(j4);
IkReal x8274=IKcos(j4);
IkReal x8275=(cj1*cj2);
IkReal x8276=(gconst148*r11);
IkReal x8277=((1.0)*cj0);
IkReal x8278=(sj1*sj2);
IkReal x8279=((1.0)*x8274);
IkReal x8280=(gconst149*x8274);
IkReal x8281=((1.0)*x8273);
IkReal x8282=(gconst148*x8273);
evalcond[0]=(((r21*x8282))+(((-1.0)*gconst149*r20*x8281))+(((-1.0)*r22*x8279)));
evalcond[1]=(sj0+((r01*x8282))+(((-1.0)*gconst149*r00*x8281))+(((-1.0)*r02*x8279)));
evalcond[2]=((((-1.0)*x8277))+(((-1.0)*r12*x8279))+((x8273*x8276))+(((-1.0)*gconst149*r10*x8281)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8280))+(((-1.0)*r22*x8281))+(((-1.0)*gconst148*r21*x8279)));
evalcond[4]=((((-1.0)*r02*x8281))+((r00*x8280))+(((-1.0)*gconst148*r01*x8279))+(((-1.0)*x8277*x8278))+((cj0*x8275)));
evalcond[5]=((((-1.0)*sj0*x8278))+(((-1.0)*r12*x8281))+((r10*x8280))+(((-1.0)*x8276*x8279))+((sj0*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8283=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8283.valid){
continue;
}
CheckValue<IkReal> x8284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8283.value)))+(x8284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8285=IKsin(j4);
IkReal x8286=IKcos(j4);
IkReal x8287=(cj1*cj2);
IkReal x8288=(gconst148*r11);
IkReal x8289=((1.0)*cj0);
IkReal x8290=(sj1*sj2);
IkReal x8291=((1.0)*x8286);
IkReal x8292=(gconst149*x8286);
IkReal x8293=((1.0)*x8285);
IkReal x8294=(gconst148*x8285);
evalcond[0]=(((r21*x8294))+(((-1.0)*gconst149*r20*x8293))+(((-1.0)*r22*x8291)));
evalcond[1]=(sj0+((r01*x8294))+(((-1.0)*gconst149*r00*x8293))+(((-1.0)*r02*x8291)));
evalcond[2]=((((-1.0)*r12*x8291))+(((-1.0)*x8289))+(((-1.0)*gconst149*r10*x8293))+((x8285*x8288)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8291))+((r20*x8292))+((cj1*sj2))+(((-1.0)*r22*x8293)));
evalcond[4]=(((r00*x8292))+((cj0*x8287))+(((-1.0)*x8289*x8290))+(((-1.0)*r02*x8293))+(((-1.0)*gconst148*r01*x8291)));
evalcond[5]=((((-1.0)*r12*x8293))+((r10*x8292))+(((-1.0)*sj0*x8290))+((sj0*x8287))+(((-1.0)*x8288*x8291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8295=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8295;
j4eval[1]=IKsign(x8295);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8296=((1.0)*cj5);
IkReal x8297=((((-1.0)*r21*x8296))+(((-1.0)*r20*sj5)));
j4eval[0]=x8297;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x8296)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8298=cj5*cj5;
IkReal x8299=r11*r11;
IkReal x8300=(cj5*r10);
IkReal x8301=(r11*sj5);
IkReal x8302=(((x8298*x8299))+(((-1.0)*x8299))+(((-1.0)*x8298*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x8300*x8301)));
j4eval[0]=x8302;
j4eval[1]=((IKabs((x8300+(((-1.0)*x8301)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8303=cj5*cj5;
IkReal x8304=r11*r11;
IkReal x8305=(cj5*r10);
IkReal x8306=(r11*sj5);
CheckValue<IkReal> x8307=IKPowWithIntegerCheck(IKsign((((x8303*x8304))+(((-1.0)*x8303*(r10*r10)))+(((2.0)*x8305*x8306))+(((-1.0)*(r12*r12)))+(((-1.0)*x8304)))),-1);
if(!x8307.valid){
continue;
}
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal((x8305+(((-1.0)*x8306)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8307.value)))+(x8308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8309=IKsin(j4);
IkReal x8310=IKcos(j4);
IkReal x8311=(cj5*r10);
IkReal x8312=(r01*sj5);
IkReal x8313=(cj5*r00);
IkReal x8314=(cj5*r20);
IkReal x8315=((1.0)*x8310);
IkReal x8316=((1.0)*x8309);
IkReal x8317=(sj5*x8309);
evalcond[0]=((((-1.0)*r22*x8315))+((r21*x8317))+(((-1.0)*x8314*x8316)));
evalcond[1]=((((-1.0)*x8313*x8316))+(((-1.0)*r02*x8315))+((x8309*x8312)));
evalcond[2]=(((x8310*x8311))+(((-1.0)*r11*sj5*x8315))+(((-1.0)*r12*x8316)));
evalcond[3]=((-1.0)+(((-1.0)*x8311*x8316))+((r11*x8317))+(((-1.0)*r12*x8315)));
evalcond[4]=((((-1.0)*r21*sj5*x8315))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8316))+((x8310*x8314)));
evalcond[5]=((((-1.0)*x8312*x8315))+(((-1.0)*sj1*sj2))+((x8310*x8313))+(((-1.0)*r02*x8316))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8318=((1.0)*cj5);
CheckValue<IkReal> x8319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8318))+(((-1.0)*r20*sj5)))),-1);
if(!x8319.valid){
continue;
}
CheckValue<IkReal> x8320 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8319.value)))+(x8320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8321=IKsin(j4);
IkReal x8322=IKcos(j4);
IkReal x8323=(cj5*r10);
IkReal x8324=(r01*sj5);
IkReal x8325=(cj5*r00);
IkReal x8326=(cj5*r20);
IkReal x8327=((1.0)*x8322);
IkReal x8328=((1.0)*x8321);
IkReal x8329=(sj5*x8321);
evalcond[0]=((((-1.0)*r22*x8327))+((r21*x8329))+(((-1.0)*x8326*x8328)));
evalcond[1]=(((x8321*x8324))+(((-1.0)*x8325*x8328))+(((-1.0)*r02*x8327)));
evalcond[2]=(((x8322*x8323))+(((-1.0)*r11*sj5*x8327))+(((-1.0)*r12*x8328)));
evalcond[3]=((-1.0)+((r11*x8329))+(((-1.0)*r12*x8327))+(((-1.0)*x8323*x8328)));
evalcond[4]=(((cj2*sj1))+((x8322*x8326))+(((-1.0)*r22*x8328))+((cj1*sj2))+(((-1.0)*r21*sj5*x8327)));
evalcond[5]=(((x8322*x8325))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8328))+(((-1.0)*x8324*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8330 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8330.value)+(((1.5707963267949)*(x8331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(cj5*r10);
IkReal x8335=(r01*sj5);
IkReal x8336=(cj5*r00);
IkReal x8337=(cj5*r20);
IkReal x8338=((1.0)*x8333);
IkReal x8339=((1.0)*x8332);
IkReal x8340=(sj5*x8332);
evalcond[0]=((((-1.0)*r22*x8338))+((r21*x8340))+(((-1.0)*x8337*x8339)));
evalcond[1]=(((x8332*x8335))+(((-1.0)*r02*x8338))+(((-1.0)*x8336*x8339)));
evalcond[2]=(((x8333*x8334))+(((-1.0)*r12*x8339))+(((-1.0)*r11*sj5*x8338)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8338))+((r11*x8340))+(((-1.0)*x8334*x8339)));
evalcond[4]=(((cj2*sj1))+((x8333*x8337))+(((-1.0)*r22*x8339))+((cj1*sj2))+(((-1.0)*r21*sj5*x8338)));
evalcond[5]=(((x8333*x8336))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8339))+((cj1*cj2))+(((-1.0)*x8335*x8338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8341=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8341;
j4eval[1]=IKsign(x8341);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8342=((1.0)*cj5);
IkReal x8343=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8342)));
j4eval[0]=x8343;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8342))))));
j4eval[2]=IKsign(x8343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8344=cj5*cj5;
IkReal x8345=r11*r11;
IkReal x8346=(r11*sj5);
IkReal x8347=(cj5*r10);
IkReal x8348=(x8345+(r12*r12)+((x8344*(r10*r10)))+(((-2.0)*x8346*x8347))+(((-1.0)*x8344*x8345)));
j4eval[0]=x8348;
j4eval[1]=IKsign(x8348);
j4eval[2]=((IKabs(r12))+(IKabs((x8347+(((-1.0)*x8346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8349=cj5*cj5;
IkReal x8350=r11*r11;
IkReal x8351=(cj5*r10);
IkReal x8352=(r11*sj5);
CheckValue<IkReal> x8353=IKPowWithIntegerCheck(IKsign((x8350+(r12*r12)+(((-1.0)*x8349*x8350))+(((-2.0)*x8351*x8352))+((x8349*(r10*r10))))),-1);
if(!x8353.valid){
continue;
}
CheckValue<IkReal> x8354 = IKatan2WithCheck(IkReal((x8351+(((-1.0)*x8352)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8353.value)))+(x8354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8355=IKsin(j4);
IkReal x8356=IKcos(j4);
IkReal x8357=(cj5*r10);
IkReal x8358=(r01*sj5);
IkReal x8359=(cj5*r00);
IkReal x8360=(cj5*r20);
IkReal x8361=((1.0)*x8356);
IkReal x8362=((1.0)*x8355);
IkReal x8363=(sj5*x8355);
evalcond[0]=((((-1.0)*r22*x8361))+((r21*x8363))+(((-1.0)*x8360*x8362)));
evalcond[1]=(((x8355*x8358))+(((-1.0)*x8359*x8362))+(((-1.0)*r02*x8361)));
evalcond[2]=(((x8356*x8357))+(((-1.0)*r12*x8362))+(((-1.0)*r11*sj5*x8361)));
evalcond[3]=((1.0)+(((-1.0)*x8357*x8362))+(((-1.0)*r12*x8361))+((r11*x8363)));
evalcond[4]=(((cj2*sj1))+((x8356*x8360))+((cj1*sj2))+(((-1.0)*r22*x8362))+(((-1.0)*r21*sj5*x8361)));
evalcond[5]=(((x8356*x8359))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8362))+(((-1.0)*x8358*x8361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8364=((1.0)*cj5);
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8364))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
CheckValue<IkReal> x8366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8364))+(((-1.0)*r00*sj5)))),-1);
if(!x8366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8365.value)+(((1.5707963267949)*(x8366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8367=IKsin(j4);
IkReal x8368=IKcos(j4);
IkReal x8369=(cj5*r10);
IkReal x8370=(r01*sj5);
IkReal x8371=(cj5*r00);
IkReal x8372=(cj5*r20);
IkReal x8373=((1.0)*x8368);
IkReal x8374=((1.0)*x8367);
IkReal x8375=(sj5*x8367);
evalcond[0]=((((-1.0)*r22*x8373))+((r21*x8375))+(((-1.0)*x8372*x8374)));
evalcond[1]=((((-1.0)*x8371*x8374))+(((-1.0)*r02*x8373))+((x8367*x8370)));
evalcond[2]=((((-1.0)*r12*x8374))+((x8368*x8369))+(((-1.0)*r11*sj5*x8373)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8373))+(((-1.0)*x8369*x8374))+((r11*x8375)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8373))+((cj1*sj2))+(((-1.0)*r22*x8374))+((x8368*x8372)));
evalcond[5]=((((-1.0)*r02*x8374))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8368*x8371))+(((-1.0)*x8370*x8373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8376.valid){
continue;
}
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8376.value)))+(x8377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8378=IKsin(j4);
IkReal x8379=IKcos(j4);
IkReal x8380=(cj5*r10);
IkReal x8381=(r01*sj5);
IkReal x8382=(cj5*r00);
IkReal x8383=(cj5*r20);
IkReal x8384=((1.0)*x8379);
IkReal x8385=((1.0)*x8378);
IkReal x8386=(sj5*x8378);
evalcond[0]=(((r21*x8386))+(((-1.0)*x8383*x8385))+(((-1.0)*r22*x8384)));
evalcond[1]=((((-1.0)*r02*x8384))+(((-1.0)*x8382*x8385))+((x8378*x8381)));
evalcond[2]=((((-1.0)*r12*x8385))+((x8379*x8380))+(((-1.0)*r11*sj5*x8384)));
evalcond[3]=((1.0)+(((-1.0)*x8380*x8385))+(((-1.0)*r12*x8384))+((r11*x8386)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8384))+((cj1*sj2))+(((-1.0)*r22*x8385))+((x8379*x8383)));
evalcond[5]=((((-1.0)*x8381*x8384))+(((-1.0)*r02*x8385))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8379*x8382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8387=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8387);
rxp0_2=(py*r00);
rxp1_0=(r21*x8387);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8388=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8388);
rxp0_2=(py*r00);
rxp1_0=(r21*x8388);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8389=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8389);
rxp0_2=(py*r00);
rxp1_0=(r21*x8389);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8392=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8392.valid){
continue;
}
IkReal x8390=x8392.value;
IkReal x8391=(cj0*x8390);
cj4array[0]=(((sj1*sj2*x8391))+(((-1.0)*cj1*cj2*x8391)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8393=IKsin(j4);
IkReal x8394=IKcos(j4);
IkReal x8395=(r21*sj5);
IkReal x8396=((1.0)*x8394);
IkReal x8397=((1.0)*cj5*x8393);
evalcond[0]=((-1.0)*r12*x8393);
evalcond[1]=((((-1.0)*r12*x8396))+(((-1.0)*cj0)));
evalcond[2]=(((x8393*x8395))+(((-1.0)*r20*x8397)));
evalcond[3]=(((r01*sj5*x8393))+(((-1.0)*r00*x8397)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((cj5*r20*x8394))+(((-1.0)*x8395*x8396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8400=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8400.valid){
continue;
}
IkReal x8398=x8400.value;
IkReal x8399=((1.0)*x8398);
cj4array[0]=((((-1.0)*cj2*sj1*x8399))+(((-1.0)*cj1*sj2*x8399)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8401=IKsin(j4);
IkReal x8402=IKcos(j4);
IkReal x8403=(cj5*r00);
IkReal x8404=((1.0)*cj0);
IkReal x8405=((1.0)*x8401);
IkReal x8406=(sj5*x8401);
IkReal x8407=((1.0)*x8402);
evalcond[0]=((-1.0)*r12*x8401);
evalcond[1]=((((-1.0)*x8404))+(((-1.0)*r12*x8407)));
evalcond[2]=((((-1.0)*cj5*r20*x8405))+((r21*x8406)));
evalcond[3]=(((r01*x8406))+(((-1.0)*x8403*x8405)));
evalcond[4]=((((-1.0)*r01*sj5*x8407))+((cj0*cj1*cj2))+((x8402*x8403))+(((-1.0)*sj1*sj2*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8408=IKPowWithIntegerCheck(r12,-1);
if(!x8408.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8408.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8409=IKsin(j4);
IkReal x8410=IKcos(j4);
IkReal x8411=(cj5*r00);
IkReal x8412=(r21*sj5);
IkReal x8413=(cj5*r20);
IkReal x8414=(r01*sj5);
IkReal x8415=((1.0)*x8409);
IkReal x8416=((1.0)*x8410);
evalcond[0]=((-1.0)*r12*x8409);
evalcond[1]=((((-1.0)*x8413*x8415))+((x8409*x8412)));
evalcond[2]=(((x8409*x8414))+(((-1.0)*x8411*x8415)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8412*x8416))+((x8410*x8413)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x8414*x8416))+((cj0*cj1*cj2))+((x8410*x8411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8417=((1.0)*cj5);
CheckValue<IkReal> x8418 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x8417))+(((-1.0)*r10*sj0*x8417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8418.valid){
continue;
}
CheckValue<IkReal> x8419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8417))+(((-1.0)*r20*sj5)))),-1);
if(!x8419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8418.value)+(((1.5707963267949)*(x8419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8420=IKsin(j4);
IkReal x8421=IKcos(j4);
IkReal x8422=(cj1*cj2);
IkReal x8423=(cj5*r10);
IkReal x8424=(r01*sj5);
IkReal x8425=(cj5*r00);
IkReal x8426=(cj5*r20);
IkReal x8427=((1.0)*cj0);
IkReal x8428=(sj1*sj2);
IkReal x8429=((1.0)*x8421);
IkReal x8430=((1.0)*x8420);
IkReal x8431=(sj5*x8420);
evalcond[0]=(((r21*x8431))+(((-1.0)*r22*x8429))+(((-1.0)*x8426*x8430)));
evalcond[1]=(sj0+(((-1.0)*x8425*x8430))+(((-1.0)*r02*x8429))+((x8420*x8424)));
evalcond[2]=((((-1.0)*x8427))+((r11*x8431))+(((-1.0)*r12*x8429))+(((-1.0)*x8423*x8430)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8429))+((cj1*sj2))+((x8421*x8426))+(((-1.0)*r22*x8430)));
evalcond[4]=(((cj0*x8422))+(((-1.0)*x8424*x8429))+(((-1.0)*x8427*x8428))+((x8421*x8425))+(((-1.0)*r02*x8430)));
evalcond[5]=((((-1.0)*r11*sj5*x8429))+(((-1.0)*r12*x8430))+((x8421*x8423))+((sj0*x8422))+(((-1.0)*sj0*x8428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8432=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8432.valid){
continue;
}
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8432.value)))+(x8433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8434=IKsin(j4);
IkReal x8435=IKcos(j4);
IkReal x8436=(cj1*cj2);
IkReal x8437=(cj5*r10);
IkReal x8438=(r01*sj5);
IkReal x8439=(cj5*r00);
IkReal x8440=(cj5*r20);
IkReal x8441=((1.0)*cj0);
IkReal x8442=(sj1*sj2);
IkReal x8443=((1.0)*x8435);
IkReal x8444=((1.0)*x8434);
IkReal x8445=(sj5*x8434);
evalcond[0]=(((r21*x8445))+(((-1.0)*x8440*x8444))+(((-1.0)*r22*x8443)));
evalcond[1]=(sj0+((x8434*x8438))+(((-1.0)*r02*x8443))+(((-1.0)*x8439*x8444)));
evalcond[2]=(((r11*x8445))+(((-1.0)*r12*x8443))+(((-1.0)*x8437*x8444))+(((-1.0)*x8441)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8443))+((cj1*sj2))+((x8435*x8440))+(((-1.0)*r22*x8444)));
evalcond[4]=((((-1.0)*x8438*x8443))+((x8435*x8439))+(((-1.0)*r02*x8444))+((cj0*x8436))+(((-1.0)*x8441*x8442)));
evalcond[5]=((((-1.0)*r12*x8444))+((sj0*x8436))+(((-1.0)*sj0*x8442))+((x8435*x8437))+(((-1.0)*r11*sj5*x8443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8446=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8446.valid){
continue;
}
CheckValue<IkReal> x8447 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8446.value)))+(x8447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8448=IKsin(j4);
IkReal x8449=IKcos(j4);
IkReal x8450=(cj1*cj2);
IkReal x8451=(cj5*r10);
IkReal x8452=(r01*sj5);
IkReal x8453=(cj5*r00);
IkReal x8454=(cj5*r20);
IkReal x8455=((1.0)*cj0);
IkReal x8456=(sj1*sj2);
IkReal x8457=((1.0)*x8449);
IkReal x8458=((1.0)*x8448);
IkReal x8459=(sj5*x8448);
evalcond[0]=(((r21*x8459))+(((-1.0)*x8454*x8458))+(((-1.0)*r22*x8457)));
evalcond[1]=(sj0+((x8448*x8452))+(((-1.0)*x8453*x8458))+(((-1.0)*r02*x8457)));
evalcond[2]=(((r11*x8459))+(((-1.0)*x8451*x8458))+(((-1.0)*r12*x8457))+(((-1.0)*x8455)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8457))+((cj1*sj2))+((x8449*x8454))+(((-1.0)*r22*x8458)));
evalcond[4]=((((-1.0)*x8452*x8457))+((x8449*x8453))+(((-1.0)*r02*x8458))+((cj0*x8450))+(((-1.0)*x8455*x8456)));
evalcond[5]=(((x8449*x8451))+(((-1.0)*r12*x8458))+(((-1.0)*sj0*x8456))+((sj0*x8450))+(((-1.0)*r11*sj5*x8457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8460=cj1*cj1;
IkReal x8461=cj2*cj2;
IkReal x8462=(cj1*cj2);
IkReal x8463=((66215110000.0)*sj5);
IkReal x8464=(sj1*sj2);
IkReal x8465=(cj5*r01);
IkReal x8466=(cj5*r11);
IkReal x8467=((70808400000.0)*cj1);
IkReal x8468=(r10*sj5);
IkReal x8469=((572300000000.0)*py);
IkReal x8470=((572300000000.0)*px);
IkReal x8471=((612000000000.0)*cj1);
IkReal x8472=(r00*sj5);
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(((((-66215110000.0)*x8464*x8466))+((py*x8471))+(((-18967973700.0)*x8472))+(((-18967973700.0)*x8465))+((x8467*x8468))+(((66215110000.0)*x8462*x8466))+(((-1.0)*r10*x8463*x8464))+((x8462*x8469))+((x8466*x8467))+((r10*x8462*x8463))+(((-1.0)*x8464*x8469))+(((-163941000000.0)*px)))),IkReal(((((-66215110000.0)*x8464*x8465))+((x8465*x8467))+(((163941000000.0)*py))+((r00*x8462*x8463))+(((66215110000.0)*x8462*x8465))+((x8467*x8472))+((px*x8471))+(((18967973700.0)*x8468))+(((18967973700.0)*x8466))+((x8462*x8470))+(((-1.0)*r00*x8463*x8464))+(((-1.0)*x8464*x8470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
CheckValue<IkReal> x8474=IKPowWithIntegerCheck(IKsign(((-354403941481.0)+(((327527290000.0)*x8461))+(((-700495200000.0)*cj2*x8460))+(((700495200000.0)*cj1*x8464))+(((-655054580000.0)*x8460*x8461))+(((655054580000.0)*x8462*x8464))+(((-47016710000.0)*x8460)))),-1);
if(!x8474.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8473.value)+(((1.5707963267949)*(x8474.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8475=IKcos(j0);
IkReal x8476=IKsin(j0);
IkReal x8477=((0.1157)*cj5);
IkReal x8478=((0.1157)*sj5);
IkReal x8479=((0.5723)*cj2);
IkReal x8480=((0.5723)*sj1*sj2);
IkReal x8481=(cj1*x8476);
IkReal x8482=(cj1*x8475);
evalcond[0]=((((-1.0)*px))+(((-0.612)*x8482))+(((-1.0)*x8479*x8482))+((x8475*x8480))+(((-1.0)*r01*x8477))+(((0.163941)*x8476))+(((-1.0)*r00*x8478)));
evalcond[1]=((((-0.163941)*x8475))+(((-1.0)*py))+(((-0.612)*x8481))+(((-1.0)*x8479*x8481))+(((-1.0)*r10*x8478))+(((-1.0)*r11*x8477))+((x8476*x8480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8483=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8483;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8484=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8484;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8485=((1.0)*cj5);
IkReal x8486=((((-1.0)*r21*x8485))+(((-1.0)*r20*sj5)));
j4eval[0]=x8486;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x8485))+(((-1.0)*cj0*r00*x8485))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x8486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8487=((-1.0)*r20);
IkReal x8489 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8489)==0){
continue;
}
IkReal x8488=pow(x8489,-0.5);
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8487),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8490.value));
IkReal gconst1=(r21*x8488);
IkReal gconst2=(x8487*x8488);
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8491.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8492=((-1.0)*r20);
IkReal x8493=x8488;
CheckValue<IkReal> x8495 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8492),IKFAST_ATAN2_MAGTHRESH);
if(!x8495.valid){
continue;
}
IkReal x8494=((-1.0)*(x8495.value));
sj5=gconst1;
cj5=gconst2;
j5=x8494;
IkReal gconst0=x8494;
IkReal gconst1=(r21*x8493);
IkReal gconst2=(x8492*x8493);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8496=((-1.0)*r20);
IkReal x8497=x8488;
CheckValue<IkReal> x8499 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8496),IKFAST_ATAN2_MAGTHRESH);
if(!x8499.valid){
continue;
}
IkReal x8498=((-1.0)*(x8499.value));
sj5=gconst1;
cj5=gconst2;
j5=x8498;
IkReal gconst0=x8498;
IkReal gconst1=(r21*x8497);
IkReal gconst2=(x8496*x8497);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8500=((-1.0)*r20);
IkReal x8501=x8488;
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8500),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
IkReal x8502=((-1.0)*(x8503.value));
sj5=gconst1;
cj5=gconst2;
j5=x8502;
IkReal gconst0=x8502;
IkReal gconst1=(r21*x8501);
IkReal gconst2=(x8500*x8501);
IkReal x8504=r22*r22;
CheckValue<IkReal> x8508=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8504))),-1);
if(!x8508.valid){
continue;
}
IkReal x8505=x8508.value;
IkReal x8506=(sj3*x8505);
IkReal x8507=(((sj3*x8504))+(((2.0)*x8506*(r20*r20)*(r21*r21)))+((x8506*(r21*r21*r21*r21)))+((x8506*(r20*r20*r20*r20))));
j4eval[0]=x8507;
j4eval[1]=IKsign(x8507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8509=((-1.0)*r20);
IkReal x8510=x8488;
CheckValue<IkReal> x8512 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8509),IKFAST_ATAN2_MAGTHRESH);
if(!x8512.valid){
continue;
}
IkReal x8511=((-1.0)*(x8512.value));
sj5=gconst1;
cj5=gconst2;
j5=x8511;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8511;
IkReal gconst1=(r21*x8510);
IkReal gconst2=(x8509*x8510);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8513=((-1.0)*r20);
IkReal x8514=x8488;
CheckValue<IkReal> x8516 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8513),IKFAST_ATAN2_MAGTHRESH);
if(!x8516.valid){
continue;
}
IkReal x8515=((-1.0)*(x8516.value));
sj5=gconst1;
cj5=gconst2;
j5=x8515;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8515;
IkReal gconst1=(r21*x8514);
IkReal gconst2=(x8513*x8514);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8517=((-1.0)*r20);
IkReal x8518=x8488;
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8517),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
IkReal x8519=((-1.0)*(x8520.value));
sj5=gconst1;
cj5=gconst2;
j5=x8519;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8519;
IkReal gconst1=(r21*x8518);
IkReal gconst2=(x8517*x8518);
IkReal x8521=((1.0)*(r22*r22));
CheckValue<IkReal> x8525=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8521))),-1);
if(!x8525.valid){
continue;
}
IkReal x8522=x8525.value;
IkReal x8523=((1.0)*x8522);
IkReal x8524=((((-1.0)*x8523*(r21*r21*r21*r21)))+(((-1.0)*x8521))+(((-2.0)*x8522*(r20*r20)*(r21*r21)))+(((-1.0)*x8523*(r20*r20*r20*r20))));
j4eval[0]=x8524;
j4eval[1]=IKsign(x8524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8526=((-1.0)*r20);
IkReal x8527=x8488;
CheckValue<IkReal> x8529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8526),IKFAST_ATAN2_MAGTHRESH);
if(!x8529.valid){
continue;
}
IkReal x8528=((-1.0)*(x8529.value));
sj5=gconst1;
cj5=gconst2;
j5=x8528;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8528;
IkReal gconst1=(r21*x8527);
IkReal gconst2=(x8526*x8527);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8530=((-1.0)*r20);
IkReal x8531=x8488;
CheckValue<IkReal> x8533 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8530),IKFAST_ATAN2_MAGTHRESH);
if(!x8533.valid){
continue;
}
IkReal x8532=((-1.0)*(x8533.value));
sj5=gconst1;
cj5=gconst2;
j5=x8532;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8532;
IkReal gconst1=(r21*x8531);
IkReal gconst2=(x8530*x8531);
IkReal x8534=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8538=IKPowWithIntegerCheck(x8534,-1);
if(!x8538.valid){
continue;
}
IkReal x8535=x8538.value;
IkReal x8536=((1.0)*x8535);
IkReal x8537=((((-2.0)*r00*r01*r20*r21*x8535))+(((-1.0)*(r02*r02)))+(((-1.0)*x8536*(r00*r00)*(r20*r20)))+(((-1.0)*x8536*(r01*r01)*(r21*r21))));
j4eval[0]=x8537;
j4eval[1]=IKsign(x8537);
j4eval[2]=r02;
j4eval[3]=x8534;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8539=((-1.0)*r20);
IkReal x8540=x8488;
CheckValue<IkReal> x8542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8539),IKFAST_ATAN2_MAGTHRESH);
if(!x8542.valid){
continue;
}
IkReal x8541=((-1.0)*(x8542.value));
sj5=gconst1;
cj5=gconst2;
j5=x8541;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8541;
IkReal gconst1=(r21*x8540);
IkReal gconst2=(x8539*x8540);
IkReal x8543=r22*r22;
IkReal x8544=((1.0)*r02);
IkReal x8545=(cj1*sj2);
IkReal x8546=(cj2*sj1);
CheckValue<IkReal> x8550=IKPowWithIntegerCheck(((-1.0)+x8543),-1);
if(!x8550.valid){
continue;
}
IkReal x8547=x8550.value;
if((((1.0)+(((-1.0)*x8543)))) < -0.00001)
continue;
IkReal x8548=IKsqrt(((1.0)+(((-1.0)*x8543))));
IkReal x8549=(r02*r22*x8547*x8548);
j4eval[0]=((IKabs((((x8546*x8549))+((x8545*x8549)))))+(IKabs(((((-1.0)*x8544*x8546))+(((-1.0)*x8544*x8545))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8551=(cj1*sj2);
IkReal x8552=(gconst1*r01);
IkReal x8553=((1.0)*r02);
IkReal x8554=(cj2*sj1);
IkReal x8555=((1.0)*gconst2*r00);
CheckValue<IkReal> x8556 = IKatan2WithCheck(IkReal((((x8551*x8552))+(((-1.0)*x8554*x8555))+(((-1.0)*x8551*x8555))+((x8552*x8554)))),IkReal(((((-1.0)*x8553*x8554))+(((-1.0)*x8551*x8553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8556.valid){
continue;
}
CheckValue<IkReal> x8557=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8556.value)+(((1.5707963267949)*(x8557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8558=IKcos(j4);
IkReal x8559=IKsin(j4);
IkReal x8560=((1.0)*x8558);
IkReal x8561=(gconst1*x8558);
IkReal x8562=(gconst1*x8559);
IkReal x8563=((1.0)*gconst2*x8559);
evalcond[0]=((((-1.0)*gconst2*r00*x8560))+((r02*x8559))+((r01*x8561)));
evalcond[1]=((((-1.0)*r22*x8560))+(((-1.0)*r20*x8563))+((r21*x8562)));
evalcond[2]=(((r11*x8562))+(((-1.0)*r12*x8560))+(((-1.0)*r10*x8563)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8563))+(((-1.0)*r02*x8560))+((r01*x8562)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8560))+((r22*x8559))+((r21*x8561)));
evalcond[5]=((((-1.0)*gconst2*r10*x8560))+((r12*x8559))+((r11*x8561))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8564=(gconst1*r01);
IkReal x8565=(gconst2*r00);
CheckValue<IkReal> x8566=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8564*x8564)))+(((2.0)*x8564*x8565))+(((-1.0)*(x8565*x8565))))),-1);
if(!x8566.valid){
continue;
}
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal((x8564+(((-1.0)*x8565)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8566.value)))+(x8567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8568=IKcos(j4);
IkReal x8569=IKsin(j4);
IkReal x8570=((1.0)*x8568);
IkReal x8571=(gconst1*x8568);
IkReal x8572=(gconst1*x8569);
IkReal x8573=((1.0)*gconst2*x8569);
evalcond[0]=((((-1.0)*gconst2*r00*x8570))+((r02*x8569))+((r01*x8571)));
evalcond[1]=((((-1.0)*r20*x8573))+((r21*x8572))+(((-1.0)*r22*x8570)));
evalcond[2]=(((r11*x8572))+(((-1.0)*r10*x8573))+(((-1.0)*r12*x8570)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8570))+((r01*x8572))+(((-1.0)*r00*x8573)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8571))+((r22*x8569))+(((-1.0)*gconst2*r20*x8570)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x8571))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8570))+((r12*x8569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
CheckValue<IkReal> x8575=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8574.value)+(((1.5707963267949)*(x8575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8576=IKcos(j4);
IkReal x8577=IKsin(j4);
IkReal x8578=((1.0)*x8576);
IkReal x8579=(gconst1*x8576);
IkReal x8580=(gconst1*x8577);
IkReal x8581=((1.0)*gconst2*x8577);
evalcond[0]=(((r02*x8577))+(((-1.0)*gconst2*r00*x8578))+((r01*x8579)));
evalcond[1]=((((-1.0)*r20*x8581))+((r21*x8580))+(((-1.0)*r22*x8578)));
evalcond[2]=(((r11*x8580))+(((-1.0)*r12*x8578))+(((-1.0)*r10*x8581)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8578))+((r01*x8580))+(((-1.0)*r00*x8581)));
evalcond[4]=(((cj2*sj1))+((r22*x8577))+((cj1*sj2))+((r21*x8579))+(((-1.0)*gconst2*r20*x8578)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8577))+((r11*x8579))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8582=((-1.0)*r20);
IkReal x8583=x8488;
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8582),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
IkReal x8584=((-1.0)*(x8585.value));
sj5=gconst1;
cj5=gconst2;
j5=x8584;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8584;
IkReal gconst1=(r21*x8583);
IkReal gconst2=(x8582*x8583);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8586=((-1.0)*r20);
IkReal x8587=x8488;
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8586),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
IkReal x8588=((-1.0)*(x8589.value));
sj5=gconst1;
cj5=gconst2;
j5=x8588;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8588;
IkReal gconst1=(r21*x8587);
IkReal gconst2=(x8586*x8587);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8590=((-1.0)*r20);
IkReal x8591=x8488;
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8590),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
IkReal x8592=((-1.0)*(x8593.value));
sj5=gconst1;
cj5=gconst2;
j5=x8592;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8592;
IkReal gconst1=(r21*x8591);
IkReal gconst2=(x8590*x8591);
IkReal x8594=r22*r22;
IkReal x8595=((1.0)*r02);
IkReal x8596=(cj1*sj2);
IkReal x8597=(cj2*sj1);
CheckValue<IkReal> x8601=IKPowWithIntegerCheck(((-1.0)+x8594),-1);
if(!x8601.valid){
continue;
}
IkReal x8598=x8601.value;
if((((1.0)+(((-1.0)*x8594)))) < -0.00001)
continue;
IkReal x8599=IKsqrt(((1.0)+(((-1.0)*x8594))));
IkReal x8600=(r02*r22*x8598*x8599);
j4eval[0]=((IKabs((((x8597*x8600))+((x8596*x8600)))))+(IKabs(((((-1.0)*x8595*x8596))+(((-1.0)*x8595*x8597))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8602=(cj1*sj2);
IkReal x8603=(gconst1*r01);
IkReal x8604=((1.0)*r02);
IkReal x8605=(cj2*sj1);
IkReal x8606=((1.0)*gconst2*r00);
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal(((((-1.0)*x8602*x8606))+((x8602*x8603))+(((-1.0)*x8605*x8606))+((x8603*x8605)))),IkReal(((((-1.0)*x8602*x8604))+(((-1.0)*x8604*x8605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8607.value)+(((1.5707963267949)*(x8608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8609=IKcos(j4);
IkReal x8610=IKsin(j4);
IkReal x8611=((1.0)*x8609);
IkReal x8612=(gconst1*x8609);
IkReal x8613=(gconst1*x8610);
IkReal x8614=((1.0)*gconst2*x8610);
evalcond[0]=(((r01*x8612))+(((-1.0)*gconst2*r00*x8611))+((r02*x8610)));
evalcond[1]=((((-1.0)*r22*x8611))+(((-1.0)*r20*x8614))+((r21*x8613)));
evalcond[2]=(((r11*x8613))+(((-1.0)*r12*x8611))+(((-1.0)*r10*x8614)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8611))+(((-1.0)*r00*x8614))+((r01*x8613)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8610))+((r21*x8612))+(((-1.0)*gconst2*r20*x8611)));
evalcond[5]=(((r12*x8610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8611))+((r11*x8612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8615=(gconst1*r01);
IkReal x8616=(gconst2*r00);
CheckValue<IkReal> x8617=IKPowWithIntegerCheck(IKsign(((x8615*x8615)+(r02*r02)+(x8616*x8616)+(((-2.0)*x8615*x8616)))),-1);
if(!x8617.valid){
continue;
}
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal((x8615+(((-1.0)*x8616)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8617.value)))+(x8618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8619=IKcos(j4);
IkReal x8620=IKsin(j4);
IkReal x8621=((1.0)*x8619);
IkReal x8622=(gconst1*x8619);
IkReal x8623=(gconst1*x8620);
IkReal x8624=((1.0)*gconst2*x8620);
evalcond[0]=(((r02*x8620))+(((-1.0)*gconst2*r00*x8621))+((r01*x8622)));
evalcond[1]=(((r21*x8623))+(((-1.0)*r22*x8621))+(((-1.0)*r20*x8624)));
evalcond[2]=((((-1.0)*r12*x8621))+(((-1.0)*r10*x8624))+((r11*x8623)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8624))+((r01*x8623))+(((-1.0)*r02*x8621)));
evalcond[4]=(((cj2*sj1))+((r21*x8622))+((cj1*sj2))+((r22*x8620))+(((-1.0)*gconst2*r20*x8621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8621))+((r12*x8620))+((r11*x8622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8625=((1.0)*gconst2);
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
CheckValue<IkReal> x8627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8625))+(((-1.0)*gconst1*r10)))),-1);
if(!x8627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8626.value)+(((1.5707963267949)*(x8627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8628=IKcos(j4);
IkReal x8629=IKsin(j4);
IkReal x8630=((1.0)*x8628);
IkReal x8631=(gconst1*x8628);
IkReal x8632=(gconst1*x8629);
IkReal x8633=((1.0)*gconst2*x8629);
evalcond[0]=(((r02*x8629))+(((-1.0)*gconst2*r00*x8630))+((r01*x8631)));
evalcond[1]=(((r21*x8632))+(((-1.0)*r22*x8630))+(((-1.0)*r20*x8633)));
evalcond[2]=((((-1.0)*r12*x8630))+(((-1.0)*r10*x8633))+((r11*x8632)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8633))+((r01*x8632))+(((-1.0)*r02*x8630)));
evalcond[4]=(((cj2*sj1))+((r21*x8631))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8630))+((r22*x8629)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8630))+((r12*x8629))+((r11*x8631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8634=((-1.0)*r20);
IkReal x8635=x8488;
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8634),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8636=((-1.0)*(x8637.value));
sj5=gconst1;
cj5=gconst2;
j5=x8636;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8636;
IkReal gconst1=(r21*x8635);
IkReal gconst2=(x8634*x8635);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8638=((-1.0)*r20);
IkReal x8639=x8488;
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8638),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
IkReal x8640=((-1.0)*(x8641.value));
sj5=gconst1;
cj5=gconst2;
j5=x8640;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8640;
IkReal gconst1=(r21*x8639);
IkReal gconst2=(x8638*x8639);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8642=((-1.0)*r20);
IkReal x8643=x8488;
CheckValue<IkReal> x8645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8642),IKFAST_ATAN2_MAGTHRESH);
if(!x8645.valid){
continue;
}
IkReal x8644=((-1.0)*(x8645.value));
sj5=gconst1;
cj5=gconst2;
j5=x8644;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8644;
IkReal gconst1=(r21*x8643);
IkReal gconst2=(x8642*x8643);
IkReal x8646=r22*r22;
IkReal x8647=(cj1*r12*sj2);
IkReal x8648=(cj2*r12*sj1);
CheckValue<IkReal> x8652=IKPowWithIntegerCheck(((-1.0)+x8646),-1);
if(!x8652.valid){
continue;
}
IkReal x8649=x8652.value;
if((((1.0)+(((-1.0)*x8646)))) < -0.00001)
continue;
IkReal x8650=IKsqrt(((1.0)+(((-1.0)*x8646))));
IkReal x8651=(r22*x8649*x8650);
j4eval[0]=((IKabs((((x8648*x8651))+((x8647*x8651)))))+(IKabs(((((-1.0)*x8648))+(((-1.0)*x8647))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8653=(cj1*sj2);
IkReal x8654=(cj2*sj1);
IkReal x8655=((1.0)*r12);
IkReal x8656=(gconst1*r11);
IkReal x8657=((1.0)*gconst2*r10);
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal((((x8654*x8656))+(((-1.0)*x8654*x8657))+((x8653*x8656))+(((-1.0)*x8653*x8657)))),IkReal(((((-1.0)*x8654*x8655))+(((-1.0)*x8653*x8655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
CheckValue<IkReal> x8659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8658.value)+(((1.5707963267949)*(x8659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8660=IKcos(j4);
IkReal x8661=IKsin(j4);
IkReal x8662=((1.0)*x8660);
IkReal x8663=(gconst1*x8660);
IkReal x8664=(gconst1*x8661);
IkReal x8665=((1.0)*gconst2*x8661);
evalcond[0]=(((r11*x8663))+((r12*x8661))+(((-1.0)*gconst2*r10*x8662)));
evalcond[1]=((((-1.0)*r22*x8662))+(((-1.0)*r20*x8665))+((r21*x8664)));
evalcond[2]=((((-1.0)*r00*x8665))+(((-1.0)*r02*x8662))+((r01*x8664)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8662))+((r11*x8664))+(((-1.0)*r10*x8665)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8661))+(((-1.0)*gconst2*r20*x8662))+((r21*x8663)));
evalcond[5]=((((-1.0)*gconst2*r00*x8662))+(((-1.0)*sj1*sj2))+((r01*x8663))+((r02*x8661))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8666=(gconst1*r11);
IkReal x8667=(gconst2*r10);
CheckValue<IkReal> x8668=IKPowWithIntegerCheck(IKsign(((x8667*x8667)+(r12*r12)+(x8666*x8666)+(((-2.0)*x8666*x8667)))),-1);
if(!x8668.valid){
continue;
}
CheckValue<IkReal> x8669 = IKatan2WithCheck(IkReal((x8666+(((-1.0)*x8667)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8668.value)))+(x8669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8670=IKcos(j4);
IkReal x8671=IKsin(j4);
IkReal x8672=((1.0)*x8670);
IkReal x8673=(gconst1*x8670);
IkReal x8674=(gconst1*x8671);
IkReal x8675=((1.0)*gconst2*x8671);
evalcond[0]=(((r11*x8673))+((r12*x8671))+(((-1.0)*gconst2*r10*x8672)));
evalcond[1]=((((-1.0)*r22*x8672))+(((-1.0)*r20*x8675))+((r21*x8674)));
evalcond[2]=((((-1.0)*r02*x8672))+(((-1.0)*r00*x8675))+((r01*x8674)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8672))+((r11*x8674))+(((-1.0)*r10*x8675)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8671))+(((-1.0)*gconst2*r20*x8672))+((r21*x8673)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8672))+((r01*x8673))+((r02*x8671))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
CheckValue<IkReal> x8677=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8676.value)+(((1.5707963267949)*(x8677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8678=IKcos(j4);
IkReal x8679=IKsin(j4);
IkReal x8680=((1.0)*x8678);
IkReal x8681=(gconst1*x8678);
IkReal x8682=(gconst1*x8679);
IkReal x8683=((1.0)*gconst2*x8679);
evalcond[0]=(((r11*x8681))+((r12*x8679))+(((-1.0)*gconst2*r10*x8680)));
evalcond[1]=((((-1.0)*r22*x8680))+(((-1.0)*r20*x8683))+((r21*x8682)));
evalcond[2]=((((-1.0)*r00*x8683))+(((-1.0)*r02*x8680))+((r01*x8682)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8680))+((r11*x8682))+(((-1.0)*r10*x8683)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8679))+((r21*x8681))+(((-1.0)*gconst2*r20*x8680)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8681))+(((-1.0)*gconst2*r00*x8680))+((r02*x8679))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8684=((-1.0)*r20);
IkReal x8685=x8488;
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8684),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
IkReal x8686=((-1.0)*(x8687.value));
sj5=gconst1;
cj5=gconst2;
j5=x8686;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8686;
IkReal gconst1=(r21*x8685);
IkReal gconst2=(x8684*x8685);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8688=((-1.0)*r20);
IkReal x8689=x8488;
CheckValue<IkReal> x8691 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8688),IKFAST_ATAN2_MAGTHRESH);
if(!x8691.valid){
continue;
}
IkReal x8690=((-1.0)*(x8691.value));
sj5=gconst1;
cj5=gconst2;
j5=x8690;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8690;
IkReal gconst1=(r21*x8689);
IkReal gconst2=(x8688*x8689);
IkReal x8692=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8696=IKPowWithIntegerCheck(x8692,-1);
if(!x8696.valid){
continue;
}
IkReal x8693=x8696.value;
IkReal x8694=((1.0)*x8693);
IkReal x8695=((((-1.0)*x8694*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8693))+(((-1.0)*x8694*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8695;
j4eval[1]=r12;
j4eval[2]=x8692;
j4eval[3]=IKsign(x8695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8697=((-1.0)*r20);
IkReal x8698=x8488;
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8697),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
IkReal x8699=((-1.0)*(x8700.value));
sj5=gconst1;
cj5=gconst2;
j5=x8699;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8699;
IkReal gconst1=(r21*x8698);
IkReal gconst2=(x8697*x8698);
IkReal x8701=r22*r22;
IkReal x8702=(cj1*r12*sj2);
IkReal x8703=(cj2*r12*sj1);
CheckValue<IkReal> x8707=IKPowWithIntegerCheck(((-1.0)+x8701),-1);
if(!x8707.valid){
continue;
}
IkReal x8704=x8707.value;
if((((1.0)+(((-1.0)*x8701)))) < -0.00001)
continue;
IkReal x8705=IKsqrt(((1.0)+(((-1.0)*x8701))));
IkReal x8706=(r22*x8704*x8705);
j4eval[0]=((IKabs((((x8702*x8706))+((x8703*x8706)))))+(IKabs(((((-1.0)*x8703))+(((-1.0)*x8702))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=(cj1*sj2);
IkReal x8709=(cj2*sj1);
IkReal x8710=((1.0)*r12);
IkReal x8711=(gconst1*r11);
IkReal x8712=((1.0)*gconst2*r10);
CheckValue<IkReal> x8713=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8713.valid){
continue;
}
CheckValue<IkReal> x8714 = IKatan2WithCheck(IkReal(((((-1.0)*x8709*x8712))+((x8709*x8711))+(((-1.0)*x8708*x8712))+((x8708*x8711)))),IkReal(((((-1.0)*x8709*x8710))+(((-1.0)*x8708*x8710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8713.value)))+(x8714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8715=IKcos(j4);
IkReal x8716=IKsin(j4);
IkReal x8717=((1.0)*x8715);
IkReal x8718=(gconst1*x8715);
IkReal x8719=(gconst1*x8716);
IkReal x8720=((1.0)*gconst2*x8716);
evalcond[0]=((((-1.0)*gconst2*r10*x8717))+((r11*x8718))+((r12*x8716)));
evalcond[1]=((((-1.0)*r22*x8717))+(((-1.0)*r20*x8720))+((r21*x8719)));
evalcond[2]=((((-1.0)*r02*x8717))+((r01*x8719))+(((-1.0)*r00*x8720)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8717))+((r11*x8719))+(((-1.0)*r10*x8720)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8716))+((r21*x8718))+(((-1.0)*gconst2*r20*x8717)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8717))+((r01*x8718))+((r02*x8716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8721=(gconst2*r10);
IkReal x8722=(gconst1*r11);
CheckValue<IkReal> x8723 = IKatan2WithCheck(IkReal((x8722+(((-1.0)*x8721)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8723.valid){
continue;
}
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(IKsign(((((2.0)*x8721*x8722))+(((-1.0)*(x8722*x8722)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8721*x8721))))),-1);
if(!x8724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8723.value)+(((1.5707963267949)*(x8724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8725=IKcos(j4);
IkReal x8726=IKsin(j4);
IkReal x8727=((1.0)*x8725);
IkReal x8728=(gconst1*x8725);
IkReal x8729=(gconst1*x8726);
IkReal x8730=((1.0)*gconst2*x8726);
evalcond[0]=(((r11*x8728))+((r12*x8726))+(((-1.0)*gconst2*r10*x8727)));
evalcond[1]=(((r21*x8729))+(((-1.0)*r20*x8730))+(((-1.0)*r22*x8727)));
evalcond[2]=((((-1.0)*r02*x8727))+(((-1.0)*r00*x8730))+((r01*x8729)));
evalcond[3]=((1.0)+((r11*x8729))+(((-1.0)*r10*x8730))+(((-1.0)*r12*x8727)));
evalcond[4]=(((cj2*sj1))+((r21*x8728))+((cj1*sj2))+((r22*x8726))+(((-1.0)*gconst2*r20*x8727)));
evalcond[5]=(((r02*x8726))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8727))+((r01*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8731=((1.0)*gconst2);
CheckValue<IkReal> x8732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8731)))),-1);
if(!x8732.valid){
continue;
}
CheckValue<IkReal> x8733 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8731))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8732.value)))+(x8733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8734=IKcos(j4);
IkReal x8735=IKsin(j4);
IkReal x8736=((1.0)*x8734);
IkReal x8737=(gconst1*x8734);
IkReal x8738=(gconst1*x8735);
IkReal x8739=((1.0)*gconst2*x8735);
evalcond[0]=(((r11*x8737))+((r12*x8735))+(((-1.0)*gconst2*r10*x8736)));
evalcond[1]=(((r21*x8738))+(((-1.0)*r20*x8739))+(((-1.0)*r22*x8736)));
evalcond[2]=((((-1.0)*r00*x8739))+(((-1.0)*r02*x8736))+((r01*x8738)));
evalcond[3]=((1.0)+((r11*x8738))+(((-1.0)*r10*x8739))+(((-1.0)*r12*x8736)));
evalcond[4]=(((cj2*sj1))+((r21*x8737))+((cj1*sj2))+((r22*x8735))+(((-1.0)*gconst2*r20*x8736)));
evalcond[5]=(((r02*x8735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8736))+((r01*x8737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8740=((-1.0)*r20);
IkReal x8741=((-1.0)*r21);
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(x8741),IkReal(x8740),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
IkReal x8742=((-1.0)*(x8743.value));
sj5=gconst1;
cj5=gconst2;
j5=x8742;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8740);
rxp0_2=(py*r00);
rxp1_0=(py*x8741);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8742;
IkReal gconst1=r21;
IkReal gconst2=x8740;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8744=((-1.0)*r20);
IkReal x8745=((-1.0)*r21);
CheckValue<IkReal> x8747 = IKatan2WithCheck(IkReal(x8745),IkReal(x8744),IKFAST_ATAN2_MAGTHRESH);
if(!x8747.valid){
continue;
}
IkReal x8746=((-1.0)*(x8747.value));
sj5=gconst1;
cj5=gconst2;
j5=x8746;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8744);
rxp0_2=(py*r00);
rxp1_0=(py*x8745);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8746;
IkReal gconst1=r21;
IkReal gconst2=x8744;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8748=((-1.0)*r20);
IkReal x8749=((-1.0)*r21);
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal(x8749),IkReal(x8748),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
IkReal x8750=((-1.0)*(x8751.value));
sj5=gconst1;
cj5=gconst2;
j5=x8750;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8748);
rxp0_2=(py*r00);
rxp1_0=(py*x8749);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8750;
IkReal gconst1=r21;
IkReal gconst2=x8748;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8754=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8754.valid){
continue;
}
IkReal x8752=x8754.value;
IkReal x8753=(cj0*x8752);
cj4array[0]=(((sj1*sj2*x8753))+(((-1.0)*cj1*cj2*x8753)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8755=IKsin(j4);
IkReal x8756=IKcos(j4);
IkReal x8757=(gconst1*r21);
IkReal x8758=(gconst2*r20);
IkReal x8759=((1.0)*x8756);
IkReal x8760=((1.0)*x8755);
evalcond[0]=(r12*x8755);
evalcond[1]=((((-1.0)*r12*x8759))+(((-1.0)*cj0)));
evalcond[2]=(((x8755*x8757))+(((-1.0)*x8758*x8760)));
evalcond[3]=(((gconst1*r01*x8755))+(((-1.0)*gconst2*r00*x8760)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8756*x8757))+(((-1.0)*x8758*x8759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8763.valid){
continue;
}
IkReal x8761=x8763.value;
IkReal x8762=((1.0)*x8761);
cj4array[0]=((((-1.0)*cj2*sj1*x8762))+(((-1.0)*cj1*sj2*x8762)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8764=IKsin(j4);
IkReal x8765=IKcos(j4);
IkReal x8766=((1.0)*cj0);
IkReal x8767=(gconst1*r01);
IkReal x8768=((1.0)*x8765);
IkReal x8769=((1.0)*gconst2*x8764);
evalcond[0]=(r12*x8764);
evalcond[1]=((((-1.0)*x8766))+(((-1.0)*r12*x8768)));
evalcond[2]=(((gconst1*r21*x8764))+(((-1.0)*r20*x8769)));
evalcond[3]=(((x8764*x8767))+(((-1.0)*r00*x8769)));
evalcond[4]=(((x8765*x8767))+((cj0*cj1*cj2))+(((-1.0)*gconst2*r00*x8768))+(((-1.0)*sj1*sj2*x8766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8770=IKPowWithIntegerCheck(r12,-1);
if(!x8770.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8770.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8771=IKsin(j4);
IkReal x8772=IKcos(j4);
IkReal x8773=(gconst1*x8772);
IkReal x8774=(gconst1*x8771);
IkReal x8775=((1.0)*gconst2*r20);
IkReal x8776=((1.0)*gconst2*r00);
evalcond[0]=(r12*x8771);
evalcond[1]=(((r21*x8774))+(((-1.0)*x8771*x8775)));
evalcond[2]=(((r01*x8774))+(((-1.0)*x8771*x8776)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8772*x8775))+((r21*x8773)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x8772*x8776))+((r01*x8773))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8777=(cj2*sj1);
IkReal x8778=(cj1*sj2);
IkReal x8779=(gconst1*r21);
IkReal x8780=((1.0)*gconst2*r20);
CheckValue<IkReal> x8781 = IKatan2WithCheck(IkReal((((r22*x8777))+((r22*x8778)))),IkReal(((((-1.0)*x8778*x8780))+(((-1.0)*x8777*x8780))+((x8778*x8779))+((x8777*x8779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8781.valid){
continue;
}
CheckValue<IkReal> x8782=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8779*x8779)))+(((2.0)*gconst2*r20*x8779))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst2*r20*x8780)))),-1);
if(!x8782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8781.value)+(((1.5707963267949)*(x8782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8783=IKsin(j4);
IkReal x8784=IKcos(j4);
IkReal x8785=(cj1*cj2);
IkReal x8786=((1.0)*cj0);
IkReal x8787=(sj1*sj2);
IkReal x8788=((1.0)*x8784);
IkReal x8789=(gconst1*x8784);
IkReal x8790=(gconst1*x8783);
IkReal x8791=((1.0)*gconst2*x8783);
evalcond[0]=(((r21*x8790))+(((-1.0)*r20*x8791))+(((-1.0)*r22*x8788)));
evalcond[1]=(sj0+(((-1.0)*r00*x8791))+(((-1.0)*r02*x8788))+((r01*x8790)));
evalcond[2]=(((r11*x8790))+(((-1.0)*r10*x8791))+(((-1.0)*x8786))+(((-1.0)*r12*x8788)));
evalcond[3]=(((cj2*sj1))+((r21*x8789))+((cj1*sj2))+((r22*x8783))+(((-1.0)*gconst2*r20*x8788)));
evalcond[4]=((((-1.0)*x8786*x8787))+((r02*x8783))+((cj0*x8785))+(((-1.0)*gconst2*r00*x8788))+((r01*x8789)));
evalcond[5]=(((r11*x8789))+((r12*x8783))+(((-1.0)*sj0*x8787))+(((-1.0)*gconst2*r10*x8788))+((sj0*x8785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8792.valid){
continue;
}
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8792.value)))+(x8793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8794=IKsin(j4);
IkReal x8795=IKcos(j4);
IkReal x8796=(cj1*cj2);
IkReal x8797=((1.0)*cj0);
IkReal x8798=(sj1*sj2);
IkReal x8799=((1.0)*x8795);
IkReal x8800=(gconst1*x8795);
IkReal x8801=(gconst1*x8794);
IkReal x8802=((1.0)*gconst2*x8794);
evalcond[0]=(((r21*x8801))+(((-1.0)*r20*x8802))+(((-1.0)*r22*x8799)));
evalcond[1]=(sj0+(((-1.0)*r00*x8802))+(((-1.0)*r02*x8799))+((r01*x8801)));
evalcond[2]=((((-1.0)*r12*x8799))+(((-1.0)*r10*x8802))+((r11*x8801))+(((-1.0)*x8797)));
evalcond[3]=(((cj2*sj1))+((r21*x8800))+(((-1.0)*gconst2*r20*x8799))+((cj1*sj2))+((r22*x8794)));
evalcond[4]=((((-1.0)*x8797*x8798))+((cj0*x8796))+((r02*x8794))+((r01*x8800))+(((-1.0)*gconst2*r00*x8799)));
evalcond[5]=(((r12*x8794))+(((-1.0)*sj0*x8798))+((r11*x8800))+(((-1.0)*gconst2*r10*x8799))+((sj0*x8796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8803.valid){
continue;
}
CheckValue<IkReal> x8804 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8803.value)))+(x8804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8805=IKsin(j4);
IkReal x8806=IKcos(j4);
IkReal x8807=(cj1*cj2);
IkReal x8808=((1.0)*cj0);
IkReal x8809=(sj1*sj2);
IkReal x8810=((1.0)*x8806);
IkReal x8811=(gconst1*x8806);
IkReal x8812=(gconst1*x8805);
IkReal x8813=((1.0)*gconst2*x8805);
evalcond[0]=(((r21*x8812))+(((-1.0)*r22*x8810))+(((-1.0)*r20*x8813)));
evalcond[1]=(sj0+(((-1.0)*r02*x8810))+((r01*x8812))+(((-1.0)*r00*x8813)));
evalcond[2]=((((-1.0)*r10*x8813))+(((-1.0)*r12*x8810))+((r11*x8812))+(((-1.0)*x8808)));
evalcond[3]=(((r21*x8811))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8810))+((r22*x8805))+((cj1*sj2)));
evalcond[4]=(((cj0*x8807))+((r02*x8805))+((r01*x8811))+(((-1.0)*x8808*x8809))+(((-1.0)*gconst2*r00*x8810)));
evalcond[5]=(((r12*x8805))+((r11*x8811))+((sj0*x8807))+(((-1.0)*gconst2*r10*x8810))+(((-1.0)*sj0*x8809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8814=((-1.0)*r20);
IkReal x8815=x8488;
CheckValue<IkReal> x8817 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8814),IKFAST_ATAN2_MAGTHRESH);
if(!x8817.valid){
continue;
}
IkReal x8816=((-1.0)*(x8817.value));
sj5=gconst1;
cj5=gconst2;
j5=x8816;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8816;
IkReal gconst1=(r21*x8815);
IkReal gconst2=(x8814*x8815);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8818=((-1.0)*r20);
IkReal x8819=x8488;
CheckValue<IkReal> x8821 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8818),IKFAST_ATAN2_MAGTHRESH);
if(!x8821.valid){
continue;
}
IkReal x8820=((-1.0)*(x8821.value));
sj5=gconst1;
cj5=gconst2;
j5=x8820;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8820;
IkReal gconst1=(r21*x8819);
IkReal gconst2=(x8818*x8819);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8822=((-1.0)*r20);
IkReal x8823=x8488;
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8822),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
IkReal x8824=((-1.0)*(x8825.value));
sj5=gconst1;
cj5=gconst2;
j5=x8824;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8824;
IkReal gconst1=(r21*x8823);
IkReal gconst2=(x8822*x8823);
IkReal x8826=r22*r22;
CheckValue<IkReal> x8829=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8826))),-1);
if(!x8829.valid){
continue;
}
IkReal x8827=x8829.value;
IkReal x8828=((((2.0)*x8827*(r20*r20)*(r21*r21)))+x8826+((x8827*(r20*r20*r20*r20)))+((x8827*(r21*r21*r21*r21))));
j4eval[0]=x8828;
j4eval[1]=IKsign(x8828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8830=((-1.0)*r20);
IkReal x8831=x8488;
CheckValue<IkReal> x8833 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8830),IKFAST_ATAN2_MAGTHRESH);
if(!x8833.valid){
continue;
}
IkReal x8832=((-1.0)*(x8833.value));
sj5=gconst1;
cj5=gconst2;
j5=x8832;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8832;
IkReal gconst1=(r21*x8831);
IkReal gconst2=(x8830*x8831);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8834=((-1.0)*r20);
IkReal x8835=x8488;
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8834),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
IkReal x8836=((-1.0)*(x8837.value));
sj5=gconst1;
cj5=gconst2;
j5=x8836;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8836;
IkReal gconst1=(r21*x8835);
IkReal gconst2=(x8834*x8835);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8838=((-1.0)*r20);
IkReal x8839=x8488;
CheckValue<IkReal> x8841 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8838),IKFAST_ATAN2_MAGTHRESH);
if(!x8841.valid){
continue;
}
IkReal x8840=((-1.0)*(x8841.value));
sj5=gconst1;
cj5=gconst2;
j5=x8840;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8840;
IkReal gconst1=(r21*x8839);
IkReal gconst2=(x8838*x8839);
IkReal x8842=r22*r22;
IkReal x8843=(cj1*r02*sj2);
IkReal x8844=(cj2*r02*sj1);
CheckValue<IkReal> x8848=IKPowWithIntegerCheck(((-1.0)+x8842),-1);
if(!x8848.valid){
continue;
}
IkReal x8845=x8848.value;
if((((1.0)+(((-1.0)*x8842)))) < -0.00001)
continue;
IkReal x8846=IKsqrt(((1.0)+(((-1.0)*x8842))));
IkReal x8847=((1.0)*r22*x8845*x8846);
j4eval[0]=((IKabs(((((-1.0)*x8844*x8847))+(((-1.0)*x8843*x8847)))))+(IKabs((x8843+x8844))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8849=(cj2*sj1);
IkReal x8850=(cj1*sj2);
IkReal x8851=(gconst2*r00);
IkReal x8852=((1.0)*gconst1*r01);
CheckValue<IkReal> x8853=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8853.valid){
continue;
}
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal((((x8850*x8851))+(((-1.0)*x8849*x8852))+(((-1.0)*x8850*x8852))+((x8849*x8851)))),IkReal((((r02*x8849))+((r02*x8850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8853.value)))+(x8854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8855=IKsin(j4);
IkReal x8856=IKcos(j4);
IkReal x8857=(gconst1*r11);
IkReal x8858=(gconst1*r21);
IkReal x8859=(gconst1*r01);
IkReal x8860=((1.0)*x8856);
IkReal x8861=(gconst2*x8856);
IkReal x8862=((1.0)*x8855);
evalcond[0]=((((-1.0)*r22*x8860))+(((-1.0)*gconst2*r20*x8862))+((x8855*x8858)));
evalcond[1]=((((-1.0)*r12*x8860))+(((-1.0)*gconst2*r10*x8862))+((x8855*x8857)));
evalcond[2]=(((r00*x8861))+(((-1.0)*r02*x8862))+(((-1.0)*x8859*x8860)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8860))+(((-1.0)*gconst2*r00*x8862))+((x8855*x8859)));
evalcond[4]=(((cj2*sj1))+((r20*x8861))+((cj1*sj2))+(((-1.0)*r22*x8862))+(((-1.0)*x8858*x8860)));
evalcond[5]=((((-1.0)*x8857*x8860))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8862))+((r10*x8861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8863=(gconst1*r01);
IkReal x8864=(gconst2*r00);
CheckValue<IkReal> x8865 = IKatan2WithCheck(IkReal((x8864+(((-1.0)*x8863)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8863*x8864))+(x8863*x8863)+(r02*r02)+(x8864*x8864))),-1);
if(!x8866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8865.value)+(((1.5707963267949)*(x8866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8867=IKsin(j4);
IkReal x8868=IKcos(j4);
IkReal x8869=(gconst1*r11);
IkReal x8870=(gconst1*r21);
IkReal x8871=(gconst1*r01);
IkReal x8872=((1.0)*x8868);
IkReal x8873=(gconst2*x8868);
IkReal x8874=((1.0)*x8867);
evalcond[0]=((((-1.0)*r22*x8872))+(((-1.0)*gconst2*r20*x8874))+((x8867*x8870)));
evalcond[1]=((((-1.0)*gconst2*r10*x8874))+(((-1.0)*r12*x8872))+((x8867*x8869)));
evalcond[2]=((((-1.0)*x8871*x8872))+(((-1.0)*r02*x8874))+((r00*x8873)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8872))+(((-1.0)*gconst2*r00*x8874))+((x8867*x8871)));
evalcond[4]=((((-1.0)*x8870*x8872))+((cj2*sj1))+((r20*x8873))+(((-1.0)*r22*x8874))+((cj1*sj2)));
evalcond[5]=(((r10*x8873))+(((-1.0)*sj1*sj2))+(((-1.0)*x8869*x8872))+(((-1.0)*r12*x8874))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8875 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8875.valid){
continue;
}
CheckValue<IkReal> x8876=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8875.value)+(((1.5707963267949)*(x8876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8877=IKsin(j4);
IkReal x8878=IKcos(j4);
IkReal x8879=(gconst1*r11);
IkReal x8880=(gconst1*r21);
IkReal x8881=(gconst1*r01);
IkReal x8882=((1.0)*x8878);
IkReal x8883=(gconst2*x8878);
IkReal x8884=((1.0)*x8877);
evalcond[0]=((((-1.0)*r22*x8882))+((x8877*x8880))+(((-1.0)*gconst2*r20*x8884)));
evalcond[1]=(((x8877*x8879))+(((-1.0)*r12*x8882))+(((-1.0)*gconst2*r10*x8884)));
evalcond[2]=((((-1.0)*x8881*x8882))+((r00*x8883))+(((-1.0)*r02*x8884)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8884))+(((-1.0)*r02*x8882))+((x8877*x8881)));
evalcond[4]=((((-1.0)*r22*x8884))+((cj2*sj1))+((cj1*sj2))+((r20*x8883))+(((-1.0)*x8880*x8882)));
evalcond[5]=((((-1.0)*r12*x8884))+(((-1.0)*sj1*sj2))+((r10*x8883))+(((-1.0)*x8879*x8882))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8885=((-1.0)*r20);
IkReal x8886=x8488;
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8885),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
IkReal x8887=((-1.0)*(x8888.value));
sj5=gconst1;
cj5=gconst2;
j5=x8887;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8887;
IkReal gconst1=(r21*x8886);
IkReal gconst2=(x8885*x8886);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8889=((-1.0)*r20);
IkReal x8890=x8488;
CheckValue<IkReal> x8892 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8889),IKFAST_ATAN2_MAGTHRESH);
if(!x8892.valid){
continue;
}
IkReal x8891=((-1.0)*(x8892.value));
sj5=gconst1;
cj5=gconst2;
j5=x8891;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8891;
IkReal gconst1=(r21*x8890);
IkReal gconst2=(x8889*x8890);
IkReal x8893=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8897=IKPowWithIntegerCheck(x8893,-1);
if(!x8897.valid){
continue;
}
IkReal x8894=x8897.value;
IkReal x8895=((1.0)*x8894);
IkReal x8896=((((-1.0)*(r02*r02)))+(((-1.0)*x8895*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8894))+(((-1.0)*x8895*(r00*r00)*(r20*r20))));
j4eval[0]=x8896;
j4eval[1]=IKsign(x8896);
j4eval[2]=r02;
j4eval[3]=x8893;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8898=((-1.0)*r20);
IkReal x8899=x8488;
CheckValue<IkReal> x8901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8898),IKFAST_ATAN2_MAGTHRESH);
if(!x8901.valid){
continue;
}
IkReal x8900=((-1.0)*(x8901.value));
sj5=gconst1;
cj5=gconst2;
j5=x8900;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8900;
IkReal gconst1=(r21*x8899);
IkReal gconst2=(x8898*x8899);
IkReal x8902=r22*r22;
IkReal x8903=(cj1*r02*sj2);
IkReal x8904=(cj2*r02*sj1);
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(((-1.0)+x8902),-1);
if(!x8908.valid){
continue;
}
IkReal x8905=x8908.value;
if((((1.0)+(((-1.0)*x8902)))) < -0.00001)
continue;
IkReal x8906=IKsqrt(((1.0)+(((-1.0)*x8902))));
IkReal x8907=((1.0)*r22*x8905*x8906);
j4eval[0]=((IKabs((x8904+x8903)))+(IKabs(((((-1.0)*x8903*x8907))+(((-1.0)*x8904*x8907))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8909=(cj2*sj1);
IkReal x8910=(cj1*sj2);
IkReal x8911=(gconst2*r00);
IkReal x8912=((1.0)*gconst1*r01);
CheckValue<IkReal> x8913 = IKatan2WithCheck(IkReal(((((-1.0)*x8909*x8912))+((x8910*x8911))+(((-1.0)*x8910*x8912))+((x8909*x8911)))),IkReal((((r02*x8910))+((r02*x8909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8913.valid){
continue;
}
CheckValue<IkReal> x8914=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8913.value)+(((1.5707963267949)*(x8914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8915=IKsin(j4);
IkReal x8916=IKcos(j4);
IkReal x8917=(gconst1*r11);
IkReal x8918=(gconst1*r21);
IkReal x8919=(gconst1*r01);
IkReal x8920=((1.0)*x8916);
IkReal x8921=(gconst2*x8916);
IkReal x8922=((1.0)*x8915);
evalcond[0]=((((-1.0)*r22*x8920))+(((-1.0)*gconst2*r20*x8922))+((x8915*x8918)));
evalcond[1]=((((-1.0)*gconst2*r10*x8922))+((x8915*x8917))+(((-1.0)*r12*x8920)));
evalcond[2]=((((-1.0)*r02*x8922))+(((-1.0)*x8919*x8920))+((r00*x8921)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8920))+((x8915*x8919))+(((-1.0)*gconst2*r00*x8922)));
evalcond[4]=(((r20*x8921))+((cj2*sj1))+(((-1.0)*r22*x8922))+(((-1.0)*x8918*x8920))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8922))+(((-1.0)*x8917*x8920))+((r10*x8921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8923=(gconst2*r00);
IkReal x8924=(gconst1*r01);
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal((x8923+(((-1.0)*x8924)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
CheckValue<IkReal> x8926=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8924*x8924)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8923*x8923)))+(((2.0)*x8923*x8924)))),-1);
if(!x8926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8925.value)+(((1.5707963267949)*(x8926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8927=IKsin(j4);
IkReal x8928=IKcos(j4);
IkReal x8929=(gconst1*r11);
IkReal x8930=(gconst1*r21);
IkReal x8931=(gconst1*r01);
IkReal x8932=((1.0)*x8928);
IkReal x8933=(gconst2*x8928);
IkReal x8934=((1.0)*x8927);
evalcond[0]=((((-1.0)*r22*x8932))+((x8927*x8930))+(((-1.0)*gconst2*r20*x8934)));
evalcond[1]=((((-1.0)*r12*x8932))+(((-1.0)*gconst2*r10*x8934))+((x8927*x8929)));
evalcond[2]=((((-1.0)*x8931*x8932))+(((-1.0)*r02*x8934))+((r00*x8933)));
evalcond[3]=((-1.0)+((x8927*x8931))+(((-1.0)*gconst2*r00*x8934))+(((-1.0)*r02*x8932)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8934))+((cj1*sj2))+((r20*x8933))+(((-1.0)*x8930*x8932)));
evalcond[5]=((((-1.0)*r12*x8934))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8933))+(((-1.0)*x8929*x8932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8935=((1.0)*gconst2);
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8935))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
CheckValue<IkReal> x8937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8935))+(((-1.0)*gconst1*r10)))),-1);
if(!x8937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8936.value)+(((1.5707963267949)*(x8937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8938=IKsin(j4);
IkReal x8939=IKcos(j4);
IkReal x8940=(gconst1*r11);
IkReal x8941=(gconst1*r21);
IkReal x8942=(gconst1*r01);
IkReal x8943=((1.0)*x8939);
IkReal x8944=(gconst2*x8939);
IkReal x8945=((1.0)*x8938);
evalcond[0]=(((x8938*x8941))+(((-1.0)*r22*x8943))+(((-1.0)*gconst2*r20*x8945)));
evalcond[1]=(((x8938*x8940))+(((-1.0)*r12*x8943))+(((-1.0)*gconst2*r10*x8945)));
evalcond[2]=((((-1.0)*x8942*x8943))+(((-1.0)*r02*x8945))+((r00*x8944)));
evalcond[3]=((-1.0)+((x8938*x8942))+(((-1.0)*r02*x8943))+(((-1.0)*gconst2*r00*x8945)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8945))+((cj1*sj2))+(((-1.0)*x8941*x8943))+((r20*x8944)));
evalcond[5]=((((-1.0)*r12*x8945))+(((-1.0)*x8940*x8943))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8946=((-1.0)*r20);
IkReal x8947=x8488;
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8948=((-1.0)*(x8949.value));
sj5=gconst1;
cj5=gconst2;
j5=x8948;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8948;
IkReal gconst1=(r21*x8947);
IkReal gconst2=(x8946*x8947);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8950=((-1.0)*r20);
IkReal x8951=x8488;
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8952=((-1.0)*(x8953.value));
sj5=gconst1;
cj5=gconst2;
j5=x8952;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8952;
IkReal gconst1=(r21*x8951);
IkReal gconst2=(x8950*x8951);
IkReal x8954=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8958=IKPowWithIntegerCheck(x8954,-1);
if(!x8958.valid){
continue;
}
IkReal x8955=x8958.value;
IkReal x8956=((1.0)*x8955);
IkReal x8957=((((-1.0)*x8956*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8955))+(((-1.0)*x8956*(r11*r11)*(r21*r21))));
j4eval[0]=x8957;
j4eval[1]=r12;
j4eval[2]=x8954;
j4eval[3]=IKsign(x8957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8959=((-1.0)*r20);
IkReal x8960=x8488;
CheckValue<IkReal> x8962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8959),IKFAST_ATAN2_MAGTHRESH);
if(!x8962.valid){
continue;
}
IkReal x8961=((-1.0)*(x8962.value));
sj5=gconst1;
cj5=gconst2;
j5=x8961;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8961;
IkReal gconst1=(r21*x8960);
IkReal gconst2=(x8959*x8960);
IkReal x8963=r22*r22;
IkReal x8964=(cj1*r12*sj2);
IkReal x8965=(cj2*r12*sj1);
CheckValue<IkReal> x8969=IKPowWithIntegerCheck(((-1.0)+x8963),-1);
if(!x8969.valid){
continue;
}
IkReal x8966=x8969.value;
if((((1.0)+(((-1.0)*x8963)))) < -0.00001)
continue;
IkReal x8967=IKsqrt(((1.0)+(((-1.0)*x8963))));
IkReal x8968=((1.0)*r22*x8966*x8967);
j4eval[0]=((IKabs(((((-1.0)*x8965*x8968))+(((-1.0)*x8964*x8968)))))+(IKabs((x8965+x8964))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8970=((1.0)*gconst1);
IkReal x8971=(cj2*sj1);
IkReal x8972=(gconst2*r10);
IkReal x8973=(cj1*sj2);
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8970)))),-1);
if(!x8974.valid){
continue;
}
CheckValue<IkReal> x8975 = IKatan2WithCheck(IkReal((((x8972*x8973))+((x8971*x8972))+(((-1.0)*r11*x8970*x8971))+(((-1.0)*r11*x8970*x8973)))),IkReal((((r12*x8973))+((r12*x8971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8974.value)))+(x8975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8976=IKsin(j4);
IkReal x8977=IKcos(j4);
IkReal x8978=((1.0)*x8977);
IkReal x8979=(gconst2*x8977);
IkReal x8980=(gconst1*x8976);
IkReal x8981=((1.0)*x8976);
evalcond[0]=((((-1.0)*gconst2*r20*x8981))+(((-1.0)*r22*x8978))+((r21*x8980)));
evalcond[1]=(((r01*x8980))+(((-1.0)*gconst2*r00*x8981))+(((-1.0)*r02*x8978)));
evalcond[2]=(((r10*x8979))+(((-1.0)*r12*x8981))+(((-1.0)*gconst1*r11*x8978)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x8981))+((r11*x8980))+(((-1.0)*r12*x8978)));
evalcond[4]=(((cj2*sj1))+((r20*x8979))+((cj1*sj2))+(((-1.0)*gconst1*r21*x8978))+(((-1.0)*r22*x8981)));
evalcond[5]=((((-1.0)*r02*x8981))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x8978))+((r00*x8979))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8982=(gconst1*r11);
IkReal x8983=(gconst2*r10);
CheckValue<IkReal> x8984=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8982*x8982)))+(((-1.0)*(x8983*x8983)))+(((-1.0)*(r12*r12)))+(((2.0)*x8982*x8983)))),-1);
if(!x8984.valid){
continue;
}
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((((-1.0)*x8982))+x8983)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8984.value)))+(x8985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8986=IKsin(j4);
IkReal x8987=IKcos(j4);
IkReal x8988=((1.0)*x8987);
IkReal x8989=(gconst2*x8987);
IkReal x8990=(gconst1*x8986);
IkReal x8991=((1.0)*x8986);
evalcond[0]=(((r21*x8990))+(((-1.0)*gconst2*r20*x8991))+(((-1.0)*r22*x8988)));
evalcond[1]=((((-1.0)*r02*x8988))+((r01*x8990))+(((-1.0)*gconst2*r00*x8991)));
evalcond[2]=((((-1.0)*r12*x8991))+(((-1.0)*gconst1*r11*x8988))+((r10*x8989)));
evalcond[3]=((-1.0)+((r11*x8990))+(((-1.0)*r12*x8988))+(((-1.0)*gconst2*r10*x8991)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8991))+((r20*x8989))+(((-1.0)*gconst1*r21*x8988)));
evalcond[5]=(((r00*x8989))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x8988))+(((-1.0)*r02*x8991))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8992 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8992.valid){
continue;
}
CheckValue<IkReal> x8993=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8992.value)+(((1.5707963267949)*(x8993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8994=IKsin(j4);
IkReal x8995=IKcos(j4);
IkReal x8996=((1.0)*x8995);
IkReal x8997=(gconst2*x8995);
IkReal x8998=(gconst1*x8994);
IkReal x8999=((1.0)*x8994);
evalcond[0]=(((r21*x8998))+(((-1.0)*gconst2*r20*x8999))+(((-1.0)*r22*x8996)));
evalcond[1]=(((r01*x8998))+(((-1.0)*r02*x8996))+(((-1.0)*gconst2*r00*x8999)));
evalcond[2]=((((-1.0)*r12*x8999))+((r10*x8997))+(((-1.0)*gconst1*r11*x8996)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8996))+((r11*x8998))+(((-1.0)*gconst2*r10*x8999)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x8996))+((cj1*sj2))+((r20*x8997))+(((-1.0)*r22*x8999)));
evalcond[5]=((((-1.0)*gconst1*r01*x8996))+(((-1.0)*sj1*sj2))+((r00*x8997))+(((-1.0)*r02*x8999))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9000=((-1.0)*r20);
IkReal x9001=x8488;
CheckValue<IkReal> x9003 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9000),IKFAST_ATAN2_MAGTHRESH);
if(!x9003.valid){
continue;
}
IkReal x9002=((-1.0)*(x9003.value));
sj5=gconst1;
cj5=gconst2;
j5=x9002;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9002;
IkReal gconst1=(r21*x9001);
IkReal gconst2=(x9000*x9001);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9004=((-1.0)*r20);
IkReal x9005=x8488;
CheckValue<IkReal> x9007 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9004),IKFAST_ATAN2_MAGTHRESH);
if(!x9007.valid){
continue;
}
IkReal x9006=((-1.0)*(x9007.value));
sj5=gconst1;
cj5=gconst2;
j5=x9006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9006;
IkReal gconst1=(r21*x9005);
IkReal gconst2=(x9004*x9005);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9008=((-1.0)*r20);
IkReal x9009=x8488;
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9008),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
IkReal x9010=((-1.0)*(x9011.value));
sj5=gconst1;
cj5=gconst2;
j5=x9010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9010;
IkReal gconst1=(r21*x9009);
IkReal gconst2=(x9008*x9009);
IkReal x9012=r22*r22;
IkReal x9013=(cj1*r12*sj2);
IkReal x9014=(cj2*r12*sj1);
CheckValue<IkReal> x9018=IKPowWithIntegerCheck(((-1.0)+x9012),-1);
if(!x9018.valid){
continue;
}
IkReal x9015=x9018.value;
if((((1.0)+(((-1.0)*x9012)))) < -0.00001)
continue;
IkReal x9016=IKsqrt(((1.0)+(((-1.0)*x9012))));
IkReal x9017=((1.0)*r22*x9015*x9016);
j4eval[0]=((IKabs((x9014+x9013)))+(IKabs(((((-1.0)*x9014*x9017))+(((-1.0)*x9013*x9017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9019=((1.0)*gconst1);
IkReal x9020=(cj2*sj1);
IkReal x9021=(gconst2*r10);
IkReal x9022=(cj1*sj2);
CheckValue<IkReal> x9023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9019))+(((-1.0)*gconst2*r01)))),-1);
if(!x9023.valid){
continue;
}
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9019*x9020))+(((-1.0)*r11*x9019*x9022))+((x9020*x9021))+((x9021*x9022)))),IkReal((((r12*x9020))+((r12*x9022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9023.value)))+(x9024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9025=IKsin(j4);
IkReal x9026=IKcos(j4);
IkReal x9027=((1.0)*x9026);
IkReal x9028=(gconst2*x9026);
IkReal x9029=(gconst1*x9025);
IkReal x9030=((1.0)*x9025);
evalcond[0]=((((-1.0)*gconst2*r20*x9030))+((r21*x9029))+(((-1.0)*r22*x9027)));
evalcond[1]=(((r01*x9029))+(((-1.0)*r02*x9027))+(((-1.0)*gconst2*r00*x9030)));
evalcond[2]=((((-1.0)*r12*x9030))+(((-1.0)*gconst1*r11*x9027))+((r10*x9028)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9027))+(((-1.0)*gconst2*r10*x9030))+((r11*x9029)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9027))+(((-1.0)*r22*x9030))+((r20*x9028)));
evalcond[5]=(((r00*x9028))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9027))+(((-1.0)*r02*x9030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9031=(gconst1*r11);
IkReal x9032=(gconst2*r10);
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal((x9032+(((-1.0)*x9031)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9032*x9032)+(((-2.0)*x9031*x9032))+(x9031*x9031))),-1);
if(!x9034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9033.value)+(((1.5707963267949)*(x9034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9035=IKsin(j4);
IkReal x9036=IKcos(j4);
IkReal x9037=((1.0)*x9036);
IkReal x9038=(gconst2*x9036);
IkReal x9039=(gconst1*x9035);
IkReal x9040=((1.0)*x9035);
evalcond[0]=(((r21*x9039))+(((-1.0)*r22*x9037))+(((-1.0)*gconst2*r20*x9040)));
evalcond[1]=(((r01*x9039))+(((-1.0)*gconst2*r00*x9040))+(((-1.0)*r02*x9037)));
evalcond[2]=((((-1.0)*gconst1*r11*x9037))+((r10*x9038))+(((-1.0)*r12*x9040)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9037))+((r11*x9039))+(((-1.0)*gconst2*r10*x9040)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9040))+(((-1.0)*gconst1*r21*x9037))+((r20*x9038)));
evalcond[5]=(((r00*x9038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9037))+(((-1.0)*r02*x9040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9041=((1.0)*gconst2);
CheckValue<IkReal> x9042=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9041)))),-1);
if(!x9042.valid){
continue;
}
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9042.value)))+(x9043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9044=IKsin(j4);
IkReal x9045=IKcos(j4);
IkReal x9046=((1.0)*x9045);
IkReal x9047=(gconst2*x9045);
IkReal x9048=(gconst1*x9044);
IkReal x9049=((1.0)*x9044);
evalcond[0]=((((-1.0)*r22*x9046))+((r21*x9048))+(((-1.0)*gconst2*r20*x9049)));
evalcond[1]=(((r01*x9048))+(((-1.0)*gconst2*r00*x9049))+(((-1.0)*r02*x9046)));
evalcond[2]=((((-1.0)*gconst1*r11*x9046))+(((-1.0)*r12*x9049))+((r10*x9047)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9046))+((r11*x9048))+(((-1.0)*gconst2*r10*x9049)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9046))+((cj1*sj2))+((r20*x9047))+(((-1.0)*r22*x9049)));
evalcond[5]=((((-1.0)*gconst1*r01*x9046))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9047))+(((-1.0)*r02*x9049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9050=((-1.0)*r20);
IkReal x9051=((-1.0)*r21);
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal(x9051),IkReal(x9050),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
IkReal x9052=((-1.0)*(x9053.value));
sj5=gconst1;
cj5=gconst2;
j5=x9052;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9050);
rxp0_2=(py*r00);
rxp1_0=(py*x9051);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9052;
IkReal gconst1=r21;
IkReal gconst2=x9050;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9054=((-1.0)*r20);
IkReal x9055=((-1.0)*r21);
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal(x9055),IkReal(x9054),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
IkReal x9056=((-1.0)*(x9057.value));
sj5=gconst1;
cj5=gconst2;
j5=x9056;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9054);
rxp0_2=(py*r00);
rxp1_0=(py*x9055);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9056;
IkReal gconst1=r21;
IkReal gconst2=x9054;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9058=((-1.0)*r20);
IkReal x9059=((-1.0)*r21);
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal(x9059),IkReal(x9058),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
IkReal x9060=((-1.0)*(x9061.value));
sj5=gconst1;
cj5=gconst2;
j5=x9060;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9058);
rxp0_2=(py*r00);
rxp1_0=(py*x9059);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9060;
IkReal gconst1=r21;
IkReal gconst2=x9058;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9064=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9064.valid){
continue;
}
IkReal x9062=x9064.value;
IkReal x9063=(cj0*x9062);
cj4array[0]=((((-1.0)*cj1*cj2*x9063))+((sj1*sj2*x9063)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9065=IKsin(j4);
IkReal x9066=IKcos(j4);
IkReal x9067=(gconst2*r20);
IkReal x9068=(gconst1*x9065);
IkReal x9069=((1.0)*x9066);
IkReal x9070=((1.0)*x9065);
evalcond[0]=((-1.0)*r12*x9065);
evalcond[1]=((((-1.0)*r12*x9069))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9068))+(((-1.0)*x9067*x9070)));
evalcond[3]=(((r01*x9068))+(((-1.0)*gconst2*r00*x9070)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9066*x9067))+(((-1.0)*gconst1*r21*x9069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9073=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9073.valid){
continue;
}
IkReal x9071=x9073.value;
IkReal x9072=((1.0)*x9071);
cj4array[0]=((((-1.0)*cj1*sj2*x9072))+(((-1.0)*cj2*sj1*x9072)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9074=IKsin(j4);
IkReal x9075=IKcos(j4);
IkReal x9076=(gconst2*r00);
IkReal x9077=(gconst1*r01);
IkReal x9078=((1.0)*cj0);
IkReal x9079=((1.0)*x9075);
IkReal x9080=((1.0)*x9074);
evalcond[0]=((-1.0)*r12*x9074);
evalcond[1]=((((-1.0)*r12*x9079))+(((-1.0)*x9078)));
evalcond[2]=((((-1.0)*gconst2*r20*x9080))+((gconst1*r21*x9074)));
evalcond[3]=((((-1.0)*x9076*x9080))+((x9074*x9077)));
evalcond[4]=(((x9075*x9076))+((cj0*cj1*cj2))+(((-1.0)*x9077*x9079))+(((-1.0)*sj1*sj2*x9078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9081=IKPowWithIntegerCheck(r12,-1);
if(!x9081.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9081.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9082=IKsin(j4);
IkReal x9083=IKcos(j4);
IkReal x9084=(gconst2*x9083);
IkReal x9085=(gconst1*x9082);
IkReal x9086=((1.0)*gconst1*x9083);
IkReal x9087=((1.0)*gconst2*x9082);
evalcond[0]=((-1.0)*r12*x9082);
evalcond[1]=(((r21*x9085))+(((-1.0)*r20*x9087)));
evalcond[2]=((((-1.0)*r00*x9087))+((r01*x9085)));
evalcond[3]=(((cj2*sj1))+((r20*x9084))+((cj1*sj2))+(((-1.0)*r21*x9086)));
evalcond[4]=((((-1.0)*r01*x9086))+(((-1.0)*cj0*sj1*sj2))+((r00*x9084))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9088=(cj2*sj1);
IkReal x9089=(cj1*sj2);
IkReal x9090=(gconst1*r21);
IkReal x9091=((1.0)*gconst2*r20);
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal((((r22*x9089))+((r22*x9088)))),IkReal((((x9089*x9090))+((x9088*x9090))+(((-1.0)*x9089*x9091))+(((-1.0)*x9088*x9091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
CheckValue<IkReal> x9093=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst2*r20*x9090))+(r22*r22)+(x9090*x9090)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9092.value)+(((1.5707963267949)*(x9093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9094=IKsin(j4);
IkReal x9095=IKcos(j4);
IkReal x9096=(cj1*cj2);
IkReal x9097=(gconst1*r11);
IkReal x9098=(gconst1*r21);
IkReal x9099=(gconst1*r01);
IkReal x9100=((1.0)*cj0);
IkReal x9101=(sj1*sj2);
IkReal x9102=((1.0)*x9095);
IkReal x9103=(gconst2*x9095);
IkReal x9104=((1.0)*x9094);
evalcond[0]=(((x9094*x9098))+(((-1.0)*r22*x9102))+(((-1.0)*gconst2*r20*x9104)));
evalcond[1]=(sj0+((x9094*x9099))+(((-1.0)*r02*x9102))+(((-1.0)*gconst2*r00*x9104)));
evalcond[2]=(((x9094*x9097))+(((-1.0)*gconst2*r10*x9104))+(((-1.0)*r12*x9102))+(((-1.0)*x9100)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9104))+(((-1.0)*x9098*x9102))+((r20*x9103)));
evalcond[4]=(((cj0*x9096))+(((-1.0)*x9100*x9101))+(((-1.0)*r02*x9104))+(((-1.0)*x9099*x9102))+((r00*x9103)));
evalcond[5]=((((-1.0)*sj0*x9101))+((sj0*x9096))+((r10*x9103))+(((-1.0)*r12*x9104))+(((-1.0)*x9097*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9105=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9105.valid){
continue;
}
CheckValue<IkReal> x9106 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9105.value)))+(x9106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9107=IKsin(j4);
IkReal x9108=IKcos(j4);
IkReal x9109=(cj1*cj2);
IkReal x9110=(gconst1*r11);
IkReal x9111=(gconst1*r21);
IkReal x9112=(gconst1*r01);
IkReal x9113=((1.0)*cj0);
IkReal x9114=(sj1*sj2);
IkReal x9115=((1.0)*x9108);
IkReal x9116=(gconst2*x9108);
IkReal x9117=((1.0)*x9107);
evalcond[0]=((((-1.0)*gconst2*r20*x9117))+(((-1.0)*r22*x9115))+((x9107*x9111)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9117))+(((-1.0)*r02*x9115))+((x9107*x9112)));
evalcond[2]=((((-1.0)*x9113))+(((-1.0)*gconst2*r10*x9117))+((x9107*x9110))+(((-1.0)*r12*x9115)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9111*x9115))+((cj1*sj2))+((r20*x9116))+(((-1.0)*r22*x9117)));
evalcond[4]=((((-1.0)*x9113*x9114))+(((-1.0)*x9112*x9115))+((cj0*x9109))+((r00*x9116))+(((-1.0)*r02*x9117)));
evalcond[5]=(((sj0*x9109))+(((-1.0)*x9110*x9115))+(((-1.0)*sj0*x9114))+((r10*x9116))+(((-1.0)*r12*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9118=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9118.valid){
continue;
}
CheckValue<IkReal> x9119 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9118.value)))+(x9119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9120=IKsin(j4);
IkReal x9121=IKcos(j4);
IkReal x9122=(cj1*cj2);
IkReal x9123=(gconst1*r11);
IkReal x9124=(gconst1*r21);
IkReal x9125=(gconst1*r01);
IkReal x9126=((1.0)*cj0);
IkReal x9127=(sj1*sj2);
IkReal x9128=((1.0)*x9121);
IkReal x9129=(gconst2*x9121);
IkReal x9130=((1.0)*x9120);
evalcond[0]=((((-1.0)*r22*x9128))+(((-1.0)*gconst2*r20*x9130))+((x9120*x9124)));
evalcond[1]=(sj0+(((-1.0)*r02*x9128))+(((-1.0)*gconst2*r00*x9130))+((x9120*x9125)));
evalcond[2]=((((-1.0)*r12*x9128))+(((-1.0)*gconst2*r10*x9130))+(((-1.0)*x9126))+((x9120*x9123)));
evalcond[3]=((((-1.0)*x9124*x9128))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9130))+((r20*x9129)));
evalcond[4]=(((cj0*x9122))+(((-1.0)*r02*x9130))+((r00*x9129))+(((-1.0)*x9125*x9128))+(((-1.0)*x9126*x9127)));
evalcond[5]=(((r10*x9129))+(((-1.0)*r12*x9130))+(((-1.0)*sj0*x9127))+((sj0*x9122))+(((-1.0)*x9123*x9128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9131=((-1.0)*r20);
IkReal x9132=x8488;
CheckValue<IkReal> x9134 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9131),IKFAST_ATAN2_MAGTHRESH);
if(!x9134.valid){
continue;
}
IkReal x9133=((-1.0)*(x9134.value));
sj5=gconst1;
cj5=gconst2;
j5=x9133;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9133;
IkReal gconst1=(r21*x9132);
IkReal gconst2=(x9131*x9132);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9135=((-1.0)*r20);
IkReal x9136=x8488;
CheckValue<IkReal> x9138 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9135),IKFAST_ATAN2_MAGTHRESH);
if(!x9138.valid){
continue;
}
IkReal x9137=((-1.0)*(x9138.value));
sj5=gconst1;
cj5=gconst2;
j5=x9137;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9137;
IkReal gconst1=(r21*x9136);
IkReal gconst2=(x9135*x9136);
CheckValue<IkReal> x9146=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9146.valid){
continue;
}
IkReal x9139=x9146.value;
IkReal x9140=(sj3*x9139);
IkReal x9141=(r11*x9140);
IkReal x9142=(r00*x9140);
IkReal x9143=(r01*x9140);
IkReal x9144=(r10*x9140);
IkReal x9145=(r20*r21*x9140);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9142*(r20*r20)))+((r10*r20*r21*x9143))+((r00*r20*r21*x9141))+((r01*x9141*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9147=gconst1*gconst1;
IkReal x9148=gconst2*gconst2;
IkReal x9149=((1.0)*cj3);
IkReal x9150=(gconst2*r10);
IkReal x9151=(r01*sj3);
IkReal x9152=(gconst1*r00*sj3);
IkReal x9153=(gconst1*gconst2*r11);
IkReal x9154=(r10*x9148);
IkReal x9155=(r11*x9147);
CheckValue<IkReal> x9156=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9150))+(((-1.0)*r01*x9149*x9155))+(((-1.0)*r02*r12*x9149))+(((-1.0)*r00*x9149*x9154))+((cj3*r00*x9153)))),-1);
if(!x9156.valid){
continue;
}
CheckValue<IkReal> x9157 = IKatan2WithCheck(IkReal((((gconst2*r12*x9151))+((r12*x9152)))),IkReal(((((-1.0)*x9150*x9152))+(((-1.0)*x9151*x9154))+((r00*sj3*x9155))+((x9151*x9153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9156.value)))+(x9157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9158=IKsin(j4);
IkReal x9159=IKcos(j4);
IkReal x9160=(cj2*sj1);
IkReal x9161=(cj1*sj2);
IkReal x9162=(gconst1*sj3);
IkReal x9163=(cj3*gconst1);
IkReal x9164=(sj1*sj2);
IkReal x9165=(cj3*gconst2);
IkReal x9166=(cj1*cj2);
IkReal x9167=(gconst2*sj3);
IkReal x9168=((1.0)*x9159);
IkReal x9169=((1.0)*x9158);
IkReal x9170=(gconst1*x9158);
IkReal x9171=(cj3*x9158);
IkReal x9172=(x9160+x9161);
IkReal x9173=(x9159*x9167);
evalcond[0]=((((-1.0)*r22*x9168))+((r21*x9170))+(((-1.0)*gconst2*r20*x9169)));
evalcond[1]=((((-1.0)*r12*x9168))+(((-1.0)*gconst2*r10*x9169))+((r11*x9170)));
evalcond[2]=((1.0)+((r01*x9170))+(((-1.0)*r02*x9168))+(((-1.0)*gconst2*r00*x9169)));
evalcond[3]=(((r01*x9167))+((r02*x9171))+((r00*x9162))+(((-1.0)*r00*x9165*x9168))+((r01*x9159*x9163)));
evalcond[4]=(((r01*x9165))+((r00*x9163))+(((-1.0)*r01*x9162*x9168))+((r00*x9173))+(((-1.0)*r02*sj3*x9169)));
evalcond[5]=(x9172+((r21*x9167))+((r21*x9159*x9163))+(((-1.0)*r20*x9165*x9168))+((r20*x9162))+((r22*x9171)));
evalcond[6]=(((r10*x9173))+x9172+((r10*x9163))+(((-1.0)*r11*x9162*x9168))+(((-1.0)*r12*sj3*x9169))+((r11*x9165)));
evalcond[7]=((((-1.0)*x9164))+x9166+((r10*x9162))+(((-1.0)*r10*x9165*x9168))+((r11*x9167))+((r11*x9159*x9163))+((r12*x9171)));
evalcond[8]=((((-1.0)*x9166))+(((-1.0)*r21*x9162*x9168))+x9164+((r20*x9173))+((r21*x9165))+((r20*x9163))+(((-1.0)*r22*sj3*x9169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9174=gconst2*gconst2;
IkReal x9175=gconst1*gconst1;
IkReal x9176=(gconst1*r00);
IkReal x9177=(r11*sj3);
IkReal x9178=((1.0)*gconst2);
IkReal x9179=(cj3*r12);
IkReal x9180=(cj3*r11);
IkReal x9181=(gconst2*r01);
IkReal x9182=(cj3*r10);
IkReal x9183=(r10*sj3);
CheckValue<IkReal> x9184 = IKatan2WithCheck(IkReal((((x9179*x9181))+((x9176*x9179)))),IkReal((((r00*x9175*x9180))+(((-1.0)*x9176*x9178*x9182))+((gconst1*x9180*x9181))+(((-1.0)*r01*x9174*x9182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9184.valid){
continue;
}
CheckValue<IkReal> x9185=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9175*x9177))+((r00*x9174*x9183))+(((-1.0)*x9176*x9177*x9178))+(((-1.0)*gconst1*r01*x9178*x9183)))),-1);
if(!x9185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9184.value)+(((1.5707963267949)*(x9185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9186=IKsin(j4);
IkReal x9187=IKcos(j4);
IkReal x9188=(cj2*sj1);
IkReal x9189=(cj1*sj2);
IkReal x9190=(gconst1*sj3);
IkReal x9191=(cj3*gconst1);
IkReal x9192=(sj1*sj2);
IkReal x9193=(cj3*gconst2);
IkReal x9194=(cj1*cj2);
IkReal x9195=(gconst2*sj3);
IkReal x9196=((1.0)*x9187);
IkReal x9197=((1.0)*x9186);
IkReal x9198=(gconst1*x9186);
IkReal x9199=(cj3*x9186);
IkReal x9200=(x9188+x9189);
IkReal x9201=(x9187*x9195);
evalcond[0]=((((-1.0)*gconst2*r20*x9197))+(((-1.0)*r22*x9196))+((r21*x9198)));
evalcond[1]=((((-1.0)*gconst2*r10*x9197))+(((-1.0)*r12*x9196))+((r11*x9198)));
evalcond[2]=((1.0)+((r01*x9198))+(((-1.0)*r02*x9196))+(((-1.0)*gconst2*r00*x9197)));
evalcond[3]=(((r01*x9195))+((r00*x9190))+(((-1.0)*r00*x9193*x9196))+((r02*x9199))+((r01*x9187*x9191)));
evalcond[4]=(((r01*x9193))+((r00*x9201))+((r00*x9191))+(((-1.0)*r02*sj3*x9197))+(((-1.0)*r01*x9190*x9196)));
evalcond[5]=(((r22*x9199))+x9200+((r21*x9195))+((r21*x9187*x9191))+(((-1.0)*r20*x9193*x9196))+((r20*x9190)));
evalcond[6]=(((r10*x9201))+x9200+((r10*x9191))+(((-1.0)*r12*sj3*x9197))+(((-1.0)*r11*x9190*x9196))+((r11*x9193)));
evalcond[7]=(x9194+((r10*x9190))+((r11*x9187*x9191))+(((-1.0)*r10*x9193*x9196))+((r12*x9199))+(((-1.0)*x9192))+((r11*x9195)));
evalcond[8]=(((r20*x9201))+x9192+((r21*x9193))+(((-1.0)*r22*sj3*x9197))+((r20*x9191))+(((-1.0)*x9194))+(((-1.0)*r21*x9190*x9196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
CheckValue<IkReal> x9203=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9202.value)+(((1.5707963267949)*(x9203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9204=IKsin(j4);
IkReal x9205=IKcos(j4);
IkReal x9206=(cj2*sj1);
IkReal x9207=(cj1*sj2);
IkReal x9208=(gconst1*sj3);
IkReal x9209=(cj3*gconst1);
IkReal x9210=(sj1*sj2);
IkReal x9211=(cj3*gconst2);
IkReal x9212=(cj1*cj2);
IkReal x9213=(gconst2*sj3);
IkReal x9214=((1.0)*x9205);
IkReal x9215=((1.0)*x9204);
IkReal x9216=(gconst1*x9204);
IkReal x9217=(cj3*x9204);
IkReal x9218=(x9207+x9206);
IkReal x9219=(x9205*x9213);
evalcond[0]=((((-1.0)*gconst2*r20*x9215))+((r21*x9216))+(((-1.0)*r22*x9214)));
evalcond[1]=((((-1.0)*gconst2*r10*x9215))+((r11*x9216))+(((-1.0)*r12*x9214)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9214))+(((-1.0)*gconst2*r00*x9215))+((r01*x9216)));
evalcond[3]=(((r01*x9205*x9209))+((r00*x9208))+(((-1.0)*r00*x9211*x9214))+((r02*x9217))+((r01*x9213)));
evalcond[4]=(((r00*x9219))+((r00*x9209))+(((-1.0)*r01*x9208*x9214))+(((-1.0)*r02*sj3*x9215))+((r01*x9211)));
evalcond[5]=(((r20*x9208))+((r21*x9205*x9209))+((r21*x9213))+x9218+((r22*x9217))+(((-1.0)*r20*x9211*x9214)));
evalcond[6]=(((r10*x9219))+((r10*x9209))+(((-1.0)*r12*sj3*x9215))+x9218+(((-1.0)*r11*x9208*x9214))+((r11*x9211)));
evalcond[7]=(((r10*x9208))+x9212+((r12*x9217))+((r11*x9205*x9209))+((r11*x9213))+(((-1.0)*x9210))+(((-1.0)*r10*x9211*x9214)));
evalcond[8]=(((r20*x9209))+((r20*x9219))+(((-1.0)*r22*sj3*x9215))+((r21*x9211))+x9210+(((-1.0)*r21*x9208*x9214))+(((-1.0)*x9212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9220=((-1.0)*r20);
IkReal x9221=x8488;
CheckValue<IkReal> x9223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9220),IKFAST_ATAN2_MAGTHRESH);
if(!x9223.valid){
continue;
}
IkReal x9222=((-1.0)*(x9223.value));
sj5=gconst1;
cj5=gconst2;
j5=x9222;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9222;
IkReal gconst1=(r21*x9221);
IkReal gconst2=(x9220*x9221);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9224=((-1.0)*r20);
IkReal x9225=x8488;
CheckValue<IkReal> x9227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9224),IKFAST_ATAN2_MAGTHRESH);
if(!x9227.valid){
continue;
}
IkReal x9226=((-1.0)*(x9227.value));
sj5=gconst1;
cj5=gconst2;
j5=x9226;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9226;
IkReal gconst1=(r21*x9225);
IkReal gconst2=(x9224*x9225);
CheckValue<IkReal> x9235=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9235.valid){
continue;
}
IkReal x9228=x9235.value;
IkReal x9229=(sj3*x9228);
IkReal x9230=(r11*x9229);
IkReal x9231=(r00*x9229);
IkReal x9232=(r01*x9229);
IkReal x9233=(r10*x9229);
IkReal x9234=(r20*r21*x9229);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9230))+((r10*r20*r21*x9232))+((r10*x9231*(r20*r20)))+((r01*x9230*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9236=gconst1*gconst1;
IkReal x9237=gconst2*gconst2;
IkReal x9238=((1.0)*cj3);
IkReal x9239=(gconst2*r10);
IkReal x9240=(r01*sj3);
IkReal x9241=(gconst1*r00*sj3);
IkReal x9242=(gconst1*gconst2*r11);
IkReal x9243=(r10*x9237);
IkReal x9244=(r11*x9236);
CheckValue<IkReal> x9245=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9242))+(((-1.0)*r02*r12*x9238))+((cj3*gconst1*r01*x9239))+(((-1.0)*r00*x9238*x9243))+(((-1.0)*r01*x9238*x9244)))),-1);
if(!x9245.valid){
continue;
}
CheckValue<IkReal> x9246 = IKatan2WithCheck(IkReal((((r12*x9241))+((gconst2*r12*x9240)))),IkReal(((((-1.0)*x9240*x9243))+(((-1.0)*x9239*x9241))+((r00*sj3*x9244))+((x9240*x9242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9245.value)))+(x9246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9247=IKsin(j4);
IkReal x9248=IKcos(j4);
IkReal x9249=(sj1*sj2);
IkReal x9250=(gconst1*sj3);
IkReal x9251=(cj3*gconst1);
IkReal x9252=(cj3*gconst2);
IkReal x9253=((1.0)*cj2);
IkReal x9254=(cj1*sj2);
IkReal x9255=(gconst2*sj3);
IkReal x9256=(cj1*x9253);
IkReal x9257=((1.0)*x9248);
IkReal x9258=((1.0)*x9247);
IkReal x9259=(gconst1*x9247);
IkReal x9260=(cj3*x9247);
IkReal x9261=(x9248*x9255);
evalcond[0]=((((-1.0)*r22*x9257))+((r21*x9259))+(((-1.0)*gconst2*r20*x9258)));
evalcond[1]=((((-1.0)*r12*x9257))+(((-1.0)*gconst2*r10*x9258))+((r11*x9259)));
evalcond[2]=((-1.0)+((r01*x9259))+(((-1.0)*r02*x9257))+(((-1.0)*gconst2*r00*x9258)));
evalcond[3]=((((-1.0)*r00*x9252*x9257))+((r00*x9250))+((r01*x9255))+((r01*x9248*x9251))+((r02*x9260)));
evalcond[4]=((((-1.0)*r01*x9250*x9257))+((r00*x9261))+((r00*x9251))+((r01*x9252))+(((-1.0)*r02*sj3*x9258)));
evalcond[5]=(((r22*x9260))+((cj2*sj1))+((r21*x9248*x9251))+x9254+(((-1.0)*r20*x9252*x9257))+((r21*x9255))+((r20*x9250)));
evalcond[6]=(((r12*x9260))+x9249+((r11*x9248*x9251))+((r10*x9250))+(((-1.0)*x9256))+((r11*x9255))+(((-1.0)*r10*x9252*x9257)));
evalcond[7]=(x9249+(((-1.0)*r21*x9250*x9257))+((r20*x9261))+((r21*x9252))+(((-1.0)*r22*sj3*x9258))+(((-1.0)*x9256))+((r20*x9251)));
evalcond[8]=((((-1.0)*r11*x9250*x9257))+(((-1.0)*sj1*x9253))+((r10*x9261))+(((-1.0)*r12*sj3*x9258))+((r10*x9251))+((r11*x9252))+(((-1.0)*x9254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9262=gconst2*gconst2;
IkReal x9263=gconst1*gconst1;
IkReal x9264=(gconst1*r00);
IkReal x9265=(r11*sj3);
IkReal x9266=((1.0)*gconst2);
IkReal x9267=(cj3*r12);
IkReal x9268=(cj3*r11);
IkReal x9269=(gconst2*r01);
IkReal x9270=(cj3*r10);
IkReal x9271=(r10*sj3);
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal((((x9267*x9269))+((x9264*x9267)))),IkReal(((((-1.0)*x9264*x9266*x9270))+(((-1.0)*r01*x9262*x9270))+((gconst1*x9268*x9269))+((r00*x9263*x9268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9263*x9265))+(((-1.0)*gconst1*r01*x9266*x9271))+((r00*x9262*x9271))+(((-1.0)*x9264*x9265*x9266)))),-1);
if(!x9273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9272.value)+(((1.5707963267949)*(x9273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9274=IKsin(j4);
IkReal x9275=IKcos(j4);
IkReal x9276=(sj1*sj2);
IkReal x9277=(gconst1*sj3);
IkReal x9278=(cj3*gconst1);
IkReal x9279=(cj3*gconst2);
IkReal x9280=((1.0)*cj2);
IkReal x9281=(cj1*sj2);
IkReal x9282=(gconst2*sj3);
IkReal x9283=(cj1*x9280);
IkReal x9284=((1.0)*x9275);
IkReal x9285=((1.0)*x9274);
IkReal x9286=(gconst1*x9274);
IkReal x9287=(cj3*x9274);
IkReal x9288=(x9275*x9282);
evalcond[0]=((((-1.0)*gconst2*r20*x9285))+(((-1.0)*r22*x9284))+((r21*x9286)));
evalcond[1]=((((-1.0)*r12*x9284))+((r11*x9286))+(((-1.0)*gconst2*r10*x9285)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9285))+((r01*x9286))+(((-1.0)*r02*x9284)));
evalcond[3]=(((r02*x9287))+((r01*x9282))+((r01*x9275*x9278))+(((-1.0)*r00*x9279*x9284))+((r00*x9277)));
evalcond[4]=((((-1.0)*r02*sj3*x9285))+((r00*x9288))+((r00*x9278))+((r01*x9279))+(((-1.0)*r01*x9277*x9284)));
evalcond[5]=(((cj2*sj1))+((r22*x9287))+x9281+((r20*x9277))+(((-1.0)*r20*x9279*x9284))+((r21*x9282))+((r21*x9275*x9278)));
evalcond[6]=(((r11*x9282))+(((-1.0)*x9283))+x9276+((r11*x9275*x9278))+((r10*x9277))+(((-1.0)*r10*x9279*x9284))+((r12*x9287)));
evalcond[7]=((((-1.0)*x9283))+x9276+((r20*x9278))+((r20*x9288))+(((-1.0)*r21*x9277*x9284))+((r21*x9279))+(((-1.0)*r22*sj3*x9285)));
evalcond[8]=((((-1.0)*sj1*x9280))+(((-1.0)*r12*sj3*x9285))+((r10*x9288))+((r10*x9278))+(((-1.0)*x9281))+(((-1.0)*r11*x9277*x9284))+((r11*x9279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9289=((1.0)*gconst2);
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
CheckValue<IkReal> x9291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9289))+(((-1.0)*gconst1*r10)))),-1);
if(!x9291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9290.value)+(((1.5707963267949)*(x9291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9292=IKsin(j4);
IkReal x9293=IKcos(j4);
IkReal x9294=(sj1*sj2);
IkReal x9295=(gconst1*sj3);
IkReal x9296=(cj3*gconst1);
IkReal x9297=(cj3*gconst2);
IkReal x9298=((1.0)*cj2);
IkReal x9299=(cj1*sj2);
IkReal x9300=(gconst2*sj3);
IkReal x9301=(cj1*x9298);
IkReal x9302=((1.0)*x9293);
IkReal x9303=((1.0)*x9292);
IkReal x9304=(gconst1*x9292);
IkReal x9305=(cj3*x9292);
IkReal x9306=(x9293*x9300);
evalcond[0]=(((r21*x9304))+(((-1.0)*r22*x9302))+(((-1.0)*gconst2*r20*x9303)));
evalcond[1]=((((-1.0)*gconst2*r10*x9303))+((r11*x9304))+(((-1.0)*r12*x9302)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9303))+((r01*x9304))+(((-1.0)*r02*x9302)));
evalcond[3]=(((r02*x9305))+(((-1.0)*r00*x9297*x9302))+((r00*x9295))+((r01*x9300))+((r01*x9293*x9296)));
evalcond[4]=((((-1.0)*r02*sj3*x9303))+((r00*x9296))+((r01*x9297))+(((-1.0)*r01*x9295*x9302))+((r00*x9306)));
evalcond[5]=(((cj2*sj1))+((r22*x9305))+((r21*x9300))+x9299+(((-1.0)*r20*x9297*x9302))+((r21*x9293*x9296))+((r20*x9295)));
evalcond[6]=(x9294+((r10*x9295))+(((-1.0)*r10*x9297*x9302))+(((-1.0)*x9301))+((r12*x9305))+((r11*x9293*x9296))+((r11*x9300)));
evalcond[7]=(x9294+((r20*x9296))+(((-1.0)*x9301))+((r21*x9297))+((r20*x9306))+(((-1.0)*r22*sj3*x9303))+(((-1.0)*r21*x9295*x9302)));
evalcond[8]=(((r11*x9297))+(((-1.0)*sj1*x9298))+(((-1.0)*r11*x9295*x9302))+((r10*x9296))+(((-1.0)*x9299))+(((-1.0)*r12*sj3*x9303))+((r10*x9306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9307=((-1.0)*r20);
IkReal x9308=x8488;
CheckValue<IkReal> x9310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9307),IKFAST_ATAN2_MAGTHRESH);
if(!x9310.valid){
continue;
}
IkReal x9309=((-1.0)*(x9310.value));
sj5=gconst1;
cj5=gconst2;
j5=x9309;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9309;
IkReal gconst1=(r21*x9308);
IkReal gconst2=(x9307*x9308);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9311=((-1.0)*r20);
IkReal x9312=x8488;
CheckValue<IkReal> x9314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9311),IKFAST_ATAN2_MAGTHRESH);
if(!x9314.valid){
continue;
}
IkReal x9313=((-1.0)*(x9314.value));
sj5=gconst1;
cj5=gconst2;
j5=x9313;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9313;
IkReal gconst1=(r21*x9312);
IkReal gconst2=(x9311*x9312);
CheckValue<IkReal> x9322=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9322.valid){
continue;
}
IkReal x9315=x9322.value;
IkReal x9316=(sj3*x9315);
IkReal x9317=(r11*x9316);
IkReal x9318=(r00*x9316);
IkReal x9319=(r01*x9316);
IkReal x9320=(r10*x9316);
IkReal x9321=(r20*r21*x9316);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9317))+((r10*x9318*(r20*r20)))+((r10*r20*r21*x9319))+((r01*x9317*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9323=gconst2*gconst2;
IkReal x9324=gconst1*gconst1;
IkReal x9325=((1.0)*cj3);
IkReal x9326=((1.0)*sj3);
IkReal x9327=(r11*sj3);
IkReal x9328=(r10*sj3);
IkReal x9329=(gconst1*gconst2*r00);
IkReal x9330=(gconst1*gconst2*r01);
IkReal x9331=(r00*x9323);
IkReal x9332=(r01*x9324);
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9325))+(((-1.0)*r10*x9325*x9331))+(((-1.0)*r11*x9325*x9332))+((cj3*r10*x9330))+((cj3*r11*x9329)))),-1);
if(!x9333.valid){
continue;
}
CheckValue<IkReal> x9334 = IKatan2WithCheck(IkReal((((gconst2*r02*x9327))+((gconst1*r02*x9328)))),IkReal((((x9327*x9330))+((x9328*x9332))+(((-1.0)*r10*x9326*x9329))+(((-1.0)*r11*x9326*x9331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9333.value)))+(x9334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9335=IKsin(j4);
IkReal x9336=IKcos(j4);
IkReal x9337=(cj2*sj1);
IkReal x9338=(cj1*sj2);
IkReal x9339=(gconst1*sj3);
IkReal x9340=(cj3*gconst1);
IkReal x9341=(sj1*sj2);
IkReal x9342=(cj3*gconst2);
IkReal x9343=(cj1*cj2);
IkReal x9344=(gconst2*sj3);
IkReal x9345=((1.0)*x9336);
IkReal x9346=((1.0)*x9335);
IkReal x9347=(gconst1*x9335);
IkReal x9348=(cj3*x9335);
IkReal x9349=(x9337+x9338);
IkReal x9350=(x9336*x9344);
evalcond[0]=((((-1.0)*r22*x9345))+(((-1.0)*gconst2*r20*x9346))+((r21*x9347)));
evalcond[1]=((((-1.0)*r02*x9345))+((r01*x9347))+(((-1.0)*gconst2*r00*x9346)));
evalcond[2]=((-1.0)+((r11*x9347))+(((-1.0)*r12*x9345))+(((-1.0)*gconst2*r10*x9346)));
evalcond[3]=(((r12*x9348))+((r11*x9344))+((r10*x9339))+(((-1.0)*r10*x9342*x9345))+((r11*x9336*x9340)));
evalcond[4]=(((r11*x9342))+(((-1.0)*r12*sj3*x9346))+(((-1.0)*r11*x9339*x9345))+((r10*x9340))+((r10*x9350)));
evalcond[5]=((((-1.0)*r20*x9342*x9345))+((r20*x9339))+x9349+((r21*x9344))+((r22*x9348))+((r21*x9336*x9340)));
evalcond[6]=(x9349+((r00*x9340))+((r00*x9350))+((r01*x9342))+(((-1.0)*r02*sj3*x9346))+(((-1.0)*r01*x9339*x9345)));
evalcond[7]=(x9343+((r01*x9336*x9340))+((r00*x9339))+(((-1.0)*x9341))+((r01*x9344))+(((-1.0)*r00*x9342*x9345))+((r02*x9348)));
evalcond[8]=(x9341+(((-1.0)*x9343))+((r20*x9350))+(((-1.0)*r22*sj3*x9346))+((r20*x9340))+((r21*x9342))+(((-1.0)*r21*x9339*x9345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9351=gconst2*gconst2;
IkReal x9352=gconst1*gconst1;
IkReal x9353=(gconst2*r11);
IkReal x9354=(cj3*r02);
IkReal x9355=(gconst1*r01);
IkReal x9356=(cj3*r10);
IkReal x9357=(r10*sj3);
IkReal x9358=((1.0)*gconst1*r00);
IkReal x9359=(r01*x9352);
IkReal x9360=(r00*x9351);
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal((((x9353*x9354))+((gconst1*r10*x9354)))),IkReal(((((-1.0)*gconst2*x9356*x9358))+((cj3*x9353*x9355))+((x9356*x9359))+(((-1.0)*cj3*r11*x9360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9357*x9360))+(((-1.0)*gconst2*x9355*x9357))+((r11*sj3*x9359))+(((-1.0)*sj3*x9353*x9358)))),-1);
if(!x9362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9361.value)+(((1.5707963267949)*(x9362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9363=IKsin(j4);
IkReal x9364=IKcos(j4);
IkReal x9365=(cj2*sj1);
IkReal x9366=(cj1*sj2);
IkReal x9367=(gconst1*sj3);
IkReal x9368=(cj3*gconst1);
IkReal x9369=(sj1*sj2);
IkReal x9370=(cj3*gconst2);
IkReal x9371=(cj1*cj2);
IkReal x9372=(gconst2*sj3);
IkReal x9373=((1.0)*x9364);
IkReal x9374=((1.0)*x9363);
IkReal x9375=(gconst1*x9363);
IkReal x9376=(cj3*x9363);
IkReal x9377=(x9366+x9365);
IkReal x9378=(x9364*x9372);
evalcond[0]=(((r21*x9375))+(((-1.0)*r22*x9373))+(((-1.0)*gconst2*r20*x9374)));
evalcond[1]=((((-1.0)*r02*x9373))+(((-1.0)*gconst2*r00*x9374))+((r01*x9375)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9374))+((r11*x9375))+(((-1.0)*r12*x9373)));
evalcond[3]=(((r11*x9372))+((r11*x9364*x9368))+((r12*x9376))+(((-1.0)*r10*x9370*x9373))+((r10*x9367)));
evalcond[4]=(((r11*x9370))+(((-1.0)*r11*x9367*x9373))+(((-1.0)*r12*sj3*x9374))+((r10*x9368))+((r10*x9378)));
evalcond[5]=(((r21*x9364*x9368))+x9377+((r21*x9372))+((r22*x9376))+(((-1.0)*r20*x9370*x9373))+((r20*x9367)));
evalcond[6]=(x9377+(((-1.0)*r01*x9367*x9373))+((r00*x9368))+((r00*x9378))+(((-1.0)*r02*sj3*x9374))+((r01*x9370)));
evalcond[7]=(((r01*x9364*x9368))+x9371+((r02*x9376))+(((-1.0)*r00*x9370*x9373))+(((-1.0)*x9369))+((r00*x9367))+((r01*x9372)));
evalcond[8]=((((-1.0)*r21*x9367*x9373))+x9369+(((-1.0)*r22*sj3*x9374))+((r21*x9370))+(((-1.0)*x9371))+((r20*x9378))+((r20*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9379 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9379.valid){
continue;
}
CheckValue<IkReal> x9380=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9379.value)+(((1.5707963267949)*(x9380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9381=IKsin(j4);
IkReal x9382=IKcos(j4);
IkReal x9383=(cj2*sj1);
IkReal x9384=(cj1*sj2);
IkReal x9385=(gconst1*sj3);
IkReal x9386=(cj3*gconst1);
IkReal x9387=(sj1*sj2);
IkReal x9388=(cj3*gconst2);
IkReal x9389=(cj1*cj2);
IkReal x9390=(gconst2*sj3);
IkReal x9391=((1.0)*x9382);
IkReal x9392=((1.0)*x9381);
IkReal x9393=(gconst1*x9381);
IkReal x9394=(cj3*x9381);
IkReal x9395=(x9384+x9383);
IkReal x9396=(x9382*x9390);
evalcond[0]=((((-1.0)*gconst2*r20*x9392))+(((-1.0)*r22*x9391))+((r21*x9393)));
evalcond[1]=(((r01*x9393))+(((-1.0)*gconst2*r00*x9392))+(((-1.0)*r02*x9391)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x9391))+((r11*x9393))+(((-1.0)*gconst2*r10*x9392)));
evalcond[3]=((((-1.0)*r10*x9388*x9391))+((r11*x9382*x9386))+((r12*x9394))+((r10*x9385))+((r11*x9390)));
evalcond[4]=(((r10*x9386))+((r10*x9396))+((r11*x9388))+(((-1.0)*r11*x9385*x9391))+(((-1.0)*r12*sj3*x9392)));
evalcond[5]=(x9395+((r22*x9394))+((r21*x9382*x9386))+((r20*x9385))+((r21*x9390))+(((-1.0)*r20*x9388*x9391)));
evalcond[6]=(x9395+(((-1.0)*r02*sj3*x9392))+(((-1.0)*r01*x9385*x9391))+((r01*x9388))+((r00*x9386))+((r00*x9396)));
evalcond[7]=(((r01*x9390))+x9389+(((-1.0)*r00*x9388*x9391))+(((-1.0)*x9387))+((r02*x9394))+((r01*x9382*x9386))+((r00*x9385)));
evalcond[8]=(x9387+((r21*x9388))+(((-1.0)*r21*x9385*x9391))+((r20*x9396))+(((-1.0)*r22*sj3*x9392))+(((-1.0)*x9389))+((r20*x9386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9397=((-1.0)*r20);
IkReal x9398=x8488;
CheckValue<IkReal> x9400 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9397),IKFAST_ATAN2_MAGTHRESH);
if(!x9400.valid){
continue;
}
IkReal x9399=((-1.0)*(x9400.value));
sj5=gconst1;
cj5=gconst2;
j5=x9399;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9399;
IkReal gconst1=(r21*x9398);
IkReal gconst2=(x9397*x9398);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9401=((-1.0)*r20);
IkReal x9402=x8488;
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9401),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
IkReal x9403=((-1.0)*(x9404.value));
sj5=gconst1;
cj5=gconst2;
j5=x9403;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9403;
IkReal gconst1=(r21*x9402);
IkReal gconst2=(x9401*x9402);
CheckValue<IkReal> x9412=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9412.valid){
continue;
}
IkReal x9405=x9412.value;
IkReal x9406=(sj3*x9405);
IkReal x9407=(r11*x9406);
IkReal x9408=(r00*x9406);
IkReal x9409=(r01*x9406);
IkReal x9410=(r10*x9406);
IkReal x9411=(r20*r21*x9406);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9407*(r21*r21)))+((r00*r20*r21*x9407))+((r10*x9408*(r20*r20)))+((r10*r20*r21*x9409))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9413=gconst2*gconst2;
IkReal x9414=gconst1*gconst1;
IkReal x9415=((1.0)*cj3);
IkReal x9416=((1.0)*sj3);
IkReal x9417=(r11*sj3);
IkReal x9418=(r10*sj3);
IkReal x9419=(gconst1*gconst2*r00);
IkReal x9420=(gconst1*gconst2*r01);
IkReal x9421=(r00*x9413);
IkReal x9422=(r01*x9414);
CheckValue<IkReal> x9423 = IKatan2WithCheck(IkReal((((gconst1*r02*x9418))+((gconst2*r02*x9417)))),IkReal(((((-1.0)*r10*x9416*x9419))+((x9417*x9420))+((x9418*x9422))+(((-1.0)*r11*x9416*x9421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9423.valid){
continue;
}
CheckValue<IkReal> x9424=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9420))+((cj3*r11*x9419))+(((-1.0)*r11*x9415*x9422))+(((-1.0)*r10*x9415*x9421))+(((-1.0)*r02*r12*x9415)))),-1);
if(!x9424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9423.value)+(((1.5707963267949)*(x9424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9425=IKsin(j4);
IkReal x9426=IKcos(j4);
IkReal x9427=(sj1*sj2);
IkReal x9428=(gconst1*sj3);
IkReal x9429=(cj3*gconst1);
IkReal x9430=(cj3*gconst2);
IkReal x9431=((1.0)*cj2);
IkReal x9432=(cj1*sj2);
IkReal x9433=(gconst2*sj3);
IkReal x9434=(cj1*x9431);
IkReal x9435=((1.0)*x9426);
IkReal x9436=((1.0)*x9425);
IkReal x9437=(gconst1*x9425);
IkReal x9438=(cj3*x9425);
IkReal x9439=(x9426*x9433);
evalcond[0]=(((r21*x9437))+(((-1.0)*gconst2*r20*x9436))+(((-1.0)*r22*x9435)));
evalcond[1]=((((-1.0)*gconst2*r00*x9436))+(((-1.0)*r02*x9435))+((r01*x9437)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9436))+((r11*x9437))+(((-1.0)*r12*x9435)));
evalcond[3]=(((r11*x9433))+((r11*x9426*x9429))+(((-1.0)*r10*x9430*x9435))+((r12*x9438))+((r10*x9428)));
evalcond[4]=(((r11*x9430))+(((-1.0)*r12*sj3*x9436))+(((-1.0)*r11*x9428*x9435))+((r10*x9439))+((r10*x9429)));
evalcond[5]=(((cj2*sj1))+((r22*x9438))+(((-1.0)*r20*x9430*x9435))+((r21*x9426*x9429))+((r20*x9428))+((r21*x9433))+x9432);
evalcond[6]=((((-1.0)*x9434))+((r00*x9428))+((r01*x9426*x9429))+(((-1.0)*r00*x9430*x9435))+((r02*x9438))+x9427+((r01*x9433)));
evalcond[7]=((((-1.0)*x9434))+(((-1.0)*r21*x9428*x9435))+((r20*x9429))+((r20*x9439))+((r21*x9430))+x9427+(((-1.0)*r22*sj3*x9436)));
evalcond[8]=(((r00*x9429))+(((-1.0)*r01*x9428*x9435))+(((-1.0)*sj1*x9431))+(((-1.0)*x9432))+(((-1.0)*r02*sj3*x9436))+((r01*x9430))+((r00*x9439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9440=gconst2*gconst2;
IkReal x9441=gconst1*gconst1;
IkReal x9442=(gconst2*r11);
IkReal x9443=(cj3*r02);
IkReal x9444=(gconst1*r01);
IkReal x9445=(cj3*r10);
IkReal x9446=(r10*sj3);
IkReal x9447=((1.0)*gconst1*r00);
IkReal x9448=(r01*x9441);
IkReal x9449=(r00*x9440);
CheckValue<IkReal> x9450=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9446*x9449))+(((-1.0)*sj3*x9442*x9447))+(((-1.0)*gconst2*x9444*x9446))+((r11*sj3*x9448)))),-1);
if(!x9450.valid){
continue;
}
CheckValue<IkReal> x9451 = IKatan2WithCheck(IkReal((((gconst1*r10*x9443))+((x9442*x9443)))),IkReal(((((-1.0)*gconst2*x9445*x9447))+((x9445*x9448))+((cj3*x9442*x9444))+(((-1.0)*cj3*r11*x9449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9450.value)))+(x9451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9452=IKsin(j4);
IkReal x9453=IKcos(j4);
IkReal x9454=(sj1*sj2);
IkReal x9455=(gconst1*sj3);
IkReal x9456=(cj3*gconst1);
IkReal x9457=(cj3*gconst2);
IkReal x9458=((1.0)*cj2);
IkReal x9459=(cj1*sj2);
IkReal x9460=(gconst2*sj3);
IkReal x9461=(cj1*x9458);
IkReal x9462=((1.0)*x9453);
IkReal x9463=((1.0)*x9452);
IkReal x9464=(gconst1*x9452);
IkReal x9465=(cj3*x9452);
IkReal x9466=(x9453*x9460);
evalcond[0]=(((r21*x9464))+(((-1.0)*gconst2*r20*x9463))+(((-1.0)*r22*x9462)));
evalcond[1]=(((r01*x9464))+(((-1.0)*gconst2*r00*x9463))+(((-1.0)*r02*x9462)));
evalcond[2]=((1.0)+((r11*x9464))+(((-1.0)*r12*x9462))+(((-1.0)*gconst2*r10*x9463)));
evalcond[3]=(((r10*x9455))+((r11*x9453*x9456))+((r11*x9460))+((r12*x9465))+(((-1.0)*r10*x9457*x9462)));
evalcond[4]=(((r10*x9456))+((r10*x9466))+(((-1.0)*r12*sj3*x9463))+((r11*x9457))+(((-1.0)*r11*x9455*x9462)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9457*x9462))+((r22*x9465))+((r21*x9453*x9456))+((r21*x9460))+x9459+((r20*x9455)));
evalcond[6]=((((-1.0)*r00*x9457*x9462))+(((-1.0)*x9461))+((r00*x9455))+((r01*x9460))+((r01*x9453*x9456))+x9454+((r02*x9465)));
evalcond[7]=((((-1.0)*x9461))+(((-1.0)*r22*sj3*x9463))+((r21*x9457))+(((-1.0)*r21*x9455*x9462))+((r20*x9466))+x9454+((r20*x9456)));
evalcond[8]=((((-1.0)*r01*x9455*x9462))+((r00*x9456))+((r01*x9457))+((r00*x9466))+(((-1.0)*x9459))+(((-1.0)*sj1*x9458))+(((-1.0)*r02*sj3*x9463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9467=((1.0)*gconst2);
CheckValue<IkReal> x9468=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9467)))),-1);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9468.value)))+(x9469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9470=IKsin(j4);
IkReal x9471=IKcos(j4);
IkReal x9472=(sj1*sj2);
IkReal x9473=(gconst1*sj3);
IkReal x9474=(cj3*gconst1);
IkReal x9475=(cj3*gconst2);
IkReal x9476=((1.0)*cj2);
IkReal x9477=(cj1*sj2);
IkReal x9478=(gconst2*sj3);
IkReal x9479=(cj1*x9476);
IkReal x9480=((1.0)*x9471);
IkReal x9481=((1.0)*x9470);
IkReal x9482=(gconst1*x9470);
IkReal x9483=(cj3*x9470);
IkReal x9484=(x9471*x9478);
evalcond[0]=(((r21*x9482))+(((-1.0)*r22*x9480))+(((-1.0)*gconst2*r20*x9481)));
evalcond[1]=((((-1.0)*gconst2*r00*x9481))+((r01*x9482))+(((-1.0)*r02*x9480)));
evalcond[2]=((1.0)+((r11*x9482))+(((-1.0)*gconst2*r10*x9481))+(((-1.0)*r12*x9480)));
evalcond[3]=(((r10*x9473))+((r12*x9483))+(((-1.0)*r10*x9475*x9480))+((r11*x9478))+((r11*x9471*x9474)));
evalcond[4]=(((r10*x9474))+((r11*x9475))+((r10*x9484))+(((-1.0)*r11*x9473*x9480))+(((-1.0)*r12*sj3*x9481)));
evalcond[5]=(((cj2*sj1))+((r21*x9478))+(((-1.0)*r20*x9475*x9480))+x9477+((r20*x9473))+((r21*x9471*x9474))+((r22*x9483)));
evalcond[6]=((((-1.0)*x9479))+((r00*x9473))+(((-1.0)*r00*x9475*x9480))+((r01*x9478))+((r02*x9483))+((r01*x9471*x9474))+x9472);
evalcond[7]=((((-1.0)*x9479))+(((-1.0)*r21*x9473*x9480))+((r20*x9484))+((r21*x9475))+x9472+((r20*x9474))+(((-1.0)*r22*sj3*x9481)));
evalcond[8]=((((-1.0)*r01*x9473*x9480))+((r00*x9484))+((r00*x9474))+((r01*x9475))+(((-1.0)*sj1*x9476))+(((-1.0)*r02*sj3*x9481))+(((-1.0)*x9477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9485=((-1.0)*r20);
IkReal x9486=((-1.0)*r21);
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(x9486),IkReal(x9485),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
IkReal x9487=((-1.0)*(x9488.value));
sj5=gconst1;
cj5=gconst2;
j5=x9487;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9485);
rxp0_2=(py*r00);
rxp1_0=(py*x9486);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9487;
IkReal gconst1=r21;
IkReal gconst2=x9485;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9489=((-1.0)*r20);
IkReal x9490=((-1.0)*r21);
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(x9490),IkReal(x9489),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
IkReal x9491=((-1.0)*(x9492.value));
sj5=gconst1;
cj5=gconst2;
j5=x9491;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9489);
rxp0_2=(py*r00);
rxp1_0=(py*x9490);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9491;
IkReal gconst1=r21;
IkReal gconst2=x9489;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9493=((-1.0)*r20);
IkReal x9494=((-1.0)*r21);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(x9494),IkReal(x9493),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9495=((-1.0)*(x9496.value));
sj5=gconst1;
cj5=gconst2;
j5=x9495;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9493);
rxp0_2=(py*r00);
rxp1_0=(py*x9494);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9495;
IkReal gconst1=r21;
IkReal gconst2=x9493;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9497=((-1.0)*r20);
IkReal x9498=((-1.0)*r21);
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal(x9498),IkReal(x9497),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
IkReal x9499=((-1.0)*(x9500.value));
sj5=gconst1;
cj5=gconst2;
j5=x9499;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9497);
rxp0_2=(py*r00);
rxp1_0=(py*x9498);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9499;
IkReal gconst1=r21;
IkReal gconst2=x9497;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9501=((-1.0)*r20);
IkReal x9502=((-1.0)*r21);
CheckValue<IkReal> x9504 = IKatan2WithCheck(IkReal(x9502),IkReal(x9501),IKFAST_ATAN2_MAGTHRESH);
if(!x9504.valid){
continue;
}
IkReal x9503=((-1.0)*(x9504.value));
sj5=gconst1;
cj5=gconst2;
j5=x9503;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9501);
rxp0_2=(py*r00);
rxp1_0=(py*x9502);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9503;
IkReal gconst1=r21;
IkReal gconst2=x9501;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9505=((-1.0)*r20);
IkReal x9506=((-1.0)*r21);
CheckValue<IkReal> x9508 = IKatan2WithCheck(IkReal(x9506),IkReal(x9505),IKFAST_ATAN2_MAGTHRESH);
if(!x9508.valid){
continue;
}
IkReal x9507=((-1.0)*(x9508.value));
sj5=gconst1;
cj5=gconst2;
j5=x9507;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9505);
rxp0_2=(py*r00);
rxp1_0=(py*x9506);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9507;
IkReal gconst1=r21;
IkReal gconst2=x9505;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9511=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9511.valid){
continue;
}
IkReal x9509=x9511.value;
IkReal x9510=((1.0)*cj0*x9509);
cj4array[0]=((((-1.0)*cj2*sj1*x9510))+(((-1.0)*cj1*sj2*x9510)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9512=IKsin(j4);
IkReal x9513=IKcos(j4);
IkReal x9514=(gconst2*r20);
IkReal x9515=(gconst1*x9512);
IkReal x9516=((1.0)*x9513);
IkReal x9517=((1.0)*x9512);
evalcond[0]=((-1.0)*r12*x9512);
evalcond[1]=((((-1.0)*r12*x9516))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9514*x9517))+((r21*x9515)));
evalcond[3]=(((r01*x9515))+(((-1.0)*gconst2*r00*x9517)));
evalcond[4]=((((-1.0)*gconst1*r21*x9516))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9513*x9514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9519=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9519.valid){
continue;
}
IkReal x9518=x9519.value;
cj4array[0]=(((cj1*cj2*x9518))+(((-1.0)*sj1*sj2*x9518)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9520=IKsin(j4);
IkReal x9521=IKcos(j4);
IkReal x9522=(gconst2*r00);
IkReal x9523=(gconst1*r01);
IkReal x9524=((1.0)*x9521);
IkReal x9525=((1.0)*x9520);
evalcond[0]=((-1.0)*r12*x9520);
evalcond[1]=((((-1.0)*r12*x9524))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x9520))+(((-1.0)*gconst2*r20*x9525)));
evalcond[3]=(((x9520*x9523))+(((-1.0)*x9522*x9525)));
evalcond[4]=(((x9521*x9522))+((cj0*cj2*sj1))+(((-1.0)*x9523*x9524))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9526=IKPowWithIntegerCheck(r12,-1);
if(!x9526.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9526.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9527=IKsin(j4);
IkReal x9528=IKcos(j4);
IkReal x9529=(gconst2*x9528);
IkReal x9530=(gconst1*x9527);
IkReal x9531=((1.0)*gconst1*x9528);
IkReal x9532=((1.0)*gconst2*x9527);
evalcond[0]=((-1.0)*r12*x9527);
evalcond[1]=((((-1.0)*r20*x9532))+((r21*x9530)));
evalcond[2]=((((-1.0)*r00*x9532))+((r01*x9530)));
evalcond[3]=(((r20*x9529))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x9531)));
evalcond[4]=((((-1.0)*r01*x9531))+((r00*x9529))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9533=((-1.0)*r20);
IkReal x9534=((-1.0)*r21);
CheckValue<IkReal> x9536 = IKatan2WithCheck(IkReal(x9534),IkReal(x9533),IKFAST_ATAN2_MAGTHRESH);
if(!x9536.valid){
continue;
}
IkReal x9535=((-1.0)*(x9536.value));
sj5=gconst1;
cj5=gconst2;
j5=x9535;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9533);
rxp0_2=(py*r00);
rxp1_0=(py*x9534);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9535;
IkReal gconst1=r21;
IkReal gconst2=x9533;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9537=((-1.0)*r20);
IkReal x9538=((-1.0)*r21);
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal(x9538),IkReal(x9537),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
IkReal x9539=((-1.0)*(x9540.value));
sj5=gconst1;
cj5=gconst2;
j5=x9539;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9537);
rxp0_2=(py*r00);
rxp1_0=(py*x9538);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9539;
IkReal gconst1=r21;
IkReal gconst2=x9537;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9541=((-1.0)*r20);
IkReal x9542=((-1.0)*r21);
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal(x9542),IkReal(x9541),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
IkReal x9543=((-1.0)*(x9544.value));
sj5=gconst1;
cj5=gconst2;
j5=x9543;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9541);
rxp0_2=(py*r00);
rxp1_0=(py*x9542);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9543;
IkReal gconst1=r21;
IkReal gconst2=x9541;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9547=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9547.valid){
continue;
}
IkReal x9545=x9547.value;
IkReal x9546=((1.0)*cj0*x9545);
cj4array[0]=((((-1.0)*cj1*sj2*x9546))+(((-1.0)*cj2*sj1*x9546)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9548=IKsin(j4);
IkReal x9549=IKcos(j4);
IkReal x9550=(gconst1*r21);
IkReal x9551=(gconst2*r20);
IkReal x9552=((1.0)*x9549);
IkReal x9553=((1.0)*x9548);
evalcond[0]=(r12*x9548);
evalcond[1]=((((-1.0)*r12*x9552))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9551*x9553))+((x9548*x9550)));
evalcond[3]=(((gconst1*r01*x9548))+(((-1.0)*gconst2*r00*x9553)));
evalcond[4]=((((-1.0)*x9551*x9552))+((x9549*x9550))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9555=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9555.valid){
continue;
}
IkReal x9554=x9555.value;
cj4array[0]=(((cj1*cj2*x9554))+(((-1.0)*sj1*sj2*x9554)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9556=IKsin(j4);
IkReal x9557=IKcos(j4);
IkReal x9558=(gconst1*r01);
IkReal x9559=((1.0)*x9557);
IkReal x9560=((1.0)*gconst2*x9556);
evalcond[0]=(r12*x9556);
evalcond[1]=((((-1.0)*r12*x9559))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x9556))+(((-1.0)*r20*x9560)));
evalcond[3]=((((-1.0)*r00*x9560))+((x9556*x9558)));
evalcond[4]=(((x9557*x9558))+((cj0*cj2*sj1))+(((-1.0)*gconst2*r00*x9559))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9561=IKPowWithIntegerCheck(r12,-1);
if(!x9561.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9561.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9562=IKsin(j4);
IkReal x9563=IKcos(j4);
IkReal x9564=(gconst1*x9563);
IkReal x9565=(gconst1*x9562);
IkReal x9566=((1.0)*gconst2*r20);
IkReal x9567=((1.0)*gconst2*r00);
evalcond[0]=(r12*x9562);
evalcond[1]=(((r21*x9565))+(((-1.0)*x9562*x9566)));
evalcond[2]=(((r01*x9565))+(((-1.0)*x9562*x9567)));
evalcond[3]=(((r21*x9564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9563*x9566)));
evalcond[4]=(((r01*x9564))+(((-1.0)*x9563*x9567))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9569=IKPowWithIntegerCheck(r12,-1);
if(!x9569.valid){
continue;
}
IkReal x9568=x9569.value;
CheckValue<IkReal> x9570=IKPowWithIntegerCheck(sj3,-1);
if(!x9570.valid){
continue;
}
if( IKabs((x9568*(x9570.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9568)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9568*(x9570.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x9568))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9568*(x9570.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x9568));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9571=IKsin(j4);
IkReal x9572=IKcos(j4);
IkReal x9573=((1.0)*sj3);
IkReal x9574=(gconst1*sj3);
IkReal x9575=(gconst1*r01);
IkReal x9576=(cj2*sj0);
IkReal x9577=(sj1*sj2);
IkReal x9578=((1.0)*cj3);
IkReal x9579=(cj1*cj2);
IkReal x9580=(cj3*gconst1);
IkReal x9581=(cj2*sj1);
IkReal x9582=(gconst1*r21);
IkReal x9583=((1.0)*cj0);
IkReal x9584=(gconst2*r00);
IkReal x9585=(gconst2*r01);
IkReal x9586=(cj1*sj2);
IkReal x9587=(gconst2*r21);
IkReal x9588=(r12*x9571);
IkReal x9589=((1.0)*x9571);
IkReal x9590=(gconst2*r20*x9572);
evalcond[0]=((((-1.0)*r12*x9572))+(((-1.0)*x9583)));
evalcond[1]=(((x9571*x9582))+(((-1.0)*gconst2*r20*x9589)));
evalcond[2]=(sj0+((x9571*x9575))+(((-1.0)*x9584*x9589)));
evalcond[3]=(((sj0*x9586))+(((-1.0)*x9573*x9588))+((sj1*x9576)));
evalcond[4]=((((-1.0)*sj0*x9577))+((cj3*x9588))+((cj1*x9576)));
evalcond[5]=(((r21*x9572*x9580))+((sj3*x9587))+x9581+x9586+((r20*x9574))+(((-1.0)*x9578*x9590)));
evalcond[6]=(((r20*x9580))+(((-1.0)*x9579))+(((-1.0)*x9572*x9573*x9582))+((cj3*x9587))+((sj3*x9590))+x9577);
evalcond[7]=(((sj3*x9572*x9584))+(((-1.0)*x9572*x9573*x9575))+((r00*x9580))+((cj3*x9585))+((cj0*x9586))+((cj0*x9581)));
evalcond[8]=(((r00*x9574))+((cj0*x9579))+(((-1.0)*x9577*x9583))+((sj3*x9585))+(((-1.0)*x9572*x9578*x9584))+((cj3*x9572*x9575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9591=((1.0)*gconst2);
CheckValue<IkReal> x9592=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*r00*x9591))),-1);
if(!x9592.valid){
continue;
}
CheckValue<IkReal> x9593=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9591))),-1);
if(!x9593.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9592.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9593.value)*(((((-1.0)*r21*sj3*x9591))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9592.value)))+IKsqr(((x9593.value)*(((((-1.0)*r21*sj3*x9591))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9592.value)), ((x9593.value)*(((((-1.0)*r21*sj3*x9591))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9594=IKsin(j4);
IkReal x9595=IKcos(j4);
IkReal x9596=((1.0)*sj3);
IkReal x9597=(gconst1*sj3);
IkReal x9598=(gconst1*r01);
IkReal x9599=(cj2*sj0);
IkReal x9600=(sj1*sj2);
IkReal x9601=((1.0)*cj3);
IkReal x9602=(cj1*cj2);
IkReal x9603=(cj3*gconst1);
IkReal x9604=(cj2*sj1);
IkReal x9605=(gconst1*r21);
IkReal x9606=((1.0)*cj0);
IkReal x9607=(gconst2*r00);
IkReal x9608=(gconst2*r01);
IkReal x9609=(cj1*sj2);
IkReal x9610=(gconst2*r21);
IkReal x9611=(r12*x9594);
IkReal x9612=((1.0)*x9594);
IkReal x9613=(gconst2*r20*x9595);
evalcond[0]=((((-1.0)*r12*x9595))+(((-1.0)*x9606)));
evalcond[1]=(((x9594*x9605))+(((-1.0)*gconst2*r20*x9612)));
evalcond[2]=(((x9594*x9598))+sj0+(((-1.0)*x9607*x9612)));
evalcond[3]=(((sj1*x9599))+(((-1.0)*x9596*x9611))+((sj0*x9609)));
evalcond[4]=((((-1.0)*sj0*x9600))+((cj1*x9599))+((cj3*x9611)));
evalcond[5]=(((r20*x9597))+(((-1.0)*x9601*x9613))+((r21*x9595*x9603))+x9604+x9609+((sj3*x9610)));
evalcond[6]=(((cj3*x9610))+(((-1.0)*x9602))+(((-1.0)*x9595*x9596*x9605))+((r20*x9603))+x9600+((sj3*x9613)));
evalcond[7]=(((cj3*x9608))+(((-1.0)*x9595*x9596*x9598))+((r00*x9603))+((cj0*x9604))+((cj0*x9609))+((sj3*x9595*x9607)));
evalcond[8]=((((-1.0)*x9595*x9601*x9607))+((sj3*x9608))+((r00*x9597))+((cj0*x9602))+(((-1.0)*x9600*x9606))+((cj3*x9595*x9598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9614=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9614.valid){
continue;
}
CheckValue<IkReal> x9615=IKPowWithIntegerCheck(r12,-1);
if(!x9615.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9614.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9615.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9614.value)))+IKsqr(((-1.0)*cj0*(x9615.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9614.value)), ((-1.0)*cj0*(x9615.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9616=IKsin(j4);
IkReal x9617=IKcos(j4);
IkReal x9618=((1.0)*sj3);
IkReal x9619=(gconst1*sj3);
IkReal x9620=(gconst1*r01);
IkReal x9621=(cj2*sj0);
IkReal x9622=(sj1*sj2);
IkReal x9623=((1.0)*cj3);
IkReal x9624=(cj1*cj2);
IkReal x9625=(cj3*gconst1);
IkReal x9626=(cj2*sj1);
IkReal x9627=(gconst1*r21);
IkReal x9628=((1.0)*cj0);
IkReal x9629=(gconst2*r00);
IkReal x9630=(gconst2*r01);
IkReal x9631=(cj1*sj2);
IkReal x9632=(gconst2*r21);
IkReal x9633=(r12*x9616);
IkReal x9634=((1.0)*x9616);
IkReal x9635=(gconst2*r20*x9617);
evalcond[0]=((((-1.0)*r12*x9617))+(((-1.0)*x9628)));
evalcond[1]=(((x9616*x9627))+(((-1.0)*gconst2*r20*x9634)));
evalcond[2]=((((-1.0)*x9629*x9634))+sj0+((x9616*x9620)));
evalcond[3]=((((-1.0)*x9618*x9633))+((sj0*x9631))+((sj1*x9621)));
evalcond[4]=(((cj1*x9621))+(((-1.0)*sj0*x9622))+((cj3*x9633)));
evalcond[5]=(((r20*x9619))+((r21*x9617*x9625))+x9631+x9626+(((-1.0)*x9623*x9635))+((sj3*x9632)));
evalcond[6]=(((r20*x9625))+(((-1.0)*x9624))+((cj3*x9632))+x9622+(((-1.0)*x9617*x9618*x9627))+((sj3*x9635)));
evalcond[7]=(((cj0*x9626))+((cj0*x9631))+((r00*x9625))+((sj3*x9617*x9629))+((cj3*x9630))+(((-1.0)*x9617*x9618*x9620)));
evalcond[8]=(((cj0*x9624))+((r00*x9619))+((cj3*x9617*x9620))+(((-1.0)*x9622*x9628))+(((-1.0)*x9617*x9623*x9629))+((sj3*x9630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9636=gconst1*gconst1;
IkReal x9637=r21*r21;
IkReal x9638=gconst2*gconst2;
IkReal x9639=r20*r20;
IkReal x9640=(gconst2*r20);
IkReal x9641=(cj1*cj2);
IkReal x9642=(sj1*sj2);
IkReal x9643=(gconst1*r21);
IkReal x9644=(cj3*gconst2);
IkReal x9645=(cj3*r20);
CheckValue<IkReal> x9646 = IKatan2WithCheck(IkReal((((r22*x9642))+((gconst1*r22*x9645))+(((-1.0)*r22*x9641))+((r21*r22*x9644)))),IkReal((((x9642*x9643))+((gconst1*x9637*x9644))+((x9640*x9641))+(((-1.0)*x9641*x9643))+(((-1.0)*x9640*x9642))+(((-1.0)*gconst1*x9639*x9644))+((r21*x9636*x9645))+(((-1.0)*r21*x9638*x9645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9646.valid){
continue;
}
CheckValue<IkReal> x9647=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x9636*x9637))+(((-2.0)*sj3*x9640*x9643))+((sj3*x9638*x9639)))),-1);
if(!x9647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9646.value)+(((1.5707963267949)*(x9647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9648=IKsin(j4);
IkReal x9649=IKcos(j4);
IkReal x9650=(gconst1*sj3);
IkReal x9651=(cj2*sj0);
IkReal x9652=(cj3*gconst1);
IkReal x9653=(sj1*sj2);
IkReal x9654=(cj3*gconst2);
IkReal x9655=(cj1*cj2);
IkReal x9656=(gconst2*sj3);
IkReal x9657=(cj2*sj1);
IkReal x9658=((1.0)*cj0);
IkReal x9659=(cj1*sj2);
IkReal x9660=((1.0)*x9649);
IkReal x9661=((1.0)*x9648);
IkReal x9662=(gconst1*x9648);
IkReal x9663=(cj3*x9648);
IkReal x9664=(x9649*x9656);
evalcond[0]=((((-1.0)*gconst2*r20*x9661))+((r21*x9662))+(((-1.0)*r22*x9660)));
evalcond[1]=(sj0+((r01*x9662))+(((-1.0)*gconst2*r00*x9661))+(((-1.0)*r02*x9660)));
evalcond[2]=(((r11*x9662))+(((-1.0)*r12*x9660))+(((-1.0)*gconst2*r10*x9661))+(((-1.0)*x9658)));
evalcond[3]=(((r21*x9656))+((r20*x9650))+x9657+x9659+((r22*x9663))+((r21*x9649*x9652))+(((-1.0)*r20*x9654*x9660)));
evalcond[4]=(((r21*x9654))+((r20*x9652))+((r20*x9664))+x9653+(((-1.0)*x9655))+(((-1.0)*r22*sj3*x9661))+(((-1.0)*r21*x9650*x9660)));
evalcond[5]=((((-1.0)*r01*x9650*x9660))+(((-1.0)*r02*sj3*x9661))+((r00*x9664))+((r01*x9654))+((cj0*x9657))+((cj0*x9659))+((r00*x9652)));
evalcond[6]=(((r01*x9649*x9652))+(((-1.0)*x9653*x9658))+((r01*x9656))+((cj0*x9655))+((r00*x9650))+(((-1.0)*r00*x9654*x9660))+((r02*x9663)));
evalcond[7]=(((sj1*x9651))+((r11*x9654))+((r10*x9664))+(((-1.0)*r11*x9650*x9660))+((r10*x9652))+(((-1.0)*r12*sj3*x9661))+((sj0*x9659)));
evalcond[8]=((((-1.0)*r10*x9654*x9660))+((r11*x9649*x9652))+((r11*x9656))+(((-1.0)*sj0*x9653))+((r12*x9663))+((r10*x9650))+((cj1*x9651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9665=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9665.valid){
continue;
}
CheckValue<IkReal> x9666 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9665.value)))+(x9666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9667=IKsin(j4);
IkReal x9668=IKcos(j4);
IkReal x9669=(gconst1*sj3);
IkReal x9670=(cj2*sj0);
IkReal x9671=(cj3*gconst1);
IkReal x9672=(sj1*sj2);
IkReal x9673=(cj3*gconst2);
IkReal x9674=(cj1*cj2);
IkReal x9675=(gconst2*sj3);
IkReal x9676=(cj2*sj1);
IkReal x9677=((1.0)*cj0);
IkReal x9678=(cj1*sj2);
IkReal x9679=((1.0)*x9668);
IkReal x9680=((1.0)*x9667);
IkReal x9681=(gconst1*x9667);
IkReal x9682=(cj3*x9667);
IkReal x9683=(x9668*x9675);
evalcond[0]=(((r21*x9681))+(((-1.0)*gconst2*r20*x9680))+(((-1.0)*r22*x9679)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9680))+(((-1.0)*r02*x9679))+((r01*x9681)));
evalcond[2]=((((-1.0)*x9677))+(((-1.0)*gconst2*r10*x9680))+(((-1.0)*r12*x9679))+((r11*x9681)));
evalcond[3]=(((r21*x9675))+(((-1.0)*r20*x9673*x9679))+((r20*x9669))+((r22*x9682))+x9676+x9678+((r21*x9668*x9671)));
evalcond[4]=(((r21*x9673))+(((-1.0)*r22*sj3*x9680))+((r20*x9671))+(((-1.0)*r21*x9669*x9679))+x9672+(((-1.0)*x9674))+((r20*x9683)));
evalcond[5]=(((cj0*x9678))+((cj0*x9676))+((r01*x9673))+((r00*x9671))+(((-1.0)*r02*sj3*x9680))+(((-1.0)*r01*x9669*x9679))+((r00*x9683)));
evalcond[6]=(((cj0*x9674))+(((-1.0)*r00*x9673*x9679))+((r01*x9675))+((r02*x9682))+((r00*x9669))+((r01*x9668*x9671))+(((-1.0)*x9672*x9677)));
evalcond[7]=((((-1.0)*r11*x9669*x9679))+((r11*x9673))+((r10*x9671))+((sj0*x9678))+((r10*x9683))+((sj1*x9670))+(((-1.0)*r12*sj3*x9680)));
evalcond[8]=((((-1.0)*r10*x9673*x9679))+(((-1.0)*sj0*x9672))+((r11*x9668*x9671))+((r11*x9675))+((r10*x9669))+((r12*x9682))+((cj1*x9670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9684=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9684.valid){
continue;
}
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9684.value)))+(x9685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9686=IKsin(j4);
IkReal x9687=IKcos(j4);
IkReal x9688=(gconst1*sj3);
IkReal x9689=(cj2*sj0);
IkReal x9690=(cj3*gconst1);
IkReal x9691=(sj1*sj2);
IkReal x9692=(cj3*gconst2);
IkReal x9693=(cj1*cj2);
IkReal x9694=(gconst2*sj3);
IkReal x9695=(cj2*sj1);
IkReal x9696=((1.0)*cj0);
IkReal x9697=(cj1*sj2);
IkReal x9698=((1.0)*x9687);
IkReal x9699=((1.0)*x9686);
IkReal x9700=(gconst1*x9686);
IkReal x9701=(cj3*x9686);
IkReal x9702=(x9687*x9694);
evalcond[0]=(((r21*x9700))+(((-1.0)*r22*x9698))+(((-1.0)*gconst2*r20*x9699)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9699))+(((-1.0)*r02*x9698))+((r01*x9700)));
evalcond[2]=((((-1.0)*gconst2*r10*x9699))+(((-1.0)*r12*x9698))+((r11*x9700))+(((-1.0)*x9696)));
evalcond[3]=(((r21*x9694))+x9697+x9695+((r21*x9687*x9690))+(((-1.0)*r20*x9692*x9698))+((r20*x9688))+((r22*x9701)));
evalcond[4]=((((-1.0)*x9693))+(((-1.0)*r22*sj3*x9699))+((r20*x9702))+((r21*x9692))+x9691+(((-1.0)*r21*x9688*x9698))+((r20*x9690)));
evalcond[5]=((((-1.0)*r02*sj3*x9699))+((r00*x9702))+((r00*x9690))+((cj0*x9697))+((cj0*x9695))+((r01*x9692))+(((-1.0)*r01*x9688*x9698)));
evalcond[6]=(((r02*x9701))+((r01*x9687*x9690))+(((-1.0)*r00*x9692*x9698))+(((-1.0)*x9691*x9696))+((cj0*x9693))+((r01*x9694))+((r00*x9688)));
evalcond[7]=(((r10*x9702))+((sj1*x9689))+((sj0*x9697))+((r11*x9692))+((r10*x9690))+(((-1.0)*r12*sj3*x9699))+(((-1.0)*r11*x9688*x9698)));
evalcond[8]=(((r12*x9701))+((cj1*x9689))+((r11*x9687*x9690))+(((-1.0)*sj0*x9691))+((r11*x9694))+((r10*x9688))+(((-1.0)*r10*x9692*x9698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9703=((-1.0)*r21);
IkReal x9705 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9705)==0){
continue;
}
IkReal x9704=pow(x9705,-0.5);
CheckValue<IkReal> x9706 = IKatan2WithCheck(IkReal(x9703),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9706.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9706.value))));
IkReal gconst4=(x9703*x9704);
IkReal gconst5=((1.0)*r20*x9704);
CheckValue<IkReal> x9707 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9707.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9707.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9708=((-1.0)*r21);
CheckValue<IkReal> x9711 = IKatan2WithCheck(IkReal(x9708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9711.valid){
continue;
}
IkReal x9709=((1.0)*(x9711.value));
IkReal x9710=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9709)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9709)));
IkReal gconst4=(x9708*x9710);
IkReal gconst5=((1.0)*r20*x9710);
IkReal x9712=r22*r22;
IkReal x9713=((1.0)*x9712);
CheckValue<IkReal> x9717=IKPowWithIntegerCheck(((-1.0)+x9712),-1);
if(!x9717.valid){
continue;
}
IkReal x9714=x9717.value;
if((((1.0)+(((-1.0)*x9713)))) < -0.00001)
continue;
IkReal x9715=IKsqrt(((1.0)+(((-1.0)*x9713))));
IkReal x9716=(sj0*x9714*x9715);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x9716+(((-1.0)*x9713*x9716))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9718=((-1.0)*r21);
CheckValue<IkReal> x9721 = IKatan2WithCheck(IkReal(x9718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9721.valid){
continue;
}
IkReal x9719=((1.0)*(x9721.value));
IkReal x9720=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9719)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9719)));
IkReal gconst4=(x9718*x9720);
IkReal gconst5=((1.0)*r20*x9720);
IkReal x9722=r22*r22;
IkReal x9723=((1.0)*x9722);
CheckValue<IkReal> x9727=IKPowWithIntegerCheck(((-1.0)+x9722),-1);
if(!x9727.valid){
continue;
}
IkReal x9724=x9727.value;
if((((1.0)+(((-1.0)*x9723)))) < -0.00001)
continue;
IkReal x9725=IKsqrt(((1.0)+(((-1.0)*x9723))));
IkReal x9726=(cj0*x9724*x9725);
j4eval[0]=((IKabs((x9726+(((-1.0)*x9723*x9726)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9728=((-1.0)*r21);
CheckValue<IkReal> x9731 = IKatan2WithCheck(IkReal(x9728),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9731.valid){
continue;
}
IkReal x9729=((1.0)*(x9731.value));
IkReal x9730=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9729)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9729)));
IkReal gconst4=(x9728*x9730);
IkReal gconst5=((1.0)*r20*x9730);
IkReal x9732=r22*r22;
IkReal x9733=(cj0*r02);
IkReal x9734=(r12*sj0);
CheckValue<IkReal> x9738=IKPowWithIntegerCheck(((-1.0)+x9732),-1);
if(!x9738.valid){
continue;
}
IkReal x9735=x9738.value;
if((((1.0)+(((-1.0)*x9732)))) < -0.00001)
continue;
IkReal x9736=IKsqrt(((1.0)+(((-1.0)*x9732))));
IkReal x9737=((1.0)*r22*x9735*x9736);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9733*x9737))+(((-1.0)*x9734*x9737)))))+(IKabs((x9733+x9734))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9739=((-1.0)*r21);
CheckValue<IkReal> x9742 = IKatan2WithCheck(IkReal(x9739),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9742.valid){
continue;
}
IkReal x9740=((1.0)*(x9742.value));
IkReal x9741=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9740)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9740)));
IkReal gconst4=(x9739*x9741);
IkReal gconst5=((1.0)*r20*x9741);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9743=((-1.0)*r21);
CheckValue<IkReal> x9746 = IKatan2WithCheck(IkReal(x9743),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9746.valid){
continue;
}
IkReal x9744=((1.0)*(x9746.value));
IkReal x9745=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9744)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9744)));
IkReal gconst4=(x9743*x9745);
IkReal gconst5=((1.0)*r20*x9745);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9747=((-1.0)*r21);
CheckValue<IkReal> x9750 = IKatan2WithCheck(IkReal(x9747),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9750.valid){
continue;
}
IkReal x9748=((1.0)*(x9750.value));
IkReal x9749=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9748)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9748)));
IkReal gconst4=(x9747*x9749);
IkReal gconst5=((1.0)*r20*x9749);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9751=((-1.0)*r21);
CheckValue<IkReal> x9754 = IKatan2WithCheck(IkReal(x9751),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9754.valid){
continue;
}
IkReal x9752=((1.0)*(x9754.value));
IkReal x9753=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9752)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9752)));
IkReal gconst4=(x9751*x9753);
IkReal gconst5=((1.0)*r20*x9753);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9755=((-1.0)*r21);
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(x9755),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9756=((1.0)*(x9758.value));
IkReal x9757=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9756)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9756)));
IkReal gconst4=(x9755*x9757);
IkReal gconst5=((1.0)*r20*x9757);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9759=((-1.0)*r21);
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(x9759),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
IkReal x9760=((1.0)*(x9762.value));
IkReal x9761=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9760)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9760)));
IkReal gconst4=(x9759*x9761);
IkReal gconst5=((1.0)*r20*x9761);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9763=(gconst5*r00);
IkReal x9764=(gconst4*r01);
CheckValue<IkReal> x9765=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9763*x9764))+(x9764*x9764)+(x9763*x9763)+(r02*r02))),-1);
if(!x9765.valid){
continue;
}
CheckValue<IkReal> x9766 = IKatan2WithCheck(IkReal(((((-1.0)*x9764))+x9763)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9765.value)))+(x9766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9767=IKsin(j4);
IkReal x9768=IKcos(j4);
IkReal x9769=(gconst4*r11);
IkReal x9770=(gconst5*r10);
IkReal x9771=(gconst4*r01);
IkReal x9772=(gconst5*r00);
IkReal x9773=(gconst4*r21);
IkReal x9774=(gconst5*r20);
IkReal x9775=((1.0)*x9768);
IkReal x9776=((1.0)*x9767);
evalcond[0]=(((x9767*x9773))+(((-1.0)*r22*x9775))+(((-1.0)*x9774*x9776)));
evalcond[1]=(((x9767*x9769))+(((-1.0)*r12*x9775))+(((-1.0)*x9770*x9776)));
evalcond[2]=(((x9768*x9772))+(((-1.0)*x9771*x9775))+(((-1.0)*r02*x9776)));
evalcond[3]=((1.0)+((x9767*x9771))+(((-1.0)*r02*x9775))+(((-1.0)*x9772*x9776)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9769*x9775))+((cj1*sj2))+((x9768*x9770))+(((-1.0)*r12*x9776)));
evalcond[5]=((((-1.0)*r22*x9776))+((x9768*x9774))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9773*x9775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9777=((1.0)*gconst5);
CheckValue<IkReal> x9778 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9778.valid){
continue;
}
CheckValue<IkReal> x9779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9777))+(((-1.0)*gconst4*r20)))),-1);
if(!x9779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9778.value)+(((1.5707963267949)*(x9779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9780=IKsin(j4);
IkReal x9781=IKcos(j4);
IkReal x9782=(gconst4*r11);
IkReal x9783=(gconst5*r10);
IkReal x9784=(gconst4*r01);
IkReal x9785=(gconst5*r00);
IkReal x9786=(gconst4*r21);
IkReal x9787=(gconst5*r20);
IkReal x9788=((1.0)*x9781);
IkReal x9789=((1.0)*x9780);
evalcond[0]=((((-1.0)*x9787*x9789))+(((-1.0)*r22*x9788))+((x9780*x9786)));
evalcond[1]=((((-1.0)*r12*x9788))+(((-1.0)*x9783*x9789))+((x9780*x9782)));
evalcond[2]=(((x9781*x9785))+(((-1.0)*x9784*x9788))+(((-1.0)*r02*x9789)));
evalcond[3]=((1.0)+(((-1.0)*x9785*x9789))+(((-1.0)*r02*x9788))+((x9780*x9784)));
evalcond[4]=((((-1.0)*r12*x9789))+((cj2*sj1))+((cj1*sj2))+((x9781*x9783))+(((-1.0)*x9782*x9788)));
evalcond[5]=((((-1.0)*x9786*x9788))+((x9781*x9787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9790=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9790.valid){
continue;
}
CheckValue<IkReal> x9791 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9790.value)))+(x9791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9792=IKsin(j4);
IkReal x9793=IKcos(j4);
IkReal x9794=(gconst4*r11);
IkReal x9795=(gconst5*r10);
IkReal x9796=(gconst4*r01);
IkReal x9797=(gconst5*r00);
IkReal x9798=(gconst4*r21);
IkReal x9799=(gconst5*r20);
IkReal x9800=((1.0)*x9793);
IkReal x9801=((1.0)*x9792);
evalcond[0]=(((x9792*x9798))+(((-1.0)*r22*x9800))+(((-1.0)*x9799*x9801)));
evalcond[1]=(((x9792*x9794))+(((-1.0)*x9795*x9801))+(((-1.0)*r12*x9800)));
evalcond[2]=((((-1.0)*r02*x9801))+((x9793*x9797))+(((-1.0)*x9796*x9800)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9800))+((x9792*x9796))+(((-1.0)*x9797*x9801)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9794*x9800))+((cj1*sj2))+((x9793*x9795))+(((-1.0)*r12*x9801)));
evalcond[5]=((((-1.0)*r22*x9801))+(((-1.0)*cj1*cj2))+((x9793*x9799))+((sj1*sj2))+(((-1.0)*x9798*x9800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9802=((-1.0)*r21);
CheckValue<IkReal> x9805 = IKatan2WithCheck(IkReal(x9802),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9805.valid){
continue;
}
IkReal x9803=((1.0)*(x9805.value));
IkReal x9804=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9803)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9803)));
IkReal gconst4=(x9802*x9804);
IkReal gconst5=((1.0)*r20*x9804);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9806=((-1.0)*r21);
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal(x9806),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
IkReal x9807=((1.0)*(x9809.value));
IkReal x9808=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9807)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9807)));
IkReal gconst4=(x9806*x9808);
IkReal gconst5=((1.0)*r20*x9808);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9810=((-1.0)*r21);
CheckValue<IkReal> x9813 = IKatan2WithCheck(IkReal(x9810),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9813.valid){
continue;
}
IkReal x9811=((1.0)*(x9813.value));
IkReal x9812=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9811)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9811)));
IkReal gconst4=(x9810*x9812);
IkReal gconst5=((1.0)*r20*x9812);
IkReal x9814=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9818=IKPowWithIntegerCheck(x9814,-1);
if(!x9818.valid){
continue;
}
IkReal x9815=x9818.value;
IkReal x9816=((1.0)*x9815);
IkReal x9817=((((-2.0)*r00*r01*r20*r21*x9815))+(((-1.0)*(r02*r02)))+(((-1.0)*x9816*(r01*r01)*(r21*r21)))+(((-1.0)*x9816*(r00*r00)*(r20*r20))));
j4eval[0]=x9817;
j4eval[1]=IKsign(x9817);
j4eval[2]=r02;
j4eval[3]=x9814;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9819=(gconst4*r01);
IkReal x9820=(gconst5*r00);
CheckValue<IkReal> x9821 = IKatan2WithCheck(IkReal((x9819+(((-1.0)*x9820)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9821.valid){
continue;
}
CheckValue<IkReal> x9822=IKPowWithIntegerCheck(IKsign(((((2.0)*x9819*x9820))+(((-1.0)*(x9819*x9819)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9820*x9820))))),-1);
if(!x9822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9821.value)+(((1.5707963267949)*(x9822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9823=IKcos(j4);
IkReal x9824=IKsin(j4);
IkReal x9825=(gconst4*r11);
IkReal x9826=(gconst5*r10);
IkReal x9827=(gconst5*r00);
IkReal x9828=(gconst5*r20);
IkReal x9829=((1.0)*x9823);
IkReal x9830=(gconst4*x9823);
IkReal x9831=((1.0)*x9824);
IkReal x9832=(gconst4*x9824);
evalcond[0]=((((-1.0)*x9827*x9829))+((r01*x9830))+((r02*x9824)));
evalcond[1]=(((r21*x9832))+(((-1.0)*x9828*x9831))+(((-1.0)*r22*x9829)));
evalcond[2]=((((-1.0)*x9826*x9831))+(((-1.0)*r12*x9829))+((x9824*x9825)));
evalcond[3]=((1.0)+(((-1.0)*x9827*x9831))+((r01*x9832))+(((-1.0)*r02*x9829)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x9824))+(((-1.0)*x9826*x9829))+((x9823*x9825)));
evalcond[5]=(((r21*x9830))+(((-1.0)*x9828*x9829))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9833=((1.0)*gconst5);
CheckValue<IkReal> x9834 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9834.valid){
continue;
}
CheckValue<IkReal> x9835=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9833))+(((-1.0)*gconst4*r20)))),-1);
if(!x9835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9834.value)+(((1.5707963267949)*(x9835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9836=IKcos(j4);
IkReal x9837=IKsin(j4);
IkReal x9838=(gconst4*r11);
IkReal x9839=(gconst5*r10);
IkReal x9840=(gconst5*r00);
IkReal x9841=(gconst5*r20);
IkReal x9842=((1.0)*x9836);
IkReal x9843=(gconst4*x9836);
IkReal x9844=((1.0)*x9837);
IkReal x9845=(gconst4*x9837);
evalcond[0]=((((-1.0)*x9840*x9842))+((r01*x9843))+((r02*x9837)));
evalcond[1]=((((-1.0)*x9841*x9844))+(((-1.0)*r22*x9842))+((r21*x9845)));
evalcond[2]=((((-1.0)*r12*x9842))+(((-1.0)*x9839*x9844))+((x9837*x9838)));
evalcond[3]=((1.0)+(((-1.0)*x9840*x9844))+(((-1.0)*r02*x9842))+((r01*x9845)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9839*x9842))+((cj1*sj2))+((r12*x9837))+((x9836*x9838)));
evalcond[5]=(((r22*x9837))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9841*x9842))+((r21*x9843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9846=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9846.valid){
continue;
}
CheckValue<IkReal> x9847 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9846.value)))+(x9847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9848=IKcos(j4);
IkReal x9849=IKsin(j4);
IkReal x9850=(gconst4*r11);
IkReal x9851=(gconst5*r10);
IkReal x9852=(gconst5*r00);
IkReal x9853=(gconst5*r20);
IkReal x9854=((1.0)*x9848);
IkReal x9855=(gconst4*x9848);
IkReal x9856=((1.0)*x9849);
IkReal x9857=(gconst4*x9849);
evalcond[0]=(((r02*x9849))+((r01*x9855))+(((-1.0)*x9852*x9854)));
evalcond[1]=(((r21*x9857))+(((-1.0)*x9853*x9856))+(((-1.0)*r22*x9854)));
evalcond[2]=(((x9849*x9850))+(((-1.0)*x9851*x9856))+(((-1.0)*r12*x9854)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9854))+((r01*x9857))+(((-1.0)*x9852*x9856)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9848*x9850))+(((-1.0)*x9851*x9854))+((r12*x9849)));
evalcond[5]=(((r21*x9855))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9853*x9854))+((r22*x9849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9858=((-1.0)*r21);
CheckValue<IkReal> x9861 = IKatan2WithCheck(IkReal(x9858),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9861.valid){
continue;
}
IkReal x9859=((1.0)*(x9861.value));
IkReal x9860=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9859)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9859)));
IkReal gconst4=(x9858*x9860);
IkReal gconst5=((1.0)*r20*x9860);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9862=((-1.0)*r21);
CheckValue<IkReal> x9865 = IKatan2WithCheck(IkReal(x9862),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9865.valid){
continue;
}
IkReal x9863=((1.0)*(x9865.value));
IkReal x9864=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9863)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9863)));
IkReal gconst4=(x9862*x9864);
IkReal gconst5=((1.0)*r20*x9864);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9866=((-1.0)*r21);
CheckValue<IkReal> x9869 = IKatan2WithCheck(IkReal(x9866),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9869.valid){
continue;
}
IkReal x9867=((1.0)*(x9869.value));
IkReal x9868=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9867)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9867)));
IkReal gconst4=(x9866*x9868);
IkReal gconst5=((1.0)*r20*x9868);
IkReal x9870=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9874=IKPowWithIntegerCheck(x9870,-1);
if(!x9874.valid){
continue;
}
IkReal x9871=x9874.value;
IkReal x9872=((1.0)*x9871);
IkReal x9873=((((-1.0)*(r02*r02)))+(((-1.0)*x9872*(r00*r00)*(r20*r20)))+(((-1.0)*x9872*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9871)));
j4eval[0]=x9873;
j4eval[1]=IKsign(x9873);
j4eval[2]=r02;
j4eval[3]=x9870;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9875=(gconst4*r01);
IkReal x9876=(gconst5*r00);
CheckValue<IkReal> x9877=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9875*x9875)))+(((2.0)*x9875*x9876))+(((-1.0)*(x9876*x9876))))),-1);
if(!x9877.valid){
continue;
}
CheckValue<IkReal> x9878 = IKatan2WithCheck(IkReal(((((-1.0)*x9876))+x9875)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9877.value)))+(x9878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9879=IKcos(j4);
IkReal x9880=IKsin(j4);
IkReal x9881=(gconst5*r10);
IkReal x9882=(gconst5*r00);
IkReal x9883=(gconst5*r20);
IkReal x9884=((1.0)*x9879);
IkReal x9885=(gconst4*x9880);
IkReal x9886=(gconst4*x9879);
IkReal x9887=((1.0)*x9880);
evalcond[0]=(((r01*x9886))+(((-1.0)*x9882*x9884))+((r02*x9880)));
evalcond[1]=((((-1.0)*r22*x9884))+((r21*x9885))+(((-1.0)*x9883*x9887)));
evalcond[2]=(((r11*x9885))+(((-1.0)*r12*x9884))+(((-1.0)*x9881*x9887)));
evalcond[3]=((1.0)+((r01*x9885))+(((-1.0)*x9882*x9887))+(((-1.0)*r02*x9884)));
evalcond[4]=(((cj2*sj1))+((r21*x9886))+((cj1*sj2))+(((-1.0)*x9883*x9884))+((r22*x9880)));
evalcond[5]=(((r12*x9880))+(((-1.0)*sj1*sj2))+((r11*x9886))+((cj1*cj2))+(((-1.0)*x9881*x9884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9888=((1.0)*gconst5);
CheckValue<IkReal> x9889 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9888))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9889.valid){
continue;
}
CheckValue<IkReal> x9890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9888))+(((-1.0)*gconst4*r20)))),-1);
if(!x9890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9889.value)+(((1.5707963267949)*(x9890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9891=IKcos(j4);
IkReal x9892=IKsin(j4);
IkReal x9893=(gconst5*r10);
IkReal x9894=(gconst5*r00);
IkReal x9895=(gconst5*r20);
IkReal x9896=((1.0)*x9891);
IkReal x9897=(gconst4*x9892);
IkReal x9898=(gconst4*x9891);
IkReal x9899=((1.0)*x9892);
evalcond[0]=(((r01*x9898))+(((-1.0)*x9894*x9896))+((r02*x9892)));
evalcond[1]=(((r21*x9897))+(((-1.0)*x9895*x9899))+(((-1.0)*r22*x9896)));
evalcond[2]=((((-1.0)*r12*x9896))+((r11*x9897))+(((-1.0)*x9893*x9899)));
evalcond[3]=((1.0)+((r01*x9897))+(((-1.0)*x9894*x9899))+(((-1.0)*r02*x9896)));
evalcond[4]=(((cj2*sj1))+((r22*x9892))+((cj1*sj2))+((r21*x9898))+(((-1.0)*x9895*x9896)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x9898))+(((-1.0)*x9893*x9896))+((r12*x9892))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9900=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9900.valid){
continue;
}
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9900.value)))+(x9901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9902=IKcos(j4);
IkReal x9903=IKsin(j4);
IkReal x9904=(gconst5*r10);
IkReal x9905=(gconst5*r00);
IkReal x9906=(gconst5*r20);
IkReal x9907=((1.0)*x9902);
IkReal x9908=(gconst4*x9903);
IkReal x9909=(gconst4*x9902);
IkReal x9910=((1.0)*x9903);
evalcond[0]=(((r02*x9903))+(((-1.0)*x9905*x9907))+((r01*x9909)));
evalcond[1]=((((-1.0)*r22*x9907))+(((-1.0)*x9906*x9910))+((r21*x9908)));
evalcond[2]=((((-1.0)*r12*x9907))+((r11*x9908))+(((-1.0)*x9904*x9910)));
evalcond[3]=((1.0)+(((-1.0)*x9905*x9910))+((r01*x9908))+(((-1.0)*r02*x9907)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9903))+((r21*x9909))+(((-1.0)*x9906*x9907)));
evalcond[5]=(((r12*x9903))+(((-1.0)*sj1*sj2))+((r11*x9909))+(((-1.0)*x9904*x9907))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9911=((-1.0)*r21);
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(x9911),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
IkReal x9912=((1.0)*(x9914.value));
IkReal x9913=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9912)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9912)));
IkReal gconst4=(x9911*x9913);
IkReal gconst5=((1.0)*r20*x9913);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9915=((-1.0)*r21);
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal(x9915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
IkReal x9916=((1.0)*(x9918.value));
IkReal x9917=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9916)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9916)));
IkReal gconst4=(x9915*x9917);
IkReal gconst5=((1.0)*r20*x9917);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9919=((-1.0)*r21);
CheckValue<IkReal> x9922 = IKatan2WithCheck(IkReal(x9919),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9922.valid){
continue;
}
IkReal x9920=((1.0)*(x9922.value));
IkReal x9921=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9920)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9920)));
IkReal gconst4=(x9919*x9921);
IkReal gconst5=((1.0)*r20*x9921);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9923=(gconst5*r00);
IkReal x9924=(gconst4*r01);
CheckValue<IkReal> x9925 = IKatan2WithCheck(IkReal(((((-1.0)*x9924))+x9923)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9925.valid){
continue;
}
CheckValue<IkReal> x9926=IKPowWithIntegerCheck(IKsign(((x9924*x9924)+(x9923*x9923)+(r02*r02)+(((-2.0)*x9923*x9924)))),-1);
if(!x9926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9925.value)+(((1.5707963267949)*(x9926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9927=IKsin(j4);
IkReal x9928=IKcos(j4);
IkReal x9929=(gconst4*r11);
IkReal x9930=(gconst5*r10);
IkReal x9931=(gconst5*r00);
IkReal x9932=(gconst5*r20);
IkReal x9933=((1.0)*x9928);
IkReal x9934=(gconst4*x9927);
IkReal x9935=((1.0)*x9927);
evalcond[0]=((((-1.0)*r22*x9933))+((r21*x9934))+(((-1.0)*x9932*x9935)));
evalcond[1]=((((-1.0)*x9930*x9935))+((x9927*x9929))+(((-1.0)*r12*x9933)));
evalcond[2]=((((-1.0)*r02*x9935))+(((-1.0)*gconst4*r01*x9933))+((x9928*x9931)));
evalcond[3]=((1.0)+((r01*x9934))+(((-1.0)*r02*x9933))+(((-1.0)*x9931*x9935)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x9933))+((cj1*sj2))+(((-1.0)*r22*x9935))+((x9928*x9932)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9929*x9933))+((cj1*cj2))+((x9928*x9930))+(((-1.0)*r12*x9935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9936=((1.0)*gconst5);
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9936))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
CheckValue<IkReal> x9938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9936))+(((-1.0)*gconst4*r20)))),-1);
if(!x9938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9937.value)+(((1.5707963267949)*(x9938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9939=IKsin(j4);
IkReal x9940=IKcos(j4);
IkReal x9941=(gconst4*r11);
IkReal x9942=(gconst5*r10);
IkReal x9943=(gconst5*r00);
IkReal x9944=(gconst5*r20);
IkReal x9945=((1.0)*x9940);
IkReal x9946=(gconst4*x9939);
IkReal x9947=((1.0)*x9939);
evalcond[0]=((((-1.0)*x9944*x9947))+(((-1.0)*r22*x9945))+((r21*x9946)));
evalcond[1]=((((-1.0)*r12*x9945))+((x9939*x9941))+(((-1.0)*x9942*x9947)));
evalcond[2]=(((x9940*x9943))+(((-1.0)*gconst4*r01*x9945))+(((-1.0)*r02*x9947)));
evalcond[3]=((1.0)+((r01*x9946))+(((-1.0)*x9943*x9947))+(((-1.0)*r02*x9945)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9947))+((x9940*x9944))+(((-1.0)*gconst4*r21*x9945)));
evalcond[5]=((((-1.0)*x9941*x9945))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9947))+((cj1*cj2))+((x9940*x9942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9948.value)))+(x9949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9950=IKsin(j4);
IkReal x9951=IKcos(j4);
IkReal x9952=(gconst4*r11);
IkReal x9953=(gconst5*r10);
IkReal x9954=(gconst5*r00);
IkReal x9955=(gconst5*r20);
IkReal x9956=((1.0)*x9951);
IkReal x9957=(gconst4*x9950);
IkReal x9958=((1.0)*x9950);
evalcond[0]=((((-1.0)*x9955*x9958))+(((-1.0)*r22*x9956))+((r21*x9957)));
evalcond[1]=(((x9950*x9952))+(((-1.0)*x9953*x9958))+(((-1.0)*r12*x9956)));
evalcond[2]=(((x9951*x9954))+(((-1.0)*r02*x9958))+(((-1.0)*gconst4*r01*x9956)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9956))+(((-1.0)*x9954*x9958))+((r01*x9957)));
evalcond[4]=((((-1.0)*gconst4*r21*x9956))+((cj2*sj1))+((x9951*x9955))+((cj1*sj2))+(((-1.0)*r22*x9958)));
evalcond[5]=(((x9951*x9953))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9958))+((cj1*cj2))+(((-1.0)*x9952*x9956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9959=((-1.0)*r21);
IkReal x9960=((-1.0)*r20);
CheckValue<IkReal> x9962 = IKatan2WithCheck(IkReal(x9959),IkReal(x9960),IKFAST_ATAN2_MAGTHRESH);
if(!x9962.valid){
continue;
}
IkReal x9961=((1.0)*(x9962.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9961)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9960);
rxp0_2=(py*r00);
rxp1_0=(py*x9959);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9961)));
IkReal gconst4=x9959;
IkReal gconst5=((1.0)*r20);
IkReal x9963=((1.0)*r01*r21);
IkReal x9964=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9964))+(((-1.0)*x9963)));
j4eval[1]=(((sj3*x9963))+((sj3*x9964)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9965=((-1.0)*r21);
IkReal x9966=((-1.0)*r20);
CheckValue<IkReal> x9968 = IKatan2WithCheck(IkReal(x9965),IkReal(x9966),IKFAST_ATAN2_MAGTHRESH);
if(!x9968.valid){
continue;
}
IkReal x9967=((1.0)*(x9968.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9967)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9966);
rxp0_2=(py*r00);
rxp1_0=(py*x9965);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9967)));
IkReal gconst4=x9965;
IkReal gconst5=((1.0)*r20);
IkReal x9969=((1.0)*r01*r21);
IkReal x9970=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9969))+(((-1.0)*x9970)));
j4eval[1]=((((-1.0)*cj3*x9969))+(((-1.0)*cj3*x9970)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9971=((-1.0)*r21);
IkReal x9972=((-1.0)*r20);
CheckValue<IkReal> x9974 = IKatan2WithCheck(IkReal(x9971),IkReal(x9972),IKFAST_ATAN2_MAGTHRESH);
if(!x9974.valid){
continue;
}
IkReal x9973=((1.0)*(x9974.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9973)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9972);
rxp0_2=(py*r00);
rxp1_0=(py*x9971);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9973)));
IkReal gconst4=x9971;
IkReal gconst5=((1.0)*r20);
IkReal x9975=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x9975))+((r00*r20*x9975)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9976=((1.0)*r01);
CheckValue<IkReal> x9977=IKPowWithIntegerCheck(r12,-1);
if(!x9977.valid){
continue;
}
CheckValue<IkReal> x9978=IKPowWithIntegerCheck(sj3,-1);
if(!x9978.valid){
continue;
}
CheckValue<IkReal> x9979=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x9976))),-1);
if(!x9979.valid){
continue;
}
if( IKabs(((x9977.value)*(x9978.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9979.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x9976)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9977.value)*(x9978.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9979.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x9976))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9977.value)*(x9978.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9979.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x9976))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9980=IKsin(j4);
IkReal x9981=IKcos(j4);
IkReal x9982=(cj2*sj1);
IkReal x9983=(cj1*sj2);
IkReal x9984=(sj1*sj2);
IkReal x9985=(gconst5*r00);
IkReal x9986=(gconst5*sj3);
IkReal x9987=(cj3*gconst5);
IkReal x9988=(gconst4*sj3);
IkReal x9989=(cj3*gconst4);
IkReal x9990=(cj1*cj2);
IkReal x9991=((1.0)*x9980);
IkReal x9992=(gconst4*x9980);
IkReal x9993=((1.0)*x9981);
IkReal x9994=(x9982+x9983);
IkReal x9995=(x9981*x9986);
IkReal x9996=(x9981*x9989);
evalcond[0]=((-1.0)*r12*x9981);
evalcond[1]=(((r21*x9992))+(((-1.0)*gconst5*r20*x9991)));
evalcond[2]=(x9994+(((-1.0)*r12*sj3*x9991)));
evalcond[3]=(((cj3*r12*x9980))+(((-1.0)*x9984))+x9990);
evalcond[4]=((1.0)+((r01*x9992))+(((-1.0)*x9985*x9991)));
evalcond[5]=(((r00*x9989))+((r01*x9987))+((sj3*x9981*x9985))+(((-1.0)*r01*x9988*x9993)));
evalcond[6]=(((r00*x9988))+((r01*x9996))+((r01*x9986))+(((-1.0)*cj3*x9985*x9993)));
evalcond[7]=(((r21*x9996))+((r21*x9986))+((r20*x9988))+x9994+(((-1.0)*r20*x9987*x9993)));
evalcond[8]=(((r21*x9987))+((r20*x9995))+(((-1.0)*x9990))+((r20*x9989))+x9984+(((-1.0)*r21*x9988*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9997=((1.0)*gconst5);
IkReal x9998=(gconst4*r01);
CheckValue<IkReal> x9999=IKPowWithIntegerCheck(((((-1.0)*r00*x9997))+x9998),-1);
if(!x9999.valid){
continue;
}
CheckValue<IkReal> x10000=IKPowWithIntegerCheck((((cj3*x9998))+(((-1.0)*cj3*r00*x9997))),-1);
if(!x10000.valid){
continue;
}
if( IKabs(((-1.0)*(x9999.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10000.value)*(((((-1.0)*r01*sj3*x9997))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9999.value)))+IKsqr(((x10000.value)*(((((-1.0)*r01*sj3*x9997))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9999.value)), ((x10000.value)*(((((-1.0)*r01*sj3*x9997))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10001=IKsin(j4);
IkReal x10002=IKcos(j4);
IkReal x10003=(cj2*sj1);
IkReal x10004=(cj1*sj2);
IkReal x10005=(sj1*sj2);
IkReal x10006=(gconst5*r00);
IkReal x10007=(gconst5*sj3);
IkReal x10008=(cj3*gconst5);
IkReal x10009=(gconst4*sj3);
IkReal x10010=(cj3*gconst4);
IkReal x10011=(cj1*cj2);
IkReal x10012=((1.0)*x10001);
IkReal x10013=(gconst4*x10001);
IkReal x10014=((1.0)*x10002);
IkReal x10015=(x10004+x10003);
IkReal x10016=(x10002*x10007);
IkReal x10017=(x10002*x10010);
evalcond[0]=((-1.0)*r12*x10002);
evalcond[1]=(((r21*x10013))+(((-1.0)*gconst5*r20*x10012)));
evalcond[2]=((((-1.0)*r12*sj3*x10012))+x10015);
evalcond[3]=(((cj3*r12*x10001))+(((-1.0)*x10005))+x10011);
evalcond[4]=((1.0)+((r01*x10013))+(((-1.0)*x10006*x10012)));
evalcond[5]=(((sj3*x10002*x10006))+(((-1.0)*r01*x10009*x10014))+((r01*x10008))+((r00*x10010)));
evalcond[6]=(((r01*x10007))+((r01*x10017))+((r00*x10009))+(((-1.0)*cj3*x10006*x10014)));
evalcond[7]=(((r21*x10017))+x10015+((r20*x10009))+((r21*x10007))+(((-1.0)*r20*x10008*x10014)));
evalcond[8]=((((-1.0)*x10011))+x10005+((r20*x10016))+((r20*x10010))+(((-1.0)*r21*x10009*x10014))+((r21*x10008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10018=((1.0)*gconst4);
IkReal x10019=(gconst5*r00);
CheckValue<IkReal> x10020=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x10019))),-1);
if(!x10020.valid){
continue;
}
CheckValue<IkReal> x10021=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x10018))+((sj3*x10019))),-1);
if(!x10021.valid){
continue;
}
if( IKabs(((-1.0)*(x10020.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10021.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10018)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10020.value)))+IKsqr(((x10021.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10018))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10020.value)), ((x10021.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10018))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10022=IKsin(j4);
IkReal x10023=IKcos(j4);
IkReal x10024=(cj2*sj1);
IkReal x10025=(cj1*sj2);
IkReal x10026=(sj1*sj2);
IkReal x10027=(gconst5*r00);
IkReal x10028=(gconst5*sj3);
IkReal x10029=(cj3*gconst5);
IkReal x10030=(gconst4*sj3);
IkReal x10031=(cj3*gconst4);
IkReal x10032=(cj1*cj2);
IkReal x10033=((1.0)*x10022);
IkReal x10034=(gconst4*x10022);
IkReal x10035=((1.0)*x10023);
IkReal x10036=(x10024+x10025);
IkReal x10037=(x10023*x10028);
IkReal x10038=(x10023*x10031);
evalcond[0]=((-1.0)*r12*x10023);
evalcond[1]=((((-1.0)*gconst5*r20*x10033))+((r21*x10034)));
evalcond[2]=((((-1.0)*r12*sj3*x10033))+x10036);
evalcond[3]=((((-1.0)*x10026))+((cj3*r12*x10022))+x10032);
evalcond[4]=((1.0)+((r01*x10034))+(((-1.0)*x10027*x10033)));
evalcond[5]=(((sj3*x10023*x10027))+((r01*x10029))+((r00*x10031))+(((-1.0)*r01*x10030*x10035)));
evalcond[6]=(((r01*x10028))+(((-1.0)*cj3*x10027*x10035))+((r00*x10030))+((r01*x10038)));
evalcond[7]=(((r21*x10028))+((r21*x10038))+((r20*x10030))+x10036+(((-1.0)*r20*x10029*x10035)));
evalcond[8]=((((-1.0)*x10032))+((r21*x10029))+((r20*x10037))+((r20*x10031))+x10026+(((-1.0)*r21*x10030*x10035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10039=gconst4*gconst4;
IkReal x10040=gconst5*gconst5;
IkReal x10041=(r01*r20);
IkReal x10042=(gconst4*sj3);
IkReal x10043=(r01*r21);
IkReal x10044=((1.0)*cj3);
IkReal x10045=(r00*r21);
IkReal x10046=(r00*r20);
IkReal x10047=(cj3*gconst4*gconst5);
IkReal x10048=((1.0)*x10040);
CheckValue<IkReal> x10049 = IKatan2WithCheck(IkReal((((r00*r22*x10042))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10039*x10045))+((gconst5*x10042*x10043))+(((-1.0)*sj3*x10041*x10048))+(((-1.0)*gconst5*x10042*x10046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10049.valid){
continue;
}
CheckValue<IkReal> x10050=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10039*x10043*x10044))+(((-1.0)*r02*r22*x10044))+(((-1.0)*x10040*x10044*x10046))+((x10041*x10047))+((x10045*x10047)))),-1);
if(!x10050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10049.value)+(((1.5707963267949)*(x10050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10051=IKsin(j4);
IkReal x10052=IKcos(j4);
IkReal x10053=(cj2*sj1);
IkReal x10054=(cj1*sj2);
IkReal x10055=(gconst4*r11);
IkReal x10056=(sj1*sj2);
IkReal x10057=(gconst5*r10);
IkReal x10058=(cj1*cj2);
IkReal x10059=(gconst4*r01);
IkReal x10060=(gconst5*sj3);
IkReal x10061=(gconst5*r00);
IkReal x10062=(gconst4*sj3);
IkReal x10063=(cj3*gconst5);
IkReal x10064=(cj3*gconst4);
IkReal x10065=(gconst4*r21);
IkReal x10066=((1.0)*x10052);
IkReal x10067=((1.0)*x10051);
IkReal x10068=(cj3*x10051);
IkReal x10069=(cj3*x10052);
IkReal x10070=(x10054+x10053);
IkReal x10071=(x10052*x10060);
evalcond[0]=((((-1.0)*gconst5*r20*x10067))+(((-1.0)*r22*x10066))+((x10051*x10065)));
evalcond[1]=((((-1.0)*x10057*x10067))+(((-1.0)*r12*x10066))+((x10051*x10055)));
evalcond[2]=((1.0)+(((-1.0)*x10061*x10067))+(((-1.0)*r02*x10066))+((x10051*x10059)));
evalcond[3]=((((-1.0)*cj3*x10061*x10066))+((r00*x10062))+((r01*x10060))+((r02*x10068))+((x10059*x10069)));
evalcond[4]=(((r00*x10064))+((r00*x10071))+((r01*x10063))+(((-1.0)*r02*sj3*x10067))+(((-1.0)*sj3*x10059*x10066)));
evalcond[5]=((((-1.0)*r20*x10063*x10066))+((r20*x10062))+((r22*x10068))+x10070+((r21*x10060))+((r21*x10052*x10064)));
evalcond[6]=(((r10*x10064))+((sj3*x10052*x10057))+(((-1.0)*r12*sj3*x10067))+x10070+(((-1.0)*sj3*x10055*x10066))+((r11*x10063)));
evalcond[7]=(((r10*x10062))+(((-1.0)*x10056))+((r12*x10068))+x10058+(((-1.0)*cj3*x10057*x10066))+((x10055*x10069))+((r11*x10060)));
evalcond[8]=((((-1.0)*x10058))+(((-1.0)*r22*sj3*x10067))+((r20*x10064))+((r20*x10071))+(((-1.0)*r21*x10062*x10066))+x10056+((r21*x10063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10072=((1.0)*gconst5);
CheckValue<IkReal> x10073 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10073.valid){
continue;
}
CheckValue<IkReal> x10074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10072))+(((-1.0)*gconst4*r20)))),-1);
if(!x10074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10073.value)+(((1.5707963267949)*(x10074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10075=IKsin(j4);
IkReal x10076=IKcos(j4);
IkReal x10077=(cj2*sj1);
IkReal x10078=(cj1*sj2);
IkReal x10079=(gconst4*r11);
IkReal x10080=(sj1*sj2);
IkReal x10081=(gconst5*r10);
IkReal x10082=(cj1*cj2);
IkReal x10083=(gconst4*r01);
IkReal x10084=(gconst5*sj3);
IkReal x10085=(gconst5*r00);
IkReal x10086=(gconst4*sj3);
IkReal x10087=(cj3*gconst5);
IkReal x10088=(cj3*gconst4);
IkReal x10089=(gconst4*r21);
IkReal x10090=((1.0)*x10076);
IkReal x10091=((1.0)*x10075);
IkReal x10092=(cj3*x10075);
IkReal x10093=(cj3*x10076);
IkReal x10094=(x10077+x10078);
IkReal x10095=(x10076*x10084);
evalcond[0]=((((-1.0)*gconst5*r20*x10091))+(((-1.0)*r22*x10090))+((x10075*x10089)));
evalcond[1]=(((x10075*x10079))+(((-1.0)*r12*x10090))+(((-1.0)*x10081*x10091)));
evalcond[2]=((1.0)+(((-1.0)*x10085*x10091))+(((-1.0)*r02*x10090))+((x10075*x10083)));
evalcond[3]=((((-1.0)*cj3*x10085*x10090))+((r00*x10086))+((r01*x10084))+((r02*x10092))+((x10083*x10093)));
evalcond[4]=(((r00*x10088))+((r01*x10087))+(((-1.0)*r02*sj3*x10091))+(((-1.0)*sj3*x10083*x10090))+((r00*x10095)));
evalcond[5]=(((r20*x10086))+((r21*x10076*x10088))+x10094+((r22*x10092))+((r21*x10084))+(((-1.0)*r20*x10087*x10090)));
evalcond[6]=(x10094+(((-1.0)*r12*sj3*x10091))+((sj3*x10076*x10081))+(((-1.0)*sj3*x10079*x10090))+((r10*x10088))+((r11*x10087)));
evalcond[7]=(((r12*x10092))+x10082+(((-1.0)*cj3*x10081*x10090))+(((-1.0)*x10080))+((r10*x10086))+((r11*x10084))+((x10079*x10093)));
evalcond[8]=((((-1.0)*r22*sj3*x10091))+((r20*x10088))+x10080+((r21*x10087))+(((-1.0)*r21*x10086*x10090))+((r20*x10095))+(((-1.0)*x10082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10096=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10096.valid){
continue;
}
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10096.value)))+(x10097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10098=IKsin(j4);
IkReal x10099=IKcos(j4);
IkReal x10100=(cj2*sj1);
IkReal x10101=(cj1*sj2);
IkReal x10102=(gconst4*r11);
IkReal x10103=(sj1*sj2);
IkReal x10104=(gconst5*r10);
IkReal x10105=(cj1*cj2);
IkReal x10106=(gconst4*r01);
IkReal x10107=(gconst5*sj3);
IkReal x10108=(gconst5*r00);
IkReal x10109=(gconst4*sj3);
IkReal x10110=(cj3*gconst5);
IkReal x10111=(cj3*gconst4);
IkReal x10112=(gconst4*r21);
IkReal x10113=((1.0)*x10099);
IkReal x10114=((1.0)*x10098);
IkReal x10115=(cj3*x10098);
IkReal x10116=(cj3*x10099);
IkReal x10117=(x10101+x10100);
IkReal x10118=(x10099*x10107);
evalcond[0]=(((x10098*x10112))+(((-1.0)*r22*x10113))+(((-1.0)*gconst5*r20*x10114)));
evalcond[1]=((((-1.0)*r12*x10113))+((x10098*x10102))+(((-1.0)*x10104*x10114)));
evalcond[2]=((1.0)+(((-1.0)*x10108*x10114))+((x10098*x10106))+(((-1.0)*r02*x10113)));
evalcond[3]=(((x10106*x10116))+((r01*x10107))+((r00*x10109))+((r02*x10115))+(((-1.0)*cj3*x10108*x10113)));
evalcond[4]=(((r01*x10110))+((r00*x10111))+((r00*x10118))+(((-1.0)*r02*sj3*x10114))+(((-1.0)*sj3*x10106*x10113)));
evalcond[5]=(((r21*x10107))+((r20*x10109))+x10117+((r21*x10099*x10111))+(((-1.0)*r20*x10110*x10113))+((r22*x10115)));
evalcond[6]=((((-1.0)*sj3*x10102*x10113))+(((-1.0)*r12*sj3*x10114))+x10117+((r11*x10110))+((sj3*x10099*x10104))+((r10*x10111)));
evalcond[7]=((((-1.0)*x10103))+((x10102*x10116))+(((-1.0)*cj3*x10104*x10113))+x10105+((r11*x10107))+((r12*x10115))+((r10*x10109)));
evalcond[8]=((((-1.0)*x10105))+((r21*x10110))+((r20*x10111))+((r20*x10118))+x10103+(((-1.0)*r21*x10109*x10113))+(((-1.0)*r22*sj3*x10114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10119=((-1.0)*r21);
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(x10119),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
IkReal x10120=((1.0)*(x10122.value));
IkReal x10121=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10120)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10120)));
IkReal gconst4=(x10119*x10121);
IkReal gconst5=((1.0)*r20*x10121);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10123=((-1.0)*r21);
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(x10123),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
IkReal x10124=((1.0)*(x10126.value));
IkReal x10125=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10124)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10124)));
IkReal gconst4=(x10123*x10125);
IkReal gconst5=((1.0)*r20*x10125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10127=((-1.0)*r21);
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal(x10127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
IkReal x10128=((1.0)*(x10130.value));
IkReal x10129=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10128)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10128)));
IkReal gconst4=(x10127*x10129);
IkReal gconst5=((1.0)*r20*x10129);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10131=((-1.0)*r21);
CheckValue<IkReal> x10134 = IKatan2WithCheck(IkReal(x10131),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10134.valid){
continue;
}
IkReal x10132=((1.0)*(x10134.value));
IkReal x10133=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10132)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10132)));
IkReal gconst4=(x10131*x10133);
IkReal gconst5=((1.0)*r20*x10133);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10135=((-1.0)*r21);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(x10135),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10136=((1.0)*(x10138.value));
IkReal x10137=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10136)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst4=(x10135*x10137);
IkReal gconst5=((1.0)*r20*x10137);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10139=((-1.0)*r21);
CheckValue<IkReal> x10142 = IKatan2WithCheck(IkReal(x10139),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10142.valid){
continue;
}
IkReal x10140=((1.0)*(x10142.value));
IkReal x10141=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10140)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10140)));
IkReal gconst4=(x10139*x10141);
IkReal gconst5=((1.0)*r20*x10141);
IkReal x10143=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(x10143,-1);
if(!x10147.valid){
continue;
}
IkReal x10144=x10147.value;
IkReal x10145=((1.0)*x10144);
IkReal x10146=((((-1.0)*x10145*(r01*r01)*(r21*r21)))+(((-1.0)*x10145*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10144)));
j4eval[0]=x10146;
j4eval[1]=r02;
j4eval[2]=x10143;
j4eval[3]=IKsign(x10146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10148=(gconst5*r00);
IkReal x10149=(gconst4*r01);
CheckValue<IkReal> x10150=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10148*x10149))+(((-1.0)*(x10149*x10149)))+(((-1.0)*(x10148*x10148))))),-1);
if(!x10150.valid){
continue;
}
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal((x10148+(((-1.0)*x10149)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10150.value)))+(x10151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10152=IKsin(j4);
IkReal x10153=IKcos(j4);
IkReal x10154=(gconst4*r11);
IkReal x10155=((1.0)*cj1);
IkReal x10156=(gconst5*r10);
IkReal x10157=(gconst4*r01);
IkReal x10158=(gconst5*r00);
IkReal x10159=(gconst4*r21);
IkReal x10160=(gconst5*r20);
IkReal x10161=((1.0)*x10153);
IkReal x10162=((1.0)*x10152);
evalcond[0]=((((-1.0)*r22*x10161))+(((-1.0)*x10160*x10162))+((x10152*x10159)));
evalcond[1]=((((-1.0)*x10156*x10162))+(((-1.0)*r12*x10161))+((x10152*x10154)));
evalcond[2]=(((x10153*x10158))+(((-1.0)*x10157*x10161))+(((-1.0)*r02*x10162)));
evalcond[3]=((-1.0)+(((-1.0)*x10158*x10162))+((x10152*x10157))+(((-1.0)*r02*x10161)));
evalcond[4]=((((-1.0)*cj2*x10155))+(((-1.0)*r22*x10162))+((sj1*sj2))+((x10153*x10160))+(((-1.0)*x10159*x10161)));
evalcond[5]=(((x10153*x10156))+(((-1.0)*r12*x10162))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10155))+(((-1.0)*x10154*x10161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10163=((1.0)*gconst5);
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10163))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
CheckValue<IkReal> x10165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10163))+(((-1.0)*gconst4*r10)))),-1);
if(!x10165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10164.value)+(((1.5707963267949)*(x10165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10166=IKsin(j4);
IkReal x10167=IKcos(j4);
IkReal x10168=(gconst4*r11);
IkReal x10169=((1.0)*cj1);
IkReal x10170=(gconst5*r10);
IkReal x10171=(gconst4*r01);
IkReal x10172=(gconst5*r00);
IkReal x10173=(gconst4*r21);
IkReal x10174=(gconst5*r20);
IkReal x10175=((1.0)*x10167);
IkReal x10176=((1.0)*x10166);
evalcond[0]=((((-1.0)*r22*x10175))+(((-1.0)*x10174*x10176))+((x10166*x10173)));
evalcond[1]=(((x10166*x10168))+(((-1.0)*r12*x10175))+(((-1.0)*x10170*x10176)));
evalcond[2]=(((x10167*x10172))+(((-1.0)*x10171*x10175))+(((-1.0)*r02*x10176)));
evalcond[3]=((-1.0)+(((-1.0)*x10172*x10176))+((x10166*x10171))+(((-1.0)*r02*x10175)));
evalcond[4]=((((-1.0)*r22*x10176))+((x10167*x10174))+((sj1*sj2))+(((-1.0)*cj2*x10169))+(((-1.0)*x10173*x10175)));
evalcond[5]=((((-1.0)*sj2*x10169))+((x10167*x10170))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10176))+(((-1.0)*x10168*x10175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10177 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10177.valid){
continue;
}
CheckValue<IkReal> x10178=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10177.value)+(((1.5707963267949)*(x10178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10179=IKsin(j4);
IkReal x10180=IKcos(j4);
IkReal x10181=(gconst4*r11);
IkReal x10182=((1.0)*cj1);
IkReal x10183=(gconst5*r10);
IkReal x10184=(gconst4*r01);
IkReal x10185=(gconst5*r00);
IkReal x10186=(gconst4*r21);
IkReal x10187=(gconst5*r20);
IkReal x10188=((1.0)*x10180);
IkReal x10189=((1.0)*x10179);
evalcond[0]=((((-1.0)*x10187*x10189))+(((-1.0)*r22*x10188))+((x10179*x10186)));
evalcond[1]=((((-1.0)*x10183*x10189))+(((-1.0)*r12*x10188))+((x10179*x10181)));
evalcond[2]=((((-1.0)*r02*x10189))+(((-1.0)*x10184*x10188))+((x10180*x10185)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10188))+(((-1.0)*x10185*x10189))+((x10179*x10184)));
evalcond[4]=((((-1.0)*cj2*x10182))+(((-1.0)*x10186*x10188))+((sj1*sj2))+(((-1.0)*r22*x10189))+((x10180*x10187)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10182))+(((-1.0)*r12*x10189))+(((-1.0)*x10181*x10188))+((x10180*x10183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10190=((-1.0)*r21);
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal(x10190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
IkReal x10191=((1.0)*(x10193.value));
IkReal x10192=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=(x10190*x10192);
IkReal gconst5=((1.0)*r20*x10192);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10194=((-1.0)*r21);
CheckValue<IkReal> x10197 = IKatan2WithCheck(IkReal(x10194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10197.valid){
continue;
}
IkReal x10195=((1.0)*(x10197.value));
IkReal x10196=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10195)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10195)));
IkReal gconst4=(x10194*x10196);
IkReal gconst5=((1.0)*r20*x10196);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10198=((-1.0)*r21);
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(x10198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
IkReal x10199=((1.0)*(x10201.value));
IkReal x10200=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10199)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10199)));
IkReal gconst4=(x10198*x10200);
IkReal gconst5=((1.0)*r20*x10200);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10202=(gconst4*r01);
IkReal x10203=(gconst5*r00);
CheckValue<IkReal> x10204=IKPowWithIntegerCheck(IKsign(((x10203*x10203)+(x10202*x10202)+(((-2.0)*x10202*x10203))+(r02*r02))),-1);
if(!x10204.valid){
continue;
}
CheckValue<IkReal> x10205 = IKatan2WithCheck(IkReal(((((-1.0)*x10203))+x10202)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10204.value)))+(x10205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10206=IKcos(j4);
IkReal x10207=IKsin(j4);
IkReal x10208=(gconst4*r11);
IkReal x10209=(gconst5*r10);
IkReal x10210=((1.0)*cj1);
IkReal x10211=(gconst5*r00);
IkReal x10212=(gconst5*r20);
IkReal x10213=((1.0)*x10206);
IkReal x10214=(gconst4*x10206);
IkReal x10215=((1.0)*x10207);
IkReal x10216=(gconst4*x10207);
evalcond[0]=((((-1.0)*x10211*x10213))+((r02*x10207))+((r01*x10214)));
evalcond[1]=((((-1.0)*x10212*x10215))+(((-1.0)*r22*x10213))+((r21*x10216)));
evalcond[2]=(((x10207*x10208))+(((-1.0)*r12*x10213))+(((-1.0)*x10209*x10215)));
evalcond[3]=((-1.0)+(((-1.0)*x10211*x10215))+((r01*x10216))+(((-1.0)*r02*x10213)));
evalcond[4]=(((r22*x10207))+(((-1.0)*x10212*x10213))+((sj1*sj2))+(((-1.0)*cj2*x10210))+((r21*x10214)));
evalcond[5]=((((-1.0)*sj2*x10210))+(((-1.0)*cj2*sj1))+((x10206*x10208))+((r12*x10207))+(((-1.0)*x10209*x10213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10217=((1.0)*gconst5);
CheckValue<IkReal> x10218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10217))+(((-1.0)*gconst4*r10)))),-1);
if(!x10218.valid){
continue;
}
CheckValue<IkReal> x10219 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10217))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10218.value)))+(x10219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10220=IKcos(j4);
IkReal x10221=IKsin(j4);
IkReal x10222=(gconst4*r11);
IkReal x10223=(gconst5*r10);
IkReal x10224=((1.0)*cj1);
IkReal x10225=(gconst5*r00);
IkReal x10226=(gconst5*r20);
IkReal x10227=((1.0)*x10220);
IkReal x10228=(gconst4*x10220);
IkReal x10229=((1.0)*x10221);
IkReal x10230=(gconst4*x10221);
evalcond[0]=(((r02*x10221))+(((-1.0)*x10225*x10227))+((r01*x10228)));
evalcond[1]=((((-1.0)*x10226*x10229))+((r21*x10230))+(((-1.0)*r22*x10227)));
evalcond[2]=(((x10221*x10222))+(((-1.0)*r12*x10227))+(((-1.0)*x10223*x10229)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10227))+(((-1.0)*x10225*x10229))+((r01*x10230)));
evalcond[4]=((((-1.0)*x10226*x10227))+((r22*x10221))+(((-1.0)*cj2*x10224))+((sj1*sj2))+((r21*x10228)));
evalcond[5]=(((r12*x10221))+(((-1.0)*cj2*sj1))+((x10220*x10222))+(((-1.0)*sj2*x10224))+(((-1.0)*x10223*x10227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10231 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10231.valid){
continue;
}
CheckValue<IkReal> x10232=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10231.value)+(((1.5707963267949)*(x10232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10233=IKcos(j4);
IkReal x10234=IKsin(j4);
IkReal x10235=(gconst4*r11);
IkReal x10236=(gconst5*r10);
IkReal x10237=((1.0)*cj1);
IkReal x10238=(gconst5*r00);
IkReal x10239=(gconst5*r20);
IkReal x10240=((1.0)*x10233);
IkReal x10241=(gconst4*x10233);
IkReal x10242=((1.0)*x10234);
IkReal x10243=(gconst4*x10234);
evalcond[0]=(((r02*x10234))+(((-1.0)*x10238*x10240))+((r01*x10241)));
evalcond[1]=(((r21*x10243))+(((-1.0)*r22*x10240))+(((-1.0)*x10239*x10242)));
evalcond[2]=(((x10234*x10235))+(((-1.0)*r12*x10240))+(((-1.0)*x10236*x10242)));
evalcond[3]=((-1.0)+(((-1.0)*x10238*x10242))+((r01*x10243))+(((-1.0)*r02*x10240)));
evalcond[4]=(((r22*x10234))+((sj1*sj2))+(((-1.0)*cj2*x10237))+((r21*x10241))+(((-1.0)*x10239*x10240)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x10234))+(((-1.0)*x10236*x10240))+(((-1.0)*sj2*x10237))+((x10233*x10235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10244=((-1.0)*r21);
CheckValue<IkReal> x10247 = IKatan2WithCheck(IkReal(x10244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10247.valid){
continue;
}
IkReal x10245=((1.0)*(x10247.value));
IkReal x10246=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10245)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10245)));
IkReal gconst4=(x10244*x10246);
IkReal gconst5=((1.0)*r20*x10246);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10248=((-1.0)*r21);
CheckValue<IkReal> x10251 = IKatan2WithCheck(IkReal(x10248),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10251.valid){
continue;
}
IkReal x10249=((1.0)*(x10251.value));
IkReal x10250=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10249)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10249)));
IkReal gconst4=(x10248*x10250);
IkReal gconst5=((1.0)*r20*x10250);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10252=((-1.0)*r21);
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal(x10252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
IkReal x10253=((1.0)*(x10255.value));
IkReal x10254=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10253)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10253)));
IkReal gconst4=(x10252*x10254);
IkReal gconst5=((1.0)*r20*x10254);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10256=(gconst4*r01);
IkReal x10257=(gconst5*r00);
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal((x10256+(((-1.0)*x10257)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
CheckValue<IkReal> x10259=IKPowWithIntegerCheck(IKsign(((x10257*x10257)+(x10256*x10256)+(((-2.0)*x10256*x10257))+(r02*r02))),-1);
if(!x10259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10258.value)+(((1.5707963267949)*(x10259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10260=IKcos(j4);
IkReal x10261=IKsin(j4);
IkReal x10262=(gconst4*r11);
IkReal x10263=(gconst5*r10);
IkReal x10264=(gconst5*r00);
IkReal x10265=(gconst5*r20);
IkReal x10266=((1.0)*x10260);
IkReal x10267=(gconst4*x10260);
IkReal x10268=((1.0)*x10261);
IkReal x10269=(gconst4*x10261);
evalcond[0]=(((r02*x10261))+((r01*x10267))+(((-1.0)*x10264*x10266)));
evalcond[1]=((((-1.0)*r22*x10266))+((r21*x10269))+(((-1.0)*x10265*x10268)));
evalcond[2]=((((-1.0)*x10263*x10268))+(((-1.0)*r12*x10266))+((x10261*x10262)));
evalcond[3]=((-1.0)+((r01*x10269))+(((-1.0)*r02*x10266))+(((-1.0)*x10264*x10268)));
evalcond[4]=(((r22*x10261))+((cj2*sj1))+((cj1*sj2))+((r21*x10267))+(((-1.0)*x10265*x10266)));
evalcond[5]=(((r12*x10261))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10263*x10266))+((x10260*x10262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10270=((1.0)*gconst5);
CheckValue<IkReal> x10271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10270))+(((-1.0)*gconst4*r10)))),-1);
if(!x10271.valid){
continue;
}
CheckValue<IkReal> x10272 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10271.value)))+(x10272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10273=IKcos(j4);
IkReal x10274=IKsin(j4);
IkReal x10275=(gconst4*r11);
IkReal x10276=(gconst5*r10);
IkReal x10277=(gconst5*r00);
IkReal x10278=(gconst5*r20);
IkReal x10279=((1.0)*x10273);
IkReal x10280=(gconst4*x10273);
IkReal x10281=((1.0)*x10274);
IkReal x10282=(gconst4*x10274);
evalcond[0]=(((r01*x10280))+(((-1.0)*x10277*x10279))+((r02*x10274)));
evalcond[1]=((((-1.0)*x10278*x10281))+(((-1.0)*r22*x10279))+((r21*x10282)));
evalcond[2]=((((-1.0)*x10276*x10281))+((x10274*x10275))+(((-1.0)*r12*x10279)));
evalcond[3]=((-1.0)+((r01*x10282))+(((-1.0)*x10277*x10281))+(((-1.0)*r02*x10279)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10278*x10279))+((r21*x10280))+((r22*x10274)));
evalcond[5]=(((r12*x10274))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10273*x10275))+(((-1.0)*x10276*x10279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10283.value)+(((1.5707963267949)*(x10284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10285=IKcos(j4);
IkReal x10286=IKsin(j4);
IkReal x10287=(gconst4*r11);
IkReal x10288=(gconst5*r10);
IkReal x10289=(gconst5*r00);
IkReal x10290=(gconst5*r20);
IkReal x10291=((1.0)*x10285);
IkReal x10292=(gconst4*x10285);
IkReal x10293=((1.0)*x10286);
IkReal x10294=(gconst4*x10286);
evalcond[0]=(((r02*x10286))+(((-1.0)*x10289*x10291))+((r01*x10292)));
evalcond[1]=((((-1.0)*x10290*x10293))+((r21*x10294))+(((-1.0)*r22*x10291)));
evalcond[2]=((((-1.0)*r12*x10291))+(((-1.0)*x10288*x10293))+((x10286*x10287)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10291))+(((-1.0)*x10289*x10293))+((r01*x10294)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10290*x10291))+((r22*x10286))+((r21*x10292)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10286))+(((-1.0)*x10288*x10291))+((x10285*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10295=((-1.0)*r21);
CheckValue<IkReal> x10298 = IKatan2WithCheck(IkReal(x10295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10298.valid){
continue;
}
IkReal x10296=((1.0)*(x10298.value));
IkReal x10297=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10296)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10296)));
IkReal gconst4=(x10295*x10297);
IkReal gconst5=((1.0)*r20*x10297);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10299=((-1.0)*r21);
CheckValue<IkReal> x10302 = IKatan2WithCheck(IkReal(x10299),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10302.valid){
continue;
}
IkReal x10300=((1.0)*(x10302.value));
IkReal x10301=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10300)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10300)));
IkReal gconst4=(x10299*x10301);
IkReal gconst5=((1.0)*r20*x10301);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10303=((-1.0)*r21);
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal(x10303),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
IkReal x10304=((1.0)*(x10306.value));
IkReal x10305=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10304)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10304)));
IkReal gconst4=(x10303*x10305);
IkReal gconst5=((1.0)*r20*x10305);
IkReal x10307=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10311=IKPowWithIntegerCheck(x10307,-1);
if(!x10311.valid){
continue;
}
IkReal x10308=x10311.value;
IkReal x10309=((1.0)*x10308);
IkReal x10310=((((-2.0)*r00*r01*r20*r21*x10308))+(((-1.0)*(r02*r02)))+(((-1.0)*x10309*(r00*r00)*(r20*r20)))+(((-1.0)*x10309*(r01*r01)*(r21*r21))));
j4eval[0]=x10310;
j4eval[1]=r02;
j4eval[2]=x10307;
j4eval[3]=IKsign(x10310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10312=(gconst5*r00);
IkReal x10313=(gconst4*r01);
CheckValue<IkReal> x10314=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10313*x10313)))+(((-1.0)*(r02*r02)))+(((2.0)*x10312*x10313))+(((-1.0)*(x10312*x10312))))),-1);
if(!x10314.valid){
continue;
}
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal((x10312+(((-1.0)*x10313)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10314.value)))+(x10315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10316=IKsin(j4);
IkReal x10317=IKcos(j4);
IkReal x10318=(gconst4*r11);
IkReal x10319=(gconst5*r10);
IkReal x10320=(gconst4*r01);
IkReal x10321=(gconst5*r00);
IkReal x10322=(gconst4*r21);
IkReal x10323=(gconst5*r20);
IkReal x10324=((1.0)*x10317);
IkReal x10325=((1.0)*x10316);
evalcond[0]=(((x10316*x10322))+(((-1.0)*r22*x10324))+(((-1.0)*x10323*x10325)));
evalcond[1]=((((-1.0)*r12*x10324))+(((-1.0)*x10319*x10325))+((x10316*x10318)));
evalcond[2]=((((-1.0)*r02*x10325))+((x10317*x10321))+(((-1.0)*x10320*x10324)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10324))+(((-1.0)*x10321*x10325))+((x10316*x10320)));
evalcond[4]=(((cj2*sj1))+((x10317*x10323))+((cj1*sj2))+(((-1.0)*r22*x10325))+(((-1.0)*x10322*x10324)));
evalcond[5]=((((-1.0)*r12*x10325))+(((-1.0)*x10318*x10324))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10317*x10319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10326=((1.0)*gconst5);
CheckValue<IkReal> x10327 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10327.valid){
continue;
}
CheckValue<IkReal> x10328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10326))+(((-1.0)*gconst4*r10)))),-1);
if(!x10328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10327.value)+(((1.5707963267949)*(x10328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10329=IKsin(j4);
IkReal x10330=IKcos(j4);
IkReal x10331=(gconst4*r11);
IkReal x10332=(gconst5*r10);
IkReal x10333=(gconst4*r01);
IkReal x10334=(gconst5*r00);
IkReal x10335=(gconst4*r21);
IkReal x10336=(gconst5*r20);
IkReal x10337=((1.0)*x10330);
IkReal x10338=((1.0)*x10329);
evalcond[0]=((((-1.0)*x10336*x10338))+(((-1.0)*r22*x10337))+((x10329*x10335)));
evalcond[1]=((((-1.0)*r12*x10337))+((x10329*x10331))+(((-1.0)*x10332*x10338)));
evalcond[2]=((((-1.0)*x10333*x10337))+((x10330*x10334))+(((-1.0)*r02*x10338)));
evalcond[3]=((-1.0)+(((-1.0)*x10334*x10338))+((x10329*x10333))+(((-1.0)*r02*x10337)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10338))+((x10330*x10336))+(((-1.0)*x10335*x10337)));
evalcond[5]=((((-1.0)*r12*x10338))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10330*x10332))+(((-1.0)*x10331*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
CheckValue<IkReal> x10340=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10339.value)+(((1.5707963267949)*(x10340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10341=IKsin(j4);
IkReal x10342=IKcos(j4);
IkReal x10343=(gconst4*r11);
IkReal x10344=(gconst5*r10);
IkReal x10345=(gconst4*r01);
IkReal x10346=(gconst5*r00);
IkReal x10347=(gconst4*r21);
IkReal x10348=(gconst5*r20);
IkReal x10349=((1.0)*x10342);
IkReal x10350=((1.0)*x10341);
evalcond[0]=(((x10341*x10347))+(((-1.0)*x10348*x10350))+(((-1.0)*r22*x10349)));
evalcond[1]=(((x10341*x10343))+(((-1.0)*r12*x10349))+(((-1.0)*x10344*x10350)));
evalcond[2]=(((x10342*x10346))+(((-1.0)*x10345*x10349))+(((-1.0)*r02*x10350)));
evalcond[3]=((-1.0)+((x10341*x10345))+(((-1.0)*r02*x10349))+(((-1.0)*x10346*x10350)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10350))+((x10342*x10348))+(((-1.0)*x10347*x10349)));
evalcond[5]=((((-1.0)*x10343*x10349))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10342*x10344))+(((-1.0)*r12*x10350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10351=gconst4*gconst4;
IkReal x10352=gconst5*gconst5;
IkReal x10353=(r01*r20);
IkReal x10354=(gconst4*sj3);
IkReal x10355=(r01*r21);
IkReal x10356=((1.0)*cj3);
IkReal x10357=(r00*r21);
IkReal x10358=(r00*r20);
IkReal x10359=(cj3*gconst4*gconst5);
IkReal x10360=((1.0)*x10352);
CheckValue<IkReal> x10361 = IKatan2WithCheck(IkReal((((r00*r22*x10354))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10351*x10357))+(((-1.0)*sj3*x10353*x10360))+(((-1.0)*gconst5*x10354*x10358))+((gconst5*x10354*x10355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10361.valid){
continue;
}
CheckValue<IkReal> x10362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x10356))+((x10353*x10359))+(((-1.0)*x10351*x10355*x10356))+(((-1.0)*x10352*x10356*x10358))+((x10357*x10359)))),-1);
if(!x10362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10361.value)+(((1.5707963267949)*(x10362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10363=IKsin(j4);
IkReal x10364=IKcos(j4);
IkReal x10365=(sj1*sj2);
IkReal x10366=(gconst5*sj3);
IkReal x10367=(gconst4*r11);
IkReal x10368=(gconst5*r10);
IkReal x10369=((1.0)*cj1);
IkReal x10370=(gconst4*r01);
IkReal x10371=(cj2*sj1);
IkReal x10372=(gconst5*r00);
IkReal x10373=(gconst4*sj3);
IkReal x10374=(cj3*gconst5);
IkReal x10375=(cj3*gconst4);
IkReal x10376=(gconst4*r21);
IkReal x10377=(cj2*x10369);
IkReal x10378=((1.0)*x10364);
IkReal x10379=((1.0)*x10363);
IkReal x10380=(cj3*x10363);
IkReal x10381=(cj3*x10364);
evalcond[0]=(((x10363*x10376))+(((-1.0)*gconst5*r20*x10379))+(((-1.0)*r22*x10378)));
evalcond[1]=(((x10363*x10367))+(((-1.0)*x10368*x10379))+(((-1.0)*r12*x10378)));
evalcond[2]=((-1.0)+((x10363*x10370))+(((-1.0)*r02*x10378))+(((-1.0)*x10372*x10379)));
evalcond[3]=(((r00*x10373))+((r01*x10366))+(((-1.0)*cj3*x10372*x10378))+((r02*x10380))+((x10370*x10381)));
evalcond[4]=(((r01*x10374))+((r00*x10375))+(((-1.0)*r02*sj3*x10379))+(((-1.0)*sj3*x10370*x10378))+((r00*x10364*x10366)));
evalcond[5]=(((r21*x10366))+((cj1*sj2))+(((-1.0)*r20*x10374*x10378))+((r22*x10380))+((r20*x10373))+x10371+((r21*x10364*x10375)));
evalcond[6]=(((r12*x10380))+((x10367*x10381))+((r10*x10373))+x10365+(((-1.0)*x10377))+((r11*x10366))+(((-1.0)*cj3*x10368*x10378)));
evalcond[7]=(((r20*x10364*x10366))+(((-1.0)*r22*sj3*x10379))+(((-1.0)*r21*x10373*x10378))+((r20*x10375))+x10365+(((-1.0)*x10377))+((r21*x10374)));
evalcond[8]=((((-1.0)*r12*sj3*x10379))+(((-1.0)*sj3*x10367*x10378))+((r10*x10375))+(((-1.0)*x10371))+((r11*x10374))+((r10*x10364*x10366))+(((-1.0)*sj2*x10369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10382=((1.0)*gconst5);
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10382))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
CheckValue<IkReal> x10384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10382))+(((-1.0)*gconst4*r10)))),-1);
if(!x10384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10383.value)+(((1.5707963267949)*(x10384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10385=IKsin(j4);
IkReal x10386=IKcos(j4);
IkReal x10387=(sj1*sj2);
IkReal x10388=(gconst5*sj3);
IkReal x10389=(gconst4*r11);
IkReal x10390=(gconst5*r10);
IkReal x10391=((1.0)*cj1);
IkReal x10392=(gconst4*r01);
IkReal x10393=(cj2*sj1);
IkReal x10394=(gconst5*r00);
IkReal x10395=(gconst4*sj3);
IkReal x10396=(cj3*gconst5);
IkReal x10397=(cj3*gconst4);
IkReal x10398=(gconst4*r21);
IkReal x10399=(cj2*x10391);
IkReal x10400=((1.0)*x10386);
IkReal x10401=((1.0)*x10385);
IkReal x10402=(cj3*x10385);
IkReal x10403=(cj3*x10386);
evalcond[0]=((((-1.0)*gconst5*r20*x10401))+(((-1.0)*r22*x10400))+((x10385*x10398)));
evalcond[1]=(((x10385*x10389))+(((-1.0)*x10390*x10401))+(((-1.0)*r12*x10400)));
evalcond[2]=((-1.0)+(((-1.0)*x10394*x10401))+((x10385*x10392))+(((-1.0)*r02*x10400)));
evalcond[3]=((((-1.0)*cj3*x10394*x10400))+((r02*x10402))+((x10392*x10403))+((r01*x10388))+((r00*x10395)));
evalcond[4]=(((r01*x10396))+((r00*x10386*x10388))+(((-1.0)*sj3*x10392*x10400))+(((-1.0)*r02*sj3*x10401))+((r00*x10397)));
evalcond[5]=(((r22*x10402))+((r21*x10388))+((cj1*sj2))+((r21*x10386*x10397))+(((-1.0)*r20*x10396*x10400))+x10393+((r20*x10395)));
evalcond[6]=((((-1.0)*x10399))+((r11*x10388))+(((-1.0)*cj3*x10390*x10400))+((x10389*x10403))+((r10*x10395))+x10387+((r12*x10402)));
evalcond[7]=((((-1.0)*x10399))+(((-1.0)*r21*x10395*x10400))+((r20*x10386*x10388))+(((-1.0)*r22*sj3*x10401))+((r21*x10396))+x10387+((r20*x10397)));
evalcond[8]=(((r11*x10396))+((r10*x10397))+(((-1.0)*x10393))+(((-1.0)*sj3*x10389*x10400))+(((-1.0)*r12*sj3*x10401))+(((-1.0)*sj2*x10391))+((r10*x10386*x10388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10404 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10404.valid){
continue;
}
CheckValue<IkReal> x10405=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10404.value)+(((1.5707963267949)*(x10405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10406=IKsin(j4);
IkReal x10407=IKcos(j4);
IkReal x10408=(sj1*sj2);
IkReal x10409=(gconst5*sj3);
IkReal x10410=(gconst4*r11);
IkReal x10411=(gconst5*r10);
IkReal x10412=((1.0)*cj1);
IkReal x10413=(gconst4*r01);
IkReal x10414=(cj2*sj1);
IkReal x10415=(gconst5*r00);
IkReal x10416=(gconst4*sj3);
IkReal x10417=(cj3*gconst5);
IkReal x10418=(cj3*gconst4);
IkReal x10419=(gconst4*r21);
IkReal x10420=(cj2*x10412);
IkReal x10421=((1.0)*x10407);
IkReal x10422=((1.0)*x10406);
IkReal x10423=(cj3*x10406);
IkReal x10424=(cj3*x10407);
evalcond[0]=(((x10406*x10419))+(((-1.0)*gconst5*r20*x10422))+(((-1.0)*r22*x10421)));
evalcond[1]=(((x10406*x10410))+(((-1.0)*r12*x10421))+(((-1.0)*x10411*x10422)));
evalcond[2]=((-1.0)+((x10406*x10413))+(((-1.0)*r02*x10421))+(((-1.0)*x10415*x10422)));
evalcond[3]=((((-1.0)*cj3*x10415*x10421))+((r00*x10416))+((r01*x10409))+((x10413*x10424))+((r02*x10423)));
evalcond[4]=((((-1.0)*sj3*x10413*x10421))+((r00*x10407*x10409))+((r00*x10418))+((r01*x10417))+(((-1.0)*r02*sj3*x10422)));
evalcond[5]=(((r21*x10409))+((cj1*sj2))+((r22*x10423))+((r21*x10407*x10418))+x10414+((r20*x10416))+(((-1.0)*r20*x10417*x10421)));
evalcond[6]=((((-1.0)*cj3*x10411*x10421))+((x10410*x10424))+((r12*x10423))+((r11*x10409))+(((-1.0)*x10420))+x10408+((r10*x10416)));
evalcond[7]=(((r21*x10417))+((r20*x10407*x10409))+(((-1.0)*x10420))+x10408+((r20*x10418))+(((-1.0)*r21*x10416*x10421))+(((-1.0)*r22*sj3*x10422)));
evalcond[8]=((((-1.0)*sj3*x10410*x10421))+(((-1.0)*sj2*x10412))+(((-1.0)*r12*sj3*x10422))+((r10*x10407*x10409))+((r11*x10417))+((r10*x10418))+(((-1.0)*x10414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10425=((-1.0)*r21);
CheckValue<IkReal> x10428 = IKatan2WithCheck(IkReal(x10425),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10428.valid){
continue;
}
IkReal x10426=((1.0)*(x10428.value));
IkReal x10427=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10426)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10426)));
IkReal gconst4=(x10425*x10427);
IkReal gconst5=((1.0)*r20*x10427);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10429=((-1.0)*r21);
CheckValue<IkReal> x10432 = IKatan2WithCheck(IkReal(x10429),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10432.valid){
continue;
}
IkReal x10430=((1.0)*(x10432.value));
IkReal x10431=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10430)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10430)));
IkReal gconst4=(x10429*x10431);
IkReal gconst5=((1.0)*r20*x10431);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10433=((-1.0)*r21);
CheckValue<IkReal> x10436 = IKatan2WithCheck(IkReal(x10433),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10436.valid){
continue;
}
IkReal x10434=((1.0)*(x10436.value));
IkReal x10435=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10434)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10434)));
IkReal gconst4=(x10433*x10435);
IkReal gconst5=((1.0)*r20*x10435);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10437=((-1.0)*r21);
CheckValue<IkReal> x10440 = IKatan2WithCheck(IkReal(x10437),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10440.valid){
continue;
}
IkReal x10438=((1.0)*(x10440.value));
IkReal x10439=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10438)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10438)));
IkReal gconst4=(x10437*x10439);
IkReal gconst5=((1.0)*r20*x10439);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10441=((-1.0)*r21);
CheckValue<IkReal> x10444 = IKatan2WithCheck(IkReal(x10441),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10444.valid){
continue;
}
IkReal x10442=((1.0)*(x10444.value));
IkReal x10443=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10442)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10442)));
IkReal gconst4=(x10441*x10443);
IkReal gconst5=((1.0)*r20*x10443);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10445=((-1.0)*r21);
CheckValue<IkReal> x10448 = IKatan2WithCheck(IkReal(x10445),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10448.valid){
continue;
}
IkReal x10446=((1.0)*(x10448.value));
IkReal x10447=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10446)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10446)));
IkReal gconst4=(x10445*x10447);
IkReal gconst5=((1.0)*r20*x10447);
IkReal x10449=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10453=IKPowWithIntegerCheck(x10449,-1);
if(!x10453.valid){
continue;
}
IkReal x10450=x10453.value;
IkReal x10451=((1.0)*x10450);
IkReal x10452=((((-1.0)*x10451*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10450))+(((-1.0)*(r12*r12)))+(((-1.0)*x10451*(r11*r11)*(r21*r21))));
j4eval[0]=x10452;
j4eval[1]=r12;
j4eval[2]=x10449;
j4eval[3]=IKsign(x10452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10454=(gconst5*r10);
IkReal x10455=(gconst4*r11);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(((((-1.0)*x10455))+x10454)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
CheckValue<IkReal> x10457=IKPowWithIntegerCheck(IKsign(((((2.0)*x10454*x10455))+(((-1.0)*(x10454*x10454)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10455*x10455))))),-1);
if(!x10457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10456.value)+(((1.5707963267949)*(x10457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10458=IKsin(j4);
IkReal x10459=IKcos(j4);
IkReal x10460=(gconst4*r11);
IkReal x10461=(gconst5*r10);
IkReal x10462=(gconst4*r01);
IkReal x10463=(gconst5*r00);
IkReal x10464=(gconst4*r21);
IkReal x10465=(gconst5*r20);
IkReal x10466=((1.0)*x10459);
IkReal x10467=((1.0)*x10458);
evalcond[0]=((((-1.0)*x10465*x10467))+(((-1.0)*r22*x10466))+((x10458*x10464)));
evalcond[1]=((((-1.0)*r02*x10466))+(((-1.0)*x10463*x10467))+((x10458*x10462)));
evalcond[2]=(((x10459*x10461))+(((-1.0)*x10460*x10466))+(((-1.0)*r12*x10467)));
evalcond[3]=((-1.0)+(((-1.0)*x10461*x10467))+((x10458*x10460))+(((-1.0)*r12*x10466)));
evalcond[4]=(((x10459*x10463))+((cj2*sj1))+(((-1.0)*r02*x10467))+((cj1*sj2))+(((-1.0)*x10462*x10466)));
evalcond[5]=(((x10459*x10465))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10467))+(((-1.0)*x10464*x10466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10468=((1.0)*gconst5);
CheckValue<IkReal> x10469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10468))+(((-1.0)*gconst4*r20)))),-1);
if(!x10469.valid){
continue;
}
CheckValue<IkReal> x10470 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10468))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10469.value)))+(x10470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10471=IKsin(j4);
IkReal x10472=IKcos(j4);
IkReal x10473=(gconst4*r11);
IkReal x10474=(gconst5*r10);
IkReal x10475=(gconst4*r01);
IkReal x10476=(gconst5*r00);
IkReal x10477=(gconst4*r21);
IkReal x10478=(gconst5*r20);
IkReal x10479=((1.0)*x10472);
IkReal x10480=((1.0)*x10471);
evalcond[0]=(((x10471*x10477))+(((-1.0)*x10478*x10480))+(((-1.0)*r22*x10479)));
evalcond[1]=(((x10471*x10475))+(((-1.0)*r02*x10479))+(((-1.0)*x10476*x10480)));
evalcond[2]=((((-1.0)*r12*x10480))+((x10472*x10474))+(((-1.0)*x10473*x10479)));
evalcond[3]=((-1.0)+((x10471*x10473))+(((-1.0)*x10474*x10480))+(((-1.0)*r12*x10479)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10472*x10476))+(((-1.0)*r02*x10480))+(((-1.0)*x10475*x10479)));
evalcond[5]=((((-1.0)*x10477*x10479))+(((-1.0)*r22*x10480))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10472*x10478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10481=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10481.valid){
continue;
}
CheckValue<IkReal> x10482 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10481.value)))+(x10482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10483=IKsin(j4);
IkReal x10484=IKcos(j4);
IkReal x10485=(gconst4*r11);
IkReal x10486=(gconst5*r10);
IkReal x10487=(gconst4*r01);
IkReal x10488=(gconst5*r00);
IkReal x10489=(gconst4*r21);
IkReal x10490=(gconst5*r20);
IkReal x10491=((1.0)*x10484);
IkReal x10492=((1.0)*x10483);
evalcond[0]=((((-1.0)*x10490*x10492))+(((-1.0)*r22*x10491))+((x10483*x10489)));
evalcond[1]=((((-1.0)*x10488*x10492))+((x10483*x10487))+(((-1.0)*r02*x10491)));
evalcond[2]=((((-1.0)*x10485*x10491))+(((-1.0)*r12*x10492))+((x10484*x10486)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10491))+((x10483*x10485))+(((-1.0)*x10486*x10492)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10492))+((x10484*x10488))+(((-1.0)*x10487*x10491)));
evalcond[5]=((((-1.0)*x10489*x10491))+(((-1.0)*r22*x10492))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10484*x10490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10493=((-1.0)*r21);
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(x10493),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
IkReal x10494=((1.0)*(x10496.value));
IkReal x10495=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10494)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10494)));
IkReal gconst4=(x10493*x10495);
IkReal gconst5=((1.0)*r20*x10495);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10497=((-1.0)*r21);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(x10497),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
IkReal x10498=((1.0)*(x10500.value));
IkReal x10499=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10498)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10498)));
IkReal gconst4=(x10497*x10499);
IkReal gconst5=((1.0)*r20*x10499);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10501=((-1.0)*r21);
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal(x10501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
IkReal x10502=((1.0)*(x10504.value));
IkReal x10503=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10502)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10502)));
IkReal gconst4=(x10501*x10503);
IkReal gconst5=((1.0)*r20*x10503);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10505=(gconst5*r10);
IkReal x10506=(gconst4*r11);
CheckValue<IkReal> x10507=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10505*x10506))+(x10505*x10505)+(x10506*x10506))),-1);
if(!x10507.valid){
continue;
}
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal((x10506+(((-1.0)*x10505)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10507.value)))+(x10508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10509=IKcos(j4);
IkReal x10510=IKsin(j4);
IkReal x10511=(gconst4*r11);
IkReal x10512=(gconst5*r10);
IkReal x10513=(gconst5*r00);
IkReal x10514=(gconst5*r20);
IkReal x10515=((1.0)*x10509);
IkReal x10516=(gconst4*x10509);
IkReal x10517=((1.0)*x10510);
IkReal x10518=(gconst4*x10510);
evalcond[0]=(((r12*x10510))+((x10509*x10511))+(((-1.0)*x10512*x10515)));
evalcond[1]=((((-1.0)*r22*x10515))+(((-1.0)*x10514*x10517))+((r21*x10518)));
evalcond[2]=((((-1.0)*r02*x10515))+(((-1.0)*x10513*x10517))+((r01*x10518)));
evalcond[3]=((-1.0)+((x10510*x10511))+(((-1.0)*x10512*x10517))+(((-1.0)*r12*x10515)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10513*x10515))+((r01*x10516))+((r02*x10510)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10514*x10515))+((r21*x10516))+((r22*x10510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10519=((1.0)*gconst5);
CheckValue<IkReal> x10520=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10519))+(((-1.0)*gconst4*r20)))),-1);
if(!x10520.valid){
continue;
}
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10519))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10520.value)))+(x10521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10522=IKcos(j4);
IkReal x10523=IKsin(j4);
IkReal x10524=(gconst4*r11);
IkReal x10525=(gconst5*r10);
IkReal x10526=(gconst5*r00);
IkReal x10527=(gconst5*r20);
IkReal x10528=((1.0)*x10522);
IkReal x10529=(gconst4*x10522);
IkReal x10530=((1.0)*x10523);
IkReal x10531=(gconst4*x10523);
evalcond[0]=(((x10522*x10524))+((r12*x10523))+(((-1.0)*x10525*x10528)));
evalcond[1]=((((-1.0)*r22*x10528))+((r21*x10531))+(((-1.0)*x10527*x10530)));
evalcond[2]=((((-1.0)*r02*x10528))+((r01*x10531))+(((-1.0)*x10526*x10530)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10528))+((x10523*x10524))+(((-1.0)*x10525*x10530)));
evalcond[4]=((((-1.0)*x10526*x10528))+((cj2*sj1))+((r02*x10523))+((cj1*sj2))+((r01*x10529)));
evalcond[5]=((((-1.0)*x10527*x10528))+((r22*x10523))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10532=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10532.valid){
continue;
}
CheckValue<IkReal> x10533 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10532.value)))+(x10533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10534=IKcos(j4);
IkReal x10535=IKsin(j4);
IkReal x10536=(gconst4*r11);
IkReal x10537=(gconst5*r10);
IkReal x10538=(gconst5*r00);
IkReal x10539=(gconst5*r20);
IkReal x10540=((1.0)*x10534);
IkReal x10541=(gconst4*x10534);
IkReal x10542=((1.0)*x10535);
IkReal x10543=(gconst4*x10535);
evalcond[0]=(((x10534*x10536))+((r12*x10535))+(((-1.0)*x10537*x10540)));
evalcond[1]=((((-1.0)*x10539*x10542))+(((-1.0)*r22*x10540))+((r21*x10543)));
evalcond[2]=((((-1.0)*x10538*x10542))+(((-1.0)*r02*x10540))+((r01*x10543)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10540))+(((-1.0)*x10537*x10542))+((x10535*x10536)));
evalcond[4]=(((cj2*sj1))+((r02*x10535))+(((-1.0)*x10538*x10540))+((cj1*sj2))+((r01*x10541)));
evalcond[5]=(((r22*x10535))+(((-1.0)*x10539*x10540))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10544=((-1.0)*r21);
CheckValue<IkReal> x10547 = IKatan2WithCheck(IkReal(x10544),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10547.valid){
continue;
}
IkReal x10545=((1.0)*(x10547.value));
IkReal x10546=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10545)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10545)));
IkReal gconst4=(x10544*x10546);
IkReal gconst5=((1.0)*r20*x10546);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10548=((-1.0)*r21);
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(x10548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
IkReal x10549=((1.0)*(x10551.value));
IkReal x10550=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10549)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10549)));
IkReal gconst4=(x10548*x10550);
IkReal gconst5=((1.0)*r20*x10550);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10552=((-1.0)*r21);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(x10552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
IkReal x10553=((1.0)*(x10555.value));
IkReal x10554=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10553)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10553)));
IkReal gconst4=(x10552*x10554);
IkReal gconst5=((1.0)*r20*x10554);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10556=(gconst5*r10);
IkReal x10557=(gconst4*r11);
CheckValue<IkReal> x10558 = IKatan2WithCheck(IkReal(((((-1.0)*x10556))+x10557)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10558.valid){
continue;
}
CheckValue<IkReal> x10559=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10557*x10557)+(x10556*x10556)+(((-2.0)*x10556*x10557)))),-1);
if(!x10559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10558.value)+(((1.5707963267949)*(x10559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10560=IKcos(j4);
IkReal x10561=IKsin(j4);
IkReal x10562=(gconst5*r10);
IkReal x10563=(gconst5*r00);
IkReal x10564=(gconst5*r20);
IkReal x10565=((1.0)*x10560);
IkReal x10566=(gconst4*x10561);
IkReal x10567=(gconst4*x10560);
IkReal x10568=((1.0)*x10561);
evalcond[0]=((((-1.0)*x10562*x10565))+((r12*x10561))+((r11*x10567)));
evalcond[1]=((((-1.0)*r22*x10565))+((r21*x10566))+(((-1.0)*x10564*x10568)));
evalcond[2]=(((r01*x10566))+(((-1.0)*x10563*x10568))+(((-1.0)*r02*x10565)));
evalcond[3]=((-1.0)+(((-1.0)*x10562*x10568))+(((-1.0)*r12*x10565))+((r11*x10566)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10567))+(((-1.0)*x10564*x10565))+((r22*x10561)));
evalcond[5]=(((r01*x10567))+(((-1.0)*x10563*x10565))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10569=((1.0)*gconst5);
CheckValue<IkReal> x10570 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10569))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10570.valid){
continue;
}
CheckValue<IkReal> x10571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10569))+(((-1.0)*gconst4*r20)))),-1);
if(!x10571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10570.value)+(((1.5707963267949)*(x10571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10572=IKcos(j4);
IkReal x10573=IKsin(j4);
IkReal x10574=(gconst5*r10);
IkReal x10575=(gconst5*r00);
IkReal x10576=(gconst5*r20);
IkReal x10577=((1.0)*x10572);
IkReal x10578=(gconst4*x10573);
IkReal x10579=(gconst4*x10572);
IkReal x10580=((1.0)*x10573);
evalcond[0]=((((-1.0)*x10574*x10577))+((r11*x10579))+((r12*x10573)));
evalcond[1]=((((-1.0)*r22*x10577))+((r21*x10578))+(((-1.0)*x10576*x10580)));
evalcond[2]=(((r01*x10578))+(((-1.0)*x10575*x10580))+(((-1.0)*r02*x10577)));
evalcond[3]=((-1.0)+(((-1.0)*x10574*x10580))+(((-1.0)*r12*x10577))+((r11*x10578)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10576*x10577))+((r21*x10579))+((r22*x10573)));
evalcond[5]=(((r01*x10579))+(((-1.0)*sj1*sj2))+(((-1.0)*x10575*x10577))+((r02*x10573))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10581=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10581.valid){
continue;
}
CheckValue<IkReal> x10582 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10581.value)))+(x10582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10583=IKcos(j4);
IkReal x10584=IKsin(j4);
IkReal x10585=(gconst5*r10);
IkReal x10586=(gconst5*r00);
IkReal x10587=(gconst5*r20);
IkReal x10588=((1.0)*x10583);
IkReal x10589=(gconst4*x10584);
IkReal x10590=(gconst4*x10583);
IkReal x10591=((1.0)*x10584);
evalcond[0]=(((r12*x10584))+((r11*x10590))+(((-1.0)*x10585*x10588)));
evalcond[1]=((((-1.0)*r22*x10588))+(((-1.0)*x10587*x10591))+((r21*x10589)));
evalcond[2]=((((-1.0)*r02*x10588))+(((-1.0)*x10586*x10591))+((r01*x10589)));
evalcond[3]=((-1.0)+(((-1.0)*x10585*x10591))+((r11*x10589))+(((-1.0)*r12*x10588)));
evalcond[4]=(((r21*x10590))+((cj2*sj1))+(((-1.0)*x10587*x10588))+((cj1*sj2))+((r22*x10584)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10590))+((r02*x10584))+((cj1*cj2))+(((-1.0)*x10586*x10588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10592=((-1.0)*r21);
CheckValue<IkReal> x10595 = IKatan2WithCheck(IkReal(x10592),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10595.valid){
continue;
}
IkReal x10593=((1.0)*(x10595.value));
IkReal x10594=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10593)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10593)));
IkReal gconst4=(x10592*x10594);
IkReal gconst5=((1.0)*r20*x10594);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10596=((-1.0)*r21);
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(x10596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
IkReal x10597=((1.0)*(x10599.value));
IkReal x10598=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10597)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10597)));
IkReal gconst4=(x10596*x10598);
IkReal gconst5=((1.0)*r20*x10598);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10600=((-1.0)*r21);
CheckValue<IkReal> x10603 = IKatan2WithCheck(IkReal(x10600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10603.valid){
continue;
}
IkReal x10601=((1.0)*(x10603.value));
IkReal x10602=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10601)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10601)));
IkReal gconst4=(x10600*x10602);
IkReal gconst5=((1.0)*r20*x10602);
IkReal x10604=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10608=IKPowWithIntegerCheck(x10604,-1);
if(!x10608.valid){
continue;
}
IkReal x10605=x10608.value;
IkReal x10606=((1.0)*x10605);
IkReal x10607=((((-2.0)*r10*r11*r20*r21*x10605))+(((-1.0)*x10606*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10606*(r11*r11)*(r21*r21))));
j4eval[0]=x10607;
j4eval[1]=r12;
j4eval[2]=x10604;
j4eval[3]=IKsign(x10607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10609=(gconst5*r10);
IkReal x10610=(gconst4*r11);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(((((-1.0)*x10610))+x10609)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign(((((2.0)*x10609*x10610))+(((-1.0)*(x10610*x10610)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10609*x10609))))),-1);
if(!x10612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10611.value)+(((1.5707963267949)*(x10612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10613=IKsin(j4);
IkReal x10614=IKcos(j4);
IkReal x10615=(gconst4*r11);
IkReal x10616=(gconst5*r10);
IkReal x10617=(gconst5*r00);
IkReal x10618=(gconst5*r20);
IkReal x10619=((1.0)*x10614);
IkReal x10620=(gconst4*x10613);
IkReal x10621=((1.0)*x10613);
evalcond[0]=(((r21*x10620))+(((-1.0)*x10618*x10621))+(((-1.0)*r22*x10619)));
evalcond[1]=((((-1.0)*x10617*x10621))+((r01*x10620))+(((-1.0)*r02*x10619)));
evalcond[2]=((((-1.0)*x10615*x10619))+((x10614*x10616))+(((-1.0)*r12*x10621)));
evalcond[3]=((-1.0)+((x10613*x10615))+(((-1.0)*r12*x10619))+(((-1.0)*x10616*x10621)));
evalcond[4]=(((cj2*sj1))+((x10614*x10618))+((cj1*sj2))+(((-1.0)*r22*x10621))+(((-1.0)*gconst4*r21*x10619)));
evalcond[5]=((((-1.0)*r02*x10621))+((x10614*x10617))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10622=((1.0)*gconst5);
CheckValue<IkReal> x10623 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10622))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10623.valid){
continue;
}
CheckValue<IkReal> x10624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10622))+(((-1.0)*gconst4*r20)))),-1);
if(!x10624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10623.value)+(((1.5707963267949)*(x10624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10625=IKsin(j4);
IkReal x10626=IKcos(j4);
IkReal x10627=(gconst4*r11);
IkReal x10628=(gconst5*r10);
IkReal x10629=(gconst5*r00);
IkReal x10630=(gconst5*r20);
IkReal x10631=((1.0)*x10626);
IkReal x10632=(gconst4*x10625);
IkReal x10633=((1.0)*x10625);
evalcond[0]=((((-1.0)*r22*x10631))+(((-1.0)*x10630*x10633))+((r21*x10632)));
evalcond[1]=((((-1.0)*r02*x10631))+((r01*x10632))+(((-1.0)*x10629*x10633)));
evalcond[2]=(((x10626*x10628))+(((-1.0)*x10627*x10631))+(((-1.0)*r12*x10633)));
evalcond[3]=((-1.0)+((x10625*x10627))+(((-1.0)*x10628*x10633))+(((-1.0)*r12*x10631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10626*x10630))+(((-1.0)*gconst4*r21*x10631))+(((-1.0)*r22*x10633)));
evalcond[5]=((((-1.0)*r02*x10633))+((x10626*x10629))+(((-1.0)*gconst4*r01*x10631))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10634=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10634.valid){
continue;
}
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10634.value)))+(x10635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10636=IKsin(j4);
IkReal x10637=IKcos(j4);
IkReal x10638=(gconst4*r11);
IkReal x10639=(gconst5*r10);
IkReal x10640=(gconst5*r00);
IkReal x10641=(gconst5*r20);
IkReal x10642=((1.0)*x10637);
IkReal x10643=(gconst4*x10636);
IkReal x10644=((1.0)*x10636);
evalcond[0]=(((r21*x10643))+(((-1.0)*x10641*x10644))+(((-1.0)*r22*x10642)));
evalcond[1]=((((-1.0)*r02*x10642))+((r01*x10643))+(((-1.0)*x10640*x10644)));
evalcond[2]=((((-1.0)*x10638*x10642))+(((-1.0)*r12*x10644))+((x10637*x10639)));
evalcond[3]=((-1.0)+(((-1.0)*x10639*x10644))+(((-1.0)*r12*x10642))+((x10636*x10638)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10637*x10641))+(((-1.0)*r22*x10644))+(((-1.0)*gconst4*r21*x10642)));
evalcond[5]=((((-1.0)*r02*x10644))+(((-1.0)*sj1*sj2))+((x10637*x10640))+(((-1.0)*gconst4*r01*x10642))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10645=((-1.0)*r21);
IkReal x10646=((-1.0)*px);
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(x10645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
IkReal x10647=((1.0)*(x10648.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10647)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10646);
rxp1_1=(px*r21);
rxp1_2=(r11*x10646);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10647)));
IkReal gconst4=x10645;
IkReal gconst5=((1.0)*r20);
IkReal x10649=((1.0)*r11*r21);
IkReal x10650=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10649))+(((-1.0)*x10650)));
j4eval[1]=(((sj3*x10650))+((sj3*x10649)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10651=((-1.0)*r21);
IkReal x10652=((-1.0)*px);
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(x10651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
IkReal x10653=((1.0)*(x10654.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10653)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10652);
rxp1_1=(px*r21);
rxp1_2=(r11*x10652);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10653)));
IkReal gconst4=x10651;
IkReal gconst5=((1.0)*r20);
IkReal x10655=((1.0)*cj3);
IkReal x10656=(r10*r20);
IkReal x10657=(r11*r21);
j4eval[0]=((((-1.0)*x10657))+(((-1.0)*x10656)));
j4eval[1]=((((-1.0)*x10655*x10657))+(((-1.0)*x10655*x10656)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10658=((-1.0)*r21);
IkReal x10659=((-1.0)*px);
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(x10658),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
IkReal x10660=((1.0)*(x10661.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10660)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10659);
rxp1_1=(px*r21);
rxp1_2=(r11*x10659);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10660)));
IkReal gconst4=x10658;
IkReal gconst5=((1.0)*r20);
IkReal x10662=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10662))+((r10*r20*x10662)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10663=((1.0)*r11);
CheckValue<IkReal> x10664=IKPowWithIntegerCheck(r02,-1);
if(!x10664.valid){
continue;
}
CheckValue<IkReal> x10665=IKPowWithIntegerCheck(sj3,-1);
if(!x10665.valid){
continue;
}
CheckValue<IkReal> x10666=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10663))+((gconst5*r10*sj3))),-1);
if(!x10666.valid){
continue;
}
if( IKabs(((x10664.value)*(x10665.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10666.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10663)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10664.value)*(x10665.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10666.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10663))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10664.value)*(x10665.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10666.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10663))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10667=IKsin(j4);
IkReal x10668=IKcos(j4);
IkReal x10669=(cj2*sj1);
IkReal x10670=(cj1*sj2);
IkReal x10671=(gconst5*sj3);
IkReal x10672=(gconst4*r11);
IkReal x10673=(sj1*sj2);
IkReal x10674=((1.0)*gconst5);
IkReal x10675=(cj1*cj2);
IkReal x10676=(gconst4*r21);
IkReal x10677=(cj3*gconst4);
IkReal x10678=(gconst4*sj3);
IkReal x10679=(cj3*gconst5);
IkReal x10680=(r20*x10668);
IkReal x10681=(r10*x10668);
IkReal x10682=(cj3*x10668);
IkReal x10683=(r02*x10667);
IkReal x10684=(x10670+x10669);
IkReal x10685=((1.0)*sj3*x10668);
evalcond[0]=((-1.0)*r02*x10668);
evalcond[1]=((((-1.0)*r20*x10667*x10674))+((x10667*x10676)));
evalcond[2]=((((-1.0)*sj3*x10683))+x10684);
evalcond[3]=(((cj3*x10683))+(((-1.0)*x10673))+x10675);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10667*x10674))+((x10667*x10672)));
evalcond[5]=(((r11*x10679))+((r10*x10677))+((x10671*x10681))+(((-1.0)*x10672*x10685)));
evalcond[6]=(((r11*x10671))+((x10672*x10682))+((r10*x10678))+(((-1.0)*cj3*x10674*x10681)));
evalcond[7]=(((x10676*x10682))+((r20*x10678))+((r21*x10671))+x10684+(((-1.0)*cj3*x10674*x10680)));
evalcond[8]=(((x10671*x10680))+(((-1.0)*x10675))+(((-1.0)*x10676*x10685))+((r20*x10677))+((r21*x10679))+x10673);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10686=((1.0)*sj3);
IkReal x10687=(gconst4*r11);
IkReal x10688=((1.0)*gconst5*r10);
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(((((-1.0)*x10688))+x10687),-1);
if(!x10689.valid){
continue;
}
CheckValue<IkReal> x10690=IKPowWithIntegerCheck((((cj3*x10687))+(((-1.0)*cj3*x10688))),-1);
if(!x10690.valid){
continue;
}
if( IKabs(x10689.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10690.value)*(((((-1.0)*gconst4*r10*x10686))+(((-1.0)*gconst5*r11*x10686)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10689.value)+IKsqr(((x10690.value)*(((((-1.0)*gconst4*r10*x10686))+(((-1.0)*gconst5*r11*x10686))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10689.value, ((x10690.value)*(((((-1.0)*gconst4*r10*x10686))+(((-1.0)*gconst5*r11*x10686))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10691=IKsin(j4);
IkReal x10692=IKcos(j4);
IkReal x10693=(cj2*sj1);
IkReal x10694=(cj1*sj2);
IkReal x10695=(gconst5*sj3);
IkReal x10696=(gconst4*r11);
IkReal x10697=(sj1*sj2);
IkReal x10698=((1.0)*gconst5);
IkReal x10699=(cj1*cj2);
IkReal x10700=(gconst4*r21);
IkReal x10701=(cj3*gconst4);
IkReal x10702=(gconst4*sj3);
IkReal x10703=(cj3*gconst5);
IkReal x10704=(r20*x10692);
IkReal x10705=(r10*x10692);
IkReal x10706=(cj3*x10692);
IkReal x10707=(r02*x10691);
IkReal x10708=(x10693+x10694);
IkReal x10709=((1.0)*sj3*x10692);
evalcond[0]=((-1.0)*r02*x10692);
evalcond[1]=(((x10691*x10700))+(((-1.0)*r20*x10691*x10698)));
evalcond[2]=(x10708+(((-1.0)*sj3*x10707)));
evalcond[3]=(((cj3*x10707))+(((-1.0)*x10697))+x10699);
evalcond[4]=((-1.0)+((x10691*x10696))+(((-1.0)*r10*x10691*x10698)));
evalcond[5]=(((x10695*x10705))+((r11*x10703))+(((-1.0)*x10696*x10709))+((r10*x10701)));
evalcond[6]=(((r11*x10695))+((x10696*x10706))+((r10*x10702))+(((-1.0)*cj3*x10698*x10705)));
evalcond[7]=(((x10700*x10706))+((r21*x10695))+(((-1.0)*cj3*x10698*x10704))+x10708+((r20*x10702)));
evalcond[8]=((((-1.0)*x10699))+((x10695*x10704))+((r21*x10703))+((r20*x10701))+x10697+(((-1.0)*x10700*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10710=((1.0)*gconst5);
IkReal x10711=(gconst4*r11);
CheckValue<IkReal> x10712=IKPowWithIntegerCheck(((((-1.0)*r10*x10710))+x10711),-1);
if(!x10712.valid){
continue;
}
CheckValue<IkReal> x10713=IKPowWithIntegerCheck(((((-1.0)*sj3*x10711))+((gconst5*r10*sj3))),-1);
if(!x10713.valid){
continue;
}
if( IKabs(x10712.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10713.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10710)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10712.value)+IKsqr(((x10713.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10710))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10712.value, ((x10713.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10710))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10714=IKsin(j4);
IkReal x10715=IKcos(j4);
IkReal x10716=(cj2*sj1);
IkReal x10717=(cj1*sj2);
IkReal x10718=(gconst5*sj3);
IkReal x10719=(gconst4*r11);
IkReal x10720=(sj1*sj2);
IkReal x10721=((1.0)*gconst5);
IkReal x10722=(cj1*cj2);
IkReal x10723=(gconst4*r21);
IkReal x10724=(cj3*gconst4);
IkReal x10725=(gconst4*sj3);
IkReal x10726=(cj3*gconst5);
IkReal x10727=(r20*x10715);
IkReal x10728=(r10*x10715);
IkReal x10729=(cj3*x10715);
IkReal x10730=(r02*x10714);
IkReal x10731=(x10716+x10717);
IkReal x10732=((1.0)*sj3*x10715);
evalcond[0]=((-1.0)*r02*x10715);
evalcond[1]=((((-1.0)*r20*x10714*x10721))+((x10714*x10723)));
evalcond[2]=((((-1.0)*sj3*x10730))+x10731);
evalcond[3]=((((-1.0)*x10720))+x10722+((cj3*x10730)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10714*x10721))+((x10714*x10719)));
evalcond[5]=(((r10*x10724))+((x10718*x10728))+(((-1.0)*x10719*x10732))+((r11*x10726)));
evalcond[6]=(((r10*x10725))+((x10719*x10729))+((r11*x10718))+(((-1.0)*cj3*x10721*x10728)));
evalcond[7]=(((x10723*x10729))+((r21*x10718))+((r20*x10725))+(((-1.0)*cj3*x10721*x10727))+x10731);
evalcond[8]=(((x10718*x10727))+((r21*x10726))+(((-1.0)*x10722))+((r20*x10724))+x10720+(((-1.0)*x10723*x10732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10733=gconst4*gconst4;
IkReal x10734=gconst5*gconst5;
IkReal x10735=(r10*r21);
IkReal x10736=((1.0)*cj3);
IkReal x10737=(r11*r21);
IkReal x10738=(r11*r20);
IkReal x10739=(r22*sj3);
IkReal x10740=(gconst4*r10);
IkReal x10741=((1.0)*sj3);
IkReal x10742=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10743 = IKatan2WithCheck(IkReal((((gconst5*r11*x10739))+((x10739*x10740)))),IkReal((((sj3*x10733*x10735))+((gconst4*gconst5*sj3*x10737))+(((-1.0)*x10734*x10738*x10741))+(((-1.0)*gconst5*r20*x10740*x10741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10743.valid){
continue;
}
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10733*x10736*x10737))+(((-1.0)*r10*r20*x10734*x10736))+((x10735*x10742))+((x10738*x10742))+(((-1.0)*r12*r22*x10736)))),-1);
if(!x10744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10743.value)+(((1.5707963267949)*(x10744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10745=IKsin(j4);
IkReal x10746=IKcos(j4);
IkReal x10747=(cj2*sj1);
IkReal x10748=(cj1*sj2);
IkReal x10749=(gconst5*sj3);
IkReal x10750=(gconst4*r11);
IkReal x10751=(sj1*sj2);
IkReal x10752=(gconst5*r10);
IkReal x10753=(cj1*cj2);
IkReal x10754=(gconst4*r01);
IkReal x10755=(gconst4*r21);
IkReal x10756=(gconst5*r00);
IkReal x10757=(cj3*gconst5);
IkReal x10758=(gconst4*sj3);
IkReal x10759=(cj3*gconst4);
IkReal x10760=((1.0)*x10746);
IkReal x10761=((1.0)*x10745);
IkReal x10762=(cj3*x10745);
IkReal x10763=(cj3*x10746);
IkReal x10764=(x10748+x10747);
evalcond[0]=(((x10745*x10755))+(((-1.0)*gconst5*r20*x10761))+(((-1.0)*r22*x10760)));
evalcond[1]=(((x10745*x10754))+(((-1.0)*r02*x10760))+(((-1.0)*x10756*x10761)));
evalcond[2]=((-1.0)+((x10745*x10750))+(((-1.0)*x10752*x10761))+(((-1.0)*r12*x10760)));
evalcond[3]=(((x10750*x10763))+((r12*x10762))+((r10*x10758))+(((-1.0)*cj3*x10752*x10760))+((r11*x10749)));
evalcond[4]=(((r10*x10759))+(((-1.0)*sj3*x10750*x10760))+((r10*x10746*x10749))+((r11*x10757))+(((-1.0)*r12*sj3*x10761)));
evalcond[5]=((((-1.0)*r20*x10757*x10760))+((r20*x10758))+((x10755*x10763))+((r22*x10762))+x10764+((r21*x10749)));
evalcond[6]=((((-1.0)*r02*sj3*x10761))+((r00*x10746*x10749))+x10764+(((-1.0)*sj3*x10754*x10760))+((r01*x10757))+((r00*x10759)));
evalcond[7]=((((-1.0)*cj3*x10756*x10760))+x10753+((x10754*x10763))+((r02*x10762))+((r01*x10749))+((r00*x10758))+(((-1.0)*x10751)));
evalcond[8]=(((r20*x10746*x10749))+((r20*x10759))+(((-1.0)*r22*sj3*x10761))+x10751+((r21*x10757))+(((-1.0)*sj3*x10755*x10760))+(((-1.0)*x10753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10765=((1.0)*gconst5);
CheckValue<IkReal> x10766 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10766.valid){
continue;
}
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10765))+(((-1.0)*gconst4*r20)))),-1);
if(!x10767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10766.value)+(((1.5707963267949)*(x10767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10768=IKsin(j4);
IkReal x10769=IKcos(j4);
IkReal x10770=(cj2*sj1);
IkReal x10771=(cj1*sj2);
IkReal x10772=(gconst5*sj3);
IkReal x10773=(gconst4*r11);
IkReal x10774=(sj1*sj2);
IkReal x10775=(gconst5*r10);
IkReal x10776=(cj1*cj2);
IkReal x10777=(gconst4*r01);
IkReal x10778=(gconst4*r21);
IkReal x10779=(gconst5*r00);
IkReal x10780=(cj3*gconst5);
IkReal x10781=(gconst4*sj3);
IkReal x10782=(cj3*gconst4);
IkReal x10783=((1.0)*x10769);
IkReal x10784=((1.0)*x10768);
IkReal x10785=(cj3*x10768);
IkReal x10786=(cj3*x10769);
IkReal x10787=(x10770+x10771);
evalcond[0]=((((-1.0)*gconst5*r20*x10784))+((x10768*x10778))+(((-1.0)*r22*x10783)));
evalcond[1]=((((-1.0)*x10779*x10784))+((x10768*x10777))+(((-1.0)*r02*x10783)));
evalcond[2]=((-1.0)+(((-1.0)*x10775*x10784))+(((-1.0)*r12*x10783))+((x10768*x10773)));
evalcond[3]=(((r11*x10772))+((x10773*x10786))+((r12*x10785))+(((-1.0)*cj3*x10775*x10783))+((r10*x10781)));
evalcond[4]=(((r11*x10780))+((r10*x10769*x10772))+(((-1.0)*sj3*x10773*x10783))+(((-1.0)*r12*sj3*x10784))+((r10*x10782)));
evalcond[5]=(((r22*x10785))+((x10778*x10786))+((r20*x10781))+((r21*x10772))+x10787+(((-1.0)*r20*x10780*x10783)));
evalcond[6]=((((-1.0)*sj3*x10777*x10783))+(((-1.0)*r02*sj3*x10784))+((r01*x10780))+((r00*x10782))+x10787+((r00*x10769*x10772)));
evalcond[7]=((((-1.0)*x10774))+((r02*x10785))+((x10777*x10786))+((r01*x10772))+((r00*x10781))+(((-1.0)*cj3*x10779*x10783))+x10776);
evalcond[8]=(((r21*x10780))+(((-1.0)*x10776))+(((-1.0)*r22*sj3*x10784))+((r20*x10782))+(((-1.0)*sj3*x10778*x10783))+((r20*x10769*x10772))+x10774);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10788=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10788.valid){
continue;
}
CheckValue<IkReal> x10789 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10788.value)))+(x10789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10790=IKsin(j4);
IkReal x10791=IKcos(j4);
IkReal x10792=(cj2*sj1);
IkReal x10793=(cj1*sj2);
IkReal x10794=(gconst5*sj3);
IkReal x10795=(gconst4*r11);
IkReal x10796=(sj1*sj2);
IkReal x10797=(gconst5*r10);
IkReal x10798=(cj1*cj2);
IkReal x10799=(gconst4*r01);
IkReal x10800=(gconst4*r21);
IkReal x10801=(gconst5*r00);
IkReal x10802=(cj3*gconst5);
IkReal x10803=(gconst4*sj3);
IkReal x10804=(cj3*gconst4);
IkReal x10805=((1.0)*x10791);
IkReal x10806=((1.0)*x10790);
IkReal x10807=(cj3*x10790);
IkReal x10808=(cj3*x10791);
IkReal x10809=(x10792+x10793);
evalcond[0]=(((x10790*x10800))+(((-1.0)*r22*x10805))+(((-1.0)*gconst5*r20*x10806)));
evalcond[1]=((((-1.0)*r02*x10805))+((x10790*x10799))+(((-1.0)*x10801*x10806)));
evalcond[2]=((-1.0)+(((-1.0)*x10797*x10806))+((x10790*x10795))+(((-1.0)*r12*x10805)));
evalcond[3]=(((x10795*x10808))+((r10*x10803))+((r12*x10807))+(((-1.0)*cj3*x10797*x10805))+((r11*x10794)));
evalcond[4]=(((r10*x10804))+((r10*x10791*x10794))+(((-1.0)*r12*sj3*x10806))+((r11*x10802))+(((-1.0)*sj3*x10795*x10805)));
evalcond[5]=(((r20*x10803))+(((-1.0)*r20*x10802*x10805))+((r21*x10794))+((r22*x10807))+((x10800*x10808))+x10809);
evalcond[6]=((((-1.0)*r02*sj3*x10806))+((r01*x10802))+((r00*x10804))+((r00*x10791*x10794))+(((-1.0)*sj3*x10799*x10805))+x10809);
evalcond[7]=(((r00*x10803))+((x10799*x10808))+((r02*x10807))+(((-1.0)*x10796))+x10798+((r01*x10794))+(((-1.0)*cj3*x10801*x10805)));
evalcond[8]=(((r20*x10804))+(((-1.0)*sj3*x10800*x10805))+((r20*x10791*x10794))+((r21*x10802))+(((-1.0)*x10798))+x10796+(((-1.0)*r22*sj3*x10806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10810=((-1.0)*r21);
CheckValue<IkReal> x10813 = IKatan2WithCheck(IkReal(x10810),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10813.valid){
continue;
}
IkReal x10811=((1.0)*(x10813.value));
IkReal x10812=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10811)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10811)));
IkReal gconst4=(x10810*x10812);
IkReal gconst5=((1.0)*r20*x10812);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10814=((-1.0)*r21);
CheckValue<IkReal> x10817 = IKatan2WithCheck(IkReal(x10814),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10817.valid){
continue;
}
IkReal x10815=((1.0)*(x10817.value));
IkReal x10816=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10815)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10815)));
IkReal gconst4=(x10814*x10816);
IkReal gconst5=((1.0)*r20*x10816);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10818=((-1.0)*r21);
CheckValue<IkReal> x10821 = IKatan2WithCheck(IkReal(x10818),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10821.valid){
continue;
}
IkReal x10819=((1.0)*(x10821.value));
IkReal x10820=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10819)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10819)));
IkReal gconst4=(x10818*x10820);
IkReal gconst5=((1.0)*r20*x10820);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10822=((-1.0)*r21);
CheckValue<IkReal> x10825 = IKatan2WithCheck(IkReal(x10822),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10825.valid){
continue;
}
IkReal x10823=((1.0)*(x10825.value));
IkReal x10824=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10823)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10823)));
IkReal gconst4=(x10822*x10824);
IkReal gconst5=((1.0)*r20*x10824);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10826=((-1.0)*r21);
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(x10826),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
IkReal x10827=((1.0)*(x10829.value));
IkReal x10828=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10827)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10827)));
IkReal gconst4=(x10826*x10828);
IkReal gconst5=((1.0)*r20*x10828);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10830=((-1.0)*r21);
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(x10830),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
IkReal x10831=((1.0)*(x10833.value));
IkReal x10832=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10831)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10831)));
IkReal gconst4=(x10830*x10832);
IkReal gconst5=((1.0)*r20*x10832);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10834=(gconst5*r10);
IkReal x10835=(gconst4*r11);
CheckValue<IkReal> x10836 = IKatan2WithCheck(IkReal(((((-1.0)*x10835))+x10834)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10836.valid){
continue;
}
CheckValue<IkReal> x10837=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10834*x10834)+(x10835*x10835)+(((-2.0)*x10834*x10835)))),-1);
if(!x10837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10836.value)+(((1.5707963267949)*(x10837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10838=IKsin(j4);
IkReal x10839=IKcos(j4);
IkReal x10840=(gconst4*r11);
IkReal x10841=((1.0)*cj1);
IkReal x10842=(gconst5*r10);
IkReal x10843=(gconst4*r01);
IkReal x10844=(gconst5*r00);
IkReal x10845=(gconst4*r21);
IkReal x10846=(gconst5*r20);
IkReal x10847=((1.0)*x10839);
IkReal x10848=((1.0)*x10838);
evalcond[0]=(((x10838*x10845))+(((-1.0)*r22*x10847))+(((-1.0)*x10846*x10848)));
evalcond[1]=(((x10838*x10843))+(((-1.0)*r02*x10847))+(((-1.0)*x10844*x10848)));
evalcond[2]=((((-1.0)*r12*x10848))+((x10839*x10842))+(((-1.0)*x10840*x10847)));
evalcond[3]=((1.0)+((x10838*x10840))+(((-1.0)*x10842*x10848))+(((-1.0)*r12*x10847)));
evalcond[4]=((((-1.0)*x10845*x10847))+(((-1.0)*cj2*x10841))+(((-1.0)*r22*x10848))+((sj1*sj2))+((x10839*x10846)));
evalcond[5]=((((-1.0)*x10843*x10847))+(((-1.0)*sj2*x10841))+(((-1.0)*r02*x10848))+(((-1.0)*cj2*sj1))+((x10839*x10844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10849=((1.0)*gconst5);
CheckValue<IkReal> x10850 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10850.valid){
continue;
}
CheckValue<IkReal> x10851=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10849)))),-1);
if(!x10851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10850.value)+(((1.5707963267949)*(x10851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10852=IKsin(j4);
IkReal x10853=IKcos(j4);
IkReal x10854=(gconst4*r11);
IkReal x10855=((1.0)*cj1);
IkReal x10856=(gconst5*r10);
IkReal x10857=(gconst4*r01);
IkReal x10858=(gconst5*r00);
IkReal x10859=(gconst4*r21);
IkReal x10860=(gconst5*r20);
IkReal x10861=((1.0)*x10853);
IkReal x10862=((1.0)*x10852);
evalcond[0]=((((-1.0)*r22*x10861))+(((-1.0)*x10860*x10862))+((x10852*x10859)));
evalcond[1]=((((-1.0)*x10858*x10862))+(((-1.0)*r02*x10861))+((x10852*x10857)));
evalcond[2]=((((-1.0)*r12*x10862))+(((-1.0)*x10854*x10861))+((x10853*x10856)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10861))+(((-1.0)*x10856*x10862))+((x10852*x10854)));
evalcond[4]=((((-1.0)*r22*x10862))+(((-1.0)*x10859*x10861))+((sj1*sj2))+((x10853*x10860))+(((-1.0)*cj2*x10855)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10857*x10861))+((x10853*x10858))+(((-1.0)*sj2*x10855))+(((-1.0)*r02*x10862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10863 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10863.valid){
continue;
}
CheckValue<IkReal> x10864=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10863.value)+(((1.5707963267949)*(x10864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10865=IKsin(j4);
IkReal x10866=IKcos(j4);
IkReal x10867=(gconst4*r11);
IkReal x10868=((1.0)*cj1);
IkReal x10869=(gconst5*r10);
IkReal x10870=(gconst4*r01);
IkReal x10871=(gconst5*r00);
IkReal x10872=(gconst4*r21);
IkReal x10873=(gconst5*r20);
IkReal x10874=((1.0)*x10866);
IkReal x10875=((1.0)*x10865);
evalcond[0]=((((-1.0)*x10873*x10875))+(((-1.0)*r22*x10874))+((x10865*x10872)));
evalcond[1]=((((-1.0)*r02*x10874))+(((-1.0)*x10871*x10875))+((x10865*x10870)));
evalcond[2]=((((-1.0)*r12*x10875))+(((-1.0)*x10867*x10874))+((x10866*x10869)));
evalcond[3]=((1.0)+((x10865*x10867))+(((-1.0)*r12*x10874))+(((-1.0)*x10869*x10875)));
evalcond[4]=(((x10866*x10873))+(((-1.0)*r22*x10875))+((sj1*sj2))+(((-1.0)*cj2*x10868))+(((-1.0)*x10872*x10874)));
evalcond[5]=(((x10866*x10871))+(((-1.0)*x10870*x10874))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10868))+(((-1.0)*r02*x10875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10876=((-1.0)*r21);
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(x10876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
IkReal x10877=((1.0)*(x10879.value));
IkReal x10878=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10877)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10877)));
IkReal gconst4=(x10876*x10878);
IkReal gconst5=((1.0)*r20*x10878);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10880=((-1.0)*r21);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(x10880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
IkReal x10881=((1.0)*(x10883.value));
IkReal x10882=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10881)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10881)));
IkReal gconst4=(x10880*x10882);
IkReal gconst5=((1.0)*r20*x10882);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10884=((-1.0)*r21);
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(x10884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10885)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst4=(x10884*x10886);
IkReal gconst5=((1.0)*r20*x10886);
IkReal x10888=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10892=IKPowWithIntegerCheck(x10888,-1);
if(!x10892.valid){
continue;
}
IkReal x10889=x10892.value;
IkReal x10890=((1.0)*x10889);
IkReal x10891=((((-2.0)*r10*r11*r20*r21*x10889))+(((-1.0)*(r12*r12)))+(((-1.0)*x10890*(r10*r10)*(r20*r20)))+(((-1.0)*x10890*(r11*r11)*(r21*r21))));
j4eval[0]=x10891;
j4eval[1]=r12;
j4eval[2]=x10888;
j4eval[3]=IKsign(x10891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10893=(gconst5*r10);
IkReal x10894=(gconst4*r11);
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10894*x10894)))+(((-1.0)*(r12*r12)))+(((2.0)*x10893*x10894))+(((-1.0)*(x10893*x10893))))),-1);
if(!x10895.valid){
continue;
}
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(((((-1.0)*x10893))+x10894)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10895.value)))+(x10896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10897=IKcos(j4);
IkReal x10898=IKsin(j4);
IkReal x10899=(gconst4*r11);
IkReal x10900=(gconst5*r10);
IkReal x10901=((1.0)*cj1);
IkReal x10902=(gconst5*r00);
IkReal x10903=(gconst5*r20);
IkReal x10904=((1.0)*x10897);
IkReal x10905=(gconst4*x10897);
IkReal x10906=((1.0)*x10898);
IkReal x10907=(gconst4*x10898);
evalcond[0]=((((-1.0)*x10900*x10904))+((r12*x10898))+((x10897*x10899)));
evalcond[1]=((((-1.0)*r22*x10904))+(((-1.0)*x10903*x10906))+((r21*x10907)));
evalcond[2]=(((r01*x10907))+(((-1.0)*x10902*x10906))+(((-1.0)*r02*x10904)));
evalcond[3]=((1.0)+(((-1.0)*x10900*x10906))+(((-1.0)*r12*x10904))+((x10898*x10899)));
evalcond[4]=(((sj1*sj2))+((r22*x10898))+(((-1.0)*x10903*x10904))+(((-1.0)*cj2*x10901))+((r21*x10905)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x10905))+(((-1.0)*sj2*x10901))+((r02*x10898))+(((-1.0)*x10902*x10904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10908=((1.0)*gconst5);
CheckValue<IkReal> x10909 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10908))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10909.valid){
continue;
}
CheckValue<IkReal> x10910=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10908)))),-1);
if(!x10910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10909.value)+(((1.5707963267949)*(x10910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10911=IKcos(j4);
IkReal x10912=IKsin(j4);
IkReal x10913=(gconst4*r11);
IkReal x10914=(gconst5*r10);
IkReal x10915=((1.0)*cj1);
IkReal x10916=(gconst5*r00);
IkReal x10917=(gconst5*r20);
IkReal x10918=((1.0)*x10911);
IkReal x10919=(gconst4*x10911);
IkReal x10920=((1.0)*x10912);
IkReal x10921=(gconst4*x10912);
evalcond[0]=((((-1.0)*x10914*x10918))+((x10911*x10913))+((r12*x10912)));
evalcond[1]=((((-1.0)*r22*x10918))+((r21*x10921))+(((-1.0)*x10917*x10920)));
evalcond[2]=((((-1.0)*r02*x10918))+((r01*x10921))+(((-1.0)*x10916*x10920)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10918))+(((-1.0)*x10914*x10920))+((x10912*x10913)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10917*x10918))+((r21*x10919))+((r22*x10912))+(((-1.0)*cj2*x10915)));
evalcond[5]=((((-1.0)*sj2*x10915))+(((-1.0)*cj2*sj1))+((r02*x10912))+((r01*x10919))+(((-1.0)*x10916*x10918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10922 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10922.valid){
continue;
}
CheckValue<IkReal> x10923=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10922.value)+(((1.5707963267949)*(x10923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10924=IKcos(j4);
IkReal x10925=IKsin(j4);
IkReal x10926=(gconst4*r11);
IkReal x10927=(gconst5*r10);
IkReal x10928=((1.0)*cj1);
IkReal x10929=(gconst5*r00);
IkReal x10930=(gconst5*r20);
IkReal x10931=((1.0)*x10924);
IkReal x10932=(gconst4*x10924);
IkReal x10933=((1.0)*x10925);
IkReal x10934=(gconst4*x10925);
evalcond[0]=(((x10924*x10926))+(((-1.0)*x10927*x10931))+((r12*x10925)));
evalcond[1]=((((-1.0)*r22*x10931))+((r21*x10934))+(((-1.0)*x10930*x10933)));
evalcond[2]=((((-1.0)*x10929*x10933))+(((-1.0)*r02*x10931))+((r01*x10934)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10931))+(((-1.0)*x10927*x10933))+((x10925*x10926)));
evalcond[4]=(((sj1*sj2))+((r21*x10932))+((r22*x10925))+(((-1.0)*x10930*x10931))+(((-1.0)*cj2*x10928)));
evalcond[5]=((((-1.0)*x10929*x10931))+(((-1.0)*sj2*x10928))+((r02*x10925))+(((-1.0)*cj2*sj1))+((r01*x10932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10935=((-1.0)*r21);
CheckValue<IkReal> x10938 = IKatan2WithCheck(IkReal(x10935),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10938.valid){
continue;
}
IkReal x10936=((1.0)*(x10938.value));
IkReal x10937=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10936)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10936)));
IkReal gconst4=(x10935*x10937);
IkReal gconst5=((1.0)*r20*x10937);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10939=((-1.0)*r21);
CheckValue<IkReal> x10942 = IKatan2WithCheck(IkReal(x10939),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10942.valid){
continue;
}
IkReal x10940=((1.0)*(x10942.value));
IkReal x10941=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10940)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10940)));
IkReal gconst4=(x10939*x10941);
IkReal gconst5=((1.0)*r20*x10941);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10943=((-1.0)*r21);
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(x10943),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
IkReal x10944=((1.0)*(x10946.value));
IkReal x10945=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10944)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10944)));
IkReal gconst4=(x10943*x10945);
IkReal gconst5=((1.0)*r20*x10945);
IkReal x10947=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10951=IKPowWithIntegerCheck(x10947,-1);
if(!x10951.valid){
continue;
}
IkReal x10948=x10951.value;
IkReal x10949=((1.0)*x10948);
IkReal x10950=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10948))+(((-1.0)*x10949*(r10*r10)*(r20*r20)))+(((-1.0)*x10949*(r11*r11)*(r21*r21))));
j4eval[0]=x10950;
j4eval[1]=r12;
j4eval[2]=x10947;
j4eval[3]=IKsign(x10950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10952=(gconst5*r10);
IkReal x10953=(gconst4*r11);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(((((-1.0)*x10952))+x10953)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
CheckValue<IkReal> x10955=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10953*x10953)))+(((-1.0)*(x10952*x10952)))+(((2.0)*x10952*x10953))+(((-1.0)*(r12*r12))))),-1);
if(!x10955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10954.value)+(((1.5707963267949)*(x10955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10956=IKcos(j4);
IkReal x10957=IKsin(j4);
IkReal x10958=(gconst4*r11);
IkReal x10959=(gconst5*r10);
IkReal x10960=(gconst5*r00);
IkReal x10961=(gconst5*r20);
IkReal x10962=((1.0)*x10956);
IkReal x10963=(gconst4*x10956);
IkReal x10964=((1.0)*x10957);
IkReal x10965=(gconst4*x10957);
evalcond[0]=((((-1.0)*x10959*x10962))+((x10956*x10958))+((r12*x10957)));
evalcond[1]=((((-1.0)*x10961*x10964))+(((-1.0)*r22*x10962))+((r21*x10965)));
evalcond[2]=((((-1.0)*x10960*x10964))+((r01*x10965))+(((-1.0)*r02*x10962)));
evalcond[3]=((1.0)+(((-1.0)*x10959*x10964))+(((-1.0)*r12*x10962))+((x10957*x10958)));
evalcond[4]=((((-1.0)*x10961*x10962))+((cj2*sj1))+((r22*x10957))+((cj1*sj2))+((r21*x10963)));
evalcond[5]=(((r02*x10957))+(((-1.0)*x10960*x10962))+((r01*x10963))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10966=((1.0)*gconst5);
CheckValue<IkReal> x10967 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10966))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10967.valid){
continue;
}
CheckValue<IkReal> x10968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10966)))),-1);
if(!x10968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10967.value)+(((1.5707963267949)*(x10968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10969=IKcos(j4);
IkReal x10970=IKsin(j4);
IkReal x10971=(gconst4*r11);
IkReal x10972=(gconst5*r10);
IkReal x10973=(gconst5*r00);
IkReal x10974=(gconst5*r20);
IkReal x10975=((1.0)*x10969);
IkReal x10976=(gconst4*x10969);
IkReal x10977=((1.0)*x10970);
IkReal x10978=(gconst4*x10970);
evalcond[0]=((((-1.0)*x10972*x10975))+((x10969*x10971))+((r12*x10970)));
evalcond[1]=((((-1.0)*r22*x10975))+((r21*x10978))+(((-1.0)*x10974*x10977)));
evalcond[2]=((((-1.0)*x10973*x10977))+((r01*x10978))+(((-1.0)*r02*x10975)));
evalcond[3]=((1.0)+(((-1.0)*x10972*x10977))+((x10970*x10971))+(((-1.0)*r12*x10975)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10970))+((r21*x10976))+(((-1.0)*x10974*x10975)));
evalcond[5]=(((r02*x10970))+(((-1.0)*x10973*x10975))+((r01*x10976))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
CheckValue<IkReal> x10980=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10979.value)+(((1.5707963267949)*(x10980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10981=IKcos(j4);
IkReal x10982=IKsin(j4);
IkReal x10983=(gconst4*r11);
IkReal x10984=(gconst5*r10);
IkReal x10985=(gconst5*r00);
IkReal x10986=(gconst5*r20);
IkReal x10987=((1.0)*x10981);
IkReal x10988=(gconst4*x10981);
IkReal x10989=((1.0)*x10982);
IkReal x10990=(gconst4*x10982);
evalcond[0]=(((r12*x10982))+(((-1.0)*x10984*x10987))+((x10981*x10983)));
evalcond[1]=(((r21*x10990))+(((-1.0)*r22*x10987))+(((-1.0)*x10986*x10989)));
evalcond[2]=(((r01*x10990))+(((-1.0)*x10985*x10989))+(((-1.0)*r02*x10987)));
evalcond[3]=((1.0)+(((-1.0)*x10984*x10989))+(((-1.0)*r12*x10987))+((x10982*x10983)));
evalcond[4]=(((r22*x10982))+((cj2*sj1))+((r21*x10988))+((cj1*sj2))+(((-1.0)*x10986*x10987)));
evalcond[5]=(((r01*x10988))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10985*x10987))+((r02*x10982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10991=((-1.0)*r21);
CheckValue<IkReal> x10994 = IKatan2WithCheck(IkReal(x10991),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10994.valid){
continue;
}
IkReal x10992=((1.0)*(x10994.value));
IkReal x10993=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10992)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10992)));
IkReal gconst4=(x10991*x10993);
IkReal gconst5=((1.0)*r20*x10993);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10995=((-1.0)*r21);
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(x10995),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
IkReal x10996=((1.0)*(x10998.value));
IkReal x10997=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10996)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10996)));
IkReal gconst4=(x10995*x10997);
IkReal gconst5=((1.0)*r20*x10997);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10999=((-1.0)*r21);
CheckValue<IkReal> x11002 = IKatan2WithCheck(IkReal(x10999),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11002.valid){
continue;
}
IkReal x11000=((1.0)*(x11002.value));
IkReal x11001=x9704;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11000)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11000)));
IkReal gconst4=(x10999*x11001);
IkReal gconst5=((1.0)*r20*x11001);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11003=(gconst5*r10);
IkReal x11004=(gconst4*r11);
CheckValue<IkReal> x11005 = IKatan2WithCheck(IkReal((x11003+(((-1.0)*x11004)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11005.valid){
continue;
}
CheckValue<IkReal> x11006=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11003*x11003)+(((-2.0)*x11003*x11004))+(x11004*x11004))),-1);
if(!x11006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11005.value)+(((1.5707963267949)*(x11006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11007=IKsin(j4);
IkReal x11008=IKcos(j4);
IkReal x11009=(gconst4*r11);
IkReal x11010=(gconst5*r10);
IkReal x11011=(gconst4*r01);
IkReal x11012=(gconst5*r00);
IkReal x11013=(gconst4*r21);
IkReal x11014=(gconst5*r20);
IkReal x11015=((1.0)*x11008);
IkReal x11016=((1.0)*x11007);
evalcond[0]=((((-1.0)*r22*x11015))+(((-1.0)*x11014*x11016))+((x11007*x11013)));
evalcond[1]=((((-1.0)*x11012*x11016))+(((-1.0)*r02*x11015))+((x11007*x11011)));
evalcond[2]=(((x11008*x11010))+(((-1.0)*r12*x11016))+(((-1.0)*x11009*x11015)));
evalcond[3]=((1.0)+((x11007*x11009))+(((-1.0)*x11010*x11016))+(((-1.0)*r12*x11015)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11016))+(((-1.0)*x11013*x11015))+((x11008*x11014))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x11011*x11015))+((x11008*x11012))+(((-1.0)*r02*x11016))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11017=((1.0)*gconst5);
CheckValue<IkReal> x11018=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11017)))),-1);
if(!x11018.valid){
continue;
}
CheckValue<IkReal> x11019 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11018.value)))+(x11019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11020=IKsin(j4);
IkReal x11021=IKcos(j4);
IkReal x11022=(gconst4*r11);
IkReal x11023=(gconst5*r10);
IkReal x11024=(gconst4*r01);
IkReal x11025=(gconst5*r00);
IkReal x11026=(gconst4*r21);
IkReal x11027=(gconst5*r20);
IkReal x11028=((1.0)*x11021);
IkReal x11029=((1.0)*x11020);
evalcond[0]=(((x11020*x11026))+(((-1.0)*r22*x11028))+(((-1.0)*x11027*x11029)));
evalcond[1]=((((-1.0)*r02*x11028))+((x11020*x11024))+(((-1.0)*x11025*x11029)));
evalcond[2]=(((x11021*x11023))+(((-1.0)*x11022*x11028))+(((-1.0)*r12*x11029)));
evalcond[3]=((1.0)+((x11020*x11022))+(((-1.0)*x11023*x11029))+(((-1.0)*r12*x11028)));
evalcond[4]=(((cj2*sj1))+((x11021*x11027))+((cj1*sj2))+(((-1.0)*r22*x11029))+(((-1.0)*x11026*x11028)));
evalcond[5]=((((-1.0)*r02*x11029))+((x11021*x11025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11024*x11028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11030 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11030.valid){
continue;
}
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11030.value)+(((1.5707963267949)*(x11031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11032=IKsin(j4);
IkReal x11033=IKcos(j4);
IkReal x11034=(gconst4*r11);
IkReal x11035=(gconst5*r10);
IkReal x11036=(gconst4*r01);
IkReal x11037=(gconst5*r00);
IkReal x11038=(gconst4*r21);
IkReal x11039=(gconst5*r20);
IkReal x11040=((1.0)*x11033);
IkReal x11041=((1.0)*x11032);
evalcond[0]=((((-1.0)*r22*x11040))+(((-1.0)*x11039*x11041))+((x11032*x11038)));
evalcond[1]=((((-1.0)*x11037*x11041))+(((-1.0)*r02*x11040))+((x11032*x11036)));
evalcond[2]=(((x11033*x11035))+(((-1.0)*r12*x11041))+(((-1.0)*x11034*x11040)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11040))+(((-1.0)*x11035*x11041))+((x11032*x11034)));
evalcond[4]=(((cj2*sj1))+((x11033*x11039))+(((-1.0)*r22*x11041))+((cj1*sj2))+(((-1.0)*x11038*x11040)));
evalcond[5]=(((x11033*x11037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11036*x11040))+(((-1.0)*r02*x11041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11042=gconst4*gconst4;
IkReal x11043=gconst5*gconst5;
IkReal x11044=(r10*r21);
IkReal x11045=((1.0)*cj3);
IkReal x11046=(r11*r21);
IkReal x11047=(r11*r20);
IkReal x11048=(r22*sj3);
IkReal x11049=(gconst4*r10);
IkReal x11050=((1.0)*sj3);
IkReal x11051=(cj3*gconst4*gconst5);
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x11043*x11045))+(((-1.0)*x11042*x11045*x11046))+((x11044*x11051))+((x11047*x11051))+(((-1.0)*r12*r22*x11045)))),-1);
if(!x11052.valid){
continue;
}
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal((((gconst5*r11*x11048))+((x11048*x11049)))),IkReal((((gconst4*gconst5*sj3*x11046))+(((-1.0)*gconst5*r20*x11049*x11050))+((sj3*x11042*x11044))+(((-1.0)*x11043*x11047*x11050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11052.value)))+(x11053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11054=IKsin(j4);
IkReal x11055=IKcos(j4);
IkReal x11056=(sj1*sj2);
IkReal x11057=(gconst5*sj3);
IkReal x11058=(cj3*gconst5);
IkReal x11059=(gconst4*r11);
IkReal x11060=((1.0)*cj1);
IkReal x11061=(gconst4*r01);
IkReal x11062=(cj2*sj1);
IkReal x11063=(gconst4*r21);
IkReal x11064=(gconst4*sj3);
IkReal x11065=(cj3*gconst4);
IkReal x11066=(cj2*x11060);
IkReal x11067=((1.0)*x11055);
IkReal x11068=((1.0)*x11054);
IkReal x11069=(cj3*x11054);
IkReal x11070=(cj3*x11055);
evalcond[0]=((((-1.0)*r22*x11067))+((x11054*x11063))+(((-1.0)*gconst5*r20*x11068)));
evalcond[1]=((((-1.0)*r02*x11067))+((x11054*x11061))+(((-1.0)*gconst5*r00*x11068)));
evalcond[2]=((1.0)+((x11054*x11059))+(((-1.0)*r12*x11067))+(((-1.0)*gconst5*r10*x11068)));
evalcond[3]=(((r10*x11064))+((x11059*x11070))+((r12*x11069))+((r11*x11057))+(((-1.0)*r10*x11058*x11067)));
evalcond[4]=((((-1.0)*r12*sj3*x11068))+(((-1.0)*sj3*x11059*x11067))+((r10*x11065))+((r10*x11055*x11057))+((r11*x11058)));
evalcond[5]=(((r20*x11064))+(((-1.0)*r20*x11058*x11067))+((cj1*sj2))+x11062+((r22*x11069))+((x11063*x11070))+((r21*x11057)));
evalcond[6]=((((-1.0)*x11066))+((x11061*x11070))+(((-1.0)*r00*x11058*x11067))+x11056+((r01*x11057))+((r00*x11064))+((r02*x11069)));
evalcond[7]=((((-1.0)*x11066))+((r20*x11065))+(((-1.0)*r22*sj3*x11068))+x11056+((r20*x11055*x11057))+(((-1.0)*sj3*x11063*x11067))+((r21*x11058)));
evalcond[8]=((((-1.0)*sj3*x11061*x11067))+(((-1.0)*r02*sj3*x11068))+((r01*x11058))+(((-1.0)*sj2*x11060))+((r00*x11065))+((r00*x11055*x11057))+(((-1.0)*x11062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11071=((1.0)*gconst5);
CheckValue<IkReal> x11072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11071)))),-1);
if(!x11072.valid){
continue;
}
CheckValue<IkReal> x11073 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11071))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11072.value)))+(x11073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11074=IKsin(j4);
IkReal x11075=IKcos(j4);
IkReal x11076=(sj1*sj2);
IkReal x11077=(gconst5*sj3);
IkReal x11078=(cj3*gconst5);
IkReal x11079=(gconst4*r11);
IkReal x11080=((1.0)*cj1);
IkReal x11081=(gconst4*r01);
IkReal x11082=(cj2*sj1);
IkReal x11083=(gconst4*r21);
IkReal x11084=(gconst4*sj3);
IkReal x11085=(cj3*gconst4);
IkReal x11086=(cj2*x11080);
IkReal x11087=((1.0)*x11075);
IkReal x11088=((1.0)*x11074);
IkReal x11089=(cj3*x11074);
IkReal x11090=(cj3*x11075);
evalcond[0]=(((x11074*x11083))+(((-1.0)*r22*x11087))+(((-1.0)*gconst5*r20*x11088)));
evalcond[1]=((((-1.0)*gconst5*r00*x11088))+(((-1.0)*r02*x11087))+((x11074*x11081)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11088))+(((-1.0)*r12*x11087))+((x11074*x11079)));
evalcond[3]=(((r11*x11077))+(((-1.0)*r10*x11078*x11087))+((x11079*x11090))+((r10*x11084))+((r12*x11089)));
evalcond[4]=((((-1.0)*r12*sj3*x11088))+(((-1.0)*sj3*x11079*x11087))+((r11*x11078))+((r10*x11085))+((r10*x11075*x11077)));
evalcond[5]=(((x11083*x11090))+(((-1.0)*r20*x11078*x11087))+((r21*x11077))+((cj1*sj2))+x11082+((r22*x11089))+((r20*x11084)));
evalcond[6]=(((r00*x11084))+((x11081*x11090))+x11076+(((-1.0)*r00*x11078*x11087))+((r02*x11089))+(((-1.0)*x11086))+((r01*x11077)));
evalcond[7]=(((r20*x11075*x11077))+((r21*x11078))+(((-1.0)*sj3*x11083*x11087))+(((-1.0)*r22*sj3*x11088))+x11076+(((-1.0)*x11086))+((r20*x11085)));
evalcond[8]=((((-1.0)*sj2*x11080))+((r00*x11075*x11077))+(((-1.0)*x11082))+((r00*x11085))+(((-1.0)*sj3*x11081*x11087))+(((-1.0)*r02*sj3*x11088))+((r01*x11078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11091 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11091.valid){
continue;
}
CheckValue<IkReal> x11092=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11091.value)+(((1.5707963267949)*(x11092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11093=IKsin(j4);
IkReal x11094=IKcos(j4);
IkReal x11095=(sj1*sj2);
IkReal x11096=(gconst5*sj3);
IkReal x11097=(cj3*gconst5);
IkReal x11098=(gconst4*r11);
IkReal x11099=((1.0)*cj1);
IkReal x11100=(gconst4*r01);
IkReal x11101=(cj2*sj1);
IkReal x11102=(gconst4*r21);
IkReal x11103=(gconst4*sj3);
IkReal x11104=(cj3*gconst4);
IkReal x11105=(cj2*x11099);
IkReal x11106=((1.0)*x11094);
IkReal x11107=((1.0)*x11093);
IkReal x11108=(cj3*x11093);
IkReal x11109=(cj3*x11094);
evalcond[0]=((((-1.0)*gconst5*r20*x11107))+((x11093*x11102))+(((-1.0)*r22*x11106)));
evalcond[1]=(((x11093*x11100))+(((-1.0)*gconst5*r00*x11107))+(((-1.0)*r02*x11106)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11107))+((x11093*x11098))+(((-1.0)*r12*x11106)));
evalcond[3]=((((-1.0)*r10*x11097*x11106))+((r11*x11096))+((r10*x11103))+((x11098*x11109))+((r12*x11108)));
evalcond[4]=((((-1.0)*r12*sj3*x11107))+((r10*x11094*x11096))+((r11*x11097))+((r10*x11104))+(((-1.0)*sj3*x11098*x11106)));
evalcond[5]=(((x11102*x11109))+((cj1*sj2))+x11101+(((-1.0)*r20*x11097*x11106))+((r20*x11103))+((r22*x11108))+((r21*x11096)));
evalcond[6]=(((r02*x11108))+((x11100*x11109))+x11095+((r01*x11096))+(((-1.0)*x11105))+(((-1.0)*r00*x11097*x11106))+((r00*x11103)));
evalcond[7]=((((-1.0)*sj3*x11102*x11106))+x11095+(((-1.0)*r22*sj3*x11107))+((r20*x11094*x11096))+((r20*x11104))+(((-1.0)*x11105))+((r21*x11097)));
evalcond[8]=((((-1.0)*x11101))+(((-1.0)*r02*sj3*x11107))+((r01*x11097))+(((-1.0)*sj2*x11099))+(((-1.0)*sj3*x11100*x11106))+((r00*x11094*x11096))+((r00*x11104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11110=((-1.0)*r21);
IkReal x11111=((-1.0)*r20);
CheckValue<IkReal> x11113 = IKatan2WithCheck(IkReal(x11110),IkReal(x11111),IKFAST_ATAN2_MAGTHRESH);
if(!x11113.valid){
continue;
}
IkReal x11112=((1.0)*(x11113.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11112)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11111);
rxp0_2=(py*r00);
rxp1_0=(py*x11110);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11112)));
IkReal gconst4=x11110;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11114=((-1.0)*r21);
IkReal x11115=((-1.0)*r20);
CheckValue<IkReal> x11117 = IKatan2WithCheck(IkReal(x11114),IkReal(x11115),IKFAST_ATAN2_MAGTHRESH);
if(!x11117.valid){
continue;
}
IkReal x11116=((1.0)*(x11117.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11116)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11115);
rxp0_2=(py*r00);
rxp1_0=(py*x11114);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11116)));
IkReal gconst4=x11114;
IkReal gconst5=((1.0)*r20);
IkReal x11118=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(((x11118*(r00*r00)))+(((-1.0)*x11118))+(((-1.0)*x11118*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11119=((-1.0)*r21);
IkReal x11120=((-1.0)*r20);
CheckValue<IkReal> x11122 = IKatan2WithCheck(IkReal(x11119),IkReal(x11120),IKFAST_ATAN2_MAGTHRESH);
if(!x11122.valid){
continue;
}
IkReal x11121=((1.0)*(x11122.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11121)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11120);
rxp0_2=(py*r00);
rxp1_0=(py*x11119);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11121)));
IkReal gconst4=x11119;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11123=((-1.0)*r21);
IkReal x11124=((-1.0)*r20);
CheckValue<IkReal> x11126 = IKatan2WithCheck(IkReal(x11123),IkReal(x11124),IKFAST_ATAN2_MAGTHRESH);
if(!x11126.valid){
continue;
}
IkReal x11125=((1.0)*(x11126.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11125)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11124);
rxp0_2=(py*r00);
rxp1_0=(py*x11123);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11125)));
IkReal gconst4=x11123;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11127=((-1.0)*r21);
IkReal x11128=((-1.0)*r20);
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal(x11127),IkReal(x11128),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
IkReal x11129=((1.0)*(x11130.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11129)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11128);
rxp0_2=(py*r00);
rxp1_0=(py*x11127);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11129)));
IkReal gconst4=x11127;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11131=((-1.0)*r21);
IkReal x11132=((-1.0)*r20);
CheckValue<IkReal> x11134 = IKatan2WithCheck(IkReal(x11131),IkReal(x11132),IKFAST_ATAN2_MAGTHRESH);
if(!x11134.valid){
continue;
}
IkReal x11133=((1.0)*(x11134.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11133)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11132);
rxp0_2=(py*r00);
rxp1_0=(py*x11131);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11133)));
IkReal gconst4=x11131;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11137=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11137.valid){
continue;
}
IkReal x11135=x11137.value;
IkReal x11136=(cj0*x11135);
cj4array[0]=((((-1.0)*cj1*cj2*x11136))+((sj1*sj2*x11136)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11138=IKsin(j4);
IkReal x11139=IKcos(j4);
IkReal x11140=(gconst4*x11138);
IkReal x11141=((1.0)*x11139);
IkReal x11142=((1.0)*gconst5*x11138);
evalcond[0]=(r12*x11138);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x11141)));
evalcond[2]=(((r21*x11140))+(((-1.0)*r20*x11142)));
evalcond[3]=(((r01*x11140))+(((-1.0)*r00*x11142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst5*r20*x11141))+((gconst4*r21*x11139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11145=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11145.valid){
continue;
}
IkReal x11143=x11145.value;
IkReal x11144=((1.0)*x11143);
cj4array[0]=((((-1.0)*cj1*sj2*x11144))+(((-1.0)*cj2*sj1*x11144)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11146=IKsin(j4);
IkReal x11147=IKcos(j4);
IkReal x11148=(gconst4*r01);
IkReal x11149=((1.0)*cj0);
IkReal x11150=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11146);
evalcond[1]=((((-1.0)*r12*x11147))+(((-1.0)*x11149)));
evalcond[2]=((((-1.0)*gconst5*r20*x11146))+((gconst4*r21*x11146)));
evalcond[3]=(((x11146*x11148))+(((-1.0)*x11146*x11150)));
evalcond[4]=(((x11147*x11148))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x11149))+(((-1.0)*x11147*x11150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11151=IKPowWithIntegerCheck(r12,-1);
if(!x11151.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11151.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11152=IKsin(j4);
IkReal x11153=IKcos(j4);
IkReal x11154=(gconst4*r01);
IkReal x11155=(gconst4*r21);
IkReal x11156=((1.0)*gconst5*r00);
IkReal x11157=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11152);
evalcond[1]=(((x11152*x11155))+(((-1.0)*x11152*x11157)));
evalcond[2]=(((x11152*x11154))+(((-1.0)*x11152*x11156)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11153*x11157))+((x11153*x11155)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x11153*x11156))+((cj0*cj1*cj2))+((x11153*x11154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11158=((-1.0)*r21);
IkReal x11159=((-1.0)*r20);
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(x11158),IkReal(x11159),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
IkReal x11160=((1.0)*(x11161.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11160)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11159);
rxp0_2=(py*r00);
rxp1_0=(py*x11158);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11160)));
IkReal gconst4=x11158;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11162=((-1.0)*r21);
IkReal x11163=((-1.0)*r20);
CheckValue<IkReal> x11165 = IKatan2WithCheck(IkReal(x11162),IkReal(x11163),IKFAST_ATAN2_MAGTHRESH);
if(!x11165.valid){
continue;
}
IkReal x11164=((1.0)*(x11165.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11164)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11163);
rxp0_2=(py*r00);
rxp1_0=(py*x11162);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11164)));
IkReal gconst4=x11162;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11166=((-1.0)*r21);
IkReal x11167=((-1.0)*r20);
CheckValue<IkReal> x11169 = IKatan2WithCheck(IkReal(x11166),IkReal(x11167),IKFAST_ATAN2_MAGTHRESH);
if(!x11169.valid){
continue;
}
IkReal x11168=((1.0)*(x11169.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11168)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11167);
rxp0_2=(py*r00);
rxp1_0=(py*x11166);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11168)));
IkReal gconst4=x11166;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11172=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11172.valid){
continue;
}
IkReal x11170=x11172.value;
IkReal x11171=(cj0*x11170);
cj4array[0]=((((-1.0)*cj1*cj2*x11171))+((sj1*sj2*x11171)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11173=IKsin(j4);
IkReal x11174=IKcos(j4);
IkReal x11175=(gconst4*x11173);
IkReal x11176=((1.0)*x11174);
IkReal x11177=((1.0)*gconst5*x11173);
evalcond[0]=((-1.0)*r12*x11173);
evalcond[1]=((((-1.0)*r12*x11176))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11177))+((r21*x11175)));
evalcond[3]=((((-1.0)*r00*x11177))+((r01*x11175)));
evalcond[4]=(((gconst5*r20*x11174))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11180=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11180.valid){
continue;
}
IkReal x11178=x11180.value;
IkReal x11179=((1.0)*x11178);
cj4array[0]=((((-1.0)*cj2*sj1*x11179))+(((-1.0)*cj1*sj2*x11179)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11181=IKsin(j4);
IkReal x11182=IKcos(j4);
IkReal x11183=(gconst5*r00);
IkReal x11184=(gconst4*r01);
IkReal x11185=((1.0)*cj0);
IkReal x11186=((1.0)*x11181);
IkReal x11187=((1.0)*x11182);
evalcond[0]=((-1.0)*r12*x11181);
evalcond[1]=((((-1.0)*x11185))+(((-1.0)*r12*x11187)));
evalcond[2]=(((gconst4*r21*x11181))+(((-1.0)*gconst5*r20*x11186)));
evalcond[3]=((((-1.0)*x11183*x11186))+((x11181*x11184)));
evalcond[4]=((((-1.0)*x11184*x11187))+((x11182*x11183))+(((-1.0)*sj1*sj2*x11185))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11188=IKPowWithIntegerCheck(r12,-1);
if(!x11188.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11188.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11189=IKsin(j4);
IkReal x11190=IKcos(j4);
IkReal x11191=(gconst5*r00);
IkReal x11192=(gconst5*r20);
IkReal x11193=(gconst4*r01);
IkReal x11194=(gconst4*r21);
IkReal x11195=((1.0)*x11189);
IkReal x11196=((1.0)*x11190);
evalcond[0]=((-1.0)*r12*x11189);
evalcond[1]=(((x11189*x11194))+(((-1.0)*x11192*x11195)));
evalcond[2]=((((-1.0)*x11191*x11195))+((x11189*x11193)));
evalcond[3]=(((cj2*sj1))+((x11190*x11192))+((cj1*sj2))+(((-1.0)*x11194*x11196)));
evalcond[4]=(((x11190*x11191))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x11193*x11196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11197=((-1.0)*r21);
IkReal x11198=((-1.0)*r20);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(x11198),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11199=((1.0)*(x11200.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11199)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11198);
rxp0_2=(py*r00);
rxp1_0=(py*x11197);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=x11197;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11201=((-1.0)*r21);
IkReal x11202=((-1.0)*r20);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(x11201),IkReal(x11202),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11203=((1.0)*(x11204.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11203)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11202);
rxp0_2=(py*r00);
rxp1_0=(py*x11201);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11203)));
IkReal gconst4=x11201;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11205=((-1.0)*r21);
IkReal x11206=((-1.0)*r20);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(x11205),IkReal(x11206),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11207=((1.0)*(x11208.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11207)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11206);
rxp0_2=(py*r00);
rxp1_0=(py*x11205);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11207)));
IkReal gconst4=x11205;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11211=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11211.valid){
continue;
}
IkReal x11209=x11211.value;
IkReal x11210=((1.0)*cj0*x11209);
cj4array[0]=((((-1.0)*cj2*sj1*x11210))+(((-1.0)*cj1*sj2*x11210)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11212=IKsin(j4);
IkReal x11213=IKcos(j4);
IkReal x11214=(gconst4*x11212);
IkReal x11215=((1.0)*x11213);
IkReal x11216=((1.0)*gconst5*x11212);
evalcond[0]=((-1.0)*r12*x11212);
evalcond[1]=((((-1.0)*r12*x11215))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11214))+(((-1.0)*r20*x11216)));
evalcond[3]=((((-1.0)*r00*x11216))+((r01*x11214)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11215))+((gconst5*r20*x11213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11218=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11218.valid){
continue;
}
IkReal x11217=x11218.value;
cj4array[0]=(((cj1*cj2*x11217))+(((-1.0)*sj1*sj2*x11217)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11219=IKsin(j4);
IkReal x11220=IKcos(j4);
IkReal x11221=(gconst5*r00);
IkReal x11222=(gconst4*r01);
IkReal x11223=((1.0)*x11219);
IkReal x11224=((1.0)*x11220);
evalcond[0]=((-1.0)*r12*x11219);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x11224)));
evalcond[2]=((((-1.0)*gconst5*r20*x11223))+((gconst4*r21*x11219)));
evalcond[3]=(((x11219*x11222))+(((-1.0)*x11221*x11223)));
evalcond[4]=(((x11220*x11221))+((cj0*cj2*sj1))+(((-1.0)*x11222*x11224))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11225=IKPowWithIntegerCheck(r12,-1);
if(!x11225.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11225.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11226=IKsin(j4);
IkReal x11227=IKcos(j4);
IkReal x11228=(gconst5*r00);
IkReal x11229=(gconst5*r20);
IkReal x11230=((1.0)*x11226);
IkReal x11231=(gconst4*x11226);
IkReal x11232=((1.0)*gconst4*x11227);
evalcond[0]=((-1.0)*r12*x11226);
evalcond[1]=((((-1.0)*x11229*x11230))+((r21*x11231)));
evalcond[2]=((((-1.0)*x11228*x11230))+((r01*x11231)));
evalcond[3]=(((x11227*x11229))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11232)));
evalcond[4]=(((x11227*x11228))+(((-1.0)*r01*x11232))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11233=((-1.0)*r21);
IkReal x11234=((-1.0)*r20);
CheckValue<IkReal> x11236 = IKatan2WithCheck(IkReal(x11233),IkReal(x11234),IKFAST_ATAN2_MAGTHRESH);
if(!x11236.valid){
continue;
}
IkReal x11235=((1.0)*(x11236.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11235)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11234);
rxp0_2=(py*r00);
rxp1_0=(py*x11233);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11235)));
IkReal gconst4=x11233;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11237=((-1.0)*r21);
IkReal x11238=((-1.0)*r20);
CheckValue<IkReal> x11240 = IKatan2WithCheck(IkReal(x11237),IkReal(x11238),IKFAST_ATAN2_MAGTHRESH);
if(!x11240.valid){
continue;
}
IkReal x11239=((1.0)*(x11240.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11239)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11238);
rxp0_2=(py*r00);
rxp1_0=(py*x11237);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11239)));
IkReal gconst4=x11237;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11241=((-1.0)*r21);
IkReal x11242=((-1.0)*r20);
CheckValue<IkReal> x11244 = IKatan2WithCheck(IkReal(x11241),IkReal(x11242),IKFAST_ATAN2_MAGTHRESH);
if(!x11244.valid){
continue;
}
IkReal x11243=((1.0)*(x11244.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11243)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11242);
rxp0_2=(py*r00);
rxp1_0=(py*x11241);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst4=x11241;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11247=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11247.valid){
continue;
}
IkReal x11245=x11247.value;
IkReal x11246=((1.0)*cj0*x11245);
cj4array[0]=((((-1.0)*cj1*sj2*x11246))+(((-1.0)*cj2*sj1*x11246)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11248=IKsin(j4);
IkReal x11249=IKcos(j4);
IkReal x11250=(gconst4*x11248);
IkReal x11251=((1.0)*x11249);
IkReal x11252=((1.0)*gconst5*x11248);
evalcond[0]=(r12*x11248);
evalcond[1]=((((-1.0)*r12*x11251))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11252))+((r21*x11250)));
evalcond[3]=((((-1.0)*r00*x11252))+((r01*x11250)));
evalcond[4]=((((-1.0)*gconst5*r20*x11251))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11254=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11254.valid){
continue;
}
IkReal x11253=x11254.value;
cj4array[0]=(((cj1*cj2*x11253))+(((-1.0)*sj1*sj2*x11253)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11255=IKsin(j4);
IkReal x11256=IKcos(j4);
IkReal x11257=(gconst4*r01);
IkReal x11258=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11255);
evalcond[1]=((((-1.0)*r12*x11256))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11255))+((gconst4*r21*x11255)));
evalcond[3]=(((x11255*x11257))+(((-1.0)*x11255*x11258)));
evalcond[4]=(((x11256*x11257))+(((-1.0)*x11256*x11258))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11259=IKPowWithIntegerCheck(r12,-1);
if(!x11259.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11259.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11260=IKsin(j4);
IkReal x11261=IKcos(j4);
IkReal x11262=((1.0)*gconst5*r00);
IkReal x11263=(gconst4*x11260);
IkReal x11264=(gconst4*x11261);
IkReal x11265=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11260);
evalcond[1]=((((-1.0)*x11260*x11265))+((r21*x11263)));
evalcond[2]=((((-1.0)*x11260*x11262))+((r01*x11263)));
evalcond[3]=(((r21*x11264))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11261*x11265)));
evalcond[4]=((((-1.0)*x11261*x11262))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x11264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(r12,-1);
if(!x11267.valid){
continue;
}
IkReal x11266=x11267.value;
CheckValue<IkReal> x11268=IKPowWithIntegerCheck(sj3,-1);
if(!x11268.valid){
continue;
}
if( IKabs((x11266*(x11268.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11266)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11266*(x11268.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11266))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11266*(x11268.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11266));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11269=IKsin(j4);
IkReal x11270=IKcos(j4);
IkReal x11271=((1.0)*r12);
IkReal x11272=(cj2*sj0);
IkReal x11273=(sj1*sj2);
IkReal x11274=(gconst4*sj3);
IkReal x11275=(cj1*cj2);
IkReal x11276=(gconst4*r01);
IkReal x11277=(cj2*sj1);
IkReal x11278=(gconst4*r21);
IkReal x11279=((1.0)*gconst5);
IkReal x11280=(gconst5*sj3);
IkReal x11281=(cj3*gconst5);
IkReal x11282=(cj3*gconst4);
IkReal x11283=(cj1*sj2);
IkReal x11284=((1.0)*cj0);
IkReal x11285=(cj3*x11270);
IkReal x11286=((1.0)*x11270);
IkReal x11287=(x11270*x11280);
evalcond[0]=((((-1.0)*x11284))+(((-1.0)*x11270*x11271)));
evalcond[1]=((((-1.0)*r20*x11269*x11279))+((x11269*x11278)));
evalcond[2]=(sj0+(((-1.0)*r00*x11269*x11279))+((x11269*x11276)));
evalcond[3]=(((sj1*x11272))+(((-1.0)*sj3*x11269*x11271))+((sj0*x11283)));
evalcond[4]=(((cj1*x11272))+((cj3*r12*x11269))+(((-1.0)*sj0*x11273)));
evalcond[5]=(x11283+x11277+((r21*x11280))+((r20*x11274))+((x11278*x11285))+(((-1.0)*r20*x11279*x11285)));
evalcond[6]=(x11273+(((-1.0)*x11275))+((r21*x11281))+(((-1.0)*r21*x11274*x11286))+((r20*x11282))+((r20*x11287)));
evalcond[7]=(((cj0*x11283))+(((-1.0)*r01*x11274*x11286))+((r00*x11287))+((r00*x11282))+((cj0*x11277))+((r01*x11281)));
evalcond[8]=(((r00*x11274))+(((-1.0)*r00*x11279*x11285))+((x11276*x11285))+(((-1.0)*x11273*x11284))+((cj0*x11275))+((r01*x11280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11288=((1.0)*gconst5);
CheckValue<IkReal> x11289=IKPowWithIntegerCheck(((((-1.0)*r00*x11288))+((gconst4*r01))),-1);
if(!x11289.valid){
continue;
}
CheckValue<IkReal> x11290=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11288))),-1);
if(!x11290.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11289.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11290.value)*(((((-1.0)*r21*sj3*x11288))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11289.value)))+IKsqr(((x11290.value)*(((((-1.0)*r21*sj3*x11288))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11289.value)), ((x11290.value)*(((((-1.0)*r21*sj3*x11288))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11291=IKsin(j4);
IkReal x11292=IKcos(j4);
IkReal x11293=((1.0)*r12);
IkReal x11294=(cj2*sj0);
IkReal x11295=(sj1*sj2);
IkReal x11296=(gconst4*sj3);
IkReal x11297=(cj1*cj2);
IkReal x11298=(gconst4*r01);
IkReal x11299=(cj2*sj1);
IkReal x11300=(gconst4*r21);
IkReal x11301=((1.0)*gconst5);
IkReal x11302=(gconst5*sj3);
IkReal x11303=(cj3*gconst5);
IkReal x11304=(cj3*gconst4);
IkReal x11305=(cj1*sj2);
IkReal x11306=((1.0)*cj0);
IkReal x11307=(cj3*x11292);
IkReal x11308=((1.0)*x11292);
IkReal x11309=(x11292*x11302);
evalcond[0]=((((-1.0)*x11306))+(((-1.0)*x11292*x11293)));
evalcond[1]=((((-1.0)*r20*x11291*x11301))+((x11291*x11300)));
evalcond[2]=(sj0+(((-1.0)*r00*x11291*x11301))+((x11291*x11298)));
evalcond[3]=(((sj0*x11305))+(((-1.0)*sj3*x11291*x11293))+((sj1*x11294)));
evalcond[4]=((((-1.0)*sj0*x11295))+((cj1*x11294))+((cj3*r12*x11291)));
evalcond[5]=((((-1.0)*r20*x11301*x11307))+x11299+x11305+((x11300*x11307))+((r20*x11296))+((r21*x11302)));
evalcond[6]=(((r20*x11309))+((r20*x11304))+(((-1.0)*r21*x11296*x11308))+x11295+(((-1.0)*x11297))+((r21*x11303)));
evalcond[7]=((((-1.0)*r01*x11296*x11308))+((cj0*x11299))+((r01*x11303))+((r00*x11304))+((r00*x11309))+((cj0*x11305)));
evalcond[8]=(((cj0*x11297))+((r01*x11302))+(((-1.0)*r00*x11301*x11307))+(((-1.0)*x11295*x11306))+((x11298*x11307))+((r00*x11296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11310=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(r12,-1);
if(!x11311.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11310.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11311.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11310.value)))+IKsqr(((-1.0)*cj0*(x11311.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11310.value)), ((-1.0)*cj0*(x11311.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11312=IKsin(j4);
IkReal x11313=IKcos(j4);
IkReal x11314=((1.0)*r12);
IkReal x11315=(cj2*sj0);
IkReal x11316=(sj1*sj2);
IkReal x11317=(gconst4*sj3);
IkReal x11318=(cj1*cj2);
IkReal x11319=(gconst4*r01);
IkReal x11320=(cj2*sj1);
IkReal x11321=(gconst4*r21);
IkReal x11322=((1.0)*gconst5);
IkReal x11323=(gconst5*sj3);
IkReal x11324=(cj3*gconst5);
IkReal x11325=(cj3*gconst4);
IkReal x11326=(cj1*sj2);
IkReal x11327=((1.0)*cj0);
IkReal x11328=(cj3*x11313);
IkReal x11329=((1.0)*x11313);
IkReal x11330=(x11313*x11323);
evalcond[0]=((((-1.0)*x11313*x11314))+(((-1.0)*x11327)));
evalcond[1]=((((-1.0)*r20*x11312*x11322))+((x11312*x11321)));
evalcond[2]=(sj0+(((-1.0)*r00*x11312*x11322))+((x11312*x11319)));
evalcond[3]=(((sj0*x11326))+((sj1*x11315))+(((-1.0)*sj3*x11312*x11314)));
evalcond[4]=(((cj1*x11315))+(((-1.0)*sj0*x11316))+((cj3*r12*x11312)));
evalcond[5]=((((-1.0)*r20*x11322*x11328))+((x11321*x11328))+x11320+x11326+((r21*x11323))+((r20*x11317)));
evalcond[6]=((((-1.0)*r21*x11317*x11329))+x11316+((r20*x11330))+((r21*x11324))+(((-1.0)*x11318))+((r20*x11325)));
evalcond[7]=((((-1.0)*r01*x11317*x11329))+((cj0*x11320))+((cj0*x11326))+((r00*x11330))+((r00*x11325))+((r01*x11324)));
evalcond[8]=((((-1.0)*r00*x11322*x11328))+((cj0*x11318))+((x11319*x11328))+((r00*x11317))+((r01*x11323))+(((-1.0)*x11316*x11327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11331=((1.0)*gconst5);
CheckValue<IkReal> x11332 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11331))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x11331))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11332.valid){
continue;
}
CheckValue<IkReal> x11333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11331))+(((-1.0)*gconst4*r20)))),-1);
if(!x11333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11332.value)+(((1.5707963267949)*(x11333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11334=IKsin(j4);
IkReal x11335=IKcos(j4);
IkReal x11336=(gconst4*r11);
IkReal x11337=(cj2*sj0);
IkReal x11338=(sj1*sj2);
IkReal x11339=(gconst4*sj3);
IkReal x11340=(gconst5*r10);
IkReal x11341=(cj1*cj2);
IkReal x11342=(gconst4*r01);
IkReal x11343=(cj2*sj1);
IkReal x11344=(gconst4*r21);
IkReal x11345=(gconst5*r00);
IkReal x11346=(gconst5*sj3);
IkReal x11347=(cj3*gconst5);
IkReal x11348=(cj3*gconst4);
IkReal x11349=(cj1*sj2);
IkReal x11350=((1.0)*cj0);
IkReal x11351=((1.0)*x11335);
IkReal x11352=((1.0)*x11334);
IkReal x11353=(cj3*x11334);
IkReal x11354=(cj3*x11335);
IkReal x11355=(x11335*x11346);
evalcond[0]=((((-1.0)*gconst5*r20*x11352))+((x11334*x11344))+(((-1.0)*r22*x11351)));
evalcond[1]=(sj0+((x11334*x11342))+(((-1.0)*r02*x11351))+(((-1.0)*x11345*x11352)));
evalcond[2]=((((-1.0)*r12*x11351))+((x11334*x11336))+(((-1.0)*x11340*x11352))+(((-1.0)*x11350)));
evalcond[3]=(x11343+x11349+((r20*x11339))+((x11344*x11354))+(((-1.0)*r20*x11347*x11351))+((r21*x11346))+((r22*x11353)));
evalcond[4]=(x11338+((r20*x11348))+((r20*x11355))+(((-1.0)*r22*sj3*x11352))+(((-1.0)*x11341))+((r21*x11347))+(((-1.0)*r21*x11339*x11351)));
evalcond[5]=((((-1.0)*r01*x11339*x11351))+((cj0*x11349))+((cj0*x11343))+((r00*x11348))+(((-1.0)*r02*sj3*x11352))+((r01*x11347))+((sj3*x11335*x11345)));
evalcond[6]=(((r02*x11353))+(((-1.0)*x11338*x11350))+((x11342*x11354))+((cj0*x11341))+(((-1.0)*cj3*x11345*x11351))+((r00*x11339))+((r01*x11346)));
evalcond[7]=(((r11*x11347))+((r10*x11348))+(((-1.0)*sj3*x11336*x11351))+((sj0*x11349))+((sj1*x11337))+((sj3*x11335*x11340))+(((-1.0)*r12*sj3*x11352)));
evalcond[8]=((((-1.0)*cj3*x11340*x11351))+((x11336*x11354))+((r11*x11346))+((r12*x11353))+((r10*x11339))+(((-1.0)*sj0*x11338))+((cj1*x11337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11356=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11356.valid){
continue;
}
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11356.value)))+(x11357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11358=IKsin(j4);
IkReal x11359=IKcos(j4);
IkReal x11360=(gconst4*r11);
IkReal x11361=(cj2*sj0);
IkReal x11362=(sj1*sj2);
IkReal x11363=(gconst4*sj3);
IkReal x11364=(gconst5*r10);
IkReal x11365=(cj1*cj2);
IkReal x11366=(gconst4*r01);
IkReal x11367=(cj2*sj1);
IkReal x11368=(gconst4*r21);
IkReal x11369=(gconst5*r00);
IkReal x11370=(gconst5*sj3);
IkReal x11371=(cj3*gconst5);
IkReal x11372=(cj3*gconst4);
IkReal x11373=(cj1*sj2);
IkReal x11374=((1.0)*cj0);
IkReal x11375=((1.0)*x11359);
IkReal x11376=((1.0)*x11358);
IkReal x11377=(cj3*x11358);
IkReal x11378=(cj3*x11359);
IkReal x11379=(x11359*x11370);
evalcond[0]=((((-1.0)*r22*x11375))+((x11358*x11368))+(((-1.0)*gconst5*r20*x11376)));
evalcond[1]=(sj0+(((-1.0)*x11369*x11376))+((x11358*x11366))+(((-1.0)*r02*x11375)));
evalcond[2]=((((-1.0)*x11374))+((x11358*x11360))+(((-1.0)*r12*x11375))+(((-1.0)*x11364*x11376)));
evalcond[3]=(((r21*x11370))+x11373+x11367+((r22*x11377))+((x11368*x11378))+(((-1.0)*r20*x11371*x11375))+((r20*x11363)));
evalcond[4]=(((r20*x11372))+((r20*x11379))+(((-1.0)*x11365))+((r21*x11371))+(((-1.0)*r22*sj3*x11376))+x11362+(((-1.0)*r21*x11363*x11375)));
evalcond[5]=(((r00*x11372))+((r01*x11371))+((sj3*x11359*x11369))+((cj0*x11367))+((cj0*x11373))+(((-1.0)*r01*x11363*x11375))+(((-1.0)*r02*sj3*x11376)));
evalcond[6]=(((r00*x11363))+(((-1.0)*x11362*x11374))+((r01*x11370))+(((-1.0)*cj3*x11369*x11375))+((x11366*x11378))+((r02*x11377))+((cj0*x11365)));
evalcond[7]=(((sj0*x11373))+((sj1*x11361))+(((-1.0)*r12*sj3*x11376))+(((-1.0)*sj3*x11360*x11375))+((r10*x11372))+((sj3*x11359*x11364))+((r11*x11371)));
evalcond[8]=((((-1.0)*sj0*x11362))+((cj1*x11361))+((r12*x11377))+((r10*x11363))+(((-1.0)*cj3*x11364*x11375))+((r11*x11370))+((x11360*x11378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11380=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11380.valid){
continue;
}
CheckValue<IkReal> x11381 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11380.value)))+(x11381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11382=IKsin(j4);
IkReal x11383=IKcos(j4);
IkReal x11384=(gconst4*r11);
IkReal x11385=(cj2*sj0);
IkReal x11386=(sj1*sj2);
IkReal x11387=(gconst4*sj3);
IkReal x11388=(gconst5*r10);
IkReal x11389=(cj1*cj2);
IkReal x11390=(gconst4*r01);
IkReal x11391=(cj2*sj1);
IkReal x11392=(gconst4*r21);
IkReal x11393=(gconst5*r00);
IkReal x11394=(gconst5*sj3);
IkReal x11395=(cj3*gconst5);
IkReal x11396=(cj3*gconst4);
IkReal x11397=(cj1*sj2);
IkReal x11398=((1.0)*cj0);
IkReal x11399=((1.0)*x11383);
IkReal x11400=((1.0)*x11382);
IkReal x11401=(cj3*x11382);
IkReal x11402=(cj3*x11383);
IkReal x11403=(x11383*x11394);
evalcond[0]=(((x11382*x11392))+(((-1.0)*gconst5*r20*x11400))+(((-1.0)*r22*x11399)));
evalcond[1]=(((x11382*x11390))+sj0+(((-1.0)*r02*x11399))+(((-1.0)*x11393*x11400)));
evalcond[2]=((((-1.0)*x11398))+((x11382*x11384))+(((-1.0)*r12*x11399))+(((-1.0)*x11388*x11400)));
evalcond[3]=((((-1.0)*r20*x11395*x11399))+((x11392*x11402))+((r22*x11401))+((r20*x11387))+x11397+x11391+((r21*x11394)));
evalcond[4]=((((-1.0)*r22*sj3*x11400))+((r20*x11396))+x11386+((r20*x11403))+(((-1.0)*r21*x11387*x11399))+((r21*x11395))+(((-1.0)*x11389)));
evalcond[5]=(((r00*x11396))+((r01*x11395))+(((-1.0)*r01*x11387*x11399))+(((-1.0)*r02*sj3*x11400))+((sj3*x11383*x11393))+((cj0*x11391))+((cj0*x11397)));
evalcond[6]=((((-1.0)*cj3*x11393*x11399))+((cj0*x11389))+((r01*x11394))+((r02*x11401))+((r00*x11387))+(((-1.0)*x11386*x11398))+((x11390*x11402)));
evalcond[7]=(((sj3*x11383*x11388))+(((-1.0)*r12*sj3*x11400))+((r11*x11395))+((sj1*x11385))+((sj0*x11397))+(((-1.0)*sj3*x11384*x11399))+((r10*x11396)));
evalcond[8]=(((r10*x11387))+((r12*x11401))+((r11*x11394))+((x11384*x11402))+(((-1.0)*cj3*x11388*x11399))+(((-1.0)*sj0*x11386))+((cj1*x11385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11405 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11405)==0){
continue;
}
IkReal x11404=pow(x11405,-0.5);
CheckValue<IkReal> x11406 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11406.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11406.value));
IkReal gconst7=((-1.0)*r01*x11404);
IkReal gconst8=(r00*x11404);
CheckValue<IkReal> x11407 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11407.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11407.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11410 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11410.valid){
continue;
}
IkReal x11408=((-1.0)*(x11410.value));
IkReal x11409=x11404;
sj5=gconst7;
cj5=gconst8;
j5=x11408;
IkReal gconst6=x11408;
IkReal gconst7=((-1.0)*r01*x11409);
IkReal gconst8=(r00*x11409);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11411=((1.0)*gconst8);
CheckValue<IkReal> x11412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11411))+(((-1.0)*gconst7*r20)))),-1);
if(!x11412.valid){
continue;
}
CheckValue<IkReal> x11413 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11411))+((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x11411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11412.value)))+(x11413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11414=IKsin(j4);
IkReal x11415=IKcos(j4);
IkReal x11416=(gconst7*sj3);
IkReal x11417=(cj3*gconst8);
IkReal x11418=(cj2*sj0);
IkReal x11419=(cj3*gconst7);
IkReal x11420=(sj1*sj2);
IkReal x11421=(cj1*cj2);
IkReal x11422=(cj2*sj1);
IkReal x11423=((1.0)*cj0);
IkReal x11424=(gconst8*sj3);
IkReal x11425=(cj1*sj2);
IkReal x11426=((1.0)*x11415);
IkReal x11427=((1.0)*x11414);
IkReal x11428=(cj3*x11414);
IkReal x11429=(gconst7*x11414);
IkReal x11430=(x11415*x11424);
evalcond[0]=(((r21*x11429))+(((-1.0)*r22*x11426))+(((-1.0)*gconst8*r20*x11427)));
evalcond[1]=(sj0+(((-1.0)*r02*x11426))+((r01*x11429))+(((-1.0)*gconst8*r00*x11427)));
evalcond[2]=((((-1.0)*gconst8*r10*x11427))+(((-1.0)*r12*x11426))+((r11*x11429))+(((-1.0)*x11423)));
evalcond[3]=(x11422+x11425+((r21*x11415*x11419))+(((-1.0)*r20*x11417*x11426))+((r21*x11424))+((r22*x11428))+((r20*x11416)));
evalcond[4]=(((r20*x11430))+x11420+((r21*x11417))+(((-1.0)*r21*x11416*x11426))+(((-1.0)*x11421))+((r20*x11419))+(((-1.0)*r22*sj3*x11427)));
evalcond[5]=(((r01*x11417))+(((-1.0)*r01*x11416*x11426))+((r00*x11419))+((cj0*x11422))+((cj0*x11425))+((r00*x11430))+(((-1.0)*r02*sj3*x11427)));
evalcond[6]=(((r02*x11428))+((r00*x11416))+((cj0*x11421))+(((-1.0)*x11420*x11423))+((r01*x11424))+((r01*x11415*x11419))+(((-1.0)*r00*x11417*x11426)));
evalcond[7]=(((r10*x11419))+((r10*x11430))+((sj0*x11425))+(((-1.0)*r12*sj3*x11427))+(((-1.0)*r11*x11416*x11426))+((sj1*x11418))+((r11*x11417)));
evalcond[8]=(((r11*x11415*x11419))+((r10*x11416))+(((-1.0)*sj0*x11420))+((cj1*x11418))+((r11*x11424))+(((-1.0)*r10*x11417*x11426))+((r12*x11428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11431 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11431.valid){
continue;
}
CheckValue<IkReal> x11432=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x11432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11431.value)+(((1.5707963267949)*(x11432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11433=IKsin(j4);
IkReal x11434=IKcos(j4);
IkReal x11435=(gconst7*sj3);
IkReal x11436=(cj3*gconst8);
IkReal x11437=(cj2*sj0);
IkReal x11438=(cj3*gconst7);
IkReal x11439=(sj1*sj2);
IkReal x11440=(cj1*cj2);
IkReal x11441=(cj2*sj1);
IkReal x11442=((1.0)*cj0);
IkReal x11443=(gconst8*sj3);
IkReal x11444=(cj1*sj2);
IkReal x11445=((1.0)*x11434);
IkReal x11446=((1.0)*x11433);
IkReal x11447=(cj3*x11433);
IkReal x11448=(gconst7*x11433);
IkReal x11449=(x11434*x11443);
evalcond[0]=((((-1.0)*gconst8*r20*x11446))+(((-1.0)*r22*x11445))+((r21*x11448)));
evalcond[1]=((((-1.0)*gconst8*r00*x11446))+sj0+(((-1.0)*r02*x11445))+((r01*x11448)));
evalcond[2]=((((-1.0)*r12*x11445))+((r11*x11448))+(((-1.0)*x11442))+(((-1.0)*gconst8*r10*x11446)));
evalcond[3]=(((r20*x11435))+x11441+x11444+((r21*x11434*x11438))+(((-1.0)*r20*x11436*x11445))+((r22*x11447))+((r21*x11443)));
evalcond[4]=((((-1.0)*r21*x11435*x11445))+((r20*x11438))+(((-1.0)*x11440))+x11439+(((-1.0)*r22*sj3*x11446))+((r21*x11436))+((r20*x11449)));
evalcond[5]=((((-1.0)*r01*x11435*x11445))+((r00*x11449))+(((-1.0)*r02*sj3*x11446))+((cj0*x11441))+((cj0*x11444))+((r01*x11436))+((r00*x11438)));
evalcond[6]=(((r01*x11434*x11438))+(((-1.0)*x11439*x11442))+(((-1.0)*r00*x11436*x11445))+((cj0*x11440))+((r00*x11435))+((r02*x11447))+((r01*x11443)));
evalcond[7]=((((-1.0)*r11*x11435*x11445))+((r10*x11438))+((sj1*x11437))+((r10*x11449))+(((-1.0)*r12*sj3*x11446))+((r11*x11436))+((sj0*x11444)));
evalcond[8]=(((r12*x11447))+((r10*x11435))+((r11*x11443))+(((-1.0)*sj0*x11439))+((cj1*x11437))+(((-1.0)*r10*x11436*x11445))+((r11*x11434*x11438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11451 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11451)==0){
continue;
}
IkReal x11450=pow(x11451,-0.5);
CheckValue<IkReal> x11452 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11452.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11452.value))));
IkReal gconst10=((1.0)*r01*x11450);
IkReal gconst11=((-1.0)*r00*x11450);
CheckValue<IkReal> x11453 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11453.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11453.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11456 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11456.valid){
continue;
}
IkReal x11454=((1.0)*(x11456.value));
IkReal x11455=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11454)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11454)));
IkReal gconst10=((1.0)*r01*x11455);
IkReal gconst11=((-1.0)*r00*x11455);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x11459 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11459.valid){
continue;
}
IkReal x11457=((1.0)*(x11459.value));
IkReal x11458=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11457)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11457)));
IkReal gconst10=((1.0)*r01*x11458);
IkReal gconst11=((-1.0)*r00*x11458);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11462 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11462.valid){
continue;
}
IkReal x11460=((1.0)*(x11462.value));
IkReal x11461=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11460)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11460)));
IkReal gconst10=((1.0)*r01*x11461);
IkReal gconst11=((-1.0)*r00*x11461);
IkReal x11463=r02*r02;
IkReal x11464=(r12*sj0);
IkReal x11465=x11450;
IkReal x11466=(cj0*x11465);
j4eval[0]=((IKabs((((r02*x11464*x11465))+((x11463*x11466))+(((-1.0)*x11466)))))+(IKabs((x11464+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11469 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11469.valid){
continue;
}
IkReal x11467=((1.0)*(x11469.value));
IkReal x11468=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11467)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11467)));
IkReal gconst10=((1.0)*r01*x11468);
IkReal gconst11=((-1.0)*r00*x11468);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11472 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11472.valid){
continue;
}
IkReal x11470=((1.0)*(x11472.value));
IkReal x11471=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11470)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11470)));
IkReal gconst10=((1.0)*r01*x11471);
IkReal gconst11=((-1.0)*r00*x11471);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11473=gconst10*gconst10;
IkReal x11474=gconst11*gconst11;
IkReal x11475=(r11*sj3);
IkReal x11476=((1.0)*cj3);
IkReal x11477=(cj3*r10);
IkReal x11478=(gconst10*gconst11);
IkReal x11479=(r10*sj3);
IkReal x11480=(r21*x11473);
IkReal x11481=((1.0)*r20*x11474);
CheckValue<IkReal> x11482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11476))+(((-1.0)*r10*r20*x11474*x11476))+((r21*x11477*x11478))+(((-1.0)*r11*x11476*x11480))+((cj3*r11*r20*x11478)))),-1);
if(!x11482.valid){
continue;
}
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal((((gconst11*r22*x11475))+((gconst10*r22*x11479)))),IkReal(((((-1.0)*r20*x11478*x11479))+((x11479*x11480))+((r21*x11475*x11478))+(((-1.0)*x11475*x11481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11482.value)))+(x11483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11484=IKsin(j4);
IkReal x11485=IKcos(j4);
IkReal x11486=(cj2*sj1);
IkReal x11487=(cj1*sj2);
IkReal x11488=(cj3*r10);
IkReal x11489=(gconst11*r20);
IkReal x11490=(gconst11*r21);
IkReal x11491=(cj3*gconst11);
IkReal x11492=(sj1*sj2);
IkReal x11493=(r10*sj3);
IkReal x11494=(cj1*cj2);
IkReal x11495=(gconst10*sj3);
IkReal x11496=(gconst11*sj3);
IkReal x11497=(cj3*gconst10);
IkReal x11498=((1.0)*x11485);
IkReal x11499=((1.0)*x11484);
IkReal x11500=(cj3*x11484);
IkReal x11501=(gconst10*x11484);
IkReal x11502=(gconst11*x11485);
IkReal x11503=(x11487+x11486);
IkReal x11504=(x11485*x11497);
evalcond[0]=(((r21*x11501))+(((-1.0)*x11489*x11499))+(((-1.0)*r22*x11498)));
evalcond[1]=(((r01*x11501))+(((-1.0)*r02*x11498))+(((-1.0)*gconst11*r00*x11499)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r10*x11499))+((r11*x11501))+(((-1.0)*r12*x11498)));
evalcond[3]=((((-1.0)*gconst11*x11488*x11498))+((r12*x11500))+((r11*x11496))+((r11*x11504))+((gconst10*x11493)));
evalcond[4]=(((gconst10*x11488))+((r11*x11491))+(((-1.0)*r12*sj3*x11499))+(((-1.0)*r11*x11495*x11498))+((x11493*x11502)));
evalcond[5]=(x11503+((sj3*x11490))+((r21*x11504))+((r20*x11495))+(((-1.0)*cj3*x11489*x11498))+((r22*x11500)));
evalcond[6]=(((r00*x11497))+(((-1.0)*r01*x11495*x11498))+x11503+(((-1.0)*r02*sj3*x11499))+((r00*x11485*x11496))+((r01*x11491)));
evalcond[7]=(((r00*x11495))+x11494+(((-1.0)*r00*x11491*x11498))+((r01*x11504))+(((-1.0)*x11492))+((r01*x11496))+((r02*x11500)));
evalcond[8]=(x11492+((cj3*x11490))+(((-1.0)*r22*sj3*x11499))+((r20*x11497))+((sj3*x11485*x11489))+(((-1.0)*x11494))+(((-1.0)*r21*x11495*x11498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11505=((1.0)*gconst11);
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*r00*x11505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
CheckValue<IkReal> x11507=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11505)))),-1);
if(!x11507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11506.value)+(((1.5707963267949)*(x11507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11508=IKsin(j4);
IkReal x11509=IKcos(j4);
IkReal x11510=(cj2*sj1);
IkReal x11511=(cj1*sj2);
IkReal x11512=(cj3*r10);
IkReal x11513=(gconst11*r20);
IkReal x11514=(gconst11*r21);
IkReal x11515=(cj3*gconst11);
IkReal x11516=(sj1*sj2);
IkReal x11517=(r10*sj3);
IkReal x11518=(cj1*cj2);
IkReal x11519=(gconst10*sj3);
IkReal x11520=(gconst11*sj3);
IkReal x11521=(cj3*gconst10);
IkReal x11522=((1.0)*x11509);
IkReal x11523=((1.0)*x11508);
IkReal x11524=(cj3*x11508);
IkReal x11525=(gconst10*x11508);
IkReal x11526=(gconst11*x11509);
IkReal x11527=(x11511+x11510);
IkReal x11528=(x11509*x11521);
evalcond[0]=((((-1.0)*x11513*x11523))+((r21*x11525))+(((-1.0)*r22*x11522)));
evalcond[1]=((((-1.0)*r02*x11522))+(((-1.0)*gconst11*r00*x11523))+((r01*x11525)));
evalcond[2]=((-1.0)+((r11*x11525))+(((-1.0)*gconst11*r10*x11523))+(((-1.0)*r12*x11522)));
evalcond[3]=(((r11*x11520))+((r11*x11528))+((r12*x11524))+(((-1.0)*gconst11*x11512*x11522))+((gconst10*x11517)));
evalcond[4]=((((-1.0)*r12*sj3*x11523))+((x11517*x11526))+(((-1.0)*r11*x11519*x11522))+((gconst10*x11512))+((r11*x11515)));
evalcond[5]=((((-1.0)*cj3*x11513*x11522))+x11527+((r20*x11519))+((r21*x11528))+((sj3*x11514))+((r22*x11524)));
evalcond[6]=(((r01*x11515))+x11527+(((-1.0)*r01*x11519*x11522))+((r00*x11509*x11520))+(((-1.0)*r02*sj3*x11523))+((r00*x11521)));
evalcond[7]=((((-1.0)*x11516))+x11518+((r01*x11528))+((r01*x11520))+((r02*x11524))+((r00*x11519))+(((-1.0)*r00*x11515*x11522)));
evalcond[8]=(((cj3*x11514))+(((-1.0)*x11518))+x11516+((sj3*x11509*x11513))+((r20*x11521))+(((-1.0)*r22*sj3*x11523))+(((-1.0)*r21*x11519*x11522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
CheckValue<IkReal> x11530=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11529.value)+(((1.5707963267949)*(x11530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11531=IKsin(j4);
IkReal x11532=IKcos(j4);
IkReal x11533=(cj2*sj1);
IkReal x11534=(cj1*sj2);
IkReal x11535=(cj3*r10);
IkReal x11536=(gconst11*r20);
IkReal x11537=(gconst11*r21);
IkReal x11538=(cj3*gconst11);
IkReal x11539=(sj1*sj2);
IkReal x11540=(r10*sj3);
IkReal x11541=(cj1*cj2);
IkReal x11542=(gconst10*sj3);
IkReal x11543=(gconst11*sj3);
IkReal x11544=(cj3*gconst10);
IkReal x11545=((1.0)*x11532);
IkReal x11546=((1.0)*x11531);
IkReal x11547=(cj3*x11531);
IkReal x11548=(gconst10*x11531);
IkReal x11549=(gconst11*x11532);
IkReal x11550=(x11533+x11534);
IkReal x11551=(x11532*x11544);
evalcond[0]=(((r21*x11548))+(((-1.0)*x11536*x11546))+(((-1.0)*r22*x11545)));
evalcond[1]=((((-1.0)*gconst11*r00*x11546))+((r01*x11548))+(((-1.0)*r02*x11545)));
evalcond[2]=((-1.0)+((r11*x11548))+(((-1.0)*r12*x11545))+(((-1.0)*gconst11*r10*x11546)));
evalcond[3]=(((r11*x11551))+(((-1.0)*gconst11*x11535*x11545))+((gconst10*x11540))+((r12*x11547))+((r11*x11543)));
evalcond[4]=(((gconst10*x11535))+((r11*x11538))+(((-1.0)*r11*x11542*x11545))+((x11540*x11549))+(((-1.0)*r12*sj3*x11546)));
evalcond[5]=(((r21*x11551))+x11550+(((-1.0)*cj3*x11536*x11545))+((sj3*x11537))+((r20*x11542))+((r22*x11547)));
evalcond[6]=(x11550+((r00*x11544))+(((-1.0)*r02*sj3*x11546))+((r00*x11532*x11543))+((r01*x11538))+(((-1.0)*r01*x11542*x11545)));
evalcond[7]=(x11541+((r00*x11542))+((r01*x11543))+(((-1.0)*r00*x11538*x11545))+((r01*x11551))+(((-1.0)*x11539))+((r02*x11547)));
evalcond[8]=((((-1.0)*r21*x11542*x11545))+x11539+(((-1.0)*x11541))+((r20*x11544))+(((-1.0)*r22*sj3*x11546))+((sj3*x11532*x11536))+((cj3*x11537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11554 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11554.valid){
continue;
}
IkReal x11552=((1.0)*(x11554.value));
IkReal x11553=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11552)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11552)));
IkReal gconst10=((1.0)*r01*x11553);
IkReal gconst11=((-1.0)*r00*x11553);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11555=((1.0)*(x11557.value));
IkReal x11556=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11555)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11555)));
IkReal gconst10=((1.0)*r01*x11556);
IkReal gconst11=((-1.0)*r00*x11556);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11558=gconst10*gconst10;
IkReal x11559=gconst11*gconst11;
IkReal x11560=(r11*sj3);
IkReal x11561=((1.0)*cj3);
IkReal x11562=(cj3*r10);
IkReal x11563=(gconst10*gconst11);
IkReal x11564=(r10*sj3);
IkReal x11565=(r21*x11558);
IkReal x11566=((1.0)*r20*x11559);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal((((gconst11*r22*x11560))+((gconst10*r22*x11564)))),IkReal((((x11564*x11565))+(((-1.0)*r20*x11563*x11564))+((r21*x11560*x11563))+(((-1.0)*x11560*x11566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
CheckValue<IkReal> x11568=IKPowWithIntegerCheck(IKsign((((r21*x11562*x11563))+(((-1.0)*r12*r22*x11561))+(((-1.0)*r11*x11561*x11565))+((cj3*r11*r20*x11563))+(((-1.0)*r10*r20*x11559*x11561)))),-1);
if(!x11568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11567.value)+(((1.5707963267949)*(x11568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11569=IKsin(j4);
IkReal x11570=IKcos(j4);
IkReal x11571=(sj1*sj2);
IkReal x11572=(cj3*r10);
IkReal x11573=(gconst11*r20);
IkReal x11574=(gconst11*r21);
IkReal x11575=(cj3*gconst11);
IkReal x11576=(r10*sj3);
IkReal x11577=((1.0)*cj1);
IkReal x11578=(gconst10*sj3);
IkReal x11579=(cj2*sj1);
IkReal x11580=(gconst11*sj3);
IkReal x11581=(cj3*gconst10);
IkReal x11582=(cj2*x11577);
IkReal x11583=((1.0)*x11570);
IkReal x11584=((1.0)*x11569);
IkReal x11585=(cj3*x11569);
IkReal x11586=(gconst10*x11569);
IkReal x11587=(gconst11*x11570);
IkReal x11588=(x11570*x11581);
evalcond[0]=((((-1.0)*x11573*x11584))+((r21*x11586))+(((-1.0)*r22*x11583)));
evalcond[1]=(((r01*x11586))+(((-1.0)*gconst11*r00*x11584))+(((-1.0)*r02*x11583)));
evalcond[2]=((1.0)+(((-1.0)*gconst11*r10*x11584))+(((-1.0)*r12*x11583))+((r11*x11586)));
evalcond[3]=(((gconst10*x11576))+(((-1.0)*gconst11*x11572*x11583))+((r12*x11585))+((r11*x11580))+((r11*x11588)));
evalcond[4]=(((gconst10*x11572))+(((-1.0)*r11*x11578*x11583))+(((-1.0)*r12*sj3*x11584))+((r11*x11575))+((x11576*x11587)));
evalcond[5]=(((sj3*x11574))+x11579+((cj1*sj2))+((r20*x11578))+((r22*x11585))+((r21*x11588))+(((-1.0)*cj3*x11573*x11583)));
evalcond[6]=(((r01*x11588))+((r01*x11580))+x11571+((r00*x11578))+(((-1.0)*r00*x11575*x11583))+(((-1.0)*x11582))+((r02*x11585)));
evalcond[7]=(((cj3*x11574))+(((-1.0)*r22*sj3*x11584))+((r20*x11581))+(((-1.0)*r21*x11578*x11583))+x11571+(((-1.0)*x11582))+((sj3*x11570*x11573)));
evalcond[8]=((((-1.0)*r01*x11578*x11583))+((r01*x11575))+(((-1.0)*r02*sj3*x11584))+(((-1.0)*x11579))+((r00*x11570*x11580))+(((-1.0)*sj2*x11577))+((r00*x11581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11589=((1.0)*gconst11);
CheckValue<IkReal> x11590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11589)))),-1);
if(!x11590.valid){
continue;
}
CheckValue<IkReal> x11591 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*r20*x11589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11590.value)))+(x11591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11592=IKsin(j4);
IkReal x11593=IKcos(j4);
IkReal x11594=(sj1*sj2);
IkReal x11595=(cj3*r10);
IkReal x11596=(gconst11*r20);
IkReal x11597=(gconst11*r21);
IkReal x11598=(cj3*gconst11);
IkReal x11599=(r10*sj3);
IkReal x11600=((1.0)*cj1);
IkReal x11601=(gconst10*sj3);
IkReal x11602=(cj2*sj1);
IkReal x11603=(gconst11*sj3);
IkReal x11604=(cj3*gconst10);
IkReal x11605=(cj2*x11600);
IkReal x11606=((1.0)*x11593);
IkReal x11607=((1.0)*x11592);
IkReal x11608=(cj3*x11592);
IkReal x11609=(gconst10*x11592);
IkReal x11610=(gconst11*x11593);
IkReal x11611=(x11593*x11604);
evalcond[0]=((((-1.0)*r22*x11606))+(((-1.0)*x11596*x11607))+((r21*x11609)));
evalcond[1]=(((r01*x11609))+(((-1.0)*r02*x11606))+(((-1.0)*gconst11*r00*x11607)));
evalcond[2]=((1.0)+(((-1.0)*gconst11*r10*x11607))+(((-1.0)*r12*x11606))+((r11*x11609)));
evalcond[3]=(((r11*x11611))+((gconst10*x11599))+(((-1.0)*gconst11*x11595*x11606))+((r11*x11603))+((r12*x11608)));
evalcond[4]=((((-1.0)*r11*x11601*x11606))+((gconst10*x11595))+((r11*x11598))+(((-1.0)*r12*sj3*x11607))+((x11599*x11610)));
evalcond[5]=(x11602+((cj1*sj2))+((r21*x11611))+((r22*x11608))+(((-1.0)*cj3*x11596*x11606))+((sj3*x11597))+((r20*x11601)));
evalcond[6]=(x11594+((r01*x11603))+((r00*x11601))+(((-1.0)*x11605))+((r02*x11608))+(((-1.0)*r00*x11598*x11606))+((r01*x11611)));
evalcond[7]=(x11594+(((-1.0)*x11605))+(((-1.0)*r21*x11601*x11606))+(((-1.0)*r22*sj3*x11607))+((sj3*x11593*x11596))+((cj3*x11597))+((r20*x11604)));
evalcond[8]=((((-1.0)*sj2*x11600))+(((-1.0)*r01*x11601*x11606))+((r00*x11593*x11603))+(((-1.0)*r02*sj3*x11607))+((r01*x11598))+((r00*x11604))+(((-1.0)*x11602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11612 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11612.valid){
continue;
}
CheckValue<IkReal> x11613=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11612.value)+(((1.5707963267949)*(x11613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11614=IKsin(j4);
IkReal x11615=IKcos(j4);
IkReal x11616=(sj1*sj2);
IkReal x11617=(cj3*r10);
IkReal x11618=(gconst11*r20);
IkReal x11619=(gconst11*r21);
IkReal x11620=(cj3*gconst11);
IkReal x11621=(r10*sj3);
IkReal x11622=((1.0)*cj1);
IkReal x11623=(gconst10*sj3);
IkReal x11624=(cj2*sj1);
IkReal x11625=(gconst11*sj3);
IkReal x11626=(cj3*gconst10);
IkReal x11627=(cj2*x11622);
IkReal x11628=((1.0)*x11615);
IkReal x11629=((1.0)*x11614);
IkReal x11630=(cj3*x11614);
IkReal x11631=(gconst10*x11614);
IkReal x11632=(gconst11*x11615);
IkReal x11633=(x11615*x11626);
evalcond[0]=((((-1.0)*r22*x11628))+((r21*x11631))+(((-1.0)*x11618*x11629)));
evalcond[1]=((((-1.0)*gconst11*r00*x11629))+((r01*x11631))+(((-1.0)*r02*x11628)));
evalcond[2]=((1.0)+((r11*x11631))+(((-1.0)*r12*x11628))+(((-1.0)*gconst11*r10*x11629)));
evalcond[3]=(((r11*x11633))+(((-1.0)*gconst11*x11617*x11628))+((r11*x11625))+((r12*x11630))+((gconst10*x11621)));
evalcond[4]=(((r11*x11620))+(((-1.0)*r11*x11623*x11628))+((gconst10*x11617))+((x11621*x11632))+(((-1.0)*r12*sj3*x11629)));
evalcond[5]=(x11624+((r22*x11630))+((cj1*sj2))+((r21*x11633))+((sj3*x11619))+(((-1.0)*cj3*x11618*x11628))+((r20*x11623)));
evalcond[6]=(x11616+(((-1.0)*x11627))+(((-1.0)*r00*x11620*x11628))+((r02*x11630))+((r00*x11623))+((r01*x11625))+((r01*x11633)));
evalcond[7]=(x11616+((cj3*x11619))+(((-1.0)*x11627))+((sj3*x11615*x11618))+(((-1.0)*r21*x11623*x11628))+(((-1.0)*r22*sj3*x11629))+((r20*x11626)));
evalcond[8]=((((-1.0)*sj2*x11622))+(((-1.0)*x11624))+(((-1.0)*r02*sj3*x11629))+((r00*x11626))+((r01*x11620))+((r00*x11615*x11625))+(((-1.0)*r01*x11623*x11628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11636 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11636.valid){
continue;
}
IkReal x11634=((1.0)*(x11636.value));
IkReal x11635=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11634)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11635);
rxp0_2=(py*r00);
rxp1_0=(r21*x11635);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11634)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11639 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11639.valid){
continue;
}
IkReal x11637=((1.0)*(x11639.value));
IkReal x11638=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11637)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11638);
rxp0_2=(py*r00);
rxp1_0=(r21*x11638);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11637)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
IkReal x11640=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r01*r21*x11640))+((r00*r20*x11640)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11643 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11643.valid){
continue;
}
IkReal x11641=((1.0)*(x11643.value));
IkReal x11642=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11641)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11642);
rxp0_2=(py*r00);
rxp1_0=(r21*x11642);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11641)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11646 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11646.valid){
continue;
}
IkReal x11644=((1.0)*(x11646.value));
IkReal x11645=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11644)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11645);
rxp0_2=(py*r00);
rxp1_0=(r21*x11645);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11644)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11649 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11649.valid){
continue;
}
IkReal x11647=((1.0)*(x11649.value));
IkReal x11648=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11647)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11648);
rxp0_2=(py*r00);
rxp1_0=(r21*x11648);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11647)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11652 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11652.valid){
continue;
}
IkReal x11650=((1.0)*(x11652.value));
IkReal x11651=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11650)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11651);
rxp0_2=(py*r00);
rxp1_0=(r21*x11651);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11650)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11655=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11655.valid){
continue;
}
IkReal x11653=x11655.value;
IkReal x11654=(cj0*x11653);
cj4array[0]=((((-1.0)*cj1*cj2*x11654))+((sj1*sj2*x11654)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11656=IKsin(j4);
IkReal x11657=IKcos(j4);
IkReal x11658=(gconst10*r21);
IkReal x11659=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11656);
evalcond[1]=((((-1.0)*r12*x11657))+(((-1.0)*cj0)));
evalcond[2]=(((x11656*x11658))+(((-1.0)*x11656*x11659)));
evalcond[3]=(((gconst10*r01*x11656))+(((-1.0)*gconst11*r00*x11656)));
evalcond[4]=(((cj2*sj1))+((x11657*x11658))+(((-1.0)*x11657*x11659))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11662=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11662.valid){
continue;
}
IkReal x11660=x11662.value;
IkReal x11661=((1.0)*x11660);
cj4array[0]=((((-1.0)*cj1*sj2*x11661))+(((-1.0)*cj2*sj1*x11661)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11663=IKsin(j4);
IkReal x11664=IKcos(j4);
IkReal x11665=(gconst10*r01);
IkReal x11666=((1.0)*cj0);
IkReal x11667=((1.0)*x11664);
IkReal x11668=((1.0)*gconst11*x11663);
evalcond[0]=(r12*x11663);
evalcond[1]=((((-1.0)*r12*x11667))+(((-1.0)*x11666)));
evalcond[2]=(((gconst10*r21*x11663))+(((-1.0)*r20*x11668)));
evalcond[3]=((((-1.0)*r00*x11668))+((x11663*x11665)));
evalcond[4]=(((x11664*x11665))+((cj0*cj1*cj2))+(((-1.0)*gconst11*r00*x11667))+(((-1.0)*sj1*sj2*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11669=IKPowWithIntegerCheck(r12,-1);
if(!x11669.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11669.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11670=IKsin(j4);
IkReal x11671=IKcos(j4);
IkReal x11672=(gconst10*x11671);
IkReal x11673=(gconst10*x11670);
IkReal x11674=((1.0)*gconst11*r20);
IkReal x11675=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11670);
evalcond[1]=((((-1.0)*x11670*x11674))+((r21*x11673)));
evalcond[2]=((((-1.0)*x11670*x11675))+((r01*x11673)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11671*x11674))+((cj1*sj2))+((r21*x11672)));
evalcond[4]=((((-1.0)*x11671*x11675))+(((-1.0)*cj0*sj1*sj2))+((r01*x11672))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11678 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11678.valid){
continue;
}
IkReal x11676=((1.0)*(x11678.value));
IkReal x11677=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11676)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11677);
rxp0_2=(py*r00);
rxp1_0=(r21*x11677);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11676)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11681 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11681.valid){
continue;
}
IkReal x11679=((1.0)*(x11681.value));
IkReal x11680=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11679)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11680);
rxp0_2=(py*r00);
rxp1_0=(r21*x11680);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11679)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11684 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11684.valid){
continue;
}
IkReal x11682=((1.0)*(x11684.value));
IkReal x11683=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11682)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11683);
rxp0_2=(py*r00);
rxp1_0=(r21*x11683);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11682)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11687=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11687.valid){
continue;
}
IkReal x11685=x11687.value;
IkReal x11686=(cj0*x11685);
cj4array[0]=(((sj1*sj2*x11686))+(((-1.0)*cj1*cj2*x11686)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11688=IKsin(j4);
IkReal x11689=IKcos(j4);
IkReal x11690=(gconst10*x11688);
IkReal x11691=((1.0)*x11689);
IkReal x11692=((1.0)*gconst11*x11688);
evalcond[0]=((-1.0)*r12*x11688);
evalcond[1]=((((-1.0)*r12*x11691))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11692))+((r21*x11690)));
evalcond[3]=(((r01*x11690))+(((-1.0)*r00*x11692)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r21*x11691))+((gconst11*r20*x11689))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11695=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11695.valid){
continue;
}
IkReal x11693=x11695.value;
IkReal x11694=((1.0)*x11693);
cj4array[0]=((((-1.0)*cj2*sj1*x11694))+(((-1.0)*cj1*sj2*x11694)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11696=IKsin(j4);
IkReal x11697=IKcos(j4);
IkReal x11698=((1.0)*cj0);
IkReal x11699=(gconst10*x11696);
IkReal x11700=((1.0)*x11697);
IkReal x11701=((1.0)*gconst11*x11696);
evalcond[0]=((-1.0)*r12*x11696);
evalcond[1]=((((-1.0)*x11698))+(((-1.0)*r12*x11700)));
evalcond[2]=((((-1.0)*r20*x11701))+((r21*x11699)));
evalcond[3]=(((r01*x11699))+(((-1.0)*r00*x11701)));
evalcond[4]=(((cj0*cj1*cj2))+((gconst11*r00*x11697))+(((-1.0)*gconst10*r01*x11700))+(((-1.0)*sj1*sj2*x11698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11702=IKPowWithIntegerCheck(r12,-1);
if(!x11702.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11702.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11703=IKsin(j4);
IkReal x11704=IKcos(j4);
IkReal x11705=(gconst10*x11703);
IkReal x11706=(gconst11*x11704);
IkReal x11707=((1.0)*gconst11*x11703);
IkReal x11708=((1.0)*gconst10*x11704);
evalcond[0]=((-1.0)*r12*x11703);
evalcond[1]=(((r21*x11705))+(((-1.0)*r20*x11707)));
evalcond[2]=(((r01*x11705))+(((-1.0)*r00*x11707)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x11708))+((r20*x11706)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r00*x11706))+((cj0*cj1*cj2))+(((-1.0)*r01*x11708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11711 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11711.valid){
continue;
}
IkReal x11709=((1.0)*(x11711.value));
IkReal x11710=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11709)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11710);
rxp0_2=(py*r00);
rxp1_0=(r21*x11710);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11709)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11714 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11714.valid){
continue;
}
IkReal x11712=((1.0)*(x11714.value));
IkReal x11713=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11712)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11713);
rxp0_2=(py*r00);
rxp1_0=(r21*x11713);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11712)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11717 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11717.valid){
continue;
}
IkReal x11715=((1.0)*(x11717.value));
IkReal x11716=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11715)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11716);
rxp0_2=(py*r00);
rxp1_0=(r21*x11716);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11715)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11720=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11720.valid){
continue;
}
IkReal x11718=x11720.value;
IkReal x11719=((1.0)*cj0*x11718);
cj4array[0]=((((-1.0)*cj2*sj1*x11719))+(((-1.0)*cj1*sj2*x11719)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11721=IKsin(j4);
IkReal x11722=IKcos(j4);
IkReal x11723=(gconst10*x11721);
IkReal x11724=((1.0)*x11722);
IkReal x11725=((1.0)*gconst11*x11721);
evalcond[0]=((-1.0)*r12*x11721);
evalcond[1]=((((-1.0)*r12*x11724))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11725))+((r21*x11723)));
evalcond[3]=(((r01*x11723))+(((-1.0)*r00*x11725)));
evalcond[4]=((((-1.0)*gconst10*r21*x11724))+((gconst11*r20*x11722))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11727=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11727.valid){
continue;
}
IkReal x11726=x11727.value;
cj4array[0]=(((cj1*cj2*x11726))+(((-1.0)*sj1*sj2*x11726)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11728=IKsin(j4);
IkReal x11729=IKcos(j4);
IkReal x11730=(gconst10*x11728);
IkReal x11731=((1.0)*x11729);
IkReal x11732=((1.0)*gconst11*x11728);
evalcond[0]=((-1.0)*r12*x11728);
evalcond[1]=((((-1.0)*r12*x11731))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11732))+((r21*x11730)));
evalcond[3]=(((r01*x11730))+(((-1.0)*r00*x11732)));
evalcond[4]=(((gconst11*r00*x11729))+(((-1.0)*gconst10*r01*x11731))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(r12,-1);
if(!x11733.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11733.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11734=IKsin(j4);
IkReal x11735=IKcos(j4);
IkReal x11736=(gconst10*x11734);
IkReal x11737=(gconst11*x11735);
IkReal x11738=((1.0)*gconst11*x11734);
IkReal x11739=((1.0)*gconst10*x11735);
evalcond[0]=((-1.0)*r12*x11734);
evalcond[1]=((((-1.0)*r20*x11738))+((r21*x11736)));
evalcond[2]=(((r01*x11736))+(((-1.0)*r00*x11738)));
evalcond[3]=((((-1.0)*r21*x11739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11737)));
evalcond[4]=(((r00*x11737))+(((-1.0)*r01*x11739))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
IkReal x11740=((1.0)*(x11742.value));
IkReal x11741=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11740)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11741);
rxp0_2=(py*r00);
rxp1_0=(r21*x11741);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11740)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11745 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11745.valid){
continue;
}
IkReal x11743=((1.0)*(x11745.value));
IkReal x11744=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11743)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11744);
rxp0_2=(py*r00);
rxp1_0=(r21*x11744);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11743)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
IkReal x11746=((1.0)*(x11748.value));
IkReal x11747=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11746)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11747);
rxp0_2=(py*r00);
rxp1_0=(r21*x11747);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11746)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11751=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11751.valid){
continue;
}
IkReal x11749=x11751.value;
IkReal x11750=((1.0)*cj0*x11749);
cj4array[0]=((((-1.0)*cj2*sj1*x11750))+(((-1.0)*cj1*sj2*x11750)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11752=IKsin(j4);
IkReal x11753=IKcos(j4);
IkReal x11754=(gconst10*r21);
IkReal x11755=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11752);
evalcond[1]=((((-1.0)*r12*x11753))+(((-1.0)*cj0)));
evalcond[2]=(((x11752*x11754))+(((-1.0)*x11752*x11755)));
evalcond[3]=((((-1.0)*gconst11*r00*x11752))+((gconst10*r01*x11752)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11753*x11754))+(((-1.0)*x11753*x11755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11757=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11757.valid){
continue;
}
IkReal x11756=x11757.value;
cj4array[0]=(((cj1*cj2*x11756))+(((-1.0)*sj1*sj2*x11756)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11758=IKsin(j4);
IkReal x11759=IKcos(j4);
IkReal x11760=(gconst10*r01);
IkReal x11761=((1.0)*x11759);
IkReal x11762=((1.0)*gconst11*x11758);
evalcond[0]=(r12*x11758);
evalcond[1]=((((-1.0)*r12*x11761))+(((-1.0)*cj0)));
evalcond[2]=(((gconst10*r21*x11758))+(((-1.0)*r20*x11762)));
evalcond[3]=((((-1.0)*r00*x11762))+((x11758*x11760)));
evalcond[4]=(((x11759*x11760))+(((-1.0)*gconst11*r00*x11761))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11763=IKPowWithIntegerCheck(r12,-1);
if(!x11763.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11763.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11764=IKsin(j4);
IkReal x11765=IKcos(j4);
IkReal x11766=(gconst10*x11765);
IkReal x11767=(gconst10*x11764);
IkReal x11768=((1.0)*gconst11*r20);
IkReal x11769=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11764);
evalcond[1]=((((-1.0)*x11764*x11768))+((r21*x11767)));
evalcond[2]=((((-1.0)*x11764*x11769))+((r01*x11767)));
evalcond[3]=((((-1.0)*x11765*x11768))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11766)));
evalcond[4]=((((-1.0)*x11765*x11769))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x11766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11771=IKPowWithIntegerCheck(r12,-1);
if(!x11771.valid){
continue;
}
IkReal x11770=x11771.value;
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(sj3,-1);
if(!x11772.valid){
continue;
}
if( IKabs((x11770*(x11772.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11770)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11770*(x11772.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11770))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11770*(x11772.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11770));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11773=IKsin(j4);
IkReal x11774=IKcos(j4);
IkReal x11775=(cj2*sj0);
IkReal x11776=(gconst11*r20);
IkReal x11777=(cj3*gconst11);
IkReal x11778=(sj1*sj2);
IkReal x11779=(gconst11*r00);
IkReal x11780=(cj2*sj1);
IkReal x11781=(cj1*cj2);
IkReal x11782=(gconst10*sj3);
IkReal x11783=(cj3*gconst10);
IkReal x11784=(gconst11*sj3);
IkReal x11785=(cj1*sj2);
IkReal x11786=((1.0)*cj0);
IkReal x11787=((1.0)*x11773);
IkReal x11788=((1.0)*x11774);
IkReal x11789=(gconst10*x11773);
IkReal x11790=(sj3*x11774);
evalcond[0]=((((-1.0)*r12*x11788))+(((-1.0)*x11786)));
evalcond[1]=(((r21*x11789))+(((-1.0)*x11776*x11787)));
evalcond[2]=((((-1.0)*x11779*x11787))+sj0+((r01*x11789)));
evalcond[3]=(((sj1*x11775))+((sj0*x11785))+(((-1.0)*r12*sj3*x11787)));
evalcond[4]=((((-1.0)*sj0*x11778))+((cj1*x11775))+((cj3*r12*x11773)));
evalcond[5]=(((r21*x11784))+x11785+x11780+((r20*x11782))+(((-1.0)*cj3*x11776*x11788))+((r21*x11774*x11783)));
evalcond[6]=(((x11776*x11790))+x11778+((r20*x11783))+(((-1.0)*x11781))+((r21*x11777))+(((-1.0)*r21*x11782*x11788)));
evalcond[7]=(((x11779*x11790))+((cj0*x11785))+((cj0*x11780))+(((-1.0)*r01*x11782*x11788))+((r01*x11777))+((r00*x11783)));
evalcond[8]=((((-1.0)*x11778*x11786))+((cj0*x11781))+(((-1.0)*r00*x11777*x11788))+((r01*x11774*x11783))+((r00*x11782))+((r01*x11784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11791=((1.0)*gconst11);
CheckValue<IkReal> x11792=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*r00*x11791))),-1);
if(!x11792.valid){
continue;
}
CheckValue<IkReal> x11793=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11791))+((cj3*gconst10*r21))),-1);
if(!x11793.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11792.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11793.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11791)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11792.value)))+IKsqr(((x11793.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11791))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11792.value)), ((x11793.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11791))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11794=IKsin(j4);
IkReal x11795=IKcos(j4);
IkReal x11796=(cj2*sj0);
IkReal x11797=(gconst11*r20);
IkReal x11798=(cj3*gconst11);
IkReal x11799=(sj1*sj2);
IkReal x11800=(gconst11*r00);
IkReal x11801=(cj2*sj1);
IkReal x11802=(cj1*cj2);
IkReal x11803=(gconst10*sj3);
IkReal x11804=(cj3*gconst10);
IkReal x11805=(gconst11*sj3);
IkReal x11806=(cj1*sj2);
IkReal x11807=((1.0)*cj0);
IkReal x11808=((1.0)*x11794);
IkReal x11809=((1.0)*x11795);
IkReal x11810=(gconst10*x11794);
IkReal x11811=(sj3*x11795);
evalcond[0]=((((-1.0)*r12*x11809))+(((-1.0)*x11807)));
evalcond[1]=((((-1.0)*x11797*x11808))+((r21*x11810)));
evalcond[2]=(sj0+((r01*x11810))+(((-1.0)*x11800*x11808)));
evalcond[3]=(((sj1*x11796))+((sj0*x11806))+(((-1.0)*r12*sj3*x11808)));
evalcond[4]=((((-1.0)*sj0*x11799))+((cj1*x11796))+((cj3*r12*x11794)));
evalcond[5]=(((r21*x11805))+(((-1.0)*cj3*x11797*x11809))+((r20*x11803))+((r21*x11795*x11804))+x11801+x11806);
evalcond[6]=(x11799+(((-1.0)*x11802))+((r20*x11804))+((x11797*x11811))+((r21*x11798))+(((-1.0)*r21*x11803*x11809)));
evalcond[7]=(((r00*x11804))+(((-1.0)*r01*x11803*x11809))+((x11800*x11811))+((cj0*x11801))+((cj0*x11806))+((r01*x11798)));
evalcond[8]=(((r00*x11803))+((r01*x11795*x11804))+(((-1.0)*r00*x11798*x11809))+((cj0*x11802))+((r01*x11805))+(((-1.0)*x11799*x11807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11812=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11812.valid){
continue;
}
CheckValue<IkReal> x11813=IKPowWithIntegerCheck(r12,-1);
if(!x11813.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11812.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11812.value)))+IKsqr(((-1.0)*cj0*(x11813.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11812.value)), ((-1.0)*cj0*(x11813.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11814=IKsin(j4);
IkReal x11815=IKcos(j4);
IkReal x11816=(cj2*sj0);
IkReal x11817=(gconst11*r20);
IkReal x11818=(cj3*gconst11);
IkReal x11819=(sj1*sj2);
IkReal x11820=(gconst11*r00);
IkReal x11821=(cj2*sj1);
IkReal x11822=(cj1*cj2);
IkReal x11823=(gconst10*sj3);
IkReal x11824=(cj3*gconst10);
IkReal x11825=(gconst11*sj3);
IkReal x11826=(cj1*sj2);
IkReal x11827=((1.0)*cj0);
IkReal x11828=((1.0)*x11814);
IkReal x11829=((1.0)*x11815);
IkReal x11830=(gconst10*x11814);
IkReal x11831=(sj3*x11815);
evalcond[0]=((((-1.0)*r12*x11829))+(((-1.0)*x11827)));
evalcond[1]=(((r21*x11830))+(((-1.0)*x11817*x11828)));
evalcond[2]=(sj0+(((-1.0)*x11820*x11828))+((r01*x11830)));
evalcond[3]=(((sj1*x11816))+((sj0*x11826))+(((-1.0)*r12*sj3*x11828)));
evalcond[4]=(((cj3*r12*x11814))+((cj1*x11816))+(((-1.0)*sj0*x11819)));
evalcond[5]=(((r21*x11815*x11824))+((r20*x11823))+((r21*x11825))+x11826+x11821+(((-1.0)*cj3*x11817*x11829)));
evalcond[6]=(((x11817*x11831))+((r21*x11818))+(((-1.0)*x11822))+((r20*x11824))+(((-1.0)*r21*x11823*x11829))+x11819);
evalcond[7]=((((-1.0)*r01*x11823*x11829))+((r01*x11818))+((cj0*x11826))+((cj0*x11821))+((r00*x11824))+((x11820*x11831)));
evalcond[8]=((((-1.0)*x11819*x11827))+(((-1.0)*r00*x11818*x11829))+((r01*x11815*x11824))+((cj0*x11822))+((r01*x11825))+((r00*x11823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
IkReal x11832=((1.0)*(x11834.value));
IkReal x11833=x11450;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11832)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11832)));
IkReal gconst10=((1.0)*r01*x11833);
IkReal gconst11=((-1.0)*r00*x11833);
IkReal x11835=r02*r02;
IkReal x11836=(r12*sj0);
IkReal x11837=x11450;
IkReal x11838=(cj0*x11837);
j4eval[0]=((IKabs((((r02*x11836*x11837))+(((-1.0)*x11838))+((x11835*x11838)))))+(IKabs((x11836+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11839=((1.0)*r02);
IkReal x11840=(sj1*sj2);
IkReal x11841=(cj1*cj2);
IkReal x11842=((1.0)*sj3);
IkReal x11843=(gconst10*r21*sj3);
IkReal x11844=(gconst11*r20*sj3);
IkReal x11845=(cj3*gconst11*r21);
IkReal x11846=(cj3*gconst10*r20);
CheckValue<IkReal> x11847=IKPowWithIntegerCheck(((((-1.0)*r00*r20*x11842*(gconst11*gconst11)))+(((-1.0)*r01*r21*x11842*(gconst10*gconst10)))+((gconst11*r00*x11843))+((gconst10*r01*x11844))),-1);
if(!x11847.valid){
continue;
}
CheckValue<IkReal> x11848=IKPowWithIntegerCheck(((((-1.0)*gconst10*r21*x11842))+x11844),-1);
if(!x11848.valid){
continue;
}
if( IKabs(((x11847.value)*(((((-1.0)*x11839*x11845))+(((-1.0)*x11839*x11846))+(((-1.0)*x11839*x11840))+(((-1.0)*gconst11*r20*sj0*x11842))+((sj0*x11843))+((r02*x11841)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11848.value)*(((((-1.0)*x11840))+(((-1.0)*x11845))+(((-1.0)*x11846))+x11841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11847.value)*(((((-1.0)*x11839*x11845))+(((-1.0)*x11839*x11846))+(((-1.0)*x11839*x11840))+(((-1.0)*gconst11*r20*sj0*x11842))+((sj0*x11843))+((r02*x11841))))))+IKsqr(((x11848.value)*(((((-1.0)*x11840))+(((-1.0)*x11845))+(((-1.0)*x11846))+x11841))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11847.value)*(((((-1.0)*x11839*x11845))+(((-1.0)*x11839*x11846))+(((-1.0)*x11839*x11840))+(((-1.0)*gconst11*r20*sj0*x11842))+((sj0*x11843))+((r02*x11841))))), ((x11848.value)*(((((-1.0)*x11840))+(((-1.0)*x11845))+(((-1.0)*x11846))+x11841))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11849=IKsin(j4);
IkReal x11850=IKcos(j4);
IkReal x11851=(gconst10*sj3);
IkReal x11852=(cj3*r10);
IkReal x11853=(gconst11*r20);
IkReal x11854=(gconst11*sj3);
IkReal x11855=(cj3*r00);
IkReal x11856=(sj1*sj2);
IkReal x11857=(cj3*gconst11);
IkReal x11858=(cj1*cj2);
IkReal x11859=(cj2*sj1);
IkReal x11860=(cj1*sj2);
IkReal x11861=((1.0)*cj0);
IkReal x11862=((1.0)*x11849);
IkReal x11863=(gconst10*x11849);
IkReal x11864=((1.0)*x11850);
IkReal x11865=(cj3*x11849);
IkReal x11866=(gconst11*x11864);
IkReal x11867=(cj3*gconst10*x11850);
evalcond[0]=((((-1.0)*x11853*x11862))+((r21*x11863)));
evalcond[1]=(sj0+((r01*x11863))+(((-1.0)*gconst11*r00*x11862))+(((-1.0)*r02*x11864)));
evalcond[2]=((((-1.0)*x11861))+((r11*x11863))+(((-1.0)*r12*x11864))+(((-1.0)*gconst11*r10*x11862)));
evalcond[3]=(((r21*x11854))+((r20*x11851))+(((-1.0)*cj3*x11853*x11864))+x11860+x11859+((r21*x11867)));
evalcond[4]=(((r21*x11857))+(((-1.0)*r21*x11851*x11864))+(((-1.0)*x11858))+((sj3*x11850*x11853))+((cj3*gconst10*r20))+x11856);
evalcond[5]=(((cj0*x11859))+(((-1.0)*r02*sj3*x11862))+((r01*x11857))+((gconst10*x11855))+(((-1.0)*r01*x11851*x11864))+((r00*x11850*x11854))+((cj0*x11860)));
evalcond[6]=(((r02*x11865))+((cj0*x11858))+(((-1.0)*x11856*x11861))+((r01*x11867))+((r01*x11854))+((r00*x11851))+(((-1.0)*x11855*x11866)));
evalcond[7]=((((-1.0)*r11*x11851*x11864))+((r10*x11850*x11854))+((r11*x11857))+((gconst10*x11852))+((sj0*x11860))+((sj0*x11859))+(((-1.0)*r12*sj3*x11862)));
evalcond[8]=((((-1.0)*sj0*x11856))+((r11*x11854))+((r12*x11865))+(((-1.0)*x11852*x11866))+((r11*x11867))+((sj0*x11858))+((r10*x11851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11868=((1.0)*gconst11);
CheckValue<IkReal> x11869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11868))+(((-1.0)*gconst10*r20)))),-1);
if(!x11869.valid){
continue;
}
CheckValue<IkReal> x11870 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11868))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11869.value)))+(x11870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11871=IKsin(j4);
IkReal x11872=IKcos(j4);
IkReal x11873=(gconst10*sj3);
IkReal x11874=(cj3*r10);
IkReal x11875=(gconst11*r20);
IkReal x11876=(gconst11*sj3);
IkReal x11877=(cj3*r00);
IkReal x11878=(sj1*sj2);
IkReal x11879=(cj3*gconst11);
IkReal x11880=(cj1*cj2);
IkReal x11881=(cj2*sj1);
IkReal x11882=(cj1*sj2);
IkReal x11883=((1.0)*cj0);
IkReal x11884=((1.0)*x11871);
IkReal x11885=(gconst10*x11871);
IkReal x11886=((1.0)*x11872);
IkReal x11887=(cj3*x11871);
IkReal x11888=(gconst11*x11886);
IkReal x11889=(cj3*gconst10*x11872);
evalcond[0]=((((-1.0)*x11875*x11884))+((r21*x11885)));
evalcond[1]=(((r01*x11885))+sj0+(((-1.0)*gconst11*r00*x11884))+(((-1.0)*r02*x11886)));
evalcond[2]=((((-1.0)*r12*x11886))+(((-1.0)*gconst11*r10*x11884))+(((-1.0)*x11883))+((r11*x11885)));
evalcond[3]=(((r21*x11889))+((r20*x11873))+(((-1.0)*cj3*x11875*x11886))+((r21*x11876))+x11881+x11882);
evalcond[4]=((((-1.0)*x11880))+(((-1.0)*r21*x11873*x11886))+((cj3*gconst10*r20))+((sj3*x11872*x11875))+((r21*x11879))+x11878);
evalcond[5]=((((-1.0)*r01*x11873*x11886))+((r01*x11879))+((r00*x11872*x11876))+((cj0*x11882))+((cj0*x11881))+((gconst10*x11877))+(((-1.0)*r02*sj3*x11884)));
evalcond[6]=((((-1.0)*x11877*x11888))+((r01*x11889))+((r01*x11876))+((r00*x11873))+((cj0*x11880))+((r02*x11887))+(((-1.0)*x11878*x11883)));
evalcond[7]=(((r10*x11872*x11876))+(((-1.0)*r11*x11873*x11886))+(((-1.0)*r12*sj3*x11884))+((r11*x11879))+((gconst10*x11874))+((sj0*x11882))+((sj0*x11881)));
evalcond[8]=((((-1.0)*sj0*x11878))+(((-1.0)*x11874*x11888))+((r10*x11873))+((r11*x11876))+((r12*x11887))+((sj0*x11880))+((r11*x11889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11890=((1.0)*gconst11);
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11890))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x11890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11890)))),-1);
if(!x11892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11891.value)+(((1.5707963267949)*(x11892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11893=IKsin(j4);
IkReal x11894=IKcos(j4);
IkReal x11895=(gconst10*sj3);
IkReal x11896=(cj3*r10);
IkReal x11897=(gconst11*r20);
IkReal x11898=(gconst11*sj3);
IkReal x11899=(cj3*gconst11);
IkReal x11900=(sj1*sj2);
IkReal x11901=(cj1*cj2);
IkReal x11902=(cj2*sj1);
IkReal x11903=(cj1*sj2);
IkReal x11904=(cj3*gconst10);
IkReal x11905=((1.0)*cj0);
IkReal x11906=((1.0)*x11894);
IkReal x11907=((1.0)*x11893);
IkReal x11908=(cj3*x11893);
IkReal x11909=(gconst10*x11893);
IkReal x11910=(x11894*x11904);
evalcond[0]=((((-1.0)*r22*x11906))+(((-1.0)*x11897*x11907))+((r21*x11909)));
evalcond[1]=((((-1.0)*r02*x11906))+sj0+((r01*x11909))+(((-1.0)*gconst11*r00*x11907)));
evalcond[2]=((((-1.0)*r12*x11906))+(((-1.0)*x11905))+(((-1.0)*gconst11*r10*x11907))+((r11*x11909)));
evalcond[3]=(x11902+x11903+((r22*x11908))+((r21*x11898))+((r21*x11910))+((r20*x11895))+(((-1.0)*cj3*x11897*x11906)));
evalcond[4]=(x11900+((r21*x11899))+(((-1.0)*x11901))+((r20*x11904))+((sj3*x11894*x11897))+(((-1.0)*r21*x11895*x11906))+(((-1.0)*r22*sj3*x11907)));
evalcond[5]=(((r01*x11899))+((r00*x11904))+(((-1.0)*r02*sj3*x11907))+((r00*x11894*x11898))+(((-1.0)*r01*x11895*x11906))+((cj0*x11903))+((cj0*x11902)));
evalcond[6]=((((-1.0)*x11900*x11905))+((r01*x11910))+((r01*x11898))+((r00*x11895))+(((-1.0)*r00*x11899*x11906))+((cj0*x11901))+((r02*x11908)));
evalcond[7]=((((-1.0)*r11*x11895*x11906))+((sj0*x11903))+((sj0*x11902))+((r10*x11894*x11898))+(((-1.0)*r12*sj3*x11907))+((r11*x11899))+((gconst10*x11896)));
evalcond[8]=(((r11*x11910))+((r12*x11908))+((sj0*x11901))+(((-1.0)*gconst11*x11896*x11906))+((r10*x11895))+(((-1.0)*sj0*x11900))+((r11*x11898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
CheckValue<IkReal> x11912=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11911.value)+(((1.5707963267949)*(x11912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11913=IKsin(j4);
IkReal x11914=IKcos(j4);
IkReal x11915=(gconst10*sj3);
IkReal x11916=(cj3*r10);
IkReal x11917=(gconst11*r20);
IkReal x11918=(gconst11*sj3);
IkReal x11919=(cj3*gconst11);
IkReal x11920=(sj1*sj2);
IkReal x11921=(cj1*cj2);
IkReal x11922=(cj2*sj1);
IkReal x11923=(cj1*sj2);
IkReal x11924=(cj3*gconst10);
IkReal x11925=((1.0)*cj0);
IkReal x11926=((1.0)*x11914);
IkReal x11927=((1.0)*x11913);
IkReal x11928=(cj3*x11913);
IkReal x11929=(gconst10*x11913);
IkReal x11930=(x11914*x11924);
evalcond[0]=((((-1.0)*x11917*x11927))+((r21*x11929))+(((-1.0)*r22*x11926)));
evalcond[1]=(sj0+(((-1.0)*r02*x11926))+(((-1.0)*gconst11*r00*x11927))+((r01*x11929)));
evalcond[2]=((((-1.0)*x11925))+((r11*x11929))+(((-1.0)*gconst11*r10*x11927))+(((-1.0)*r12*x11926)));
evalcond[3]=(x11922+x11923+((r21*x11930))+(((-1.0)*cj3*x11917*x11926))+((r21*x11918))+((r22*x11928))+((r20*x11915)));
evalcond[4]=(x11920+(((-1.0)*r21*x11915*x11926))+(((-1.0)*r22*sj3*x11927))+((r20*x11924))+((r21*x11919))+((sj3*x11914*x11917))+(((-1.0)*x11921)));
evalcond[5]=((((-1.0)*r02*sj3*x11927))+((cj0*x11923))+((cj0*x11922))+((r01*x11919))+((r00*x11914*x11918))+(((-1.0)*r01*x11915*x11926))+((r00*x11924)));
evalcond[6]=((((-1.0)*r00*x11919*x11926))+((r02*x11928))+((cj0*x11921))+((r00*x11915))+((r01*x11918))+(((-1.0)*x11920*x11925))+((r01*x11930)));
evalcond[7]=(((r11*x11919))+((gconst10*x11916))+((r10*x11914*x11918))+(((-1.0)*r11*x11915*x11926))+(((-1.0)*r12*sj3*x11927))+((sj0*x11923))+((sj0*x11922)));
evalcond[8]=(((r11*x11918))+(((-1.0)*sj0*x11920))+(((-1.0)*gconst11*x11916*x11926))+((r11*x11930))+((r10*x11915))+((r12*x11928))+((sj0*x11921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11931=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11931.valid){
continue;
}
CheckValue<IkReal> x11932 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11931.value)))+(x11932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11933=IKsin(j4);
IkReal x11934=IKcos(j4);
IkReal x11935=(gconst10*sj3);
IkReal x11936=(cj3*r10);
IkReal x11937=(gconst11*r20);
IkReal x11938=(gconst11*sj3);
IkReal x11939=(cj3*gconst11);
IkReal x11940=(sj1*sj2);
IkReal x11941=(cj1*cj2);
IkReal x11942=(cj2*sj1);
IkReal x11943=(cj1*sj2);
IkReal x11944=(cj3*gconst10);
IkReal x11945=((1.0)*cj0);
IkReal x11946=((1.0)*x11934);
IkReal x11947=((1.0)*x11933);
IkReal x11948=(cj3*x11933);
IkReal x11949=(gconst10*x11933);
IkReal x11950=(x11934*x11944);
evalcond[0]=((((-1.0)*x11937*x11947))+(((-1.0)*r22*x11946))+((r21*x11949)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11947))+(((-1.0)*r02*x11946))+((r01*x11949)));
evalcond[2]=((((-1.0)*gconst11*r10*x11947))+((r11*x11949))+(((-1.0)*x11945))+(((-1.0)*r12*x11946)));
evalcond[3]=(x11942+x11943+((r21*x11938))+((r21*x11950))+((r20*x11935))+((r22*x11948))+(((-1.0)*cj3*x11937*x11946)));
evalcond[4]=(x11940+((r21*x11939))+((r20*x11944))+(((-1.0)*r21*x11935*x11946))+(((-1.0)*x11941))+(((-1.0)*r22*sj3*x11947))+((sj3*x11934*x11937)));
evalcond[5]=((((-1.0)*r02*sj3*x11947))+(((-1.0)*r01*x11935*x11946))+((cj0*x11943))+((cj0*x11942))+((r00*x11944))+((r00*x11934*x11938))+((r01*x11939)));
evalcond[6]=((((-1.0)*r00*x11939*x11946))+(((-1.0)*x11940*x11945))+((r02*x11948))+((cj0*x11941))+((r01*x11950))+((r00*x11935))+((r01*x11938)));
evalcond[7]=(((sj0*x11943))+((sj0*x11942))+((r10*x11934*x11938))+(((-1.0)*r12*sj3*x11947))+((gconst10*x11936))+((r11*x11939))+(((-1.0)*r11*x11935*x11946)));
evalcond[8]=((((-1.0)*gconst11*x11936*x11946))+((r10*x11935))+((sj0*x11941))+((r11*x11950))+((r12*x11948))+((r11*x11938))+(((-1.0)*sj0*x11940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11951=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11951;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11952=((1.0)*cj5);
IkReal x11953=((((-1.0)*r21*x11952))+(((-1.0)*r20*sj5)));
j4eval[0]=x11953;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x11952))))));
j4eval[2]=IKsign(x11953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11954=cj5*cj5;
IkReal x11955=(cj3*r01);
IkReal x11956=(cj5*sj5);
IkReal x11957=((1.0)*cj3);
IkReal x11958=(((cj3*r00*r21*x11956))+((r20*x11955*x11956))+((r21*x11954*x11955))+(((-1.0)*r02*r22*x11957))+(((-1.0)*r00*r20*x11954*x11957))+(((-1.0)*r21*x11955)));
j4eval[0]=x11958;
j4eval[1]=IKsign(x11958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11959=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11959;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11959);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11960=((1.0)*cj5);
IkReal x11961=((((-1.0)*r21*x11960))+(((-1.0)*r20*sj5)));
j4eval[0]=x11961;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11960))+((r11*sj5))))));
j4eval[2]=IKsign(x11961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11962=cj5*cj5;
IkReal x11963=r01*r01;
IkReal x11964=(cj5*r00);
IkReal x11965=(r01*sj5);
IkReal x11966=(x11963+((x11962*(r00*r00)))+(((-2.0)*x11964*x11965))+(((-1.0)*x11962*x11963))+(r02*r02));
j4eval[0]=x11966;
j4eval[1]=((IKabs(r02))+(IKabs((x11964+(((-1.0)*x11965))))));
j4eval[2]=IKsign(x11966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11967=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11967);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11967);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11968=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11968);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11968);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11969=((1.0)*cj2);
CheckValue<IkReal> x11970=IKPowWithIntegerCheck(r22,-1);
if(!x11970.valid){
continue;
}
CheckValue<IkReal> x11971=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11971.valid){
continue;
}
if( IKabs(((x11970.value)*(((((-1.0)*cj1*x11969))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11971.value)*(((((-1.0)*sj1*x11969))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11970.value)*(((((-1.0)*cj1*x11969))+((sj1*sj2))))))+IKsqr(((x11971.value)*(((((-1.0)*sj1*x11969))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11970.value)*(((((-1.0)*cj1*x11969))+((sj1*sj2))))), ((x11971.value)*(((((-1.0)*sj1*x11969))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11972=IKsin(j4);
IkReal x11973=IKcos(j4);
IkReal x11974=(cj5*x11973);
IkReal x11975=(sj5*x11972);
IkReal x11976=((1.0)*cj5*x11972);
IkReal x11977=((1.0)*sj5*x11973);
evalcond[0]=((-1.0)*r22*x11973);
evalcond[1]=((((-1.0)*r10*x11976))+((r11*x11975)));
evalcond[2]=((((-1.0)*r22*x11972))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[3]=(((r00*x11974))+(((-1.0)*r01*x11977)));
evalcond[4]=((1.0)+((r01*x11975))+(((-1.0)*r00*x11976)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r11*x11977))+((cj1*sj2))+((r10*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11978=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11978.valid){
continue;
}
CheckValue<IkReal> x11979=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11979.valid){
continue;
}
if( IKabs(((-1.0)*(x11978.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11979.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11978.value)))+IKsqr(((x11979.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11978.value)), ((x11979.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11980=IKsin(j4);
IkReal x11981=IKcos(j4);
IkReal x11982=(cj5*x11981);
IkReal x11983=(sj5*x11980);
IkReal x11984=((1.0)*cj5*x11980);
IkReal x11985=((1.0)*sj5*x11981);
evalcond[0]=((-1.0)*r22*x11981);
evalcond[1]=((((-1.0)*r10*x11984))+((r11*x11983)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11980)));
evalcond[3]=((((-1.0)*r01*x11985))+((r00*x11982)));
evalcond[4]=((1.0)+(((-1.0)*r00*x11984))+((r01*x11983)));
evalcond[5]=(((cj2*sj1))+((r10*x11982))+(((-1.0)*r11*x11985))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11986=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11986);
rxp0_2=(py*r00);
rxp1_0=(r21*x11986);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11987=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11987);
rxp0_2=(py*r00);
rxp1_0=(r21*x11987);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11988=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11988.valid){
continue;
}
CheckValue<IkReal> x11989=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11989.valid){
continue;
}
if( IKabs(((-1.0)*(x11988.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11989.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11988.value)))+IKsqr(((x11989.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11988.value)), ((x11989.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11990=IKsin(j4);
IkReal x11991=IKcos(j4);
IkReal x11992=(cj5*r00);
IkReal x11993=(cj5*r20);
IkReal x11994=(r21*sj5);
IkReal x11995=(r01*sj5);
IkReal x11996=((1.0)*x11990);
IkReal x11997=((1.0)*x11991);
evalcond[0]=((-1.0)*r12*x11991);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11996)));
evalcond[2]=(((x11990*x11994))+(((-1.0)*x11993*x11996)));
evalcond[3]=(((x11991*x11992))+(((-1.0)*x11995*x11997)));
evalcond[4]=((1.0)+(((-1.0)*x11992*x11996))+((x11990*x11995)));
evalcond[5]=(((x11991*x11993))+(((-1.0)*x11994*x11997))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11998=IKPowWithIntegerCheck(r12,-1);
if(!x11998.valid){
continue;
}
CheckValue<IkReal> x11999=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11999.valid){
continue;
}
if( IKabs(((x11998.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11999.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11998.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11999.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11998.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11999.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12000=IKsin(j4);
IkReal x12001=IKcos(j4);
IkReal x12002=(cj5*r00);
IkReal x12003=(cj5*r20);
IkReal x12004=(r21*sj5);
IkReal x12005=(r01*sj5);
IkReal x12006=((1.0)*x12000);
IkReal x12007=((1.0)*x12001);
evalcond[0]=((-1.0)*r12*x12001);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12006)));
evalcond[2]=(((x12000*x12004))+(((-1.0)*x12003*x12006)));
evalcond[3]=((((-1.0)*x12005*x12007))+((x12001*x12002)));
evalcond[4]=((1.0)+((x12000*x12005))+(((-1.0)*x12002*x12006)));
evalcond[5]=((((-1.0)*x12004*x12007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12001*x12003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12008=cj5*cj5;
IkReal x12009=r01*r01;
IkReal x12010=(r01*sj5);
IkReal x12011=(cj5*r00);
CheckValue<IkReal> x12012 = IKatan2WithCheck(IkReal((x12011+(((-1.0)*x12010)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12012.valid){
continue;
}
CheckValue<IkReal> x12013=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12008*x12009))+(((-2.0)*x12010*x12011))+((x12008*(r00*r00)))+x12009+(r02*r02))),-1);
if(!x12013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12012.value)+(((1.5707963267949)*(x12013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12014=IKsin(j4);
IkReal x12015=IKcos(j4);
IkReal x12016=(cj5*r10);
IkReal x12017=(r01*sj5);
IkReal x12018=(cj5*r00);
IkReal x12019=(cj5*r20);
IkReal x12020=((1.0)*x12015);
IkReal x12021=((1.0)*x12014);
IkReal x12022=(sj5*x12014);
evalcond[0]=(((r21*x12022))+(((-1.0)*r22*x12020))+(((-1.0)*x12019*x12021)));
evalcond[1]=((((-1.0)*x12016*x12021))+((r11*x12022))+(((-1.0)*r12*x12020)));
evalcond[2]=((((-1.0)*r02*x12021))+((x12015*x12018))+(((-1.0)*x12017*x12020)));
evalcond[3]=((1.0)+((x12014*x12017))+(((-1.0)*r02*x12020))+(((-1.0)*x12018*x12021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x12020))+((x12015*x12016))+(((-1.0)*r12*x12021)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12015*x12019))+(((-1.0)*r22*x12021))+(((-1.0)*r21*sj5*x12020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12023=((1.0)*cj5);
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
CheckValue<IkReal> x12025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5))+(((-1.0)*r21*x12023)))),-1);
if(!x12025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12024.value)+(((1.5707963267949)*(x12025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12026=IKsin(j4);
IkReal x12027=IKcos(j4);
IkReal x12028=(cj5*r10);
IkReal x12029=(r01*sj5);
IkReal x12030=(cj5*r00);
IkReal x12031=(cj5*r20);
IkReal x12032=((1.0)*x12027);
IkReal x12033=((1.0)*x12026);
IkReal x12034=(sj5*x12026);
evalcond[0]=((((-1.0)*x12031*x12033))+((r21*x12034))+(((-1.0)*r22*x12032)));
evalcond[1]=((((-1.0)*x12028*x12033))+(((-1.0)*r12*x12032))+((r11*x12034)));
evalcond[2]=((((-1.0)*x12029*x12032))+((x12027*x12030))+(((-1.0)*r02*x12033)));
evalcond[3]=((1.0)+(((-1.0)*x12030*x12033))+(((-1.0)*r02*x12032))+((x12026*x12029)));
evalcond[4]=(((cj2*sj1))+((x12027*x12028))+((cj1*sj2))+(((-1.0)*r11*sj5*x12032))+(((-1.0)*r12*x12033)));
evalcond[5]=((((-1.0)*r21*sj5*x12032))+((x12027*x12031))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12035 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12035.valid){
continue;
}
CheckValue<IkReal> x12036=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12035.value)+(((1.5707963267949)*(x12036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12037=IKsin(j4);
IkReal x12038=IKcos(j4);
IkReal x12039=(cj5*r10);
IkReal x12040=(r01*sj5);
IkReal x12041=(cj5*r00);
IkReal x12042=(cj5*r20);
IkReal x12043=((1.0)*x12038);
IkReal x12044=((1.0)*x12037);
IkReal x12045=(sj5*x12037);
evalcond[0]=(((r21*x12045))+(((-1.0)*x12042*x12044))+(((-1.0)*r22*x12043)));
evalcond[1]=((((-1.0)*r12*x12043))+((r11*x12045))+(((-1.0)*x12039*x12044)));
evalcond[2]=((((-1.0)*x12040*x12043))+((x12038*x12041))+(((-1.0)*r02*x12044)));
evalcond[3]=((1.0)+((x12037*x12040))+(((-1.0)*x12041*x12044))+(((-1.0)*r02*x12043)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12044))+(((-1.0)*r11*sj5*x12043))+((x12038*x12039))+((cj1*sj2)));
evalcond[5]=(((x12038*x12042))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x12043))+(((-1.0)*r22*x12044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12046=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12046;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12047=((1.0)*cj5);
IkReal x12048=((((-1.0)*r21*x12047))+(((-1.0)*r20*sj5)));
j4eval[0]=x12048;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12047))))));
j4eval[2]=IKsign(x12048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12049=cj5*cj5;
IkReal x12050=r01*r01;
IkReal x12051=(r01*sj5);
IkReal x12052=(cj5*r00);
IkReal x12053=((((2.0)*x12051*x12052))+(((-1.0)*(r02*r02)))+(((-1.0)*x12050))+(((-1.0)*x12049*(r00*r00)))+((x12049*x12050)));
j4eval[0]=x12053;
j4eval[1]=IKsign(x12053);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12052))+x12051))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12054=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12054);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12054);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12055=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12055);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12055);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12056=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12056)));
j4eval[1]=((((-1.0)*r10*x12056))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12057=((1.0)*cj5);
CheckValue<IkReal> x12058=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12057))),-1);
if(!x12058.valid){
continue;
}
CheckValue<IkReal> x12059=IKPowWithIntegerCheck(((((-1.0)*r10*x12057))+((r11*sj5))),-1);
if(!x12059.valid){
continue;
}
if( IKabs(((-1.0)*(x12058.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12059.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12058.value)))+IKsqr(((x12059.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12058.value)), ((x12059.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12060=IKsin(j4);
IkReal x12061=IKcos(j4);
IkReal x12062=((1.0)*cj5);
IkReal x12063=(sj5*x12061);
IkReal x12064=(sj5*x12060);
evalcond[0]=((-1.0)*r22*x12061);
evalcond[1]=(((r22*x12060))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=((((-1.0)*r10*x12060*x12062))+((r11*x12064)));
evalcond[3]=(((r01*x12063))+(((-1.0)*r00*x12061*x12062)));
evalcond[4]=((1.0)+((r01*x12064))+(((-1.0)*r00*x12060*x12062)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12061*x12062))+((r11*x12063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12065=((1.0)*sj1);
CheckValue<IkReal> x12066=IKPowWithIntegerCheck(r22,-1);
if(!x12066.valid){
continue;
}
CheckValue<IkReal> x12067=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12067.valid){
continue;
}
if( IKabs(((x12066.value)*(((((-1.0)*sj2*x12065))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12067.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12065)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12066.value)*(((((-1.0)*sj2*x12065))+((cj1*cj2))))))+IKsqr(((x12067.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12065))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12066.value)*(((((-1.0)*sj2*x12065))+((cj1*cj2))))), ((x12067.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12065))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12068=IKsin(j4);
IkReal x12069=IKcos(j4);
IkReal x12070=((1.0)*cj5);
IkReal x12071=(sj5*x12069);
IkReal x12072=(sj5*x12068);
evalcond[0]=((-1.0)*r22*x12069);
evalcond[1]=(((r22*x12068))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((r11*x12072))+(((-1.0)*r10*x12068*x12070)));
evalcond[3]=((((-1.0)*r00*x12069*x12070))+((r01*x12071)));
evalcond[4]=((1.0)+(((-1.0)*r00*x12068*x12070))+((r01*x12072)));
evalcond[5]=((((-1.0)*r10*x12069*x12070))+((cj2*sj1))+((r11*x12071))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12073=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12073);
rxp0_2=(py*r00);
rxp1_0=(r21*x12073);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12074=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12074)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12074)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12075=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12075);
rxp0_2=(py*r00);
rxp1_0=(r21*x12075);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12076=((1.0)*sj1);
CheckValue<IkReal> x12077=IKPowWithIntegerCheck(r12,-1);
if(!x12077.valid){
continue;
}
CheckValue<IkReal> x12078=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12078.valid){
continue;
}
if( IKabs(((x12077.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12076)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12078.value)*(((((-1.0)*sj2*x12076))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12077.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12076))))))+IKsqr(((x12078.value)*(((((-1.0)*sj2*x12076))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12077.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12076))))), ((x12078.value)*(((((-1.0)*sj2*x12076))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12079=IKsin(j4);
IkReal x12080=IKcos(j4);
IkReal x12081=((1.0)*cj5*r00);
IkReal x12082=(sj5*x12080);
IkReal x12083=(sj5*x12079);
IkReal x12084=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12080);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x12079)));
evalcond[2]=(((r21*x12083))+(((-1.0)*x12079*x12084)));
evalcond[3]=(((r01*x12082))+(((-1.0)*x12080*x12081)));
evalcond[4]=((1.0)+((r01*x12083))+(((-1.0)*x12079*x12081)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12080*x12084))+((r21*x12082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12085=((1.0)*cj5);
CheckValue<IkReal> x12086=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12085))),-1);
if(!x12086.valid){
continue;
}
CheckValue<IkReal> x12087=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12085))),-1);
if(!x12087.valid){
continue;
}
if( IKabs(((-1.0)*(x12086.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12087.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12086.value)))+IKsqr(((x12087.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12086.value)), ((x12087.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12088=IKsin(j4);
IkReal x12089=IKcos(j4);
IkReal x12090=((1.0)*cj5*r00);
IkReal x12091=(sj5*x12089);
IkReal x12092=(sj5*x12088);
IkReal x12093=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12089);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x12088)));
evalcond[2]=((((-1.0)*x12088*x12093))+((r21*x12092)));
evalcond[3]=(((r01*x12091))+(((-1.0)*x12089*x12090)));
evalcond[4]=((1.0)+((r01*x12092))+(((-1.0)*x12088*x12090)));
evalcond[5]=((((-1.0)*x12089*x12093))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12094=cj5*cj5;
IkReal x12095=r01*r01;
IkReal x12096=(r01*sj5);
IkReal x12097=(cj5*r00);
CheckValue<IkReal> x12098=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12095))+(((-1.0)*(r02*r02)))+((x12094*x12095))+(((2.0)*x12096*x12097))+(((-1.0)*x12094*(r00*r00))))),-1);
if(!x12098.valid){
continue;
}
CheckValue<IkReal> x12099 = IKatan2WithCheck(IkReal(((((-1.0)*x12097))+x12096)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12098.value)))+(x12099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12100=IKcos(j4);
IkReal x12101=IKsin(j4);
IkReal x12102=(cj5*r00);
IkReal x12103=(cj5*r10);
IkReal x12104=(r21*sj5);
IkReal x12105=(cj5*r20);
IkReal x12106=((1.0)*x12100);
IkReal x12107=((1.0)*x12101);
IkReal x12108=(sj5*x12101);
IkReal x12109=(sj5*x12100);
evalcond[0]=(((r02*x12101))+((r01*x12109))+(((-1.0)*x12102*x12106)));
evalcond[1]=((((-1.0)*r22*x12106))+((x12101*x12104))+(((-1.0)*x12105*x12107)));
evalcond[2]=((((-1.0)*r12*x12106))+(((-1.0)*x12103*x12107))+((r11*x12108)));
evalcond[3]=((1.0)+((r01*x12108))+(((-1.0)*x12102*x12107))+(((-1.0)*r02*x12106)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12103*x12106))+((r12*x12101))+((r11*x12109)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12100*x12104))+(((-1.0)*x12105*x12106))+((r22*x12101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12110=((1.0)*cj5);
CheckValue<IkReal> x12111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12110))+(((-1.0)*r20*sj5)))),-1);
if(!x12111.valid){
continue;
}
CheckValue<IkReal> x12112 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12110))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12111.value)))+(x12112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12113=IKcos(j4);
IkReal x12114=IKsin(j4);
IkReal x12115=(cj5*r00);
IkReal x12116=(cj5*r10);
IkReal x12117=(r21*sj5);
IkReal x12118=(cj5*r20);
IkReal x12119=((1.0)*x12113);
IkReal x12120=((1.0)*x12114);
IkReal x12121=(sj5*x12114);
IkReal x12122=(sj5*x12113);
evalcond[0]=(((r02*x12114))+(((-1.0)*x12115*x12119))+((r01*x12122)));
evalcond[1]=((((-1.0)*r22*x12119))+(((-1.0)*x12118*x12120))+((x12114*x12117)));
evalcond[2]=((((-1.0)*r12*x12119))+(((-1.0)*x12116*x12120))+((r11*x12121)));
evalcond[3]=((1.0)+((r01*x12121))+(((-1.0)*x12115*x12120))+(((-1.0)*r02*x12119)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12116*x12119))+((cj1*sj2))+((r12*x12114))+((r11*x12122)));
evalcond[5]=((((-1.0)*x12118*x12119))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12113*x12117))+((r22*x12114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12123 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12123.valid){
continue;
}
CheckValue<IkReal> x12124=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12123.value)+(((1.5707963267949)*(x12124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12125=IKcos(j4);
IkReal x12126=IKsin(j4);
IkReal x12127=(cj5*r00);
IkReal x12128=(cj5*r10);
IkReal x12129=(r21*sj5);
IkReal x12130=(cj5*r20);
IkReal x12131=((1.0)*x12125);
IkReal x12132=((1.0)*x12126);
IkReal x12133=(sj5*x12126);
IkReal x12134=(sj5*x12125);
evalcond[0]=(((r01*x12134))+(((-1.0)*x12127*x12131))+((r02*x12126)));
evalcond[1]=((((-1.0)*r22*x12131))+((x12126*x12129))+(((-1.0)*x12130*x12132)));
evalcond[2]=((((-1.0)*r12*x12131))+(((-1.0)*x12128*x12132))+((r11*x12133)));
evalcond[3]=((1.0)+((r01*x12133))+(((-1.0)*x12127*x12132))+(((-1.0)*r02*x12131)));
evalcond[4]=(((cj2*sj1))+((r12*x12126))+((cj1*sj2))+(((-1.0)*x12128*x12131))+((r11*x12134)));
evalcond[5]=(((x12125*x12129))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12126))+(((-1.0)*x12130*x12131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12136 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12136)==0){
continue;
}
IkReal x12135=pow(x12136,-0.5);
CheckValue<IkReal> x12137 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12137.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12137.value));
IkReal gconst25=((-1.0)*r11*x12135);
IkReal gconst26=(r10*x12135);
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12138.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
IkReal x12139=((-1.0)*(x12141.value));
IkReal x12140=x12135;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12139;
IkReal gconst24=x12139;
IkReal gconst25=((-1.0)*r11*x12140);
IkReal gconst26=(r10*x12140);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
IkReal x12142=((-1.0)*(x12144.value));
IkReal x12143=x12135;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12142;
IkReal gconst24=x12142;
IkReal gconst25=((-1.0)*r11*x12143);
IkReal gconst26=(r10*x12143);
CheckValue<IkReal> x12152=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12152.valid){
continue;
}
IkReal x12145=x12152.value;
IkReal x12146=(sj3*x12145);
IkReal x12147=(r20*x12146);
IkReal x12148=(r00*x12146);
IkReal x12149=(r01*x12146);
IkReal x12150=(r21*x12146);
IkReal x12151=(r10*r11*x12146);
j4eval[0]=IKsign((((r10*r11*r21*x12148))+((r00*x12147*(r10*r10)))+((r21*x12149*(r11*r11)))+((r01*r10*r11*x12147))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12153=gconst25*gconst25;
IkReal x12154=gconst26*gconst26;
IkReal x12155=(cj3*r20);
IkReal x12156=(gconst26*r01);
IkReal x12157=(r22*sj3);
IkReal x12158=(r20*sj3);
IkReal x12159=(r21*sj3);
IkReal x12160=((1.0)*cj3);
IkReal x12161=((1.0)*x12154);
IkReal x12162=(gconst25*gconst26*r00);
CheckValue<IkReal> x12163=IKPowWithIntegerCheck(IKsign((((cj3*r21*x12162))+(((-1.0)*r02*r22*x12160))+(((-1.0)*r01*r21*x12153*x12160))+(((-1.0)*r00*x12155*x12161))+((gconst25*x12155*x12156)))),-1);
if(!x12163.valid){
continue;
}
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal((((x12156*x12157))+((gconst25*r00*x12157)))),IkReal((((r00*x12153*x12159))+(((-1.0)*x12158*x12162))+((gconst25*x12156*x12159))+(((-1.0)*r01*x12158*x12161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12163.value)))+(x12164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12165=IKsin(j4);
IkReal x12166=IKcos(j4);
IkReal x12167=(cj2*sj1);
IkReal x12168=(cj1*sj2);
IkReal x12169=(gconst26*sj3);
IkReal x12170=(gconst25*sj3);
IkReal x12171=(gconst26*r10);
IkReal x12172=(gconst25*r11);
IkReal x12173=(sj1*sj2);
IkReal x12174=(cj3*gconst25);
IkReal x12175=(cj1*cj2);
IkReal x12176=(gconst26*r00);
IkReal x12177=(gconst26*r20);
IkReal x12178=(cj3*gconst26);
IkReal x12179=((1.0)*x12166);
IkReal x12180=((1.0)*x12165);
IkReal x12181=(cj3*x12165);
IkReal x12182=(gconst25*x12165);
IkReal x12183=(x12167+x12168);
evalcond[0]=((((-1.0)*r22*x12179))+((r21*x12182))+(((-1.0)*x12177*x12180)));
evalcond[1]=(((x12165*x12172))+(((-1.0)*x12171*x12180))+(((-1.0)*r12*x12179)));
evalcond[2]=((1.0)+(((-1.0)*x12176*x12180))+((r01*x12182))+(((-1.0)*r02*x12179)));
evalcond[3]=(((r01*x12166*x12174))+(((-1.0)*cj3*x12176*x12179))+((r00*x12170))+((r01*x12169))+((r02*x12181)));
evalcond[4]=(((r00*x12166*x12169))+(((-1.0)*r02*sj3*x12180))+((r01*x12178))+((r00*x12174))+(((-1.0)*r01*x12170*x12179)));
evalcond[5]=(((r21*x12169))+((r20*x12170))+((r22*x12181))+x12183+((r21*x12166*x12174))+(((-1.0)*cj3*x12177*x12179)));
evalcond[6]=(((r10*x12174))+((r10*x12166*x12169))+(((-1.0)*r12*sj3*x12180))+x12183+((r11*x12178))+(((-1.0)*r11*x12170*x12179)));
evalcond[7]=((((-1.0)*x12173))+((r12*x12181))+((r10*x12170))+x12175+((r11*x12169))+((cj3*x12166*x12172))+(((-1.0)*cj3*x12171*x12179)));
evalcond[8]=(((r21*x12178))+(((-1.0)*x12175))+((r20*x12174))+((r20*x12166*x12169))+x12173+(((-1.0)*r21*x12170*x12179))+(((-1.0)*r22*sj3*x12180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12184=gconst25*gconst25;
IkReal x12185=gconst26*gconst26;
IkReal x12186=(r01*sj3);
IkReal x12187=(gconst25*gconst26);
IkReal x12188=(cj3*r00);
IkReal x12189=(cj3*r01);
IkReal x12190=(r00*sj3);
IkReal x12191=(r21*x12184);
IkReal x12192=((1.0)*cj3*r20);
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal((((gconst25*r22*x12188))+((gconst26*r22*x12189)))),IkReal(((((-1.0)*r20*x12187*x12188))+(((-1.0)*r20*x12185*x12189))+((r21*x12187*x12189))+((x12188*x12191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
CheckValue<IkReal> x12194=IKPowWithIntegerCheck(IKsign((((r20*x12185*x12190))+((x12186*x12191))+(((-1.0)*r20*x12186*x12187))+(((-1.0)*r21*x12187*x12190))+((r02*r22*sj3)))),-1);
if(!x12194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12193.value)+(((1.5707963267949)*(x12194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12195=IKsin(j4);
IkReal x12196=IKcos(j4);
IkReal x12197=(cj2*sj1);
IkReal x12198=(cj1*sj2);
IkReal x12199=(gconst26*sj3);
IkReal x12200=(gconst25*sj3);
IkReal x12201=(gconst26*r10);
IkReal x12202=(gconst25*r11);
IkReal x12203=(sj1*sj2);
IkReal x12204=(cj3*gconst25);
IkReal x12205=(cj1*cj2);
IkReal x12206=(gconst26*r00);
IkReal x12207=(gconst26*r20);
IkReal x12208=(cj3*gconst26);
IkReal x12209=((1.0)*x12196);
IkReal x12210=((1.0)*x12195);
IkReal x12211=(cj3*x12195);
IkReal x12212=(gconst25*x12195);
IkReal x12213=(x12198+x12197);
evalcond[0]=((((-1.0)*r22*x12209))+(((-1.0)*x12207*x12210))+((r21*x12212)));
evalcond[1]=((((-1.0)*x12201*x12210))+(((-1.0)*r12*x12209))+((x12195*x12202)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12209))+(((-1.0)*x12206*x12210))+((r01*x12212)));
evalcond[3]=(((r02*x12211))+(((-1.0)*cj3*x12206*x12209))+((r01*x12196*x12204))+((r01*x12199))+((r00*x12200)));
evalcond[4]=(((r00*x12196*x12199))+(((-1.0)*r01*x12200*x12209))+(((-1.0)*r02*sj3*x12210))+((r01*x12208))+((r00*x12204)));
evalcond[5]=(((r22*x12211))+((r21*x12196*x12204))+((r21*x12199))+x12213+(((-1.0)*cj3*x12207*x12209))+((r20*x12200)));
evalcond[6]=((((-1.0)*r11*x12200*x12209))+(((-1.0)*r12*sj3*x12210))+x12213+((r10*x12204))+((r10*x12196*x12199))+((r11*x12208)));
evalcond[7]=((((-1.0)*x12203))+((r12*x12211))+((cj3*x12196*x12202))+((r11*x12199))+x12205+(((-1.0)*cj3*x12201*x12209))+((r10*x12200)));
evalcond[8]=((((-1.0)*x12205))+((r20*x12196*x12199))+x12203+(((-1.0)*r22*sj3*x12210))+((r21*x12208))+(((-1.0)*r21*x12200*x12209))+((r20*x12204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12214=((1.0)*gconst26);
CheckValue<IkReal> x12215 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst25*r11))+(((-1.0)*r10*x12214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12215.valid){
continue;
}
CheckValue<IkReal> x12216=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst25*r20))+(((-1.0)*r21*x12214)))),-1);
if(!x12216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12215.value)+(((1.5707963267949)*(x12216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12217=IKsin(j4);
IkReal x12218=IKcos(j4);
IkReal x12219=(cj2*sj1);
IkReal x12220=(cj1*sj2);
IkReal x12221=(gconst26*sj3);
IkReal x12222=(gconst25*sj3);
IkReal x12223=(gconst26*r10);
IkReal x12224=(gconst25*r11);
IkReal x12225=(sj1*sj2);
IkReal x12226=(cj3*gconst25);
IkReal x12227=(cj1*cj2);
IkReal x12228=(gconst26*r00);
IkReal x12229=(gconst26*r20);
IkReal x12230=(cj3*gconst26);
IkReal x12231=((1.0)*x12218);
IkReal x12232=((1.0)*x12217);
IkReal x12233=(cj3*x12217);
IkReal x12234=(gconst25*x12217);
IkReal x12235=(x12220+x12219);
evalcond[0]=((((-1.0)*r22*x12231))+(((-1.0)*x12229*x12232))+((r21*x12234)));
evalcond[1]=((((-1.0)*r12*x12231))+(((-1.0)*x12223*x12232))+((x12217*x12224)));
evalcond[2]=((1.0)+((r01*x12234))+(((-1.0)*r02*x12231))+(((-1.0)*x12228*x12232)));
evalcond[3]=(((r01*x12218*x12226))+(((-1.0)*cj3*x12228*x12231))+((r01*x12221))+((r02*x12233))+((r00*x12222)));
evalcond[4]=((((-1.0)*r02*sj3*x12232))+((r01*x12230))+(((-1.0)*r01*x12222*x12231))+((r00*x12218*x12221))+((r00*x12226)));
evalcond[5]=(((r21*x12218*x12226))+(((-1.0)*cj3*x12229*x12231))+x12235+((r21*x12221))+((r22*x12233))+((r20*x12222)));
evalcond[6]=(((r10*x12218*x12221))+x12235+((r11*x12230))+(((-1.0)*r12*sj3*x12232))+((r10*x12226))+(((-1.0)*r11*x12222*x12231)));
evalcond[7]=(((r11*x12221))+(((-1.0)*cj3*x12223*x12231))+((r12*x12233))+x12227+((r10*x12222))+(((-1.0)*x12225))+((cj3*x12218*x12224)));
evalcond[8]=((((-1.0)*r21*x12222*x12231))+x12225+((r20*x12218*x12221))+(((-1.0)*r22*sj3*x12232))+((r20*x12226))+(((-1.0)*x12227))+((r21*x12230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12237 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12237)==0){
continue;
}
IkReal x12236=pow(x12237,-0.5);
CheckValue<IkReal> x12238 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12238.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12238.value))));
IkReal gconst28=((1.0)*r11*x12236);
IkReal gconst29=((-1.0)*r10*x12236);
CheckValue<IkReal> x12239 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12239.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12239.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12242.valid){
continue;
}
IkReal x12240=((1.0)*(x12242.value));
IkReal x12241=x12236;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12240)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12240)));
IkReal gconst28=((1.0)*r11*x12241);
IkReal gconst29=((-1.0)*r10*x12241);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12243=gconst29*gconst29;
IkReal x12244=gconst28*gconst28;
IkReal x12245=(cj3*r01);
IkReal x12246=(cj3*r00);
IkReal x12247=(r00*sj3);
IkReal x12248=(r01*sj3);
IkReal x12249=(gconst28*gconst29);
IkReal x12250=((1.0)*r20);
IkReal x12251=(r20*x12243);
IkReal x12252=(r21*x12244);
CheckValue<IkReal> x12253 = IKatan2WithCheck(IkReal((((gconst29*r22*x12245))+((gconst28*r22*x12246)))),IkReal(((((-1.0)*x12243*x12245*x12250))+((x12246*x12252))+(((-1.0)*x12246*x12249*x12250))+((r21*x12245*x12249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12253.valid){
continue;
}
CheckValue<IkReal> x12254=IKPowWithIntegerCheck(IKsign((((x12247*x12251))+(((-1.0)*r21*x12247*x12249))+((x12248*x12252))+(((-1.0)*x12248*x12249*x12250))+((r02*r22*sj3)))),-1);
if(!x12254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12253.value)+(((1.5707963267949)*(x12254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12255=IKsin(j4);
IkReal x12256=IKcos(j4);
IkReal x12257=(cj2*sj1);
IkReal x12258=(cj1*sj2);
IkReal x12259=(gconst29*r20);
IkReal x12260=(gconst28*r20);
IkReal x12261=(sj1*sj2);
IkReal x12262=(cj1*cj2);
IkReal x12263=(r11*sj3);
IkReal x12264=(gconst29*r01);
IkReal x12265=(gconst29*r10);
IkReal x12266=(cj3*gconst28);
IkReal x12267=(cj3*gconst29);
IkReal x12268=(gconst28*sj3);
IkReal x12269=(gconst29*r00);
IkReal x12270=((1.0)*x12256);
IkReal x12271=((1.0)*x12255);
IkReal x12272=(gconst28*x12255);
IkReal x12273=(cj3*x12255);
IkReal x12274=(sj3*x12256);
IkReal x12275=(x12257+x12258);
evalcond[0]=(((r21*x12272))+(((-1.0)*x12259*x12271))+(((-1.0)*r22*x12270)));
evalcond[1]=((((-1.0)*x12265*x12271))+(((-1.0)*r12*x12270))+((r11*x12272)));
evalcond[2]=((1.0)+(((-1.0)*x12269*x12271))+(((-1.0)*r02*x12270))+((r01*x12272)));
evalcond[3]=((((-1.0)*r00*x12267*x12270))+((r00*x12268))+((r02*x12273))+((sj3*x12264))+((r01*x12256*x12266)));
evalcond[4]=(((cj3*x12264))+(((-1.0)*r01*x12268*x12270))+((x12269*x12274))+(((-1.0)*r02*sj3*x12271))+((r00*x12266)));
evalcond[5]=(((gconst29*r21*sj3))+(((-1.0)*cj3*x12259*x12270))+((r21*x12256*x12266))+x12275+((r22*x12273))+((sj3*x12260)));
evalcond[6]=((((-1.0)*r12*sj3*x12271))+((r10*x12266))+(((-1.0)*gconst28*x12263*x12270))+((r11*x12267))+x12275+((x12265*x12274)));
evalcond[7]=(((r10*x12268))+((gconst29*x12263))+x12262+(((-1.0)*x12261))+(((-1.0)*cj3*x12265*x12270))+((r12*x12273))+((r11*x12256*x12266)));
evalcond[8]=(((cj3*x12260))+x12261+((x12259*x12274))+(((-1.0)*x12262))+(((-1.0)*r22*sj3*x12271))+((r21*x12267))+(((-1.0)*r21*x12268*x12270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12276=((1.0)*gconst29);
CheckValue<IkReal> x12277=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x12276)))),-1);
if(!x12277.valid){
continue;
}
CheckValue<IkReal> x12278 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12276))+((gconst28*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12277.value)))+(x12278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12279=IKsin(j4);
IkReal x12280=IKcos(j4);
IkReal x12281=(cj2*sj1);
IkReal x12282=(cj1*sj2);
IkReal x12283=(gconst29*r20);
IkReal x12284=(gconst28*r20);
IkReal x12285=(sj1*sj2);
IkReal x12286=(cj1*cj2);
IkReal x12287=(r11*sj3);
IkReal x12288=(gconst29*r01);
IkReal x12289=(gconst29*r10);
IkReal x12290=(cj3*gconst28);
IkReal x12291=(cj3*gconst29);
IkReal x12292=(gconst28*sj3);
IkReal x12293=(gconst29*r00);
IkReal x12294=((1.0)*x12280);
IkReal x12295=((1.0)*x12279);
IkReal x12296=(gconst28*x12279);
IkReal x12297=(cj3*x12279);
IkReal x12298=(sj3*x12280);
IkReal x12299=(x12282+x12281);
evalcond[0]=(((r21*x12296))+(((-1.0)*x12283*x12295))+(((-1.0)*r22*x12294)));
evalcond[1]=(((r11*x12296))+(((-1.0)*x12289*x12295))+(((-1.0)*r12*x12294)));
evalcond[2]=((1.0)+((r01*x12296))+(((-1.0)*r02*x12294))+(((-1.0)*x12293*x12295)));
evalcond[3]=(((r01*x12280*x12290))+((r00*x12292))+((r02*x12297))+(((-1.0)*r00*x12291*x12294))+((sj3*x12288)));
evalcond[4]=((((-1.0)*r02*sj3*x12295))+(((-1.0)*r01*x12292*x12294))+((r00*x12290))+((x12293*x12298))+((cj3*x12288)));
evalcond[5]=(((gconst29*r21*sj3))+x12299+((r22*x12297))+((r21*x12280*x12290))+(((-1.0)*cj3*x12283*x12294))+((sj3*x12284)));
evalcond[6]=(((r10*x12290))+x12299+((r11*x12291))+(((-1.0)*gconst28*x12287*x12294))+(((-1.0)*r12*sj3*x12295))+((x12289*x12298)));
evalcond[7]=(((r10*x12292))+x12286+(((-1.0)*x12285))+((r12*x12297))+(((-1.0)*cj3*x12289*x12294))+((gconst29*x12287))+((r11*x12280*x12290)));
evalcond[8]=(((x12283*x12298))+(((-1.0)*r22*sj3*x12295))+((r21*x12291))+(((-1.0)*r21*x12292*x12294))+x12285+(((-1.0)*x12286))+((cj3*x12284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12300=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12300);
rxp0_2=(py*r00);
rxp1_0=(r21*x12300);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12301=(cj5*r00);
IkReal x12302=(r01*sj5);
j4eval[0]=((((-1.0)*x12301))+x12302);
j4eval[1]=((((-1.0)*sj3*x12302))+((sj3*x12301)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12303=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12303);
rxp0_2=(py*r00);
rxp1_0=(r21*x12303);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12304=(r01*sj5);
IkReal x12305=((1.0)*cj5*r00);
j4eval[0]=(x12304+(((-1.0)*x12305)));
j4eval[1]=(((cj3*x12304))+(((-1.0)*cj3*x12305)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12306=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12306);
rxp0_2=(py*r00);
rxp1_0=(r21*x12306);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12307=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12307);
rxp0_2=(py*r00);
rxp1_0=(r21*x12307);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12308=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12308);
rxp0_2=(py*r00);
rxp1_0=(r21*x12308);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal x12309=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12309)));
j4eval[1]=((((-1.0)*r20*x12309))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12310=((1.0)*cj5);
CheckValue<IkReal> x12311=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12310))),-1);
if(!x12311.valid){
continue;
}
CheckValue<IkReal> x12312=IKPowWithIntegerCheck(((((-1.0)*r20*x12310))+((r21*sj5))),-1);
if(!x12312.valid){
continue;
}
if( IKabs(((-1.0)*(x12311.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12312.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12311.value)))+IKsqr(((x12312.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12311.value)), ((x12312.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12313=IKsin(j4);
IkReal x12314=IKcos(j4);
IkReal x12315=((1.0)*cj5*r00);
IkReal x12316=(sj5*x12314);
IkReal x12317=(sj5*x12313);
IkReal x12318=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12314);
evalcond[1]=(((r12*x12313))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x12313*x12318))+((r21*x12317)));
evalcond[3]=((((-1.0)*x12314*x12315))+((r01*x12316)));
evalcond[4]=((1.0)+(((-1.0)*x12313*x12315))+((r01*x12317)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12314*x12318))+((cj1*sj2))+((r21*x12316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12319=((1.0)*cj2);
CheckValue<IkReal> x12320=IKPowWithIntegerCheck(r12,-1);
if(!x12320.valid){
continue;
}
CheckValue<IkReal> x12321=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12321.valid){
continue;
}
if( IKabs(((x12320.value)*(((((-1.0)*cj1*x12319))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12321.value)*(((((-1.0)*sj1*x12319))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12320.value)*(((((-1.0)*cj1*x12319))+((sj1*sj2))))))+IKsqr(((x12321.value)*(((((-1.0)*sj1*x12319))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12320.value)*(((((-1.0)*cj1*x12319))+((sj1*sj2))))), ((x12321.value)*(((((-1.0)*sj1*x12319))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12322=IKsin(j4);
IkReal x12323=IKcos(j4);
IkReal x12324=((1.0)*cj5*r00);
IkReal x12325=(sj5*x12323);
IkReal x12326=(sj5*x12322);
IkReal x12327=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12323);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x12322))+((cj1*cj2)));
evalcond[2]=(((r21*x12326))+(((-1.0)*x12322*x12327)));
evalcond[3]=(((r01*x12325))+(((-1.0)*x12323*x12324)));
evalcond[4]=((1.0)+((r01*x12326))+(((-1.0)*x12322*x12324)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x12325))+(((-1.0)*x12323*x12327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12328=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12328);
rxp0_2=(py*r00);
rxp1_0=(r21*x12328);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12329=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12329);
rxp0_2=(py*r00);
rxp1_0=(r21*x12329);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12330=((1.0)*sj1);
CheckValue<IkReal> x12331=IKPowWithIntegerCheck(r12,-1);
if(!x12331.valid){
continue;
}
CheckValue<IkReal> x12332=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12332.valid){
continue;
}
if( IKabs(((x12331.value)*(((((-1.0)*sj2*x12330))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12332.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12330)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12331.value)*(((((-1.0)*sj2*x12330))+((cj1*cj2))))))+IKsqr(((x12332.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12330))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12331.value)*(((((-1.0)*sj2*x12330))+((cj1*cj2))))), ((x12332.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12330))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12333=IKsin(j4);
IkReal x12334=IKcos(j4);
IkReal x12335=(cj5*r00);
IkReal x12336=(cj5*r20);
IkReal x12337=(r21*sj5);
IkReal x12338=(r01*sj5);
IkReal x12339=((1.0)*x12333);
IkReal x12340=((1.0)*x12334);
evalcond[0]=((-1.0)*r12*x12334);
evalcond[1]=(((x12333*x12337))+(((-1.0)*x12336*x12339)));
evalcond[2]=((((-1.0)*x12338*x12340))+((x12334*x12335)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x12339)));
evalcond[4]=((1.0)+((x12333*x12338))+(((-1.0)*x12335*x12339)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12337*x12340))+((cj1*sj2))+((x12334*x12336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12341=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12341.valid){
continue;
}
CheckValue<IkReal> x12342=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12342.valid){
continue;
}
if( IKabs(((-1.0)*(x12341.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12342.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12341.value)))+IKsqr(((x12342.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12341.value)), ((x12342.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12343=IKsin(j4);
IkReal x12344=IKcos(j4);
IkReal x12345=(cj5*r00);
IkReal x12346=(cj5*r20);
IkReal x12347=(r21*sj5);
IkReal x12348=(r01*sj5);
IkReal x12349=((1.0)*x12343);
IkReal x12350=((1.0)*x12344);
evalcond[0]=((-1.0)*r12*x12344);
evalcond[1]=((((-1.0)*x12346*x12349))+((x12343*x12347)));
evalcond[2]=((((-1.0)*x12348*x12350))+((x12344*x12345)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12349))+((cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*x12345*x12349))+((x12343*x12348)));
evalcond[5]=(((cj2*sj1))+((x12344*x12346))+((cj1*sj2))+(((-1.0)*x12347*x12350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12351=((1.0)*r01);
CheckValue<IkReal> x12352=IKPowWithIntegerCheck(r12,-1);
if(!x12352.valid){
continue;
}
CheckValue<IkReal> x12353=IKPowWithIntegerCheck(sj3,-1);
if(!x12353.valid){
continue;
}
CheckValue<IkReal> x12354=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x12351))),-1);
if(!x12354.valid){
continue;
}
if( IKabs(((x12352.value)*(x12353.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12354.value)*(((((-1.0)*cj3*cj5*x12351))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12352.value)*(x12353.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12354.value)*(((((-1.0)*cj3*cj5*x12351))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12352.value)*(x12353.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12354.value)*(((((-1.0)*cj3*cj5*x12351))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12355=IKsin(j4);
IkReal x12356=IKcos(j4);
IkReal x12357=(cj2*sj1);
IkReal x12358=(cj1*sj2);
IkReal x12359=(sj1*sj2);
IkReal x12360=(cj5*sj3);
IkReal x12361=(cj3*cj5);
IkReal x12362=(r21*sj5);
IkReal x12363=(cj1*cj2);
IkReal x12364=(r00*sj5);
IkReal x12365=(r01*sj5);
IkReal x12366=(r20*sj5);
IkReal x12367=((1.0)*x12355);
IkReal x12368=(r20*x12356);
IkReal x12369=(r00*x12356);
IkReal x12370=(cj3*x12356);
IkReal x12371=(x12358+x12357);
IkReal x12372=((1.0)*sj3*x12356);
evalcond[0]=((-1.0)*r12*x12356);
evalcond[1]=((((-1.0)*cj5*r20*x12367))+((x12355*x12362)));
evalcond[2]=(x12371+(((-1.0)*r12*sj3*x12367)));
evalcond[3]=((((-1.0)*x12359))+x12363+((cj3*r12*x12355)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12367))+((x12355*x12365)));
evalcond[5]=((((-1.0)*x12365*x12372))+((cj3*x12364))+((x12360*x12369))+((r01*x12361)));
evalcond[6]=(((x12365*x12370))+((sj3*x12364))+(((-1.0)*x12361*x12369))+((r01*x12360)));
evalcond[7]=(x12371+((sj3*x12366))+((x12362*x12370))+(((-1.0)*x12361*x12368))+((r21*x12360)));
evalcond[8]=(x12359+((r21*x12361))+((cj3*x12366))+(((-1.0)*x12363))+((x12360*x12368))+(((-1.0)*x12362*x12372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12373=((1.0)*r00);
IkReal x12374=(r01*sj5);
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(((((-1.0)*cj5*x12373))+x12374),-1);
if(!x12375.valid){
continue;
}
CheckValue<IkReal> x12376=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x12373))+((cj3*x12374))),-1);
if(!x12376.valid){
continue;
}
if( IKabs(((-1.0)*(x12375.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12376.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12373)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12375.value)))+IKsqr(((x12376.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12373))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12375.value)), ((x12376.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x12373))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12377=IKsin(j4);
IkReal x12378=IKcos(j4);
IkReal x12379=(cj2*sj1);
IkReal x12380=(cj1*sj2);
IkReal x12381=(sj1*sj2);
IkReal x12382=(cj5*sj3);
IkReal x12383=(cj3*cj5);
IkReal x12384=(r21*sj5);
IkReal x12385=(cj1*cj2);
IkReal x12386=(r00*sj5);
IkReal x12387=(r01*sj5);
IkReal x12388=(r20*sj5);
IkReal x12389=((1.0)*x12377);
IkReal x12390=(r20*x12378);
IkReal x12391=(r00*x12378);
IkReal x12392=(cj3*x12378);
IkReal x12393=(x12379+x12380);
IkReal x12394=((1.0)*sj3*x12378);
evalcond[0]=((-1.0)*r12*x12378);
evalcond[1]=(((x12377*x12384))+(((-1.0)*cj5*r20*x12389)));
evalcond[2]=(x12393+(((-1.0)*r12*sj3*x12389)));
evalcond[3]=(((cj3*r12*x12377))+x12385+(((-1.0)*x12381)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12389))+((x12377*x12387)));
evalcond[5]=(((cj3*x12386))+((r01*x12383))+((x12382*x12391))+(((-1.0)*x12387*x12394)));
evalcond[6]=((((-1.0)*x12383*x12391))+((r01*x12382))+((x12387*x12392))+((sj3*x12386)));
evalcond[7]=((((-1.0)*x12383*x12390))+x12393+((x12384*x12392))+((r21*x12382))+((sj3*x12388)));
evalcond[8]=(((cj3*x12388))+x12381+((x12382*x12390))+((r21*x12383))+(((-1.0)*x12385))+(((-1.0)*x12384*x12394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12395=((1.0)*r01);
IkReal x12396=(cj5*r00);
CheckValue<IkReal> x12397=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x12396))),-1);
if(!x12397.valid){
continue;
}
CheckValue<IkReal> x12398=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x12395))+((sj3*x12396))),-1);
if(!x12398.valid){
continue;
}
if( IKabs(((-1.0)*(x12397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12398.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12395)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12397.value)))+IKsqr(((x12398.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12395))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12397.value)), ((x12398.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12395))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12399=IKsin(j4);
IkReal x12400=IKcos(j4);
IkReal x12401=(cj2*sj1);
IkReal x12402=(cj1*sj2);
IkReal x12403=(sj1*sj2);
IkReal x12404=(cj5*sj3);
IkReal x12405=(cj3*cj5);
IkReal x12406=(r21*sj5);
IkReal x12407=(cj1*cj2);
IkReal x12408=(r00*sj5);
IkReal x12409=(r01*sj5);
IkReal x12410=(r20*sj5);
IkReal x12411=((1.0)*x12399);
IkReal x12412=(r20*x12400);
IkReal x12413=(r00*x12400);
IkReal x12414=(cj3*x12400);
IkReal x12415=(x12401+x12402);
IkReal x12416=((1.0)*sj3*x12400);
evalcond[0]=((-1.0)*r12*x12400);
evalcond[1]=((((-1.0)*cj5*r20*x12411))+((x12399*x12406)));
evalcond[2]=((((-1.0)*r12*sj3*x12411))+x12415);
evalcond[3]=(((cj3*r12*x12399))+x12407+(((-1.0)*x12403)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12411))+((x12399*x12409)));
evalcond[5]=(((x12404*x12413))+(((-1.0)*x12409*x12416))+((cj3*x12408))+((r01*x12405)));
evalcond[6]=(((x12409*x12414))+((sj3*x12408))+(((-1.0)*x12405*x12413))+((r01*x12404)));
evalcond[7]=(((sj3*x12410))+((x12406*x12414))+((r21*x12404))+(((-1.0)*x12405*x12412))+x12415);
evalcond[8]=(((cj3*x12410))+(((-1.0)*x12406*x12416))+((x12404*x12412))+((r21*x12405))+x12403+(((-1.0)*x12407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12417=cj5*cj5;
IkReal x12418=(cj3*r20);
IkReal x12419=(r21*sj3);
IkReal x12420=((1.0)*cj3);
IkReal x12421=(r01*r21);
IkReal x12422=(r01*sj3);
IkReal x12423=(r00*sj5);
IkReal x12424=(cj5*r01*sj5);
IkReal x12425=((1.0)*x12417);
CheckValue<IkReal> x12426=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x12423))+(((-1.0)*r02*r22*x12420))+(((-1.0)*x12420*x12421))+((x12418*x12424))+(((-1.0)*r00*x12418*x12425))+((cj3*x12417*x12421)))),-1);
if(!x12426.valid){
continue;
}
CheckValue<IkReal> x12427 = IKatan2WithCheck(IkReal((((r22*sj3*x12423))+((cj5*r22*x12422)))),IkReal(((((-1.0)*r00*x12419*x12425))+((r00*x12419))+(((-1.0)*r20*x12422*x12425))+((x12419*x12424))+(((-1.0)*cj5*r20*sj3*x12423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12426.value)))+(x12427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12428=IKsin(j4);
IkReal x12429=IKcos(j4);
IkReal x12430=(cj2*sj1);
IkReal x12431=(cj1*sj2);
IkReal x12432=(r11*sj5);
IkReal x12433=(cj5*r10);
IkReal x12434=(sj1*sj2);
IkReal x12435=(cj5*r01);
IkReal x12436=(cj5*r00);
IkReal x12437=(cj3*sj5);
IkReal x12438=(r21*sj5);
IkReal x12439=(cj1*cj2);
IkReal x12440=(cj5*sj3);
IkReal x12441=(sj3*sj5);
IkReal x12442=(r01*sj5);
IkReal x12443=(cj3*cj5);
IkReal x12444=(cj5*r20);
IkReal x12445=((1.0)*x12429);
IkReal x12446=((1.0)*x12428);
IkReal x12447=(cj3*x12429);
IkReal x12448=(sj3*x12429);
IkReal x12449=(cj3*x12428);
IkReal x12450=(x12431+x12430);
evalcond[0]=(((x12428*x12438))+(((-1.0)*x12444*x12446))+(((-1.0)*r22*x12445)));
evalcond[1]=((((-1.0)*x12433*x12446))+((x12428*x12432))+(((-1.0)*r12*x12445)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12445))+((x12428*x12442))+(((-1.0)*x12436*x12446)));
evalcond[3]=(((r00*x12441))+(((-1.0)*cj3*x12436*x12445))+((r02*x12449))+((r01*x12429*x12437))+((sj3*x12435)));
evalcond[4]=(((cj3*x12435))+(((-1.0)*r01*x12441*x12445))+(((-1.0)*r02*sj3*x12446))+((r00*x12437))+((x12436*x12448)));
evalcond[5]=(((r21*x12440))+(((-1.0)*r20*x12443*x12445))+((r22*x12449))+((r21*x12429*x12437))+x12450+((r20*x12441)));
evalcond[6]=((((-1.0)*r12*sj3*x12446))+((x12433*x12448))+((r10*x12437))+((r11*x12443))+x12450+(((-1.0)*sj3*x12432*x12445)));
evalcond[7]=((((-1.0)*cj3*x12433*x12445))+((r11*x12440))+((r12*x12449))+((r10*x12441))+x12439+((x12432*x12447))+(((-1.0)*x12434)));
evalcond[8]=(((r20*x12437))+(((-1.0)*sj3*x12438*x12445))+(((-1.0)*r22*sj3*x12446))+((r21*x12443))+x12434+((r20*x12429*x12440))+(((-1.0)*x12439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12451=((1.0)*cj5);
CheckValue<IkReal> x12452 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12451))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12452.valid){
continue;
}
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12451))+(((-1.0)*r20*sj5)))),-1);
if(!x12453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12452.value)+(((1.5707963267949)*(x12453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12454=IKsin(j4);
IkReal x12455=IKcos(j4);
IkReal x12456=(cj2*sj1);
IkReal x12457=(cj1*sj2);
IkReal x12458=(r11*sj5);
IkReal x12459=(cj5*r10);
IkReal x12460=(sj1*sj2);
IkReal x12461=(cj5*r01);
IkReal x12462=(cj5*r00);
IkReal x12463=(cj3*sj5);
IkReal x12464=(r21*sj5);
IkReal x12465=(cj1*cj2);
IkReal x12466=(cj5*sj3);
IkReal x12467=(sj3*sj5);
IkReal x12468=(r01*sj5);
IkReal x12469=(cj3*cj5);
IkReal x12470=(cj5*r20);
IkReal x12471=((1.0)*x12455);
IkReal x12472=((1.0)*x12454);
IkReal x12473=(cj3*x12455);
IkReal x12474=(sj3*x12455);
IkReal x12475=(cj3*x12454);
IkReal x12476=(x12457+x12456);
evalcond[0]=((((-1.0)*r22*x12471))+((x12454*x12464))+(((-1.0)*x12470*x12472)));
evalcond[1]=((((-1.0)*x12459*x12472))+((x12454*x12458))+(((-1.0)*r12*x12471)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12471))+((x12454*x12468))+(((-1.0)*x12462*x12472)));
evalcond[3]=(((r00*x12467))+((sj3*x12461))+(((-1.0)*cj3*x12462*x12471))+((r02*x12475))+((r01*x12455*x12463)));
evalcond[4]=(((x12462*x12474))+((cj3*x12461))+((r00*x12463))+(((-1.0)*r01*x12467*x12471))+(((-1.0)*r02*sj3*x12472)));
evalcond[5]=(((r21*x12455*x12463))+(((-1.0)*r20*x12469*x12471))+((r20*x12467))+((r22*x12475))+x12476+((r21*x12466)));
evalcond[6]=(((r11*x12469))+(((-1.0)*sj3*x12458*x12471))+(((-1.0)*r12*sj3*x12472))+((x12459*x12474))+x12476+((r10*x12463)));
evalcond[7]=((((-1.0)*x12460))+((r12*x12475))+((r11*x12466))+(((-1.0)*cj3*x12459*x12471))+((x12458*x12473))+x12465+((r10*x12467)));
evalcond[8]=((((-1.0)*sj3*x12464*x12471))+((r20*x12455*x12466))+((r20*x12463))+(((-1.0)*x12465))+(((-1.0)*r22*sj3*x12472))+x12460+((r21*x12469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12477 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12477.valid){
continue;
}
CheckValue<IkReal> x12478=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12477.value)+(((1.5707963267949)*(x12478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12479=IKsin(j4);
IkReal x12480=IKcos(j4);
IkReal x12481=(cj2*sj1);
IkReal x12482=(cj1*sj2);
IkReal x12483=(r11*sj5);
IkReal x12484=(cj5*r10);
IkReal x12485=(sj1*sj2);
IkReal x12486=(cj5*r01);
IkReal x12487=(cj5*r00);
IkReal x12488=(cj3*sj5);
IkReal x12489=(r21*sj5);
IkReal x12490=(cj1*cj2);
IkReal x12491=(cj5*sj3);
IkReal x12492=(sj3*sj5);
IkReal x12493=(r01*sj5);
IkReal x12494=(cj3*cj5);
IkReal x12495=(cj5*r20);
IkReal x12496=((1.0)*x12480);
IkReal x12497=((1.0)*x12479);
IkReal x12498=(cj3*x12480);
IkReal x12499=(sj3*x12480);
IkReal x12500=(cj3*x12479);
IkReal x12501=(x12481+x12482);
evalcond[0]=(((x12479*x12489))+(((-1.0)*r22*x12496))+(((-1.0)*x12495*x12497)));
evalcond[1]=(((x12479*x12483))+(((-1.0)*r12*x12496))+(((-1.0)*x12484*x12497)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12496))+(((-1.0)*x12487*x12497))+((x12479*x12493)));
evalcond[3]=(((r00*x12492))+(((-1.0)*cj3*x12487*x12496))+((sj3*x12486))+((r02*x12500))+((r01*x12480*x12488)));
evalcond[4]=(((x12487*x12499))+((r00*x12488))+((cj3*x12486))+(((-1.0)*r02*sj3*x12497))+(((-1.0)*r01*x12492*x12496)));
evalcond[5]=((((-1.0)*r20*x12494*x12496))+((r20*x12492))+((r21*x12480*x12488))+((r21*x12491))+x12501+((r22*x12500)));
evalcond[6]=((((-1.0)*r12*sj3*x12497))+((x12484*x12499))+x12501+((r10*x12488))+(((-1.0)*sj3*x12483*x12496))+((r11*x12494)));
evalcond[7]=(((r10*x12492))+(((-1.0)*x12485))+((x12483*x12498))+x12490+((r12*x12500))+((r11*x12491))+(((-1.0)*cj3*x12484*x12496)));
evalcond[8]=(((r20*x12480*x12491))+((r21*x12494))+((r20*x12488))+(((-1.0)*sj3*x12489*x12496))+x12485+(((-1.0)*r22*sj3*x12497))+(((-1.0)*x12490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12502=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12502;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12503=((1.0)*cj5);
IkReal x12504=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12503)));
j4eval[0]=x12504;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12503)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12505=cj5*cj5;
IkReal x12506=(cj3*r01);
IkReal x12507=(cj5*sj5);
IkReal x12508=((1.0)*cj3);
IkReal x12509=((((-1.0)*r00*r20*x12505*x12508))+((r21*x12505*x12506))+(((-1.0)*r21*x12506))+(((-1.0)*r02*r22*x12508))+((r20*x12506*x12507))+((cj3*r00*r21*x12507)));
j4eval[0]=x12509;
j4eval[1]=IKsign(x12509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12510=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12510;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12511=((1.0)*cj5);
IkReal x12512=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12511)));
j4eval[0]=x12512;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12511))))));
j4eval[2]=IKsign(x12512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12513=cj5*cj5;
IkReal x12514=r01*r01;
IkReal x12515=(r01*sj5);
IkReal x12516=(cj5*r00);
IkReal x12517=((((2.0)*x12515*x12516))+(((-1.0)*(r02*r02)))+(((-1.0)*x12514))+(((-1.0)*x12513*(r00*r00)))+((x12513*x12514)));
j4eval[0]=x12517;
j4eval[1]=IKsign(x12517);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12515))+x12516))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12518=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12518);
rxp0_2=(py*r00);
rxp1_0=(r21*x12518);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12519=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12519);
rxp0_2=(py*r00);
rxp1_0=(r21*x12519);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12520=((1.0)*sj1);
CheckValue<IkReal> x12521=IKPowWithIntegerCheck(r12,-1);
if(!x12521.valid){
continue;
}
CheckValue<IkReal> x12522=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12522.valid){
continue;
}
if( IKabs(((x12521.value)*(((((-1.0)*cj2*x12520))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12522.value)*((((cj1*cj2))+(((-1.0)*sj2*x12520)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12521.value)*(((((-1.0)*cj2*x12520))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12522.value)*((((cj1*cj2))+(((-1.0)*sj2*x12520))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12521.value)*(((((-1.0)*cj2*x12520))+(((-1.0)*cj1*sj2))))), ((x12522.value)*((((cj1*cj2))+(((-1.0)*sj2*x12520))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12523=IKsin(j4);
IkReal x12524=IKcos(j4);
IkReal x12525=((1.0)*cj1);
IkReal x12526=(r21*sj5);
IkReal x12527=(r01*sj5);
IkReal x12528=(cj5*x12524);
IkReal x12529=((1.0)*x12524);
IkReal x12530=((1.0)*cj5*x12523);
evalcond[0]=((-1.0)*r12*x12524);
evalcond[1]=((((-1.0)*r20*x12530))+((x12523*x12526)));
evalcond[2]=(((r00*x12528))+(((-1.0)*x12527*x12529)));
evalcond[3]=((-1.0)+((x12523*x12527))+(((-1.0)*r00*x12530)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x12523))+(((-1.0)*sj2*x12525)));
evalcond[5]=((((-1.0)*cj2*x12525))+((sj1*sj2))+((r20*x12528))+(((-1.0)*x12526*x12529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12531=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12531.valid){
continue;
}
CheckValue<IkReal> x12532=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12532.valid){
continue;
}
if( IKabs(x12531.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12532.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12531.value)+IKsqr(((x12532.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12531.value, ((x12532.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12533=IKsin(j4);
IkReal x12534=IKcos(j4);
IkReal x12535=((1.0)*cj1);
IkReal x12536=(r21*sj5);
IkReal x12537=(r01*sj5);
IkReal x12538=(cj5*x12534);
IkReal x12539=((1.0)*x12534);
IkReal x12540=((1.0)*cj5*x12533);
evalcond[0]=((-1.0)*r12*x12534);
evalcond[1]=((((-1.0)*r20*x12540))+((x12533*x12536)));
evalcond[2]=(((r00*x12538))+(((-1.0)*x12537*x12539)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12540))+((x12533*x12537)));
evalcond[4]=((((-1.0)*r12*x12533))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12535)));
evalcond[5]=(((r20*x12538))+((sj1*sj2))+(((-1.0)*cj2*x12535))+(((-1.0)*x12536*x12539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12541=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12541);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12541);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12542=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12542);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12542);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12543=IKPowWithIntegerCheck(r22,-1);
if(!x12543.valid){
continue;
}
CheckValue<IkReal> x12544=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12544.valid){
continue;
}
if( IKabs(((x12543.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12544.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12543.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12544.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12543.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12544.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12545=IKsin(j4);
IkReal x12546=IKcos(j4);
IkReal x12547=((1.0)*cj2);
IkReal x12548=(cj5*x12546);
IkReal x12549=(sj5*x12545);
IkReal x12550=((1.0)*sj5*x12546);
IkReal x12551=((1.0)*cj5*x12545);
evalcond[0]=((-1.0)*r22*x12546);
evalcond[1]=((((-1.0)*r10*x12551))+((r11*x12549)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12547))+(((-1.0)*r22*x12545)));
evalcond[3]=(((r00*x12548))+(((-1.0)*r01*x12550)));
evalcond[4]=((-1.0)+((r01*x12549))+(((-1.0)*r00*x12551)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r10*x12548))+(((-1.0)*sj1*x12547))+(((-1.0)*r11*x12550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12552=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12552.valid){
continue;
}
CheckValue<IkReal> x12553=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12553.valid){
continue;
}
if( IKabs(x12552.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12553.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12552.value)+IKsqr(((x12553.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12552.value, ((x12553.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12554=IKsin(j4);
IkReal x12555=IKcos(j4);
IkReal x12556=((1.0)*cj2);
IkReal x12557=(cj5*x12555);
IkReal x12558=(sj5*x12554);
IkReal x12559=((1.0)*sj5*x12555);
IkReal x12560=((1.0)*cj5*x12554);
evalcond[0]=((-1.0)*r22*x12555);
evalcond[1]=(((r11*x12558))+(((-1.0)*r10*x12560)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12556))+(((-1.0)*r22*x12554)));
evalcond[3]=(((r00*x12557))+(((-1.0)*r01*x12559)));
evalcond[4]=((-1.0)+((r01*x12558))+(((-1.0)*r00*x12560)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r10*x12557))+(((-1.0)*sj1*x12556))+(((-1.0)*r11*x12559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12561=cj5*cj5;
IkReal x12562=r01*r01;
IkReal x12563=(r01*sj5);
IkReal x12564=(cj5*r00);
CheckValue<IkReal> x12565 = IKatan2WithCheck(IkReal(((((-1.0)*x12563))+x12564)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12565.valid){
continue;
}
CheckValue<IkReal> x12566=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12561*(r00*r00)))+(((-1.0)*(r02*r02)))+((x12561*x12562))+(((-1.0)*x12562))+(((2.0)*x12563*x12564)))),-1);
if(!x12566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12565.value)+(((1.5707963267949)*(x12566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12567=IKsin(j4);
IkReal x12568=IKcos(j4);
IkReal x12569=(cj5*r10);
IkReal x12570=(r01*sj5);
IkReal x12571=((1.0)*cj2);
IkReal x12572=(cj5*r00);
IkReal x12573=(cj5*r20);
IkReal x12574=((1.0)*x12568);
IkReal x12575=((1.0)*x12567);
IkReal x12576=(sj5*x12567);
evalcond[0]=(((r21*x12576))+(((-1.0)*x12573*x12575))+(((-1.0)*r22*x12574)));
evalcond[1]=((((-1.0)*x12569*x12575))+(((-1.0)*r12*x12574))+((r11*x12576)));
evalcond[2]=((((-1.0)*x12570*x12574))+((x12568*x12572))+(((-1.0)*r02*x12575)));
evalcond[3]=((-1.0)+(((-1.0)*x12572*x12575))+((x12567*x12570))+(((-1.0)*r02*x12574)));
evalcond[4]=(((sj1*sj2))+((x12568*x12573))+(((-1.0)*r22*x12575))+(((-1.0)*cj1*x12571))+(((-1.0)*r21*sj5*x12574)));
evalcond[5]=(((x12568*x12569))+(((-1.0)*sj1*x12571))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12575))+(((-1.0)*r11*sj5*x12574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12577=((1.0)*cj5);
CheckValue<IkReal> x12578 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12577))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12578.valid){
continue;
}
CheckValue<IkReal> x12579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12577)))),-1);
if(!x12579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12578.value)+(((1.5707963267949)*(x12579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12580=IKsin(j4);
IkReal x12581=IKcos(j4);
IkReal x12582=(cj5*r10);
IkReal x12583=(r01*sj5);
IkReal x12584=((1.0)*cj2);
IkReal x12585=(cj5*r00);
IkReal x12586=(cj5*r20);
IkReal x12587=((1.0)*x12581);
IkReal x12588=((1.0)*x12580);
IkReal x12589=(sj5*x12580);
evalcond[0]=((((-1.0)*x12586*x12588))+(((-1.0)*r22*x12587))+((r21*x12589)));
evalcond[1]=((((-1.0)*r12*x12587))+(((-1.0)*x12582*x12588))+((r11*x12589)));
evalcond[2]=((((-1.0)*r02*x12588))+(((-1.0)*x12583*x12587))+((x12581*x12585)));
evalcond[3]=((-1.0)+(((-1.0)*x12585*x12588))+(((-1.0)*r02*x12587))+((x12580*x12583)));
evalcond[4]=((((-1.0)*r21*sj5*x12587))+((sj1*sj2))+(((-1.0)*r22*x12588))+(((-1.0)*cj1*x12584))+((x12581*x12586)));
evalcond[5]=((((-1.0)*r12*x12588))+(((-1.0)*sj1*x12584))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x12587))+((x12581*x12582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12590=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12590.valid){
continue;
}
CheckValue<IkReal> x12591 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12590.value)))+(x12591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12592=IKsin(j4);
IkReal x12593=IKcos(j4);
IkReal x12594=(cj5*r10);
IkReal x12595=(r01*sj5);
IkReal x12596=((1.0)*cj2);
IkReal x12597=(cj5*r00);
IkReal x12598=(cj5*r20);
IkReal x12599=((1.0)*x12593);
IkReal x12600=((1.0)*x12592);
IkReal x12601=(sj5*x12592);
evalcond[0]=((((-1.0)*r22*x12599))+(((-1.0)*x12598*x12600))+((r21*x12601)));
evalcond[1]=(((r11*x12601))+(((-1.0)*r12*x12599))+(((-1.0)*x12594*x12600)));
evalcond[2]=((((-1.0)*x12595*x12599))+(((-1.0)*r02*x12600))+((x12593*x12597)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12599))+(((-1.0)*x12597*x12600))+((x12592*x12595)));
evalcond[4]=((((-1.0)*r21*sj5*x12599))+((sj1*sj2))+(((-1.0)*r22*x12600))+((x12593*x12598))+(((-1.0)*cj1*x12596)));
evalcond[5]=((((-1.0)*sj1*x12596))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12600))+(((-1.0)*r11*sj5*x12599))+((x12593*x12594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12602=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12602;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12603=((1.0)*cj5);
IkReal x12604=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12603)));
j4eval[0]=x12604;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12603))))));
j4eval[2]=IKsign(x12604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12605=cj5*cj5;
IkReal x12606=r01*r01;
IkReal x12607=(cj5*r00);
IkReal x12608=(r01*sj5);
IkReal x12609=(((x12605*(r00*r00)))+(((-1.0)*x12605*x12606))+(((-2.0)*x12607*x12608))+x12606+(r02*r02));
j4eval[0]=x12609;
j4eval[1]=IKsign(x12609);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12607))+x12608))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12610=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12610);
rxp0_2=(py*r00);
rxp1_0=(r21*x12610);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12611=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12611)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12611)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12612=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12612);
rxp0_2=(py*r00);
rxp1_0=(r21*x12612);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12613=IKPowWithIntegerCheck(r12,-1);
if(!x12613.valid){
continue;
}
CheckValue<IkReal> x12614=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12614.valid){
continue;
}
if( IKabs(((x12613.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12614.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12613.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12614.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12613.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12614.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12615=IKsin(j4);
IkReal x12616=IKcos(j4);
IkReal x12617=((1.0)*cj2);
IkReal x12618=((1.0)*cj5*r00);
IkReal x12619=(sj5*x12616);
IkReal x12620=(sj5*x12615);
IkReal x12621=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12616);
evalcond[1]=(((r21*x12620))+(((-1.0)*x12615*x12621)));
evalcond[2]=((((-1.0)*x12616*x12618))+((r01*x12619)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12617))+((r12*x12615)));
evalcond[4]=((-1.0)+(((-1.0)*x12615*x12618))+((r01*x12620)));
evalcond[5]=((((-1.0)*cj1*x12617))+(((-1.0)*x12616*x12621))+((sj1*sj2))+((r21*x12619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12622=((1.0)*cj5);
CheckValue<IkReal> x12623=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12622))),-1);
if(!x12623.valid){
continue;
}
CheckValue<IkReal> x12624=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12622))),-1);
if(!x12624.valid){
continue;
}
if( IKabs(x12623.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12624.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12623.value)+IKsqr(((x12624.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12623.value, ((x12624.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12625=IKsin(j4);
IkReal x12626=IKcos(j4);
IkReal x12627=((1.0)*cj2);
IkReal x12628=((1.0)*cj5*r00);
IkReal x12629=(sj5*x12626);
IkReal x12630=(sj5*x12625);
IkReal x12631=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12626);
evalcond[1]=((((-1.0)*x12625*x12631))+((r21*x12630)));
evalcond[2]=(((r01*x12629))+(((-1.0)*x12626*x12628)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r12*x12625))+(((-1.0)*sj1*x12627)));
evalcond[4]=((-1.0)+(((-1.0)*x12625*x12628))+((r01*x12630)));
evalcond[5]=((((-1.0)*x12626*x12631))+((r21*x12629))+((sj1*sj2))+(((-1.0)*cj1*x12627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12632=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12632);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12632);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12633=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12633)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12633)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12634=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12634);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12634);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12635=IKPowWithIntegerCheck(r22,-1);
if(!x12635.valid){
continue;
}
CheckValue<IkReal> x12636=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12636.valid){
continue;
}
if( IKabs(((x12635.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12636.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12635.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12636.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12635.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12636.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12637=IKsin(j4);
IkReal x12638=IKcos(j4);
IkReal x12639=((1.0)*cj5);
IkReal x12640=((1.0)*cj2);
IkReal x12641=(sj5*x12638);
IkReal x12642=(sj5*x12637);
evalcond[0]=((-1.0)*r22*x12638);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x12640))+((r22*x12637)));
evalcond[2]=((((-1.0)*r10*x12637*x12639))+((r11*x12642)));
evalcond[3]=(((r01*x12641))+(((-1.0)*r00*x12638*x12639)));
evalcond[4]=((-1.0)+((r01*x12642))+(((-1.0)*r00*x12637*x12639)));
evalcond[5]=((((-1.0)*r10*x12638*x12639))+(((-1.0)*sj1*x12640))+(((-1.0)*cj1*sj2))+((r11*x12641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12643=((1.0)*cj5);
CheckValue<IkReal> x12644=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12643))),-1);
if(!x12644.valid){
continue;
}
CheckValue<IkReal> x12645=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12643))),-1);
if(!x12645.valid){
continue;
}
if( IKabs(x12644.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12645.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12644.value)+IKsqr(((x12645.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12644.value, ((x12645.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12646=IKsin(j4);
IkReal x12647=IKcos(j4);
IkReal x12648=((1.0)*cj5);
IkReal x12649=((1.0)*cj2);
IkReal x12650=(sj5*x12647);
IkReal x12651=(sj5*x12646);
evalcond[0]=((-1.0)*r22*x12647);
evalcond[1]=(((sj1*sj2))+((r22*x12646))+(((-1.0)*cj1*x12649)));
evalcond[2]=(((r11*x12651))+(((-1.0)*r10*x12646*x12648)));
evalcond[3]=((((-1.0)*r00*x12647*x12648))+((r01*x12650)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12646*x12648))+((r01*x12651)));
evalcond[5]=((((-1.0)*sj1*x12649))+((r11*x12650))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x12647*x12648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12652=cj5*cj5;
IkReal x12653=r01*r01;
IkReal x12654=(r01*sj5);
IkReal x12655=(cj5*r00);
CheckValue<IkReal> x12656=IKPowWithIntegerCheck(IKsign((((x12652*(r00*r00)))+x12653+(((-2.0)*x12654*x12655))+(((-1.0)*x12652*x12653))+(r02*r02))),-1);
if(!x12656.valid){
continue;
}
CheckValue<IkReal> x12657 = IKatan2WithCheck(IkReal((x12654+(((-1.0)*x12655)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12656.value)))+(x12657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12658=IKcos(j4);
IkReal x12659=IKsin(j4);
IkReal x12660=(cj5*r00);
IkReal x12661=(cj5*r10);
IkReal x12662=(r21*sj5);
IkReal x12663=((1.0)*cj2);
IkReal x12664=(cj5*r20);
IkReal x12665=((1.0)*x12658);
IkReal x12666=((1.0)*x12659);
IkReal x12667=(sj5*x12659);
IkReal x12668=(sj5*x12658);
evalcond[0]=(((r02*x12659))+(((-1.0)*x12660*x12665))+((r01*x12668)));
evalcond[1]=((((-1.0)*r22*x12665))+((x12659*x12662))+(((-1.0)*x12664*x12666)));
evalcond[2]=((((-1.0)*x12661*x12666))+((r11*x12667))+(((-1.0)*r12*x12665)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12665))+(((-1.0)*x12660*x12666))+((r01*x12667)));
evalcond[4]=((((-1.0)*cj1*x12663))+((r22*x12659))+((x12658*x12662))+((sj1*sj2))+(((-1.0)*x12664*x12665)));
evalcond[5]=((((-1.0)*x12661*x12665))+(((-1.0)*cj1*sj2))+((r11*x12668))+((r12*x12659))+(((-1.0)*sj1*x12663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12669=((1.0)*cj5);
CheckValue<IkReal> x12670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12669)))),-1);
if(!x12670.valid){
continue;
}
CheckValue<IkReal> x12671 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12670.value)))+(x12671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12672=IKcos(j4);
IkReal x12673=IKsin(j4);
IkReal x12674=(cj5*r00);
IkReal x12675=(cj5*r10);
IkReal x12676=(r21*sj5);
IkReal x12677=((1.0)*cj2);
IkReal x12678=(cj5*r20);
IkReal x12679=((1.0)*x12672);
IkReal x12680=((1.0)*x12673);
IkReal x12681=(sj5*x12673);
IkReal x12682=(sj5*x12672);
evalcond[0]=(((r01*x12682))+((r02*x12673))+(((-1.0)*x12674*x12679)));
evalcond[1]=((((-1.0)*r22*x12679))+((x12673*x12676))+(((-1.0)*x12678*x12680)));
evalcond[2]=((((-1.0)*x12675*x12680))+((r11*x12681))+(((-1.0)*r12*x12679)));
evalcond[3]=((-1.0)+((r01*x12681))+(((-1.0)*x12674*x12680))+(((-1.0)*r02*x12679)));
evalcond[4]=((((-1.0)*cj1*x12677))+((r22*x12673))+((sj1*sj2))+(((-1.0)*x12678*x12679))+((x12672*x12676)));
evalcond[5]=((((-1.0)*x12675*x12679))+((r11*x12682))+(((-1.0)*cj1*sj2))+((r12*x12673))+(((-1.0)*sj1*x12677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12683=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12683.valid){
continue;
}
CheckValue<IkReal> x12684 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12683.value)))+(x12684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12685=IKcos(j4);
IkReal x12686=IKsin(j4);
IkReal x12687=(cj5*r00);
IkReal x12688=(cj5*r10);
IkReal x12689=(r21*sj5);
IkReal x12690=((1.0)*cj2);
IkReal x12691=(cj5*r20);
IkReal x12692=((1.0)*x12685);
IkReal x12693=((1.0)*x12686);
IkReal x12694=(sj5*x12686);
IkReal x12695=(sj5*x12685);
evalcond[0]=((((-1.0)*x12687*x12692))+((r02*x12686))+((r01*x12695)));
evalcond[1]=((((-1.0)*r22*x12692))+((x12686*x12689))+(((-1.0)*x12691*x12693)));
evalcond[2]=((((-1.0)*r12*x12692))+(((-1.0)*x12688*x12693))+((r11*x12694)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12692))+(((-1.0)*x12687*x12693))+((r01*x12694)));
evalcond[4]=((((-1.0)*cj1*x12690))+((sj1*sj2))+(((-1.0)*x12691*x12692))+((x12685*x12689))+((r22*x12686)));
evalcond[5]=(((r12*x12686))+(((-1.0)*cj1*sj2))+(((-1.0)*x12688*x12692))+(((-1.0)*sj1*x12690))+((r11*x12695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12696=((-1.0)*r10);
IkReal x12698 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12698)==0){
continue;
}
IkReal x12697=pow(x12698,-0.5);
CheckValue<IkReal> x12699 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12696),IKFAST_ATAN2_MAGTHRESH);
if(!x12699.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12699.value));
IkReal gconst31=(r11*x12697);
IkReal gconst32=(x12696*x12697);
CheckValue<IkReal> x12700 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12700.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12700.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12701=((-1.0)*r10);
IkReal x12702=x12697;
CheckValue<IkReal> x12704 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12701),IKFAST_ATAN2_MAGTHRESH);
if(!x12704.valid){
continue;
}
IkReal x12703=((-1.0)*(x12704.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12703;
IkReal gconst30=x12703;
IkReal gconst31=(r11*x12702);
IkReal gconst32=(x12701*x12702);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12705=((-1.0)*r10);
IkReal x12706=x12697;
CheckValue<IkReal> x12708 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12705),IKFAST_ATAN2_MAGTHRESH);
if(!x12708.valid){
continue;
}
IkReal x12707=((-1.0)*(x12708.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12707;
IkReal gconst30=x12707;
IkReal gconst31=(r11*x12706);
IkReal gconst32=(x12705*x12706);
CheckValue<IkReal> x12716=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12716.valid){
continue;
}
IkReal x12709=x12716.value;
IkReal x12710=(sj3*x12709);
IkReal x12711=(r20*x12710);
IkReal x12712=(r00*x12710);
IkReal x12713=(r01*x12710);
IkReal x12714=(r21*x12710);
IkReal x12715=(r10*r11*x12710);
j4eval[0]=IKsign((((r00*x12711*(r10*r10)))+((r01*r10*r11*x12711))+((r10*r11*r21*x12712))+((r02*r22*sj3))+((r21*x12713*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12717=gconst31*gconst31;
IkReal x12718=gconst32*gconst32;
IkReal x12719=(r01*r20);
IkReal x12720=(r00*r21);
IkReal x12721=((1.0)*cj3);
IkReal x12722=(r01*r21);
IkReal x12723=(gconst32*sj3);
IkReal x12724=(cj3*gconst31*gconst32);
IkReal x12725=(gconst31*r00*sj3);
CheckValue<IkReal> x12726 = IKatan2WithCheck(IkReal((((r01*r22*x12723))+((r22*x12725)))),IkReal(((((-1.0)*sj3*x12718*x12719))+(((-1.0)*gconst31*r00*r20*x12723))+((sj3*x12717*x12720))+((gconst31*x12722*x12723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12726.valid){
continue;
}
CheckValue<IkReal> x12727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12718*x12721))+(((-1.0)*x12717*x12721*x12722))+((x12719*x12724))+(((-1.0)*r02*r22*x12721))+((x12720*x12724)))),-1);
if(!x12727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12726.value)+(((1.5707963267949)*(x12727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12728=IKsin(j4);
IkReal x12729=IKcos(j4);
IkReal x12730=(sj1*sj2);
IkReal x12731=(gconst31*r00);
IkReal x12732=(r21*sj3);
IkReal x12733=(cj3*gconst32);
IkReal x12734=(gconst31*r11);
IkReal x12735=(gconst31*sj3);
IkReal x12736=(gconst31*r01);
IkReal x12737=((1.0)*cj2);
IkReal x12738=(gconst32*r10);
IkReal x12739=(cj1*sj2);
IkReal x12740=(cj3*gconst31);
IkReal x12741=(gconst32*r00);
IkReal x12742=(gconst32*sj3);
IkReal x12743=(gconst32*r20);
IkReal x12744=(gconst31*r21);
IkReal x12745=(cj1*x12737);
IkReal x12746=((1.0)*x12729);
IkReal x12747=((1.0)*x12728);
IkReal x12748=(cj3*x12729);
IkReal x12749=(sj3*x12729);
IkReal x12750=(cj3*x12728);
evalcond[0]=((((-1.0)*r22*x12746))+((x12728*x12744))+(((-1.0)*x12743*x12747)));
evalcond[1]=((((-1.0)*r12*x12746))+((x12728*x12734))+(((-1.0)*x12738*x12747)));
evalcond[2]=((-1.0)+(((-1.0)*x12741*x12747))+(((-1.0)*r02*x12746))+((x12728*x12736)));
evalcond[3]=(((r02*x12750))+((r01*x12742))+((sj3*x12731))+(((-1.0)*r00*x12733*x12746))+((x12736*x12748)));
evalcond[4]=(((cj3*x12731))+(((-1.0)*r02*sj3*x12747))+((r01*x12733))+((x12741*x12749))+(((-1.0)*r01*x12735*x12746)));
evalcond[5]=(((cj2*sj1))+((r20*x12735))+((r22*x12750))+((gconst32*x12732))+x12739+((r21*x12729*x12740))+(((-1.0)*r20*x12733*x12746)));
evalcond[6]=(((x12734*x12748))+((r11*x12742))+(((-1.0)*r10*x12733*x12746))+(((-1.0)*x12745))+x12730+((r10*x12735))+((r12*x12750)));
evalcond[7]=(((r20*x12729*x12742))+((r21*x12733))+(((-1.0)*x12745))+x12730+((r20*x12740))+(((-1.0)*r22*sj3*x12747))+(((-1.0)*gconst31*x12732*x12746)));
evalcond[8]=((((-1.0)*x12739))+(((-1.0)*sj1*x12737))+((r11*x12733))+(((-1.0)*sj3*x12734*x12746))+((r10*x12740))+((x12738*x12749))+(((-1.0)*r12*sj3*x12747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12751=gconst31*gconst31;
IkReal x12752=gconst32*gconst32;
IkReal x12753=(r00*r20);
IkReal x12754=(cj3*r22);
IkReal x12755=(gconst31*r00);
IkReal x12756=(gconst32*r01);
IkReal x12757=((1.0)*gconst32);
IkReal x12758=(cj3*gconst31);
IkReal x12759=((1.0)*r20);
IkReal x12760=(r21*x12751);
CheckValue<IkReal> x12761 = IKatan2WithCheck(IkReal((((x12754*x12756))+((x12754*x12755)))),IkReal(((((-1.0)*x12753*x12757*x12758))+((r21*x12756*x12758))+((cj3*r00*x12760))+(((-1.0)*cj3*r01*x12752*x12759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12761.valid){
continue;
}
CheckValue<IkReal> x12762=IKPowWithIntegerCheck(IKsign((((r01*sj3*x12760))+((sj3*x12752*x12753))+(((-1.0)*gconst31*sj3*x12756*x12759))+(((-1.0)*r21*sj3*x12755*x12757))+((r02*r22*sj3)))),-1);
if(!x12762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12761.value)+(((1.5707963267949)*(x12762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12763=IKsin(j4);
IkReal x12764=IKcos(j4);
IkReal x12765=(sj1*sj2);
IkReal x12766=(gconst31*r00);
IkReal x12767=(r21*sj3);
IkReal x12768=(cj3*gconst32);
IkReal x12769=(gconst31*r11);
IkReal x12770=(gconst31*sj3);
IkReal x12771=(gconst31*r01);
IkReal x12772=((1.0)*cj2);
IkReal x12773=(gconst32*r10);
IkReal x12774=(cj1*sj2);
IkReal x12775=(cj3*gconst31);
IkReal x12776=(gconst32*r00);
IkReal x12777=(gconst32*sj3);
IkReal x12778=(gconst32*r20);
IkReal x12779=(gconst31*r21);
IkReal x12780=(cj1*x12772);
IkReal x12781=((1.0)*x12764);
IkReal x12782=((1.0)*x12763);
IkReal x12783=(cj3*x12764);
IkReal x12784=(sj3*x12764);
IkReal x12785=(cj3*x12763);
evalcond[0]=((((-1.0)*x12778*x12782))+(((-1.0)*r22*x12781))+((x12763*x12779)));
evalcond[1]=(((x12763*x12769))+(((-1.0)*x12773*x12782))+(((-1.0)*r12*x12781)));
evalcond[2]=((-1.0)+((x12763*x12771))+(((-1.0)*x12776*x12782))+(((-1.0)*r02*x12781)));
evalcond[3]=(((r01*x12777))+((sj3*x12766))+((x12771*x12783))+((r02*x12785))+(((-1.0)*r00*x12768*x12781)));
evalcond[4]=(((cj3*x12766))+(((-1.0)*r02*sj3*x12782))+((x12776*x12784))+(((-1.0)*r01*x12770*x12781))+((r01*x12768)));
evalcond[5]=(((r20*x12770))+((cj2*sj1))+((r21*x12764*x12775))+x12774+((r22*x12785))+(((-1.0)*r20*x12768*x12781))+((gconst32*x12767)));
evalcond[6]=((((-1.0)*r10*x12768*x12781))+((r12*x12785))+x12765+((r11*x12777))+((x12769*x12783))+(((-1.0)*x12780))+((r10*x12770)));
evalcond[7]=(((r20*x12775))+((r21*x12768))+(((-1.0)*r22*sj3*x12782))+x12765+((r20*x12764*x12777))+(((-1.0)*gconst31*x12767*x12781))+(((-1.0)*x12780)));
evalcond[8]=(((x12773*x12784))+(((-1.0)*x12774))+(((-1.0)*sj3*x12769*x12781))+(((-1.0)*sj1*x12772))+(((-1.0)*r12*sj3*x12782))+((r11*x12768))+((r10*x12775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12786=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12786.valid){
continue;
}
CheckValue<IkReal> x12787 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst31*r11))+(((-1.0)*gconst32*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12786.value)))+(x12787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12788=IKsin(j4);
IkReal x12789=IKcos(j4);
IkReal x12790=(sj1*sj2);
IkReal x12791=(gconst31*r00);
IkReal x12792=(r21*sj3);
IkReal x12793=(cj3*gconst32);
IkReal x12794=(gconst31*r11);
IkReal x12795=(gconst31*sj3);
IkReal x12796=(gconst31*r01);
IkReal x12797=((1.0)*cj2);
IkReal x12798=(gconst32*r10);
IkReal x12799=(cj1*sj2);
IkReal x12800=(cj3*gconst31);
IkReal x12801=(gconst32*r00);
IkReal x12802=(gconst32*sj3);
IkReal x12803=(gconst32*r20);
IkReal x12804=(gconst31*r21);
IkReal x12805=(cj1*x12797);
IkReal x12806=((1.0)*x12789);
IkReal x12807=((1.0)*x12788);
IkReal x12808=(cj3*x12789);
IkReal x12809=(sj3*x12789);
IkReal x12810=(cj3*x12788);
evalcond[0]=((((-1.0)*x12803*x12807))+(((-1.0)*r22*x12806))+((x12788*x12804)));
evalcond[1]=((((-1.0)*r12*x12806))+((x12788*x12794))+(((-1.0)*x12798*x12807)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12806))+(((-1.0)*x12801*x12807))+((x12788*x12796)));
evalcond[3]=(((r02*x12810))+(((-1.0)*r00*x12793*x12806))+((r01*x12802))+((x12796*x12808))+((sj3*x12791)));
evalcond[4]=(((x12801*x12809))+(((-1.0)*r02*sj3*x12807))+(((-1.0)*r01*x12795*x12806))+((cj3*x12791))+((r01*x12793)));
evalcond[5]=(((cj2*sj1))+((r20*x12795))+((r21*x12789*x12800))+(((-1.0)*r20*x12793*x12806))+x12799+((gconst32*x12792))+((r22*x12810)));
evalcond[6]=((((-1.0)*x12805))+(((-1.0)*r10*x12793*x12806))+((r10*x12795))+((r12*x12810))+((x12794*x12808))+((r11*x12802))+x12790);
evalcond[7]=((((-1.0)*x12805))+((r20*x12800))+(((-1.0)*gconst31*x12792*x12806))+(((-1.0)*r22*sj3*x12807))+x12790+((r21*x12793))+((r20*x12789*x12802)));
evalcond[8]=(((r10*x12800))+(((-1.0)*sj1*x12797))+((x12798*x12809))+(((-1.0)*sj3*x12794*x12806))+((r11*x12793))+(((-1.0)*x12799))+(((-1.0)*r12*sj3*x12807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12811=((-1.0)*r11);
IkReal x12813 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12813)==0){
continue;
}
IkReal x12812=pow(x12813,-0.5);
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal(x12811),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12814.value))));
IkReal gconst34=(x12811*x12812);
IkReal gconst35=((1.0)*r10*x12812);
CheckValue<IkReal> x12815 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12815.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12815.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12816=((-1.0)*r11);
CheckValue<IkReal> x12819 = IKatan2WithCheck(IkReal(x12816),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12819.valid){
continue;
}
IkReal x12817=((1.0)*(x12819.value));
IkReal x12818=x12812;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x12817)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12817)));
IkReal gconst34=(x12816*x12818);
IkReal gconst35=((1.0)*r10*x12818);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12820=gconst35*gconst35;
IkReal x12821=gconst34*gconst34;
IkReal x12822=((1.0)*gconst35);
IkReal x12823=(r21*sj3);
IkReal x12824=(cj3*r21);
IkReal x12825=(gconst35*r01);
IkReal x12826=(r01*r20);
IkReal x12827=(cj3*gconst34*r00);
CheckValue<IkReal> x12828 = IKatan2WithCheck(IkReal((((r22*x12827))+((cj3*r22*x12825)))),IkReal(((((-1.0)*r20*x12822*x12827))+((r00*x12821*x12824))+((gconst34*x12824*x12825))+(((-1.0)*cj3*x12820*x12826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12828.valid){
continue;
}
CheckValue<IkReal> x12829=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r00*x12822*x12823))+((r01*x12821*x12823))+(((-1.0)*gconst34*sj3*x12822*x12826))+((r00*r20*sj3*x12820))+((r02*r22*sj3)))),-1);
if(!x12829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12828.value)+(((1.5707963267949)*(x12829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12830=IKsin(j4);
IkReal x12831=IKcos(j4);
IkReal x12832=(sj1*sj2);
IkReal x12833=(gconst35*r00);
IkReal x12834=(gconst35*sj3);
IkReal x12835=(gconst34*r20);
IkReal x12836=(cj3*gconst34);
IkReal x12837=(gconst34*r21);
IkReal x12838=((1.0)*cj1);
IkReal x12839=(cj2*sj1);
IkReal x12840=(gconst35*r10);
IkReal x12841=(gconst34*sj3);
IkReal x12842=(cj3*gconst35);
IkReal x12843=(cj2*x12838);
IkReal x12844=((1.0)*x12831);
IkReal x12845=((1.0)*x12830);
IkReal x12846=(cj3*x12830);
IkReal x12847=(gconst34*x12830);
evalcond[0]=((((-1.0)*r22*x12844))+((x12830*x12837))+(((-1.0)*gconst35*r20*x12845)));
evalcond[1]=((((-1.0)*r12*x12844))+(((-1.0)*x12840*x12845))+((r11*x12847)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12844))+((r01*x12847))+(((-1.0)*x12833*x12845)));
evalcond[3]=(((r00*x12841))+(((-1.0)*cj3*x12833*x12844))+((r02*x12846))+((r01*x12831*x12836))+((r01*x12834)));
evalcond[4]=(((sj3*x12831*x12833))+(((-1.0)*r01*x12841*x12844))+((r01*x12842))+(((-1.0)*r02*sj3*x12845))+((r00*x12836)));
evalcond[5]=(x12839+((r21*x12834))+((r22*x12846))+((cj1*sj2))+((r21*x12831*x12836))+((sj3*x12835))+(((-1.0)*r20*x12842*x12844)));
evalcond[6]=(x12832+(((-1.0)*cj3*x12840*x12844))+((r11*x12831*x12836))+((r10*x12841))+((r11*x12834))+((r12*x12846))+(((-1.0)*x12843)));
evalcond[7]=(((cj3*x12835))+x12832+((r20*x12831*x12834))+((r21*x12842))+(((-1.0)*x12843))+(((-1.0)*r22*sj3*x12845))+(((-1.0)*sj3*x12837*x12844)));
evalcond[8]=(((r10*x12836))+(((-1.0)*r11*x12841*x12844))+((r11*x12842))+((r10*x12831*x12834))+(((-1.0)*sj2*x12838))+(((-1.0)*x12839))+(((-1.0)*r12*sj3*x12845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12848=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x12848.valid){
continue;
}
CheckValue<IkReal> x12849 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst35*r10))+((gconst34*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12848.value)))+(x12849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12850=IKsin(j4);
IkReal x12851=IKcos(j4);
IkReal x12852=(sj1*sj2);
IkReal x12853=(gconst35*r00);
IkReal x12854=(gconst35*sj3);
IkReal x12855=(gconst34*r20);
IkReal x12856=(cj3*gconst34);
IkReal x12857=(gconst34*r21);
IkReal x12858=((1.0)*cj1);
IkReal x12859=(cj2*sj1);
IkReal x12860=(gconst35*r10);
IkReal x12861=(gconst34*sj3);
IkReal x12862=(cj3*gconst35);
IkReal x12863=(cj2*x12858);
IkReal x12864=((1.0)*x12851);
IkReal x12865=((1.0)*x12850);
IkReal x12866=(cj3*x12850);
IkReal x12867=(gconst34*x12850);
evalcond[0]=((((-1.0)*gconst35*r20*x12865))+(((-1.0)*r22*x12864))+((x12850*x12857)));
evalcond[1]=(((r11*x12867))+(((-1.0)*x12860*x12865))+(((-1.0)*r12*x12864)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12864))+(((-1.0)*x12853*x12865))+((r01*x12867)));
evalcond[3]=(((r01*x12851*x12856))+((r01*x12854))+(((-1.0)*cj3*x12853*x12864))+((r00*x12861))+((r02*x12866)));
evalcond[4]=(((r00*x12856))+((sj3*x12851*x12853))+((r01*x12862))+(((-1.0)*r01*x12861*x12864))+(((-1.0)*r02*sj3*x12865)));
evalcond[5]=(x12859+((cj1*sj2))+((r21*x12851*x12856))+((sj3*x12855))+((r21*x12854))+((r22*x12866))+(((-1.0)*r20*x12862*x12864)));
evalcond[6]=(x12852+((r12*x12866))+(((-1.0)*x12863))+((r11*x12851*x12856))+((r11*x12854))+(((-1.0)*cj3*x12860*x12864))+((r10*x12861)));
evalcond[7]=(x12852+((r21*x12862))+(((-1.0)*r22*sj3*x12865))+(((-1.0)*x12863))+(((-1.0)*sj3*x12857*x12864))+((r20*x12851*x12854))+((cj3*x12855)));
evalcond[8]=(((r11*x12862))+((r10*x12856))+(((-1.0)*x12859))+(((-1.0)*r12*sj3*x12865))+(((-1.0)*sj2*x12858))+(((-1.0)*r11*x12861*x12864))+((r10*x12851*x12854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12869 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12869)==0){
continue;
}
IkReal x12868=pow(x12869,-0.5);
CheckValue<IkReal> x12870 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12870.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12870.value));
IkReal gconst37=((-1.0)*r21*x12868);
IkReal gconst38=(r20*x12868);
CheckValue<IkReal> x12871 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12871.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12871.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12874 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12874.valid){
continue;
}
IkReal x12872=((-1.0)*(x12874.value));
IkReal x12873=x12868;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12872;
IkReal gconst36=x12872;
IkReal gconst37=((-1.0)*r21*x12873);
IkReal gconst38=(r20*x12873);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12877.valid){
continue;
}
IkReal x12875=((-1.0)*(x12877.value));
IkReal x12876=x12868;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12875;
IkReal gconst36=x12875;
IkReal gconst37=((-1.0)*r21*x12876);
IkReal gconst38=(r20*x12876);
CheckValue<IkReal> x12885=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12885.valid){
continue;
}
IkReal x12878=x12885.value;
IkReal x12879=(sj3*x12878);
IkReal x12880=(r11*x12879);
IkReal x12881=(r00*x12879);
IkReal x12882=(r01*x12879);
IkReal x12883=(r10*x12879);
IkReal x12884=(r20*r21*x12879);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x12880))+((r10*r20*r21*x12882))+((r10*x12881*(r20*r20)))+((r01*x12880*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12886=gconst37*gconst37;
IkReal x12887=gconst38*gconst38;
IkReal x12888=((1.0)*cj3);
IkReal x12889=(gconst38*r01);
IkReal x12890=(cj3*gconst37);
IkReal x12891=(r12*sj3);
IkReal x12892=(gconst37*r00);
IkReal x12893=(r00*r11);
IkReal x12894=((1.0)*r10*sj3);
CheckValue<IkReal> x12895 = IKatan2WithCheck(IkReal((((x12889*x12891))+((x12891*x12892)))),IkReal((((sj3*x12886*x12893))+((gconst37*r11*sj3*x12889))+(((-1.0)*r01*x12887*x12894))+(((-1.0)*gconst38*x12892*x12894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12895.valid){
continue;
}
CheckValue<IkReal> x12896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x12887*x12888))+(((-1.0)*r01*r11*x12886*x12888))+((gconst38*x12890*x12893))+(((-1.0)*r02*r12*x12888))+((r10*x12889*x12890)))),-1);
if(!x12896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12895.value)+(((1.5707963267949)*(x12896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12897=IKsin(j4);
IkReal x12898=IKcos(j4);
IkReal x12899=(sj1*sj2);
IkReal x12900=(gconst38*sj3);
IkReal x12901=(cj3*gconst38);
IkReal x12902=(cj3*gconst37);
IkReal x12903=((1.0)*cj1);
IkReal x12904=(gconst37*sj3);
IkReal x12905=(cj2*sj1);
IkReal x12906=(cj2*x12903);
IkReal x12907=((1.0)*x12898);
IkReal x12908=((1.0)*x12897);
IkReal x12909=(cj3*x12897);
IkReal x12910=(gconst37*x12897);
evalcond[0]=(((r21*x12910))+(((-1.0)*r22*x12907))+(((-1.0)*gconst38*r20*x12908)));
evalcond[1]=((((-1.0)*gconst38*r10*x12908))+(((-1.0)*r12*x12907))+((r11*x12910)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12907))+(((-1.0)*gconst38*r00*x12908))+((r01*x12910)));
evalcond[3]=(((r00*x12904))+((r01*x12900))+(((-1.0)*r00*x12901*x12907))+((r02*x12909))+((r01*x12898*x12902)));
evalcond[4]=(((r00*x12902))+((r01*x12901))+(((-1.0)*r02*sj3*x12908))+((r00*x12898*x12900))+(((-1.0)*r01*x12904*x12907)));
evalcond[5]=(x12905+((cj1*sj2))+((r20*x12904))+(((-1.0)*r20*x12901*x12907))+((r21*x12900))+((r22*x12909))+((r21*x12898*x12902)));
evalcond[6]=(x12899+(((-1.0)*x12906))+(((-1.0)*r10*x12901*x12907))+((r12*x12909))+((r10*x12904))+((r11*x12898*x12902))+((r11*x12900)));
evalcond[7]=(x12899+(((-1.0)*x12906))+(((-1.0)*r21*x12904*x12907))+((r20*x12902))+((r20*x12898*x12900))+((r21*x12901))+(((-1.0)*r22*sj3*x12908)));
evalcond[8]=((((-1.0)*r12*sj3*x12908))+(((-1.0)*x12905))+(((-1.0)*sj2*x12903))+((r10*x12898*x12900))+(((-1.0)*r11*x12904*x12907))+((r10*x12902))+((r11*x12901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12911=gconst37*gconst37;
IkReal x12912=gconst38*gconst38;
IkReal x12913=(r10*sj3);
IkReal x12914=(r00*r11);
IkReal x12915=(r01*r11);
IkReal x12916=(cj3*gconst37);
IkReal x12917=(cj3*r10);
IkReal x12918=((1.0)*gconst37*gconst38);
CheckValue<IkReal> x12919 = IKatan2WithCheck(IkReal((((r00*r12*x12916))+((cj3*gconst38*r01*r12)))),IkReal((((cj3*x12911*x12914))+((gconst38*x12915*x12916))+(((-1.0)*gconst38*r00*r10*x12916))+(((-1.0)*r01*x12912*x12917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12919.valid){
continue;
}
CheckValue<IkReal> x12920=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x12914*x12918))+((r00*x12912*x12913))+(((-1.0)*r01*x12913*x12918))+((sj3*x12911*x12915)))),-1);
if(!x12920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12919.value)+(((1.5707963267949)*(x12920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12921=IKsin(j4);
IkReal x12922=IKcos(j4);
IkReal x12923=(sj1*sj2);
IkReal x12924=(gconst38*sj3);
IkReal x12925=(cj3*gconst38);
IkReal x12926=(cj3*gconst37);
IkReal x12927=((1.0)*cj1);
IkReal x12928=(gconst37*sj3);
IkReal x12929=(cj2*sj1);
IkReal x12930=(cj2*x12927);
IkReal x12931=((1.0)*x12922);
IkReal x12932=((1.0)*x12921);
IkReal x12933=(cj3*x12921);
IkReal x12934=(gconst37*x12921);
evalcond[0]=((((-1.0)*gconst38*r20*x12932))+(((-1.0)*r22*x12931))+((r21*x12934)));
evalcond[1]=(((r11*x12934))+(((-1.0)*r12*x12931))+(((-1.0)*gconst38*r10*x12932)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12931))+(((-1.0)*gconst38*r00*x12932))+((r01*x12934)));
evalcond[3]=(((r02*x12933))+((r01*x12924))+(((-1.0)*r00*x12925*x12931))+((r01*x12922*x12926))+((r00*x12928)));
evalcond[4]=((((-1.0)*r01*x12928*x12931))+((r00*x12922*x12924))+(((-1.0)*r02*sj3*x12932))+((r01*x12925))+((r00*x12926)));
evalcond[5]=(x12929+((r20*x12928))+((cj1*sj2))+(((-1.0)*r20*x12925*x12931))+((r21*x12922*x12926))+((r22*x12933))+((r21*x12924)));
evalcond[6]=(x12923+((r12*x12933))+((r11*x12924))+((r11*x12922*x12926))+((r10*x12928))+(((-1.0)*r10*x12925*x12931))+(((-1.0)*x12930)));
evalcond[7]=(x12923+(((-1.0)*r22*sj3*x12932))+((r20*x12926))+((r20*x12922*x12924))+(((-1.0)*x12930))+((r21*x12925))+(((-1.0)*r21*x12928*x12931)));
evalcond[8]=(((r11*x12925))+(((-1.0)*x12929))+((r10*x12926))+(((-1.0)*sj2*x12927))+((r10*x12922*x12924))+(((-1.0)*r11*x12928*x12931))+(((-1.0)*r12*sj3*x12932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12935=((1.0)*gconst38);
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x12935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
CheckValue<IkReal> x12937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12935))+(((-1.0)*gconst37*r10)))),-1);
if(!x12937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12936.value)+(((1.5707963267949)*(x12937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12938=IKsin(j4);
IkReal x12939=IKcos(j4);
IkReal x12940=(sj1*sj2);
IkReal x12941=(gconst38*sj3);
IkReal x12942=(cj3*gconst38);
IkReal x12943=(cj3*gconst37);
IkReal x12944=((1.0)*cj1);
IkReal x12945=(gconst37*sj3);
IkReal x12946=(cj2*sj1);
IkReal x12947=(cj2*x12944);
IkReal x12948=((1.0)*x12939);
IkReal x12949=((1.0)*x12938);
IkReal x12950=(cj3*x12938);
IkReal x12951=(gconst37*x12938);
evalcond[0]=((((-1.0)*gconst38*r20*x12949))+((r21*x12951))+(((-1.0)*r22*x12948)));
evalcond[1]=((((-1.0)*gconst38*r10*x12949))+((r11*x12951))+(((-1.0)*r12*x12948)));
evalcond[2]=((-1.0)+((r01*x12951))+(((-1.0)*r02*x12948))+(((-1.0)*gconst38*r00*x12949)));
evalcond[3]=(((r00*x12945))+(((-1.0)*r00*x12942*x12948))+((r01*x12941))+((r01*x12939*x12943))+((r02*x12950)));
evalcond[4]=(((r00*x12943))+((r01*x12942))+(((-1.0)*r02*sj3*x12949))+(((-1.0)*r01*x12945*x12948))+((r00*x12939*x12941)));
evalcond[5]=((((-1.0)*r20*x12942*x12948))+x12946+((r22*x12950))+((cj1*sj2))+((r21*x12941))+((r20*x12945))+((r21*x12939*x12943)));
evalcond[6]=(x12940+((r10*x12945))+((r12*x12950))+(((-1.0)*r10*x12942*x12948))+((r11*x12941))+(((-1.0)*x12947))+((r11*x12939*x12943)));
evalcond[7]=(x12940+(((-1.0)*r22*sj3*x12949))+((r20*x12939*x12941))+((r21*x12942))+(((-1.0)*x12947))+(((-1.0)*r21*x12945*x12948))+((r20*x12943)));
evalcond[8]=(((r10*x12939*x12941))+((r10*x12943))+(((-1.0)*r12*sj3*x12949))+((r11*x12942))+(((-1.0)*x12946))+(((-1.0)*r11*x12945*x12948))+(((-1.0)*sj2*x12944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12953 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12953)==0){
continue;
}
IkReal x12952=pow(x12953,-0.5);
CheckValue<IkReal> x12954 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12954.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12954.value))));
IkReal gconst40=((1.0)*r21*x12952);
IkReal gconst41=((-1.0)*r20*x12952);
CheckValue<IkReal> x12955 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12955.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12955.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
IkReal x12956=((1.0)*(x12958.value));
IkReal x12957=x12952;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12956)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12956)));
IkReal gconst40=((1.0)*r21*x12957);
IkReal gconst41=((-1.0)*r20*x12957);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12961 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12961.valid){
continue;
}
IkReal x12959=((1.0)*(x12961.value));
IkReal x12960=x12952;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12959)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12959)));
IkReal gconst40=((1.0)*r21*x12960);
IkReal gconst41=((-1.0)*r20*x12960);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12964 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12964.valid){
continue;
}
IkReal x12962=((1.0)*(x12964.value));
IkReal x12963=x12952;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12962)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12962)));
IkReal gconst40=((1.0)*r21*x12963);
IkReal gconst41=((-1.0)*r20*x12963);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12965=gconst40*gconst40;
IkReal x12966=gconst41*gconst41;
IkReal x12967=(gconst41*sj3);
IkReal x12968=((1.0)*cj3);
IkReal x12969=(gconst40*r00);
IkReal x12970=((1.0)*r20);
IkReal x12971=(gconst40*r01);
IkReal x12972=(cj3*gconst41);
IkReal x12973=(r21*x12965);
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x12968))+(((-1.0)*r00*r20*x12966*x12968))+(((-1.0)*r01*x12968*x12973))+((r20*x12971*x12972))+((r21*x12969*x12972)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal((((r22*sj3*x12969))+((r01*r22*x12967)))),IkReal((((r21*x12967*x12971))+(((-1.0)*r01*sj3*x12966*x12970))+((r00*sj3*x12973))+(((-1.0)*x12967*x12969*x12970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12976=IKsin(j4);
IkReal x12977=IKcos(j4);
IkReal x12978=(sj1*sj2);
IkReal x12979=(gconst40*sj3);
IkReal x12980=(gconst41*sj3);
IkReal x12981=(gconst41*r20);
IkReal x12982=(cj3*gconst41);
IkReal x12983=((1.0)*cj2);
IkReal x12984=(cj1*sj2);
IkReal x12985=(cj3*gconst40);
IkReal x12986=(cj1*x12983);
IkReal x12987=((1.0)*x12977);
IkReal x12988=((1.0)*x12976);
IkReal x12989=(cj3*x12976);
IkReal x12990=(gconst40*x12976);
IkReal x12991=(x12977*x12985);
evalcond[0]=((((-1.0)*r22*x12987))+((r21*x12990))+(((-1.0)*x12981*x12988)));
evalcond[1]=((((-1.0)*gconst41*r10*x12988))+((r11*x12990))+(((-1.0)*r12*x12987)));
evalcond[2]=((-1.0)+((r01*x12990))+(((-1.0)*gconst41*r00*x12988))+(((-1.0)*r02*x12987)));
evalcond[3]=(((r00*x12979))+((r01*x12991))+((r01*x12980))+((r02*x12989))+(((-1.0)*r00*x12982*x12987)));
evalcond[4]=(((r00*x12977*x12980))+((r00*x12985))+((r01*x12982))+(((-1.0)*r01*x12979*x12987))+(((-1.0)*r02*sj3*x12988)));
evalcond[5]=(x12984+((cj2*sj1))+((r22*x12989))+((r20*x12979))+((r21*x12991))+((r21*x12980))+(((-1.0)*cj3*x12981*x12987)));
evalcond[6]=(x12978+(((-1.0)*r10*x12982*x12987))+(((-1.0)*x12986))+((r11*x12980))+((r11*x12991))+((r12*x12989))+((r10*x12979)));
evalcond[7]=(x12978+(((-1.0)*x12986))+((r21*x12982))+(((-1.0)*r21*x12979*x12987))+(((-1.0)*r22*sj3*x12988))+((r20*x12985))+((r20*x12977*x12980)));
evalcond[8]=(((r10*x12985))+(((-1.0)*r12*sj3*x12988))+(((-1.0)*r11*x12979*x12987))+((r11*x12982))+((r10*x12977*x12980))+(((-1.0)*x12984))+(((-1.0)*sj1*x12983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12992=((1.0)*gconst41);
CheckValue<IkReal> x12993 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x12992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12993.valid){
continue;
}
CheckValue<IkReal> x12994=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r10))+(((-1.0)*r11*x12992)))),-1);
if(!x12994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12993.value)+(((1.5707963267949)*(x12994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12995=IKsin(j4);
IkReal x12996=IKcos(j4);
IkReal x12997=(sj1*sj2);
IkReal x12998=(gconst40*sj3);
IkReal x12999=(gconst41*sj3);
IkReal x13000=(gconst41*r20);
IkReal x13001=(cj3*gconst41);
IkReal x13002=((1.0)*cj2);
IkReal x13003=(cj1*sj2);
IkReal x13004=(cj3*gconst40);
IkReal x13005=(cj1*x13002);
IkReal x13006=((1.0)*x12996);
IkReal x13007=((1.0)*x12995);
IkReal x13008=(cj3*x12995);
IkReal x13009=(gconst40*x12995);
IkReal x13010=(x12996*x13004);
evalcond[0]=((((-1.0)*r22*x13006))+(((-1.0)*x13000*x13007))+((r21*x13009)));
evalcond[1]=((((-1.0)*r12*x13006))+(((-1.0)*gconst41*r10*x13007))+((r11*x13009)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r00*x13007))+(((-1.0)*r02*x13006))+((r01*x13009)));
evalcond[3]=(((r01*x13010))+(((-1.0)*r00*x13001*x13006))+((r01*x12999))+((r00*x12998))+((r02*x13008)));
evalcond[4]=((((-1.0)*r02*sj3*x13007))+((r00*x13004))+((r00*x12996*x12999))+((r01*x13001))+(((-1.0)*r01*x12998*x13006)));
evalcond[5]=(((cj2*sj1))+((r21*x13010))+(((-1.0)*cj3*x13000*x13006))+((r21*x12999))+((r20*x12998))+x13003+((r22*x13008)));
evalcond[6]=(x12997+((r10*x12998))+(((-1.0)*r10*x13001*x13006))+(((-1.0)*x13005))+((r12*x13008))+((r11*x13010))+((r11*x12999)));
evalcond[7]=(x12997+((r20*x12996*x12999))+(((-1.0)*r22*sj3*x13007))+(((-1.0)*x13005))+((r20*x13004))+(((-1.0)*r21*x12998*x13006))+((r21*x13001)));
evalcond[8]=(((r10*x12996*x12999))+(((-1.0)*r11*x12998*x13006))+(((-1.0)*sj1*x13002))+(((-1.0)*x13003))+((r11*x13001))+(((-1.0)*r12*sj3*x13007))+((r10*x13004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13011=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x13011.valid){
continue;
}
CheckValue<IkReal> x13012 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r10))+((gconst40*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13011.value)))+(x13012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13013=IKsin(j4);
IkReal x13014=IKcos(j4);
IkReal x13015=(sj1*sj2);
IkReal x13016=(gconst40*sj3);
IkReal x13017=(gconst41*sj3);
IkReal x13018=(gconst41*r20);
IkReal x13019=(cj3*gconst41);
IkReal x13020=((1.0)*cj2);
IkReal x13021=(cj1*sj2);
IkReal x13022=(cj3*gconst40);
IkReal x13023=(cj1*x13020);
IkReal x13024=((1.0)*x13014);
IkReal x13025=((1.0)*x13013);
IkReal x13026=(cj3*x13013);
IkReal x13027=(gconst40*x13013);
IkReal x13028=(x13014*x13022);
evalcond[0]=((((-1.0)*x13018*x13025))+(((-1.0)*r22*x13024))+((r21*x13027)));
evalcond[1]=((((-1.0)*gconst41*r10*x13025))+((r11*x13027))+(((-1.0)*r12*x13024)));
evalcond[2]=((-1.0)+((r01*x13027))+(((-1.0)*gconst41*r00*x13025))+(((-1.0)*r02*x13024)));
evalcond[3]=(((r01*x13028))+((r00*x13016))+((r01*x13017))+((r02*x13026))+(((-1.0)*r00*x13019*x13024)));
evalcond[4]=(((r01*x13019))+((r00*x13022))+(((-1.0)*r02*sj3*x13025))+((r00*x13014*x13017))+(((-1.0)*r01*x13016*x13024)));
evalcond[5]=(((cj2*sj1))+((r21*x13028))+(((-1.0)*cj3*x13018*x13024))+((r21*x13017))+((r20*x13016))+x13021+((r22*x13026)));
evalcond[6]=((((-1.0)*x13023))+((r11*x13017))+(((-1.0)*r10*x13019*x13024))+((r11*x13028))+x13015+((r12*x13026))+((r10*x13016)));
evalcond[7]=(((r20*x13014*x13017))+((r21*x13019))+(((-1.0)*x13023))+(((-1.0)*r22*sj3*x13025))+((r20*x13022))+(((-1.0)*r21*x13016*x13024))+x13015);
evalcond[8]=((((-1.0)*r11*x13016*x13024))+(((-1.0)*sj1*x13020))+((r10*x13014*x13017))+((r11*x13019))+(((-1.0)*x13021))+(((-1.0)*r12*sj3*x13025))+((r10*x13022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13029=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13029);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13029);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13030=(cj5*r00);
IkReal x13031=(r01*sj5);
j4eval[0]=((((-1.0)*x13030))+x13031);
j4eval[1]=(((sj3*x13030))+(((-1.0)*sj3*x13031)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13032=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13032);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13032);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13033=(r01*sj5);
IkReal x13034=((1.0)*cj5*r00);
j4eval[0]=(x13033+(((-1.0)*x13034)));
j4eval[1]=((((-1.0)*cj3*x13034))+((cj3*x13033)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13035=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13035);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13035);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13036=((1.0)*cj3);
CheckValue<IkReal> x13037=IKPowWithIntegerCheck(cj3,-1);
if(!x13037.valid){
continue;
}
CheckValue<IkReal> x13038=IKPowWithIntegerCheck(r22,-1);
if(!x13038.valid){
continue;
}
CheckValue<IkReal> x13039=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x13039.valid){
continue;
}
if( IKabs(((x13037.value)*(x13038.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13039.value)*(((((-1.0)*r00*sj5*x13036))+(((-1.0)*cj5*r01*x13036)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13037.value)*(x13038.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13039.value)*(((((-1.0)*r00*sj5*x13036))+(((-1.0)*cj5*r01*x13036))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13037.value)*(x13038.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13039.value)*(((((-1.0)*r00*sj5*x13036))+(((-1.0)*cj5*r01*x13036))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13040=IKsin(j4);
IkReal x13041=IKcos(j4);
IkReal x13042=(sj1*sj2);
IkReal x13043=(cj5*sj3);
IkReal x13044=(r11*sj5);
IkReal x13045=(cj3*cj5);
IkReal x13046=((1.0)*cj1);
IkReal x13047=(cj3*sj5);
IkReal x13048=(sj3*sj5);
IkReal x13049=(cj2*sj1);
IkReal x13050=(r01*sj5);
IkReal x13051=((1.0)*sj3);
IkReal x13052=(cj2*x13046);
IkReal x13053=(r10*x13041);
IkReal x13054=(r22*x13040);
IkReal x13055=(cj3*x13041);
IkReal x13056=((1.0)*cj5*x13040);
evalcond[0]=((-1.0)*r22*x13041);
evalcond[1]=(((cj1*sj2))+((cj3*x13054))+x13049);
evalcond[2]=(((x13040*x13044))+(((-1.0)*r10*x13056)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13056))+((x13040*x13050)));
evalcond[4]=(x13042+(((-1.0)*x13051*x13054))+(((-1.0)*x13052)));
evalcond[5]=((((-1.0)*r01*x13041*x13048))+((r01*x13045))+((r00*x13047))+((r00*x13041*x13043)));
evalcond[6]=(((r01*x13041*x13047))+(((-1.0)*r00*x13041*x13045))+((r01*x13043))+((r00*x13048)));
evalcond[7]=(((r11*x13043))+((x13044*x13055))+(((-1.0)*x13045*x13053))+((r10*x13048))+x13042+(((-1.0)*x13052)));
evalcond[8]=(((r11*x13045))+(((-1.0)*x13049))+(((-1.0)*sj2*x13046))+((x13043*x13053))+((r10*x13047))+(((-1.0)*x13041*x13044*x13051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13057=((1.0)*sj3);
IkReal x13058=(r01*sj5);
IkReal x13059=((1.0)*cj5*r00);
CheckValue<IkReal> x13060=IKPowWithIntegerCheck((x13058+(((-1.0)*x13059))),-1);
if(!x13060.valid){
continue;
}
CheckValue<IkReal> x13061=IKPowWithIntegerCheck((((cj3*x13058))+(((-1.0)*cj3*x13059))),-1);
if(!x13061.valid){
continue;
}
if( IKabs(x13060.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13061.value)*(((((-1.0)*cj5*r01*x13057))+(((-1.0)*r00*sj5*x13057)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13060.value)+IKsqr(((x13061.value)*(((((-1.0)*cj5*r01*x13057))+(((-1.0)*r00*sj5*x13057))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13060.value, ((x13061.value)*(((((-1.0)*cj5*r01*x13057))+(((-1.0)*r00*sj5*x13057))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13062=IKsin(j4);
IkReal x13063=IKcos(j4);
IkReal x13064=(sj1*sj2);
IkReal x13065=(cj5*sj3);
IkReal x13066=(r11*sj5);
IkReal x13067=(cj3*cj5);
IkReal x13068=((1.0)*cj1);
IkReal x13069=(cj3*sj5);
IkReal x13070=(sj3*sj5);
IkReal x13071=(cj2*sj1);
IkReal x13072=(r01*sj5);
IkReal x13073=((1.0)*sj3);
IkReal x13074=(cj2*x13068);
IkReal x13075=(r10*x13063);
IkReal x13076=(r22*x13062);
IkReal x13077=(cj3*x13063);
IkReal x13078=((1.0)*cj5*x13062);
evalcond[0]=((-1.0)*r22*x13063);
evalcond[1]=(((cj1*sj2))+x13071+((cj3*x13076)));
evalcond[2]=((((-1.0)*r10*x13078))+((x13062*x13066)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13078))+((x13062*x13072)));
evalcond[4]=((((-1.0)*x13074))+(((-1.0)*x13073*x13076))+x13064);
evalcond[5]=(((r00*x13069))+((r01*x13067))+((r00*x13063*x13065))+(((-1.0)*r01*x13063*x13070)));
evalcond[6]=(((r00*x13070))+((r01*x13063*x13069))+((r01*x13065))+(((-1.0)*r00*x13063*x13067)));
evalcond[7]=(((r10*x13070))+((x13066*x13077))+(((-1.0)*x13074))+x13064+((r11*x13065))+(((-1.0)*x13067*x13075)));
evalcond[8]=(((r10*x13069))+(((-1.0)*x13071))+(((-1.0)*x13063*x13066*x13073))+((r11*x13067))+((x13065*x13075))+(((-1.0)*sj2*x13068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13079=((1.0)*cj3);
IkReal x13080=(cj5*r00);
IkReal x13081=(r01*sj5);
CheckValue<IkReal> x13082=IKPowWithIntegerCheck((x13081+(((-1.0)*x13080))),-1);
if(!x13082.valid){
continue;
}
CheckValue<IkReal> x13083=IKPowWithIntegerCheck((((sj3*x13080))+(((-1.0)*sj3*x13081))),-1);
if(!x13083.valid){
continue;
}
if( IKabs(x13082.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13083.value)*(((((-1.0)*cj5*r01*x13079))+(((-1.0)*r00*sj5*x13079)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13082.value)+IKsqr(((x13083.value)*(((((-1.0)*cj5*r01*x13079))+(((-1.0)*r00*sj5*x13079))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13082.value, ((x13083.value)*(((((-1.0)*cj5*r01*x13079))+(((-1.0)*r00*sj5*x13079))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13084=IKsin(j4);
IkReal x13085=IKcos(j4);
IkReal x13086=(sj1*sj2);
IkReal x13087=(cj5*sj3);
IkReal x13088=(r11*sj5);
IkReal x13089=(cj3*cj5);
IkReal x13090=((1.0)*cj1);
IkReal x13091=(cj3*sj5);
IkReal x13092=(sj3*sj5);
IkReal x13093=(cj2*sj1);
IkReal x13094=(r01*sj5);
IkReal x13095=((1.0)*sj3);
IkReal x13096=(cj2*x13090);
IkReal x13097=(r10*x13085);
IkReal x13098=(r22*x13084);
IkReal x13099=(cj3*x13085);
IkReal x13100=((1.0)*cj5*x13084);
evalcond[0]=((-1.0)*r22*x13085);
evalcond[1]=(((cj3*x13098))+((cj1*sj2))+x13093);
evalcond[2]=(((x13084*x13088))+(((-1.0)*r10*x13100)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13100))+((x13084*x13094)));
evalcond[4]=((((-1.0)*x13095*x13098))+x13086+(((-1.0)*x13096)));
evalcond[5]=((((-1.0)*r01*x13085*x13092))+((r00*x13085*x13087))+((r01*x13089))+((r00*x13091)));
evalcond[6]=((((-1.0)*r00*x13085*x13089))+((r01*x13085*x13091))+((r01*x13087))+((r00*x13092)));
evalcond[7]=((((-1.0)*x13089*x13097))+((x13088*x13099))+((r11*x13087))+x13086+(((-1.0)*x13096))+((r10*x13092)));
evalcond[8]=(((r11*x13089))+((x13087*x13097))+(((-1.0)*x13085*x13088*x13095))+(((-1.0)*x13093))+(((-1.0)*sj2*x13090))+((r10*x13091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13101=cj5*cj5;
IkReal x13102=(cj3*r20);
IkReal x13103=(r21*sj3);
IkReal x13104=((1.0)*cj3);
IkReal x13105=(r01*r21);
IkReal x13106=(r01*sj3);
IkReal x13107=(r00*sj5);
IkReal x13108=(cj5*r01*sj5);
IkReal x13109=((1.0)*x13101);
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal((((r22*sj3*x13107))+((cj5*r22*x13106)))),IkReal(((((-1.0)*cj5*r20*sj3*x13107))+((r00*x13103))+(((-1.0)*r20*x13106*x13109))+((x13103*x13108))+(((-1.0)*r00*x13103*x13109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
CheckValue<IkReal> x13111=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x13107))+((x13102*x13108))+((cj3*x13101*x13105))+(((-1.0)*x13104*x13105))+(((-1.0)*r02*r22*x13104))+(((-1.0)*r00*x13102*x13109)))),-1);
if(!x13111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13110.value)+(((1.5707963267949)*(x13111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13112=IKsin(j4);
IkReal x13113=IKcos(j4);
IkReal x13114=(sj1*sj2);
IkReal x13115=(r11*sj5);
IkReal x13116=(cj5*r10);
IkReal x13117=(cj5*r01);
IkReal x13118=(cj5*r00);
IkReal x13119=((1.0)*cj1);
IkReal x13120=(cj3*sj5);
IkReal x13121=(r21*sj5);
IkReal x13122=(cj5*sj3);
IkReal x13123=(sj3*sj5);
IkReal x13124=(cj2*sj1);
IkReal x13125=(r01*sj5);
IkReal x13126=(cj3*cj5);
IkReal x13127=(cj5*r20);
IkReal x13128=(cj2*x13119);
IkReal x13129=((1.0)*x13113);
IkReal x13130=((1.0)*x13112);
IkReal x13131=(cj3*x13113);
IkReal x13132=(sj3*x13113);
IkReal x13133=(cj3*x13112);
evalcond[0]=(((x13112*x13121))+(((-1.0)*r22*x13129))+(((-1.0)*x13127*x13130)));
evalcond[1]=(((x13112*x13115))+(((-1.0)*r12*x13129))+(((-1.0)*x13116*x13130)));
evalcond[2]=((-1.0)+((x13112*x13125))+(((-1.0)*r02*x13129))+(((-1.0)*x13118*x13130)));
evalcond[3]=(((r00*x13123))+(((-1.0)*cj3*x13118*x13129))+((r01*x13113*x13120))+((r02*x13133))+((sj3*x13117)));
evalcond[4]=((((-1.0)*r02*sj3*x13130))+((r00*x13120))+((x13118*x13132))+((cj3*x13117))+(((-1.0)*r01*x13123*x13129)));
evalcond[5]=(((r20*x13123))+((cj1*sj2))+((r21*x13113*x13120))+(((-1.0)*r20*x13126*x13129))+((r21*x13122))+x13124+((r22*x13133)));
evalcond[6]=(((r10*x13123))+((r12*x13133))+((r11*x13122))+(((-1.0)*x13128))+x13114+(((-1.0)*cj3*x13116*x13129))+((x13115*x13131)));
evalcond[7]=(((r20*x13113*x13122))+(((-1.0)*r22*sj3*x13130))+((r20*x13120))+(((-1.0)*sj3*x13121*x13129))+((r21*x13126))+(((-1.0)*x13128))+x13114);
evalcond[8]=(((r10*x13120))+(((-1.0)*sj3*x13115*x13129))+((r11*x13126))+((x13116*x13132))+(((-1.0)*r12*sj3*x13130))+(((-1.0)*sj2*x13119))+(((-1.0)*x13124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13134=((1.0)*cj5);
CheckValue<IkReal> x13135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13134)))),-1);
if(!x13135.valid){
continue;
}
CheckValue<IkReal> x13136 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13134))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13135.value)))+(x13136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13137=IKsin(j4);
IkReal x13138=IKcos(j4);
IkReal x13139=(sj1*sj2);
IkReal x13140=(r11*sj5);
IkReal x13141=(cj5*r10);
IkReal x13142=(cj5*r01);
IkReal x13143=(cj5*r00);
IkReal x13144=((1.0)*cj1);
IkReal x13145=(cj3*sj5);
IkReal x13146=(r21*sj5);
IkReal x13147=(cj5*sj3);
IkReal x13148=(sj3*sj5);
IkReal x13149=(cj2*sj1);
IkReal x13150=(r01*sj5);
IkReal x13151=(cj3*cj5);
IkReal x13152=(cj5*r20);
IkReal x13153=(cj2*x13144);
IkReal x13154=((1.0)*x13138);
IkReal x13155=((1.0)*x13137);
IkReal x13156=(cj3*x13138);
IkReal x13157=(sj3*x13138);
IkReal x13158=(cj3*x13137);
evalcond[0]=((((-1.0)*x13152*x13155))+((x13137*x13146))+(((-1.0)*r22*x13154)));
evalcond[1]=((((-1.0)*r12*x13154))+(((-1.0)*x13141*x13155))+((x13137*x13140)));
evalcond[2]=((-1.0)+(((-1.0)*x13143*x13155))+(((-1.0)*r02*x13154))+((x13137*x13150)));
evalcond[3]=(((r02*x13158))+((r01*x13138*x13145))+((sj3*x13142))+((r00*x13148))+(((-1.0)*cj3*x13143*x13154)));
evalcond[4]=((((-1.0)*r01*x13148*x13154))+((cj3*x13142))+(((-1.0)*r02*sj3*x13155))+((r00*x13145))+((x13143*x13157)));
evalcond[5]=(((cj1*sj2))+((r20*x13148))+x13149+((r21*x13147))+((r22*x13158))+((r21*x13138*x13145))+(((-1.0)*r20*x13151*x13154)));
evalcond[6]=((((-1.0)*x13153))+((r11*x13147))+(((-1.0)*cj3*x13141*x13154))+((r12*x13158))+((r10*x13148))+x13139+((x13140*x13156)));
evalcond[7]=(((r21*x13151))+(((-1.0)*x13153))+((r20*x13138*x13147))+(((-1.0)*r22*sj3*x13155))+((r20*x13145))+(((-1.0)*sj3*x13146*x13154))+x13139);
evalcond[8]=((((-1.0)*r12*sj3*x13155))+(((-1.0)*sj2*x13144))+((x13141*x13157))+((r11*x13151))+(((-1.0)*sj3*x13140*x13154))+((r10*x13145))+(((-1.0)*x13149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13159=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13159.valid){
continue;
}
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13159.value)))+(x13160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13161=IKsin(j4);
IkReal x13162=IKcos(j4);
IkReal x13163=(sj1*sj2);
IkReal x13164=(r11*sj5);
IkReal x13165=(cj5*r10);
IkReal x13166=(cj5*r01);
IkReal x13167=(cj5*r00);
IkReal x13168=((1.0)*cj1);
IkReal x13169=(cj3*sj5);
IkReal x13170=(r21*sj5);
IkReal x13171=(cj5*sj3);
IkReal x13172=(sj3*sj5);
IkReal x13173=(cj2*sj1);
IkReal x13174=(r01*sj5);
IkReal x13175=(cj3*cj5);
IkReal x13176=(cj5*r20);
IkReal x13177=(cj2*x13168);
IkReal x13178=((1.0)*x13162);
IkReal x13179=((1.0)*x13161);
IkReal x13180=(cj3*x13162);
IkReal x13181=(sj3*x13162);
IkReal x13182=(cj3*x13161);
evalcond[0]=((((-1.0)*r22*x13178))+(((-1.0)*x13176*x13179))+((x13161*x13170)));
evalcond[1]=((((-1.0)*r12*x13178))+(((-1.0)*x13165*x13179))+((x13161*x13164)));
evalcond[2]=((-1.0)+(((-1.0)*x13167*x13179))+(((-1.0)*r02*x13178))+((x13161*x13174)));
evalcond[3]=(((r02*x13182))+((sj3*x13166))+((r00*x13172))+(((-1.0)*cj3*x13167*x13178))+((r01*x13162*x13169)));
evalcond[4]=((((-1.0)*r01*x13172*x13178))+((r00*x13169))+((x13167*x13181))+((cj3*x13166))+(((-1.0)*r02*sj3*x13179)));
evalcond[5]=(((r22*x13182))+((r20*x13172))+((cj1*sj2))+(((-1.0)*r20*x13175*x13178))+((r21*x13171))+x13173+((r21*x13162*x13169)));
evalcond[6]=(((x13164*x13180))+((r12*x13182))+(((-1.0)*x13177))+x13163+((r11*x13171))+((r10*x13172))+(((-1.0)*cj3*x13165*x13178)));
evalcond[7]=(((r20*x13169))+((r20*x13162*x13171))+(((-1.0)*x13177))+(((-1.0)*sj3*x13170*x13178))+((r21*x13175))+x13163+(((-1.0)*r22*sj3*x13179)));
evalcond[8]=((((-1.0)*sj2*x13168))+(((-1.0)*r12*sj3*x13179))+(((-1.0)*x13173))+((x13165*x13181))+(((-1.0)*sj3*x13164*x13178))+((r11*x13175))+((r10*x13169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13184 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13184)==0){
continue;
}
IkReal x13183=pow(x13184,-0.5);
CheckValue<IkReal> x13185 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13185.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13185.value));
IkReal gconst13=((-1.0)*r11*x13183);
IkReal gconst14=(r10*x13183);
CheckValue<IkReal> x13186 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13186.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13189 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13189.valid){
continue;
}
IkReal x13187=((-1.0)*(x13189.value));
IkReal x13188=x13183;
sj5=gconst13;
cj5=gconst14;
j5=x13187;
IkReal gconst12=x13187;
IkReal gconst13=((-1.0)*r11*x13188);
IkReal gconst14=(r10*x13188);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13190=((1.0)*gconst14);
CheckValue<IkReal> x13191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13190))+(((-1.0)*gconst13*r20)))),-1);
if(!x13191.valid){
continue;
}
CheckValue<IkReal> x13192 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13190))+((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*cj0*r00*x13190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13191.value)))+(x13192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13193=IKsin(j4);
IkReal x13194=IKcos(j4);
IkReal x13195=((1.0)*r22);
IkReal x13196=((1.0)*r12);
IkReal x13197=(cj2*sj0);
IkReal x13198=(gconst13*sj3);
IkReal x13199=(gconst13*r01);
IkReal x13200=(sj1*sj2);
IkReal x13201=(gconst14*sj3);
IkReal x13202=(cj1*cj2);
IkReal x13203=((1.0)*gconst14);
IkReal x13204=(cj3*gconst13);
IkReal x13205=(cj3*gconst14);
IkReal x13206=(cj2*sj1);
IkReal x13207=((1.0)*r02);
IkReal x13208=(cj1*sj2);
IkReal x13209=((1.0)*cj0);
IkReal x13210=(sj3*x13193);
IkReal x13211=(cj3*x13194);
IkReal x13212=(cj3*x13193);
IkReal x13213=(gconst13*x13193);
IkReal x13214=((1.0)*x13194);
evalcond[0]=((((-1.0)*r20*x13193*x13203))+((r21*x13213))+(((-1.0)*x13194*x13195)));
evalcond[1]=(sj0+(((-1.0)*r00*x13193*x13203))+(((-1.0)*x13194*x13207))+((x13193*x13199)));
evalcond[2]=((((-1.0)*r10*x13193*x13203))+(((-1.0)*x13194*x13196))+((r11*x13213))+(((-1.0)*x13209)));
evalcond[3]=(((r21*x13194*x13204))+((r21*x13201))+(((-1.0)*r20*x13203*x13211))+((r20*x13198))+x13206+x13208+((r22*x13212)));
evalcond[4]=(((r21*x13205))+x13200+(((-1.0)*x13195*x13210))+(((-1.0)*r21*x13198*x13214))+(((-1.0)*x13202))+((r20*x13204))+((r20*x13194*x13201)));
evalcond[5]=(((r01*x13205))+((r00*x13204))+(((-1.0)*r01*x13198*x13214))+(((-1.0)*x13207*x13210))+((cj0*x13206))+((cj0*x13208))+((r00*x13194*x13201)));
evalcond[6]=((((-1.0)*r00*x13203*x13211))+((r01*x13201))+((r00*x13198))+((x13199*x13211))+(((-1.0)*x13200*x13209))+((cj0*x13202))+((r02*x13212)));
evalcond[7]=(((r10*x13194*x13201))+((r10*x13204))+((sj1*x13197))+((r11*x13205))+((sj0*x13208))+(((-1.0)*x13196*x13210))+(((-1.0)*r11*x13198*x13214)));
evalcond[8]=((((-1.0)*sj0*x13200))+((r12*x13212))+((r11*x13194*x13204))+((r10*x13198))+((r11*x13201))+((cj1*x13197))+(((-1.0)*r10*x13203*x13211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13215 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13215.valid){
continue;
}
CheckValue<IkReal> x13216=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x13216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13215.value)+(((1.5707963267949)*(x13216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13217=IKsin(j4);
IkReal x13218=IKcos(j4);
IkReal x13219=((1.0)*r22);
IkReal x13220=((1.0)*r12);
IkReal x13221=(cj2*sj0);
IkReal x13222=(gconst13*sj3);
IkReal x13223=(gconst13*r01);
IkReal x13224=(sj1*sj2);
IkReal x13225=(gconst14*sj3);
IkReal x13226=(cj1*cj2);
IkReal x13227=((1.0)*gconst14);
IkReal x13228=(cj3*gconst13);
IkReal x13229=(cj3*gconst14);
IkReal x13230=(cj2*sj1);
IkReal x13231=((1.0)*r02);
IkReal x13232=(cj1*sj2);
IkReal x13233=((1.0)*cj0);
IkReal x13234=(sj3*x13217);
IkReal x13235=(cj3*x13218);
IkReal x13236=(cj3*x13217);
IkReal x13237=(gconst13*x13217);
IkReal x13238=((1.0)*x13218);
evalcond[0]=((((-1.0)*x13218*x13219))+((r21*x13237))+(((-1.0)*r20*x13217*x13227)));
evalcond[1]=(sj0+((x13217*x13223))+(((-1.0)*x13218*x13231))+(((-1.0)*r00*x13217*x13227)));
evalcond[2]=((((-1.0)*r10*x13217*x13227))+((r11*x13237))+(((-1.0)*x13218*x13220))+(((-1.0)*x13233)));
evalcond[3]=(((r21*x13225))+((r22*x13236))+(((-1.0)*r20*x13227*x13235))+x13230+x13232+((r20*x13222))+((r21*x13218*x13228)));
evalcond[4]=(((r20*x13218*x13225))+(((-1.0)*x13226))+((r21*x13229))+(((-1.0)*r21*x13222*x13238))+(((-1.0)*x13219*x13234))+x13224+((r20*x13228)));
evalcond[5]=((((-1.0)*r01*x13222*x13238))+((r00*x13228))+(((-1.0)*x13231*x13234))+((cj0*x13230))+((cj0*x13232))+((r01*x13229))+((r00*x13218*x13225)));
evalcond[6]=(((x13223*x13235))+((r02*x13236))+(((-1.0)*r00*x13227*x13235))+((r00*x13222))+(((-1.0)*x13224*x13233))+((r01*x13225))+((cj0*x13226)));
evalcond[7]=(((r10*x13218*x13225))+(((-1.0)*r11*x13222*x13238))+((sj1*x13221))+((r10*x13228))+((r11*x13229))+(((-1.0)*x13220*x13234))+((sj0*x13232)));
evalcond[8]=(((r10*x13222))+((r11*x13225))+(((-1.0)*sj0*x13224))+((cj1*x13221))+((r12*x13236))+(((-1.0)*r10*x13227*x13235))+((r11*x13218*x13228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13240 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13240)==0){
continue;
}
IkReal x13239=pow(x13240,-0.5);
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13241.value))));
IkReal gconst16=((1.0)*r11*x13239);
IkReal gconst17=((-1.0)*r10*x13239);
CheckValue<IkReal> x13242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13245 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13245.valid){
continue;
}
IkReal x13243=((1.0)*(x13245.value));
IkReal x13244=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13243)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13243)));
IkReal gconst16=((1.0)*r11*x13244);
IkReal gconst17=((-1.0)*r10*x13244);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
IkReal x13246=((1.0)*(x13248.value));
IkReal x13247=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13246)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13246)));
IkReal gconst16=((1.0)*r11*x13247);
IkReal gconst17=((-1.0)*r10*x13247);
IkReal x13249=r12*r12;
IkReal x13250=(cj0*r02);
IkReal x13251=x13239;
IkReal x13252=(sj0*x13251);
j4eval[0]=((IKabs((((x13249*x13252))+(((-1.0)*x13252))+((r12*x13250*x13251)))))+(IKabs((((r12*sj0))+x13250))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13255 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13255.valid){
continue;
}
IkReal x13253=((1.0)*(x13255.value));
IkReal x13254=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13253)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13253)));
IkReal gconst16=((1.0)*r11*x13254);
IkReal gconst17=((-1.0)*r10*x13254);
IkReal x13256=((1.0)*cj3);
CheckValue<IkReal> x13261=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13261.valid){
continue;
}
IkReal x13257=x13261.value;
IkReal x13258=(cj3*x13257);
IkReal x13259=(x13256*x13257);
IkReal x13260=((((-1.0)*x13259*(r10*r10)*(r20*r20)))+(((-1.0)*x13259*(r11*r11)*(r21*r21)))+(((-1.0)*x13256*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x13258)));
j4eval[0]=x13260;
j4eval[1]=IKsign(x13260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13264 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13264.valid){
continue;
}
IkReal x13262=((1.0)*(x13264.value));
IkReal x13263=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13262)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13262)));
IkReal gconst16=((1.0)*r11*x13263);
IkReal gconst17=((-1.0)*r10*x13263);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
IkReal x13265=((1.0)*(x13267.value));
IkReal x13266=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13265)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13265)));
IkReal gconst16=((1.0)*r11*x13266);
IkReal gconst17=((-1.0)*r10*x13266);
IkReal x13268=r12*r12;
IkReal x13269=(cj0*r02);
IkReal x13270=x13239;
IkReal x13271=(sj0*x13270);
j4eval[0]=((IKabs((((r12*sj0))+x13269)))+(IKabs(((((-1.0)*x13271))+((r12*x13269*x13270))+((x13268*x13271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13274 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13274.valid){
continue;
}
IkReal x13272=((1.0)*(x13274.value));
IkReal x13273=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13272)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13272)));
IkReal gconst16=((1.0)*r11*x13273);
IkReal gconst17=((-1.0)*r10*x13273);
IkReal x13275=r12*r12;
IkReal x13276=(sj1*sj2);
IkReal x13277=((1.0)*cj1*cj2);
CheckValue<IkReal> x13281=IKPowWithIntegerCheck(((-1.0)+x13275),-1);
if(!x13281.valid){
continue;
}
IkReal x13278=x13281.value;
if((((1.0)+(((-1.0)*x13275)))) < -0.00001)
continue;
IkReal x13279=IKsqrt(((1.0)+(((-1.0)*x13275))));
IkReal x13280=(r12*r22*x13278*x13279);
j4eval[0]=((IKabs(((((-1.0)*x13277*x13280))+((x13276*x13280)))))+(IKabs(((((-1.0)*r22*x13277))+((r22*x13276))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13282=(gconst17*r20);
IkReal x13283=(cj1*cj2);
IkReal x13284=(sj1*sj2);
IkReal x13285=(gconst16*r21);
CheckValue<IkReal> x13286=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x13282*x13285))+(x13285*x13285)+(x13282*x13282))),-1);
if(!x13286.valid){
continue;
}
CheckValue<IkReal> x13287 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13283))+((r22*x13284)))),IkReal((((x13284*x13285))+(((-1.0)*x13282*x13284))+((x13282*x13283))+(((-1.0)*x13283*x13285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13286.value)))+(x13287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13288=IKsin(j4);
IkReal x13289=IKcos(j4);
IkReal x13290=(gconst16*r01);
IkReal x13291=(cj2*sj1);
IkReal x13292=(gconst16*r21);
IkReal x13293=(gconst16*r11);
IkReal x13294=(cj1*sj2);
IkReal x13295=((1.0)*x13289);
IkReal x13296=(gconst17*x13289);
IkReal x13297=((1.0)*x13288);
evalcond[0]=((((-1.0)*gconst17*r20*x13297))+((x13288*x13292))+(((-1.0)*r22*x13295)));
evalcond[1]=(sj0+(((-1.0)*gconst17*r00*x13297))+((x13288*x13290))+(((-1.0)*r02*x13295)));
evalcond[2]=((((-1.0)*gconst17*r10*x13297))+(((-1.0)*r12*x13295))+((x13288*x13293))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x13296))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13292*x13295))+(((-1.0)*r22*x13297)));
evalcond[4]=(((cj0*x13294))+((cj0*x13291))+(((-1.0)*r02*x13297))+(((-1.0)*x13290*x13295))+((r00*x13296)));
evalcond[5]=((((-1.0)*x13293*x13295))+((sj0*x13291))+((sj0*x13294))+((r10*x13296))+(((-1.0)*r12*x13297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13298=((1.0)*gconst17);
CheckValue<IkReal> x13299=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13298)))),-1);
if(!x13299.valid){
continue;
}
CheckValue<IkReal> x13300 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13298))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13299.value)))+(x13300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13301=IKsin(j4);
IkReal x13302=IKcos(j4);
IkReal x13303=(gconst16*r01);
IkReal x13304=(cj2*sj1);
IkReal x13305=(gconst16*r21);
IkReal x13306=(gconst16*r11);
IkReal x13307=(cj1*sj2);
IkReal x13308=((1.0)*x13302);
IkReal x13309=(gconst17*x13302);
IkReal x13310=((1.0)*x13301);
evalcond[0]=(((x13301*x13305))+(((-1.0)*gconst17*r20*x13310))+(((-1.0)*r22*x13308)));
evalcond[1]=((((-1.0)*gconst17*r00*x13310))+sj0+((x13301*x13303))+(((-1.0)*r02*x13308)));
evalcond[2]=((((-1.0)*gconst17*r10*x13310))+((x13301*x13306))+(((-1.0)*r12*x13308))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x13309))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13305*x13308))+(((-1.0)*r22*x13310)));
evalcond[4]=((((-1.0)*r02*x13310))+((r00*x13309))+(((-1.0)*x13303*x13308))+((cj0*x13304))+((cj0*x13307)));
evalcond[5]=(((r10*x13309))+((sj0*x13304))+((sj0*x13307))+(((-1.0)*x13306*x13308))+(((-1.0)*r12*x13310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13311=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13311.valid){
continue;
}
CheckValue<IkReal> x13312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13311.value)))+(x13312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13313=IKsin(j4);
IkReal x13314=IKcos(j4);
IkReal x13315=(gconst16*r01);
IkReal x13316=(cj2*sj1);
IkReal x13317=(gconst16*r21);
IkReal x13318=(gconst16*r11);
IkReal x13319=(cj1*sj2);
IkReal x13320=((1.0)*x13314);
IkReal x13321=(gconst17*x13314);
IkReal x13322=((1.0)*x13313);
evalcond[0]=((((-1.0)*r22*x13320))+(((-1.0)*gconst17*r20*x13322))+((x13313*x13317)));
evalcond[1]=((((-1.0)*r02*x13320))+sj0+(((-1.0)*gconst17*r00*x13322))+((x13313*x13315)));
evalcond[2]=((((-1.0)*r12*x13320))+(((-1.0)*gconst17*r10*x13322))+((x13313*x13318))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13322))+(((-1.0)*x13317*x13320))+(((-1.0)*cj1*cj2))+((r20*x13321))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x13315*x13320))+(((-1.0)*r02*x13322))+((r00*x13321))+((cj0*x13319))+((cj0*x13316)));
evalcond[5]=((((-1.0)*r12*x13322))+((sj0*x13319))+((sj0*x13316))+((r10*x13321))+(((-1.0)*x13318*x13320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13325 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13325.valid){
continue;
}
IkReal x13323=((1.0)*(x13325.value));
IkReal x13324=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13323)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13323)));
IkReal gconst16=((1.0)*r11*x13324);
IkReal gconst17=((-1.0)*r10*x13324);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13328 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13328.valid){
continue;
}
IkReal x13326=((1.0)*(x13328.value));
IkReal x13327=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13326)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13326)));
IkReal gconst16=((1.0)*r11*x13327);
IkReal gconst17=((-1.0)*r10*x13327);
IkReal x13329=r12*r12;
IkReal x13330=(cj0*r02);
IkReal x13331=x13239;
IkReal x13332=(sj0*x13331);
j4eval[0]=((IKabs((((x13329*x13332))+(((-1.0)*x13332))+((r12*x13330*x13331)))))+(IKabs((((r12*sj0))+x13330))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13335.valid){
continue;
}
IkReal x13333=((1.0)*(x13335.value));
IkReal x13334=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13333)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13333)));
IkReal gconst16=((1.0)*r11*x13334);
IkReal gconst17=((-1.0)*r10*x13334);
IkReal x13336=r12*r12;
IkReal x13337=(sj1*sj2);
IkReal x13338=((1.0)+(((-1.0)*x13336)));
IkReal x13339=((1.0)*cj1*cj2);
CheckValue<IkReal> x13346=IKPowWithIntegerCheck(x13338,-1);
if(!x13346.valid){
continue;
}
IkReal x13340=x13346.value;
CheckValue<IkReal> x13347=IKPowWithIntegerCheck(((-1.0)+x13336),-1);
if(!x13347.valid){
continue;
}
IkReal x13341=x13347.value;
IkReal x13342=((1.0)*x13340);
if((x13338) < -0.00001)
continue;
IkReal x13343=IKsqrt(x13338);
IkReal x13344=(r12*r22*x13341*x13343);
IkReal x13345=((((-1.0)*x13342*(r11*r11)*(r21*r21)))+(((-1.0)*x13342*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x13340)));
j4eval[0]=x13345;
j4eval[1]=((IKabs((((x13337*x13344))+(((-1.0)*x13339*x13344)))))+(IKabs((((r22*x13337))+(((-1.0)*r22*x13339))))));
j4eval[2]=IKsign(x13345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13348=(gconst17*r20);
IkReal x13349=(cj1*cj2);
IkReal x13350=(sj1*sj2);
IkReal x13351=(gconst16*r21);
CheckValue<IkReal> x13352=IKPowWithIntegerCheck(IKsign(((((2.0)*x13348*x13351))+(((-1.0)*(x13351*x13351)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x13348*x13348))))),-1);
if(!x13352.valid){
continue;
}
CheckValue<IkReal> x13353 = IKatan2WithCheck(IkReal((((r22*x13350))+(((-1.0)*r22*x13349)))),IkReal((((x13350*x13351))+(((-1.0)*x13349*x13351))+(((-1.0)*x13348*x13350))+((x13348*x13349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13352.value)))+(x13353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13354=IKsin(j4);
IkReal x13355=IKcos(j4);
IkReal x13356=(cj2*sj1);
IkReal x13357=(gconst17*r20);
IkReal x13358=(gconst17*r00);
IkReal x13359=(gconst17*r10);
IkReal x13360=(cj1*sj2);
IkReal x13361=((1.0)*x13355);
IkReal x13362=(gconst16*x13354);
IkReal x13363=((1.0)*x13354);
IkReal x13364=(gconst16*x13355);
evalcond[0]=((((-1.0)*r22*x13361))+(((-1.0)*x13357*x13363))+((r21*x13362)));
evalcond[1]=(sj0+((r01*x13362))+(((-1.0)*r02*x13361))+(((-1.0)*x13358*x13363)));
evalcond[2]=((((-1.0)*r12*x13361))+((r11*x13362))+(((-1.0)*cj0))+(((-1.0)*x13359*x13363)));
evalcond[3]=(((r22*x13354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13357*x13361))+((r21*x13364)));
evalcond[4]=(((cj0*x13356))+((r02*x13354))+((r01*x13364))+((cj0*x13360))+(((-1.0)*x13358*x13361)));
evalcond[5]=(((sj0*x13360))+((r11*x13364))+((sj0*x13356))+((r12*x13354))+(((-1.0)*x13359*x13361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13365=((1.0)*gconst17);
CheckValue<IkReal> x13366=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13365)))),-1);
if(!x13366.valid){
continue;
}
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13365))+(((-1.0)*r10*sj0*x13365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13366.value)))+(x13367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13368=IKsin(j4);
IkReal x13369=IKcos(j4);
IkReal x13370=(cj2*sj1);
IkReal x13371=(gconst17*r20);
IkReal x13372=(gconst17*r00);
IkReal x13373=(gconst17*r10);
IkReal x13374=(cj1*sj2);
IkReal x13375=((1.0)*x13369);
IkReal x13376=(gconst16*x13368);
IkReal x13377=((1.0)*x13368);
IkReal x13378=(gconst16*x13369);
evalcond[0]=((((-1.0)*r22*x13375))+((r21*x13376))+(((-1.0)*x13371*x13377)));
evalcond[1]=(sj0+(((-1.0)*x13372*x13377))+((r01*x13376))+(((-1.0)*r02*x13375)));
evalcond[2]=((((-1.0)*x13373*x13377))+((r11*x13376))+(((-1.0)*cj0))+(((-1.0)*r12*x13375)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13368))+((r21*x13378))+(((-1.0)*x13371*x13375)));
evalcond[4]=((((-1.0)*x13372*x13375))+((r01*x13378))+((cj0*x13374))+((cj0*x13370))+((r02*x13368)));
evalcond[5]=(((r12*x13368))+(((-1.0)*x13373*x13375))+((sj0*x13374))+((sj0*x13370))+((r11*x13378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13379=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13379.valid){
continue;
}
CheckValue<IkReal> x13380 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13379.value)))+(x13380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13381=IKsin(j4);
IkReal x13382=IKcos(j4);
IkReal x13383=(cj2*sj1);
IkReal x13384=(gconst17*r20);
IkReal x13385=(gconst17*r00);
IkReal x13386=(gconst17*r10);
IkReal x13387=(cj1*sj2);
IkReal x13388=((1.0)*x13382);
IkReal x13389=(gconst16*x13381);
IkReal x13390=((1.0)*x13381);
IkReal x13391=(gconst16*x13382);
evalcond[0]=((((-1.0)*x13384*x13390))+(((-1.0)*r22*x13388))+((r21*x13389)));
evalcond[1]=(sj0+(((-1.0)*x13385*x13390))+((r01*x13389))+(((-1.0)*r02*x13388)));
evalcond[2]=(((r11*x13389))+(((-1.0)*x13386*x13390))+(((-1.0)*r12*x13388))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x13391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13381))+(((-1.0)*x13384*x13388)));
evalcond[4]=((((-1.0)*x13385*x13388))+((r01*x13391))+((cj0*x13387))+((cj0*x13383))+((r02*x13381)));
evalcond[5]=(((r11*x13391))+((sj0*x13387))+((sj0*x13383))+((r12*x13381))+(((-1.0)*x13386*x13388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
IkReal x13392=((1.0)*(x13394.value));
IkReal x13393=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13392)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13392)));
IkReal gconst16=((1.0)*r11*x13393);
IkReal gconst17=((-1.0)*r10*x13393);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13395=gconst16*gconst16;
IkReal x13396=gconst17*gconst17;
IkReal x13397=(cj3*r00);
IkReal x13398=(cj3*r01);
IkReal x13399=((1.0)*r20);
IkReal x13400=(gconst16*gconst17);
IkReal x13401=(r00*sj3);
IkReal x13402=(r01*sj3);
IkReal x13403=(r21*x13395);
CheckValue<IkReal> x13404=IKPowWithIntegerCheck(IKsign((((x13402*x13403))+(((-1.0)*r21*x13400*x13401))+(((-1.0)*x13399*x13400*x13402))+((r02*r22*sj3))+((r20*x13396*x13401)))),-1);
if(!x13404.valid){
continue;
}
CheckValue<IkReal> x13405 = IKatan2WithCheck(IkReal((((gconst17*r22*x13398))+((gconst16*r22*x13397)))),IkReal(((((-1.0)*x13397*x13399*x13400))+((r21*x13398*x13400))+((x13397*x13403))+(((-1.0)*x13396*x13398*x13399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13404.value)))+(x13405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13406=IKsin(j4);
IkReal x13407=IKcos(j4);
IkReal x13408=(sj1*sj2);
IkReal x13409=(cj3*gconst17);
IkReal x13410=(gconst16*r21);
IkReal x13411=(gconst16*r20);
IkReal x13412=(gconst17*r20);
IkReal x13413=(gconst17*sj3);
IkReal x13414=(cj3*gconst16);
IkReal x13415=(cj2*sj1);
IkReal x13416=((1.0)*cj1);
IkReal x13417=(gconst16*sj3);
IkReal x13418=(cj2*x13416);
IkReal x13419=((1.0)*x13407);
IkReal x13420=(gconst16*x13406);
IkReal x13421=((1.0)*x13406);
IkReal x13422=(cj3*x13407);
IkReal x13423=(cj3*x13406);
evalcond[0]=(((x13406*x13410))+(((-1.0)*x13412*x13421))+(((-1.0)*r22*x13419)));
evalcond[1]=((((-1.0)*r12*x13419))+((r11*x13420))+(((-1.0)*gconst17*r10*x13421)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13419))+(((-1.0)*gconst17*r00*x13421))+((r01*x13420)));
evalcond[3]=(((r01*x13407*x13414))+(((-1.0)*r00*x13409*x13419))+((r02*x13423))+((r01*x13413))+((r00*x13417)));
evalcond[4]=(((r01*x13409))+(((-1.0)*r01*x13417*x13419))+(((-1.0)*r02*sj3*x13421))+((r00*x13407*x13413))+((r00*x13414)));
evalcond[5]=(x13415+(((-1.0)*r20*x13409*x13419))+((cj1*sj2))+((r22*x13423))+((x13410*x13422))+((sj3*x13411))+((r21*x13413)));
evalcond[6]=(x13408+((r12*x13423))+(((-1.0)*r10*x13409*x13419))+((r11*x13407*x13414))+((r10*x13417))+((r11*x13413))+(((-1.0)*x13418)));
evalcond[7]=(x13408+((sj3*x13407*x13412))+((r21*x13409))+((cj3*x13411))+(((-1.0)*r22*sj3*x13421))+(((-1.0)*sj3*x13410*x13419))+(((-1.0)*x13418)));
evalcond[8]=((((-1.0)*sj2*x13416))+(((-1.0)*r11*x13417*x13419))+(((-1.0)*x13415))+((r11*x13409))+(((-1.0)*r12*sj3*x13421))+((r10*x13414))+((r10*x13407*x13413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13424 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst17*r10))+((gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13424.valid){
continue;
}
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13424.value)+(((1.5707963267949)*(x13425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13426=IKsin(j4);
IkReal x13427=IKcos(j4);
IkReal x13428=(sj1*sj2);
IkReal x13429=(cj3*gconst17);
IkReal x13430=(gconst16*r21);
IkReal x13431=(gconst16*r20);
IkReal x13432=(gconst17*r20);
IkReal x13433=(gconst17*sj3);
IkReal x13434=(cj3*gconst16);
IkReal x13435=(cj2*sj1);
IkReal x13436=((1.0)*cj1);
IkReal x13437=(gconst16*sj3);
IkReal x13438=(cj2*x13436);
IkReal x13439=((1.0)*x13427);
IkReal x13440=(gconst16*x13426);
IkReal x13441=((1.0)*x13426);
IkReal x13442=(cj3*x13427);
IkReal x13443=(cj3*x13426);
evalcond[0]=((((-1.0)*r22*x13439))+((x13426*x13430))+(((-1.0)*x13432*x13441)));
evalcond[1]=((((-1.0)*gconst17*r10*x13441))+(((-1.0)*r12*x13439))+((r11*x13440)));
evalcond[2]=((-1.0)+((r01*x13440))+(((-1.0)*gconst17*r00*x13441))+(((-1.0)*r02*x13439)));
evalcond[3]=(((r01*x13433))+((r01*x13427*x13434))+((r02*x13443))+(((-1.0)*r00*x13429*x13439))+((r00*x13437)));
evalcond[4]=((((-1.0)*r01*x13437*x13439))+(((-1.0)*r02*sj3*x13441))+((r00*x13427*x13433))+((r01*x13429))+((r00*x13434)));
evalcond[5]=(((r22*x13443))+x13435+((cj1*sj2))+(((-1.0)*r20*x13429*x13439))+((x13430*x13442))+((r21*x13433))+((sj3*x13431)));
evalcond[6]=(((r11*x13427*x13434))+x13428+(((-1.0)*x13438))+(((-1.0)*r10*x13429*x13439))+((r11*x13433))+((r12*x13443))+((r10*x13437)));
evalcond[7]=(x13428+((sj3*x13427*x13432))+(((-1.0)*r22*sj3*x13441))+(((-1.0)*x13438))+((r21*x13429))+(((-1.0)*sj3*x13430*x13439))+((cj3*x13431)));
evalcond[8]=((((-1.0)*sj2*x13436))+(((-1.0)*x13435))+(((-1.0)*r11*x13437*x13439))+(((-1.0)*r12*sj3*x13441))+((r10*x13427*x13433))+((r11*x13429))+((r10*x13434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13446 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13446.valid){
continue;
}
IkReal x13444=((1.0)*(x13446.value));
IkReal x13445=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13444)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13445);
rxp1_1=(px*r21);
rxp1_2=(r11*x13445);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13444)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13449 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13449.valid){
continue;
}
IkReal x13447=((1.0)*(x13449.value));
IkReal x13448=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13447)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13448);
rxp1_1=(px*r21);
rxp1_2=(r11*x13448);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13447)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
IkReal x13450=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r11*r21*x13450))+((r10*r20*x13450)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13453 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13453.valid){
continue;
}
IkReal x13451=((1.0)*(x13453.value));
IkReal x13452=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13451)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13452);
rxp1_1=(px*r21);
rxp1_2=(r11*x13452);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13451)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13455=IKPowWithIntegerCheck(r02,-1);
if(!x13455.valid){
continue;
}
IkReal x13454=x13455.value;
CheckValue<IkReal> x13456=IKPowWithIntegerCheck(sj3,-1);
if(!x13456.valid){
continue;
}
if( IKabs((x13454*(x13456.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13454)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13454*(x13456.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x13454))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13454*(x13456.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x13454));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13457=IKsin(j4);
IkReal x13458=IKcos(j4);
IkReal x13459=((1.0)*sj3);
IkReal x13460=(cj1*cj2);
IkReal x13461=(gconst16*r20);
IkReal x13462=(sj1*sj2);
IkReal x13463=((1.0)*gconst17);
IkReal x13464=(gconst17*sj3);
IkReal x13465=(gconst16*r11);
IkReal x13466=(cj3*r10);
IkReal x13467=(cj2*sj1);
IkReal x13468=(cj3*gconst17);
IkReal x13469=(cj1*sj2);
IkReal x13470=((1.0)*cj0);
IkReal x13471=(r02*x13457);
IkReal x13472=(r20*x13458);
IkReal x13473=(gconst16*r21*x13458);
evalcond[0]=(sj0+(((-1.0)*r02*x13458)));
evalcond[1]=(((gconst16*r21*x13457))+(((-1.0)*r20*x13457*x13463)));
evalcond[2]=((((-1.0)*x13459*x13471))+((cj0*x13469))+((cj0*x13467)));
evalcond[3]=((((-1.0)*x13462*x13470))+((cj0*x13460))+((cj3*x13471)));
evalcond[4]=((((-1.0)*r10*x13457*x13463))+(((-1.0)*x13470))+((x13457*x13465)));
evalcond[5]=(x13469+x13467+((r21*x13464))+((sj3*x13461))+(((-1.0)*cj3*x13463*x13472))+((cj3*x13473)));
evalcond[6]=(x13462+((r21*x13468))+(((-1.0)*x13459*x13473))+(((-1.0)*x13460))+((cj3*x13461))+((x13464*x13472)));
evalcond[7]=(((gconst16*x13466))+((sj0*x13469))+((sj0*x13467))+((r11*x13468))+(((-1.0)*x13458*x13459*x13465))+((r10*x13458*x13464)));
evalcond[8]=((((-1.0)*x13458*x13463*x13466))+(((-1.0)*sj0*x13462))+((sj0*x13460))+((r11*x13464))+((gconst16*r10*sj3))+((cj3*x13458*x13465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13474=((1.0)*gconst17);
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(((((-1.0)*r10*x13474))+((gconst16*r11))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x13474))+((cj3*gconst16*r21))),-1);
if(!x13476.valid){
continue;
}
if( IKabs((cj0*(x13475.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13476.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13474)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13475.value)))+IKsqr(((x13476.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13474))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13475.value)), ((x13476.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13474))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13477=IKsin(j4);
IkReal x13478=IKcos(j4);
IkReal x13479=((1.0)*sj3);
IkReal x13480=(cj1*cj2);
IkReal x13481=(gconst16*r20);
IkReal x13482=(sj1*sj2);
IkReal x13483=((1.0)*gconst17);
IkReal x13484=(gconst17*sj3);
IkReal x13485=(gconst16*r11);
IkReal x13486=(cj3*r10);
IkReal x13487=(cj2*sj1);
IkReal x13488=(cj3*gconst17);
IkReal x13489=(cj1*sj2);
IkReal x13490=((1.0)*cj0);
IkReal x13491=(r02*x13477);
IkReal x13492=(r20*x13478);
IkReal x13493=(gconst16*r21*x13478);
evalcond[0]=(sj0+(((-1.0)*r02*x13478)));
evalcond[1]=((((-1.0)*r20*x13477*x13483))+((gconst16*r21*x13477)));
evalcond[2]=(((cj0*x13487))+((cj0*x13489))+(((-1.0)*x13479*x13491)));
evalcond[3]=((((-1.0)*x13482*x13490))+((cj0*x13480))+((cj3*x13491)));
evalcond[4]=(((x13477*x13485))+(((-1.0)*r10*x13477*x13483))+(((-1.0)*x13490)));
evalcond[5]=(x13489+x13487+(((-1.0)*cj3*x13483*x13492))+((cj3*x13493))+((sj3*x13481))+((r21*x13484)));
evalcond[6]=(x13482+(((-1.0)*x13480))+((cj3*x13481))+(((-1.0)*x13479*x13493))+((x13484*x13492))+((r21*x13488)));
evalcond[7]=(((r10*x13478*x13484))+(((-1.0)*x13478*x13479*x13485))+((gconst16*x13486))+((r11*x13488))+((sj0*x13489))+((sj0*x13487)));
evalcond[8]=((((-1.0)*x13478*x13483*x13486))+((cj3*x13478*x13485))+(((-1.0)*sj0*x13482))+((r11*x13484))+((gconst16*r10*sj3))+((sj0*x13480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13494=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10))+((gconst16*r11))),-1);
if(!x13494.valid){
continue;
}
CheckValue<IkReal> x13495=IKPowWithIntegerCheck(r02,-1);
if(!x13495.valid){
continue;
}
if( IKabs((cj0*(x13494.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x13495.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13494.value)))+IKsqr((sj0*(x13495.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13494.value)), (sj0*(x13495.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13496=IKsin(j4);
IkReal x13497=IKcos(j4);
IkReal x13498=((1.0)*sj3);
IkReal x13499=(cj1*cj2);
IkReal x13500=(gconst16*r20);
IkReal x13501=(sj1*sj2);
IkReal x13502=((1.0)*gconst17);
IkReal x13503=(gconst17*sj3);
IkReal x13504=(gconst16*r11);
IkReal x13505=(cj3*r10);
IkReal x13506=(cj2*sj1);
IkReal x13507=(cj3*gconst17);
IkReal x13508=(cj1*sj2);
IkReal x13509=((1.0)*cj0);
IkReal x13510=(r02*x13496);
IkReal x13511=(r20*x13497);
IkReal x13512=(gconst16*r21*x13497);
evalcond[0]=(sj0+(((-1.0)*r02*x13497)));
evalcond[1]=((((-1.0)*r20*x13496*x13502))+((gconst16*r21*x13496)));
evalcond[2]=(((cj0*x13506))+((cj0*x13508))+(((-1.0)*x13498*x13510)));
evalcond[3]=(((cj0*x13499))+(((-1.0)*x13501*x13509))+((cj3*x13510)));
evalcond[4]=((((-1.0)*r10*x13496*x13502))+(((-1.0)*x13509))+((x13496*x13504)));
evalcond[5]=(x13508+x13506+(((-1.0)*cj3*x13502*x13511))+((cj3*x13512))+((sj3*x13500))+((r21*x13503)));
evalcond[6]=(x13501+(((-1.0)*x13499))+(((-1.0)*x13498*x13512))+((x13503*x13511))+((cj3*x13500))+((r21*x13507)));
evalcond[7]=(((r11*x13507))+(((-1.0)*x13497*x13498*x13504))+((sj0*x13508))+((sj0*x13506))+((r10*x13497*x13503))+((gconst16*x13505)));
evalcond[8]=((((-1.0)*sj0*x13501))+((r11*x13503))+((sj0*x13499))+((gconst16*r10*sj3))+((cj3*x13497*x13504))+(((-1.0)*x13497*x13502*x13505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
IkReal x13513=((1.0)*(x13515.value));
IkReal x13514=x13239;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13513)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13513)));
IkReal gconst16=((1.0)*r11*x13514);
IkReal gconst17=((-1.0)*r10*x13514);
IkReal x13516=r12*r12;
IkReal x13517=(cj0*r02);
IkReal x13518=x13239;
IkReal x13519=(sj0*x13518);
j4eval[0]=((IKabs(((((-1.0)*x13519))+((r12*x13517*x13518))+((x13516*x13519)))))+(IKabs((x13517+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13520=((1.0)*r02);
IkReal x13521=(sj1*sj2);
IkReal x13522=(cj1*cj2);
IkReal x13523=(gconst16*sj3);
IkReal x13524=(gconst17*r20);
IkReal x13525=((1.0)*sj3);
IkReal x13526=((1.0)*r21);
IkReal x13527=(gconst17*r21);
IkReal x13528=(cj3*gconst16*r20);
CheckValue<IkReal> x13529=IKPowWithIntegerCheck(((((-1.0)*gconst17*r00*x13524*x13525))+((r00*x13523*x13527))+(((-1.0)*gconst16*r01*x13523*x13526))+((r01*x13523*x13524))),-1);
if(!x13529.valid){
continue;
}
CheckValue<IkReal> x13530=IKPowWithIntegerCheck(((((-1.0)*x13523*x13526))+((sj3*x13524))),-1);
if(!x13530.valid){
continue;
}
if( IKabs(((x13529.value)*(((((-1.0)*cj3*x13520*x13527))+((r02*x13522))+(((-1.0)*x13520*x13528))+(((-1.0)*x13520*x13521))+(((-1.0)*sj0*x13524*x13525))+((r21*sj0*x13523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13530.value)*((x13522+(((-1.0)*x13528))+(((-1.0)*x13521))+(((-1.0)*cj3*gconst17*x13526)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13529.value)*(((((-1.0)*cj3*x13520*x13527))+((r02*x13522))+(((-1.0)*x13520*x13528))+(((-1.0)*x13520*x13521))+(((-1.0)*sj0*x13524*x13525))+((r21*sj0*x13523))))))+IKsqr(((x13530.value)*((x13522+(((-1.0)*x13528))+(((-1.0)*x13521))+(((-1.0)*cj3*gconst17*x13526))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13529.value)*(((((-1.0)*cj3*x13520*x13527))+((r02*x13522))+(((-1.0)*x13520*x13528))+(((-1.0)*x13520*x13521))+(((-1.0)*sj0*x13524*x13525))+((r21*sj0*x13523))))), ((x13530.value)*((x13522+(((-1.0)*x13528))+(((-1.0)*x13521))+(((-1.0)*cj3*gconst17*x13526))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13531=IKsin(j4);
IkReal x13532=IKcos(j4);
IkReal x13533=((1.0)*gconst17);
IkReal x13534=(gconst17*sj3);
IkReal x13535=(gconst16*r21);
IkReal x13536=(cj3*gconst17);
IkReal x13537=(sj1*sj2);
IkReal x13538=(cj1*cj2);
IkReal x13539=(gconst16*sj3);
IkReal x13540=(cj3*gconst16);
IkReal x13541=(cj2*sj1);
IkReal x13542=(cj1*sj2);
IkReal x13543=((1.0)*sj3);
IkReal x13544=((1.0)*cj0);
IkReal x13545=(cj3*x13532);
IkReal x13546=(gconst16*x13531);
IkReal x13547=((1.0)*x13532);
IkReal x13548=(r02*x13531);
IkReal x13549=(r12*x13531);
evalcond[0]=((((-1.0)*r20*x13531*x13533))+((x13531*x13535)));
evalcond[1]=(sj0+((r01*x13546))+(((-1.0)*r02*x13547))+(((-1.0)*r00*x13531*x13533)));
evalcond[2]=((((-1.0)*x13544))+(((-1.0)*r10*x13531*x13533))+((r11*x13546))+(((-1.0)*r12*x13547)));
evalcond[3]=(x13542+x13541+((r20*x13539))+((r21*x13534))+((x13535*x13545))+(((-1.0)*r20*x13533*x13545)));
evalcond[4]=(x13537+((r20*x13532*x13534))+(((-1.0)*x13538))+(((-1.0)*x13532*x13535*x13543))+((r20*x13540))+((r21*x13536)));
evalcond[5]=(((r00*x13540))+((r00*x13532*x13534))+((cj0*x13542))+((cj0*x13541))+(((-1.0)*x13543*x13548))+(((-1.0)*r01*x13539*x13547))+((r01*x13536)));
evalcond[6]=(((cj0*x13538))+((cj3*x13548))+((r01*x13532*x13540))+((r01*x13534))+((r00*x13539))+(((-1.0)*r00*x13533*x13545))+(((-1.0)*x13537*x13544)));
evalcond[7]=(((sj0*x13542))+((sj0*x13541))+((r10*x13540))+(((-1.0)*r11*x13539*x13547))+(((-1.0)*x13543*x13549))+((r10*x13532*x13534))+((r11*x13536)));
evalcond[8]=(((r11*x13532*x13540))+(((-1.0)*r10*x13533*x13545))+(((-1.0)*sj0*x13537))+((cj3*x13549))+((sj0*x13538))+((r10*x13539))+((r11*x13534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13550=((1.0)*gconst17);
CheckValue<IkReal> x13551=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13550)))),-1);
if(!x13551.valid){
continue;
}
CheckValue<IkReal> x13552 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13550))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13551.value)))+(x13552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13553=IKsin(j4);
IkReal x13554=IKcos(j4);
IkReal x13555=((1.0)*gconst17);
IkReal x13556=(gconst17*sj3);
IkReal x13557=(gconst16*r21);
IkReal x13558=(cj3*gconst17);
IkReal x13559=(sj1*sj2);
IkReal x13560=(cj1*cj2);
IkReal x13561=(gconst16*sj3);
IkReal x13562=(cj3*gconst16);
IkReal x13563=(cj2*sj1);
IkReal x13564=(cj1*sj2);
IkReal x13565=((1.0)*sj3);
IkReal x13566=((1.0)*cj0);
IkReal x13567=(cj3*x13554);
IkReal x13568=(gconst16*x13553);
IkReal x13569=((1.0)*x13554);
IkReal x13570=(r02*x13553);
IkReal x13571=(r12*x13553);
evalcond[0]=(((x13553*x13557))+(((-1.0)*r20*x13553*x13555)));
evalcond[1]=(sj0+((r01*x13568))+(((-1.0)*r02*x13569))+(((-1.0)*r00*x13553*x13555)));
evalcond[2]=(((r11*x13568))+(((-1.0)*r12*x13569))+(((-1.0)*r10*x13553*x13555))+(((-1.0)*x13566)));
evalcond[3]=(((x13557*x13567))+x13564+x13563+((r21*x13556))+((r20*x13561))+(((-1.0)*r20*x13555*x13567)));
evalcond[4]=(x13559+((r21*x13558))+((r20*x13562))+(((-1.0)*x13554*x13557*x13565))+(((-1.0)*x13560))+((r20*x13554*x13556)));
evalcond[5]=(((r00*x13562))+((r01*x13558))+((cj0*x13564))+((cj0*x13563))+((r00*x13554*x13556))+(((-1.0)*x13565*x13570))+(((-1.0)*r01*x13561*x13569)));
evalcond[6]=(((r00*x13561))+((r01*x13556))+((cj0*x13560))+((cj3*x13570))+(((-1.0)*x13559*x13566))+((r01*x13554*x13562))+(((-1.0)*r00*x13555*x13567)));
evalcond[7]=(((r10*x13562))+(((-1.0)*r11*x13561*x13569))+((r11*x13558))+((sj0*x13563))+((sj0*x13564))+((r10*x13554*x13556))+(((-1.0)*x13565*x13571)));
evalcond[8]=(((r10*x13561))+((r11*x13556))+(((-1.0)*r10*x13555*x13567))+((r11*x13554*x13562))+((sj0*x13560))+((cj3*x13571))+(((-1.0)*sj0*x13559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13572=r21*r21;
IkReal x13573=gconst16*gconst16;
IkReal x13574=r20*r20;
IkReal x13575=gconst17*gconst17;
IkReal x13576=(gconst16*r21);
IkReal x13577=(cj1*sj2);
IkReal x13578=(cj2*sj1);
IkReal x13579=(gconst17*r20);
IkReal x13580=(gconst16*sj3);
IkReal x13581=(r21*sj3);
IkReal x13582=((1.0)*cj3);
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13572*x13573*x13582))+(((-1.0)*x13582*(r22*r22)))+(((2.0)*cj3*x13576*x13579))+(((-1.0)*x13574*x13575*x13582)))),-1);
if(!x13583.valid){
continue;
}
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal((((r20*r22*x13580))+((r22*x13578))+((r22*x13577))+((gconst17*r22*x13581)))),IkReal(((((-1.0)*x13577*x13579))+(((-1.0)*gconst17*x13574*x13580))+(((-1.0)*r20*x13575*x13581))+((r20*x13573*x13581))+((gconst17*x13572*x13580))+(((-1.0)*x13578*x13579))+((x13576*x13577))+((x13576*x13578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13583.value)))+(x13584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13585=IKsin(j4);
IkReal x13586=IKcos(j4);
IkReal x13587=(cj3*gconst17);
IkReal x13588=(gconst16*r21);
IkReal x13589=(gconst17*sj3);
IkReal x13590=(gconst16*r20);
IkReal x13591=(sj1*sj2);
IkReal x13592=(cj1*cj2);
IkReal x13593=(gconst16*r10);
IkReal x13594=(cj2*sj1);
IkReal x13595=(gconst16*sj3);
IkReal x13596=(cj1*sj2);
IkReal x13597=((1.0)*cj0);
IkReal x13598=((1.0)*x13586);
IkReal x13599=(gconst16*x13585);
IkReal x13600=(cj3*x13586);
IkReal x13601=(cj3*x13585);
IkReal x13602=((1.0)*gconst17*x13585);
IkReal x13603=((1.0)*sj3*x13585);
evalcond[0]=((((-1.0)*r22*x13598))+((x13585*x13588))+(((-1.0)*r20*x13602)));
evalcond[1]=(sj0+((r01*x13599))+(((-1.0)*r00*x13602))+(((-1.0)*r02*x13598)));
evalcond[2]=(((r11*x13599))+(((-1.0)*r12*x13598))+(((-1.0)*r10*x13602))+(((-1.0)*x13597)));
evalcond[3]=(x13594+x13596+((r22*x13601))+((x13588*x13600))+((r21*x13589))+((sj3*x13590))+(((-1.0)*r20*x13587*x13598)));
evalcond[4]=((((-1.0)*sj3*x13588*x13598))+x13591+(((-1.0)*x13592))+((r21*x13587))+(((-1.0)*r22*x13603))+((cj3*x13590))+((r20*x13586*x13589)));
evalcond[5]=((((-1.0)*r01*x13595*x13598))+(((-1.0)*r02*x13603))+((r01*x13587))+((r00*x13586*x13589))+((cj0*x13596))+((cj0*x13594))+((cj3*gconst16*r00)));
evalcond[6]=(((r00*x13595))+((r02*x13601))+((r01*x13589))+((gconst16*r01*x13600))+((cj0*x13592))+(((-1.0)*r00*x13587*x13598))+(((-1.0)*x13591*x13597)));
evalcond[7]=(((sj0*x13596))+((sj0*x13594))+((r10*x13586*x13589))+(((-1.0)*r12*x13603))+((cj3*x13593))+(((-1.0)*r11*x13595*x13598))+((r11*x13587)));
evalcond[8]=(((sj0*x13592))+((r12*x13601))+(((-1.0)*r10*x13587*x13598))+(((-1.0)*sj0*x13591))+((sj3*x13593))+((gconst16*r11*x13600))+((r11*x13589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13604=((1.0)*gconst17);
CheckValue<IkReal> x13605 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13604))+((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13604))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13605.valid){
continue;
}
CheckValue<IkReal> x13606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13604))+(((-1.0)*gconst16*r20)))),-1);
if(!x13606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13605.value)+(((1.5707963267949)*(x13606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13607=IKsin(j4);
IkReal x13608=IKcos(j4);
IkReal x13609=(cj3*gconst17);
IkReal x13610=(gconst16*r21);
IkReal x13611=(gconst17*sj3);
IkReal x13612=(gconst16*r20);
IkReal x13613=(sj1*sj2);
IkReal x13614=(cj1*cj2);
IkReal x13615=(gconst16*r10);
IkReal x13616=(cj2*sj1);
IkReal x13617=(gconst16*sj3);
IkReal x13618=(cj1*sj2);
IkReal x13619=((1.0)*cj0);
IkReal x13620=((1.0)*x13608);
IkReal x13621=(gconst16*x13607);
IkReal x13622=(cj3*x13608);
IkReal x13623=(cj3*x13607);
IkReal x13624=((1.0)*gconst17*x13607);
IkReal x13625=((1.0)*sj3*x13607);
evalcond[0]=((((-1.0)*r22*x13620))+((x13607*x13610))+(((-1.0)*r20*x13624)));
evalcond[1]=(sj0+(((-1.0)*r00*x13624))+((r01*x13621))+(((-1.0)*r02*x13620)));
evalcond[2]=((((-1.0)*x13619))+((r11*x13621))+(((-1.0)*r10*x13624))+(((-1.0)*r12*x13620)));
evalcond[3]=(((r21*x13611))+x13618+x13616+((x13610*x13622))+((sj3*x13612))+(((-1.0)*r20*x13609*x13620))+((r22*x13623)));
evalcond[4]=((((-1.0)*sj3*x13610*x13620))+x13613+((cj3*x13612))+(((-1.0)*x13614))+((r21*x13609))+(((-1.0)*r22*x13625))+((r20*x13608*x13611)));
evalcond[5]=((((-1.0)*r01*x13617*x13620))+((r00*x13608*x13611))+((cj0*x13616))+((cj0*x13618))+((cj3*gconst16*r00))+(((-1.0)*r02*x13625))+((r01*x13609)));
evalcond[6]=(((r01*x13611))+((r00*x13617))+((r02*x13623))+(((-1.0)*r00*x13609*x13620))+((gconst16*r01*x13622))+((cj0*x13614))+(((-1.0)*x13613*x13619)));
evalcond[7]=(((r11*x13609))+((cj3*x13615))+(((-1.0)*r12*x13625))+(((-1.0)*r11*x13617*x13620))+((sj0*x13616))+((sj0*x13618))+((r10*x13608*x13611)));
evalcond[8]=(((r12*x13623))+((sj3*x13615))+((gconst16*r11*x13622))+((r11*x13611))+(((-1.0)*sj0*x13613))+(((-1.0)*r10*x13609*x13620))+((sj0*x13614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13626=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13626.valid){
continue;
}
CheckValue<IkReal> x13627 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13626.value)))+(x13627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13628=IKsin(j4);
IkReal x13629=IKcos(j4);
IkReal x13630=(cj3*gconst17);
IkReal x13631=(gconst16*r21);
IkReal x13632=(gconst17*sj3);
IkReal x13633=(gconst16*r20);
IkReal x13634=(sj1*sj2);
IkReal x13635=(cj1*cj2);
IkReal x13636=(gconst16*r10);
IkReal x13637=(cj2*sj1);
IkReal x13638=(gconst16*sj3);
IkReal x13639=(cj1*sj2);
IkReal x13640=((1.0)*cj0);
IkReal x13641=((1.0)*x13629);
IkReal x13642=(gconst16*x13628);
IkReal x13643=(cj3*x13629);
IkReal x13644=(cj3*x13628);
IkReal x13645=((1.0)*gconst17*x13628);
IkReal x13646=((1.0)*sj3*x13628);
evalcond[0]=((((-1.0)*r20*x13645))+((x13628*x13631))+(((-1.0)*r22*x13641)));
evalcond[1]=(sj0+(((-1.0)*r00*x13645))+((r01*x13642))+(((-1.0)*r02*x13641)));
evalcond[2]=((((-1.0)*r10*x13645))+(((-1.0)*r12*x13641))+((r11*x13642))+(((-1.0)*x13640)));
evalcond[3]=((((-1.0)*r20*x13630*x13641))+((r22*x13644))+x13637+x13639+((x13631*x13643))+((r21*x13632))+((sj3*x13633)));
evalcond[4]=((((-1.0)*x13635))+(((-1.0)*sj3*x13631*x13641))+x13634+((r21*x13630))+((cj3*x13633))+((r20*x13629*x13632))+(((-1.0)*r22*x13646)));
evalcond[5]=(((cj0*x13637))+((cj0*x13639))+((r00*x13629*x13632))+(((-1.0)*r02*x13646))+(((-1.0)*r01*x13638*x13641))+((cj3*gconst16*r00))+((r01*x13630)));
evalcond[6]=(((r02*x13644))+((gconst16*r01*x13643))+((cj0*x13635))+(((-1.0)*r00*x13630*x13641))+((r00*x13638))+(((-1.0)*x13634*x13640))+((r01*x13632)));
evalcond[7]=(((r11*x13630))+(((-1.0)*r12*x13646))+(((-1.0)*r11*x13638*x13641))+((r10*x13629*x13632))+((sj0*x13637))+((sj0*x13639))+((cj3*x13636)));
evalcond[8]=(((r11*x13632))+(((-1.0)*sj0*x13634))+((gconst16*r11*x13643))+((r12*x13644))+((sj0*x13635))+((sj3*x13636))+(((-1.0)*r10*x13630*x13641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13647=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13647;
j4eval[1]=IKsign(x13647);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13648=((1.0)*cj5);
IkReal x13649=((((-1.0)*r21*x13648))+(((-1.0)*r20*sj5)));
j4eval[0]=x13649;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13648))))));
j4eval[2]=IKsign(x13649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13650=cj5*cj5;
IkReal x13651=(cj3*r21);
IkReal x13652=(cj5*sj5);
IkReal x13653=((1.0)*cj3);
IkReal x13654=((((-1.0)*r12*r22*x13653))+((r10*x13651*x13652))+(((-1.0)*r11*x13651))+((cj3*r11*r20*x13652))+((r11*x13650*x13651))+(((-1.0)*r10*r20*x13650*x13653)));
j4eval[0]=x13654;
j4eval[1]=IKsign(x13654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13655=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13655;
j4eval[1]=IKsign(x13655);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13656=((1.0)*cj5);
IkReal x13657=((((-1.0)*r21*x13656))+(((-1.0)*r20*sj5)));
j4eval[0]=x13657;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13656))+((r01*sj5))))));
j4eval[2]=IKsign(x13657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13658=cj5*cj5;
IkReal x13659=r11*r11;
IkReal x13660=(cj5*r10);
IkReal x13661=(r11*sj5);
IkReal x13662=((((-1.0)*x13659))+(((2.0)*x13660*x13661))+((x13658*x13659))+(((-1.0)*(r12*r12)))+(((-1.0)*x13658*(r10*r10))));
j4eval[0]=x13662;
j4eval[1]=((IKabs(r12))+(IKabs((x13660+(((-1.0)*x13661))))));
j4eval[2]=IKsign(x13662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13663=cj5*cj5;
IkReal x13664=r11*r11;
IkReal x13665=(cj5*r10);
IkReal x13666=(r11*sj5);
CheckValue<IkReal> x13667 = IKatan2WithCheck(IkReal((x13665+(((-1.0)*x13666)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13667.valid){
continue;
}
CheckValue<IkReal> x13668=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13663*(r10*r10)))+(((2.0)*x13665*x13666))+(((-1.0)*(r12*r12)))+(((-1.0)*x13664))+((x13663*x13664)))),-1);
if(!x13668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13667.value)+(((1.5707963267949)*(x13668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13669=IKsin(j4);
IkReal x13670=IKcos(j4);
IkReal x13671=(cj5*r10);
IkReal x13672=(r01*sj5);
IkReal x13673=(cj5*r00);
IkReal x13674=(cj5*r20);
IkReal x13675=((1.0)*x13670);
IkReal x13676=((1.0)*x13669);
IkReal x13677=(sj5*x13669);
evalcond[0]=((((-1.0)*x13674*x13676))+((r21*x13677))+(((-1.0)*r22*x13675)));
evalcond[1]=(((x13669*x13672))+(((-1.0)*r02*x13675))+(((-1.0)*x13673*x13676)));
evalcond[2]=((((-1.0)*r12*x13676))+((x13670*x13671))+(((-1.0)*r11*sj5*x13675)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13675))+(((-1.0)*x13671*x13676))+((r11*x13677)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13672*x13675))+((x13670*x13673))+(((-1.0)*r02*x13676)));
evalcond[5]=((((-1.0)*r21*sj5*x13675))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13670*x13674))+(((-1.0)*r22*x13676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13678=((1.0)*cj5);
CheckValue<IkReal> x13679 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13679.valid){
continue;
}
CheckValue<IkReal> x13680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13678))+(((-1.0)*r20*sj5)))),-1);
if(!x13680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13679.value)+(((1.5707963267949)*(x13680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13681=IKsin(j4);
IkReal x13682=IKcos(j4);
IkReal x13683=(cj5*r10);
IkReal x13684=(r01*sj5);
IkReal x13685=(cj5*r00);
IkReal x13686=(cj5*r20);
IkReal x13687=((1.0)*x13682);
IkReal x13688=((1.0)*x13681);
IkReal x13689=(sj5*x13681);
evalcond[0]=((((-1.0)*r22*x13687))+(((-1.0)*x13686*x13688))+((r21*x13689)));
evalcond[1]=((((-1.0)*x13685*x13688))+((x13681*x13684))+(((-1.0)*r02*x13687)));
evalcond[2]=(((x13682*x13683))+(((-1.0)*r12*x13688))+(((-1.0)*r11*sj5*x13687)));
evalcond[3]=((-1.0)+((r11*x13689))+(((-1.0)*r12*x13687))+(((-1.0)*x13683*x13688)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13682*x13685))+(((-1.0)*x13684*x13687))+(((-1.0)*r02*x13688)));
evalcond[5]=((((-1.0)*r22*x13688))+((x13682*x13686))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13690 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13690.valid){
continue;
}
CheckValue<IkReal> x13691=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13690.value)+(((1.5707963267949)*(x13691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13692=IKsin(j4);
IkReal x13693=IKcos(j4);
IkReal x13694=(cj5*r10);
IkReal x13695=(r01*sj5);
IkReal x13696=(cj5*r00);
IkReal x13697=(cj5*r20);
IkReal x13698=((1.0)*x13693);
IkReal x13699=((1.0)*x13692);
IkReal x13700=(sj5*x13692);
evalcond[0]=(((r21*x13700))+(((-1.0)*r22*x13698))+(((-1.0)*x13697*x13699)));
evalcond[1]=(((x13692*x13695))+(((-1.0)*r02*x13698))+(((-1.0)*x13696*x13699)));
evalcond[2]=((((-1.0)*r11*sj5*x13698))+((x13693*x13694))+(((-1.0)*r12*x13699)));
evalcond[3]=((-1.0)+(((-1.0)*x13694*x13699))+((r11*x13700))+(((-1.0)*r12*x13698)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13699))+((cj1*sj2))+(((-1.0)*x13695*x13698))+((x13693*x13696)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13699))+(((-1.0)*r21*sj5*x13698))+((x13693*x13697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13701=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13701;
j4eval[1]=IKsign(x13701);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13702=((1.0)*cj5);
IkReal x13703=((((-1.0)*r21*x13702))+(((-1.0)*r20*sj5)));
j4eval[0]=x13703;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13702))))));
j4eval[2]=IKsign(x13703);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13704=cj5*cj5;
IkReal x13705=r11*r11;
IkReal x13706=(r11*sj5);
IkReal x13707=(cj5*r10);
IkReal x13708=((r12*r12)+(((-2.0)*x13706*x13707))+x13705+(((-1.0)*x13704*x13705))+((x13704*(r10*r10))));
j4eval[0]=x13708;
j4eval[1]=IKsign(x13708);
j4eval[2]=((IKabs(r12))+(IKabs((x13706+(((-1.0)*x13707))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13709=cj5*cj5;
IkReal x13710=r11*r11;
IkReal x13711=(cj5*r10);
IkReal x13712=(r11*sj5);
CheckValue<IkReal> x13713 = IKatan2WithCheck(IkReal(((((-1.0)*x13711))+x13712)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13713.valid){
continue;
}
CheckValue<IkReal> x13714=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13710+((x13709*(r10*r10)))+(((-1.0)*x13709*x13710))+(((-2.0)*x13711*x13712)))),-1);
if(!x13714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13713.value)+(((1.5707963267949)*(x13714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13715=IKcos(j4);
IkReal x13716=IKsin(j4);
IkReal x13717=(cj5*r00);
IkReal x13718=(cj5*r10);
IkReal x13719=(r21*sj5);
IkReal x13720=(cj5*r20);
IkReal x13721=((1.0)*x13715);
IkReal x13722=((1.0)*x13716);
IkReal x13723=(sj5*x13716);
IkReal x13724=(sj5*x13715);
evalcond[0]=(((r12*x13716))+((r11*x13724))+(((-1.0)*x13718*x13721)));
evalcond[1]=(((x13716*x13719))+(((-1.0)*r22*x13721))+(((-1.0)*x13720*x13722)));
evalcond[2]=(((r01*x13723))+(((-1.0)*r02*x13721))+(((-1.0)*x13717*x13722)));
evalcond[3]=((-1.0)+((r11*x13723))+(((-1.0)*r12*x13721))+(((-1.0)*x13718*x13722)));
evalcond[4]=(((cj2*sj1))+((r01*x13724))+((cj1*sj2))+(((-1.0)*x13717*x13721))+((r02*x13716)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x13720*x13721))+((sj1*sj2))+((r22*x13716))+((x13715*x13719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13725=((1.0)*cj5);
CheckValue<IkReal> x13726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13725))+(((-1.0)*r20*sj5)))),-1);
if(!x13726.valid){
continue;
}
CheckValue<IkReal> x13727 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13726.value)))+(x13727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13728=IKcos(j4);
IkReal x13729=IKsin(j4);
IkReal x13730=(cj5*r00);
IkReal x13731=(cj5*r10);
IkReal x13732=(r21*sj5);
IkReal x13733=(cj5*r20);
IkReal x13734=((1.0)*x13728);
IkReal x13735=((1.0)*x13729);
IkReal x13736=(sj5*x13729);
IkReal x13737=(sj5*x13728);
evalcond[0]=(((r12*x13729))+(((-1.0)*x13731*x13734))+((r11*x13737)));
evalcond[1]=((((-1.0)*x13733*x13735))+(((-1.0)*r22*x13734))+((x13729*x13732)));
evalcond[2]=((((-1.0)*r02*x13734))+(((-1.0)*x13730*x13735))+((r01*x13736)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13734))+(((-1.0)*x13731*x13735))+((r11*x13736)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13730*x13734))+((cj1*sj2))+((r02*x13729))+((r01*x13737)));
evalcond[5]=((((-1.0)*x13733*x13734))+((x13728*x13732))+((r22*x13729))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13738 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13738.valid){
continue;
}
CheckValue<IkReal> x13739=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13738.value)+(((1.5707963267949)*(x13739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13740=IKcos(j4);
IkReal x13741=IKsin(j4);
IkReal x13742=(cj5*r00);
IkReal x13743=(cj5*r10);
IkReal x13744=(r21*sj5);
IkReal x13745=(cj5*r20);
IkReal x13746=((1.0)*x13740);
IkReal x13747=((1.0)*x13741);
IkReal x13748=(sj5*x13741);
IkReal x13749=(sj5*x13740);
evalcond[0]=((((-1.0)*x13743*x13746))+((r12*x13741))+((r11*x13749)));
evalcond[1]=((((-1.0)*r22*x13746))+(((-1.0)*x13745*x13747))+((x13741*x13744)));
evalcond[2]=((((-1.0)*r02*x13746))+((r01*x13748))+(((-1.0)*x13742*x13747)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13746))+(((-1.0)*x13743*x13747))+((r11*x13748)));
evalcond[4]=(((cj2*sj1))+((r01*x13749))+((cj1*sj2))+(((-1.0)*x13742*x13746))+((r02*x13741)));
evalcond[5]=((((-1.0)*x13745*x13746))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13740*x13744))+((r22*x13741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13750=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13750);
rxp1_1=(px*r21);
rxp1_2=(r11*x13750);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13751=(cj5*r10);
IkReal x13752=(r11*sj5);
j4eval[0]=(x13752+(((-1.0)*x13751)));
j4eval[1]=((((-1.0)*sj3*x13752))+((sj3*x13751)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13753=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13753);
rxp1_1=(px*r21);
rxp1_2=(r11*x13753);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13754=(r11*sj5);
IkReal x13755=((1.0)*cj5*r10);
j4eval[0]=(x13754+(((-1.0)*x13755)));
j4eval[1]=((((-1.0)*cj3*x13755))+((cj3*x13754)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13756=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13756);
rxp1_1=(px*r21);
rxp1_2=(r11*x13756);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13757=((1.0)*r11);
CheckValue<IkReal> x13758=IKPowWithIntegerCheck(r02,-1);
if(!x13758.valid){
continue;
}
CheckValue<IkReal> x13759=IKPowWithIntegerCheck(sj3,-1);
if(!x13759.valid){
continue;
}
CheckValue<IkReal> x13760=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13757))),-1);
if(!x13760.valid){
continue;
}
if( IKabs(((x13758.value)*(x13759.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13760.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13758.value)*(x13759.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13760.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13757))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13758.value)*(x13759.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13760.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13757))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13761=IKsin(j4);
IkReal x13762=IKcos(j4);
IkReal x13763=(cj2*sj1);
IkReal x13764=(cj1*sj2);
IkReal x13765=(cj5*r10);
IkReal x13766=(sj1*sj2);
IkReal x13767=(cj5*sj3);
IkReal x13768=(r11*sj5);
IkReal x13769=(cj3*sj5);
IkReal x13770=(r21*sj5);
IkReal x13771=(cj1*cj2);
IkReal x13772=(cj3*cj5);
IkReal x13773=(sj3*sj5);
IkReal x13774=((1.0)*x13761);
IkReal x13775=(r20*x13762);
IkReal x13776=(cj3*x13762);
IkReal x13777=(sj3*x13762);
IkReal x13778=(x13764+x13763);
evalcond[0]=((-1.0)*r02*x13762);
evalcond[1]=((((-1.0)*cj5*r20*x13774))+((x13761*x13770)));
evalcond[2]=(x13778+(((-1.0)*r02*sj3*x13774)));
evalcond[3]=((((-1.0)*x13766))+x13771+((cj3*r02*x13761)));
evalcond[4]=((-1.0)+((x13761*x13768))+(((-1.0)*x13765*x13774)));
evalcond[5]=(((r11*x13772))+((r10*x13769))+(((-1.0)*x13768*x13777))+((x13765*x13777)));
evalcond[6]=(((r11*x13767))+((x13768*x13776))+(((-1.0)*x13765*x13776))+((r10*x13773)));
evalcond[7]=(x13778+(((-1.0)*x13772*x13775))+((r20*x13773))+((r21*x13762*x13769))+((r21*x13767)));
evalcond[8]=((((-1.0)*x13771))+x13766+((r20*x13769))+((x13767*x13775))+(((-1.0)*x13770*x13777))+((r21*x13772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13779=((1.0)*r10);
IkReal x13780=(r11*sj5);
CheckValue<IkReal> x13781=IKPowWithIntegerCheck((x13780+(((-1.0)*cj5*x13779))),-1);
if(!x13781.valid){
continue;
}
CheckValue<IkReal> x13782=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13779))+((cj3*x13780))),-1);
if(!x13782.valid){
continue;
}
if( IKabs(x13781.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13782.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13779)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13781.value)+IKsqr(((x13782.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13779))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13781.value, ((x13782.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13779))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13783=IKsin(j4);
IkReal x13784=IKcos(j4);
IkReal x13785=(cj2*sj1);
IkReal x13786=(cj1*sj2);
IkReal x13787=(cj5*r10);
IkReal x13788=(sj1*sj2);
IkReal x13789=(cj5*sj3);
IkReal x13790=(r11*sj5);
IkReal x13791=(cj3*sj5);
IkReal x13792=(r21*sj5);
IkReal x13793=(cj1*cj2);
IkReal x13794=(cj3*cj5);
IkReal x13795=(sj3*sj5);
IkReal x13796=((1.0)*x13783);
IkReal x13797=(r20*x13784);
IkReal x13798=(cj3*x13784);
IkReal x13799=(sj3*x13784);
IkReal x13800=(x13785+x13786);
evalcond[0]=((-1.0)*r02*x13784);
evalcond[1]=(((x13783*x13792))+(((-1.0)*cj5*r20*x13796)));
evalcond[2]=(x13800+(((-1.0)*r02*sj3*x13796)));
evalcond[3]=(x13793+(((-1.0)*x13788))+((cj3*r02*x13783)));
evalcond[4]=((-1.0)+((x13783*x13790))+(((-1.0)*x13787*x13796)));
evalcond[5]=(((x13787*x13799))+(((-1.0)*x13790*x13799))+((r11*x13794))+((r10*x13791)));
evalcond[6]=(((x13790*x13798))+((r11*x13789))+((r10*x13795))+(((-1.0)*x13787*x13798)));
evalcond[7]=(x13800+(((-1.0)*x13794*x13797))+((r21*x13789))+((r21*x13784*x13791))+((r20*x13795)));
evalcond[8]=(x13788+(((-1.0)*x13793))+((r21*x13794))+(((-1.0)*x13792*x13799))+((r20*x13791))+((x13789*x13797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13801=(cj5*r10);
IkReal x13802=((1.0)*r11);
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(((((-1.0)*x13801))+((r11*sj5))),-1);
if(!x13803.valid){
continue;
}
CheckValue<IkReal> x13804=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13802))+((sj3*x13801))),-1);
if(!x13804.valid){
continue;
}
if( IKabs(x13803.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13804.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13802)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13803.value)+IKsqr(((x13804.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13802))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13803.value, ((x13804.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13802))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13805=IKsin(j4);
IkReal x13806=IKcos(j4);
IkReal x13807=(cj2*sj1);
IkReal x13808=(cj1*sj2);
IkReal x13809=(cj5*r10);
IkReal x13810=(sj1*sj2);
IkReal x13811=(cj5*sj3);
IkReal x13812=(r11*sj5);
IkReal x13813=(cj3*sj5);
IkReal x13814=(r21*sj5);
IkReal x13815=(cj1*cj2);
IkReal x13816=(cj3*cj5);
IkReal x13817=(sj3*sj5);
IkReal x13818=((1.0)*x13805);
IkReal x13819=(r20*x13806);
IkReal x13820=(cj3*x13806);
IkReal x13821=(sj3*x13806);
IkReal x13822=(x13808+x13807);
evalcond[0]=((-1.0)*r02*x13806);
evalcond[1]=((((-1.0)*cj5*r20*x13818))+((x13805*x13814)));
evalcond[2]=(x13822+(((-1.0)*r02*sj3*x13818)));
evalcond[3]=(x13815+(((-1.0)*x13810))+((cj3*r02*x13805)));
evalcond[4]=((-1.0)+(((-1.0)*x13809*x13818))+((x13805*x13812)));
evalcond[5]=(((r11*x13816))+((r10*x13813))+((x13809*x13821))+(((-1.0)*x13812*x13821)));
evalcond[6]=(((r11*x13811))+((r10*x13817))+(((-1.0)*x13809*x13820))+((x13812*x13820)));
evalcond[7]=(x13822+((r21*x13811))+(((-1.0)*x13816*x13819))+((r21*x13806*x13813))+((r20*x13817)));
evalcond[8]=(((x13811*x13819))+x13810+((r21*x13816))+(((-1.0)*x13815))+(((-1.0)*x13814*x13821))+((r20*x13813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13823=cj5*cj5;
IkReal x13824=((1.0)*cj3);
IkReal x13825=(r10*r21);
IkReal x13826=(cj5*sj5);
IkReal x13827=(r11*r21);
IkReal x13828=(r11*r20);
IkReal x13829=(r22*sj3);
IkReal x13830=(r10*r20);
IkReal x13831=((1.0)*sj3*x13823);
CheckValue<IkReal> x13832 = IKatan2WithCheck(IkReal((((cj5*r11*x13829))+((r10*sj5*x13829)))),IkReal(((((-1.0)*sj3*x13826*x13830))+((sj3*x13826*x13827))+(((-1.0)*x13825*x13831))+((sj3*x13825))+(((-1.0)*x13828*x13831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13832.valid){
continue;
}
CheckValue<IkReal> x13833=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13824*x13827))+((cj3*x13826*x13828))+((cj3*x13825*x13826))+((cj3*x13823*x13827))+(((-1.0)*x13823*x13824*x13830))+(((-1.0)*r12*r22*x13824)))),-1);
if(!x13833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13832.value)+(((1.5707963267949)*(x13833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13834=IKsin(j4);
IkReal x13835=IKcos(j4);
IkReal x13836=(cj2*sj1);
IkReal x13837=(cj1*sj2);
IkReal x13838=(cj5*sj3);
IkReal x13839=(cj5*r10);
IkReal x13840=(r00*sj5);
IkReal x13841=(sj1*sj2);
IkReal x13842=(r11*sj5);
IkReal x13843=(cj3*cj5);
IkReal x13844=(cj3*sj5);
IkReal x13845=(r21*sj5);
IkReal x13846=(cj1*cj2);
IkReal x13847=(sj3*sj5);
IkReal x13848=(r01*sj5);
IkReal x13849=((1.0)*x13835);
IkReal x13850=((1.0)*x13834);
IkReal x13851=(cj3*x13834);
IkReal x13852=(cj3*x13835);
IkReal x13853=(x13836+x13837);
evalcond[0]=((((-1.0)*cj5*r20*x13850))+((x13834*x13845))+(((-1.0)*r22*x13849)));
evalcond[1]=(((x13834*x13848))+(((-1.0)*r02*x13849))+(((-1.0)*cj5*r00*x13850)));
evalcond[2]=((-1.0)+(((-1.0)*x13839*x13850))+((x13834*x13842))+(((-1.0)*r12*x13849)));
evalcond[3]=((((-1.0)*cj3*x13839*x13849))+((r11*x13838))+((r12*x13851))+((x13842*x13852))+((r10*x13847)));
evalcond[4]=((((-1.0)*r12*sj3*x13850))+((r11*x13843))+((r10*x13844))+(((-1.0)*sj3*x13842*x13849))+((r10*x13835*x13838)));
evalcond[5]=(((r22*x13851))+(((-1.0)*r20*x13843*x13849))+x13853+((r21*x13838))+((r21*x13835*x13844))+((r20*x13847)));
evalcond[6]=(x13853+(((-1.0)*r01*x13847*x13849))+(((-1.0)*r02*sj3*x13850))+((r00*x13835*x13838))+((r01*x13843))+((cj3*x13840)));
evalcond[7]=((((-1.0)*r00*x13843*x13849))+((r01*x13838))+x13846+((sj3*x13840))+((r02*x13851))+((r01*x13835*x13844))+(((-1.0)*x13841)));
evalcond[8]=(x13841+((r21*x13843))+((r20*x13835*x13838))+(((-1.0)*r22*sj3*x13850))+((r20*x13844))+(((-1.0)*sj3*x13845*x13849))+(((-1.0)*x13846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13854=((1.0)*cj5);
CheckValue<IkReal> x13855 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13855.valid){
continue;
}
CheckValue<IkReal> x13856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13854))+(((-1.0)*r20*sj5)))),-1);
if(!x13856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13855.value)+(((1.5707963267949)*(x13856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13857=IKsin(j4);
IkReal x13858=IKcos(j4);
IkReal x13859=(cj2*sj1);
IkReal x13860=(cj1*sj2);
IkReal x13861=(cj5*sj3);
IkReal x13862=(cj5*r10);
IkReal x13863=(r00*sj5);
IkReal x13864=(sj1*sj2);
IkReal x13865=(r11*sj5);
IkReal x13866=(cj3*cj5);
IkReal x13867=(cj3*sj5);
IkReal x13868=(r21*sj5);
IkReal x13869=(cj1*cj2);
IkReal x13870=(sj3*sj5);
IkReal x13871=(r01*sj5);
IkReal x13872=((1.0)*x13858);
IkReal x13873=((1.0)*x13857);
IkReal x13874=(cj3*x13857);
IkReal x13875=(cj3*x13858);
IkReal x13876=(x13859+x13860);
evalcond[0]=((((-1.0)*cj5*r20*x13873))+(((-1.0)*r22*x13872))+((x13857*x13868)));
evalcond[1]=(((x13857*x13871))+(((-1.0)*cj5*r00*x13873))+(((-1.0)*r02*x13872)));
evalcond[2]=((-1.0)+((x13857*x13865))+(((-1.0)*r12*x13872))+(((-1.0)*x13862*x13873)));
evalcond[3]=(((r11*x13861))+((x13865*x13875))+((r12*x13874))+(((-1.0)*cj3*x13862*x13872))+((r10*x13870)));
evalcond[4]=(((r11*x13866))+(((-1.0)*r12*sj3*x13873))+((r10*x13858*x13861))+(((-1.0)*sj3*x13865*x13872))+((r10*x13867)));
evalcond[5]=(((r21*x13858*x13867))+(((-1.0)*r20*x13866*x13872))+x13876+((r21*x13861))+((r20*x13870))+((r22*x13874)));
evalcond[6]=(((r00*x13858*x13861))+((r01*x13866))+x13876+(((-1.0)*r02*sj3*x13873))+(((-1.0)*r01*x13870*x13872))+((cj3*x13863)));
evalcond[7]=(((r01*x13861))+(((-1.0)*x13864))+(((-1.0)*r00*x13866*x13872))+x13869+((sj3*x13863))+((r01*x13858*x13867))+((r02*x13874)));
evalcond[8]=((((-1.0)*x13869))+x13864+((r21*x13866))+((r20*x13867))+(((-1.0)*r22*sj3*x13873))+((r20*x13858*x13861))+(((-1.0)*sj3*x13868*x13872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13877 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13877.valid){
continue;
}
CheckValue<IkReal> x13878=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13877.value)+(((1.5707963267949)*(x13878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13879=IKsin(j4);
IkReal x13880=IKcos(j4);
IkReal x13881=(cj2*sj1);
IkReal x13882=(cj1*sj2);
IkReal x13883=(cj5*sj3);
IkReal x13884=(cj5*r10);
IkReal x13885=(r00*sj5);
IkReal x13886=(sj1*sj2);
IkReal x13887=(r11*sj5);
IkReal x13888=(cj3*cj5);
IkReal x13889=(cj3*sj5);
IkReal x13890=(r21*sj5);
IkReal x13891=(cj1*cj2);
IkReal x13892=(sj3*sj5);
IkReal x13893=(r01*sj5);
IkReal x13894=((1.0)*x13880);
IkReal x13895=((1.0)*x13879);
IkReal x13896=(cj3*x13879);
IkReal x13897=(cj3*x13880);
IkReal x13898=(x13882+x13881);
evalcond[0]=((((-1.0)*cj5*r20*x13895))+((x13879*x13890))+(((-1.0)*r22*x13894)));
evalcond[1]=((((-1.0)*r02*x13894))+((x13879*x13893))+(((-1.0)*cj5*r00*x13895)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13894))+(((-1.0)*x13884*x13895))+((x13879*x13887)));
evalcond[3]=((((-1.0)*cj3*x13884*x13894))+((r10*x13892))+((r12*x13896))+((r11*x13883))+((x13887*x13897)));
evalcond[4]=((((-1.0)*r12*sj3*x13895))+((r10*x13880*x13883))+((r10*x13889))+((r11*x13888))+(((-1.0)*sj3*x13887*x13894)));
evalcond[5]=(((r22*x13896))+x13898+((r20*x13892))+(((-1.0)*r20*x13888*x13894))+((r21*x13883))+((r21*x13880*x13889)));
evalcond[6]=((((-1.0)*r02*sj3*x13895))+(((-1.0)*r01*x13892*x13894))+((cj3*x13885))+x13898+((r00*x13880*x13883))+((r01*x13888)));
evalcond[7]=(((sj3*x13885))+((r01*x13880*x13889))+x13891+((r02*x13896))+(((-1.0)*x13886))+((r01*x13883))+(((-1.0)*r00*x13888*x13894)));
evalcond[8]=((((-1.0)*r22*sj3*x13895))+(((-1.0)*sj3*x13890*x13894))+x13886+((r20*x13889))+(((-1.0)*x13891))+((r21*x13888))+((r20*x13880*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13899=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13899;
j4eval[1]=IKsign(x13899);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13900=((1.0)*cj5);
IkReal x13901=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13900)));
j4eval[0]=x13901;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13900))))));
j4eval[2]=IKsign(x13901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13902=cj5*cj5;
IkReal x13903=(cj3*r21);
IkReal x13904=(cj5*sj5);
IkReal x13905=((1.0)*cj3);
IkReal x13906=((((-1.0)*r10*r20*x13902*x13905))+((r10*x13903*x13904))+(((-1.0)*r12*r22*x13905))+((cj3*r11*r20*x13904))+((r11*x13902*x13903))+(((-1.0)*r11*x13903)));
j4eval[0]=x13906;
j4eval[1]=IKsign(x13906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13907=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13907;
j4eval[1]=IKsign(x13907);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13908=((1.0)*cj5);
IkReal x13909=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13908)));
j4eval[0]=x13909;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13908)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13910=cj5*cj5;
IkReal x13911=r11*r11;
IkReal x13912=(r11*sj5);
IkReal x13913=(cj5*r10);
IkReal x13914=(((x13910*(r10*r10)))+(r12*r12)+x13911+(((-1.0)*x13910*x13911))+(((-2.0)*x13912*x13913)));
j4eval[0]=x13914;
j4eval[1]=IKsign(x13914);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13912))+x13913))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13915=cj5*cj5;
IkReal x13916=r11*r11;
IkReal x13917=(cj5*r10);
IkReal x13918=(r11*sj5);
CheckValue<IkReal> x13919 = IKatan2WithCheck(IkReal(((((-1.0)*x13918))+x13917)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13919.valid){
continue;
}
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x13915*x13916))+x13916+(((-2.0)*x13917*x13918))+((x13915*(r10*r10))))),-1);
if(!x13920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13919.value)+(((1.5707963267949)*(x13920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13921=IKsin(j4);
IkReal x13922=IKcos(j4);
IkReal x13923=(cj5*r10);
IkReal x13924=(r01*sj5);
IkReal x13925=((1.0)*cj2);
IkReal x13926=(cj5*r00);
IkReal x13927=(cj5*r20);
IkReal x13928=((1.0)*x13922);
IkReal x13929=((1.0)*x13921);
IkReal x13930=(sj5*x13921);
evalcond[0]=((((-1.0)*x13927*x13929))+((r21*x13930))+(((-1.0)*r22*x13928)));
evalcond[1]=((((-1.0)*x13926*x13929))+((x13921*x13924))+(((-1.0)*r02*x13928)));
evalcond[2]=((((-1.0)*r12*x13929))+((x13922*x13923))+(((-1.0)*r11*sj5*x13928)));
evalcond[3]=((1.0)+((r11*x13930))+(((-1.0)*r12*x13928))+(((-1.0)*x13923*x13929)));
evalcond[4]=(((x13922*x13927))+(((-1.0)*r21*sj5*x13928))+(((-1.0)*r22*x13929))+((sj1*sj2))+(((-1.0)*cj1*x13925)));
evalcond[5]=((((-1.0)*sj1*x13925))+((x13922*x13926))+(((-1.0)*x13924*x13928))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13931=((1.0)*cj5);
CheckValue<IkReal> x13932 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13931))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13932.valid){
continue;
}
CheckValue<IkReal> x13933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13931)))),-1);
if(!x13933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13932.value)+(((1.5707963267949)*(x13933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13934=IKsin(j4);
IkReal x13935=IKcos(j4);
IkReal x13936=(cj5*r10);
IkReal x13937=(r01*sj5);
IkReal x13938=((1.0)*cj2);
IkReal x13939=(cj5*r00);
IkReal x13940=(cj5*r20);
IkReal x13941=((1.0)*x13935);
IkReal x13942=((1.0)*x13934);
IkReal x13943=(sj5*x13934);
evalcond[0]=((((-1.0)*x13940*x13942))+(((-1.0)*r22*x13941))+((r21*x13943)));
evalcond[1]=(((x13934*x13937))+(((-1.0)*r02*x13941))+(((-1.0)*x13939*x13942)));
evalcond[2]=((((-1.0)*r11*sj5*x13941))+(((-1.0)*r12*x13942))+((x13935*x13936)));
evalcond[3]=((1.0)+(((-1.0)*x13936*x13942))+(((-1.0)*r12*x13941))+((r11*x13943)));
evalcond[4]=(((x13935*x13940))+((sj1*sj2))+(((-1.0)*r22*x13942))+(((-1.0)*cj1*x13938))+(((-1.0)*r21*sj5*x13941)));
evalcond[5]=((((-1.0)*sj1*x13938))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13942))+(((-1.0)*x13937*x13941))+((x13935*x13939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13944=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13944.valid){
continue;
}
CheckValue<IkReal> x13945 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13944.value)))+(x13945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13946=IKsin(j4);
IkReal x13947=IKcos(j4);
IkReal x13948=(cj5*r10);
IkReal x13949=(r01*sj5);
IkReal x13950=((1.0)*cj2);
IkReal x13951=(cj5*r00);
IkReal x13952=(cj5*r20);
IkReal x13953=((1.0)*x13947);
IkReal x13954=((1.0)*x13946);
IkReal x13955=(sj5*x13946);
evalcond[0]=((((-1.0)*x13952*x13954))+((r21*x13955))+(((-1.0)*r22*x13953)));
evalcond[1]=((((-1.0)*r02*x13953))+((x13946*x13949))+(((-1.0)*x13951*x13954)));
evalcond[2]=((((-1.0)*r11*sj5*x13953))+((x13947*x13948))+(((-1.0)*r12*x13954)));
evalcond[3]=((1.0)+((r11*x13955))+(((-1.0)*x13948*x13954))+(((-1.0)*r12*x13953)));
evalcond[4]=((((-1.0)*r21*sj5*x13953))+((sj1*sj2))+(((-1.0)*cj1*x13950))+(((-1.0)*r22*x13954))+((x13947*x13952)));
evalcond[5]=((((-1.0)*x13949*x13953))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13954))+((x13947*x13951))+(((-1.0)*sj1*x13950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13956=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13956;
j4eval[1]=IKsign(x13956);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13957=((1.0)*cj5);
IkReal x13958=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13957)));
j4eval[0]=x13958;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13957))))));
j4eval[2]=IKsign(x13958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13959=(sj1*sj2);
IkReal x13960=(cj5*r10);
IkReal x13961=(r11*sj5);
IkReal x13962=(cj1*cj2);
IkReal x13963=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x13963;
j4eval[1]=((IKabs((((x13959*x13961))+((x13960*x13962))+(((-1.0)*x13961*x13962))+(((-1.0)*x13959*x13960)))))+(IKabs(((((-1.0)*r12*x13959))+((r12*x13962))))));
j4eval[2]=IKsign(x13963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13964=(sj1*sj2);
IkReal x13965=(cj5*r10);
IkReal x13966=(r11*sj5);
IkReal x13967=(cj1*cj2);
CheckValue<IkReal> x13968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13968.valid){
continue;
}
CheckValue<IkReal> x13969 = IKatan2WithCheck(IkReal(((((-1.0)*x13964*x13965))+(((-1.0)*x13966*x13967))+((x13965*x13967))+((x13964*x13966)))),IkReal((((r12*x13967))+(((-1.0)*r12*x13964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13968.value)))+(x13969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13970=IKcos(j4);
IkReal x13971=IKsin(j4);
IkReal x13972=(cj5*r00);
IkReal x13973=(cj5*r10);
IkReal x13974=(r21*sj5);
IkReal x13975=((1.0)*cj2);
IkReal x13976=(cj5*r20);
IkReal x13977=((1.0)*x13970);
IkReal x13978=((1.0)*x13971);
IkReal x13979=(sj5*x13971);
IkReal x13980=(sj5*x13970);
evalcond[0]=(((r11*x13980))+(((-1.0)*x13973*x13977))+((r12*x13971)));
evalcond[1]=((((-1.0)*r22*x13977))+((x13971*x13974))+(((-1.0)*x13976*x13978)));
evalcond[2]=((((-1.0)*x13972*x13978))+(((-1.0)*r02*x13977))+((r01*x13979)));
evalcond[3]=((1.0)+(((-1.0)*x13973*x13978))+(((-1.0)*r12*x13977))+((r11*x13979)));
evalcond[4]=(((sj1*sj2))+((x13970*x13974))+(((-1.0)*x13976*x13977))+((r22*x13971))+(((-1.0)*cj1*x13975)));
evalcond[5]=((((-1.0)*x13972*x13977))+((r02*x13971))+((r01*x13980))+(((-1.0)*sj1*x13975))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13981=((1.0)*cj5);
CheckValue<IkReal> x13982 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13982.valid){
continue;
}
CheckValue<IkReal> x13983=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13981)))),-1);
if(!x13983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13982.value)+(((1.5707963267949)*(x13983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13984=IKcos(j4);
IkReal x13985=IKsin(j4);
IkReal x13986=(cj5*r00);
IkReal x13987=(cj5*r10);
IkReal x13988=(r21*sj5);
IkReal x13989=((1.0)*cj2);
IkReal x13990=(cj5*r20);
IkReal x13991=((1.0)*x13984);
IkReal x13992=((1.0)*x13985);
IkReal x13993=(sj5*x13985);
IkReal x13994=(sj5*x13984);
evalcond[0]=(((r12*x13985))+((r11*x13994))+(((-1.0)*x13987*x13991)));
evalcond[1]=(((x13985*x13988))+(((-1.0)*x13990*x13992))+(((-1.0)*r22*x13991)));
evalcond[2]=((((-1.0)*r02*x13991))+(((-1.0)*x13986*x13992))+((r01*x13993)));
evalcond[3]=((1.0)+((r11*x13993))+(((-1.0)*r12*x13991))+(((-1.0)*x13987*x13992)));
evalcond[4]=((((-1.0)*cj1*x13989))+((sj1*sj2))+((r22*x13985))+((x13984*x13988))+(((-1.0)*x13990*x13991)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13986*x13991))+((r02*x13985))+((r01*x13994))+(((-1.0)*sj1*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13995=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13995.valid){
continue;
}
CheckValue<IkReal> x13996 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13995.value)))+(x13996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13997=IKcos(j4);
IkReal x13998=IKsin(j4);
IkReal x13999=(cj5*r00);
IkReal x14000=(cj5*r10);
IkReal x14001=(r21*sj5);
IkReal x14002=((1.0)*cj2);
IkReal x14003=(cj5*r20);
IkReal x14004=((1.0)*x13997);
IkReal x14005=((1.0)*x13998);
IkReal x14006=(sj5*x13998);
IkReal x14007=(sj5*x13997);
evalcond[0]=((((-1.0)*x14000*x14004))+((r12*x13998))+((r11*x14007)));
evalcond[1]=(((x13998*x14001))+(((-1.0)*x14003*x14005))+(((-1.0)*r22*x14004)));
evalcond[2]=((((-1.0)*r02*x14004))+(((-1.0)*x13999*x14005))+((r01*x14006)));
evalcond[3]=((1.0)+(((-1.0)*x14000*x14005))+((r11*x14006))+(((-1.0)*r12*x14004)));
evalcond[4]=(((r22*x13998))+((sj1*sj2))+((x13997*x14001))+(((-1.0)*x14003*x14004))+(((-1.0)*cj1*x14002)));
evalcond[5]=((((-1.0)*sj1*x14002))+(((-1.0)*cj1*sj2))+((r02*x13998))+(((-1.0)*x13999*x14004))+((r01*x14007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14008=((-1.0)*r00);
IkReal x14010 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14010)==0){
continue;
}
IkReal x14009=pow(x14010,-0.5);
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14008),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
IkReal gconst54=((-1.0)*(x14011.value));
IkReal gconst55=(r01*x14009);
IkReal gconst56=(x14008*x14009);
CheckValue<IkReal> x14012 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14012.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14012.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14013=((-1.0)*r00);
IkReal x14014=x14009;
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14013),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
IkReal x14015=((-1.0)*(x14016.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14015;
IkReal gconst54=x14015;
IkReal gconst55=(r01*x14014);
IkReal gconst56=(x14013*x14014);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14017=((-1.0)*r00);
IkReal x14018=x14009;
CheckValue<IkReal> x14020 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14017),IKFAST_ATAN2_MAGTHRESH);
if(!x14020.valid){
continue;
}
IkReal x14019=((-1.0)*(x14020.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14019;
IkReal gconst54=x14019;
IkReal gconst55=(r01*x14018);
IkReal gconst56=(x14017*x14018);
CheckValue<IkReal> x14028=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14028.valid){
continue;
}
IkReal x14021=x14028.value;
IkReal x14022=(sj3*x14021);
IkReal x14023=(r11*x14022);
IkReal x14024=(r21*x14022);
IkReal x14025=(r20*x14022);
IkReal x14026=(r10*x14022);
IkReal x14027=(r00*r01*x14022);
j4eval[0]=IKsign((((r00*r01*r20*x14023))+((r00*r01*r10*x14024))+((r12*r22*sj3))+((r10*x14025*(r00*r00)))+((r21*x14023*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14029=gconst56*gconst56;
IkReal x14030=gconst55*gconst55;
IkReal x14031=(r11*r21);
IkReal x14032=(gconst56*sj3);
IkReal x14033=((1.0)*cj3);
IkReal x14034=(r10*r20);
IkReal x14035=(r10*r21);
IkReal x14036=(r11*r20);
IkReal x14037=(cj3*gconst55*gconst56);
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal((((gconst55*r10*r22*sj3))+((r11*r22*x14032)))),IkReal(((((-1.0)*sj3*x14029*x14036))+(((-1.0)*gconst55*x14032*x14034))+((sj3*x14030*x14035))+((gconst55*x14031*x14032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
CheckValue<IkReal> x14039=IKPowWithIntegerCheck(IKsign((((x14036*x14037))+(((-1.0)*r12*r22*x14033))+(((-1.0)*x14029*x14033*x14034))+(((-1.0)*x14030*x14031*x14033))+((x14035*x14037)))),-1);
if(!x14039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14038.value)+(((1.5707963267949)*(x14039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14040=IKsin(j4);
IkReal x14041=IKcos(j4);
IkReal x14042=(sj1*sj2);
IkReal x14043=(gconst55*r21);
IkReal x14044=(gconst56*r00);
IkReal x14045=(cj3*gconst55);
IkReal x14046=(gconst56*sj3);
IkReal x14047=(gconst55*sj3);
IkReal x14048=((1.0)*cj1);
IkReal x14049=(cj3*gconst56);
IkReal x14050=(cj2*sj1);
IkReal x14051=(cj2*x14048);
IkReal x14052=((1.0)*x14041);
IkReal x14053=((1.0)*x14040);
IkReal x14054=(cj3*x14040);
IkReal x14055=(gconst55*x14040);
evalcond[0]=((((-1.0)*gconst56*r20*x14053))+(((-1.0)*r22*x14052))+((x14040*x14043)));
evalcond[1]=((((-1.0)*r02*x14052))+(((-1.0)*x14044*x14053))+((r01*x14055)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14052))+(((-1.0)*gconst56*r10*x14053))+((r11*x14055)));
evalcond[3]=(((r11*x14046))+((r11*x14041*x14045))+(((-1.0)*r10*x14049*x14052))+((r10*x14047))+((r12*x14054)));
evalcond[4]=(((r11*x14049))+((r10*x14045))+(((-1.0)*r11*x14047*x14052))+((r10*x14041*x14046))+(((-1.0)*r12*sj3*x14053)));
evalcond[5]=(((cj1*sj2))+((r20*x14047))+((r21*x14046))+((cj3*x14041*x14043))+((r22*x14054))+(((-1.0)*r20*x14049*x14052))+x14050);
evalcond[6]=(((r00*x14047))+((r01*x14046))+(((-1.0)*cj3*x14044*x14052))+(((-1.0)*x14051))+((r02*x14054))+((r01*x14041*x14045))+x14042);
evalcond[7]=((((-1.0)*x14051))+((r20*x14045))+(((-1.0)*r22*sj3*x14053))+((r21*x14049))+((r20*x14041*x14046))+x14042+(((-1.0)*sj3*x14043*x14052)));
evalcond[8]=(((r00*x14045))+(((-1.0)*x14050))+((r01*x14049))+(((-1.0)*r01*x14047*x14052))+((sj3*x14041*x14044))+(((-1.0)*r02*sj3*x14053))+(((-1.0)*sj2*x14048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14056=gconst55*gconst55;
IkReal x14057=gconst56*gconst56;
IkReal x14058=(r11*r21);
IkReal x14059=(cj3*gconst56);
IkReal x14060=(gconst55*r10);
IkReal x14061=((1.0)*r20);
IkReal x14062=(gconst56*sj3);
CheckValue<IkReal> x14063 = IKatan2WithCheck(IkReal((((r11*r22*x14059))+((cj3*r22*x14060)))),IkReal(((((-1.0)*cj3*r11*x14057*x14061))+(((-1.0)*x14059*x14060*x14061))+((cj3*r10*r21*x14056))+((gconst55*x14058*x14059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14063.valid){
continue;
}
CheckValue<IkReal> x14064=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst55*r11*x14061*x14062))+(((-1.0)*r21*x14060*x14062))+((sj3*x14056*x14058))+((r12*r22*sj3))+((r10*r20*sj3*x14057)))),-1);
if(!x14064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14063.value)+(((1.5707963267949)*(x14064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14065=IKsin(j4);
IkReal x14066=IKcos(j4);
IkReal x14067=(sj1*sj2);
IkReal x14068=(gconst55*r21);
IkReal x14069=(gconst56*r00);
IkReal x14070=(cj3*gconst55);
IkReal x14071=(gconst56*sj3);
IkReal x14072=(gconst55*sj3);
IkReal x14073=((1.0)*cj1);
IkReal x14074=(cj3*gconst56);
IkReal x14075=(cj2*sj1);
IkReal x14076=(cj2*x14073);
IkReal x14077=((1.0)*x14066);
IkReal x14078=((1.0)*x14065);
IkReal x14079=(cj3*x14065);
IkReal x14080=(gconst55*x14065);
evalcond[0]=((((-1.0)*r22*x14077))+(((-1.0)*gconst56*r20*x14078))+((x14065*x14068)));
evalcond[1]=(((r01*x14080))+(((-1.0)*x14069*x14078))+(((-1.0)*r02*x14077)));
evalcond[2]=((1.0)+((r11*x14080))+(((-1.0)*r12*x14077))+(((-1.0)*gconst56*r10*x14078)));
evalcond[3]=(((r11*x14071))+((r10*x14072))+(((-1.0)*r10*x14074*x14077))+((r12*x14079))+((r11*x14066*x14070)));
evalcond[4]=(((r10*x14066*x14071))+((r11*x14074))+((r10*x14070))+(((-1.0)*r12*sj3*x14078))+(((-1.0)*r11*x14072*x14077)));
evalcond[5]=((((-1.0)*r20*x14074*x14077))+((r22*x14079))+((cj1*sj2))+((r21*x14071))+((cj3*x14066*x14068))+((r20*x14072))+x14075);
evalcond[6]=(((r02*x14079))+((r00*x14072))+((r01*x14071))+(((-1.0)*cj3*x14069*x14077))+(((-1.0)*x14076))+x14067+((r01*x14066*x14070)));
evalcond[7]=((((-1.0)*sj3*x14068*x14077))+(((-1.0)*r22*sj3*x14078))+((r21*x14074))+((r20*x14066*x14071))+((r20*x14070))+(((-1.0)*x14076))+x14067);
evalcond[8]=((((-1.0)*r02*sj3*x14078))+((sj3*x14066*x14069))+((r00*x14070))+((r01*x14074))+(((-1.0)*x14075))+(((-1.0)*r01*x14072*x14077))+(((-1.0)*sj2*x14073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst56*r00))+((gconst55*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
CheckValue<IkReal> x14082=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x14082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14081.value)+(((1.5707963267949)*(x14082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14083=IKsin(j4);
IkReal x14084=IKcos(j4);
IkReal x14085=(sj1*sj2);
IkReal x14086=(gconst55*r21);
IkReal x14087=(gconst56*r00);
IkReal x14088=(cj3*gconst55);
IkReal x14089=(gconst56*sj3);
IkReal x14090=(gconst55*sj3);
IkReal x14091=((1.0)*cj1);
IkReal x14092=(cj3*gconst56);
IkReal x14093=(cj2*sj1);
IkReal x14094=(cj2*x14091);
IkReal x14095=((1.0)*x14084);
IkReal x14096=((1.0)*x14083);
IkReal x14097=(cj3*x14083);
IkReal x14098=(gconst55*x14083);
evalcond[0]=((((-1.0)*r22*x14095))+(((-1.0)*gconst56*r20*x14096))+((x14083*x14086)));
evalcond[1]=((((-1.0)*r02*x14095))+(((-1.0)*x14087*x14096))+((r01*x14098)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14095))+(((-1.0)*gconst56*r10*x14096))+((r11*x14098)));
evalcond[3]=(((r11*x14089))+((r12*x14097))+((r10*x14090))+(((-1.0)*r10*x14092*x14095))+((r11*x14084*x14088)));
evalcond[4]=((((-1.0)*r11*x14090*x14095))+((r10*x14084*x14089))+(((-1.0)*r12*sj3*x14096))+((r10*x14088))+((r11*x14092)));
evalcond[5]=(((cj3*x14084*x14086))+((r20*x14090))+((cj1*sj2))+(((-1.0)*r20*x14092*x14095))+((r21*x14089))+x14093+((r22*x14097)));
evalcond[6]=(((r00*x14090))+((r01*x14089))+(((-1.0)*x14094))+((r02*x14097))+x14085+(((-1.0)*cj3*x14087*x14095))+((r01*x14084*x14088)));
evalcond[7]=((((-1.0)*sj3*x14086*x14095))+((r20*x14084*x14089))+((r20*x14088))+((r21*x14092))+(((-1.0)*x14094))+x14085+(((-1.0)*r22*sj3*x14096)));
evalcond[8]=(((r00*x14088))+(((-1.0)*x14093))+(((-1.0)*sj2*x14091))+(((-1.0)*r01*x14090*x14095))+(((-1.0)*r02*sj3*x14096))+((sj3*x14084*x14087))+((r01*x14092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14099=((-1.0)*r01);
IkReal x14101 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14101)==0){
continue;
}
IkReal x14100=pow(x14101,-0.5);
CheckValue<IkReal> x14102 = IKatan2WithCheck(IkReal(x14099),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14102.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x14102.value))));
IkReal gconst58=(x14099*x14100);
IkReal gconst59=((1.0)*r00*x14100);
CheckValue<IkReal> x14103 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14103.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14103.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14104=((-1.0)*r01);
CheckValue<IkReal> x14107 = IKatan2WithCheck(IkReal(x14104),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14107.valid){
continue;
}
IkReal x14105=((1.0)*(x14107.value));
IkReal x14106=x14100;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14105)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14105)));
IkReal gconst58=(x14104*x14106);
IkReal gconst59=((1.0)*r00*x14106);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14108=((-1.0)*r01);
CheckValue<IkReal> x14111 = IKatan2WithCheck(IkReal(x14108),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14111.valid){
continue;
}
IkReal x14109=((1.0)*(x14111.value));
IkReal x14110=x14100;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14109)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14109)));
IkReal gconst58=(x14108*x14110);
IkReal gconst59=((1.0)*r00*x14110);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14112=gconst59*gconst59;
IkReal x14113=gconst58*gconst58;
IkReal x14114=((1.0)*cj3);
IkReal x14115=(r11*r21);
IkReal x14116=((1.0)*r20);
IkReal x14117=(r11*sj3);
IkReal x14118=(gconst58*gconst59);
IkReal x14119=(r10*r21);
IkReal x14120=(gconst58*r10*sj3);
CheckValue<IkReal> x14121 = IKatan2WithCheck(IkReal((((r22*x14120))+((gconst59*r22*x14117)))),IkReal(((((-1.0)*x14112*x14116*x14117))+(((-1.0)*r10*sj3*x14116*x14118))+((sj3*x14115*x14118))+((sj3*x14113*x14119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14121.valid){
continue;
}
CheckValue<IkReal> x14122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14112*x14114))+(((-1.0)*x14113*x14114*x14115))+((cj3*r11*r20*x14118))+((cj3*x14118*x14119))+(((-1.0)*r12*r22*x14114)))),-1);
if(!x14122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14121.value)+(((1.5707963267949)*(x14122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14123=IKsin(j4);
IkReal x14124=IKcos(j4);
IkReal x14125=(sj1*sj2);
IkReal x14126=(cj3*gconst59);
IkReal x14127=(gconst58*r00);
IkReal x14128=((1.0)*cj1);
IkReal x14129=(gconst59*r20);
IkReal x14130=(gconst59*r00);
IkReal x14131=(cj2*sj1);
IkReal x14132=(gconst58*sj3);
IkReal x14133=(gconst59*sj3);
IkReal x14134=(gconst59*r10);
IkReal x14135=(cj3*gconst58);
IkReal x14136=(cj2*x14128);
IkReal x14137=((1.0)*x14124);
IkReal x14138=((1.0)*x14123);
IkReal x14139=(cj3*x14123);
IkReal x14140=(gconst58*x14123);
IkReal x14141=(sj3*x14124);
IkReal x14142=(x14124*x14135);
evalcond[0]=((((-1.0)*x14129*x14138))+((r21*x14140))+(((-1.0)*r22*x14137)));
evalcond[1]=((((-1.0)*r02*x14137))+((r01*x14140))+(((-1.0)*x14130*x14138)));
evalcond[2]=((1.0)+(((-1.0)*x14134*x14138))+(((-1.0)*r12*x14137))+((r11*x14140)));
evalcond[3]=(((r11*x14133))+((r10*x14132))+((r12*x14139))+((r11*x14142))+(((-1.0)*r10*x14126*x14137)));
evalcond[4]=(((r10*x14135))+(((-1.0)*r11*x14132*x14137))+(((-1.0)*r12*sj3*x14138))+((r11*x14126))+((r10*x14124*x14133)));
evalcond[5]=((((-1.0)*r20*x14126*x14137))+((r20*x14132))+((cj1*sj2))+((r21*x14142))+((r21*x14133))+((r22*x14139))+x14131);
evalcond[6]=(((r02*x14139))+((r01*x14142))+x14125+(((-1.0)*r00*x14126*x14137))+((sj3*x14127))+(((-1.0)*x14136))+((r01*x14133)));
evalcond[7]=(((r21*x14126))+(((-1.0)*r21*x14132*x14137))+((r20*x14135))+(((-1.0)*r22*sj3*x14138))+x14125+((x14129*x14141))+(((-1.0)*x14136)));
evalcond[8]=((((-1.0)*x14131))+(((-1.0)*r02*sj3*x14138))+((cj3*x14127))+(((-1.0)*sj2*x14128))+((r01*x14126))+((x14130*x14141))+(((-1.0)*r01*x14132*x14137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14143=((1.0)*gconst59);
CheckValue<IkReal> x14144=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r00))+(((-1.0)*r01*x14143)))),-1);
if(!x14144.valid){
continue;
}
CheckValue<IkReal> x14145 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14143))+((gconst58*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14144.value)))+(x14145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14146=IKsin(j4);
IkReal x14147=IKcos(j4);
IkReal x14148=(sj1*sj2);
IkReal x14149=(cj3*gconst59);
IkReal x14150=(gconst58*r00);
IkReal x14151=((1.0)*cj1);
IkReal x14152=(gconst59*r20);
IkReal x14153=(gconst59*r00);
IkReal x14154=(cj2*sj1);
IkReal x14155=(gconst58*sj3);
IkReal x14156=(gconst59*sj3);
IkReal x14157=(gconst59*r10);
IkReal x14158=(cj3*gconst58);
IkReal x14159=(cj2*x14151);
IkReal x14160=((1.0)*x14147);
IkReal x14161=((1.0)*x14146);
IkReal x14162=(cj3*x14146);
IkReal x14163=(gconst58*x14146);
IkReal x14164=(sj3*x14147);
IkReal x14165=(x14147*x14158);
evalcond[0]=((((-1.0)*r22*x14160))+(((-1.0)*x14152*x14161))+((r21*x14163)));
evalcond[1]=((((-1.0)*r02*x14160))+(((-1.0)*x14153*x14161))+((r01*x14163)));
evalcond[2]=((1.0)+(((-1.0)*x14157*x14161))+(((-1.0)*r12*x14160))+((r11*x14163)));
evalcond[3]=(((r10*x14155))+(((-1.0)*r10*x14149*x14160))+((r11*x14156))+((r11*x14165))+((r12*x14162)));
evalcond[4]=(((r10*x14158))+(((-1.0)*r11*x14155*x14160))+(((-1.0)*r12*sj3*x14161))+((r11*x14149))+((r10*x14147*x14156)));
evalcond[5]=((((-1.0)*r20*x14149*x14160))+((cj1*sj2))+((r22*x14162))+x14154+((r21*x14156))+((r21*x14165))+((r20*x14155)));
evalcond[6]=(((sj3*x14150))+((r02*x14162))+(((-1.0)*r00*x14149*x14160))+(((-1.0)*x14159))+((r01*x14156))+((r01*x14165))+x14148);
evalcond[7]=((((-1.0)*r21*x14155*x14160))+(((-1.0)*r22*sj3*x14161))+((r21*x14149))+(((-1.0)*x14159))+x14148+((r20*x14158))+((x14152*x14164)));
evalcond[8]=(((cj3*x14150))+(((-1.0)*r02*sj3*x14161))+(((-1.0)*r01*x14155*x14160))+((r01*x14149))+(((-1.0)*sj2*x14151))+((x14153*x14164))+(((-1.0)*x14154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14166=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x14166.valid){
continue;
}
CheckValue<IkReal> x14167 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst58*r01))+(((-1.0)*gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14166.value)))+(x14167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14168=IKsin(j4);
IkReal x14169=IKcos(j4);
IkReal x14170=(sj1*sj2);
IkReal x14171=(cj3*gconst59);
IkReal x14172=(gconst58*r00);
IkReal x14173=((1.0)*cj1);
IkReal x14174=(gconst59*r20);
IkReal x14175=(gconst59*r00);
IkReal x14176=(cj2*sj1);
IkReal x14177=(gconst58*sj3);
IkReal x14178=(gconst59*sj3);
IkReal x14179=(gconst59*r10);
IkReal x14180=(cj3*gconst58);
IkReal x14181=(cj2*x14173);
IkReal x14182=((1.0)*x14169);
IkReal x14183=((1.0)*x14168);
IkReal x14184=(cj3*x14168);
IkReal x14185=(gconst58*x14168);
IkReal x14186=(sj3*x14169);
IkReal x14187=(x14169*x14180);
evalcond[0]=((((-1.0)*r22*x14182))+((r21*x14185))+(((-1.0)*x14174*x14183)));
evalcond[1]=((((-1.0)*x14175*x14183))+((r01*x14185))+(((-1.0)*r02*x14182)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14182))+(((-1.0)*x14179*x14183))+((r11*x14185)));
evalcond[3]=(((r11*x14178))+(((-1.0)*r10*x14171*x14182))+((r12*x14184))+((r11*x14187))+((r10*x14177)));
evalcond[4]=((((-1.0)*r12*sj3*x14183))+((r11*x14171))+((r10*x14169*x14178))+(((-1.0)*r11*x14177*x14182))+((r10*x14180)));
evalcond[5]=((((-1.0)*r20*x14171*x14182))+((r21*x14178))+((cj1*sj2))+((r20*x14177))+((r22*x14184))+((r21*x14187))+x14176);
evalcond[6]=(((r02*x14184))+((r01*x14178))+((r01*x14187))+(((-1.0)*r00*x14171*x14182))+x14170+((sj3*x14172))+(((-1.0)*x14181)));
evalcond[7]=(((r20*x14180))+((r21*x14171))+((x14174*x14186))+x14170+(((-1.0)*x14181))+(((-1.0)*r22*sj3*x14183))+(((-1.0)*r21*x14177*x14182)));
evalcond[8]=(((r01*x14171))+(((-1.0)*r01*x14177*x14182))+(((-1.0)*sj2*x14173))+(((-1.0)*x14176))+(((-1.0)*r02*sj3*x14183))+((cj3*x14172))+((x14175*x14186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14189 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14189)==0){
continue;
}
IkReal x14188=pow(x14189,-0.5);
CheckValue<IkReal> x14190 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14190.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14190.value));
IkReal gconst61=((-1.0)*r21*x14188);
IkReal gconst62=(r20*x14188);
CheckValue<IkReal> x14191 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14191.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14191.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
IkReal x14192=((-1.0)*(x14194.value));
IkReal x14193=x14188;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14192;
IkReal gconst60=x14192;
IkReal gconst61=((-1.0)*r21*x14193);
IkReal gconst62=(r20*x14193);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14197 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14197.valid){
continue;
}
IkReal x14195=((-1.0)*(x14197.value));
IkReal x14196=x14188;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14195;
IkReal gconst60=x14195;
IkReal gconst61=((-1.0)*r21*x14196);
IkReal gconst62=(r20*x14196);
CheckValue<IkReal> x14205=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14205.valid){
continue;
}
IkReal x14198=x14205.value;
IkReal x14199=(sj3*x14198);
IkReal x14200=(r11*x14199);
IkReal x14201=(r00*x14199);
IkReal x14202=(r01*x14199);
IkReal x14203=(r10*x14199);
IkReal x14204=(r20*r21*x14199);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x14200*(r21*r21)))+((r10*r20*r21*x14202))+((r00*r20*r21*x14200))+((r10*x14201*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14206=gconst61*gconst61;
IkReal x14207=gconst62*gconst62;
IkReal x14208=(r00*r11);
IkReal x14209=(r01*r10);
IkReal x14210=(r00*r10);
IkReal x14211=(r01*r11);
IkReal x14212=((1.0)*cj3);
IkReal x14213=(r02*sj3);
IkReal x14214=(cj3*gconst61*gconst62);
IkReal x14215=((1.0)*x14207);
IkReal x14216=(gconst61*gconst62*sj3);
CheckValue<IkReal> x14217 = IKatan2WithCheck(IkReal((((gconst62*r11*x14213))+((gconst61*r10*x14213)))),IkReal((((sj3*x14206*x14209))+((x14211*x14216))+(((-1.0)*sj3*x14208*x14215))+(((-1.0)*x14210*x14216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14217.valid){
continue;
}
CheckValue<IkReal> x14218=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14206*x14211*x14212))+((x14209*x14214))+(((-1.0)*r02*r12*x14212))+((x14208*x14214))+(((-1.0)*x14207*x14210*x14212)))),-1);
if(!x14218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14217.value)+(((1.5707963267949)*(x14218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14219=IKsin(j4);
IkReal x14220=IKcos(j4);
IkReal x14221=(sj1*sj2);
IkReal x14222=(gconst61*sj3);
IkReal x14223=(cj3*gconst61);
IkReal x14224=(cj3*gconst62);
IkReal x14225=((1.0)*cj2);
IkReal x14226=(gconst62*sj3);
IkReal x14227=(cj1*sj2);
IkReal x14228=(cj1*x14225);
IkReal x14229=((1.0)*x14220);
IkReal x14230=((1.0)*x14219);
IkReal x14231=(gconst61*x14219);
IkReal x14232=(cj3*x14219);
evalcond[0]=((((-1.0)*gconst62*r20*x14230))+((r21*x14231))+(((-1.0)*r22*x14229)));
evalcond[1]=((((-1.0)*gconst62*r00*x14230))+((r01*x14231))+(((-1.0)*r02*x14229)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14229))+(((-1.0)*gconst62*r10*x14230))+((r11*x14231)));
evalcond[3]=(((r11*x14220*x14223))+(((-1.0)*r10*x14224*x14229))+((r10*x14222))+((r11*x14226))+((r12*x14232)));
evalcond[4]=(((r10*x14220*x14226))+((r10*x14223))+(((-1.0)*r12*sj3*x14230))+((r11*x14224))+(((-1.0)*r11*x14222*x14229)));
evalcond[5]=(((cj2*sj1))+((r20*x14222))+((r21*x14220*x14223))+((r21*x14226))+((r22*x14232))+(((-1.0)*r20*x14224*x14229))+x14227);
evalcond[6]=((((-1.0)*x14228))+((r02*x14232))+(((-1.0)*r00*x14224*x14229))+((r01*x14220*x14223))+((r00*x14222))+((r01*x14226))+x14221);
evalcond[7]=((((-1.0)*x14228))+((r20*x14223))+((r20*x14220*x14226))+((r21*x14224))+(((-1.0)*r22*sj3*x14230))+x14221+(((-1.0)*r21*x14222*x14229)));
evalcond[8]=(((r00*x14220*x14226))+(((-1.0)*sj1*x14225))+(((-1.0)*r02*sj3*x14230))+(((-1.0)*r01*x14222*x14229))+((r00*x14223))+(((-1.0)*x14227))+((r01*x14224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14233=gconst61*gconst61;
IkReal x14234=gconst62*gconst62;
IkReal x14235=(r01*r10);
IkReal x14236=(r00*r11);
IkReal x14237=(cj3*gconst61);
IkReal x14238=(gconst62*r11);
IkReal x14239=(r00*r10);
IkReal x14240=((1.0)*gconst61*gconst62*sj3);
CheckValue<IkReal> x14241=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14235*x14240))+(((-1.0)*x14236*x14240))+((sj3*x14234*x14239))+((r01*r11*sj3*x14233)))),-1);
if(!x14241.valid){
continue;
}
CheckValue<IkReal> x14242 = IKatan2WithCheck(IkReal((((r02*r10*x14237))+((cj3*r02*x14238)))),IkReal(((((-1.0)*cj3*x14234*x14236))+(((-1.0)*gconst62*x14237*x14239))+((r01*x14237*x14238))+((cj3*x14233*x14235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14241.value)))+(x14242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14243=IKsin(j4);
IkReal x14244=IKcos(j4);
IkReal x14245=(sj1*sj2);
IkReal x14246=(gconst61*sj3);
IkReal x14247=(cj3*gconst61);
IkReal x14248=(cj3*gconst62);
IkReal x14249=((1.0)*cj2);
IkReal x14250=(gconst62*sj3);
IkReal x14251=(cj1*sj2);
IkReal x14252=(cj1*x14249);
IkReal x14253=((1.0)*x14244);
IkReal x14254=((1.0)*x14243);
IkReal x14255=(gconst61*x14243);
IkReal x14256=(cj3*x14243);
evalcond[0]=(((r21*x14255))+(((-1.0)*r22*x14253))+(((-1.0)*gconst62*r20*x14254)));
evalcond[1]=((((-1.0)*gconst62*r00*x14254))+(((-1.0)*r02*x14253))+((r01*x14255)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r10*x14254))+((r11*x14255))+(((-1.0)*r12*x14253)));
evalcond[3]=(((r12*x14256))+(((-1.0)*r10*x14248*x14253))+((r11*x14250))+((r11*x14244*x14247))+((r10*x14246)));
evalcond[4]=((((-1.0)*r11*x14246*x14253))+((r10*x14244*x14250))+((r11*x14248))+((r10*x14247))+(((-1.0)*r12*sj3*x14254)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x14248*x14253))+((r21*x14250))+((r20*x14246))+((r21*x14244*x14247))+x14251+((r22*x14256)));
evalcond[6]=(((r01*x14244*x14247))+(((-1.0)*x14252))+((r02*x14256))+(((-1.0)*r00*x14248*x14253))+x14245+((r00*x14246))+((r01*x14250)));
evalcond[7]=(((r21*x14248))+(((-1.0)*r22*sj3*x14254))+((r20*x14244*x14250))+(((-1.0)*x14252))+((r20*x14247))+(((-1.0)*r21*x14246*x14253))+x14245);
evalcond[8]=((((-1.0)*r02*sj3*x14254))+(((-1.0)*sj1*x14249))+((r00*x14244*x14250))+(((-1.0)*r01*x14246*x14253))+((r01*x14248))+(((-1.0)*x14251))+((r00*x14247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14257=((1.0)*gconst62);
CheckValue<IkReal> x14258 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst61*r21))+(((-1.0)*r20*x14257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14258.valid){
continue;
}
CheckValue<IkReal> x14259=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x14257)))),-1);
if(!x14259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14258.value)+(((1.5707963267949)*(x14259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14260=IKsin(j4);
IkReal x14261=IKcos(j4);
IkReal x14262=(sj1*sj2);
IkReal x14263=(gconst61*sj3);
IkReal x14264=(cj3*gconst61);
IkReal x14265=(cj3*gconst62);
IkReal x14266=((1.0)*cj2);
IkReal x14267=(gconst62*sj3);
IkReal x14268=(cj1*sj2);
IkReal x14269=(cj1*x14266);
IkReal x14270=((1.0)*x14261);
IkReal x14271=((1.0)*x14260);
IkReal x14272=(gconst61*x14260);
IkReal x14273=(cj3*x14260);
evalcond[0]=((((-1.0)*gconst62*r20*x14271))+((r21*x14272))+(((-1.0)*r22*x14270)));
evalcond[1]=((((-1.0)*r02*x14270))+((r01*x14272))+(((-1.0)*gconst62*r00*x14271)));
evalcond[2]=((1.0)+((r11*x14272))+(((-1.0)*r12*x14270))+(((-1.0)*gconst62*r10*x14271)));
evalcond[3]=(((r11*x14261*x14264))+((r11*x14267))+(((-1.0)*r10*x14265*x14270))+((r12*x14273))+((r10*x14263)));
evalcond[4]=((((-1.0)*r12*sj3*x14271))+((r11*x14265))+(((-1.0)*r11*x14263*x14270))+((r10*x14261*x14267))+((r10*x14264)));
evalcond[5]=(((cj2*sj1))+((r21*x14267))+((r20*x14263))+((r21*x14261*x14264))+(((-1.0)*r20*x14265*x14270))+((r22*x14273))+x14268);
evalcond[6]=(((r01*x14261*x14264))+((r00*x14263))+(((-1.0)*x14269))+((r02*x14273))+(((-1.0)*r00*x14265*x14270))+x14262+((r01*x14267)));
evalcond[7]=(((r20*x14261*x14267))+((r21*x14265))+(((-1.0)*r22*sj3*x14271))+(((-1.0)*x14269))+((r20*x14264))+(((-1.0)*r21*x14263*x14270))+x14262);
evalcond[8]=(((r00*x14264))+(((-1.0)*x14268))+(((-1.0)*sj1*x14266))+((r00*x14261*x14267))+(((-1.0)*r02*sj3*x14271))+(((-1.0)*r01*x14263*x14270))+((r01*x14265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14275 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14275)==0){
continue;
}
IkReal x14274=pow(x14275,-0.5);
CheckValue<IkReal> x14276 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14276.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14276.value))));
IkReal gconst64=((1.0)*r21*x14274);
IkReal gconst65=((-1.0)*r20*x14274);
CheckValue<IkReal> x14277 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14277.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14277.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14280 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14280.valid){
continue;
}
IkReal x14278=((1.0)*(x14280.value));
IkReal x14279=x14274;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14278)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14278)));
IkReal gconst64=((1.0)*r21*x14279);
IkReal gconst65=((-1.0)*r20*x14279);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14283 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14283.valid){
continue;
}
IkReal x14281=((1.0)*(x14283.value));
IkReal x14282=x14274;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14281)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14281)));
IkReal gconst64=((1.0)*r21*x14282);
IkReal gconst65=((-1.0)*r20*x14282);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14286 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14286.valid){
continue;
}
IkReal x14284=((1.0)*(x14286.value));
IkReal x14285=x14274;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14284)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14284)));
IkReal gconst64=((1.0)*r21*x14285);
IkReal gconst65=((-1.0)*r20*x14285);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14287=gconst64*gconst64;
IkReal x14288=gconst65*gconst65;
IkReal x14289=(gconst64*sj3);
IkReal x14290=(gconst65*r11);
IkReal x14291=((1.0)*cj3);
IkReal x14292=(gconst65*r10);
IkReal x14293=(cj3*gconst64);
IkReal x14294=(r20*x14288);
IkReal x14295=(r21*x14287);
CheckValue<IkReal> x14296=IKPowWithIntegerCheck(IKsign((((r20*x14290*x14293))+(((-1.0)*r10*x14291*x14294))+((r21*x14292*x14293))+(((-1.0)*r12*r22*x14291))+(((-1.0)*r11*x14291*x14295)))),-1);
if(!x14296.valid){
continue;
}
CheckValue<IkReal> x14297 = IKatan2WithCheck(IkReal((((r10*r22*x14289))+((r22*sj3*x14290)))),IkReal(((((-1.0)*r11*sj3*x14294))+((r10*sj3*x14295))+((r21*x14289*x14290))+(((-1.0)*r20*x14289*x14292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14296.value)))+(x14297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14298=IKsin(j4);
IkReal x14299=IKcos(j4);
IkReal x14300=(sj1*sj2);
IkReal x14301=(cj3*gconst64);
IkReal x14302=(gconst65*r21);
IkReal x14303=(gconst65*sj3);
IkReal x14304=(gconst64*sj3);
IkReal x14305=((1.0)*cj2);
IkReal x14306=(cj1*sj2);
IkReal x14307=(cj3*gconst65);
IkReal x14308=(cj1*x14305);
IkReal x14309=((1.0)*x14299);
IkReal x14310=((1.0)*x14298);
IkReal x14311=(cj3*x14298);
IkReal x14312=(gconst64*x14298);
evalcond[0]=((((-1.0)*r22*x14309))+(((-1.0)*gconst65*r20*x14310))+((r21*x14312)));
evalcond[1]=((((-1.0)*r02*x14309))+(((-1.0)*gconst65*r00*x14310))+((r01*x14312)));
evalcond[2]=((1.0)+((r11*x14312))+(((-1.0)*gconst65*r10*x14310))+(((-1.0)*r12*x14309)));
evalcond[3]=((((-1.0)*r10*x14307*x14309))+((r11*x14299*x14301))+((r11*x14303))+((r10*x14304))+((r12*x14311)));
evalcond[4]=((((-1.0)*r11*x14304*x14309))+((r11*x14307))+(((-1.0)*r12*sj3*x14310))+((r10*x14299*x14303))+((r10*x14301)));
evalcond[5]=(((r20*x14304))+((cj2*sj1))+((r21*x14299*x14301))+(((-1.0)*r20*x14307*x14309))+x14306+((r22*x14311))+((sj3*x14302)));
evalcond[6]=((((-1.0)*r00*x14307*x14309))+((r02*x14311))+((r01*x14299*x14301))+((r01*x14303))+((r00*x14304))+x14300+(((-1.0)*x14308)));
evalcond[7]=(((r20*x14301))+((r20*x14299*x14303))+x14300+(((-1.0)*r22*sj3*x14310))+(((-1.0)*r21*x14304*x14309))+((cj3*x14302))+(((-1.0)*x14308)));
evalcond[8]=((((-1.0)*sj1*x14305))+((r01*x14307))+((r00*x14301))+(((-1.0)*r02*sj3*x14310))+(((-1.0)*x14306))+((r00*x14299*x14303))+(((-1.0)*r01*x14304*x14309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14313=((1.0)*gconst65);
CheckValue<IkReal> x14314 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14313))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14314.valid){
continue;
}
CheckValue<IkReal> x14315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14313))+(((-1.0)*gconst64*r00)))),-1);
if(!x14315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14314.value)+(((1.5707963267949)*(x14315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14316=IKsin(j4);
IkReal x14317=IKcos(j4);
IkReal x14318=(sj1*sj2);
IkReal x14319=(cj3*gconst64);
IkReal x14320=(gconst65*r21);
IkReal x14321=(gconst65*sj3);
IkReal x14322=(gconst64*sj3);
IkReal x14323=((1.0)*cj2);
IkReal x14324=(cj1*sj2);
IkReal x14325=(cj3*gconst65);
IkReal x14326=(cj1*x14323);
IkReal x14327=((1.0)*x14317);
IkReal x14328=((1.0)*x14316);
IkReal x14329=(cj3*x14316);
IkReal x14330=(gconst64*x14316);
evalcond[0]=((((-1.0)*gconst65*r20*x14328))+(((-1.0)*r22*x14327))+((r21*x14330)));
evalcond[1]=(((r01*x14330))+(((-1.0)*gconst65*r00*x14328))+(((-1.0)*r02*x14327)));
evalcond[2]=((1.0)+((r11*x14330))+(((-1.0)*gconst65*r10*x14328))+(((-1.0)*r12*x14327)));
evalcond[3]=(((r10*x14322))+((r11*x14321))+((r11*x14317*x14319))+((r12*x14329))+(((-1.0)*r10*x14325*x14327)));
evalcond[4]=((((-1.0)*r11*x14322*x14327))+((r10*x14317*x14321))+((r11*x14325))+(((-1.0)*r12*sj3*x14328))+((r10*x14319)));
evalcond[5]=(((cj2*sj1))+((r21*x14317*x14319))+((sj3*x14320))+(((-1.0)*r20*x14325*x14327))+((r20*x14322))+x14324+((r22*x14329)));
evalcond[6]=(((r00*x14322))+((r01*x14321))+((r01*x14317*x14319))+((r02*x14329))+(((-1.0)*r00*x14325*x14327))+(((-1.0)*x14326))+x14318);
evalcond[7]=((((-1.0)*r22*sj3*x14328))+((r20*x14319))+((cj3*x14320))+((r20*x14317*x14321))+(((-1.0)*r21*x14322*x14327))+(((-1.0)*x14326))+x14318);
evalcond[8]=(((r00*x14317*x14321))+((r01*x14325))+(((-1.0)*r01*x14322*x14327))+(((-1.0)*r02*sj3*x14328))+(((-1.0)*sj1*x14323))+((r00*x14319))+(((-1.0)*x14324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14331 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r01))+(((-1.0)*gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14331.valid){
continue;
}
CheckValue<IkReal> x14332=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14331.value)+(((1.5707963267949)*(x14332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14333=IKsin(j4);
IkReal x14334=IKcos(j4);
IkReal x14335=(sj1*sj2);
IkReal x14336=(cj3*gconst64);
IkReal x14337=(gconst65*r21);
IkReal x14338=(gconst65*sj3);
IkReal x14339=(gconst64*sj3);
IkReal x14340=((1.0)*cj2);
IkReal x14341=(cj1*sj2);
IkReal x14342=(cj3*gconst65);
IkReal x14343=(cj1*x14340);
IkReal x14344=((1.0)*x14334);
IkReal x14345=((1.0)*x14333);
IkReal x14346=(cj3*x14333);
IkReal x14347=(gconst64*x14333);
evalcond[0]=((((-1.0)*gconst65*r20*x14345))+((r21*x14347))+(((-1.0)*r22*x14344)));
evalcond[1]=((((-1.0)*gconst65*r00*x14345))+((r01*x14347))+(((-1.0)*r02*x14344)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14344))+((r11*x14347))+(((-1.0)*gconst65*r10*x14345)));
evalcond[3]=(((r11*x14338))+(((-1.0)*r10*x14342*x14344))+((r12*x14346))+((r10*x14339))+((r11*x14334*x14336)));
evalcond[4]=(((r11*x14342))+(((-1.0)*r12*sj3*x14345))+((r10*x14336))+(((-1.0)*r11*x14339*x14344))+((r10*x14334*x14338)));
evalcond[5]=(((cj2*sj1))+((r20*x14339))+((r22*x14346))+(((-1.0)*r20*x14342*x14344))+((r21*x14334*x14336))+x14341+((sj3*x14337)));
evalcond[6]=((((-1.0)*r00*x14342*x14344))+((r00*x14339))+((r01*x14338))+((r02*x14346))+(((-1.0)*x14343))+((r01*x14334*x14336))+x14335);
evalcond[7]=(((r20*x14334*x14338))+((r20*x14336))+(((-1.0)*r21*x14339*x14344))+(((-1.0)*x14343))+x14335+((cj3*x14337))+(((-1.0)*r22*sj3*x14345)));
evalcond[8]=((((-1.0)*r01*x14339*x14344))+((r01*x14342))+(((-1.0)*x14341))+(((-1.0)*r02*sj3*x14345))+((r00*x14336))+(((-1.0)*sj1*x14340))+((r00*x14334*x14338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14348=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14348);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14348);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14349=(cj5*r10);
IkReal x14350=(r11*sj5);
j4eval[0]=((((-1.0)*x14349))+x14350);
j4eval[1]=((((-1.0)*sj3*x14350))+((sj3*x14349)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14351=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14351);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14351);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14352=(r11*sj5);
IkReal x14353=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14353))+x14352);
j4eval[1]=(((cj3*x14352))+(((-1.0)*cj3*x14353)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14354=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14354);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14354);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14355=((1.0)*r11);
CheckValue<IkReal> x14356=IKPowWithIntegerCheck(cj3,-1);
if(!x14356.valid){
continue;
}
CheckValue<IkReal> x14357=IKPowWithIntegerCheck(r22,-1);
if(!x14357.valid){
continue;
}
CheckValue<IkReal> x14358=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x14355))),-1);
if(!x14358.valid){
continue;
}
if( IKabs(((x14356.value)*(x14357.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14355)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14356.value)*(x14357.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14355))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14356.value)*(x14357.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14355))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14359=IKsin(j4);
IkReal x14360=IKcos(j4);
IkReal x14361=(sj1*sj2);
IkReal x14362=(r11*sj5);
IkReal x14363=(r00*sj3);
IkReal x14364=(cj5*r01);
IkReal x14365=((1.0)*cj1);
IkReal x14366=(cj3*sj5);
IkReal x14367=(cj5*r11);
IkReal x14368=(r10*sj3);
IkReal x14369=(cj2*sj1);
IkReal x14370=((1.0)*cj5);
IkReal x14371=((1.0)*sj3);
IkReal x14372=(r01*sj5);
IkReal x14373=(cj2*x14365);
IkReal x14374=(cj3*x14360);
IkReal x14375=(r22*x14359);
IkReal x14376=(cj5*x14360);
IkReal x14377=(x14359*x14370);
evalcond[0]=((-1.0)*r22*x14360);
evalcond[1]=(((cj1*sj2))+((cj3*x14375))+x14369);
evalcond[2]=(((x14359*x14372))+(((-1.0)*r00*x14377)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14377))+((x14359*x14362)));
evalcond[4]=((((-1.0)*x14371*x14375))+x14361+(((-1.0)*x14373)));
evalcond[5]=(((r10*x14366))+((cj3*x14367))+(((-1.0)*x14360*x14362*x14371))+((x14368*x14376)));
evalcond[6]=(((sj5*x14368))+((sj3*x14367))+((x14362*x14374))+(((-1.0)*r10*x14370*x14374)));
evalcond[7]=(((sj5*x14363))+(((-1.0)*r00*x14370*x14374))+((sj3*x14364))+((r01*x14360*x14366))+x14361+(((-1.0)*x14373)));
evalcond[8]=(((x14363*x14376))+((cj3*x14364))+(((-1.0)*sj2*x14365))+(((-1.0)*x14369))+((r00*x14366))+(((-1.0)*x14360*x14371*x14372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14378=((1.0)*sj3);
IkReal x14379=(r11*sj5);
IkReal x14380=((1.0)*cj5*r10);
CheckValue<IkReal> x14381=IKPowWithIntegerCheck(((((-1.0)*x14380))+x14379),-1);
if(!x14381.valid){
continue;
}
CheckValue<IkReal> x14382=IKPowWithIntegerCheck((((cj3*x14379))+(((-1.0)*cj3*x14380))),-1);
if(!x14382.valid){
continue;
}
if( IKabs(((-1.0)*(x14381.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14382.value)*(((((-1.0)*cj5*r11*x14378))+(((-1.0)*r10*sj5*x14378)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14381.value)))+IKsqr(((x14382.value)*(((((-1.0)*cj5*r11*x14378))+(((-1.0)*r10*sj5*x14378))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14381.value)), ((x14382.value)*(((((-1.0)*cj5*r11*x14378))+(((-1.0)*r10*sj5*x14378))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14383=IKsin(j4);
IkReal x14384=IKcos(j4);
IkReal x14385=(sj1*sj2);
IkReal x14386=(r11*sj5);
IkReal x14387=(r00*sj3);
IkReal x14388=(cj5*r01);
IkReal x14389=((1.0)*cj1);
IkReal x14390=(cj3*sj5);
IkReal x14391=(cj5*r11);
IkReal x14392=(r10*sj3);
IkReal x14393=(cj2*sj1);
IkReal x14394=((1.0)*cj5);
IkReal x14395=((1.0)*sj3);
IkReal x14396=(r01*sj5);
IkReal x14397=(cj2*x14389);
IkReal x14398=(cj3*x14384);
IkReal x14399=(r22*x14383);
IkReal x14400=(cj5*x14384);
IkReal x14401=(x14383*x14394);
evalcond[0]=((-1.0)*r22*x14384);
evalcond[1]=(((cj1*sj2))+((cj3*x14399))+x14393);
evalcond[2]=(((x14383*x14396))+(((-1.0)*r00*x14401)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14401))+((x14383*x14386)));
evalcond[4]=((((-1.0)*x14395*x14399))+x14385+(((-1.0)*x14397)));
evalcond[5]=(((r10*x14390))+((cj3*x14391))+((x14392*x14400))+(((-1.0)*x14384*x14386*x14395)));
evalcond[6]=(((x14386*x14398))+((sj5*x14392))+((sj3*x14391))+(((-1.0)*r10*x14394*x14398)));
evalcond[7]=((((-1.0)*r00*x14394*x14398))+((r01*x14384*x14390))+((sj5*x14387))+x14385+((sj3*x14388))+(((-1.0)*x14397)));
evalcond[8]=((((-1.0)*x14393))+((r00*x14390))+((x14387*x14400))+((cj3*x14388))+(((-1.0)*sj2*x14389))+(((-1.0)*x14384*x14395*x14396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14402=(cj5*r10);
IkReal x14403=((1.0)*r11);
CheckValue<IkReal> x14404=IKPowWithIntegerCheck(((((-1.0)*x14402))+((r11*sj5))),-1);
if(!x14404.valid){
continue;
}
CheckValue<IkReal> x14405=IKPowWithIntegerCheck((((sj3*x14402))+(((-1.0)*sj3*sj5*x14403))),-1);
if(!x14405.valid){
continue;
}
if( IKabs(((-1.0)*(x14404.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14405.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14403)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14404.value)))+IKsqr(((x14405.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14403))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14404.value)), ((x14405.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14403))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14406=IKsin(j4);
IkReal x14407=IKcos(j4);
IkReal x14408=(sj1*sj2);
IkReal x14409=(r11*sj5);
IkReal x14410=(r00*sj3);
IkReal x14411=(cj5*r01);
IkReal x14412=((1.0)*cj1);
IkReal x14413=(cj3*sj5);
IkReal x14414=(cj5*r11);
IkReal x14415=(r10*sj3);
IkReal x14416=(cj2*sj1);
IkReal x14417=((1.0)*cj5);
IkReal x14418=((1.0)*sj3);
IkReal x14419=(r01*sj5);
IkReal x14420=(cj2*x14412);
IkReal x14421=(cj3*x14407);
IkReal x14422=(r22*x14406);
IkReal x14423=(cj5*x14407);
IkReal x14424=(x14406*x14417);
evalcond[0]=((-1.0)*r22*x14407);
evalcond[1]=(((cj1*sj2))+x14416+((cj3*x14422)));
evalcond[2]=((((-1.0)*r00*x14424))+((x14406*x14419)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14424))+((x14406*x14409)));
evalcond[4]=((((-1.0)*x14418*x14422))+x14408+(((-1.0)*x14420)));
evalcond[5]=(((cj3*x14414))+((x14415*x14423))+(((-1.0)*x14407*x14409*x14418))+((r10*x14413)));
evalcond[6]=(((sj5*x14415))+((sj3*x14414))+(((-1.0)*r10*x14417*x14421))+((x14409*x14421)));
evalcond[7]=(((sj5*x14410))+((sj3*x14411))+((r01*x14407*x14413))+x14408+(((-1.0)*r00*x14417*x14421))+(((-1.0)*x14420)));
evalcond[8]=((((-1.0)*x14416))+((x14410*x14423))+((cj3*x14411))+((r00*x14413))+(((-1.0)*x14407*x14418*x14419))+(((-1.0)*sj2*x14412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14425=cj5*cj5;
IkReal x14426=((1.0)*cj3);
IkReal x14427=(r10*r21);
IkReal x14428=(cj5*sj5);
IkReal x14429=(r11*r21);
IkReal x14430=(r11*r20);
IkReal x14431=(r22*sj3);
IkReal x14432=(r10*r20);
IkReal x14433=((1.0)*sj3*x14425);
CheckValue<IkReal> x14434 = IKatan2WithCheck(IkReal((((r10*sj5*x14431))+((cj5*r11*x14431)))),IkReal((((sj3*x14427))+((sj3*x14428*x14429))+(((-1.0)*sj3*x14428*x14432))+(((-1.0)*x14430*x14433))+(((-1.0)*x14427*x14433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14434.valid){
continue;
}
CheckValue<IkReal> x14435=IKPowWithIntegerCheck(IKsign((((cj3*x14427*x14428))+(((-1.0)*x14426*x14429))+((cj3*x14425*x14429))+((cj3*x14428*x14430))+(((-1.0)*x14425*x14426*x14432))+(((-1.0)*r12*r22*x14426)))),-1);
if(!x14435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14434.value)+(((1.5707963267949)*(x14435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14436=IKsin(j4);
IkReal x14437=IKcos(j4);
IkReal x14438=(sj1*sj2);
IkReal x14439=(cj5*sj3);
IkReal x14440=(cj5*r10);
IkReal x14441=(r00*sj5);
IkReal x14442=(r11*sj5);
IkReal x14443=(cj3*cj5);
IkReal x14444=((1.0)*cj1);
IkReal x14445=(cj3*sj5);
IkReal x14446=(r21*sj5);
IkReal x14447=(cj2*sj1);
IkReal x14448=(sj3*sj5);
IkReal x14449=(r01*sj5);
IkReal x14450=(cj2*x14444);
IkReal x14451=((1.0)*x14437);
IkReal x14452=((1.0)*x14436);
IkReal x14453=(cj3*x14436);
IkReal x14454=(cj3*x14437);
evalcond[0]=((((-1.0)*cj5*r20*x14452))+((x14436*x14446))+(((-1.0)*r22*x14451)));
evalcond[1]=((((-1.0)*cj5*r00*x14452))+((x14436*x14449))+(((-1.0)*r02*x14451)));
evalcond[2]=((1.0)+(((-1.0)*x14440*x14452))+((x14436*x14442))+(((-1.0)*r12*x14451)));
evalcond[3]=(((r11*x14439))+((x14442*x14454))+((r12*x14453))+((r10*x14448))+(((-1.0)*cj3*x14440*x14451)));
evalcond[4]=(((r10*x14437*x14439))+(((-1.0)*sj3*x14442*x14451))+((r10*x14445))+((r11*x14443))+(((-1.0)*r12*sj3*x14452)));
evalcond[5]=(((r21*x14439))+((cj1*sj2))+((r20*x14448))+x14447+(((-1.0)*r20*x14443*x14451))+((r22*x14453))+((r21*x14437*x14445)));
evalcond[6]=((((-1.0)*r00*x14443*x14451))+((r01*x14437*x14445))+(((-1.0)*x14450))+((r01*x14439))+x14438+((sj3*x14441))+((r02*x14453)));
evalcond[7]=((((-1.0)*sj3*x14446*x14451))+(((-1.0)*x14450))+((r20*x14437*x14439))+((r20*x14445))+(((-1.0)*r22*sj3*x14452))+x14438+((r21*x14443)));
evalcond[8]=((((-1.0)*r01*x14448*x14451))+((r01*x14443))+(((-1.0)*sj2*x14444))+(((-1.0)*x14447))+((r00*x14437*x14439))+(((-1.0)*r02*sj3*x14452))+((cj3*x14441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14455=((1.0)*cj5);
CheckValue<IkReal> x14456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x14455)))),-1);
if(!x14456.valid){
continue;
}
CheckValue<IkReal> x14457 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14456.value)))+(x14457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14458=IKsin(j4);
IkReal x14459=IKcos(j4);
IkReal x14460=(sj1*sj2);
IkReal x14461=(cj5*sj3);
IkReal x14462=(cj5*r10);
IkReal x14463=(r00*sj5);
IkReal x14464=(r11*sj5);
IkReal x14465=(cj3*cj5);
IkReal x14466=((1.0)*cj1);
IkReal x14467=(cj3*sj5);
IkReal x14468=(r21*sj5);
IkReal x14469=(cj2*sj1);
IkReal x14470=(sj3*sj5);
IkReal x14471=(r01*sj5);
IkReal x14472=(cj2*x14466);
IkReal x14473=((1.0)*x14459);
IkReal x14474=((1.0)*x14458);
IkReal x14475=(cj3*x14458);
IkReal x14476=(cj3*x14459);
evalcond[0]=((((-1.0)*cj5*r20*x14474))+(((-1.0)*r22*x14473))+((x14458*x14468)));
evalcond[1]=((((-1.0)*cj5*r00*x14474))+(((-1.0)*r02*x14473))+((x14458*x14471)));
evalcond[2]=((1.0)+(((-1.0)*x14462*x14474))+(((-1.0)*r12*x14473))+((x14458*x14464)));
evalcond[3]=(((r10*x14470))+((r11*x14461))+((x14464*x14476))+((r12*x14475))+(((-1.0)*cj3*x14462*x14473)));
evalcond[4]=((((-1.0)*sj3*x14464*x14473))+((r10*x14467))+(((-1.0)*r12*sj3*x14474))+((r11*x14465))+((r10*x14459*x14461)));
evalcond[5]=((((-1.0)*r20*x14465*x14473))+((r21*x14461))+((cj1*sj2))+((r22*x14475))+x14469+((r21*x14459*x14467))+((r20*x14470)));
evalcond[6]=(((r01*x14461))+((sj3*x14463))+(((-1.0)*r00*x14465*x14473))+((r01*x14459*x14467))+((r02*x14475))+x14460+(((-1.0)*x14472)));
evalcond[7]=(((r21*x14465))+(((-1.0)*sj3*x14468*x14473))+(((-1.0)*r22*sj3*x14474))+((r20*x14459*x14461))+x14460+(((-1.0)*x14472))+((r20*x14467)));
evalcond[8]=(((cj3*x14463))+(((-1.0)*sj2*x14466))+(((-1.0)*r01*x14470*x14473))+((r01*x14465))+((r00*x14459*x14461))+(((-1.0)*r02*sj3*x14474))+(((-1.0)*x14469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14477=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14477.valid){
continue;
}
CheckValue<IkReal> x14478 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14477.value)))+(x14478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14479=IKsin(j4);
IkReal x14480=IKcos(j4);
IkReal x14481=(sj1*sj2);
IkReal x14482=(cj5*sj3);
IkReal x14483=(cj5*r10);
IkReal x14484=(r00*sj5);
IkReal x14485=(r11*sj5);
IkReal x14486=(cj3*cj5);
IkReal x14487=((1.0)*cj1);
IkReal x14488=(cj3*sj5);
IkReal x14489=(r21*sj5);
IkReal x14490=(cj2*sj1);
IkReal x14491=(sj3*sj5);
IkReal x14492=(r01*sj5);
IkReal x14493=(cj2*x14487);
IkReal x14494=((1.0)*x14480);
IkReal x14495=((1.0)*x14479);
IkReal x14496=(cj3*x14479);
IkReal x14497=(cj3*x14480);
evalcond[0]=((((-1.0)*r22*x14494))+(((-1.0)*cj5*r20*x14495))+((x14479*x14489)));
evalcond[1]=((((-1.0)*cj5*r00*x14495))+(((-1.0)*r02*x14494))+((x14479*x14492)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14494))+((x14479*x14485))+(((-1.0)*x14483*x14495)));
evalcond[3]=(((r10*x14491))+((r12*x14496))+((r11*x14482))+((x14485*x14497))+(((-1.0)*cj3*x14483*x14494)));
evalcond[4]=(((r10*x14488))+((r11*x14486))+((r10*x14480*x14482))+(((-1.0)*r12*sj3*x14495))+(((-1.0)*sj3*x14485*x14494)));
evalcond[5]=(((r21*x14482))+((cj1*sj2))+((r22*x14496))+((r21*x14480*x14488))+x14490+(((-1.0)*r20*x14486*x14494))+((r20*x14491)));
evalcond[6]=(((r01*x14480*x14488))+(((-1.0)*x14493))+((r02*x14496))+x14481+((r01*x14482))+(((-1.0)*r00*x14486*x14494))+((sj3*x14484)));
evalcond[7]=((((-1.0)*x14493))+((r21*x14486))+(((-1.0)*sj3*x14489*x14494))+x14481+((r20*x14480*x14482))+((r20*x14488))+(((-1.0)*r22*sj3*x14495)));
evalcond[8]=((((-1.0)*x14490))+(((-1.0)*r01*x14491*x14494))+((cj3*x14484))+(((-1.0)*r02*sj3*x14495))+(((-1.0)*sj2*x14487))+((r00*x14480*x14482))+((r01*x14486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14498=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14498);
rxp0_2=(py*r00);
rxp1_0=(r21*x14498);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14499=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14499);
rxp0_2=(py*r00);
rxp1_0=(r21*x14499);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14500=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x14500)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14500)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14501=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14501);
rxp0_2=(py*r00);
rxp1_0=(r21*x14501);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14502=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14502);
rxp0_2=(py*r00);
rxp1_0=(r21*x14502);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14503=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14503);
rxp0_2=(py*r00);
rxp1_0=(r21*x14503);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14504=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14504);
rxp0_2=(py*r00);
rxp1_0=(r21*x14504);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14507=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14507.valid){
continue;
}
IkReal x14505=x14507.value;
IkReal x14506=(cj0*x14505);
cj4array[0]=((((-1.0)*cj1*cj2*x14506))+((sj1*sj2*x14506)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14508=IKsin(j4);
IkReal x14509=IKcos(j4);
IkReal x14510=(r21*sj5);
IkReal x14511=((1.0)*x14509);
IkReal x14512=((1.0)*cj5*x14508);
evalcond[0]=(r12*x14508);
evalcond[1]=((((-1.0)*r12*x14511))+(((-1.0)*cj0)));
evalcond[2]=(((x14508*x14510))+(((-1.0)*r20*x14512)));
evalcond[3]=((((-1.0)*r00*x14512))+((r01*sj5*x14508)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14509*x14510))+(((-1.0)*cj5*r20*x14511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14515=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14515.valid){
continue;
}
IkReal x14513=x14515.value;
IkReal x14514=((1.0)*x14513);
cj4array[0]=((((-1.0)*cj2*sj1*x14514))+(((-1.0)*cj1*sj2*x14514)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14516=IKsin(j4);
IkReal x14517=IKcos(j4);
IkReal x14518=((1.0)*cj0);
IkReal x14519=(r01*sj5);
IkReal x14520=((1.0)*cj5*r00);
evalcond[0]=(r12*x14516);
evalcond[1]=((((-1.0)*r12*x14517))+(((-1.0)*x14518)));
evalcond[2]=((((-1.0)*cj5*r20*x14516))+((r21*sj5*x14516)));
evalcond[3]=(((x14516*x14519))+(((-1.0)*x14516*x14520)));
evalcond[4]=((((-1.0)*x14517*x14520))+((x14517*x14519))+(((-1.0)*sj1*sj2*x14518))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14521=IKPowWithIntegerCheck(r12,-1);
if(!x14521.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14521.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14522=IKsin(j4);
IkReal x14523=IKcos(j4);
IkReal x14524=((1.0)*cj5*r00);
IkReal x14525=(sj5*x14523);
IkReal x14526=(sj5*x14522);
IkReal x14527=((1.0)*cj5*r20);
evalcond[0]=(r12*x14522);
evalcond[1]=((((-1.0)*x14522*x14527))+((r21*x14526)));
evalcond[2]=((((-1.0)*x14522*x14524))+((r01*x14526)));
evalcond[3]=((((-1.0)*x14523*x14527))+((cj2*sj1))+((cj1*sj2))+((r21*x14525)));
evalcond[4]=((((-1.0)*x14523*x14524))+((r01*x14525))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14528=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14528);
rxp0_2=(py*r00);
rxp1_0=(r21*x14528);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14529=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14529);
rxp0_2=(py*r00);
rxp1_0=(r21*x14529);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14530=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14530);
rxp0_2=(py*r00);
rxp1_0=(r21*x14530);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14533=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14533.valid){
continue;
}
IkReal x14531=x14533.value;
IkReal x14532=(cj0*x14531);
cj4array[0]=(((sj1*sj2*x14532))+(((-1.0)*cj1*cj2*x14532)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14534=IKsin(j4);
IkReal x14535=IKcos(j4);
IkReal x14536=(r21*sj5);
IkReal x14537=((1.0)*x14535);
IkReal x14538=((1.0)*cj5*x14534);
evalcond[0]=((-1.0)*r12*x14534);
evalcond[1]=((((-1.0)*r12*x14537))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14538))+((x14534*x14536)));
evalcond[3]=((((-1.0)*r00*x14538))+((r01*sj5*x14534)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((cj5*r20*x14535))+(((-1.0)*x14536*x14537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14541=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14541.valid){
continue;
}
IkReal x14539=x14541.value;
IkReal x14540=((1.0)*x14539);
cj4array[0]=((((-1.0)*cj2*sj1*x14540))+(((-1.0)*cj1*sj2*x14540)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14542=IKsin(j4);
IkReal x14543=IKcos(j4);
IkReal x14544=(cj5*r00);
IkReal x14545=((1.0)*cj0);
IkReal x14546=((1.0)*x14542);
IkReal x14547=(sj5*x14542);
IkReal x14548=((1.0)*x14543);
evalcond[0]=((-1.0)*r12*x14542);
evalcond[1]=((((-1.0)*r12*x14548))+(((-1.0)*x14545)));
evalcond[2]=(((r21*x14547))+(((-1.0)*cj5*r20*x14546)));
evalcond[3]=(((r01*x14547))+(((-1.0)*x14544*x14546)));
evalcond[4]=((((-1.0)*r01*sj5*x14548))+((cj0*cj1*cj2))+((x14543*x14544))+(((-1.0)*sj1*sj2*x14545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14549=IKPowWithIntegerCheck(r12,-1);
if(!x14549.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14549.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14550=IKsin(j4);
IkReal x14551=IKcos(j4);
IkReal x14552=(cj5*r00);
IkReal x14553=(r21*sj5);
IkReal x14554=(cj5*r20);
IkReal x14555=(r01*sj5);
IkReal x14556=((1.0)*x14550);
IkReal x14557=((1.0)*x14551);
evalcond[0]=((-1.0)*r12*x14550);
evalcond[1]=((((-1.0)*x14554*x14556))+((x14550*x14553)));
evalcond[2]=((((-1.0)*x14552*x14556))+((x14550*x14555)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x14553*x14557))+((cj1*sj2))+((x14551*x14554)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+((x14551*x14552))+(((-1.0)*x14555*x14557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14558 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14558.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14558.value));
IkReal gconst67=r00;
IkReal gconst68=r01;
CheckValue<IkReal> x14559 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14559.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14559.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14560=((-1.0)*py);
CheckValue<IkReal> x14562 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14562.valid){
continue;
}
IkReal x14561=((-1.0)*(x14562.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14560);
rxp0_2=(py*r00);
rxp1_0=(r21*x14560);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14561;
IkReal gconst66=x14561;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14563=((-1.0)*py);
CheckValue<IkReal> x14565 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14565.valid){
continue;
}
IkReal x14564=((-1.0)*(x14565.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14563);
rxp0_2=(py*r00);
rxp1_0=(r21*x14563);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14564;
IkReal gconst66=x14564;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14566=((-1.0)*py);
CheckValue<IkReal> x14568 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14568.valid){
continue;
}
IkReal x14567=((-1.0)*(x14568.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14566);
rxp0_2=(py*r00);
rxp1_0=(r21*x14566);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14567;
IkReal gconst66=x14567;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj3*r01*r20))+((cj3*r00*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14569=(cj2*sj1);
IkReal x14570=(cj1*sj2);
IkReal x14571=((1.0)*gconst68);
CheckValue<IkReal> x14572=IKPowWithIntegerCheck(r12,-1);
if(!x14572.valid){
continue;
}
CheckValue<IkReal> x14573=IKPowWithIntegerCheck(sj3,-1);
if(!x14573.valid){
continue;
}
CheckValue<IkReal> x14574=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x14571))),-1);
if(!x14574.valid){
continue;
}
if( IKabs(((x14572.value)*(x14573.value)*((((sj0*x14570))+((sj0*x14569)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14574.value)*(((((-1.0)*r21*sj3*x14571))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14569))+(((-1.0)*x14570)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14572.value)*(x14573.value)*((((sj0*x14570))+((sj0*x14569))))))+IKsqr(((x14574.value)*(((((-1.0)*r21*sj3*x14571))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14569))+(((-1.0)*x14570))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14572.value)*(x14573.value)*((((sj0*x14570))+((sj0*x14569))))), ((x14574.value)*(((((-1.0)*r21*sj3*x14571))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14569))+(((-1.0)*x14570))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14575=IKsin(j4);
IkReal x14576=IKcos(j4);
IkReal x14577=((1.0)*sj3);
IkReal x14578=(cj2*sj0);
IkReal x14579=(gconst68*sj3);
IkReal x14580=(sj1*sj2);
IkReal x14581=(cj1*cj2);
IkReal x14582=(cj3*r20);
IkReal x14583=(gconst67*r00);
IkReal x14584=(cj2*sj1);
IkReal x14585=(cj3*gconst68);
IkReal x14586=(cj1*sj2);
IkReal x14587=((1.0)*cj0);
IkReal x14588=(r12*x14575);
IkReal x14589=(gconst67*x14576);
IkReal x14590=((1.0)*x14576);
IkReal x14591=(gconst67*x14575);
IkReal x14592=((1.0)*gconst68*x14575);
evalcond[0]=((((-1.0)*x14587))+(((-1.0)*r12*x14590)));
evalcond[1]=(((r21*x14591))+(((-1.0)*r20*x14592)));
evalcond[2]=(sj0+(((-1.0)*r00*x14592))+((r01*x14591)));
evalcond[3]=(((sj0*x14586))+(((-1.0)*x14577*x14588))+((sj1*x14578)));
evalcond[4]=(((cj3*x14588))+(((-1.0)*sj0*x14580))+((cj1*x14578)));
evalcond[5]=(((r21*x14579))+((gconst67*r20*sj3))+x14586+x14584+((cj3*r21*x14589))+(((-1.0)*gconst68*x14582*x14590)));
evalcond[6]=((((-1.0)*r21*x14577*x14589))+(((-1.0)*x14581))+((r21*x14585))+x14580+((gconst67*x14582))+((r20*x14576*x14579)));
evalcond[7]=(((cj3*x14583))+(((-1.0)*r01*x14577*x14589))+((r00*x14576*x14579))+((r01*x14585))+((cj0*x14584))+((cj0*x14586)));
evalcond[8]=(((cj3*r01*x14589))+(((-1.0)*r00*x14585*x14590))+((sj3*x14583))+(((-1.0)*x14580*x14587))+((cj0*x14581))+((r01*x14579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(r12,-1);
if(!x14594.valid){
continue;
}
IkReal x14593=x14594.value;
CheckValue<IkReal> x14595=IKPowWithIntegerCheck(cj3,-1);
if(!x14595.valid){
continue;
}
if( IKabs((x14593*(x14595.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14593)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14593*(x14595.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14593))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14593*(x14595.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14593));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14596=IKsin(j4);
IkReal x14597=IKcos(j4);
IkReal x14598=((1.0)*sj3);
IkReal x14599=(cj2*sj0);
IkReal x14600=(gconst68*sj3);
IkReal x14601=(sj1*sj2);
IkReal x14602=(cj1*cj2);
IkReal x14603=(cj3*r20);
IkReal x14604=(gconst67*r00);
IkReal x14605=(cj2*sj1);
IkReal x14606=(cj3*gconst68);
IkReal x14607=(cj1*sj2);
IkReal x14608=((1.0)*cj0);
IkReal x14609=(r12*x14596);
IkReal x14610=(gconst67*x14597);
IkReal x14611=((1.0)*x14597);
IkReal x14612=(gconst67*x14596);
IkReal x14613=((1.0)*gconst68*x14596);
evalcond[0]=((((-1.0)*r12*x14611))+(((-1.0)*x14608)));
evalcond[1]=((((-1.0)*r20*x14613))+((r21*x14612)));
evalcond[2]=(sj0+((r01*x14612))+(((-1.0)*r00*x14613)));
evalcond[3]=((((-1.0)*x14598*x14609))+((sj0*x14607))+((sj1*x14599)));
evalcond[4]=(((cj1*x14599))+((cj3*x14609))+(((-1.0)*sj0*x14601)));
evalcond[5]=(((r21*x14600))+((cj3*r21*x14610))+(((-1.0)*gconst68*x14603*x14611))+((gconst67*r20*sj3))+x14605+x14607);
evalcond[6]=(((gconst67*x14603))+(((-1.0)*r21*x14598*x14610))+((r21*x14606))+(((-1.0)*x14602))+x14601+((r20*x14597*x14600)));
evalcond[7]=(((cj0*x14607))+((cj0*x14605))+((r01*x14606))+((cj3*x14604))+(((-1.0)*r01*x14598*x14610))+((r00*x14597*x14600)));
evalcond[8]=((((-1.0)*r00*x14606*x14611))+((cj0*x14602))+((r01*x14600))+((sj3*x14604))+((cj3*r01*x14610))+(((-1.0)*x14601*x14608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14615=IKPowWithIntegerCheck(r12,-1);
if(!x14615.valid){
continue;
}
IkReal x14614=x14615.value;
CheckValue<IkReal> x14616=IKPowWithIntegerCheck(sj3,-1);
if(!x14616.valid){
continue;
}
if( IKabs((x14614*(x14616.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14614)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14614*(x14616.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14614))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14614*(x14616.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14614));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14617=IKsin(j4);
IkReal x14618=IKcos(j4);
IkReal x14619=((1.0)*sj3);
IkReal x14620=(cj2*sj0);
IkReal x14621=(gconst68*sj3);
IkReal x14622=(sj1*sj2);
IkReal x14623=(cj1*cj2);
IkReal x14624=(cj3*r20);
IkReal x14625=(gconst67*r00);
IkReal x14626=(cj2*sj1);
IkReal x14627=(cj3*gconst68);
IkReal x14628=(cj1*sj2);
IkReal x14629=((1.0)*cj0);
IkReal x14630=(r12*x14617);
IkReal x14631=(gconst67*x14618);
IkReal x14632=((1.0)*x14618);
IkReal x14633=(gconst67*x14617);
IkReal x14634=((1.0)*gconst68*x14617);
evalcond[0]=((((-1.0)*x14629))+(((-1.0)*r12*x14632)));
evalcond[1]=((((-1.0)*r20*x14634))+((r21*x14633)));
evalcond[2]=(sj0+(((-1.0)*r00*x14634))+((r01*x14633)));
evalcond[3]=((((-1.0)*x14619*x14630))+((sj1*x14620))+((sj0*x14628)));
evalcond[4]=((((-1.0)*sj0*x14622))+((cj1*x14620))+((cj3*x14630)));
evalcond[5]=(((r21*x14621))+((cj3*r21*x14631))+((gconst67*r20*sj3))+x14626+x14628+(((-1.0)*gconst68*x14624*x14632)));
evalcond[6]=((((-1.0)*r21*x14619*x14631))+((r21*x14627))+((r20*x14618*x14621))+((gconst67*x14624))+x14622+(((-1.0)*x14623)));
evalcond[7]=((((-1.0)*r01*x14619*x14631))+((cj3*x14625))+((r00*x14618*x14621))+((cj0*x14628))+((cj0*x14626))+((r01*x14627)));
evalcond[8]=(((sj3*x14625))+(((-1.0)*r00*x14627*x14632))+((cj3*r01*x14631))+(((-1.0)*x14622*x14629))+((cj0*x14623))+((r01*x14621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14635=((-1.0)*r00);
CheckValue<IkReal> x14636 = IKatan2WithCheck(IkReal(x14635),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14636.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14636.value))));
IkReal gconst70=x14635;
IkReal gconst71=((-1.0)*r01);
CheckValue<IkReal> x14637 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14638=((-1.0)*r00);
IkReal x14639=((-1.0)*py);
CheckValue<IkReal> x14641 = IKatan2WithCheck(IkReal(x14638),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14641.valid){
continue;
}
IkReal x14640=((1.0)*(x14641.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14639);
rxp0_2=(py*r00);
rxp1_0=(r21*x14639);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14640)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14640)));
IkReal gconst70=x14638;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14642=((-1.0)*r00);
IkReal x14643=((-1.0)*py);
CheckValue<IkReal> x14645 = IKatan2WithCheck(IkReal(x14642),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14645.valid){
continue;
}
IkReal x14644=((1.0)*(x14645.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14643);
rxp0_2=(py*r00);
rxp1_0=(r21*x14643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14644)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14644)));
IkReal gconst70=x14642;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14646=((-1.0)*r00);
IkReal x14647=((-1.0)*py);
CheckValue<IkReal> x14649 = IKatan2WithCheck(IkReal(x14646),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14649.valid){
continue;
}
IkReal x14648=((1.0)*(x14649.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14647);
rxp0_2=(py*r00);
rxp1_0=(r21*x14647);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14648)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14648)));
IkReal gconst70=x14646;
IkReal gconst71=((-1.0)*r01);
IkReal x14650=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r20*x14650))+(((-1.0)*r00*r21*x14650)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14651=(cj2*sj1);
IkReal x14652=(cj1*sj2);
IkReal x14653=((1.0)*gconst71);
CheckValue<IkReal> x14654=IKPowWithIntegerCheck(r12,-1);
if(!x14654.valid){
continue;
}
CheckValue<IkReal> x14655=IKPowWithIntegerCheck(sj3,-1);
if(!x14655.valid){
continue;
}
CheckValue<IkReal> x14656=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x14653))+((cj3*gconst70*r21))),-1);
if(!x14656.valid){
continue;
}
if( IKabs(((x14654.value)*(x14655.value)*((((sj0*x14651))+((sj0*x14652)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14656.value)*(((((-1.0)*r21*sj3*x14653))+(((-1.0)*x14652))+(((-1.0)*x14651))+(((-1.0)*gconst70*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14654.value)*(x14655.value)*((((sj0*x14651))+((sj0*x14652))))))+IKsqr(((x14656.value)*(((((-1.0)*r21*sj3*x14653))+(((-1.0)*x14652))+(((-1.0)*x14651))+(((-1.0)*gconst70*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14654.value)*(x14655.value)*((((sj0*x14651))+((sj0*x14652))))), ((x14656.value)*(((((-1.0)*r21*sj3*x14653))+(((-1.0)*x14652))+(((-1.0)*x14651))+(((-1.0)*gconst70*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14657=IKsin(j4);
IkReal x14658=IKcos(j4);
IkReal x14659=(cj1*sj0);
IkReal x14660=(cj3*r21);
IkReal x14661=(sj1*sj2);
IkReal x14662=(gconst71*r20);
IkReal x14663=(cj3*r00);
IkReal x14664=(r21*sj3);
IkReal x14665=(cj1*cj2);
IkReal x14666=(gconst70*r20);
IkReal x14667=(cj2*sj1);
IkReal x14668=(cj3*r01);
IkReal x14669=(gconst71*r00);
IkReal x14670=(r01*sj3);
IkReal x14671=(cj1*sj2);
IkReal x14672=((1.0)*cj0);
IkReal x14673=((1.0)*x14657);
IkReal x14674=(gconst70*x14657);
IkReal x14675=(gconst70*x14658);
IkReal x14676=((1.0)*x14658);
IkReal x14677=(sj3*x14658);
evalcond[0]=((((-1.0)*x14672))+(((-1.0)*r12*x14676)));
evalcond[1]=(((r21*x14674))+(((-1.0)*x14662*x14673)));
evalcond[2]=(sj0+(((-1.0)*x14669*x14673))+((r01*x14674)));
evalcond[3]=(((sj0*x14667))+(((-1.0)*r12*sj3*x14673))+((sj2*x14659)));
evalcond[4]=(((cj3*r12*x14657))+(((-1.0)*sj0*x14661))+((cj2*x14659)));
evalcond[5]=(((x14660*x14675))+((gconst71*x14664))+x14671+x14667+((sj3*x14666))+(((-1.0)*cj3*x14662*x14676)));
evalcond[6]=(((gconst71*x14660))+((x14662*x14677))+(((-1.0)*x14665))+((cj3*x14666))+x14661+(((-1.0)*x14664*x14675)));
evalcond[7]=(((cj0*x14671))+((gconst71*x14668))+((x14669*x14677))+((cj0*x14667))+(((-1.0)*x14670*x14675))+((gconst70*x14663)));
evalcond[8]=((((-1.0)*x14661*x14672))+(((-1.0)*gconst71*x14663*x14676))+((x14668*x14675))+((gconst71*x14670))+((cj0*x14665))+((gconst70*r00*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14679=IKPowWithIntegerCheck(r12,-1);
if(!x14679.valid){
continue;
}
IkReal x14678=x14679.value;
CheckValue<IkReal> x14680=IKPowWithIntegerCheck(cj3,-1);
if(!x14680.valid){
continue;
}
if( IKabs((x14678*(x14680.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14678)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14678*(x14680.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14678))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14678*(x14680.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14678));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14681=IKsin(j4);
IkReal x14682=IKcos(j4);
IkReal x14683=(cj1*sj0);
IkReal x14684=(cj3*r21);
IkReal x14685=(sj1*sj2);
IkReal x14686=(gconst71*r20);
IkReal x14687=(cj3*r00);
IkReal x14688=(r21*sj3);
IkReal x14689=(cj1*cj2);
IkReal x14690=(gconst70*r20);
IkReal x14691=(cj2*sj1);
IkReal x14692=(cj3*r01);
IkReal x14693=(gconst71*r00);
IkReal x14694=(r01*sj3);
IkReal x14695=(cj1*sj2);
IkReal x14696=((1.0)*cj0);
IkReal x14697=((1.0)*x14681);
IkReal x14698=(gconst70*x14681);
IkReal x14699=(gconst70*x14682);
IkReal x14700=((1.0)*x14682);
IkReal x14701=(sj3*x14682);
evalcond[0]=((((-1.0)*r12*x14700))+(((-1.0)*x14696)));
evalcond[1]=((((-1.0)*x14686*x14697))+((r21*x14698)));
evalcond[2]=(sj0+((r01*x14698))+(((-1.0)*x14693*x14697)));
evalcond[3]=((((-1.0)*r12*sj3*x14697))+((sj2*x14683))+((sj0*x14691)));
evalcond[4]=(((cj2*x14683))+((cj3*r12*x14681))+(((-1.0)*sj0*x14685)));
evalcond[5]=(((sj3*x14690))+((x14684*x14699))+x14695+x14691+((gconst71*x14688))+(((-1.0)*cj3*x14686*x14700)));
evalcond[6]=(((cj3*x14690))+((x14686*x14701))+x14685+(((-1.0)*x14688*x14699))+((gconst71*x14684))+(((-1.0)*x14689)));
evalcond[7]=(((cj0*x14691))+((cj0*x14695))+(((-1.0)*x14694*x14699))+((gconst70*x14687))+((x14693*x14701))+((gconst71*x14692)));
evalcond[8]=((((-1.0)*x14685*x14696))+((gconst70*r00*sj3))+(((-1.0)*gconst71*x14687*x14700))+((gconst71*x14694))+((x14692*x14699))+((cj0*x14689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14703=IKPowWithIntegerCheck(r12,-1);
if(!x14703.valid){
continue;
}
IkReal x14702=x14703.value;
CheckValue<IkReal> x14704=IKPowWithIntegerCheck(sj3,-1);
if(!x14704.valid){
continue;
}
if( IKabs((x14702*(x14704.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14702)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14702*(x14704.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14702))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14702*(x14704.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14702));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14705=IKsin(j4);
IkReal x14706=IKcos(j4);
IkReal x14707=(cj1*sj0);
IkReal x14708=(cj3*r21);
IkReal x14709=(sj1*sj2);
IkReal x14710=(gconst71*r20);
IkReal x14711=(cj3*r00);
IkReal x14712=(r21*sj3);
IkReal x14713=(cj1*cj2);
IkReal x14714=(gconst70*r20);
IkReal x14715=(cj2*sj1);
IkReal x14716=(cj3*r01);
IkReal x14717=(gconst71*r00);
IkReal x14718=(r01*sj3);
IkReal x14719=(cj1*sj2);
IkReal x14720=((1.0)*cj0);
IkReal x14721=((1.0)*x14705);
IkReal x14722=(gconst70*x14705);
IkReal x14723=(gconst70*x14706);
IkReal x14724=((1.0)*x14706);
IkReal x14725=(sj3*x14706);
evalcond[0]=((((-1.0)*r12*x14724))+(((-1.0)*x14720)));
evalcond[1]=(((r21*x14722))+(((-1.0)*x14710*x14721)));
evalcond[2]=(sj0+((r01*x14722))+(((-1.0)*x14717*x14721)));
evalcond[3]=((((-1.0)*r12*sj3*x14721))+((sj0*x14715))+((sj2*x14707)));
evalcond[4]=(((cj3*r12*x14705))+((cj2*x14707))+(((-1.0)*sj0*x14709)));
evalcond[5]=(((sj3*x14714))+(((-1.0)*cj3*x14710*x14724))+x14715+x14719+((gconst71*x14712))+((x14708*x14723)));
evalcond[6]=(((x14710*x14725))+((cj3*x14714))+((gconst71*x14708))+(((-1.0)*x14713))+x14709+(((-1.0)*x14712*x14723)));
evalcond[7]=(((gconst70*x14711))+((x14717*x14725))+((cj0*x14715))+((cj0*x14719))+((gconst71*x14716))+(((-1.0)*x14718*x14723)));
evalcond[8]=((((-1.0)*gconst71*x14711*x14724))+((cj0*x14713))+((gconst71*x14718))+((gconst70*r00*sj3))+(((-1.0)*x14709*x14720))+((x14716*x14723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14726=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14726);
rxp0_2=(py*r00);
rxp1_0=(r21*x14726);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14727=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14727);
rxp0_2=(py*r00);
rxp1_0=(r21*x14727);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14728=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14728);
rxp0_2=(py*r00);
rxp1_0=(r21*x14728);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14731=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14731.valid){
continue;
}
IkReal x14729=x14731.value;
IkReal x14730=((1.0)*cj0*x14729);
cj4array[0]=((((-1.0)*cj1*sj2*x14730))+(((-1.0)*cj2*sj1*x14730)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14732=IKsin(j4);
IkReal x14733=IKcos(j4);
IkReal x14734=(r21*sj5);
IkReal x14735=((1.0)*x14733);
IkReal x14736=((1.0)*cj5*x14732);
evalcond[0]=((-1.0)*r12*x14732);
evalcond[1]=((((-1.0)*r12*x14735))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14736))+((x14732*x14734)));
evalcond[3]=((((-1.0)*r00*x14736))+((r01*sj5*x14732)));
evalcond[4]=(((cj5*r20*x14733))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14734*x14735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14738=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14738.valid){
continue;
}
IkReal x14737=x14738.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14737))+((cj1*cj2*x14737)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14739=IKsin(j4);
IkReal x14740=IKcos(j4);
IkReal x14741=(cj5*r00);
IkReal x14742=((1.0)*x14739);
IkReal x14743=(sj5*x14739);
IkReal x14744=((1.0)*x14740);
evalcond[0]=((-1.0)*r12*x14739);
evalcond[1]=((((-1.0)*r12*x14744))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14742))+((r21*x14743)));
evalcond[3]=(((r01*x14743))+(((-1.0)*x14741*x14742)));
evalcond[4]=(((cj0*cj2*sj1))+((x14740*x14741))+((cj0*cj1*sj2))+(((-1.0)*r01*sj5*x14744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14745=IKPowWithIntegerCheck(r12,-1);
if(!x14745.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14745.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14746=IKsin(j4);
IkReal x14747=IKcos(j4);
IkReal x14748=(cj5*r00);
IkReal x14749=(cj5*r20);
IkReal x14750=(r21*sj5);
IkReal x14751=(r01*sj5);
IkReal x14752=((1.0)*x14746);
IkReal x14753=((1.0)*x14747);
evalcond[0]=((-1.0)*r12*x14746);
evalcond[1]=(((x14746*x14750))+(((-1.0)*x14749*x14752)));
evalcond[2]=(((x14746*x14751))+(((-1.0)*x14748*x14752)));
evalcond[3]=(((x14747*x14749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14750*x14753)));
evalcond[4]=(((x14747*x14748))+(((-1.0)*x14751*x14753))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14754=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14754);
rxp0_2=(py*r00);
rxp1_0=(r21*x14754);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14755=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14755);
rxp0_2=(py*r00);
rxp1_0=(r21*x14755);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14756=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14756);
rxp0_2=(py*r00);
rxp1_0=(r21*x14756);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14759=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14759.valid){
continue;
}
IkReal x14757=x14759.value;
IkReal x14758=((1.0)*cj0*x14757);
cj4array[0]=((((-1.0)*cj1*sj2*x14758))+(((-1.0)*cj2*sj1*x14758)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14760=IKsin(j4);
IkReal x14761=IKcos(j4);
IkReal x14762=(r21*sj5);
IkReal x14763=((1.0)*x14761);
IkReal x14764=((1.0)*cj5*x14760);
evalcond[0]=(r12*x14760);
evalcond[1]=((((-1.0)*r12*x14763))+(((-1.0)*cj0)));
evalcond[2]=(((x14760*x14762))+(((-1.0)*r20*x14764)));
evalcond[3]=((((-1.0)*r00*x14764))+((r01*sj5*x14760)));
evalcond[4]=(((x14761*x14762))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x14763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14766=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14766.valid){
continue;
}
IkReal x14765=x14766.value;
cj4array[0]=(((cj1*cj2*x14765))+(((-1.0)*sj1*sj2*x14765)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14767=IKsin(j4);
IkReal x14768=IKcos(j4);
IkReal x14769=(r01*sj5);
IkReal x14770=((1.0)*cj5*r00);
evalcond[0]=(r12*x14767);
evalcond[1]=((((-1.0)*r12*x14768))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14767))+((r21*sj5*x14767)));
evalcond[3]=(((x14767*x14769))+(((-1.0)*x14767*x14770)));
evalcond[4]=((((-1.0)*x14768*x14770))+((x14768*x14769))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14771=IKPowWithIntegerCheck(r12,-1);
if(!x14771.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14771.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14772=IKsin(j4);
IkReal x14773=IKcos(j4);
IkReal x14774=(sj5*x14773);
IkReal x14775=(sj5*x14772);
IkReal x14776=((1.0)*cj5*x14772);
IkReal x14777=((1.0)*cj5*x14773);
evalcond[0]=(r12*x14772);
evalcond[1]=(((r21*x14775))+(((-1.0)*r20*x14776)));
evalcond[2]=(((r01*x14775))+(((-1.0)*r00*x14776)));
evalcond[3]=(((r21*x14774))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x14777)));
evalcond[4]=(((r01*x14774))+(((-1.0)*r00*x14777))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14779=IKPowWithIntegerCheck(r12,-1);
if(!x14779.valid){
continue;
}
IkReal x14778=x14779.value;
CheckValue<IkReal> x14780=IKPowWithIntegerCheck(sj3,-1);
if(!x14780.valid){
continue;
}
if( IKabs((x14778*(x14780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14778)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14778*(x14780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14778))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14778*(x14780.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14778));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14781=IKsin(j4);
IkReal x14782=IKcos(j4);
IkReal x14783=(cj2*sj0);
IkReal x14784=(sj1*sj2);
IkReal x14785=(cj5*sj3);
IkReal x14786=(cj3*cj5);
IkReal x14787=(cj1*cj2);
IkReal x14788=(r21*sj5);
IkReal x14789=(r00*sj5);
IkReal x14790=(cj2*sj1);
IkReal x14791=(r01*sj5);
IkReal x14792=(r20*sj5);
IkReal x14793=(cj1*sj2);
IkReal x14794=((1.0)*cj0);
IkReal x14795=((1.0)*x14781);
IkReal x14796=(r20*x14782);
IkReal x14797=(r00*x14782);
IkReal x14798=(cj3*x14782);
IkReal x14799=((1.0)*x14782);
evalcond[0]=((((-1.0)*r12*x14799))+(((-1.0)*x14794)));
evalcond[1]=(((x14781*x14788))+(((-1.0)*cj5*r20*x14795)));
evalcond[2]=(sj0+((x14781*x14791))+(((-1.0)*cj5*r00*x14795)));
evalcond[3]=(((sj1*x14783))+((sj0*x14793))+(((-1.0)*r12*sj3*x14795)));
evalcond[4]=(((cj3*r12*x14781))+((cj1*x14783))+(((-1.0)*sj0*x14784)));
evalcond[5]=((((-1.0)*x14786*x14796))+((x14788*x14798))+((r21*x14785))+x14793+x14790+((sj3*x14792)));
evalcond[6]=(((x14785*x14796))+(((-1.0)*sj3*x14788*x14799))+(((-1.0)*x14787))+((cj3*x14792))+((r21*x14786))+x14784);
evalcond[7]=(((x14785*x14797))+((r01*x14786))+((cj0*x14790))+((cj0*x14793))+((cj3*x14789))+(((-1.0)*sj3*x14791*x14799)));
evalcond[8]=(((cj0*x14787))+((r01*x14785))+(((-1.0)*x14786*x14797))+(((-1.0)*x14784*x14794))+((sj3*x14789))+((x14791*x14798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14800=((1.0)*sj3);
IkReal x14801=((1.0)*cj5);
CheckValue<IkReal> x14802=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14801))),-1);
if(!x14802.valid){
continue;
}
CheckValue<IkReal> x14803=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14801))),-1);
if(!x14803.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14800))+(((-1.0)*r20*sj5*x14800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14802.value)))+IKsqr(((x14803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14800))+(((-1.0)*r20*sj5*x14800))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14802.value)), ((x14803.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14800))+(((-1.0)*r20*sj5*x14800))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14804=IKsin(j4);
IkReal x14805=IKcos(j4);
IkReal x14806=(cj2*sj0);
IkReal x14807=(sj1*sj2);
IkReal x14808=(cj5*sj3);
IkReal x14809=(cj3*cj5);
IkReal x14810=(cj1*cj2);
IkReal x14811=(r21*sj5);
IkReal x14812=(r00*sj5);
IkReal x14813=(cj2*sj1);
IkReal x14814=(r01*sj5);
IkReal x14815=(r20*sj5);
IkReal x14816=(cj1*sj2);
IkReal x14817=((1.0)*cj0);
IkReal x14818=((1.0)*x14804);
IkReal x14819=(r20*x14805);
IkReal x14820=(r00*x14805);
IkReal x14821=(cj3*x14805);
IkReal x14822=((1.0)*x14805);
evalcond[0]=((((-1.0)*x14817))+(((-1.0)*r12*x14822)));
evalcond[1]=((((-1.0)*cj5*r20*x14818))+((x14804*x14811)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14818))+((x14804*x14814)));
evalcond[3]=((((-1.0)*r12*sj3*x14818))+((sj0*x14816))+((sj1*x14806)));
evalcond[4]=(((cj1*x14806))+(((-1.0)*sj0*x14807))+((cj3*r12*x14804)));
evalcond[5]=(((sj3*x14815))+((r21*x14808))+(((-1.0)*x14809*x14819))+x14816+x14813+((x14811*x14821)));
evalcond[6]=(((x14808*x14819))+((r21*x14809))+x14807+(((-1.0)*x14810))+(((-1.0)*sj3*x14811*x14822))+((cj3*x14815)));
evalcond[7]=(((x14808*x14820))+(((-1.0)*sj3*x14814*x14822))+((r01*x14809))+((cj0*x14816))+((cj0*x14813))+((cj3*x14812)));
evalcond[8]=(((x14814*x14821))+((sj3*x14812))+(((-1.0)*x14807*x14817))+(((-1.0)*x14809*x14820))+((r01*x14808))+((cj0*x14810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14823=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14823.valid){
continue;
}
CheckValue<IkReal> x14824=IKPowWithIntegerCheck(r12,-1);
if(!x14824.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14824.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14823.value)))+IKsqr(((-1.0)*cj0*(x14824.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14823.value)), ((-1.0)*cj0*(x14824.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14825=IKsin(j4);
IkReal x14826=IKcos(j4);
IkReal x14827=(cj2*sj0);
IkReal x14828=(sj1*sj2);
IkReal x14829=(cj5*sj3);
IkReal x14830=(cj3*cj5);
IkReal x14831=(cj1*cj2);
IkReal x14832=(r21*sj5);
IkReal x14833=(r00*sj5);
IkReal x14834=(cj2*sj1);
IkReal x14835=(r01*sj5);
IkReal x14836=(r20*sj5);
IkReal x14837=(cj1*sj2);
IkReal x14838=((1.0)*cj0);
IkReal x14839=((1.0)*x14825);
IkReal x14840=(r20*x14826);
IkReal x14841=(r00*x14826);
IkReal x14842=(cj3*x14826);
IkReal x14843=((1.0)*x14826);
evalcond[0]=((((-1.0)*r12*x14843))+(((-1.0)*x14838)));
evalcond[1]=((((-1.0)*cj5*r20*x14839))+((x14825*x14832)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14839))+((x14825*x14835)));
evalcond[3]=(((sj1*x14827))+(((-1.0)*r12*sj3*x14839))+((sj0*x14837)));
evalcond[4]=(((cj3*r12*x14825))+((cj1*x14827))+(((-1.0)*sj0*x14828)));
evalcond[5]=(((r21*x14829))+(((-1.0)*x14830*x14840))+((x14832*x14842))+x14837+x14834+((sj3*x14836)));
evalcond[6]=((((-1.0)*x14831))+(((-1.0)*sj3*x14832*x14843))+x14828+((r21*x14830))+((cj3*x14836))+((x14829*x14840)));
evalcond[7]=(((cj0*x14837))+((cj0*x14834))+(((-1.0)*sj3*x14835*x14843))+((cj3*x14833))+((x14829*x14841))+((r01*x14830)));
evalcond[8]=((((-1.0)*x14828*x14838))+(((-1.0)*x14830*x14841))+((cj0*x14831))+((r01*x14829))+((sj3*x14833))+((x14835*x14842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14844=((1.0)*cj5);
CheckValue<IkReal> x14845 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x14844))+(((-1.0)*r10*sj0*x14844))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14845.valid){
continue;
}
CheckValue<IkReal> x14846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14844))+(((-1.0)*r20*sj5)))),-1);
if(!x14846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14845.value)+(((1.5707963267949)*(x14846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14847=IKsin(j4);
IkReal x14848=IKcos(j4);
IkReal x14849=(r11*sj5);
IkReal x14850=(cj2*sj0);
IkReal x14851=(cj5*r10);
IkReal x14852=(sj1*sj2);
IkReal x14853=(cj5*r01);
IkReal x14854=(cj5*r00);
IkReal x14855=(cj1*cj2);
IkReal x14856=(cj3*sj5);
IkReal x14857=(r21*sj5);
IkReal x14858=(cj5*sj3);
IkReal x14859=(sj3*sj5);
IkReal x14860=(cj2*sj1);
IkReal x14861=(r01*sj5);
IkReal x14862=(cj3*cj5);
IkReal x14863=(cj1*sj2);
IkReal x14864=((1.0)*cj0);
IkReal x14865=(cj5*r20);
IkReal x14866=((1.0)*x14848);
IkReal x14867=((1.0)*x14847);
IkReal x14868=(cj3*x14848);
IkReal x14869=(sj3*x14848);
IkReal x14870=(cj3*x14847);
evalcond[0]=(((x14847*x14857))+(((-1.0)*x14865*x14867))+(((-1.0)*r22*x14866)));
evalcond[1]=((((-1.0)*r02*x14866))+sj0+((x14847*x14861))+(((-1.0)*x14854*x14867)));
evalcond[2]=(((x14847*x14849))+(((-1.0)*x14851*x14867))+(((-1.0)*x14864))+(((-1.0)*r12*x14866)));
evalcond[3]=(((r21*x14858))+((r20*x14859))+((r21*x14848*x14856))+((r22*x14870))+(((-1.0)*r20*x14862*x14866))+x14860+x14863);
evalcond[4]=(((r20*x14856))+(((-1.0)*sj3*x14857*x14866))+x14852+((r20*x14848*x14858))+(((-1.0)*r22*sj3*x14867))+((r21*x14862))+(((-1.0)*x14855)));
evalcond[5]=((((-1.0)*r02*sj3*x14867))+((x14854*x14869))+(((-1.0)*r01*x14859*x14866))+((cj3*x14853))+((r00*x14856))+((cj0*x14860))+((cj0*x14863)));
evalcond[6]=((((-1.0)*cj3*x14854*x14866))+((cj0*x14855))+((sj3*x14853))+((r00*x14859))+((r01*x14848*x14856))+(((-1.0)*x14852*x14864))+((r02*x14870)));
evalcond[7]=(((sj0*x14863))+((sj1*x14850))+((r10*x14856))+((r11*x14862))+((x14851*x14869))+(((-1.0)*r12*sj3*x14867))+(((-1.0)*sj3*x14849*x14866)));
evalcond[8]=(((r12*x14870))+(((-1.0)*sj0*x14852))+(((-1.0)*cj3*x14851*x14866))+((r11*x14858))+((x14849*x14868))+((r10*x14859))+((cj1*x14850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14871=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14871.valid){
continue;
}
CheckValue<IkReal> x14872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14871.value)))+(x14872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14873=IKsin(j4);
IkReal x14874=IKcos(j4);
IkReal x14875=(r11*sj5);
IkReal x14876=(cj2*sj0);
IkReal x14877=(cj5*r10);
IkReal x14878=(sj1*sj2);
IkReal x14879=(cj5*r01);
IkReal x14880=(cj5*r00);
IkReal x14881=(cj1*cj2);
IkReal x14882=(cj3*sj5);
IkReal x14883=(r21*sj5);
IkReal x14884=(cj5*sj3);
IkReal x14885=(sj3*sj5);
IkReal x14886=(cj2*sj1);
IkReal x14887=(r01*sj5);
IkReal x14888=(cj3*cj5);
IkReal x14889=(cj1*sj2);
IkReal x14890=((1.0)*cj0);
IkReal x14891=(cj5*r20);
IkReal x14892=((1.0)*x14874);
IkReal x14893=((1.0)*x14873);
IkReal x14894=(cj3*x14874);
IkReal x14895=(sj3*x14874);
IkReal x14896=(cj3*x14873);
evalcond[0]=((((-1.0)*r22*x14892))+((x14873*x14883))+(((-1.0)*x14891*x14893)));
evalcond[1]=(sj0+((x14873*x14887))+(((-1.0)*r02*x14892))+(((-1.0)*x14880*x14893)));
evalcond[2]=((((-1.0)*x14877*x14893))+((x14873*x14875))+(((-1.0)*x14890))+(((-1.0)*r12*x14892)));
evalcond[3]=(((r21*x14874*x14882))+x14889+x14886+((r22*x14896))+((r21*x14884))+((r20*x14885))+(((-1.0)*r20*x14888*x14892)));
evalcond[4]=(x14878+(((-1.0)*sj3*x14883*x14892))+((r20*x14874*x14884))+((r21*x14888))+((r20*x14882))+(((-1.0)*x14881))+(((-1.0)*r22*sj3*x14893)));
evalcond[5]=(((cj0*x14886))+((cj0*x14889))+((r00*x14882))+((x14880*x14895))+(((-1.0)*r01*x14885*x14892))+(((-1.0)*r02*sj3*x14893))+((cj3*x14879)));
evalcond[6]=(((r02*x14896))+(((-1.0)*x14878*x14890))+((cj0*x14881))+((r01*x14874*x14882))+(((-1.0)*cj3*x14880*x14892))+((r00*x14885))+((sj3*x14879)));
evalcond[7]=(((r11*x14888))+((r10*x14882))+(((-1.0)*r12*sj3*x14893))+((x14877*x14895))+((sj1*x14876))+((sj0*x14889))+(((-1.0)*sj3*x14875*x14892)));
evalcond[8]=(((r11*x14884))+((r12*x14896))+((r10*x14885))+(((-1.0)*cj3*x14877*x14892))+((x14875*x14894))+((cj1*x14876))+(((-1.0)*sj0*x14878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14897.valid){
continue;
}
CheckValue<IkReal> x14898 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14897.value)))+(x14898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14899=IKsin(j4);
IkReal x14900=IKcos(j4);
IkReal x14901=(r11*sj5);
IkReal x14902=(cj2*sj0);
IkReal x14903=(cj5*r10);
IkReal x14904=(sj1*sj2);
IkReal x14905=(cj5*r01);
IkReal x14906=(cj5*r00);
IkReal x14907=(cj1*cj2);
IkReal x14908=(cj3*sj5);
IkReal x14909=(r21*sj5);
IkReal x14910=(cj5*sj3);
IkReal x14911=(sj3*sj5);
IkReal x14912=(cj2*sj1);
IkReal x14913=(r01*sj5);
IkReal x14914=(cj3*cj5);
IkReal x14915=(cj1*sj2);
IkReal x14916=((1.0)*cj0);
IkReal x14917=(cj5*r20);
IkReal x14918=((1.0)*x14900);
IkReal x14919=((1.0)*x14899);
IkReal x14920=(cj3*x14900);
IkReal x14921=(sj3*x14900);
IkReal x14922=(cj3*x14899);
evalcond[0]=((((-1.0)*r22*x14918))+((x14899*x14909))+(((-1.0)*x14917*x14919)));
evalcond[1]=(sj0+(((-1.0)*r02*x14918))+(((-1.0)*x14906*x14919))+((x14899*x14913)));
evalcond[2]=((((-1.0)*x14903*x14919))+(((-1.0)*r12*x14918))+(((-1.0)*x14916))+((x14899*x14901)));
evalcond[3]=(((r21*x14910))+x14912+x14915+((r21*x14900*x14908))+((r20*x14911))+((r22*x14922))+(((-1.0)*r20*x14914*x14918)));
evalcond[4]=(((r21*x14914))+x14904+(((-1.0)*x14907))+(((-1.0)*r22*sj3*x14919))+((r20*x14908))+((r20*x14900*x14910))+(((-1.0)*sj3*x14909*x14918)));
evalcond[5]=(((cj3*x14905))+((r00*x14908))+((x14906*x14921))+(((-1.0)*r02*sj3*x14919))+(((-1.0)*r01*x14911*x14918))+((cj0*x14915))+((cj0*x14912)));
evalcond[6]=(((cj0*x14907))+((r00*x14911))+((r01*x14900*x14908))+((sj3*x14905))+(((-1.0)*x14904*x14916))+(((-1.0)*cj3*x14906*x14918))+((r02*x14922)));
evalcond[7]=((((-1.0)*r12*sj3*x14919))+((x14903*x14921))+(((-1.0)*sj3*x14901*x14918))+((r11*x14914))+((sj1*x14902))+((sj0*x14915))+((r10*x14908)));
evalcond[8]=(((r10*x14911))+(((-1.0)*sj0*x14904))+((cj1*x14902))+((r11*x14910))+(((-1.0)*cj3*x14903*x14918))+((r12*x14922))+((x14901*x14920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14923=cj5*cj5;
IkReal x14924=r21*r21;
IkReal x14925=r20*r20;
IkReal x14926=(r20*r21);
IkReal x14927=((1.0)*cj3);
IkReal x14928=((1.0)*cj5);
IkReal x14929=(cj1*sj2);
IkReal x14930=(cj5*sj5);
IkReal x14931=(sj3*sj5);
IkReal x14932=(cj2*sj1);
IkReal x14933=(r21*sj5);
CheckValue<IkReal> x14934=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14927*(r22*r22)))+(((2.0)*cj3*x14926*x14930))+(((-1.0)*x14924*x14927))+(((-1.0)*x14923*x14925*x14927))+((cj3*x14923*x14924)))),-1);
if(!x14934.valid){
continue;
}
CheckValue<IkReal> x14935 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r22*x14932))+((r22*x14929))+((r20*r22*x14931)))),IkReal((((x14932*x14933))+((sj3*x14924*x14930))+(((-1.0)*x14925*x14928*x14931))+((x14929*x14933))+(((-1.0)*r20*x14928*x14929))+(((-1.0)*r20*x14928*x14932))+((sj3*x14926))+(((-2.0)*sj3*x14923*x14926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14934.value)))+(x14935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14936=IKsin(j4);
IkReal x14937=IKcos(j4);
IkReal x14938=(cj3*r21);
IkReal x14939=(r21*sj5);
IkReal x14940=(r20*sj5);
IkReal x14941=(cj5*r20);
IkReal x14942=((1.0)*x14937);
IkReal x14943=((1.0)*x14936);
evalcond[0]=(((x14936*x14939))+(((-1.0)*x14941*x14943))+(((-1.0)*r22*x14942)));
evalcond[1]=((((-1.0)*cj3*x14941*x14942))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x14936))+((sj3*x14940))+((sj5*x14937*x14938)));
evalcond[2]=(((cj5*x14938))+(((-1.0)*sj3*x14939*x14942))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x14937*x14941))+(((-1.0)*r22*sj3*x14943))+((cj3*x14940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14944=(cj5*sj4);
IkReal x14945=(sj4*sj5);
if( IKabs((((r00*x14944))+(((-1.0)*r01*x14945))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x14944))+((r11*x14945))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x14944))+(((-1.0)*r01*x14945))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x14944))+((r11*x14945))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x14944))+(((-1.0)*r01*x14945))+((cj4*r02))), ((((-1.0)*r10*x14944))+((r11*x14945))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14946=IKsin(j0);
IkReal x14947=IKcos(j0);
IkReal x14948=(cj5*r01);
IkReal x14949=((1.0)*sj3);
IkReal x14950=(r12*sj4);
IkReal x14951=((1.0)*cj3);
IkReal x14952=(r11*sj5);
IkReal x14953=(cj3*cj4);
IkReal x14954=(cj1*cj2);
IkReal x14955=(r02*sj4);
IkReal x14956=(r01*sj5);
IkReal x14957=(r10*sj5);
IkReal x14958=(cj5*r11);
IkReal x14959=(r00*sj5);
IkReal x14960=((0.5723)*sj2);
IkReal x14961=((1.0)*sj2);
IkReal x14962=((1.0)*cj4);
IkReal x14963=(cj4*cj5*r00);
IkReal x14964=(cj4*cj5*r10);
IkReal x14965=(cj1*x14946);
IkReal x14966=(sj1*x14947);
IkReal x14967=((1.0)*cj5*sj4);
IkReal x14968=(sj1*x14946);
IkReal x14969=(cj1*x14947);
evalcond[0]=((((-1.0)*r02*x14962))+((sj4*x14956))+x14946+(((-1.0)*r00*x14967)));
evalcond[1]=(((sj4*x14952))+(((-1.0)*r10*x14967))+(((-1.0)*r12*x14962))+(((-1.0)*x14947)));
evalcond[2]=((((-0.1157)*x14948))+(((0.163941)*x14946))+(((-1.0)*px))+(((-0.612)*x14969))+((x14960*x14966))+(((-0.1157)*x14959))+(((-0.5723)*x14947*x14954)));
evalcond[3]=((((-0.163941)*x14947))+(((-1.0)*py))+(((-0.612)*x14965))+(((-0.5723)*x14946*x14954))+((x14960*x14968))+(((-0.1157)*x14958))+(((-0.1157)*x14957)));
evalcond[4]=(((cj2*x14966))+((sj3*x14963))+((sj2*x14969))+(((-1.0)*cj4*x14949*x14956))+((cj3*x14948))+(((-1.0)*x14949*x14955))+((cj3*x14959)));
evalcond[5]=((((-1.0)*x14951*x14963))+((x14953*x14956))+((x14947*x14954))+(((-1.0)*x14961*x14966))+((sj3*x14948))+((sj3*x14959))+((cj3*x14955)));
evalcond[6]=(((cj2*x14968))+((sj3*x14964))+((sj2*x14965))+(((-1.0)*cj4*x14949*x14952))+(((-1.0)*x14949*x14950))+((cj3*x14957))+((cj3*x14958)));
evalcond[7]=((((-1.0)*x14951*x14964))+((x14952*x14953))+(((-1.0)*x14961*x14968))+((sj3*x14957))+((sj3*x14958))+((x14946*x14954))+((cj3*x14950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14970=cj5*cj5;
IkReal x14971=r21*r21;
IkReal x14972=r20*r20;
IkReal x14973=(r20*r21);
IkReal x14974=(sj1*sj2);
IkReal x14975=(r21*sj5);
IkReal x14976=(cj1*cj2);
IkReal x14977=(cj5*r20);
IkReal x14978=(cj5*sj5);
IkReal x14979=(cj3*r22);
IkReal x14980=(sj3*x14971);
CheckValue<IkReal> x14981=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x14970*x14980))+((sj3*x14970*x14972))+x14980+(((-2.0)*sj3*x14973*x14978)))),-1);
if(!x14981.valid){
continue;
}
CheckValue<IkReal> x14982 = IKatan2WithCheck(IkReal((((cj5*r21*x14979))+((r22*x14974))+(((-1.0)*r22*x14976))+((r20*sj5*x14979)))),IkReal((((x14974*x14975))+(((-1.0)*cj3*x14972*x14978))+((cj3*x14973))+(((-1.0)*x14975*x14976))+((cj3*x14971*x14978))+(((-1.0)*x14974*x14977))+(((-2.0)*cj3*x14970*x14973))+((x14976*x14977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14981.value)))+(x14982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14983=IKsin(j4);
IkReal x14984=IKcos(j4);
IkReal x14985=(cj3*r21);
IkReal x14986=(r21*sj5);
IkReal x14987=(r20*sj5);
IkReal x14988=(cj5*r20);
IkReal x14989=((1.0)*x14984);
IkReal x14990=((1.0)*x14983);
evalcond[0]=((((-1.0)*x14988*x14990))+((x14983*x14986))+(((-1.0)*r22*x14989)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x14984*x14985))+((cj3*r22*x14983))+((sj3*x14987))+(((-1.0)*cj3*x14988*x14989)));
evalcond[2]=((((-1.0)*r22*sj3*x14990))+(((-1.0)*sj3*x14986*x14989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x14987))+((sj3*x14984*x14988))+((cj5*x14985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14991=(cj5*sj4);
IkReal x14992=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x14992))+((r00*x14991))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x14992))+(((-1.0)*r10*x14991))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14992))+((r00*x14991))+((cj4*r02))))+IKsqr((((r11*x14992))+(((-1.0)*r10*x14991))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x14992))+((r00*x14991))+((cj4*r02))), (((r11*x14992))+(((-1.0)*r10*x14991))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14993=IKsin(j0);
IkReal x14994=IKcos(j0);
IkReal x14995=(cj5*r01);
IkReal x14996=((1.0)*sj3);
IkReal x14997=(r12*sj4);
IkReal x14998=((1.0)*cj3);
IkReal x14999=(r11*sj5);
IkReal x15000=(cj3*cj4);
IkReal x15001=(cj1*cj2);
IkReal x15002=(r02*sj4);
IkReal x15003=(r01*sj5);
IkReal x15004=(r10*sj5);
IkReal x15005=(cj5*r11);
IkReal x15006=(r00*sj5);
IkReal x15007=((0.5723)*sj2);
IkReal x15008=((1.0)*sj2);
IkReal x15009=((1.0)*cj4);
IkReal x15010=(cj4*cj5*r00);
IkReal x15011=(cj4*cj5*r10);
IkReal x15012=(cj1*x14993);
IkReal x15013=(sj1*x14994);
IkReal x15014=((1.0)*cj5*sj4);
IkReal x15015=(sj1*x14993);
IkReal x15016=(cj1*x14994);
evalcond[0]=(x14993+(((-1.0)*r02*x15009))+((sj4*x15003))+(((-1.0)*r00*x15014)));
evalcond[1]=((((-1.0)*r10*x15014))+((sj4*x14999))+(((-1.0)*r12*x15009))+(((-1.0)*x14994)));
evalcond[2]=((((-0.5723)*x14994*x15001))+(((-1.0)*px))+(((-0.1157)*x14995))+((x15007*x15013))+(((0.163941)*x14993))+(((-0.612)*x15016))+(((-0.1157)*x15006)));
evalcond[3]=((((-0.163941)*x14994))+(((-0.5723)*x14993*x15001))+(((-1.0)*py))+((x15007*x15015))+(((-0.612)*x15012))+(((-0.1157)*x15005))+(((-0.1157)*x15004)));
evalcond[4]=((((-1.0)*x14996*x15002))+(((-1.0)*cj4*x14996*x15003))+((cj2*x15013))+((cj3*x14995))+((sj3*x15010))+((sj2*x15016))+((cj3*x15006)));
evalcond[5]=(((sj3*x14995))+((sj3*x15006))+((x14994*x15001))+((cj3*x15002))+(((-1.0)*x14998*x15010))+(((-1.0)*x15008*x15013))+((x15000*x15003)));
evalcond[6]=((((-1.0)*x14996*x14997))+((cj2*x15015))+(((-1.0)*cj4*x14996*x14999))+((sj3*x15011))+((sj2*x15012))+((cj3*x15004))+((cj3*x15005)));
evalcond[7]=(((sj3*x15004))+((sj3*x15005))+((cj3*x14997))+((x14999*x15000))+(((-1.0)*x14998*x15011))+(((-1.0)*x15008*x15015))+((x14993*x15001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "55896249dfca2feaab284770d8020aee"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
