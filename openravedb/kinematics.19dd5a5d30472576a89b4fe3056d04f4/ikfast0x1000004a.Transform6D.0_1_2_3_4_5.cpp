/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-02-12 08:21:25.531380
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.39225)*x0);
x13=((0.09465)*x0);
x14=((1.0)*x6);
x15=((1.0)*x10);
x16=((0.09465)*x10);
x17=((0.0823)*x6);
x18=((1.0)*x0);
x19=((0.39225)*x4);
x20=((0.425)*x1);
x21=((0.0823)*x5);
x22=((1.0)*x9);
x23=((1.0)*x5);
x24=(x1*x2);
x25=(x10*x9);
x26=(x1*x4);
x27=(x2*x3);
x28=(x3*x4);
x29=(x18*x28);
x30=(x15*x28);
x31=(x26+x27);
x32=((((-1.0)*x28))+(((1.0)*x24)));
x33=(x31*x5);
x34=(x32*x6);
x35=(((x0*x24))+(((-1.0)*x29)));
x36=((((-1.0)*x30))+((x10*x24)));
x37=(x18*(((((-1.0)*x26))+(((-1.0)*x27)))));
x38=(x15*(((((-1.0)*x26))+(((-1.0)*x27)))));
x39=(x35*x5);
x40=(x36*x5);
x41=(x37*x6);
x42=(((x32*x5))+((x6*(((((-1.0)*x26))+(((-1.0)*x27)))))));
x43=(x39+x41);
x44=(x40+((x38*x6)));
x45=(((x37*x5))+((x6*(((((-1.0)*x18*x24))+x29)))));
x46=(((x6*(((((-1.0)*x15*x24))+x30))))+((x38*x5)));
x47=(x43*x9);
eerot[0]=(((x7*((x47+((x10*x11))))))+((x45*x8)));
eerot[1]=(((x8*(((((-1.0)*x11*x15))+(((-1.0)*x22*x43))))))+((x45*x7)));
eerot[2]=(((x11*(((((-1.0)*x14*x37))+(((-1.0)*x23*x35))))))+x25);
eetrans[0]=(((x5*((((x13*x27))+((x13*x26))))))+(((0.10915)*x10))+((x6*(((((-1.0)*x13*x28))+((x13*x24))))))+(((-1.0)*x0*x20))+(((-1.0)*x12*x24))+((x12*x28))+(((0.0823)*x25))+((x11*(((((-1.0)*x17*x37))+(((-1.0)*x21*x35)))))));
eerot[3]=(((x46*x8))+((x7*(((((-1.0)*x0*x11))+((x44*x9)))))));
eerot[4]=(((x46*x7))+((x8*(((((-1.0)*x22*x44))+((x11*x18)))))));
eerot[5]=((((-1.0)*x18*x9))+((x11*(((((-1.0)*x14*x38))+(((-1.0)*x23*x36)))))));
eetrans[1]=((((-0.0823)*x0*x9))+(((-0.39225)*x10*x24))+((x5*((((x16*x26))+((x16*x27))))))+(((-0.10915)*x0))+(((-1.0)*x10*x20))+((x6*(((((-1.0)*x16*x28))+((x16*x24))))))+((x10*x19*x3))+((x11*(((((-1.0)*x17*x38))+(((-1.0)*x21*x36)))))));
eerot[6]=(((x7*x9*((x33+x34))))+((x42*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x34))+(((-1.0)*x33))))))+((x42*x7)));
eerot[8]=(x11*(((((-1.0)*x14*x32))+(((-1.0)*x23*x31)))));
eetrans[2]=((0.089159)+(((-1.0)*x1*x19))+((x6*(((((0.09465)*x26))+(((0.09465)*x27))))))+(((-0.425)*x3))+((x11*(((((-1.0)*x17*x32))+(((-1.0)*x21*x31))))))+((x5*(((((-0.09465)*x24))+(((0.09465)*x28))))))+(((-0.39225)*x27)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.0823)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0823)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+pz+(((-0.0823)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x51=((0.1893)*npx);
IkReal x52=((0.1893)*npy);
IkReal x53=((0.09465)*r22);
IkReal x54=((0.09465)*r21);
IkReal x55=((-0.09465)*r20);
IkReal x56=((-1.0)*r20);
IkReal x57=((-1.0)*rxp0_2);
IkReal x58=((-0.09465)*r21);
IkReal x59=((-1.0)*r21);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-1.0)*npx);
IkReal x62=((-1.0)*r22);
IkReal x63=((-1.0)*npz);
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x51;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x56;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x57;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x51;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x56;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x57;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x58;
matrixinvcoeffs[33]=x52;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x59;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x60;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x58;
matrixinvcoeffs[51]=x52;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x59;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x60;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x62;
matrixinvcoeffs[76]=x53;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x63;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x53;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x60;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x58;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x60;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x54;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x56;
matrixinvcoeffs[133]=x61;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x56;
matrixinvcoeffs[151]=x61;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x53;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x59;
matrixinvcoeffs[204]=x54;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x60;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x54;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x61;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x56;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x57;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x64=pz*pz;
IkReal x65=pp*pp;
IkReal x66=((0.1893)*pz);
IkReal x67=((1.7)*pz);
IkReal x68=(gclwh15_9*npx);
IkReal x69=(gclwh6_11*r21);
IkReal x70=(pp*r22);
IkReal x71=((0.00702803935125)*r21);
IkReal x72=(gclwh5_9*npz);
IkReal x73=(gclwh8_11*r20);
IkReal x74=(npy*pz);
IkReal x75=((3.60823078949063e-5)*r22);
IkReal x76=(gclwh14_3*rxp0_2);
IkReal x77=((0.000977833645875)*r20);
IkReal x78=(npz*pz);
IkReal x79=((0.000977833645875)*r21);
IkReal x80=(gclwh10_12*r22);
IkReal x81=(gclwh10_2*rxp2_2);
IkReal x82=((0.00076243651125)*rxp1_2);
IkReal x83=((0.00600991575645741)*r20);
IkReal x84=((0.154705425)*rxp1_2);
IkReal x85=((0.017917245)*r21);
IkReal x86=(gclwh6_11*rxp1_2);
IkReal x87=((0.3786)*rxp1_2);
IkReal x88=(gclwh7_0*rxp1_2);
IkReal x89=((0.7572)*rxp1_2);
IkReal x90=((0.154705425)*rxp2_2);
IkReal x91=((2.0)*gclwh11_10);
IkReal x92=(gclwh12_8*r21);
IkReal x93=((0.81725)*pp);
IkReal x94=(pp*pz);
IkReal x95=(gclwh14_2*r20);
IkReal x96=(pp*r21);
IkReal x97=((2.0)*gclwh4_11);
IkReal x98=(gclwh8_12*r20);
IkReal x99=(npx*pz);
IkReal x100=(gclwh14_8*rxp0_2);
IkReal x101=((0.1893)*rxp2_2);
IkReal x102=(gclwh5_9*rxp2_2);
IkReal x103=((0.020662095)*rxp1_2);
IkReal x104=((0.007321434238125)*r21);
IkReal x105=((1.6345)*pz);
IkReal x106=((0.0089586225)*pz);
IkReal x107=(gclwh13_0*r21);
IkReal x108=(gclwh5_9*r22);
IkReal x109=(gclwh11_10*r22);
IkReal x110=(gclwh11_13*r22);
IkReal x111=((1.0)*r21);
IkReal x112=((0.3786)*rxp0_2);
IkReal x113=(gclwh14_14*rxp0_2);
IkReal x114=(pp*r20);
IkReal x115=((0.00195566729175)*r22);
IkReal x116=(gclwh15_10*rxp0_2);
IkReal x117=(gclwh14_8*r20);
IkReal x118=(gclwh12_8*rxp1_2);
IkReal x119=((2.0)*gclwh9_10);
IkReal x120=((2.0)*gclwh15_10);
IkReal x121=(gclwh5_15*rxp2_2);
IkReal x122=((2.0)*gclwh13_10);
IkReal x123=((0.00702803935125)*r20);
IkReal x124=(gclwh13_9*r21);
IkReal x125=(gclwh5_0*r22);
IkReal x126=((0.01464286847625)*r20);
IkReal x127=(gclwh15_1*r20);
IkReal x128=((0.000977833645875)*r22);
IkReal x129=((0.0089586225)*r20);
IkReal x130=((2.0)*gclwh10_11);
IkReal x131=(gclwh5_10*r22);
IkReal x132=((2.0)*pp);
IkReal x133=(gclwh15_9*r20);
IkReal x134=(gclwh1_3*r20);
IkReal x135=((0.00195566729175)*r20);
IkReal x136=(gclwh4_3*rxp2_2);
IkReal x137=((0.2183)*gclwh13_15);
IkReal x138=((2.0)*gclwh7_10);
IkReal x139=(gclwh15_0*r20);
IkReal x140=(gclwh9_0*r20);
IkReal x141=(gclwh15_15*rxp0_2);
IkReal x142=(gclwh2_1*r21);
IkReal x143=((4.0)*gclwh11_10);
IkReal x144=((0.30941085)*rxp0_2);
IkReal x145=(gclwh9_0*rxp0_2);
IkReal x146=(gclwh5_10*rxp2_2);
IkReal x147=((0.2183)*gclwh12_14);
IkReal x148=((0.2183)*gclwh14_14);
IkReal x149=(gclwh4_2*rxp2_2);
IkReal x150=((0.03275)*pp);
IkReal x151=((0.006199575)*rxp1_2);
IkReal x152=(gclwh12_2*rxp1_2);
IkReal x153=(gclwh5_0*rxp2_2);
IkReal x154=((3.60823078949063e-5)*r21);
IkReal x155=(gclwh14_11*rxp0_2);
IkReal x156=((0.020662095)*rxp0_2);
IkReal x157=(gclwh14_8*npx);
IkReal x158=((4.0)*gclwh9_10);
IkReal x159=((0.00195566729175)*r21);
IkReal x160=(gclwh8_12*rxp0_2);
IkReal x161=((0.01464286847625)*r21);
IkReal x162=((0.3786)*rxp2_2);
IkReal x163=((0.01464286847625)*r22);
IkReal x164=(gclwh7_13*r21);
IkReal x165=((4.0)*gclwh7_10);
IkReal x166=(gclwh13_0*rxp1_2);
IkReal x167=((0.1893)*rxp1_2);
IkReal x168=(gclwh6_2*r21);
IkReal x169=(gclwh5_1*rxp2_2);
IkReal x170=(gclwh8_2*rxp0_2);
IkReal x171=(gclwh9_10*r20);
IkReal x172=((4.0)*pp);
IkReal x173=(gclwh15_1*rxp0_2);
IkReal x174=(gclwh9_13*r20);
IkReal x175=((0.0089586225)*r21);
IkReal x176=(gclwh0_0*r20);
IkReal x177=(gclwh10_11*r22);
IkReal x178=((2.0)*gclwh12_11);
IkReal x179=((0.0655)*pz);
IkReal x180=((0.006199575)*rxp2_2);
IkReal x181=(gclwh12_14*rxp1_2);
IkReal x182=(gclwh15_0*rxp0_2);
IkReal x183=((2.0)*npx);
IkReal x184=(gclwh9_13*rxp0_2);
IkReal x185=((1.0)*pp);
IkReal x186=((4.0)*gclwh10_11);
IkReal x187=(gclwh15_9*rxp0_2);
IkReal x188=((3.60823078949063e-5)*r20);
IkReal x189=((0.00702803935125)*r22);
IkReal x190=(gclwh8_2*r20);
IkReal x191=((0.2183)*gclwh5_15);
IkReal x192=(gclwh10_2*r22);
IkReal x193=(gclwh5_1*r22);
IkReal x194=(gclwh13_9*rxp1_2);
IkReal x195=((2.0)*gclwh5_10);
IkReal x196=((0.020662095)*rxp2_2);
IkReal x197=(gclwh4_8*r22);
IkReal x198=((0.017917245)*r20);
IkReal x199=(gclwh7_0*r21);
IkReal x200=((0.00600991575645741)*r21);
IkReal x201=(gclwh11_0*r22);
IkReal x202=(gclwh6_12*r21);
IkReal x203=((0.2183)*gclwh15_15);
IkReal x204=(gclwh11_0*rxp2_2);
IkReal x205=((0.2183)*gclwh4_14);
IkReal x206=(gclwh4_14*rxp2_2);
IkReal x207=(gclwh6_2*rxp1_2);
IkReal x208=((0.1893)*rxp0_2);
IkReal x209=(gclwh4_8*rxp2_2);
IkReal x210=((0.12699240901125)*rxp1_2);
IkReal x211=(gclwh14_2*rxp0_2);
IkReal x212=(gclwh4_3*r22);
IkReal x213=((0.1893)*pp);
IkReal x214=(gclwh13_15*rxp1_2);
IkReal x215=(gclwh1_2*r20);
IkReal x216=((2.0)*gclwh14_11);
IkReal x217=(gclwh4_11*r22);
IkReal x218=((0.020662095)*x113);
IkReal x219=(gclwh6_5*x79);
IkReal x220=(gclwh8_5*x77);
IkReal x221=(gclwh12_14*x103);
IkReal x222=(gclwh10_5*x128);
IkReal x223=(gclwh4_14*x196);
IkReal x224=((0.0089586225)*x69);
IkReal x225=(gclwh12_11*x167);
IkReal x226=((0.017917245)*x118);
IkReal x227=((0.017917245)*x209);
IkReal x228=(gclwh4_11*x101);
IkReal x229=((0.0089586225)*x73);
IkReal x230=((0.1893)*x155);
IkReal x231=((0.0089586225)*x177);
IkReal x232=((0.017917245)*x100);
IkReal x233=((0.017917245)*x102);
IkReal x234=((0.0089586225)*x109);
IkReal x235=((0.1893)*x116);
IkReal x236=((0.017917245)*x194);
IkReal x237=(gclwh9_10*x129);
IkReal x238=((0.017917245)*x187);
IkReal x239=(gclwh13_10*x167);
IkReal x240=(gclwh7_10*x175);
IkReal x241=(gclwh5_10*x101);
IkReal x242=((0.020662095)*x141);
IkReal x243=(gclwh7_7*x79);
IkReal x244=(gclwh9_7*x77);
IkReal x245=(gclwh13_15*x103);
IkReal x246=((0.020662095)*x121);
IkReal x247=(gclwh11_7*x128);
IkReal x248=(gclwh10_5*x196);
IkReal x249=(gclwh8_5*x156);
IkReal x250=(gclwh14_14*x77);
IkReal x251=(gclwh6_5*x103);
IkReal x252=(gclwh4_14*x128);
IkReal x253=(gclwh12_14*x79);
IkReal x254=(gclwh8_11*x208);
IkReal x255=((0.000847933619625)*x92);
IkReal x256=(gclwh12_11*x175);
IkReal x257=(gclwh10_11*x101);
IkReal x258=((0.0089586225)*x217);
IkReal x259=((0.000847933619625)*x197);
IkReal x260=((0.1893)*x86);
IkReal x261=(gclwh14_11*x129);
IkReal x262=((0.000847933619625)*x117);
IkReal x263=(gclwh9_10*x208);
IkReal x264=(gclwh13_10*x175);
IkReal x265=(gclwh11_10*x101);
IkReal x266=((0.000847933619625)*x133);
IkReal x267=((0.0089586225)*x131);
IkReal x268=((0.000847933619625)*x108);
IkReal x269=(gclwh7_10*x167);
IkReal x270=((0.000847933619625)*x124);
IkReal x271=(gclwh15_10*x129);
IkReal x272=(gclwh5_15*x128);
IkReal x273=(gclwh7_7*x103);
IkReal x274=(gclwh13_15*x79);
IkReal x275=(gclwh15_15*x77);
IkReal x276=(gclwh9_7*x156);
IkReal x277=(gclwh11_7*x196);
IkReal x278=((0.017917245)*x177);
IkReal x279=(gclwh14_11*x112);
IkReal x280=((0.017917245)*x73);
IkReal x281=((0.04132419)*x113);
IkReal x282=((0.04132419)*x181);
IkReal x283=((0.04132419)*x206);
IkReal x284=(gclwh4_11*x162);
IkReal x285=((0.017917245)*x69);
IkReal x286=(gclwh12_11*x87);
IkReal x287=((0.04132419)*x121);
IkReal x288=((0.04132419)*x214);
IkReal x289=((0.04132419)*x141);
IkReal x290=((0.017917245)*x171);
IkReal x291=(gclwh15_10*x112);
IkReal x292=((0.017917245)*x109);
IkReal x293=(gclwh7_10*x85);
IkReal x294=((0.3786)*x146);
IkReal x295=(gclwh13_10*x87);
IkReal x296=((0.3786)*x86);
IkReal x297=(gclwh14_11*x198);
IkReal x298=(gclwh14_14*x135);
IkReal x299=(gclwh4_14*x115);
IkReal x300=(gclwh12_14*x159);
IkReal x301=(gclwh14_8*x114);
IkReal x302=((2.0)*x64);
IkReal x303=((1.0)*x65);
IkReal x304=(r21*x65);
IkReal x305=((0.2183)*gclwh10_5*x78);
IkReal x306=((0.2183)*gclwh8_5*x99);
IkReal x307=((0.10915)*gclwh6_5*x96);
IkReal x308=((0.2183)*gclwh6_5*x74);
IkReal x309=((0.10915)*gclwh8_5*x114);
IkReal x310=((0.10915)*gclwh10_5*x70);
IkReal x311=(gclwh12_3*pp*x167);
IkReal x312=(x130*x78);
IkReal x313=(x106*x190);
IkReal x314=((2.0)*gclwh8_11*x99);
IkReal x315=(gclwh10_2*pz*x70);
IkReal x316=(x211*x66);
IkReal x317=(x190*x94);
IkReal x318=(gclwh4_3*pp*x101);
IkReal x319=(x106*x192);
IkReal x320=(x152*x66);
IkReal x321=((2.0)*gclwh6_11*x74);
IkReal x322=(x149*x66);
IkReal x323=(x213*x76);
IkReal x324=(x106*x168);
IkReal x325=(gclwh13_1*pp*x167);
IkReal x326=(x106*x201);
IkReal x327=(x106*x140);
IkReal x328=(gclwh5_1*pp*x101);
IkReal x329=(x182*x66);
IkReal x330=(gclwh11_0*pz*x70);
IkReal x331=(x138*x74);
IkReal x332=(x140*x94);
IkReal x333=(x78*x91);
IkReal x334=(x173*x213);
IkReal x335=(x119*x99);
IkReal x336=(x106*x199);
IkReal x337=(x166*x66);
IkReal x338=(x153*x66);
IkReal x339=((0.10915)*gclwh7_7*x96);
IkReal x340=((0.2183)*gclwh9_7*x99);
IkReal x341=((0.2183)*gclwh11_7*x78);
IkReal x342=((0.10915)*gclwh9_7*x114);
IkReal x343=((0.2183)*gclwh7_7*x74);
IkReal x344=((0.10915)*gclwh11_7*x70);
IkReal x345=((0.10915)*gclwh14_14*x114);
IkReal x346=(x205*x78);
IkReal x347=(x147*x74);
IkReal x348=((0.10915)*gclwh12_14*x96);
IkReal x349=(x148*x99);
IkReal x350=((0.10915)*gclwh4_14*x70);
IkReal x351=((0.09465)*gclwh4_8*x70);
IkReal x352=(x94*x95);
IkReal x353=(gclwh12_3*x304);
IkReal x354=(x207*x66);
IkReal x355=(gclwh3_3*x304);
IkReal x356=(x134*x65);
IkReal x357=(gclwh3_2*r21*x106);
IkReal x358=(x216*x99);
IkReal x359=(x157*x66);
IkReal x360=(x106*x95);
IkReal x361=((0.09465)*pp*x92);
IkReal x362=(x212*x65);
IkReal x363=(x106*x215);
IkReal x364=(x170*x66);
IkReal x365=(x78*x97);
IkReal x366=(gclwh4_2*r22*x106);
IkReal x367=(gclwh4_8*npz*x66);
IkReal x368=(gclwh12_2*r21*x106);
IkReal x369=(x66*x81);
IkReal x370=((0.09465)*x301);
IkReal x371=(x178*x74);
IkReal x372=(gclwh12_8*npy*x66);
IkReal x373=(x127*x65);
IkReal x374=(x66*x72);
IkReal x375=(gclwh5_0*pz*x70);
IkReal x376=(gclwh13_9*npy*x66);
IkReal x377=(x106*x125);
IkReal x378=(x107*x94);
IkReal x379=((0.09465)*gclwh15_9*x114);
IkReal x380=(x120*x99);
IkReal x381=(x106*x107);
IkReal x382=(x142*x65);
IkReal x383=(gclwh2_0*r21*x106);
IkReal x384=(x145*x66);
IkReal x385=(x204*x66);
IkReal x386=(gclwh0_1*r20*x65);
IkReal x387=(x106*x176);
IkReal x388=((0.09465)*gclwh5_9*x70);
IkReal x389=(x66*x88);
IkReal x390=((0.09465)*gclwh13_9*x96);
IkReal x391=(x106*x139);
IkReal x392=(x66*x68);
IkReal x393=(x195*x78);
IkReal x394=(x122*x74);
IkReal x395=((0.10915)*gclwh13_15*x96);
IkReal x396=((0.10915)*gclwh5_15*x70);
IkReal x397=(x203*x99);
IkReal x398=((0.10915)*gclwh15_15*x114);
IkReal x399=(x191*x78);
IkReal x400=(x137*x74);
IkReal x401=(x132*x73);
IkReal x402=(x130*x70);
IkReal x403=((4.0)*gclwh6_11*x74);
IkReal x404=((4.0)*gclwh8_11*x99);
IkReal x405=(x132*x69);
IkReal x406=(x186*x78);
IkReal x407=(x70*x91);
IkReal x408=(x165*x74);
IkReal x409=(x114*x119);
IkReal x410=(x138*x96);
IkReal x411=(x158*x99);
IkReal x412=(x143*x78);
IkReal x413=(x114*x216);
IkReal x414=((4.0)*gclwh12_11*x74);
IkReal x415=((4.0)*gclwh4_11*x78);
IkReal x416=(x114*x148);
IkReal x417=((0.4366)*gclwh12_14*x74);
IkReal x418=((0.4366)*gclwh4_14*x78);
IkReal x419=(x147*x96);
IkReal x420=((0.4366)*gclwh14_14*x99);
IkReal x421=(x205*x70);
IkReal x422=(gclwh6_2*npy*x302);
IkReal x423=(gclwh6_2*x111*x94);
IkReal x424=(gclwh10_2*npz*x302);
IkReal x425=(gclwh8_2*x183*x64);
IkReal x426=(gclwh7_0*npy*x302);
IkReal x427=(gclwh9_0*x183*x64);
IkReal x428=(gclwh11_0*npz*x302);
IkReal x429=(gclwh7_0*x111*x94);
IkReal x430=(gclwh12_2*npy*x302);
IkReal x431=(gclwh3_2*npy*x302);
IkReal x432=(gclwh1_2*x183*x64);
IkReal x433=(gclwh14_3*x183*x94);
IkReal x434=(gclwh4_2*npz*x302);
IkReal x435=(gclwh4_3*x132*x78);
IkReal x436=(gclwh12_2*x111*x94);
IkReal x437=((1.0)*x215*x94);
IkReal x438=(gclwh3_3*x132*x74);
IkReal x439=((1.0)*gclwh4_2*pz*x70);
IkReal x440=(gclwh1_3*x183*x94);
IkReal x441=(gclwh3_2*x111*x94);
IkReal x442=(gclwh12_3*x132*x74);
IkReal x443=(gclwh14_2*x183*x64);
IkReal x444=(gclwh14_3*r20*x303);
IkReal x445=(gclwh0_0*x183*x64);
IkReal x446=(gclwh2_0*npy*x302);
IkReal x447=(gclwh5_1*x132*x78);
IkReal x448=(gclwh13_1*x132*x74);
IkReal x449=(gclwh15_0*x183*x64);
IkReal x450=(gclwh2_1*x132*x74);
IkReal x451=(gclwh0_1*x183*x94);
IkReal x452=(gclwh5_0*npz*x302);
IkReal x453=(gclwh13_0*npy*x302);
IkReal x454=((1.0)*x176*x94);
IkReal x455=((1.0)*x139*x94);
IkReal x456=(gclwh2_0*x111*x94);
IkReal x457=(gclwh13_1*x111*x65);
IkReal x458=(x193*x303);
IkReal x459=(gclwh15_1*x183*x94);
IkReal x460=(x283+x282);
IkReal x461=(x288+x287);
IkReal x462=(x249+x248);
IkReal x463=(x221+x223);
IkReal x464=(x246+x245);
IkReal x465=(x276+x277);
IkReal x466=(x321+x229+x230+x231);
IkReal x467=(x331+x237+x234+x235);
IkReal x468=(x394+x393+x269+x271);
IkReal x469=(x371+x365+x261+x260);
IkReal x470=(x298+x416+x417+x418);
IkReal x471=(x306+x307+x305+x219);
IkReal x472=(x346+x347+x345+x250);
IkReal x473=(x399+x398+x275+x400);
IkReal x474=(x339+x340+x341+x243);
IkReal x475=(x380+x265+x264+x267+x263);
IkReal x476=(x358+x258+x254+x256+x257);
IkReal x477=(x314+x312+x228+x225+x224);
IkReal x478=(x333+x335+x239+x241+x240);
IkReal x479=(x350+x348+x349+x252+x253);
IkReal x480=(x395+x397+x396+x274+x272);
IkReal x481=(x342+x343+x344+x247+x244);
IkReal x482=(x300+x299+x419+x421+x420);
IkReal x483=(x296+x297+x413+x414+x415);
IkReal x484=(x308+x309+x310+x220+x222);
IkReal x485=(x286+x285+x284+x405+x404+x406);
IkReal x486=(x293+x294+x295+x412+x410+x411);
IkReal x487=(x290+x291+x292+x407+x409+x408);
IkReal x488=(x278+x279+x280+x401+x403+x402);
IkReal x489=(((x178*x96))+((x70*x97))+((gclwh12_11*x85))+(((0.017917245)*x217))+((gclwh10_11*x162))+(((4.0)*gclwh14_11*x99))+((gclwh8_11*x112)));
IkReal x490=(x324+x320+x322+x323+x232+x425+x424+x423);
IkReal x491=(x338+x337+x336+x334+x238+x429+x428+x427);
IkReal x492=(x319+x318+x315+x317+x316+x311+x313+x227+x226+x422);
IkReal x493=(x332+x330+x325+x326+x327+x328+x329+x233+x236+x426);
IkReal x494=(x388+x389+x391+x390+x392+x268+x270+x458+x459+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x495=(x351+x353+x352+x355+x354+x357+x356+x359+x360+x361+x362+x363+x259+x255+x430+x431+x432+x433+x434+x66);
IkReal x496=(x372+x370+x368+x369+x364+x366+x367+x262+x438+x439+x435+x436+x437+x444+x441+x440+x443+x442);
IkReal x497=(x386+x387+x384+x385+x382+x383+x381+x379+x378+x377+x376+x375+x374+x373+x266+x449+x448+x445+x447+x446+x66);
op[0]=((((-0.81725)*gclwh10_12*x70))+(((1.6345)*gclwh10_12*x78))+(((-1.0)*x484))+((gclwh6_12*x104))+(((-0.007321434238125)*x98))+(((-1.6345)*gclwh6_12*x74))+(((-0.007321434238125)*x80))+(((-1.0)*gclwh4_8*x90))+x463+x471+((x202*x93))+(((0.154705425)*x100))+(((-1.0)*x218))+(((1.6345)*gclwh8_12*x99))+(((-1.0)*x93*x98))+(((-1.0)*gclwh12_8*x84)));
op[1]=((((-1.0)*x490))+(((-1.0)*x185*x69))+(((-1.0)*x477))+((gclwh10_11*x70))+(((-0.12699240901125)*x136))+(((-1.0)*gclwh12_3*x210))+x492+x466+((pp*x73))+(((0.12699240901125)*x76)));
op[2]=((-0.17125635)+(((-1.0)*x485))+x488);
op[3]=(((gclwh8_2*x123))+((gclwh10_2*x189))+(((-0.160905)*x100))+(((0.7845)*gclwh8_2*x114))+(((-1.0)*gclwh6_2*x71))+(((-0.7845)*gclwh6_2*x96))+(((0.160905)*x209))+(((-0.14850585)*x149))+(((-0.14850585)*x152))+(((-1.569)*gclwh10_2*x78))+(((-1.0)*x460))+(((0.160905)*x118))+(((0.14850585)*x211))+x281+(((-1.569)*gclwh8_2*x99))+(((0.7845)*gclwh10_2*x70))+(((1.569)*gclwh6_2*x74)));
op[4]=((((-0.0655)*gclwh6_12*x74))+(((-1.0)*x484))+(((0.03275)*gclwh6_12*x96))+(((-1.0)*x463))+(((-0.000293394886875)*x98))+x218+((gclwh4_8*x180))+(((-0.000293394886875)*x80))+x471+(((-0.006199575)*x100))+(((0.0655)*gclwh10_12*x78))+(((0.0655)*gclwh8_12*x99))+(((0.006199575)*x118))+(((-0.03275)*gclwh10_12*x70))+(((0.000293394886875)*x202))+(((-1.0)*x150*x98)));
op[5]=((((-1.0)*gclwh10_11*x70))+(((-1.0)*x490))+((pp*x69))+(((-1.0)*x185*x73))+(((-1.0)*x466))+x492+x477+(((-1.0)*gclwh12_3*x82))+(((-0.00076243651125)*x136))+(((0.00076243651125)*x76)));
op[6]=((((0.12699240901125)*x173))+(((-1.0)*x491))+(((-1.0)*gclwh9_10*x114))+((gclwh7_10*x96))+(((-1.0)*x467))+(((-1.0)*gclwh11_10*x70))+x493+x478+(((-1.0)*gclwh13_1*x210))+(((-0.12699240901125)*x169)));
op[7]=(((gclwh7_13*x104))+(((-0.81725)*gclwh11_13*x70))+(((-1.0)*gclwh13_9*x84))+(((-1.0)*x481))+(((0.154705425)*x187))+((x164*x93))+x464+x474+(((-1.0)*gclwh5_9*x90))+(((1.6345)*gclwh9_13*x99))+(((-0.007321434238125)*x110))+(((-1.0)*x242))+(((-1.0)*x174*x93))+(((-0.007321434238125)*x174))+(((1.6345)*gclwh11_13*x78))+(((-1.6345)*gclwh7_13*x74)));
op[8]=((((-0.160905)*x194))+(((0.160905)*x187))+(((-1.0)*gclwh7_0*x71))+(((-0.160905)*x102))+(((0.14850585)*x182))+(((1.569)*gclwh7_0*x74))+(((-0.14850585)*x153))+(((-0.14850585)*x166))+((gclwh9_0*x123))+x461+(((-1.569)*gclwh11_0*x78))+(((-1.569)*gclwh9_0*x99))+(((-1.0)*x289))+(((-0.7845)*gclwh7_0*x96))+(((0.7845)*gclwh11_0*x70))+((gclwh11_0*x189))+(((0.7845)*gclwh9_0*x114)));
op[9]=((-0.17125635)+(((-1.0)*x486))+x487);
op[10]=((((-1.0)*x491))+((gclwh11_10*x70))+(((-1.0)*gclwh7_10*x96))+(((-1.0)*x478))+x493+x467+(((0.00076243651125)*x173))+((gclwh9_10*x114))+(((-0.00076243651125)*x169))+(((-1.0)*gclwh13_1*x82)));
op[11]=((((0.000293394886875)*x164))+(((-0.03275)*gclwh9_13*x114))+(((0.03275)*gclwh7_13*x96))+(((-0.006199575)*x187))+(((-1.0)*x481))+(((-0.0655)*gclwh7_13*x74))+(((-0.03275)*gclwh11_13*x70))+(((-1.0)*x464))+((gclwh13_9*x151))+(((0.0655)*gclwh11_13*x78))+x242+(((-0.000293394886875)*x110))+x474+(((0.0655)*gclwh9_13*x99))+(((-0.000293394886875)*x174))+(((0.006199575)*x102)));
op[12]=((((1.6345)*gclwh4_8*x78))+(((1.6345)*gclwh12_8*x74))+((x117*x93))+(((-1.6345)*gclwh14_8*x99))+(((0.154705425)*x160))+(((-0.007321434238125)*x92))+(((-1.0)*x472))+(((-0.81725)*gclwh4_8*x70))+((gclwh10_12*x90))+x462+x479+(((-1.0)*x92*x93))+(((0.007321434238125)*x117))+(((-1.0)*x251))+(((-1.0)*gclwh6_12*x84))+(((-0.007321434238125)*x197)));
op[13]=((-0.679811285)+((gclwh3_3*x200))+(((1.341705325)*gclwh12_3*x74))+(((-1.0)*x496))+(((-1.0)*gclwh12_3*x200))+(((1.341705325)*gclwh4_3*x78))+(((-0.66189404)*gclwh12_3*x96))+(((-1.0)*x476))+(((-0.66189404)*gclwh4_3*x70))+(((-0.679811285)*gclwh1_3*x114))+(((-0.679811285)*gclwh3_3*x96))+(((1.341705325)*gclwh3_3*x74))+(((1.341705325)*gclwh1_3*x99))+x495+x469+((gclwh1_3*x83))+((gclwh14_3*x83))+(((-1.341705325)*gclwh14_3*x99))+((gclwh14_11*x114))+(((-1.0)*gclwh12_11*x96))+(((-0.00600991575645741)*x212))+(((-1.0)*gclwh4_11*x70))+(((0.66189404)*gclwh14_3*x114)));
op[14]=((-0.07735732)+(((-1.0)*x489))+x483);
op[15]=((((-0.7845)*gclwh4_2*x70))+(((-1.0)*gclwh4_2*x189))+(((-0.85)*x301))+(((0.85)*gclwh4_8*x70))+(((1.569)*gclwh3_2*x74))+(((0.7845)*pp*x95))+(((-1.0)*x482))+(((-0.14850585)*x81))+((gclwh3_2*x71))+(((-0.7845)*gclwh12_2*x96))+(((-0.007614829125)*x117))+(((1.569)*gclwh12_2*x74))+(((0.00702803935125)*x95))+(((0.85)*pp*x92))+(((-0.14850585)*x170))+(((0.007614829125)*x92))+x470+(((0.007614829125)*x197))+(((-0.7845)*gclwh1_2*x114))+(((1.569)*gclwh4_2*x78))+(((-0.7845)*gclwh3_2*x96))+(((-1.569)*gclwh14_2*x99))+(((-1.0)*gclwh12_2*x71))+(((1.569)*gclwh1_2*x99))+(((-1.0)*gclwh12_8*npy*x67))+((gclwh1_2*x123))+(((-1.0)*gclwh4_8*npz*x67))+(((0.14850585)*x207))+((x157*x67)));
op[16]=((((0.0655)*gclwh14_8*x99))+((x150*x92))+(((-1.0)*gclwh6_12*x151))+(((0.03275)*gclwh4_8*x70))+(((-0.0655)*gclwh12_8*x74))+(((-0.0655)*gclwh4_8*x78))+(((-0.03275)*x301))+(((-1.0)*x479))+(((0.006199575)*x160))+((gclwh10_12*x180))+(((-0.000293394886875)*x117))+(((0.000293394886875)*x92))+x462+x472+(((0.000293394886875)*x197))+(((-1.0)*x251)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x114))+(((-1.0)*gclwh14_11*x114))+(((0.008055325)*gclwh3_3*x74))+(((-1.0)*x496))+(((-1.0)*x469))+(((-0.012986285)*gclwh3_3*x96))+(((0.008055325)*gclwh12_3*x74))+x495+x476+(((0.008055325)*gclwh4_3*x78))+(((-0.008055325)*gclwh14_3*x99))+((gclwh3_3*x154))+(((0.00493096)*gclwh12_3*x96))+(((0.00493096)*gclwh4_3*x70))+(((3.60823078949063e-5)*x134))+(((-1.0)*gclwh4_3*x75))+(((-0.012986285)*gclwh1_3*x114))+((gclwh12_11*x96))+((gclwh14_3*x188))+((gclwh4_11*x70))+(((-1.0)*gclwh12_3*x154))+(((0.008055325)*gclwh1_3*x99)));
op[18]=((0.679811285)+((gclwh13_1*x200))+(((-1.0)*x494))+(((1.341705325)*gclwh0_1*x99))+(((0.00600991575645741)*x193))+(((-0.66189404)*gclwh15_1*x114))+(((0.00600991575645741)*x142))+(((-1.0)*gclwh15_1*x83))+(((-0.679811285)*gclwh0_1*x114))+(((-1.341705325)*gclwh5_1*x78))+(((-1.0)*x475))+(((-1.341705325)*gclwh13_1*x74))+(((-1.0)*gclwh5_10*x70))+(((-1.0)*gclwh13_10*x96))+((gclwh0_1*x83))+((gclwh15_10*x114))+x497+x468+(((0.66189404)*gclwh13_1*x96))+(((1.341705325)*gclwh2_1*x74))+(((-0.679811285)*gclwh2_1*x96))+(((0.66189404)*gclwh5_1*x70))+(((1.341705325)*gclwh15_1*x99)));
op[19]=(((x105*x68))+(((-1.0)*x105*x72))+(((-1.0)*x480))+((x124*x93))+(((-1.0)*x465))+(((-0.154705425)*x184))+x273+(((-1.0)*gclwh11_13*x90))+x473+(((-0.007321434238125)*x133))+(((-1.0)*x133*x93))+(((-1.6345)*gclwh13_9*x74))+(((0.007321434238125)*x108))+((gclwh7_13*x84))+((gclwh13_9*x104))+(((0.81725)*gclwh5_9*x70)));
op[20]=((((-0.7845)*gclwh15_0*x114))+((gclwh15_15*x135))+(((-0.85)*gclwh15_9*x114))+((gclwh0_0*x123))+(((0.007614829125)*x108))+(((-0.007614829125)*x133))+(((-1.0)*x191*x70))+(((-0.14850585)*x88))+(((-0.7845)*gclwh2_0*x96))+(((0.4366)*gclwh13_15*x74))+(((0.007614829125)*x124))+(((-1.569)*gclwh5_0*x78))+(((1.569)*gclwh15_0*x99))+(((0.14850585)*x145))+(((-0.7845)*gclwh0_0*x114))+((gclwh2_0*x71))+(((-1.0)*gclwh15_0*x123))+((gclwh13_0*x71))+(((1.569)*gclwh2_0*x74))+((x67*x68))+((x114*x203))+(((1.569)*gclwh0_0*x99))+(((0.85)*gclwh5_9*x70))+(((-1.0)*gclwh5_15*x115))+(((-1.0)*x137*x96))+(((0.4366)*gclwh5_15*x78))+(((-1.0)*x67*x72))+(((-1.0)*gclwh13_15*x159))+(((0.85)*gclwh13_9*x96))+(((-0.4366)*gclwh15_15*x99))+(((0.7845)*gclwh5_0*x70))+(((0.00702803935125)*x125))+(((0.14850585)*x204))+(((-1.0)*gclwh13_9*npy*x67))+(((0.7845)*gclwh13_0*x96))+(((-1.569)*gclwh13_0*x74)));
op[21]=((-0.07735732)+(((4.0)*gclwh15_10*x99))+((gclwh11_10*x162))+(((-4.0)*gclwh13_10*x74))+((x195*x70))+(((-1.0)*gclwh15_10*x198))+(((0.017917245)*x131))+(((-1.0)*x114*x120))+((gclwh9_10*x112))+((x122*x96))+((gclwh13_10*x85))+(((-4.0)*gclwh5_10*x78))+(((-1.0)*gclwh7_10*x87)));
op[22]=((-0.012986285)+((gclwh5_1*x75))+(((0.008055325)*gclwh2_1*x74))+(((3.60823078949063e-5)*x142))+(((-1.0)*x494))+(((-1.0)*gclwh15_10*x114))+(((-0.00493096)*gclwh5_1*x70))+(((-0.012986285)*gclwh2_1*x96))+(((-0.008055325)*gclwh5_1*x78))+(((0.008055325)*gclwh15_1*x99))+(((-1.0)*x468))+((gclwh5_10*x70))+(((-0.012986285)*gclwh0_1*x114))+x497+x475+((gclwh0_1*x188))+(((0.00493096)*gclwh15_1*x114))+(((-0.00493096)*gclwh13_1*x96))+(((0.008055325)*gclwh0_1*x99))+((gclwh13_10*x96))+(((-3.60823078949063e-5)*x127))+(((-0.008055325)*gclwh13_1*x74))+((gclwh13_1*x154)));
op[23]=((((0.0655)*gclwh13_9*x74))+(((-0.006199575)*x184))+(((0.03275)*gclwh15_9*x114))+(((-1.0)*x179*x68))+(((-0.03275)*gclwh13_9*x96))+(((-0.000293394886875)*x124))+((gclwh7_13*x151))+(((-1.0)*x473))+(((0.000293394886875)*x133))+(((-1.0)*x465))+(((-0.000293394886875)*x108))+x273+x480+(((-0.03275)*gclwh5_9*x70))+(((-1.0)*gclwh11_13*x180))+((x179*x72)));
op[24]=((-0.35681135)+(((-1.0)*x485))+x488);
op[25]=((((-3.269)*gclwh8_2*x99))+((gclwh8_2*x126))+((gclwh10_2*x163))+(((-1.0)*gclwh6_2*x161))+(((-1.0)*x460))+(((3.269)*gclwh6_2*x74))+(((-3.269)*gclwh10_2*x78))+(((-0.30941085)*x152))+x281+((gclwh14_2*x144))+(((-0.30941085)*x149))+(((-1.6345)*gclwh6_2*x96))+(((1.6345)*gclwh8_2*x114))+(((1.6345)*gclwh10_2*x70)));
op[26]=((((1.569)*pp*x98))+(((0.08264838)*x113))+(((1.569)*gclwh10_12*x70))+(((-3.138)*gclwh10_12*x78))+(((-0.0140560787025)*x202))+(((-1.569)*gclwh6_12*x96))+(((0.0140560787025)*x80))+(((-0.08264838)*x181))+(((0.0140560787025)*x98))+(((-0.08264838)*x206))+(((3.138)*gclwh6_12*x74))+(((-3.138)*gclwh8_12*x99)));
op[27]=((((-0.03583449)*x73))+(((-1.0)*x172*x73))+(((0.03583449)*x69))+(((8.0)*gclwh10_11*x78))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x177))+(((8.0)*gclwh8_11*x99))+(((-0.7572)*x155))+(((-1.0)*x186*x70))+((gclwh12_11*x89))+(((-8.0)*gclwh6_11*x74))+((x172*x69)));
op[28]=((-0.01429865)+(((-1.0)*x488))+x485);
op[29]=((((-0.00058678977375)*x168))+(((-0.131)*gclwh8_2*x99))+(((0.00058678977375)*x190))+(((0.00058678977375)*x192))+(((0.0655)*gclwh8_2*x114))+(((0.01239915)*x211))+x460+(((-0.0655)*gclwh6_2*x96))+(((-1.0)*x281))+(((0.131)*gclwh6_2*x74))+(((-0.131)*gclwh10_2*x78))+(((-0.01239915)*x152))+(((0.0655)*gclwh10_2*x70))+(((-0.01239915)*x149)));
op[30]=((((-3.269)*gclwh9_0*x99))+(((-1.6345)*gclwh7_0*x96))+(((1.6345)*gclwh11_0*x70))+(((-0.30941085)*x166))+(((3.269)*gclwh7_0*x74))+(((-1.0)*gclwh7_0*x161))+(((-0.30941085)*x153))+(((1.6345)*gclwh9_0*x114))+((gclwh9_0*x126))+x461+(((-3.269)*gclwh11_0*x78))+((gclwh15_0*x144))+(((-1.0)*x289))+((gclwh11_0*x163)));
op[31]=((-0.35681135)+(((-1.0)*x486))+x487);
op[32]=((((0.03583449)*x171))+(((-1.0)*gclwh13_10*x89))+(((-0.03583449)*gclwh7_10*r21))+(((-1.0)*x165*x96))+((x143*x70))+(((0.03583449)*x109))+(((-8.0)*gclwh11_10*x78))+(((8.0)*gclwh7_10*x74))+(((-0.7572)*x146))+(((0.7572)*x116))+((x114*x158))+(((-8.0)*gclwh9_10*x99)));
op[33]=((((-0.0140560787025)*x164))+(((-3.138)*gclwh11_13*x78))+(((1.569)*gclwh9_13*x114))+(((0.0140560787025)*x110))+(((-0.08264838)*x214))+(((0.08264838)*x141))+(((3.138)*gclwh7_13*x74))+(((1.569)*gclwh11_13*x70))+(((0.0140560787025)*x174))+(((-1.569)*gclwh7_13*x96))+(((-0.08264838)*x121))+(((-3.138)*gclwh9_13*x99)));
op[34]=((((-0.0655)*gclwh7_0*x96))+(((-0.00058678977375)*x199))+(((0.00058678977375)*x140))+(((0.131)*gclwh7_0*x74))+(((-1.0)*x461))+x289+(((-0.131)*gclwh11_0*x78))+(((0.0655)*gclwh9_0*x114))+(((-0.131)*gclwh9_0*x99))+(((0.00058678977375)*x201))+(((0.0655)*gclwh11_0*x70))+(((-0.01239915)*x166))+(((-0.01239915)*x153))+(((0.01239915)*x182)));
op[35]=((-0.01429865)+(((-1.0)*x487))+x486);
op[36]=((1.31196768)+(((-1.0)*x489))+x483);
op[37]=((((-1.6345)*gclwh3_2*x96))+(((-1.0)*gclwh12_2*x161))+(((3.269)*gclwh12_2*x74))+(((0.30941085)*x207))+(((-1.0)*x482))+(((-1.0)*gclwh4_2*x163))+(((-3.269)*gclwh14_2*x99))+(((-1.6345)*gclwh1_2*x114))+(((0.01464286847625)*x95))+(((3.269)*gclwh1_2*x99))+x470+(((-1.6345)*gclwh12_2*x96))+(((-1.6345)*gclwh4_2*x70))+(((3.269)*gclwh3_2*x74))+(((-0.30941085)*x81))+((gclwh1_2*x126))+((gclwh3_2*x161))+(((-1.0)*gclwh8_2*x144))+(((1.6345)*pp*x95))+(((3.269)*gclwh4_2*x78)));
IkReal x498=pz*pz;
IkReal x499=pp*pp;
IkReal x500=((0.1893)*pz);
IkReal x501=((1.7)*pz);
IkReal x502=(gclwh15_9*npx);
IkReal x503=(pp*r21);
IkReal x504=(pp*r22);
IkReal x505=((0.00702803935125)*r21);
IkReal x506=(gclwh5_9*npz);
IkReal x507=(pp*r20);
IkReal x508=(npy*pz);
IkReal x509=((4.0)*gclwh12_11);
IkReal x510=((3.60823078949063e-5)*r22);
IkReal x511=(gclwh14_3*rxp0_2);
IkReal x512=((0.000977833645875)*r20);
IkReal x513=(npz*pz);
IkReal x514=((0.000977833645875)*r21);
IkReal x515=(gclwh10_2*rxp2_2);
IkReal x516=((0.00076243651125)*rxp1_2);
IkReal x517=((0.00600991575645741)*r20);
IkReal x518=((0.154705425)*rxp1_2);
IkReal x519=((0.4366)*gclwh5_15);
IkReal x520=(gclwh6_11*rxp1_2);
IkReal x521=(gclwh7_0*rxp1_2);
IkReal x522=((0.154705425)*rxp2_2);
IkReal x523=((2.0)*gclwh11_10);
IkReal x524=((0.2970117)*rxp1_2);
IkReal x525=((0.017917245)*r21);
IkReal x526=(gclwh14_2*pz);
IkReal x527=(gclwh12_8*r21);
IkReal x528=(gclwh14_2*rxp0_2);
IkReal x529=((2.0)*gclwh4_11);
IkReal x530=((0.007321434238125)*r20);
IkReal x531=(npx*pz);
IkReal x532=((0.4366)*gclwh15_15);
IkReal x533=(gclwh10_11*rxp2_2);
IkReal x534=(gclwh5_9*rxp2_2);
IkReal x535=((0.020662095)*rxp1_2);
IkReal x536=((0.007321434238125)*r21);
IkReal x537=(gclwh0_0*r20);
IkReal x538=((0.0089586225)*r21);
IkReal x539=(gclwh13_0*pz);
IkReal x540=((1.6345)*pz);
IkReal x541=((0.007321434238125)*r22);
IkReal x542=((1.0)*pz);
IkReal x543=(gclwh14_14*rxp0_2);
IkReal x544=(gclwh4_14*r22);
IkReal x545=((0.1893)*rxp0_2);
IkReal x546=((0.00058678977375)*r22);
IkReal x547=(gclwh12_8*rxp1_2);
IkReal x548=((2.0)*gclwh9_10);
IkReal x549=((0.1893)*rxp2_2);
IkReal x550=((2.0)*gclwh15_10);
IkReal x551=((4.0)*gclwh14_11);
IkReal x552=(gclwh5_15*rxp2_2);
IkReal x553=((0.020662095)*rxp0_2);
IkReal x554=((2.0)*gclwh13_10);
IkReal x555=((0.3786)*rxp1_2);
IkReal x556=(gclwh9_0*r20);
IkReal x557=(gclwh13_9*r21);
IkReal x558=(gclwh15_1*r20);
IkReal x559=((0.000977833645875)*r22);
IkReal x560=((0.006199575)*rxp0_2);
IkReal x561=(gclwh6_2*rxp1_2);
IkReal x562=((0.0089586225)*r20);
IkReal x563=((2.0)*gclwh10_11);
IkReal x564=((2.0)*pp);
IkReal x565=((0.00058678977375)*r21);
IkReal x566=(gclwh1_3*r20);
IkReal x567=(gclwh14_14*r20);
IkReal x568=(gclwh9_0*rxp0_2);
IkReal x569=(gclwh4_3*rxp2_2);
IkReal x570=(gclwh5_0*r22);
IkReal x571=((0.03583449)*r20);
IkReal x572=((0.00058678977375)*r20);
IkReal x573=((0.2183)*gclwh13_15);
IkReal x574=((2.0)*gclwh7_10);
IkReal x575=(gclwh2_1*r21);
IkReal x576=((4.0)*gclwh15_10);
IkReal x577=((0.0089586225)*pz);
IkReal x578=((0.2183)*gclwh12_14);
IkReal x579=((0.2183)*gclwh14_14);
IkReal x580=(gclwh11_0*rxp2_2);
IkReal x581=(gclwh8_2*rxp0_2);
IkReal x582=((0.3786)*rxp2_2);
IkReal x583=(gclwh12_2*rxp1_2);
IkReal x584=(gclwh5_0*rxp2_2);
IkReal x585=((3.60823078949063e-5)*r21);
IkReal x586=(gclwh15_9*r20);
IkReal x587=((0.3786)*rxp0_2);
IkReal x588=((0.006199575)*rxp1_2);
IkReal x589=(gclwh14_8*npx);
IkReal x590=(gclwh13_15*r21);
IkReal x591=((0.017917245)*r20);
IkReal x592=(gclwh5_15*r22);
IkReal x593=((0.000293394886875)*r21);
IkReal x594=(gclwh13_0*rxp1_2);
IkReal x595=(gclwh7_10*rxp1_2);
IkReal x596=((0.000293394886875)*r22);
IkReal x597=(gclwh5_1*rxp2_2);
IkReal x598=((0.154705425)*rxp0_2);
IkReal x599=((0.4366)*gclwh13_15);
IkReal x600=((0.0089586225)*r22);
IkReal x601=((0.2970117)*rxp2_2);
IkReal x602=(gclwh5_9*r22);
IkReal x603=((0.7572)*rxp0_2);
IkReal x604=((4.0)*gclwh4_11);
IkReal x605=(gclwh15_1*rxp0_2);
IkReal x606=((0.000293394886875)*r20);
IkReal x607=((2.0)*gclwh6_11);
IkReal x608=((0.4366)*gclwh12_14);
IkReal x609=((0.017917245)*r22);
IkReal x610=(gclwh15_0*r20);
IkReal x611=(gclwh15_15*r20);
IkReal x612=((2.0)*gclwh12_11);
IkReal x613=(gclwh14_8*rxp0_2);
IkReal x614=((0.0655)*pz);
IkReal x615=((0.006199575)*rxp2_2);
IkReal x616=((0.04132419)*rxp1_2);
IkReal x617=((0.4366)*gclwh4_14);
IkReal x618=(gclwh15_0*rxp0_2);
IkReal x619=(gclwh14_8*r20);
IkReal x620=((0.03583449)*r22);
IkReal x621=((2.0)*gclwh8_11);
IkReal x622=((4.0)*gclwh13_10);
IkReal x623=(gclwh15_9*rxp0_2);
IkReal x624=((3.60823078949063e-5)*r20);
IkReal x625=((0.00702803935125)*r22);
IkReal x626=((0.2183)*gclwh5_15);
IkReal x627=(gclwh5_1*r22);
IkReal x628=((4.0)*gclwh5_10);
IkReal x629=(gclwh13_9*rxp1_2);
IkReal x630=((2.0)*gclwh5_10);
IkReal x631=((0.4366)*gclwh14_14);
IkReal x632=((0.020662095)*rxp2_2);
IkReal x633=(gclwh4_8*r22);
IkReal x634=(gclwh4_2*rxp2_2);
IkReal x635=((0.00600991575645741)*r21);
IkReal x636=((0.2183)*gclwh15_15);
IkReal x637=((0.2183)*gclwh4_14);
IkReal x638=((0.00702803935125)*r20);
IkReal x639=(gclwh12_14*r21);
IkReal x640=(gclwh4_8*rxp2_2);
IkReal x641=((0.2970117)*rxp0_2);
IkReal x642=(gclwh8_2*pz);
IkReal x643=(gclwh13_1*rxp1_2);
IkReal x644=((0.1893)*pp);
IkReal x645=(gclwh12_3*rxp1_2);
IkReal x646=((0.01464286847625)*r21);
IkReal x647=((0.1893)*rxp1_2);
IkReal x648=(gclwh4_3*r22);
IkReal x649=((2.0)*gclwh14_11);
IkReal x650=((0.03583449)*r21);
IkReal x651=((0.00195566729175)*x590);
IkReal x652=((0.00195566729175)*x592);
IkReal x653=((0.00195566729175)*x611);
IkReal x654=(gclwh15_10*x591);
IkReal x655=(gclwh7_10*x555);
IkReal x656=(gclwh5_10*x609);
IkReal x657=(gclwh9_10*x587);
IkReal x658=(gclwh13_10*x525);
IkReal x659=(gclwh11_10*x582);
IkReal x660=(gclwh12_14*x535);
IkReal x661=(gclwh6_5*x514);
IkReal x662=(gclwh4_14*x632);
IkReal x663=(gclwh8_5*x512);
IkReal x664=((0.020662095)*x543);
IkReal x665=(gclwh10_5*x559);
IkReal x666=((0.017917245)*x547);
IkReal x667=(gclwh8_11*x562);
IkReal x668=(gclwh14_11*x545);
IkReal x669=((0.017917245)*x640);
IkReal x670=(gclwh10_11*x600);
IkReal x671=(gclwh6_11*x538);
IkReal x672=(gclwh12_11*x647);
IkReal x673=(gclwh4_11*x549);
IkReal x674=((0.017917245)*x613);
IkReal x675=((0.017917245)*x534);
IkReal x676=(gclwh13_10*x647);
IkReal x677=(gclwh7_10*x538);
IkReal x678=(gclwh5_10*x549);
IkReal x679=((0.017917245)*x629);
IkReal x680=((0.017917245)*x623);
IkReal x681=(gclwh11_10*x600);
IkReal x682=(gclwh15_10*x545);
IkReal x683=(gclwh9_10*x562);
IkReal x684=(gclwh13_15*x535);
IkReal x685=((0.020662095)*x552);
IkReal x686=(gclwh7_7*x514);
IkReal x687=(gclwh9_7*x512);
IkReal x688=(gclwh15_15*x553);
IkReal x689=(gclwh11_7*x559);
IkReal x690=(gclwh12_11*x525);
IkReal x691=((0.3786)*x533);
IkReal x692=(gclwh4_11*x609);
IkReal x693=(gclwh8_11*x587);
IkReal x694=((0.00195566729175)*x544);
IkReal x695=((0.00195566729175)*x639);
IkReal x696=((0.00195566729175)*x567);
IkReal x697=((0.000977833645875)*x544);
IkReal x698=(gclwh10_5*x632);
IkReal x699=(gclwh12_14*x514);
IkReal x700=(gclwh8_5*x553);
IkReal x701=(gclwh6_5*x535);
IkReal x702=(gclwh14_14*x512);
IkReal x703=((0.000847933619625)*x527);
IkReal x704=((0.1893)*x520);
IkReal x705=(gclwh14_11*x562);
IkReal x706=((0.000847933619625)*x633);
IkReal x707=(gclwh8_11*x545);
IkReal x708=(gclwh12_11*x538);
IkReal x709=((0.1893)*x533);
IkReal x710=(gclwh4_11*x600);
IkReal x711=((0.000847933619625)*x619);
IkReal x712=((0.1893)*x595);
IkReal x713=(gclwh15_10*x562);
IkReal x714=((0.000847933619625)*x586);
IkReal x715=((0.000847933619625)*x602);
IkReal x716=(gclwh9_10*x545);
IkReal x717=(gclwh13_10*x538);
IkReal x718=((0.000847933619625)*x557);
IkReal x719=(gclwh11_10*x549);
IkReal x720=(gclwh5_10*x600);
IkReal x721=(gclwh15_15*x512);
IkReal x722=(gclwh7_7*x535);
IkReal x723=(gclwh5_15*x559);
IkReal x724=(gclwh9_7*x553);
IkReal x725=(gclwh11_7*x632);
IkReal x726=(gclwh13_15*x514);
IkReal x727=((2.0)*x498);
IkReal x728=(r21*x499);
IkReal x729=((1.0)*x499);
IkReal x730=(x503*x573);
IkReal x731=(x531*x532);
IkReal x732=(x504*x626);
IkReal x733=(x508*x599);
IkReal x734=(x507*x636);
IkReal x735=(x513*x519);
IkReal x736=(x507*x550);
IkReal x737=(x513*x628);
IkReal x738=(x508*x622);
IkReal x739=(x503*x554);
IkReal x740=(x531*x576);
IkReal x741=(x504*x630);
IkReal x742=((0.2183)*gclwh10_5*x513);
IkReal x743=((0.2183)*gclwh8_5*x531);
IkReal x744=((0.10915)*gclwh6_5*x503);
IkReal x745=((0.2183)*gclwh6_5*x508);
IkReal x746=((0.10915)*gclwh8_5*x507);
IkReal x747=((0.10915)*gclwh10_5*x504);
IkReal x748=(x644*x645);
IkReal x749=(x508*x607);
IkReal x750=(x562*x642);
IkReal x751=(gclwh10_2*pz*x504);
IkReal x752=(x500*x528);
IkReal x753=(x507*x642);
IkReal x754=(gclwh4_3*pp*x549);
IkReal x755=(gclwh10_2*r22*x577);
IkReal x756=(x500*x583);
IkReal x757=(x513*x563);
IkReal x758=(x500*x634);
IkReal x759=(x511*x644);
IkReal x760=(x531*x621);
IkReal x761=(gclwh6_2*pz*x538);
IkReal x762=(x643*x644);
IkReal x763=(x513*x523);
IkReal x764=(x531*x548);
IkReal x765=(gclwh11_0*r22*x577);
IkReal x766=(x556*x577);
IkReal x767=(gclwh5_1*pp*x549);
IkReal x768=(x500*x618);
IkReal x769=(gclwh11_0*pz*x504);
IkReal x770=(gclwh9_0*pz*x507);
IkReal x771=(gclwh15_1*pp*x545);
IkReal x772=(gclwh7_0*pz*x538);
IkReal x773=(x500*x594);
IkReal x774=(x500*x584);
IkReal x775=(x508*x574);
IkReal x776=((0.10915)*gclwh7_7*x503);
IkReal x777=((0.2183)*gclwh9_7*x531);
IkReal x778=((0.2183)*gclwh11_7*x513);
IkReal x779=((0.10915)*gclwh9_7*x507);
IkReal x780=((0.2183)*gclwh7_7*x508);
IkReal x781=((0.10915)*gclwh11_7*x504);
IkReal x782=(x504*x529);
IkReal x783=(x503*x612);
IkReal x784=(x531*x551);
IkReal x785=(x503*x578);
IkReal x786=(x531*x631);
IkReal x787=(x504*x637);
IkReal x788=(x507*x579);
IkReal x789=(x508*x608);
IkReal x790=(x513*x617);
IkReal x791=((0.10915)*gclwh12_14*x503);
IkReal x792=(x531*x579);
IkReal x793=((0.10915)*gclwh4_14*x504);
IkReal x794=((0.10915)*gclwh14_14*x507);
IkReal x795=(x513*x637);
IkReal x796=(x508*x578);
IkReal x797=((0.09465)*gclwh4_8*x504);
IkReal x798=(x507*x526);
IkReal x799=(gclwh12_3*x728);
IkReal x800=(x513*x529);
IkReal x801=(x500*x561);
IkReal x802=(gclwh3_3*x728);
IkReal x803=(x499*x566);
IkReal x804=(gclwh3_2*pz*x538);
IkReal x805=(x500*x589);
IkReal x806=(x526*x562);
IkReal x807=((0.09465)*gclwh12_8*x503);
IkReal x808=(x499*x648);
IkReal x809=(gclwh1_2*pz*x562);
IkReal x810=(x508*x612);
IkReal x811=(x500*x581);
IkReal x812=(gclwh4_2*r22*x577);
IkReal x813=(gclwh4_8*npz*x500);
IkReal x814=(gclwh12_2*pz*x538);
IkReal x815=(x500*x515);
IkReal x816=(x531*x649);
IkReal x817=((0.09465)*gclwh14_8*x507);
IkReal x818=(gclwh12_8*npy*x500);
IkReal x819=(x499*x558);
IkReal x820=(x500*x506);
IkReal x821=(gclwh5_0*pz*x504);
IkReal x822=(gclwh13_9*npy*x500);
IkReal x823=(x570*x577);
IkReal x824=(x503*x539);
IkReal x825=((0.09465)*gclwh15_9*x507);
IkReal x826=(x538*x539);
IkReal x827=(x499*x575);
IkReal x828=(x513*x630);
IkReal x829=(gclwh2_0*pz*x538);
IkReal x830=(x500*x568);
IkReal x831=(x508*x554);
IkReal x832=(x500*x580);
IkReal x833=(gclwh0_1*r20*x499);
IkReal x834=(x537*x577);
IkReal x835=((0.09465)*gclwh5_9*x504);
IkReal x836=(x500*x521);
IkReal x837=((0.09465)*gclwh13_9*x503);
IkReal x838=(gclwh15_0*pz*x562);
IkReal x839=(x500*x502);
IkReal x840=(x531*x550);
IkReal x841=((0.10915)*gclwh15_15*x507);
IkReal x842=(x513*x626);
IkReal x843=(x508*x573);
IkReal x844=((0.10915)*gclwh13_15*x503);
IkReal x845=((0.10915)*gclwh5_15*x504);
IkReal x846=(x531*x636);
IkReal x847=(gclwh6_2*npy*x727);
IkReal x848=(gclwh6_2*x503*x542);
IkReal x849=(gclwh10_2*npz*x727);
IkReal x850=(gclwh8_2*npx*x727);
IkReal x851=(gclwh7_0*npy*x727);
IkReal x852=(gclwh9_0*npx*x727);
IkReal x853=(gclwh11_0*npz*x727);
IkReal x854=(gclwh7_0*x503*x542);
IkReal x855=(gclwh12_2*npy*x727);
IkReal x856=(gclwh3_2*npy*x727);
IkReal x857=(gclwh1_2*npx*x727);
IkReal x858=(gclwh14_3*x531*x564);
IkReal x859=(gclwh4_2*npz*x727);
IkReal x860=(gclwh4_3*x513*x564);
IkReal x861=(gclwh12_2*x503*x542);
IkReal x862=(gclwh1_2*x507*x542);
IkReal x863=(gclwh3_3*x508*x564);
IkReal x864=(gclwh4_2*x504*x542);
IkReal x865=(gclwh1_3*x531*x564);
IkReal x866=(gclwh3_2*x503*x542);
IkReal x867=(gclwh12_3*x508*x564);
IkReal x868=(gclwh14_2*npx*x727);
IkReal x869=(gclwh14_3*r20*x729);
IkReal x870=(gclwh0_0*npx*x727);
IkReal x871=(gclwh2_0*npy*x727);
IkReal x872=(gclwh5_1*x513*x564);
IkReal x873=(gclwh13_1*x508*x564);
IkReal x874=(gclwh15_0*npx*x727);
IkReal x875=(gclwh2_1*x508*x564);
IkReal x876=(gclwh0_1*x531*x564);
IkReal x877=(gclwh5_0*npz*x727);
IkReal x878=(gclwh13_0*npy*x727);
IkReal x879=(gclwh0_0*x507*x542);
IkReal x880=(gclwh15_0*x507*x542);
IkReal x881=(gclwh2_0*x503*x542);
IkReal x882=((1.0)*gclwh13_1*x728);
IkReal x883=(x627*x729);
IkReal x884=(gclwh15_1*x531*x564);
IkReal x885=(x660+x662);
IkReal x886=(x698+x700);
IkReal x887=(x685+x684);
IkReal x888=(x724+x725);
IkReal x889=(x683+x682+x681+x775);
IkReal x890=(x668+x667+x670+x749);
IkReal x891=(x704+x705+x810+x800);
IkReal x892=(x713+x712+x828+x831);
IkReal x893=(x653+x735+x734+x733);
IkReal x894=(x661+x744+x742+x743);
IkReal x895=(x702+x795+x794+x796);
IkReal x896=(x696+x790+x788+x789);
IkReal x897=(x686+x777+x776+x778);
IkReal x898=(x721+x841+x843+x842);
IkReal x899=(x719+x717+x716+x720+x840);
IkReal x900=(x710+x708+x709+x707+x816);
IkReal x901=(x678+x676+x677+x764+x763);
IkReal x902=(x672+x673+x671+x757+x760);
IkReal x903=(((x513*x604))+((x508*x509))+((x507*x649))+((gclwh14_11*x591))+(((0.3786)*x520)));
IkReal x904=(x694+x695+x786+x787+x785);
IkReal x905=(x654+x655+x737+x736+x738);
IkReal x906=(x697+x699+x791+x793+x792);
IkReal x907=(x723+x726+x845+x844+x846);
IkReal x908=(x663+x665+x746+x747+x745);
IkReal x909=(x651+x652+x732+x731+x730);
IkReal x910=(x689+x687+x779+x780+x781);
IkReal x911=(x656+x657+x658+x659+x739+x740+x741);
IkReal x912=(x690+x691+x692+x693+x782+x783+x784);
IkReal x913=(x680+x773+x772+x771+x774+x852+x853+x854);
IkReal x914=(x674+x756+x759+x758+x761+x850+x849+x848);
IkReal x915=(x679+x675+x770+x768+x769+x765+x766+x767+x762+x851);
IkReal x916=(x669+x666+x755+x754+x751+x750+x753+x752+x748+x847);
IkReal x917=(x718+x715+x878+x879+x875+x876+x877+x884+x881+x880+x883+x882+x835+x836+x837+x838+x839);
IkReal x918=(x500+x703+x706+x797+x799+x798+x856+x857+x855+x858+x859+x809+x808+x805+x804+x807+x806+x801+x803+x802);
IkReal x919=(x711+x869+x868+x867+x866+x865+x864+x863+x862+x861+x860+x818+x817+x814+x815+x812+x813+x811);
IkReal x920=(x500+x714+x870+x871+x872+x873+x874+x819+x829+x823+x822+x821+x820+x827+x826+x825+x824+x834+x830+x832+x833);
op[38]=((((0.8732)*gclwh4_14*x513))+(((-0.0039113345835)*x639))+(((-1.0)*gclwh8_12*x641))+((x507*x631))+(((0.0039113345835)*x567))+(((0.8732)*gclwh12_14*x508))+(((-1.0)*gclwh10_12*x601))+(((-0.0039113345835)*x544))+(((-0.8732)*gclwh14_14*x531))+(((-1.0)*x504*x617))+(((-1.0)*x503*x608))+((gclwh6_12*x524)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x531))+((gclwh8_11*x603))+(((-1.0)*x507*x551))+(((-8.0)*gclwh4_11*x513))+(((0.7572)*x533))+((gclwh4_11*x620))+((x504*x604))+((x503*x509))+(((-8.0)*gclwh12_11*x508))+(((-0.7572)*x520))+((gclwh12_11*x650))+(((-1.0)*gclwh14_11*x571)));
op[40]=((0.02168232)+(((-1.0)*x903))+x912);
op[41]=(((gclwh3_2*x565))+(((-0.131)*npx*x526))+(((-1.0)*gclwh12_2*x565))+((gclwh1_2*x572))+((gclwh14_2*x572))+(((-0.0655)*gclwh1_2*x507))+(((-0.01239915)*x581))+(((-1.0)*x896))+(((0.131)*gclwh4_2*x513))+(((0.0655)*gclwh14_2*x507))+(((-0.0655)*gclwh12_2*x503))+(((0.131)*gclwh12_2*x508))+(((0.131)*gclwh1_2*x531))+(((-0.0655)*gclwh4_2*x504))+x904+(((-0.0655)*gclwh3_2*x503))+(((-0.01239915)*x515))+(((0.131)*gclwh3_2*x508))+(((0.01239915)*x561))+(((-1.0)*gclwh4_2*x546)));
op[42]=((((3.269)*gclwh15_0*x531))+(((-3.269)*gclwh13_0*x508))+(((-0.30941085)*x521))+(((-1.6345)*gclwh15_0*x507))+(((3.269)*gclwh0_0*x531))+(((0.30941085)*x568))+(((0.30941085)*x580))+(((1.6345)*gclwh13_0*x503))+(((-1.0)*x909))+(((-1.6345)*gclwh0_0*x507))+((gclwh13_0*x646))+(((0.01464286847625)*x570))+(((-0.01464286847625)*x610))+((gclwh2_0*x646))+(((0.01464286847625)*x537))+x893+(((3.269)*gclwh2_0*x508))+(((-1.6345)*gclwh2_0*x503))+(((-3.269)*gclwh5_0*x513))+(((1.6345)*gclwh5_0*x504)));
op[43]=((1.31196768)+(((-1.0)*x905))+x911);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x507*x576))+(((-8.0)*gclwh13_10*x508))+((gclwh13_10*x650))+(((-0.7572)*x595))+(((8.0)*gclwh15_10*x531))+((x503*x622))+((x504*x628))+((gclwh9_10*x603))+(((-8.0)*gclwh5_10*x513))+((gclwh5_10*x620))+(((-1.0)*gclwh15_10*x571)));
op[45]=(((gclwh11_13*x601))+((gclwh9_13*x641))+(((-1.0)*x507*x532))+(((0.8732)*gclwh15_15*x531))+((x504*x519))+((x503*x599))+(((-1.0)*gclwh7_13*x524))+(((0.0039113345835)*x590))+(((0.0039113345835)*x592))+(((-0.8732)*gclwh13_15*x508))+(((-0.0039113345835)*x611))+(((-0.8732)*gclwh5_15*x513)));
op[46]=((((0.131)*gclwh2_0*x508))+(((0.131)*gclwh15_0*x531))+(((-1.0)*gclwh15_0*x572))+(((-0.0655)*gclwh15_0*x507))+(((-0.0655)*gclwh0_0*x507))+(((-0.131)*gclwh5_0*x513))+(((0.131)*gclwh0_0*x531))+(((0.00058678977375)*x537))+(((-0.131)*gclwh13_0*x508))+(((-0.01239915)*x521))+((gclwh5_0*x546))+(((-1.0)*x893))+(((0.01239915)*x580))+((gclwh13_0*x565))+((gclwh2_0*x565))+(((-0.0655)*gclwh2_0*x503))+(((0.0655)*gclwh13_0*x503))+x909+(((0.0655)*gclwh5_0*x504))+(((0.01239915)*x568)));
op[47]=((0.02168232)+(((-1.0)*x911))+x905);
op[48]=((((-1.0)*gclwh4_8*x522))+(((-1.0)*gclwh12_8*x518))+((gclwh10_12*x541))+((gclwh8_12*x530))+(((-1.6345)*gclwh10_12*x513))+(((-1.0)*x908))+(((0.81725)*gclwh8_12*x507))+(((-1.0)*x885))+((gclwh14_8*x598))+(((0.81725)*gclwh10_12*x504))+x664+(((-1.6345)*gclwh8_12*x531))+(((1.6345)*gclwh6_12*x508))+(((-1.0)*gclwh6_12*x536))+x894+(((-0.81725)*gclwh6_12*x503)));
op[49]=((((0.12699240901125)*x511))+(((-1.0)*gclwh10_11*x504))+(((-1.0)*x890))+(((-1.0)*x914))+(((-0.12699240901125)*x569))+(((-0.12699240901125)*x645))+((gclwh6_11*x503))+x916+x902+(((-1.0)*gclwh8_11*x507)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x513))+(((-1.0)*x504*x563))+((gclwh12_11*x555))+((gclwh6_11*x525))+((x503*x607))+(((4.0)*gclwh8_11*x531))+(((-4.0)*gclwh6_11*x508))+(((-1.0)*gclwh8_11*x591))+(((-1.0)*gclwh14_11*x587))+(((-1.0)*x507*x621))+(((-1.0)*gclwh10_11*x609))+((gclwh4_11*x582)));
op[51]=((((0.14850585)*x583))+(((-0.160905)*x613))+(((-1.0)*gclwh8_2*x638))+(((-0.14850585)*x528))+((gclwh6_2*x505))+(((0.7845)*gclwh6_2*x503))+(((-1.0)*gclwh10_2*x625))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x640))+(((0.160905)*x547))+(((-0.7845)*gclwh8_2*x507))+((gclwh12_14*x616))+(((0.14850585)*x634))+(((1.569)*gclwh10_2*x513))+(((1.569)*gclwh8_2*x531))+(((-1.569)*gclwh6_2*x508))+(((-0.04132419)*x543))+(((-0.7845)*gclwh10_2*x504)));
op[52]=((((-0.0655)*gclwh10_12*x513))+(((-1.0)*gclwh14_8*x560))+(((-0.0655)*gclwh8_12*x531))+(((0.0655)*gclwh6_12*x508))+(((-0.03275)*gclwh6_12*x503))+(((-1.0)*x908))+((gclwh4_8*x615))+(((0.03275)*gclwh8_12*x507))+((gclwh10_12*x596))+(((-1.0)*gclwh6_12*x593))+(((-1.0)*x664))+(((0.006199575)*x547))+(((0.03275)*gclwh10_12*x504))+x885+x894+((gclwh8_12*x606)));
op[53]=(((gclwh8_11*x507))+(((-1.0)*gclwh6_11*x503))+(((-1.0)*x902))+(((-1.0)*x914))+((gclwh10_11*x504))+(((-0.00076243651125)*x569))+x890+x916+(((0.00076243651125)*x511))+(((-1.0)*gclwh12_3*x516)));
op[54]=(((gclwh11_10*x504))+((gclwh9_10*x507))+(((-1.0)*x901))+(((-1.0)*x913))+(((-0.12699240901125)*x597))+(((-1.0)*gclwh7_10*x503))+(((-0.12699240901125)*x643))+(((0.12699240901125)*x605))+x889+x915);
op[55]=((((-1.0)*gclwh13_9*x518))+(((-1.6345)*gclwh9_13*x531))+(((0.81725)*gclwh11_13*x504))+(((0.81725)*gclwh9_13*x507))+(((-1.0)*gclwh5_9*x522))+(((-1.0)*x910))+(((-1.0)*gclwh7_13*x536))+(((-1.6345)*gclwh11_13*x513))+(((-1.0)*x887))+(((-0.81725)*gclwh7_13*x503))+(((1.6345)*gclwh7_13*x508))+x688+((gclwh11_13*x541))+((gclwh15_9*x598))+x897+((gclwh9_13*x530)));
op[56]=((((-1.0)*gclwh13_15*x616))+(((-0.7845)*gclwh11_0*x504))+(((0.14850585)*x584))+(((-0.04132419)*x552))+(((-0.00702803935125)*x556))+(((-1.569)*gclwh7_0*x508))+(((-1.0)*gclwh11_0*x625))+((gclwh7_0*x505))+(((0.160905)*x623))+(((-0.14850585)*x618))+(((1.569)*gclwh9_0*x531))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x629))+(((0.7845)*gclwh7_0*x503))+(((0.14850585)*x594))+(((-0.160905)*x534))+(((-0.7845)*gclwh9_0*x507))+(((1.569)*gclwh11_0*x513)));
op[57]=((0.17125635)+((gclwh5_10*x582))+((gclwh13_10*x555))+(((-1.0)*x507*x548))+(((-1.0)*gclwh11_10*x609))+(((-1.0)*gclwh15_10*x587))+(((-1.0)*x504*x523))+((x503*x574))+(((4.0)*gclwh11_10*x513))+((gclwh7_10*x525))+(((-4.0)*gclwh7_10*x508))+(((4.0)*gclwh9_10*x531))+(((-1.0)*gclwh9_10*x591)));
op[58]=((((-1.0)*gclwh11_10*x504))+((gclwh7_10*x503))+(((-1.0)*x913))+(((-1.0)*x889))+(((-1.0)*gclwh13_1*x516))+(((-1.0)*gclwh9_10*x507))+(((0.00076243651125)*x605))+x915+x901+(((-0.00076243651125)*x597)));
op[59]=((((-0.0655)*gclwh9_13*x531))+(((0.03275)*gclwh9_13*x507))+(((-1.0)*x688))+(((-0.03275)*gclwh7_13*x503))+(((-1.0)*x910))+(((-0.0655)*gclwh11_13*x513))+(((0.0655)*gclwh7_13*x508))+(((0.006199575)*x534))+(((-1.0)*gclwh7_13*x593))+x887+x897+((gclwh9_13*x606))+((gclwh13_9*x588))+((gclwh11_13*x596))+(((-1.0)*gclwh15_9*x560))+(((0.03275)*gclwh11_13*x504)));
op[60]=((((-1.0)*gclwh4_8*x541))+(((1.6345)*gclwh12_8*x508))+(((-1.0)*x906))+((gclwh6_12*x518))+(((-0.81725)*gclwh4_8*x504))+(((-0.007321434238125)*x527))+(((-1.0)*gclwh8_12*x598))+(((-1.0)*x701))+(((-0.81725)*gclwh12_8*x503))+(((0.81725)*gclwh14_8*x507))+((gclwh14_8*x530))+(((1.6345)*gclwh4_8*x513))+x886+x895+(((-1.0)*gclwh10_12*x522))+(((-1.6345)*gclwh14_8*x531)));
op[61]=((0.679811285)+((gclwh3_3*x635))+(((-0.66189404)*gclwh12_3*x503))+(((-1.0)*gclwh14_11*x507))+(((-0.00600991575645741)*x648))+(((1.341705325)*gclwh12_3*x508))+(((-1.0)*x891))+(((-1.0)*x919))+((gclwh14_3*x517))+(((0.66189404)*gclwh14_3*x507))+(((-0.66189404)*gclwh4_3*x504))+(((1.341705325)*gclwh3_3*x508))+((gclwh12_11*x503))+(((1.341705325)*gclwh1_3*x531))+(((-0.679811285)*gclwh3_3*x503))+(((-1.0)*gclwh12_3*x635))+(((1.341705325)*gclwh4_3*x513))+(((-0.679811285)*gclwh1_3*x507))+(((-1.341705325)*gclwh14_3*x531))+x918+x900+((gclwh4_11*x504))+((gclwh1_3*x517)));
op[62]=((0.07735732)+(((-1.0)*x903))+x912);
op[63]=((((-0.14850585)*x561))+(((-1.569)*gclwh12_2*x508))+(((-1.569)*gclwh1_2*x531))+(((-0.85)*gclwh14_8*x507))+(((0.7845)*gclwh12_2*x503))+(((0.14850585)*x581))+(((0.85)*gclwh4_8*x504))+(((-1.569)*gclwh4_2*x513))+(((-1.0)*gclwh12_8*npy*x501))+(((-1.0)*gclwh4_8*npz*x501))+((x501*x589))+(((-1.0)*gclwh1_2*x638))+(((0.14850585)*x515))+(((-1.0)*x896))+(((0.7845)*gclwh3_2*x503))+(((-0.7845)*gclwh14_2*x507))+((gclwh12_2*x505))+(((0.85)*gclwh12_8*x503))+(((1.569)*npx*x526))+(((0.007614829125)*x527))+(((0.7845)*gclwh1_2*x507))+(((-0.007614829125)*x619))+(((0.7845)*gclwh4_2*x504))+x904+(((0.007614829125)*x633))+(((-1.0)*gclwh14_2*x638))+(((-1.0)*gclwh3_2*x505))+((gclwh4_2*x625))+(((-1.569)*gclwh3_2*x508)));
op[64]=((((-1.0)*gclwh14_8*x606))+(((-0.0655)*gclwh4_8*x513))+(((0.0655)*gclwh14_8*x531))+(((0.000293394886875)*x527))+(((-1.0)*x895))+(((0.03275)*gclwh12_8*x503))+((gclwh4_8*x596))+(((-0.0655)*gclwh12_8*x508))+(((-1.0)*x701))+((gclwh6_12*x588))+x886+(((-0.03275)*gclwh14_8*x507))+(((-1.0)*gclwh10_12*x615))+x906+(((0.03275)*gclwh4_8*x504))+(((-1.0)*gclwh8_12*x560)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x508))+(((3.60823078949063e-5)*x566))+(((-1.0)*gclwh12_11*x503))+(((0.00493096)*gclwh12_3*x503))+((gclwh14_11*x507))+(((-1.0)*x900))+((gclwh3_3*x585))+(((-1.0)*x919))+(((-1.0)*gclwh4_3*x510))+(((-1.0)*gclwh12_3*x585))+(((-1.0)*gclwh4_11*x504))+(((-0.008055325)*gclwh14_3*x531))+(((0.008055325)*gclwh12_3*x508))+(((0.008055325)*gclwh1_3*x531))+(((-0.00493096)*gclwh14_3*x507))+(((0.00493096)*gclwh4_3*x504))+x891+(((0.008055325)*gclwh4_3*x513))+(((-0.012986285)*gclwh3_3*x503))+x918+((gclwh14_3*x624))+(((-0.012986285)*gclwh1_3*x507)));
op[66]=((-0.679811285)+((gclwh0_1*x517))+((gclwh13_1*x635))+(((1.341705325)*gclwh15_1*x531))+(((-1.0)*gclwh15_1*x517))+(((1.341705325)*gclwh0_1*x531))+(((-1.0)*x892))+(((-1.0)*gclwh15_10*x507))+(((-1.0)*x917))+(((-0.679811285)*gclwh0_1*x507))+(((0.00600991575645741)*x575))+(((-0.66189404)*gclwh15_1*x507))+(((-1.341705325)*gclwh13_1*x508))+((gclwh5_10*x504))+(((-0.679811285)*gclwh2_1*x503))+(((0.66189404)*gclwh13_1*x503))+(((-1.341705325)*gclwh5_1*x513))+x899+((gclwh13_10*x503))+x920+(((0.66189404)*gclwh5_1*x504))+(((0.00600991575645741)*x627))+(((1.341705325)*gclwh2_1*x508)));
op[67]=((((0.81725)*gclwh13_9*x503))+((gclwh9_13*x598))+(((-1.0)*x898))+(((-1.0)*x888))+((gclwh13_9*x536))+((x502*x540))+(((0.81725)*gclwh5_9*x504))+(((-1.0)*x506*x540))+(((-1.0)*gclwh15_9*x530))+((gclwh11_13*x522))+x722+(((-0.81725)*gclwh15_9*x507))+((gclwh5_9*x541))+x907+(((-1.6345)*gclwh13_9*x508))+(((-1.0)*gclwh7_13*x518)));
op[68]=((((-1.0)*gclwh13_0*x505))+(((0.85)*gclwh13_9*x503))+(((-0.14850585)*x568))+(((-0.85)*gclwh15_9*x507))+(((-0.00702803935125)*x570))+(((-1.569)*gclwh0_0*x531))+(((-1.569)*gclwh2_0*x508))+(((0.7845)*gclwh2_0*x503))+(((-1.0)*x893))+(((-0.7845)*gclwh5_0*x504))+(((-1.0)*x501*x506))+(((1.569)*gclwh5_0*x513))+(((-1.0)*gclwh13_9*npy*x501))+(((0.007614829125)*x602))+((x501*x502))+(((0.00702803935125)*x610))+(((0.85)*gclwh5_9*x504))+(((0.14850585)*x521))+(((0.007614829125)*x557))+(((-1.569)*gclwh15_0*x531))+(((-0.7845)*gclwh13_0*x503))+(((0.7845)*gclwh15_0*x507))+(((-0.007614829125)*x586))+(((-1.0)*gclwh2_0*x505))+(((1.569)*gclwh13_0*x508))+(((0.7845)*gclwh0_0*x507))+(((-0.14850585)*x580))+x909+(((-0.00702803935125)*x537)));
op[69]=((0.07735732)+(((-1.0)*x911))+x905);
op[70]=((0.012986285)+((gclwh0_1*x624))+((gclwh13_1*x585))+(((-1.0)*gclwh5_10*x504))+(((0.008055325)*gclwh0_1*x531))+(((-1.0)*x899))+(((-1.0)*x917))+(((-0.00493096)*gclwh13_1*x503))+(((3.60823078949063e-5)*x575))+(((0.00493096)*gclwh15_1*x507))+(((-0.012986285)*gclwh0_1*x507))+(((0.008055325)*gclwh2_1*x508))+(((0.008055325)*gclwh15_1*x531))+(((-0.008055325)*gclwh5_1*x513))+(((-3.60823078949063e-5)*x558))+(((-0.00493096)*gclwh5_1*x504))+x892+(((-1.0)*gclwh13_10*x503))+((gclwh5_1*x510))+(((-0.012986285)*gclwh2_1*x503))+x920+(((-0.008055325)*gclwh13_1*x508))+((gclwh15_10*x507)));
op[71]=((((-1.0)*gclwh7_13*x588))+(((0.0655)*gclwh13_9*x508))+((gclwh11_13*x615))+(((-1.0)*x907))+(((-1.0)*x888))+(((-0.03275)*gclwh13_9*x503))+(((-1.0)*x502*x614))+(((0.03275)*gclwh15_9*x507))+((gclwh9_13*x560))+(((-1.0)*gclwh5_9*x596))+(((0.000293394886875)*x586))+((x506*x614))+x722+x898+(((-0.000293394886875)*x557))+(((-0.03275)*gclwh5_9*x504)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x921=htj1*htj1;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+x921),-1);
if(!x922.valid){
continue;
}
cj1array[numsolutions]=((x922.value)*(((1.0)+(((-1.0)*x921)))));
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x923.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x923.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x924=htj2*htj2;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+x924),-1);
if(!x925.valid){
continue;
}
cj2array[numsolutions]=((x925.value)*(((1.0)+(((-1.0)*x924)))));
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x926.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x926.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x927=htj3*htj3;
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+x927),-1);
if(!x928.valid){
continue;
}
cj3array[numsolutions]=((x928.value)*(((1.0)+(((-1.0)*x927)))));
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x929.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x929.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x931=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x931);
rxp1_0=(pz*r11);
rxp1_1=(r01*x931);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x932=IKPowWithIntegerCheck(r22,-1);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(sj3,-1);
if(!x933.valid){
continue;
}
sj4array[0]=((x932.value)*(x933.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x934=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x934);
rxp1_0=(pz*r11);
rxp1_1=(r01*x934);
IkReal x935=((16.0)*sj4);
IkReal x936=(cj1*cj2);
IkReal x937=((4.0)*sj3);
IkReal x938=((8.0)*sj4);
IkReal x939=((4.0)*cj4);
IkReal x940=(sj1*sj2);
IkReal x941=((4.0)*sj4);
IkReal x942=(cj3*r02);
IkReal x943=((16.0)*sj3);
IkReal x944=((8.0)*sj3);
IkReal x945=((12.0)*cj4);
IkReal x946=((12.0)*sj4);
IkReal x947=(cj3*r12);
IkReal x948=(r11*x937);
IkReal x949=(r01*x937);
IkReal x950=(r01*x940);
IkReal x951=(cj3*cj4*r01);
IkReal x952=(cj3*cj4*r11);
IkReal x953=(cj3*r10*x939);
IkReal x954=(x946*x947);
IkReal x955=(cj3*r00*x939);
IkReal x956=(x942*x946);
IkReal x957=(r00*x940*x941);
IkReal x958=(r02*x940*x945);
IkReal x959=(r00*x936*x941);
IkReal x960=(r02*x936*x945);
IkReal x961=(r10*x940*x941);
IkReal x962=(r12*x936*x945);
IkReal x963=(r12*x940*x945);
IkReal x964=(r10*x936*x941);
IkReal x965=(x959+x948);
IkReal x966=(x961+x949);
IkReal x967=(x957+x953);
IkReal x968=(x960+x954);
IkReal x969=(x964+x955);
IkReal x970=(x963+x956);
j5eval[0]=((((0.5)*(IKabs((x967+x958+(((-1.0)*x965))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x962+x966+(((-1.0)*x969))+(((-1.0)*x970)))))))+(((0.5)*(IKabs((x962+x969+(((-1.0)*x966))+(((-1.0)*x970)))))))+(IKabs(((((-1.0)*r00*x944))+(((-1.0)*r11*x936*x938))+(((-8.0)*x951))+((r11*x938*x940)))))+(((0.5)*(IKabs((((r01*x935*x936))+(((-1.0)*x935*x950))+(((-16.0)*x952))+(((-1.0)*r10*x943)))))))+(((0.5)*(IKabs((x965+x958+(((-1.0)*x967))+(((-1.0)*x968)))))))+(IKabs(((((-1.0)*x938*x950))+(((-8.0)*x952))+((r01*x936*x938))+(((-1.0)*r10*x944)))))+(((0.5)*(IKabs((((r12*x936*x939))+(((-1.0)*x941*x942))+(((-1.0)*r12*x939*x940))+x966+(((-1.0)*x969)))))))+(((0.5)*(IKabs(((((-1.0)*x941*x947))+(((-1.0)*r02*x936*x939))+x965+(((-1.0)*x967))+((r02*x939*x940)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x943))+((r11*x935*x940))+(((-1.0)*r11*x935*x936))+(((-16.0)*x951))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x971=(r10*sj3);
IkReal x972=(r01*sj4);
IkReal x973=(cj1*cj2);
IkReal x974=(cj3*cj4);
IkReal x975=(sj1*sj2);
IkReal x976=(cj4*r02);
IkReal x977=((4.0)*r11*sj3);
IkReal x978=(cj3*r12*sj4);
IkReal x979=((4.0)*r00*sj4);
IkReal x980=((4.0)*r10*x974);
IkReal x981=((12.0)*x978);
IkReal x982=((4.0)*x978);
IkReal x983=(x973*x979);
IkReal x984=(x975*x979);
IkReal x985=((12.0)*x975*x976);
IkReal x986=((12.0)*x973*x976);
IkReal x987=((4.0)*x975*x976);
IkReal x988=((4.0)*x973*x976);
IkReal x989=(x983+x977);
IkReal x990=(x984+x980);
IkReal x991=(x988+x982);
IkReal x992=(x986+x981);
IkReal x993=((((8.0)*x972*x973))+(((-8.0)*x971))+(((-8.0)*r11*x974))+(((-8.0)*x972*x975)));
op[0]=((((-1.0)*x991))+(((-1.0)*x990))+x989+x987);
op[1]=x993;
op[2]=((((-1.0)*x992))+(((-1.0)*x990))+x989+x985);
op[3]=((((16.0)*x972*x973))+(((-16.0)*r11*x974))+(((-16.0)*x972*x975))+(((-16.0)*x971)));
op[4]=((((-1.0)*x989))+(((-1.0)*x992))+x990+x985);
op[5]=x993;
op[6]=((((-1.0)*x989))+(((-1.0)*x991))+x990+x987);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x994=(cj1*cj2);
IkReal x995=((4.0)*cj4);
IkReal x996=(sj1*sj2);
IkReal x997=((4.0)*sj4);
IkReal x998=(r00*sj3);
IkReal x999=(cj3*r02);
IkReal x1000=((4.0)*r01*sj3);
IkReal x1001=((16.0)*r11*sj4);
IkReal x1002=(cj3*cj4*r01);
IkReal x1003=((12.0)*cj4*r12);
IkReal x1004=((8.0)*r11*sj4);
IkReal x1005=(cj3*r00*x995);
IkReal x1006=((12.0)*sj4*x999);
IkReal x1007=(x997*x999);
IkReal x1008=(r10*x994*x997);
IkReal x1009=(r10*x996*x997);
IkReal x1010=(x1003*x994);
IkReal x1011=(x1003*x996);
IkReal x1012=(r12*x994*x995);
IkReal x1013=(r12*x995*x996);
IkReal x1014=(x1009+x1000);
IkReal x1015=(x1008+x1005);
IkReal x1016=(x1013+x1007);
IkReal x1017=(x1011+x1006);
IkReal x1018=((((-8.0)*x1002))+(((-1.0)*x1004*x994))+((x1004*x996))+(((-8.0)*x998)));
j5evalpoly[0]=(x1015+x1012+(((htj5*htj5*htj5)*(((((-16.0)*x1002))+(((-16.0)*x998))+(((-1.0)*x1001*x994))+((x1001*x996))))))+(((-1.0)*x1016))+(((-1.0)*x1014))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1014+x1012+(((-1.0)*x1016))+(((-1.0)*x1015))))))+((x1018*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1015+x1010+(((-1.0)*x1017))+(((-1.0)*x1014))))))+(((htj5*htj5*htj5*htj5)*((x1014+x1010+(((-1.0)*x1017))+(((-1.0)*x1015))))))+((htj5*x1018)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1019=(cj5*sj4);
IkReal x1020=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1020))+((r00*x1019))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1020))+(((-1.0)*r10*x1019))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1020))+((r00*x1019))+((cj4*r02))))+IKsqr((((r11*x1020))+(((-1.0)*r10*x1019))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1020))+((r00*x1019))+((cj4*r02))), (((r11*x1020))+(((-1.0)*r10*x1019))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1021=IKsin(j0);
IkReal x1022=IKcos(j0);
IkReal x1023=(r02*sj4);
IkReal x1024=((1.0)*sj3);
IkReal x1025=(r12*sj4);
IkReal x1026=(cj3*cj4);
IkReal x1027=((1.0)*cj5);
IkReal x1028=(r11*sj5);
IkReal x1029=(cj5*r01);
IkReal x1030=(r01*sj5);
IkReal x1031=(r00*sj5);
IkReal x1032=((0.39225)*cj2);
IkReal x1033=(cj5*r11);
IkReal x1034=((1.0)*sj2);
IkReal x1035=(r10*sj5);
IkReal x1036=((1.0)*cj4);
IkReal x1037=((0.39225)*sj1*sj2);
IkReal x1038=(cj1*x1021);
IkReal x1039=(cj4*cj5*sj3);
IkReal x1040=(cj1*x1022);
IkReal x1041=(sj1*x1022);
IkReal x1042=(sj1*x1021);
evalcond[0]=(((sj4*x1030))+x1021+(((-1.0)*r00*sj4*x1027))+(((-1.0)*r02*x1036)));
evalcond[1]=((((-1.0)*x1022))+((sj4*x1028))+(((-1.0)*r12*x1036))+(((-1.0)*r10*sj4*x1027)));
evalcond[2]=((((-1.0)*x1032*x1040))+(((0.10915)*x1021))+(((-1.0)*px))+((x1022*x1037))+(((-0.09465)*x1031))+(((-0.09465)*x1029))+(((-0.425)*x1040)));
evalcond[3]=((((-0.10915)*x1022))+((x1021*x1037))+(((-1.0)*x1032*x1038))+(((-1.0)*py))+(((-0.425)*x1038))+(((-0.09465)*x1035))+(((-0.09465)*x1033)));
evalcond[4]=(((r00*x1039))+(((-1.0)*x1023*x1024))+((cj3*x1031))+((sj2*x1040))+((cj2*x1041))+(((-1.0)*cj4*x1024*x1030))+((cj3*x1029)));
evalcond[5]=(((x1026*x1030))+((cj2*x1040))+((sj3*x1031))+(((-1.0)*x1034*x1041))+((sj3*x1029))+((cj3*x1023))+(((-1.0)*r00*x1026*x1027)));
evalcond[6]=(((r10*x1039))+((cj3*x1035))+((cj3*x1033))+((sj2*x1038))+((cj2*x1042))+(((-1.0)*cj4*x1024*x1028))+(((-1.0)*x1024*x1025)));
evalcond[7]=(((cj2*x1038))+(((-1.0)*r10*x1026*x1027))+((x1026*x1028))+((sj3*x1033))+((sj3*x1035))+(((-1.0)*x1034*x1042))+((cj3*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(cj3,-1);
if(!x1043.valid){
continue;
}
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(r22,-1);
if(!x1044.valid){
continue;
}
sj4array[0]=((-1.0)*(x1043.value)*(x1044.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1045=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1045);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1045);
IkReal x1046=((16.0)*sj4);
IkReal x1047=(cj1*cj2);
IkReal x1048=((4.0)*sj3);
IkReal x1049=((8.0)*sj4);
IkReal x1050=((4.0)*cj4);
IkReal x1051=(sj1*sj2);
IkReal x1052=((4.0)*sj4);
IkReal x1053=(cj3*r02);
IkReal x1054=((16.0)*sj3);
IkReal x1055=((8.0)*sj3);
IkReal x1056=((12.0)*cj4);
IkReal x1057=((12.0)*sj4);
IkReal x1058=(cj3*r12);
IkReal x1059=(r11*x1048);
IkReal x1060=(r01*x1048);
IkReal x1061=(r01*x1051);
IkReal x1062=(cj3*cj4*r01);
IkReal x1063=(cj3*cj4*r11);
IkReal x1064=(cj3*r10*x1050);
IkReal x1065=(x1057*x1058);
IkReal x1066=(cj3*r00*x1050);
IkReal x1067=(x1053*x1057);
IkReal x1068=(r00*x1051*x1052);
IkReal x1069=(r02*x1051*x1056);
IkReal x1070=(r00*x1047*x1052);
IkReal x1071=(r02*x1047*x1056);
IkReal x1072=(r10*x1051*x1052);
IkReal x1073=(r12*x1047*x1056);
IkReal x1074=(r12*x1051*x1056);
IkReal x1075=(r10*x1047*x1052);
IkReal x1076=(x1059+x1070);
IkReal x1077=(x1072+x1060);
IkReal x1078=(x1068+x1064);
IkReal x1079=(x1071+x1065);
IkReal x1080=(x1075+x1066);
IkReal x1081=(x1074+x1067);
j5eval[0]=((((0.5)*(IKabs((x1076+x1069+(((-1.0)*x1079))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1054))+(((-16.0)*x1063))+((r01*x1046*x1047))+(((-1.0)*x1046*x1061)))))))+(((0.5)*(IKabs(((((-1.0)*x1052*x1053))+x1077+((r12*x1047*x1050))+(((-1.0)*r12*x1050*x1051))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs((x1078+x1069+(((-1.0)*x1076))+(((-1.0)*x1079)))))))+(((0.5)*(IKabs((x1073+x1080+(((-1.0)*x1081))+(((-1.0)*x1077)))))))+(((0.5)*(IKabs(((((-1.0)*x1052*x1058))+x1076+((r02*x1050*x1051))+(((-1.0)*r02*x1047*x1050))+(((-1.0)*x1078)))))))+(IKabs((((r01*x1047*x1049))+(((-1.0)*r10*x1055))+(((-1.0)*x1049*x1061))+(((-8.0)*x1063)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1054))+(((-1.0)*r11*x1046*x1047))+((r11*x1046*x1051))+(((-16.0)*x1062)))))))+(((0.5)*(IKabs((x1077+x1073+(((-1.0)*x1080))+(((-1.0)*x1081)))))))+(IKabs(((((-1.0)*r00*x1055))+(((-1.0)*r11*x1047*x1049))+((r11*x1049*x1051))+(((-8.0)*x1062))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1082=(r10*sj3);
IkReal x1083=(r01*sj4);
IkReal x1084=(cj1*cj2);
IkReal x1085=(cj3*cj4);
IkReal x1086=(sj1*sj2);
IkReal x1087=(cj4*r02);
IkReal x1088=((4.0)*r11*sj3);
IkReal x1089=(cj3*r12*sj4);
IkReal x1090=((4.0)*r00*sj4);
IkReal x1091=((4.0)*r10*x1085);
IkReal x1092=((12.0)*x1089);
IkReal x1093=((4.0)*x1089);
IkReal x1094=(x1084*x1090);
IkReal x1095=(x1086*x1090);
IkReal x1096=((12.0)*x1086*x1087);
IkReal x1097=((12.0)*x1084*x1087);
IkReal x1098=((4.0)*x1086*x1087);
IkReal x1099=((4.0)*x1084*x1087);
IkReal x1100=(x1094+x1088);
IkReal x1101=(x1095+x1091);
IkReal x1102=(x1093+x1099);
IkReal x1103=(x1097+x1092);
IkReal x1104=((((8.0)*x1083*x1084))+(((-8.0)*x1083*x1086))+(((-8.0)*r11*x1085))+(((-8.0)*x1082)));
op[0]=(x1100+x1098+(((-1.0)*x1102))+(((-1.0)*x1101)));
op[1]=x1104;
op[2]=(x1100+x1096+(((-1.0)*x1103))+(((-1.0)*x1101)));
op[3]=((((-16.0)*x1083*x1086))+(((16.0)*x1083*x1084))+(((-16.0)*x1082))+(((-16.0)*r11*x1085)));
op[4]=(x1101+x1096+(((-1.0)*x1100))+(((-1.0)*x1103)));
op[5]=x1104;
op[6]=(x1101+x1098+(((-1.0)*x1100))+(((-1.0)*x1102)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1105=(cj1*cj2);
IkReal x1106=((4.0)*cj4);
IkReal x1107=(sj1*sj2);
IkReal x1108=((4.0)*sj4);
IkReal x1109=(r00*sj3);
IkReal x1110=(cj3*r02);
IkReal x1111=((4.0)*r01*sj3);
IkReal x1112=((16.0)*r11*sj4);
IkReal x1113=(cj3*cj4*r01);
IkReal x1114=((12.0)*cj4*r12);
IkReal x1115=((8.0)*r11*sj4);
IkReal x1116=(cj3*r00*x1106);
IkReal x1117=((12.0)*sj4*x1110);
IkReal x1118=(x1108*x1110);
IkReal x1119=(r10*x1105*x1108);
IkReal x1120=(r10*x1107*x1108);
IkReal x1121=(x1105*x1114);
IkReal x1122=(x1107*x1114);
IkReal x1123=(r12*x1105*x1106);
IkReal x1124=(r12*x1106*x1107);
IkReal x1125=(x1111+x1120);
IkReal x1126=(x1116+x1119);
IkReal x1127=(x1118+x1124);
IkReal x1128=(x1117+x1122);
IkReal x1129=((((-8.0)*x1109))+(((-8.0)*x1113))+((x1107*x1115))+(((-1.0)*x1105*x1115)));
j5evalpoly[0]=(((htj5*x1129))+x1123+x1126+(((htj5*htj5*htj5*htj5)*((x1121+x1125+(((-1.0)*x1126))+(((-1.0)*x1128))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1123+x1125+(((-1.0)*x1127))+(((-1.0)*x1126))))))+((x1129*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1121+x1126+(((-1.0)*x1125))+(((-1.0)*x1128))))))+(((-1.0)*x1127))+(((-1.0)*x1125))+(((htj5*htj5*htj5)*(((((-16.0)*x1113))+(((-16.0)*x1109))+((x1107*x1112))+(((-1.0)*x1105*x1112)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1130=(cj5*sj4);
IkReal x1131=(sj4*sj5);
if( IKabs((((r00*x1130))+(((-1.0)*r01*x1131))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1130))+((r11*x1131))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1130))+(((-1.0)*r01*x1131))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1130))+((r11*x1131))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1130))+(((-1.0)*r01*x1131))+((cj4*r02))), ((((-1.0)*r10*x1130))+((r11*x1131))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1132=IKsin(j0);
IkReal x1133=IKcos(j0);
IkReal x1134=(r02*sj4);
IkReal x1135=((1.0)*sj3);
IkReal x1136=(r12*sj4);
IkReal x1137=(cj3*cj4);
IkReal x1138=((1.0)*cj5);
IkReal x1139=(r11*sj5);
IkReal x1140=(cj5*r01);
IkReal x1141=(r01*sj5);
IkReal x1142=(r00*sj5);
IkReal x1143=((0.39225)*cj2);
IkReal x1144=(cj5*r11);
IkReal x1145=((1.0)*sj2);
IkReal x1146=(r10*sj5);
IkReal x1147=((1.0)*cj4);
IkReal x1148=((0.39225)*sj1*sj2);
IkReal x1149=(cj1*x1132);
IkReal x1150=(cj4*cj5*sj3);
IkReal x1151=(cj1*x1133);
IkReal x1152=(sj1*x1133);
IkReal x1153=(sj1*x1132);
evalcond[0]=(((sj4*x1141))+x1132+(((-1.0)*r02*x1147))+(((-1.0)*r00*sj4*x1138)));
evalcond[1]=(((sj4*x1139))+(((-1.0)*x1133))+(((-1.0)*r12*x1147))+(((-1.0)*r10*sj4*x1138)));
evalcond[2]=((((0.10915)*x1132))+(((-1.0)*x1143*x1151))+(((-1.0)*px))+((x1133*x1148))+(((-0.09465)*x1140))+(((-0.09465)*x1142))+(((-0.425)*x1151)));
evalcond[3]=((((-1.0)*x1143*x1149))+((x1132*x1148))+(((-1.0)*py))+(((-0.10915)*x1133))+(((-0.425)*x1149))+(((-0.09465)*x1146))+(((-0.09465)*x1144)));
evalcond[4]=(((r00*x1150))+((cj2*x1152))+((sj2*x1151))+((cj3*x1140))+((cj3*x1142))+(((-1.0)*x1134*x1135))+(((-1.0)*cj4*x1135*x1141)));
evalcond[5]=((((-1.0)*r00*x1137*x1138))+((x1137*x1141))+((cj3*x1134))+((cj2*x1151))+((sj3*x1142))+((sj3*x1140))+(((-1.0)*x1145*x1152)));
evalcond[6]=(((cj2*x1153))+(((-1.0)*cj4*x1135*x1139))+((cj3*x1146))+((cj3*x1144))+((sj2*x1149))+(((-1.0)*x1135*x1136))+((r10*x1150)));
evalcond[7]=(((cj3*x1136))+((cj2*x1149))+(((-1.0)*r10*x1137*x1138))+((x1137*x1139))+((sj3*x1146))+((sj3*x1144))+(((-1.0)*x1145*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1154=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1154);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1154);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1155=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1155);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1155);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1156=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1156);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1156);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(r22,-1);
if(!x1157.valid){
continue;
}
sj4array[0]=((-1.0)*(x1157.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
IkReal x1159=x1160.value;
j5array[0]=((-1.0)*x1159);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1159)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1161=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1161))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1161))))+IKsqr(((((-1.0)*cj5*r10*x1161))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1161))), ((((-1.0)*cj5*r10*x1161))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1162=IKcos(j0);
IkReal x1163=IKsin(j0);
IkReal x1164=(cj5*r01);
IkReal x1165=(sj4*sj5);
IkReal x1166=(cj1*sj2);
IkReal x1167=((0.425)*cj1);
IkReal x1168=(cj2*sj1);
IkReal x1169=(r00*sj5);
IkReal x1170=(cj5*r11);
IkReal x1171=(r10*sj5);
IkReal x1172=((1.0)*cj5*sj4);
evalcond[0]=(x1163+((r01*x1165))+(((-1.0)*r00*x1172)));
evalcond[1]=(((r11*x1165))+(((-1.0)*x1162))+(((-1.0)*r10*x1172)));
evalcond[2]=(x1164+x1169+((x1162*x1168))+((x1162*x1166)));
evalcond[3]=(x1171+x1170+((x1163*x1166))+((x1163*x1168)));
evalcond[4]=((((-1.0)*x1162*x1167))+(((-0.09465)*x1164))+(((-0.09465)*x1169))+(((0.10915)*x1163))+(((-1.0)*px)));
evalcond[5]=((((-0.10915)*x1162))+(((-1.0)*x1163*x1167))+(((-0.09465)*x1171))+(((-0.09465)*x1170))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1173=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1173);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1173);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(r22,-1);
if(!x1174.valid){
continue;
}
sj4array[0]=((x1174.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1175=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1175);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1175);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1177 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1177.valid){
continue;
}
IkReal x1176=x1177.value;
j5array[0]=((-1.0)*x1176);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1176)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1178=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1178))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1178))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1178))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1178))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1178))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1178))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1179=IKcos(j0);
IkReal x1180=IKsin(j0);
IkReal x1181=(sj4*sj5);
IkReal x1182=(cj5*r11);
IkReal x1183=(cj1*sj2);
IkReal x1184=(cj2*sj1);
IkReal x1185=((1.0)*sj5);
IkReal x1186=((0.09465)*sj5);
IkReal x1187=((1.0)*cj5);
IkReal x1188=((0.425)*cj1);
evalcond[0]=((((-1.0)*r00*sj4*x1187))+x1180+((r01*x1181)));
evalcond[1]=(((r11*x1181))+(((-1.0)*r10*sj4*x1187))+(((-1.0)*x1179)));
evalcond[2]=((((-1.0)*r01*x1187))+((x1179*x1184))+((x1179*x1183))+(((-1.0)*r00*x1185)));
evalcond[3]=(((x1180*x1183))+((x1180*x1184))+(((-1.0)*r10*x1185))+(((-1.0)*x1182)));
evalcond[4]=((((-0.09465)*cj5*r01))+(((0.10915)*x1180))+(((-1.0)*x1179*x1188))+(((-1.0)*px))+(((-1.0)*r00*x1186)));
evalcond[5]=((((-0.09465)*x1182))+(((-0.10915)*x1179))+(((-1.0)*r10*x1186))+(((-1.0)*py))+(((-1.0)*x1180*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1189=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1189);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1189);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(r22,-1);
if(!x1190.valid){
continue;
}
sj4array[0]=((x1190.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1191=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1191);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1191);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
IkReal x1192=x1193.value;
j5array[0]=((-1.0)*x1192);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1192)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1194=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1194))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1194))))+IKsqr(((((-1.0)*cj5*r10*x1194))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1194))), ((((-1.0)*cj5*r10*x1194))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1195=IKcos(j0);
IkReal x1196=IKsin(j0);
IkReal x1197=(cj5*r01);
IkReal x1198=(sj4*sj5);
IkReal x1199=(cj1*cj2);
IkReal x1200=(sj1*sj2);
IkReal x1201=((0.425)*cj1);
IkReal x1202=(r00*sj5);
IkReal x1203=(cj5*r11);
IkReal x1204=(r10*sj5);
IkReal x1205=((0.39225)*x1195);
IkReal x1206=((1.0)*x1195);
IkReal x1207=((1.0)*cj5*sj4);
IkReal x1208=(x1196*x1200);
evalcond[0]=(x1196+((r01*x1198))+(((-1.0)*r00*x1207)));
evalcond[1]=((((-1.0)*r10*x1207))+((r11*x1198))+(((-1.0)*x1206)));
evalcond[2]=(x1197+x1202+((x1195*x1199))+(((-1.0)*x1200*x1206)));
evalcond[3]=(x1204+x1203+((x1196*x1199))+(((-1.0)*x1208)));
evalcond[4]=((((-1.0)*x1199*x1205))+(((-0.09465)*x1197))+(((0.10915)*x1196))+(((-1.0)*px))+((x1200*x1205))+(((-1.0)*x1195*x1201))+(((-0.09465)*x1202)));
evalcond[5]=((((0.39225)*x1208))+(((-0.39225)*x1196*x1199))+(((-1.0)*x1196*x1201))+(((-0.10915)*x1195))+(((-1.0)*py))+(((-0.09465)*x1203))+(((-0.09465)*x1204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1209=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(r22,-1);
if(!x1210.valid){
continue;
}
sj4array[0]=((-1.0)*(x1210.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1211=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1211);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1211);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
IkReal x1212=x1213.value;
j5array[0]=((-1.0)*x1212);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1212)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1214=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1214))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1214))))+IKsqr(((((-1.0)*cj5*r10*x1214))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1214))), ((((-1.0)*cj5*r10*x1214))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1215=IKcos(j0);
IkReal x1216=IKsin(j0);
IkReal x1217=(sj4*sj5);
IkReal x1218=(cj1*cj2);
IkReal x1219=(cj5*r11);
IkReal x1220=(sj1*sj2);
IkReal x1221=((1.0)*sj5);
IkReal x1222=((0.09465)*sj5);
IkReal x1223=((1.0)*cj5);
IkReal x1224=((0.425)*cj1);
IkReal x1225=((0.39225)*x1215);
IkReal x1226=((1.0)*x1215);
IkReal x1227=(x1216*x1220);
evalcond[0]=(x1216+((r01*x1217))+(((-1.0)*r00*sj4*x1223)));
evalcond[1]=(((r11*x1217))+(((-1.0)*x1226))+(((-1.0)*r10*sj4*x1223)));
evalcond[2]=((((-1.0)*r01*x1223))+(((-1.0)*r00*x1221))+(((-1.0)*x1220*x1226))+((x1215*x1218)));
evalcond[3]=((((-1.0)*x1227))+(((-1.0)*r10*x1221))+((x1216*x1218))+(((-1.0)*x1219)));
evalcond[4]=((((-1.0)*r00*x1222))+(((-1.0)*x1218*x1225))+(((-0.09465)*cj5*r01))+(((-1.0)*px))+(((-1.0)*x1215*x1224))+((x1220*x1225))+(((0.10915)*x1216)));
evalcond[5]=((((-0.10915)*x1215))+(((-0.09465)*x1219))+(((-1.0)*py))+(((0.39225)*x1227))+(((-0.39225)*x1216*x1218))+(((-1.0)*r10*x1222))+(((-1.0)*x1216*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(r22,-1);
if(!x1228.valid){
continue;
}
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(sj3,-1);
if(!x1229.valid){
continue;
}
sj4array[0]=((x1228.value)*(x1229.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1230=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1230);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1230);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1231=((4.0)*r01);
IkReal x1232=((16.0)*r00);
IkReal x1233=(cj3*sj2);
IkReal x1234=((8.0)*r00);
IkReal x1235=(cj2*cj3);
IkReal x1236=(cj4*r01);
IkReal x1237=((16.0)*cj1);
IkReal x1238=((8.0)*sj1);
IkReal x1239=((16.0)*sj1);
IkReal x1240=((8.0)*cj1);
IkReal x1241=(cj2*sj3);
IkReal x1242=(sj2*sj3);
IkReal x1243=(sj1*x1241);
IkReal x1244=((4.0)*cj4*r00);
IkReal x1245=(cj1*x1242);
IkReal x1246=(((sj1*x1231*x1233))+((sj1*x1242*x1244))+((x1231*x1243))+((x1231*x1245)));
IkReal x1247=(((cj1*x1241*x1244))+((sj1*x1235*x1244))+((cj1*x1231*x1235))+((cj1*x1233*x1244)));
IkReal x1248=(x1246+(((-1.0)*x1247)));
IkReal x1249=((((-1.0)*x1236*x1240*x1241))+(((-1.0)*x1233*x1236*x1240))+(((-1.0)*x1235*x1236*x1238))+((cj1*x1234*x1235))+(((-1.0)*sj1*x1233*x1234))+((x1236*x1238*x1242))+(((-1.0)*x1234*x1243))+(((-1.0)*x1234*x1245)));
IkReal x1250=(x1247+(((-1.0)*x1246)));
op[0]=x1248;
op[1]=x1249;
op[2]=x1248;
op[3]=((((-1.0)*x1233*x1236*x1237))+(((-1.0)*x1235*x1236*x1239))+(((-1.0)*x1236*x1237*x1241))+((cj1*x1232*x1235))+((x1236*x1239*x1242))+(((-1.0)*sj1*x1232*x1233))+(((-1.0)*x1232*x1243))+(((-1.0)*x1232*x1245)));
op[4]=x1250;
op[5]=x1249;
op[6]=x1250;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1251=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1251))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1251))))+IKsqr(((((-1.0)*cj5*r10*x1251))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1251))), ((((-1.0)*cj5*r10*x1251))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1252=IKcos(j0);
IkReal x1253=IKsin(j0);
IkReal x1254=((1.0)*cj3);
IkReal x1255=(r11*sj5);
IkReal x1256=(cj5*r01);
IkReal x1257=(cj1*cj2);
IkReal x1258=(cj5*r11);
IkReal x1259=(r01*sj5);
IkReal x1260=(cj3*cj4);
IkReal x1261=(r00*sj5);
IkReal x1262=(r10*sj5);
IkReal x1263=(cj4*cj5*r00);
IkReal x1264=(cj4*cj5*r10);
IkReal x1265=((1.0)*cj4*sj3);
IkReal x1266=(cj1*x1253);
IkReal x1267=(cj1*x1252);
IkReal x1268=(sj1*x1252);
IkReal x1269=((1.0)*cj5*sj4);
IkReal x1270=(sj1*sj2*x1253);
evalcond[0]=(x1253+((sj4*x1259))+(((-1.0)*r00*x1269)));
evalcond[1]=((((-1.0)*r10*x1269))+((sj4*x1255))+(((-1.0)*x1252)));
evalcond[2]=(((cj3*x1261))+((cj3*x1256))+((cj2*x1268))+(((-1.0)*x1259*x1265))+((sj3*x1263))+((sj2*x1267)));
evalcond[3]=(((cj3*x1262))+((cj3*x1258))+(((-1.0)*x1255*x1265))+((cj2*sj1*x1253))+((sj3*x1264))+((sj2*x1266)));
evalcond[4]=(((x1259*x1260))+(((-1.0)*x1254*x1263))+((x1252*x1257))+(((-1.0)*sj2*x1268))+((sj3*x1256))+((sj3*x1261)));
evalcond[5]=(((x1253*x1257))+((x1255*x1260))+(((-1.0)*x1254*x1264))+(((-1.0)*x1270))+((sj3*x1258))+((sj3*x1262)));
evalcond[6]=((((0.39225)*sj2*x1268))+(((-0.39225)*x1252*x1257))+(((-0.09465)*x1256))+(((-0.09465)*x1261))+(((0.10915)*x1253))+(((-1.0)*px))+(((-0.425)*x1267)));
evalcond[7]=((((-0.10915)*x1252))+(((0.39225)*x1270))+(((-0.09465)*x1258))+(((-0.09465)*x1262))+(((-0.39225)*x1253*x1257))+(((-1.0)*py))+(((-0.425)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(cj3,-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(r22,-1);
if(!x1272.valid){
continue;
}
sj4array[0]=((-1.0)*(x1271.value)*(x1272.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1273=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1273);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1273);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1274=((4.0)*r01);
IkReal x1275=((16.0)*r00);
IkReal x1276=(cj3*sj2);
IkReal x1277=((8.0)*r00);
IkReal x1278=(cj2*cj3);
IkReal x1279=(cj4*r01);
IkReal x1280=((16.0)*cj1);
IkReal x1281=((8.0)*sj1);
IkReal x1282=((16.0)*sj1);
IkReal x1283=((8.0)*cj1);
IkReal x1284=(cj2*sj3);
IkReal x1285=(sj2*sj3);
IkReal x1286=(sj1*x1284);
IkReal x1287=((4.0)*cj4*r00);
IkReal x1288=(cj1*x1285);
IkReal x1289=(((sj1*x1285*x1287))+((sj1*x1274*x1276))+((x1274*x1286))+((x1274*x1288)));
IkReal x1290=(((cj1*x1274*x1278))+((cj1*x1284*x1287))+((cj1*x1276*x1287))+((sj1*x1278*x1287)));
IkReal x1291=(x1289+(((-1.0)*x1290)));
IkReal x1292=(((x1279*x1281*x1285))+(((-1.0)*sj1*x1276*x1277))+((cj1*x1277*x1278))+(((-1.0)*x1277*x1288))+(((-1.0)*x1277*x1286))+(((-1.0)*x1276*x1279*x1283))+(((-1.0)*x1278*x1279*x1281))+(((-1.0)*x1279*x1283*x1284)));
IkReal x1293=(x1290+(((-1.0)*x1289)));
op[0]=x1291;
op[1]=x1292;
op[2]=x1291;
op[3]=((((-1.0)*x1279*x1280*x1284))+(((-1.0)*x1275*x1286))+(((-1.0)*x1275*x1288))+((x1279*x1282*x1285))+(((-1.0)*sj1*x1275*x1276))+((cj1*x1275*x1278))+(((-1.0)*x1276*x1279*x1280))+(((-1.0)*x1278*x1279*x1282)));
op[4]=x1293;
op[5]=x1292;
op[6]=x1293;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1294=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1294))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1294))))+IKsqr(((((-1.0)*cj5*r10*x1294))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1294))), ((((-1.0)*cj5*r10*x1294))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1295=IKcos(j0);
IkReal x1296=IKsin(j0);
IkReal x1297=((1.0)*cj3);
IkReal x1298=(r11*sj5);
IkReal x1299=(cj5*r01);
IkReal x1300=(cj1*cj2);
IkReal x1301=(cj5*r11);
IkReal x1302=(r01*sj5);
IkReal x1303=(cj3*cj4);
IkReal x1304=(r00*sj5);
IkReal x1305=(r10*sj5);
IkReal x1306=(cj4*cj5*r00);
IkReal x1307=(cj4*cj5*r10);
IkReal x1308=((1.0)*cj4*sj3);
IkReal x1309=(cj1*x1296);
IkReal x1310=(cj1*x1295);
IkReal x1311=(sj1*x1295);
IkReal x1312=((1.0)*cj5*sj4);
IkReal x1313=(sj1*sj2*x1296);
evalcond[0]=(x1296+(((-1.0)*r00*x1312))+((sj4*x1302)));
evalcond[1]=((((-1.0)*x1295))+((sj4*x1298))+(((-1.0)*r10*x1312)));
evalcond[2]=(((sj2*x1310))+((cj3*x1299))+((sj3*x1306))+((cj2*x1311))+((cj3*x1304))+(((-1.0)*x1302*x1308)));
evalcond[3]=(((sj2*x1309))+((sj3*x1307))+((cj2*sj1*x1296))+((cj3*x1305))+((cj3*x1301))+(((-1.0)*x1298*x1308)));
evalcond[4]=(((sj3*x1299))+((sj3*x1304))+((x1295*x1300))+(((-1.0)*x1297*x1306))+((x1302*x1303))+(((-1.0)*sj2*x1311)));
evalcond[5]=(((sj3*x1305))+((sj3*x1301))+(((-1.0)*x1313))+(((-1.0)*x1297*x1307))+((x1296*x1300))+((x1298*x1303)));
evalcond[6]=((((-0.425)*x1310))+(((0.10915)*x1296))+(((-1.0)*px))+(((-0.09465)*x1304))+(((0.39225)*sj2*x1311))+(((-0.39225)*x1295*x1300))+(((-0.09465)*x1299)));
evalcond[7]=((((-0.39225)*x1296*x1300))+(((-1.0)*py))+(((-0.10915)*x1295))+(((-0.09465)*x1305))+(((-0.09465)*x1301))+(((-0.425)*x1309))+(((0.39225)*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1316 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1316.valid){
continue;
}
IkReal x1314=((1.0)*(x1316.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1317=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1317.valid){
continue;
}
if( (((-1.0)*(x1317.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1317.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1315=((-1.0)*(IKasin(((-1.0)*(x1317.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1314))+(((-1.0)*x1315)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1314))+(((1.0)*x1315)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1318=cj5*cj5;
IkReal x1319=r21*r21;
IkReal x1320=(sj3*x1318);
IkReal x1321=(((sj3*(r22*r22)))+((x1320*(r20*r20)))+((sj3*x1319))+(((-1.0)*x1319*x1320))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1321;
j4eval[1]=IKsign(x1321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1322=cj5*cj5;
IkReal x1323=r21*r21;
IkReal x1324=((1.0)*cj3);
IkReal x1325=(cj3*x1322);
IkReal x1326=((((-1.0)*x1323*x1324))+((x1323*x1325))+(((-1.0)*x1322*x1324*(r20*r20)))+(((-1.0)*x1324*(r22*r22)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1326;
j4eval[1]=IKsign(x1326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1327=cj2*cj2;
IkReal x1328=cj1*cj1;
IkReal x1329=(cj1*sj1*sj2);
IkReal x1330=(cj2*x1328);
IkReal x1331=(x1327*x1328);
j0eval[0]=((-6.19369221392727)+(((11.4971359451148)*cj2*x1329))+(((-1.0)*x1328))+(((-12.4570625281677)*x1330))+(((-11.4971359451148)*x1331))+(((12.4570625281677)*x1329))+(((5.74856797255738)*x1327)));
j0eval[1]=IKsign(((-66309514.0)+(((-123088050.0)*x1331))+(((-133365000.0)*x1330))+(((133365000.0)*x1329))+(((123088050.0)*cj2*x1329))+(((-10705975.0)*x1328))+(((61544025.0)*x1327))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1332=((1.0)*cj5);
IkReal x1333=((1.0)*sj5);
IkReal x1334=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1334;
j0eval[1]=IKsign(x1334);
j0eval[2]=((IKabs(((((-1.0)*r10*x1333))+(((-1.0)*r11*x1332)))))+(IKabs(((((-1.0)*r00*x1333))+(((-1.0)*r01*x1332))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1335=cj5*cj5;
IkReal x1336=r21*r21;
IkReal x1337=(sj1*sj2);
IkReal x1338=(r21*sj5);
IkReal x1339=(cj5*r20);
IkReal x1340=(cj1*cj2);
IkReal x1341=(x1336+(r22*r22)+((x1335*(r20*r20)))+(((-2.0)*x1338*x1339))+(((-1.0)*x1335*x1336)));
j4eval[0]=x1341;
j4eval[1]=IKsign(x1341);
j4eval[2]=((IKabs((((r22*x1337))+(((-1.0)*r22*x1340)))))+(IKabs(((((-1.0)*x1337*x1339))+((x1337*x1338))+((x1339*x1340))+(((-1.0)*x1338*x1340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1342=IKsin(j0);
IkReal x1343=IKcos(j0);
evalcond[0]=((((-0.425)*x1343))+(((-1.0)*px))+(((0.10915)*x1342)));
evalcond[1]=((((-0.425)*x1342))+(((-1.0)*py))+(((-0.10915)*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1344=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1344;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1345=cj5*cj5;
IkReal x1346=((1.0)*r21);
IkReal x1347=(cj5*sj5);
IkReal x1348=((1.0)*r20);
IkReal x1349=((((-1.0)*r00*x1346*x1347))+((r01*r21))+(((-1.0)*r01*x1345*x1346))+(((-1.0)*r01*x1347*x1348))+((r02*r22))+((r00*r20*x1345)));
j4eval[0]=x1349;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1348))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1350=cj5*cj5;
IkReal x1351=(r21*sj5);
IkReal x1352=(r11*r21);
IkReal x1353=((1.0)*cj5*r20);
IkReal x1354=(x1352+((r10*r20*x1350))+(((-1.0)*cj5*r10*x1351))+(((-1.0)*x1350*x1352))+((r12*r22))+(((-1.0)*r11*sj5*x1353)));
j4eval[0]=x1354;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1351))+(((-1.0)*sj0*x1353))))));
j4eval[2]=IKsign(x1354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1355=cj5*cj5;
IkReal x1356=(r21*sj5);
IkReal x1357=(r11*r21);
IkReal x1358=((1.0)*cj5*r20);
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(IKsign((x1357+((r10*r20*x1355))+(((-1.0)*cj5*r10*x1356))+((r12*r22))+(((-1.0)*r11*sj5*x1358))+(((-1.0)*x1355*x1357)))),-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1356))+(((-1.0)*sj0*x1358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1359.value)))+(x1360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1361=IKsin(j4);
IkReal x1362=IKcos(j4);
IkReal x1363=(r11*sj5);
IkReal x1364=(cj5*r00);
IkReal x1365=(cj5*r10);
IkReal x1366=(r21*sj5);
IkReal x1367=(cj5*r20);
IkReal x1368=(r01*sj5);
IkReal x1369=((1.0)*x1362);
IkReal x1370=((1.0)*x1361);
evalcond[0]=(((x1361*x1366))+(((-1.0)*r22*x1369))+(((-1.0)*x1367*x1370)));
evalcond[1]=((((-1.0)*x1366*x1369))+(((-1.0)*r22*x1370))+((x1362*x1367)));
evalcond[2]=(sj0+(((-1.0)*r02*x1369))+((x1361*x1368))+(((-1.0)*x1364*x1370)));
evalcond[3]=(cj0+(((-1.0)*r02*x1370))+(((-1.0)*x1368*x1369))+((x1362*x1364)));
evalcond[4]=(sj0+(((-1.0)*r12*x1370))+(((-1.0)*x1363*x1369))+((x1362*x1365)));
evalcond[5]=((((-1.0)*x1365*x1370))+(((-1.0)*r12*x1369))+((x1361*x1363))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1371=cj5*cj5;
IkReal x1372=((1.0)*r21);
IkReal x1373=(cj5*sj5);
IkReal x1374=((1.0)*r20);
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign((((r00*r20*x1371))+((r01*r21))+(((-1.0)*r01*x1371*x1372))+(((-1.0)*r00*x1372*x1373))+(((-1.0)*r01*x1373*x1374))+((r02*r22)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=(r11*sj5);
IkReal x1380=(cj5*r00);
IkReal x1381=(cj5*r10);
IkReal x1382=(r21*sj5);
IkReal x1383=(cj5*r20);
IkReal x1384=(r01*sj5);
IkReal x1385=((1.0)*x1378);
IkReal x1386=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1383*x1386))+((x1377*x1382))+(((-1.0)*r22*x1385)));
evalcond[1]=((((-1.0)*x1382*x1385))+(((-1.0)*r22*x1386))+((x1378*x1383)));
evalcond[2]=(sj0+(((-1.0)*r02*x1385))+(((-1.0)*x1380*x1386))+((x1377*x1384)));
evalcond[3]=(cj0+(((-1.0)*x1384*x1385))+(((-1.0)*r02*x1386))+((x1378*x1380)));
evalcond[4]=((((-1.0)*r12*x1386))+sj0+((x1378*x1381))+(((-1.0)*x1379*x1385)));
evalcond[5]=((((-1.0)*r12*x1385))+((x1377*x1379))+(((-1.0)*x1381*x1386))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1387.valid){
continue;
}
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1387.value)))+(x1388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1389=IKsin(j4);
IkReal x1390=IKcos(j4);
IkReal x1391=(r11*sj5);
IkReal x1392=(cj5*r00);
IkReal x1393=(cj5*r10);
IkReal x1394=(r21*sj5);
IkReal x1395=(cj5*r20);
IkReal x1396=(r01*sj5);
IkReal x1397=((1.0)*x1390);
IkReal x1398=((1.0)*x1389);
evalcond[0]=((((-1.0)*x1395*x1398))+(((-1.0)*r22*x1397))+((x1389*x1394)));
evalcond[1]=((((-1.0)*x1394*x1397))+((x1390*x1395))+(((-1.0)*r22*x1398)));
evalcond[2]=((((-1.0)*x1392*x1398))+sj0+(((-1.0)*r02*x1397))+((x1389*x1396)));
evalcond[3]=((((-1.0)*r02*x1398))+cj0+(((-1.0)*x1396*x1397))+((x1390*x1392)));
evalcond[4]=((((-1.0)*r12*x1398))+sj0+(((-1.0)*x1391*x1397))+((x1390*x1393)));
evalcond[5]=((((-1.0)*r12*x1397))+(((-1.0)*x1393*x1398))+((x1389*x1391))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1399=IKsin(j0);
IkReal x1400=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1400))+(((0.10915)*x1399)));
evalcond[1]=((((-0.10915)*x1400))+(((-0.425)*x1399))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1401=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1401;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1402=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1402;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1403=cj5*cj5;
IkReal x1404=((1.0)*r21);
IkReal x1405=(cj5*r20);
IkReal x1406=((((-1.0)*r01*x1403*x1404))+((r01*r21))+((r00*r20*x1403))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1404))+(((-1.0)*r01*sj5*x1405)));
j4eval[0]=x1406;
j4eval[1]=IKsign(x1406);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x1404))+((sj0*x1405)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1407=cj5*cj5;
IkReal x1408=((1.0)*r21);
IkReal x1409=(cj5*r20);
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1407*x1408))+((r00*r20*x1407))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1408))+(((-1.0)*r01*sj5*x1409)))),-1);
if(!x1410.valid){
continue;
}
CheckValue<IkReal> x1411 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1408))+((sj0*x1409)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1410.value)))+(x1411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1412=IKsin(j4);
IkReal x1413=IKcos(j4);
IkReal x1414=((1.0)*cj0);
IkReal x1415=(cj5*r00);
IkReal x1416=(r11*sj5);
IkReal x1417=(cj5*r10);
IkReal x1418=(r21*sj5);
IkReal x1419=(cj5*r20);
IkReal x1420=(r01*sj5);
IkReal x1421=((1.0)*x1413);
IkReal x1422=((1.0)*x1412);
evalcond[0]=(((x1412*x1418))+(((-1.0)*x1419*x1422))+(((-1.0)*r22*x1421)));
evalcond[1]=(((x1413*x1419))+(((-1.0)*x1418*x1421))+(((-1.0)*r22*x1422)));
evalcond[2]=((((-1.0)*x1415*x1422))+sj0+(((-1.0)*r02*x1421))+((x1412*x1420)));
evalcond[3]=((((-1.0)*x1414))+((x1412*x1416))+(((-1.0)*x1417*x1422))+(((-1.0)*r12*x1421)));
evalcond[4]=(((x1413*x1415))+(((-1.0)*x1414))+(((-1.0)*x1420*x1421))+(((-1.0)*r02*x1422)));
evalcond[5]=((((-1.0)*sj0))+((x1413*x1417))+(((-1.0)*x1416*x1421))+(((-1.0)*r12*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1423=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1423.valid){
continue;
}
CheckValue<IkReal> x1424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1423.value)))+(x1424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1425=IKsin(j4);
IkReal x1426=IKcos(j4);
IkReal x1427=((1.0)*cj0);
IkReal x1428=(cj5*r00);
IkReal x1429=(r11*sj5);
IkReal x1430=(cj5*r10);
IkReal x1431=(r21*sj5);
IkReal x1432=(cj5*r20);
IkReal x1433=(r01*sj5);
IkReal x1434=((1.0)*x1426);
IkReal x1435=((1.0)*x1425);
evalcond[0]=((((-1.0)*r22*x1434))+((x1425*x1431))+(((-1.0)*x1432*x1435)));
evalcond[1]=((((-1.0)*r22*x1435))+(((-1.0)*x1431*x1434))+((x1426*x1432)));
evalcond[2]=(sj0+(((-1.0)*x1428*x1435))+(((-1.0)*r02*x1434))+((x1425*x1433)));
evalcond[3]=(((x1425*x1429))+(((-1.0)*r12*x1434))+(((-1.0)*x1430*x1435))+(((-1.0)*x1427)));
evalcond[4]=(((x1426*x1428))+(((-1.0)*r02*x1435))+(((-1.0)*x1433*x1434))+(((-1.0)*x1427)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1435))+(((-1.0)*x1429*x1434))+((x1426*x1430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1436.value)))+(x1437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1438=IKsin(j4);
IkReal x1439=IKcos(j4);
IkReal x1440=((1.0)*cj0);
IkReal x1441=(cj5*r00);
IkReal x1442=(r11*sj5);
IkReal x1443=(cj5*r10);
IkReal x1444=(r21*sj5);
IkReal x1445=(cj5*r20);
IkReal x1446=(r01*sj5);
IkReal x1447=((1.0)*x1439);
IkReal x1448=((1.0)*x1438);
evalcond[0]=(((x1438*x1444))+(((-1.0)*r22*x1447))+(((-1.0)*x1445*x1448)));
evalcond[1]=((((-1.0)*r22*x1448))+((x1439*x1445))+(((-1.0)*x1444*x1447)));
evalcond[2]=(((x1438*x1446))+sj0+(((-1.0)*x1441*x1448))+(((-1.0)*r02*x1447)));
evalcond[3]=(((x1438*x1442))+(((-1.0)*r12*x1447))+(((-1.0)*x1440))+(((-1.0)*x1443*x1448)));
evalcond[4]=((((-1.0)*x1446*x1447))+((x1439*x1441))+(((-1.0)*x1440))+(((-1.0)*r02*x1448)));
evalcond[5]=((((-1.0)*sj0))+((x1439*x1443))+(((-1.0)*r12*x1448))+(((-1.0)*x1442*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1449=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1449;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1450=cj5*cj5;
IkReal x1451=((1.0)*r21);
IkReal x1452=(cj5*sj5);
IkReal x1453=((1.0)*r20);
IkReal x1454=((((-1.0)*r01*x1452*x1453))+(((-1.0)*r00*x1451*x1452))+((r01*r21))+((r00*r20*x1450))+(((-1.0)*r01*x1450*x1451))+((r02*r22)));
j4eval[0]=x1454;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1453))))));
j4eval[2]=IKsign(x1454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1455=cj5*cj5;
IkReal x1456=(r21*sj5);
IkReal x1457=(r11*r21);
IkReal x1458=((1.0)*cj5*r20);
IkReal x1459=(((r10*r20*x1455))+(((-1.0)*r11*sj5*x1458))+(((-1.0)*cj5*r10*x1456))+((r12*r22))+(((-1.0)*x1455*x1457))+x1457);
j4eval[0]=x1459;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1458))+((sj0*x1456)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=cj5*cj5;
IkReal x1461=(r21*sj5);
IkReal x1462=(r11*r21);
IkReal x1463=((1.0)*cj5*r20);
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1461))+((r12*r22))+(((-1.0)*x1460*x1462))+((r10*r20*x1460))+x1462+(((-1.0)*r11*sj5*x1463)))),-1);
if(!x1464.valid){
continue;
}
CheckValue<IkReal> x1465 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1463))+((sj0*x1461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1464.value)))+(x1465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1466=IKsin(j4);
IkReal x1467=IKcos(j4);
IkReal x1468=(r11*sj5);
IkReal x1469=(cj5*r00);
IkReal x1470=(cj5*r10);
IkReal x1471=(r21*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r01*sj5);
IkReal x1474=((1.0)*x1467);
IkReal x1475=((1.0)*x1466);
evalcond[0]=((((-1.0)*r22*x1474))+((x1466*x1471))+(((-1.0)*x1472*x1475)));
evalcond[1]=((((-1.0)*r22*x1475))+(((-1.0)*x1471*x1474))+((x1467*x1472)));
evalcond[2]=(((x1466*x1473))+sj0+(((-1.0)*x1469*x1475))+(((-1.0)*r02*x1474)));
evalcond[3]=(cj0+(((-1.0)*r02*x1475))+((x1467*x1469))+(((-1.0)*x1473*x1474)));
evalcond[4]=(sj0+((x1467*x1470))+(((-1.0)*r12*x1475))+(((-1.0)*x1468*x1474)));
evalcond[5]=((((-1.0)*x1470*x1475))+(((-1.0)*r12*x1474))+((x1466*x1468))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=cj5*cj5;
IkReal x1477=((1.0)*r21);
IkReal x1478=(cj5*sj5);
IkReal x1479=((1.0)*r20);
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1476*x1477))+(((-1.0)*r00*x1477*x1478))+((r01*r21))+((r02*r22))+((r00*r20*x1476))+(((-1.0)*r01*x1478*x1479)))),-1);
if(!x1480.valid){
continue;
}
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1480.value)))+(x1481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1482=IKsin(j4);
IkReal x1483=IKcos(j4);
IkReal x1484=(r11*sj5);
IkReal x1485=(cj5*r00);
IkReal x1486=(cj5*r10);
IkReal x1487=(r21*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=(r01*sj5);
IkReal x1490=((1.0)*x1483);
IkReal x1491=((1.0)*x1482);
evalcond[0]=(((x1482*x1487))+(((-1.0)*r22*x1490))+(((-1.0)*x1488*x1491)));
evalcond[1]=((((-1.0)*x1487*x1490))+((x1483*x1488))+(((-1.0)*r22*x1491)));
evalcond[2]=(sj0+((x1482*x1489))+(((-1.0)*x1485*x1491))+(((-1.0)*r02*x1490)));
evalcond[3]=(cj0+((x1483*x1485))+(((-1.0)*r02*x1491))+(((-1.0)*x1489*x1490)));
evalcond[4]=((((-1.0)*r12*x1491))+sj0+(((-1.0)*x1484*x1490))+((x1483*x1486)));
evalcond[5]=((((-1.0)*r12*x1490))+((x1482*x1484))+(((-1.0)*x1486*x1491))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1492.value)))+(x1493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1494=IKsin(j4);
IkReal x1495=IKcos(j4);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r00);
IkReal x1498=(cj5*r10);
IkReal x1499=(r21*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r01*sj5);
IkReal x1502=((1.0)*x1495);
IkReal x1503=((1.0)*x1494);
evalcond[0]=((((-1.0)*r22*x1502))+((x1494*x1499))+(((-1.0)*x1500*x1503)));
evalcond[1]=((((-1.0)*x1499*x1502))+(((-1.0)*r22*x1503))+((x1495*x1500)));
evalcond[2]=(((x1494*x1501))+sj0+(((-1.0)*r02*x1502))+(((-1.0)*x1497*x1503)));
evalcond[3]=(cj0+((x1495*x1497))+(((-1.0)*x1501*x1502))+(((-1.0)*r02*x1503)));
evalcond[4]=(sj0+((x1495*x1498))+(((-1.0)*x1496*x1502))+(((-1.0)*r12*x1503)));
evalcond[5]=((((-1.0)*x1498*x1503))+((x1494*x1496))+(((-1.0)*cj0))+(((-1.0)*r12*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1504=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1504;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1505=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1505;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1506=cj5*cj5;
IkReal x1507=((1.0)*r21);
IkReal x1508=(cj5*r20);
IkReal x1509=(((r01*r21))+((r00*r20*x1506))+(((-1.0)*r01*x1506*x1507))+(((-1.0)*r01*sj5*x1508))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1507)));
j4eval[0]=x1509;
j4eval[1]=IKsign(x1509);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1507))+((sj0*x1508))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1510=cj5*cj5;
IkReal x1511=((1.0)*r21);
IkReal x1512=(cj5*r20);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1510*x1511))+(((-1.0)*cj5*r00*sj5*x1511))+((r02*r22))+((r00*r20*x1510))+(((-1.0)*r01*sj5*x1512)))),-1);
if(!x1513.valid){
continue;
}
CheckValue<IkReal> x1514 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1511))+((sj0*x1512)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1513.value)))+(x1514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1515=IKsin(j4);
IkReal x1516=IKcos(j4);
IkReal x1517=((1.0)*cj0);
IkReal x1518=(cj5*r00);
IkReal x1519=(r11*sj5);
IkReal x1520=(cj5*r10);
IkReal x1521=(r21*sj5);
IkReal x1522=(cj5*r20);
IkReal x1523=(r01*sj5);
IkReal x1524=((1.0)*x1516);
IkReal x1525=((1.0)*x1515);
evalcond[0]=((((-1.0)*r22*x1524))+(((-1.0)*x1522*x1525))+((x1515*x1521)));
evalcond[1]=((((-1.0)*r22*x1525))+((x1516*x1522))+(((-1.0)*x1521*x1524)));
evalcond[2]=(sj0+(((-1.0)*x1518*x1525))+(((-1.0)*r02*x1524))+((x1515*x1523)));
evalcond[3]=((((-1.0)*r12*x1524))+(((-1.0)*x1517))+((x1515*x1519))+(((-1.0)*x1520*x1525)));
evalcond[4]=((((-1.0)*x1517))+(((-1.0)*r02*x1525))+((x1516*x1518))+(((-1.0)*x1523*x1524)));
evalcond[5]=((((-1.0)*r12*x1525))+(((-1.0)*sj0))+(((-1.0)*x1519*x1524))+((x1516*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1526.valid){
continue;
}
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1526.value)))+(x1527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1528=IKsin(j4);
IkReal x1529=IKcos(j4);
IkReal x1530=((1.0)*cj0);
IkReal x1531=(cj5*r00);
IkReal x1532=(r11*sj5);
IkReal x1533=(cj5*r10);
IkReal x1534=(r21*sj5);
IkReal x1535=(cj5*r20);
IkReal x1536=(r01*sj5);
IkReal x1537=((1.0)*x1529);
IkReal x1538=((1.0)*x1528);
evalcond[0]=(((x1528*x1534))+(((-1.0)*r22*x1537))+(((-1.0)*x1535*x1538)));
evalcond[1]=((((-1.0)*r22*x1538))+((x1529*x1535))+(((-1.0)*x1534*x1537)));
evalcond[2]=(sj0+((x1528*x1536))+(((-1.0)*x1531*x1538))+(((-1.0)*r02*x1537)));
evalcond[3]=((((-1.0)*r12*x1537))+((x1528*x1532))+(((-1.0)*x1530))+(((-1.0)*x1533*x1538)));
evalcond[4]=((((-1.0)*x1530))+(((-1.0)*r02*x1538))+((x1529*x1531))+(((-1.0)*x1536*x1537)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1538))+(((-1.0)*x1532*x1537))+((x1529*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1541=IKsin(j4);
IkReal x1542=IKcos(j4);
IkReal x1543=((1.0)*cj0);
IkReal x1544=(cj5*r00);
IkReal x1545=(r11*sj5);
IkReal x1546=(cj5*r10);
IkReal x1547=(r21*sj5);
IkReal x1548=(cj5*r20);
IkReal x1549=(r01*sj5);
IkReal x1550=((1.0)*x1542);
IkReal x1551=((1.0)*x1541);
evalcond[0]=(((x1541*x1547))+(((-1.0)*r22*x1550))+(((-1.0)*x1548*x1551)));
evalcond[1]=((((-1.0)*r22*x1551))+(((-1.0)*x1547*x1550))+((x1542*x1548)));
evalcond[2]=(sj0+((x1541*x1549))+(((-1.0)*r02*x1550))+(((-1.0)*x1544*x1551)));
evalcond[3]=((((-1.0)*x1546*x1551))+((x1541*x1545))+(((-1.0)*r12*x1550))+(((-1.0)*x1543)));
evalcond[4]=((((-1.0)*x1549*x1550))+(((-1.0)*r02*x1551))+(((-1.0)*x1543))+((x1542*x1544)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1545*x1550))+(((-1.0)*r12*x1551))+((x1542*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1552=IKsin(j0);
IkReal x1553=IKcos(j0);
evalcond[0]=((((0.425)*x1553))+(((-1.0)*px))+(((0.10915)*x1552)));
evalcond[1]=((((0.425)*x1552))+(((-1.0)*py))+(((-0.10915)*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1554=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1554;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1555=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1555;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1556=cj5*cj5;
IkReal x1557=((1.0)*r21);
IkReal x1558=(cj5*r20);
IkReal x1559=((((-1.0)*r01*sj5*x1558))+(((-1.0)*cj5*r00*sj5*x1557))+((r01*r21))+((r00*r20*x1556))+(((-1.0)*r01*x1556*x1557))+((r02*r22)));
j4eval[0]=x1559;
j4eval[1]=IKsign(x1559);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1557))+((sj0*x1558))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1560=cj5*cj5;
IkReal x1561=((1.0)*r21);
IkReal x1562=(cj5*r20);
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal((((sj0*x1562))+(((-1.0)*sj0*sj5*x1561)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1562))+((r01*r21))+(((-1.0)*cj5*r00*sj5*x1561))+((r00*r20*x1560))+((r02*r22))+(((-1.0)*r01*x1560*x1561)))),-1);
if(!x1564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1563.value)+(((1.5707963267949)*(x1564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1565=IKsin(j4);
IkReal x1566=IKcos(j4);
IkReal x1567=((1.0)*cj0);
IkReal x1568=(cj5*r00);
IkReal x1569=(r11*sj5);
IkReal x1570=(cj5*r10);
IkReal x1571=(r21*sj5);
IkReal x1572=(cj5*r20);
IkReal x1573=(r01*sj5);
IkReal x1574=((1.0)*x1566);
IkReal x1575=((1.0)*x1565);
evalcond[0]=((((-1.0)*x1572*x1575))+(((-1.0)*r22*x1574))+((x1565*x1571)));
evalcond[1]=((((-1.0)*x1571*x1574))+((x1566*x1572))+(((-1.0)*r22*x1575)));
evalcond[2]=((((-1.0)*r02*x1574))+sj0+(((-1.0)*x1568*x1575))+((x1565*x1573)));
evalcond[3]=((((-1.0)*x1570*x1575))+(((-1.0)*r12*x1574))+(((-1.0)*x1567))+((x1565*x1569)));
evalcond[4]=(((x1566*x1568))+(((-1.0)*r02*x1575))+(((-1.0)*x1573*x1574))+(((-1.0)*x1567)));
evalcond[5]=((((-1.0)*sj0))+((x1566*x1570))+(((-1.0)*x1569*x1574))+(((-1.0)*r12*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1576.value)))+(x1577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j4);
IkReal x1579=IKcos(j4);
IkReal x1580=((1.0)*cj0);
IkReal x1581=(cj5*r00);
IkReal x1582=(r11*sj5);
IkReal x1583=(cj5*r10);
IkReal x1584=(r21*sj5);
IkReal x1585=(cj5*r20);
IkReal x1586=(r01*sj5);
IkReal x1587=((1.0)*x1579);
IkReal x1588=((1.0)*x1578);
evalcond[0]=((((-1.0)*x1585*x1588))+(((-1.0)*r22*x1587))+((x1578*x1584)));
evalcond[1]=((((-1.0)*x1584*x1587))+(((-1.0)*r22*x1588))+((x1579*x1585)));
evalcond[2]=(sj0+(((-1.0)*r02*x1587))+(((-1.0)*x1581*x1588))+((x1578*x1586)));
evalcond[3]=((((-1.0)*x1580))+((x1578*x1582))+(((-1.0)*r12*x1587))+(((-1.0)*x1583*x1588)));
evalcond[4]=((((-1.0)*x1580))+(((-1.0)*r02*x1588))+((x1579*x1581))+(((-1.0)*x1586*x1587)));
evalcond[5]=((((-1.0)*sj0))+((x1579*x1583))+(((-1.0)*r12*x1588))+(((-1.0)*x1582*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1589.value)))+(x1590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1591=IKsin(j4);
IkReal x1592=IKcos(j4);
IkReal x1593=((1.0)*cj0);
IkReal x1594=(cj5*r00);
IkReal x1595=(r11*sj5);
IkReal x1596=(cj5*r10);
IkReal x1597=(r21*sj5);
IkReal x1598=(cj5*r20);
IkReal x1599=(r01*sj5);
IkReal x1600=((1.0)*x1592);
IkReal x1601=((1.0)*x1591);
evalcond[0]=((((-1.0)*r22*x1600))+((x1591*x1597))+(((-1.0)*x1598*x1601)));
evalcond[1]=(((x1592*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1597*x1600)));
evalcond[2]=(sj0+(((-1.0)*x1594*x1601))+((x1591*x1599))+(((-1.0)*r02*x1600)));
evalcond[3]=((((-1.0)*x1593))+((x1591*x1595))+(((-1.0)*x1596*x1601))+(((-1.0)*r12*x1600)));
evalcond[4]=((((-1.0)*x1593))+((x1592*x1594))+(((-1.0)*x1599*x1600))+(((-1.0)*r02*x1601)));
evalcond[5]=((((-1.0)*sj0))+((x1592*x1596))+(((-1.0)*x1595*x1600))+(((-1.0)*r12*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1602=IKsin(j0);
IkReal x1603=IKcos(j0);
evalcond[0]=((((0.425)*x1603))+(((0.10915)*x1602))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x1603))+(((0.425)*x1602))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1604=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1604;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1605=cj5*cj5;
IkReal x1606=((1.0)*r21);
IkReal x1607=(cj5*sj5);
IkReal x1608=((1.0)*r20);
IkReal x1609=(((r00*r20*x1605))+(((-1.0)*r01*x1607*x1608))+((r01*r21))+(((-1.0)*r00*x1606*x1607))+((r02*r22))+(((-1.0)*r01*x1605*x1606)));
j4eval[0]=x1609;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1608))))));
j4eval[2]=IKsign(x1609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1610=cj5*cj5;
IkReal x1611=(r21*sj5);
IkReal x1612=(r11*r21);
IkReal x1613=((1.0)*cj5*r20);
IkReal x1614=(((r10*r20*x1610))+x1612+(((-1.0)*x1610*x1612))+((r12*r22))+(((-1.0)*r11*sj5*x1613))+(((-1.0)*cj5*r10*x1611)));
j4eval[0]=x1614;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1613))+((sj0*x1611))))));
j4eval[2]=IKsign(x1614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1615=cj5*cj5;
IkReal x1616=(r21*sj5);
IkReal x1617=(r11*r21);
IkReal x1618=((1.0)*cj5*r20);
CheckValue<IkReal> x1619=IKPowWithIntegerCheck(IKsign((((r10*r20*x1615))+x1617+(((-1.0)*x1615*x1617))+((r12*r22))+(((-1.0)*r11*sj5*x1618))+(((-1.0)*cj5*r10*x1616)))),-1);
if(!x1619.valid){
continue;
}
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1618))+((sj0*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1619.value)))+(x1620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1621=IKsin(j4);
IkReal x1622=IKcos(j4);
IkReal x1623=(r11*sj5);
IkReal x1624=(cj5*r00);
IkReal x1625=(cj5*r10);
IkReal x1626=(r21*sj5);
IkReal x1627=(cj5*r20);
IkReal x1628=(r01*sj5);
IkReal x1629=((1.0)*x1622);
IkReal x1630=((1.0)*x1621);
evalcond[0]=((((-1.0)*r22*x1629))+((x1621*x1626))+(((-1.0)*x1627*x1630)));
evalcond[1]=((((-1.0)*r22*x1630))+((x1622*x1627))+(((-1.0)*x1626*x1629)));
evalcond[2]=(sj0+(((-1.0)*x1624*x1630))+(((-1.0)*r02*x1629))+((x1621*x1628)));
evalcond[3]=(cj0+((x1622*x1624))+(((-1.0)*x1628*x1629))+(((-1.0)*r02*x1630)));
evalcond[4]=(sj0+(((-1.0)*r12*x1630))+((x1622*x1625))+(((-1.0)*x1623*x1629)));
evalcond[5]=((((-1.0)*r12*x1629))+(((-1.0)*x1625*x1630))+(((-1.0)*cj0))+((x1621*x1623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1631=cj5*cj5;
IkReal x1632=((1.0)*r21);
IkReal x1633=(cj5*sj5);
IkReal x1634=((1.0)*r20);
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1632*x1633))+(((-1.0)*r01*x1631*x1632))+((r00*r20*x1631))+((r01*r21))+(((-1.0)*r01*x1633*x1634))+((r02*r22)))),-1);
if(!x1636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1635.value)+(((1.5707963267949)*(x1636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1637=IKsin(j4);
IkReal x1638=IKcos(j4);
IkReal x1639=(r11*sj5);
IkReal x1640=(cj5*r00);
IkReal x1641=(cj5*r10);
IkReal x1642=(r21*sj5);
IkReal x1643=(cj5*r20);
IkReal x1644=(r01*sj5);
IkReal x1645=((1.0)*x1638);
IkReal x1646=((1.0)*x1637);
evalcond[0]=(((x1637*x1642))+(((-1.0)*r22*x1645))+(((-1.0)*x1643*x1646)));
evalcond[1]=((((-1.0)*r22*x1646))+(((-1.0)*x1642*x1645))+((x1638*x1643)));
evalcond[2]=(sj0+((x1637*x1644))+(((-1.0)*x1640*x1646))+(((-1.0)*r02*x1645)));
evalcond[3]=(cj0+(((-1.0)*x1644*x1645))+(((-1.0)*r02*x1646))+((x1638*x1640)));
evalcond[4]=(sj0+(((-1.0)*r12*x1646))+(((-1.0)*x1639*x1645))+((x1638*x1641)));
evalcond[5]=(((x1637*x1639))+(((-1.0)*x1641*x1646))+(((-1.0)*r12*x1645))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1647=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1647.valid){
continue;
}
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1647.value)))+(x1648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1649=IKsin(j4);
IkReal x1650=IKcos(j4);
IkReal x1651=(r11*sj5);
IkReal x1652=(cj5*r00);
IkReal x1653=(cj5*r10);
IkReal x1654=(r21*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r01*sj5);
IkReal x1657=((1.0)*x1650);
IkReal x1658=((1.0)*x1649);
evalcond[0]=((((-1.0)*r22*x1657))+(((-1.0)*x1655*x1658))+((x1649*x1654)));
evalcond[1]=(((x1650*x1655))+(((-1.0)*x1654*x1657))+(((-1.0)*r22*x1658)));
evalcond[2]=(sj0+(((-1.0)*x1652*x1658))+((x1649*x1656))+(((-1.0)*r02*x1657)));
evalcond[3]=((((-1.0)*x1656*x1657))+((x1650*x1652))+cj0+(((-1.0)*r02*x1658)));
evalcond[4]=(((x1650*x1653))+sj0+(((-1.0)*r12*x1658))+(((-1.0)*x1651*x1657)));
evalcond[5]=((((-1.0)*x1653*x1658))+(((-1.0)*r12*x1657))+((x1649*x1651))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1659=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1659;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1660=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1660;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1661=cj5*cj5;
IkReal x1662=((1.0)*r21);
IkReal x1663=(cj5*r20);
IkReal x1664=((((-1.0)*cj5*r00*sj5*x1662))+(((-1.0)*r01*x1661*x1662))+((r01*r21))+(((-1.0)*r01*sj5*x1663))+((r00*r20*x1661))+((r02*r22)));
j4eval[0]=x1664;
j4eval[1]=IKsign(x1664);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1663))+(((-1.0)*sj0*sj5*x1662))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1665=cj5*cj5;
IkReal x1666=((1.0)*r21);
IkReal x1667=(cj5*r20);
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal((((sj0*x1667))+(((-1.0)*sj0*sj5*x1666)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
CheckValue<IkReal> x1669=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x1666))+((r01*r21))+(((-1.0)*r01*sj5*x1667))+((r00*r20*x1665))+((r02*r22))+(((-1.0)*r01*x1665*x1666)))),-1);
if(!x1669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1668.value)+(((1.5707963267949)*(x1669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1670=IKsin(j4);
IkReal x1671=IKcos(j4);
IkReal x1672=((1.0)*cj0);
IkReal x1673=(cj5*r00);
IkReal x1674=(r11*sj5);
IkReal x1675=(cj5*r10);
IkReal x1676=(r21*sj5);
IkReal x1677=(cj5*r20);
IkReal x1678=(r01*sj5);
IkReal x1679=((1.0)*x1671);
IkReal x1680=((1.0)*x1670);
evalcond[0]=((((-1.0)*x1677*x1680))+((x1670*x1676))+(((-1.0)*r22*x1679)));
evalcond[1]=((((-1.0)*r22*x1680))+((x1671*x1677))+(((-1.0)*x1676*x1679)));
evalcond[2]=(sj0+(((-1.0)*r02*x1679))+(((-1.0)*x1673*x1680))+((x1670*x1678)));
evalcond[3]=((((-1.0)*x1675*x1680))+(((-1.0)*r12*x1679))+(((-1.0)*x1672))+((x1670*x1674)));
evalcond[4]=((((-1.0)*x1678*x1679))+(((-1.0)*r02*x1680))+((x1671*x1673))+(((-1.0)*x1672)));
evalcond[5]=((((-1.0)*r12*x1680))+(((-1.0)*sj0))+(((-1.0)*x1674*x1679))+((x1671*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1681=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1681.valid){
continue;
}
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1681.value)))+(x1682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1683=IKsin(j4);
IkReal x1684=IKcos(j4);
IkReal x1685=((1.0)*cj0);
IkReal x1686=(cj5*r00);
IkReal x1687=(r11*sj5);
IkReal x1688=(cj5*r10);
IkReal x1689=(r21*sj5);
IkReal x1690=(cj5*r20);
IkReal x1691=(r01*sj5);
IkReal x1692=((1.0)*x1684);
IkReal x1693=((1.0)*x1683);
evalcond[0]=((((-1.0)*x1690*x1693))+(((-1.0)*r22*x1692))+((x1683*x1689)));
evalcond[1]=((((-1.0)*r22*x1693))+((x1684*x1690))+(((-1.0)*x1689*x1692)));
evalcond[2]=((((-1.0)*x1686*x1693))+sj0+((x1683*x1691))+(((-1.0)*r02*x1692)));
evalcond[3]=((((-1.0)*x1688*x1693))+(((-1.0)*x1685))+(((-1.0)*r12*x1692))+((x1683*x1687)));
evalcond[4]=((((-1.0)*x1685))+(((-1.0)*x1691*x1692))+(((-1.0)*r02*x1693))+((x1684*x1686)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1687*x1692))+(((-1.0)*r12*x1693))+((x1684*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1694=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1694.valid){
continue;
}
CheckValue<IkReal> x1695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1694.value)))+(x1695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1696=IKsin(j4);
IkReal x1697=IKcos(j4);
IkReal x1698=((1.0)*cj0);
IkReal x1699=(cj5*r00);
IkReal x1700=(r11*sj5);
IkReal x1701=(cj5*r10);
IkReal x1702=(r21*sj5);
IkReal x1703=(cj5*r20);
IkReal x1704=(r01*sj5);
IkReal x1705=((1.0)*x1697);
IkReal x1706=((1.0)*x1696);
evalcond[0]=(((x1696*x1702))+(((-1.0)*x1703*x1706))+(((-1.0)*r22*x1705)));
evalcond[1]=((((-1.0)*x1702*x1705))+((x1697*x1703))+(((-1.0)*r22*x1706)));
evalcond[2]=(sj0+((x1696*x1704))+(((-1.0)*x1699*x1706))+(((-1.0)*r02*x1705)));
evalcond[3]=(((x1696*x1700))+(((-1.0)*x1698))+(((-1.0)*x1701*x1706))+(((-1.0)*r12*x1705)));
evalcond[4]=((((-1.0)*x1698))+(((-1.0)*r02*x1706))+(((-1.0)*x1704*x1705))+((x1697*x1699)));
evalcond[5]=(((x1697*x1701))+(((-1.0)*sj0))+(((-1.0)*x1700*x1705))+(((-1.0)*r12*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1707=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1707;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1708=cj5*cj5;
IkReal x1709=((1.0)*r21);
IkReal x1710=(cj5*sj5);
IkReal x1711=((1.0)*r20);
IkReal x1712=((((-1.0)*r00*x1709*x1710))+((r01*r21))+((r00*r20*x1708))+(((-1.0)*r01*x1710*x1711))+((r02*r22))+(((-1.0)*r01*x1708*x1709)));
j4eval[0]=x1712;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1711)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1713=cj5*cj5;
IkReal x1714=(r21*sj5);
IkReal x1715=(r11*r21);
IkReal x1716=((1.0)*cj5*r20);
IkReal x1717=((((-1.0)*x1713*x1715))+x1715+(((-1.0)*r11*sj5*x1716))+((r10*r20*x1713))+((r12*r22))+(((-1.0)*cj5*r10*x1714)));
j4eval[0]=x1717;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1716))+((sj0*x1714))))));
j4eval[2]=IKsign(x1717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1718=cj5*cj5;
IkReal x1719=(r21*sj5);
IkReal x1720=(r11*r21);
IkReal x1721=((1.0)*cj5*r20);
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1721))+((sj0*x1719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
CheckValue<IkReal> x1723=IKPowWithIntegerCheck(IKsign((x1720+((r10*r20*x1718))+((r12*r22))+(((-1.0)*r11*sj5*x1721))+(((-1.0)*x1718*x1720))+(((-1.0)*cj5*r10*x1719)))),-1);
if(!x1723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1722.value)+(((1.5707963267949)*(x1723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1724=IKsin(j4);
IkReal x1725=IKcos(j4);
IkReal x1726=(r11*sj5);
IkReal x1727=(cj5*r00);
IkReal x1728=(cj5*r10);
IkReal x1729=(r21*sj5);
IkReal x1730=(cj5*r20);
IkReal x1731=(r01*sj5);
IkReal x1732=((1.0)*x1725);
IkReal x1733=((1.0)*x1724);
evalcond[0]=(((x1724*x1729))+(((-1.0)*x1730*x1733))+(((-1.0)*r22*x1732)));
evalcond[1]=(((x1725*x1730))+(((-1.0)*x1729*x1732))+(((-1.0)*r22*x1733)));
evalcond[2]=(sj0+((x1724*x1731))+(((-1.0)*x1727*x1733))+(((-1.0)*r02*x1732)));
evalcond[3]=((((-1.0)*x1731*x1732))+((x1725*x1727))+cj0+(((-1.0)*r02*x1733)));
evalcond[4]=(sj0+((x1725*x1728))+(((-1.0)*x1726*x1732))+(((-1.0)*r12*x1733)));
evalcond[5]=(((x1724*x1726))+(((-1.0)*x1728*x1733))+(((-1.0)*r12*x1732))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1734=cj5*cj5;
IkReal x1735=((1.0)*r21);
IkReal x1736=(cj5*sj5);
IkReal x1737=((1.0)*r20);
CheckValue<IkReal> x1738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1735*x1736))+(((-1.0)*r01*x1736*x1737))+((r02*r22))+((r00*r20*x1734))+(((-1.0)*r01*x1734*x1735)))),-1);
if(!x1739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1738.value)+(((1.5707963267949)*(x1739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j4);
IkReal x1741=IKcos(j4);
IkReal x1742=(r11*sj5);
IkReal x1743=(cj5*r00);
IkReal x1744=(cj5*r10);
IkReal x1745=(r21*sj5);
IkReal x1746=(cj5*r20);
IkReal x1747=(r01*sj5);
IkReal x1748=((1.0)*x1741);
IkReal x1749=((1.0)*x1740);
evalcond[0]=((((-1.0)*r22*x1748))+(((-1.0)*x1746*x1749))+((x1740*x1745)));
evalcond[1]=((((-1.0)*r22*x1749))+(((-1.0)*x1745*x1748))+((x1741*x1746)));
evalcond[2]=(sj0+((x1740*x1747))+(((-1.0)*x1743*x1749))+(((-1.0)*r02*x1748)));
evalcond[3]=(cj0+(((-1.0)*x1747*x1748))+((x1741*x1743))+(((-1.0)*r02*x1749)));
evalcond[4]=((((-1.0)*r12*x1749))+sj0+(((-1.0)*x1742*x1748))+((x1741*x1744)));
evalcond[5]=((((-1.0)*r12*x1748))+(((-1.0)*x1744*x1749))+((x1740*x1742))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1750.value)))+(x1751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1752=IKsin(j4);
IkReal x1753=IKcos(j4);
IkReal x1754=(r11*sj5);
IkReal x1755=(cj5*r00);
IkReal x1756=(cj5*r10);
IkReal x1757=(r21*sj5);
IkReal x1758=(cj5*r20);
IkReal x1759=(r01*sj5);
IkReal x1760=((1.0)*x1753);
IkReal x1761=((1.0)*x1752);
evalcond[0]=(((x1752*x1757))+(((-1.0)*x1758*x1761))+(((-1.0)*r22*x1760)));
evalcond[1]=(((x1753*x1758))+(((-1.0)*x1757*x1760))+(((-1.0)*r22*x1761)));
evalcond[2]=(((x1752*x1759))+sj0+(((-1.0)*r02*x1760))+(((-1.0)*x1755*x1761)));
evalcond[3]=(((x1753*x1755))+cj0+(((-1.0)*r02*x1761))+(((-1.0)*x1759*x1760)));
evalcond[4]=(sj0+(((-1.0)*x1754*x1760))+((x1753*x1756))+(((-1.0)*r12*x1761)));
evalcond[5]=(((x1752*x1754))+(((-1.0)*x1756*x1761))+(((-1.0)*r12*x1760))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1762=(cj1*cj2);
IkReal x1763=(cj5*r01);
IkReal x1764=(sj1*sj2);
IkReal x1765=(r00*sj5);
IkReal x1766=((20000.0)*px);
IkReal x1767=((8500.0)*cj1);
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(((((2183.0)*x1762))+(((-2183.0)*x1764))),-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(((((-1.0)*x1764))+x1762),-1);
if(!x1769.valid){
continue;
}
if( IKabs(((x1768.value)*(((((5952.0)*x1764*x1765))+(((-1.0)*x1763*x1767))+(((-1.0)*x1765*x1767))+((x1762*x1766))+(((-1.0)*x1764*x1766))+(((-5952.0)*x1762*x1763))+(((-5952.0)*x1762*x1765))+(((5952.0)*x1763*x1764)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1769.value)*(((((-1.0)*x1765))+(((-1.0)*x1763)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1768.value)*(((((5952.0)*x1764*x1765))+(((-1.0)*x1763*x1767))+(((-1.0)*x1765*x1767))+((x1762*x1766))+(((-1.0)*x1764*x1766))+(((-5952.0)*x1762*x1763))+(((-5952.0)*x1762*x1765))+(((5952.0)*x1763*x1764))))))+IKsqr(((x1769.value)*(((((-1.0)*x1765))+(((-1.0)*x1763))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1768.value)*(((((5952.0)*x1764*x1765))+(((-1.0)*x1763*x1767))+(((-1.0)*x1765*x1767))+((x1762*x1766))+(((-1.0)*x1764*x1766))+(((-5952.0)*x1762*x1763))+(((-5952.0)*x1762*x1765))+(((5952.0)*x1763*x1764))))), ((x1769.value)*(((((-1.0)*x1765))+(((-1.0)*x1763))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1770=IKcos(j0);
IkReal x1771=IKsin(j0);
IkReal x1772=(cj5*r01);
IkReal x1773=(cj1*cj2);
IkReal x1774=(sj1*sj2);
IkReal x1775=((0.425)*cj1);
IkReal x1776=(r00*sj5);
IkReal x1777=(cj5*r11);
IkReal x1778=(r10*sj5);
IkReal x1779=((0.39225)*x1770);
IkReal x1780=(x1771*x1774);
evalcond[0]=(x1776+x1772+((x1770*x1773))+(((-1.0)*x1770*x1774)));
evalcond[1]=(x1777+x1778+((x1771*x1773))+(((-1.0)*x1780)));
evalcond[2]=((((-0.09465)*x1776))+(((-0.09465)*x1772))+(((-1.0)*px))+(((-1.0)*x1770*x1775))+(((-1.0)*x1773*x1779))+(((0.10915)*x1771))+((x1774*x1779)));
evalcond[3]=((((-0.09465)*x1777))+(((-0.09465)*x1778))+(((-0.10915)*x1770))+(((-1.0)*py))+(((-1.0)*x1771*x1775))+(((0.39225)*x1780))+(((-0.39225)*x1771*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1781=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1781;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1782=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1782;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1783=((1.0)*cj5);
IkReal x1784=((((-1.0)*r21*x1783))+(((-1.0)*r20*sj5)));
j4eval[0]=x1784;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1783))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1783))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1785=((-1.0)*r20);
IkReal x1787 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1787)==0){
continue;
}
IkReal x1786=pow(x1787,-0.5);
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1785),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1788.value));
IkReal gconst79=(r21*x1786);
IkReal gconst80=(x1785*x1786);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1789.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1790=((-1.0)*r20);
IkReal x1791=x1786;
CheckValue<IkReal> x1793 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1790),IKFAST_ATAN2_MAGTHRESH);
if(!x1793.valid){
continue;
}
IkReal x1792=((-1.0)*(x1793.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1792;
IkReal gconst78=x1792;
IkReal gconst79=(r21*x1791);
IkReal gconst80=(x1790*x1791);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1794=((-1.0)*r20);
IkReal x1795=x1786;
CheckValue<IkReal> x1797 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1794),IKFAST_ATAN2_MAGTHRESH);
if(!x1797.valid){
continue;
}
IkReal x1796=((-1.0)*(x1797.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1796;
IkReal gconst78=x1796;
IkReal gconst79=(r21*x1795);
IkReal gconst80=(x1794*x1795);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1798=((-1.0)*r20);
IkReal x1799=x1786;
CheckValue<IkReal> x1801 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1798),IKFAST_ATAN2_MAGTHRESH);
if(!x1801.valid){
continue;
}
IkReal x1800=((-1.0)*(x1801.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1800;
IkReal gconst78=x1800;
IkReal gconst79=(r21*x1799);
IkReal gconst80=(x1798*x1799);
IkReal x1802=r22*r22;
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1802))),-1);
if(!x1805.valid){
continue;
}
IkReal x1803=x1805.value;
IkReal x1804=(((x1803*(r21*r21*r21*r21)))+x1802+(((2.0)*x1803*(r20*r20)*(r21*r21)))+((x1803*(r20*r20*r20*r20))));
j4eval[0]=x1804;
j4eval[1]=IKsign(x1804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1806=(sj1*sj2);
IkReal x1807=(gconst80*r20);
IkReal x1808=(gconst79*r21);
IkReal x1809=(cj1*cj2);
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(IKsign(((x1807*x1807)+(r22*r22)+(x1808*x1808)+(((-2.0)*x1807*x1808)))),-1);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1809))+((r22*x1806)))),IkReal((((x1806*x1808))+(((-1.0)*x1806*x1807))+(((-1.0)*x1808*x1809))+((x1807*x1809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1810.value)))+(x1811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1812=IKsin(j4);
IkReal x1813=IKcos(j4);
IkReal x1814=(gconst79*r01);
IkReal x1815=(cj2*sj1);
IkReal x1816=(gconst79*r21);
IkReal x1817=(gconst79*r11);
IkReal x1818=(cj1*sj2);
IkReal x1819=((1.0)*x1813);
IkReal x1820=(gconst80*x1813);
IkReal x1821=((1.0)*x1812);
IkReal x1822=(gconst80*x1821);
evalcond[0]=(((x1812*x1816))+(((-1.0)*r20*x1822))+(((-1.0)*r22*x1819)));
evalcond[1]=(sj0+(((-1.0)*r02*x1819))+((x1812*x1814))+(((-1.0)*r00*x1822)));
evalcond[2]=(((x1812*x1817))+(((-1.0)*r12*x1819))+(((-1.0)*cj0))+(((-1.0)*r10*x1822)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1816*x1819))+(((-1.0)*r22*x1821))+((r20*x1820)));
evalcond[4]=(((cj0*x1818))+((cj0*x1815))+((r00*x1820))+(((-1.0)*x1814*x1819))+(((-1.0)*r02*x1821)));
evalcond[5]=(((r10*x1820))+((sj0*x1815))+((sj0*x1818))+(((-1.0)*r12*x1821))+(((-1.0)*x1817*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1823=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1823.valid){
continue;
}
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1823.value)))+(x1824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1825=IKsin(j4);
IkReal x1826=IKcos(j4);
IkReal x1827=(gconst79*r01);
IkReal x1828=(cj2*sj1);
IkReal x1829=(gconst79*r21);
IkReal x1830=(gconst79*r11);
IkReal x1831=(cj1*sj2);
IkReal x1832=((1.0)*x1826);
IkReal x1833=(gconst80*x1826);
IkReal x1834=((1.0)*x1825);
IkReal x1835=(gconst80*x1834);
evalcond[0]=((((-1.0)*r20*x1835))+((x1825*x1829))+(((-1.0)*r22*x1832)));
evalcond[1]=(sj0+(((-1.0)*r00*x1835))+((x1825*x1827))+(((-1.0)*r02*x1832)));
evalcond[2]=((((-1.0)*r10*x1835))+((x1825*x1830))+(((-1.0)*r12*x1832))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1833))+(((-1.0)*r22*x1834))+(((-1.0)*x1829*x1832)));
evalcond[4]=(((cj0*x1828))+((cj0*x1831))+(((-1.0)*x1827*x1832))+(((-1.0)*r02*x1834))+((r00*x1833)));
evalcond[5]=(((r10*x1833))+((sj0*x1831))+((sj0*x1828))+(((-1.0)*r12*x1834))+(((-1.0)*x1830*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1836.valid){
continue;
}
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1836.value)))+(x1837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1838=IKsin(j4);
IkReal x1839=IKcos(j4);
IkReal x1840=(gconst79*r01);
IkReal x1841=(cj2*sj1);
IkReal x1842=(gconst79*r21);
IkReal x1843=(gconst79*r11);
IkReal x1844=(cj1*sj2);
IkReal x1845=((1.0)*x1839);
IkReal x1846=(gconst80*x1839);
IkReal x1847=((1.0)*x1838);
IkReal x1848=(gconst80*x1847);
evalcond[0]=(((x1838*x1842))+(((-1.0)*r22*x1845))+(((-1.0)*r20*x1848)));
evalcond[1]=(((x1838*x1840))+sj0+(((-1.0)*r00*x1848))+(((-1.0)*r02*x1845)));
evalcond[2]=(((x1838*x1843))+(((-1.0)*r10*x1848))+(((-1.0)*r12*x1845))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1842*x1845))+(((-1.0)*r22*x1847))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1846)));
evalcond[4]=(((cj0*x1841))+((cj0*x1844))+(((-1.0)*r02*x1847))+((r00*x1846))+(((-1.0)*x1840*x1845)));
evalcond[5]=((((-1.0)*x1843*x1845))+((sj0*x1844))+((sj0*x1841))+((r10*x1846))+(((-1.0)*r12*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1849=((-1.0)*r21);
IkReal x1851 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1851)==0){
continue;
}
IkReal x1850=pow(x1851,-0.5);
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(x1849),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1852.value))));
IkReal gconst82=(x1849*x1850);
IkReal gconst83=((1.0)*r20*x1850);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1853.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1854=((-1.0)*r21);
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(x1854),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
IkReal x1855=((1.0)*(x1857.value));
IkReal x1856=x1850;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1855)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1855)));
IkReal gconst82=(x1854*x1856);
IkReal gconst83=((1.0)*r20*x1856);
IkReal x1858=r22*r22;
IkReal x1859=((1.0)*x1858);
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(((-1.0)+x1858),-1);
if(!x1863.valid){
continue;
}
IkReal x1860=x1863.value;
if((((1.0)+(((-1.0)*x1859)))) < -0.00001)
continue;
IkReal x1861=IKsqrt(((1.0)+(((-1.0)*x1859))));
IkReal x1862=(sj0*x1860*x1861);
j4eval[0]=((IKabs((x1862+(((-1.0)*x1859*x1862)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1864=((-1.0)*r21);
CheckValue<IkReal> x1867 = IKatan2WithCheck(IkReal(x1864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1867.valid){
continue;
}
IkReal x1865=((1.0)*(x1867.value));
IkReal x1866=x1850;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1865)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1865)));
IkReal gconst82=(x1864*x1866);
IkReal gconst83=((1.0)*r20*x1866);
IkReal x1868=r22*r22;
IkReal x1869=((1.0)*x1868);
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(((-1.0)+x1868),-1);
if(!x1873.valid){
continue;
}
IkReal x1870=x1873.value;
if((((1.0)+(((-1.0)*x1869)))) < -0.00001)
continue;
IkReal x1871=IKsqrt(((1.0)+(((-1.0)*x1869))));
IkReal x1872=(cj0*x1870*x1871);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x1869*x1872))+x1872))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1874=((-1.0)*r21);
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal(x1874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
IkReal x1875=((1.0)*(x1877.value));
IkReal x1876=x1850;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1875)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1875)));
IkReal gconst82=(x1874*x1876);
IkReal gconst83=((1.0)*r20*x1876);
IkReal x1878=r22*r22;
IkReal x1879=(cj0*r02);
IkReal x1880=(r12*sj0);
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(((-1.0)+x1878),-1);
if(!x1884.valid){
continue;
}
IkReal x1881=x1884.value;
if((((1.0)+(((-1.0)*x1878)))) < -0.00001)
continue;
IkReal x1882=IKsqrt(((1.0)+(((-1.0)*x1878))));
IkReal x1883=((1.0)*r22*x1881*x1882);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x1879+x1880)))+(IKabs(((((-1.0)*x1879*x1883))+(((-1.0)*x1880*x1883))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1885=((1.0)*gconst83);
CheckValue<IkReal> x1886 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1885))+(((-1.0)*r10*sj0*x1885))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1886.valid){
continue;
}
CheckValue<IkReal> x1887=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1885)))),-1);
if(!x1887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1886.value)+(((1.5707963267949)*(x1887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1888=IKsin(j4);
IkReal x1889=IKcos(j4);
IkReal x1890=(cj2*sj1);
IkReal x1891=(gconst82*r11);
IkReal x1892=(cj1*sj2);
IkReal x1893=((1.0)*x1889);
IkReal x1894=(gconst83*x1889);
IkReal x1895=(gconst82*x1888);
IkReal x1896=((1.0)*x1888);
evalcond[0]=((((-1.0)*r22*x1893))+(((-1.0)*gconst83*r20*x1896))+((r21*x1895)));
evalcond[1]=((((-1.0)*r02*x1893))+sj0+((r01*x1895))+(((-1.0)*gconst83*r00*x1896)));
evalcond[2]=(((x1888*x1891))+(((-1.0)*r12*x1893))+(((-1.0)*gconst83*r10*x1896))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x1893))+((r20*x1894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1896)));
evalcond[4]=((((-1.0)*r02*x1896))+((r00*x1894))+(((-1.0)*gconst82*r01*x1893))+((cj0*x1890))+((cj0*x1892)));
evalcond[5]=(((r10*x1894))+(((-1.0)*x1891*x1893))+(((-1.0)*r12*x1896))+((sj0*x1892))+((sj0*x1890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1897.value)+(((1.5707963267949)*(x1898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1899=IKsin(j4);
IkReal x1900=IKcos(j4);
IkReal x1901=(cj2*sj1);
IkReal x1902=(gconst82*r11);
IkReal x1903=(cj1*sj2);
IkReal x1904=((1.0)*x1900);
IkReal x1905=(gconst83*x1900);
IkReal x1906=(gconst82*x1899);
IkReal x1907=((1.0)*x1899);
evalcond[0]=((((-1.0)*r22*x1904))+((r21*x1906))+(((-1.0)*gconst83*r20*x1907)));
evalcond[1]=(sj0+((r01*x1906))+(((-1.0)*gconst83*r00*x1907))+(((-1.0)*r02*x1904)));
evalcond[2]=((((-1.0)*r12*x1904))+((x1899*x1902))+(((-1.0)*gconst83*r10*x1907))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1907))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1904))+((r20*x1905)));
evalcond[4]=(((r00*x1905))+((cj0*x1901))+((cj0*x1903))+(((-1.0)*gconst82*r01*x1904))+(((-1.0)*r02*x1907)));
evalcond[5]=((((-1.0)*x1902*x1904))+((sj0*x1901))+((sj0*x1903))+(((-1.0)*r12*x1907))+((r10*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1908.value)+(((1.5707963267949)*(x1909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1910=IKsin(j4);
IkReal x1911=IKcos(j4);
IkReal x1912=(cj2*sj1);
IkReal x1913=(gconst82*r11);
IkReal x1914=(cj1*sj2);
IkReal x1915=((1.0)*x1911);
IkReal x1916=(gconst83*x1911);
IkReal x1917=(gconst82*x1910);
IkReal x1918=((1.0)*x1910);
evalcond[0]=((((-1.0)*r22*x1915))+(((-1.0)*gconst83*r20*x1918))+((r21*x1917)));
evalcond[1]=(sj0+(((-1.0)*r02*x1915))+(((-1.0)*gconst83*r00*x1918))+((r01*x1917)));
evalcond[2]=((((-1.0)*r12*x1915))+((x1910*x1913))+(((-1.0)*gconst83*r10*x1918))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1918))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst82*r21*x1915))+((sj1*sj2))+((r20*x1916)));
evalcond[4]=((((-1.0)*r02*x1918))+((r00*x1916))+(((-1.0)*gconst82*r01*x1915))+((cj0*x1912))+((cj0*x1914)));
evalcond[5]=(((r10*x1916))+(((-1.0)*r12*x1918))+(((-1.0)*x1913*x1915))+((sj0*x1912))+((sj0*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1920 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1920)==0){
continue;
}
IkReal x1919=pow(x1920,-0.5);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1921.value));
IkReal gconst85=((-1.0)*r01*x1919);
IkReal gconst86=(r00*x1919);
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
IkReal x1923=((-1.0)*(x1925.value));
IkReal x1924=x1919;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1923;
IkReal gconst84=x1923;
IkReal gconst85=((-1.0)*r01*x1924);
IkReal gconst86=(r00*x1924);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1926=((1.0)*gconst86);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1926)))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x1926))+((cj0*gconst85*r01))+(((-1.0)*r10*sj0*x1926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(gconst85*r21);
IkReal x1932=(cj2*sj1);
IkReal x1933=(gconst86*r00);
IkReal x1934=(gconst86*r10);
IkReal x1935=(gconst85*r11);
IkReal x1936=(gconst85*r01);
IkReal x1937=(gconst86*r20);
IkReal x1938=(cj1*sj2);
IkReal x1939=((1.0)*x1930);
IkReal x1940=((1.0)*x1929);
evalcond[0]=((((-1.0)*x1937*x1940))+(((-1.0)*r22*x1939))+((x1929*x1931)));
evalcond[1]=(sj0+((x1929*x1936))+(((-1.0)*x1933*x1940))+(((-1.0)*r02*x1939)));
evalcond[2]=((((-1.0)*r12*x1939))+((x1929*x1935))+(((-1.0)*x1934*x1940))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1940))+((x1930*x1937))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1931*x1939)));
evalcond[4]=(((x1930*x1933))+(((-1.0)*r02*x1940))+((cj0*x1932))+((cj0*x1938))+(((-1.0)*x1936*x1939)));
evalcond[5]=(((x1930*x1934))+((sj0*x1938))+((sj0*x1932))+(((-1.0)*r12*x1940))+(((-1.0)*x1935*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x1941.valid){
continue;
}
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1941.value)))+(x1942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1943=IKsin(j4);
IkReal x1944=IKcos(j4);
IkReal x1945=(gconst85*r21);
IkReal x1946=(cj2*sj1);
IkReal x1947=(gconst86*r00);
IkReal x1948=(gconst86*r10);
IkReal x1949=(gconst85*r11);
IkReal x1950=(gconst85*r01);
IkReal x1951=(gconst86*r20);
IkReal x1952=(cj1*sj2);
IkReal x1953=((1.0)*x1944);
IkReal x1954=((1.0)*x1943);
evalcond[0]=(((x1943*x1945))+(((-1.0)*r22*x1953))+(((-1.0)*x1951*x1954)));
evalcond[1]=(((x1943*x1950))+sj0+(((-1.0)*r02*x1953))+(((-1.0)*x1947*x1954)));
evalcond[2]=((((-1.0)*x1948*x1954))+((x1943*x1949))+(((-1.0)*r12*x1953))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1954))+((x1944*x1951))+(((-1.0)*x1945*x1953))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*x1952))+((cj0*x1946))+(((-1.0)*x1950*x1953))+((x1944*x1947))+(((-1.0)*r02*x1954)));
evalcond[5]=((((-1.0)*x1949*x1953))+((x1944*x1948))+((sj0*x1952))+((sj0*x1946))+(((-1.0)*r12*x1954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1956 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1956)==0){
continue;
}
IkReal x1955=pow(x1956,-0.5);
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1957.value))));
IkReal gconst88=((1.0)*r01*x1955);
IkReal gconst89=((-1.0)*r00*x1955);
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1958.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1961 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1961.valid){
continue;
}
IkReal x1959=((1.0)*(x1961.value));
IkReal x1960=x1955;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1959)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1959)));
IkReal gconst88=((1.0)*r01*x1960);
IkReal gconst89=((-1.0)*r00*x1960);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
IkReal x1962=((1.0)*(x1964.value));
IkReal x1963=x1955;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1962)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1962)));
IkReal gconst88=((1.0)*r01*x1963);
IkReal gconst89=((-1.0)*r00*x1963);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
IkReal x1965=((1.0)*(x1967.value));
IkReal x1966=x1955;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1965)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1965)));
IkReal gconst88=((1.0)*r01*x1966);
IkReal gconst89=((-1.0)*r00*x1966);
IkReal x1968=r02*r02;
IkReal x1969=(r12*sj0);
IkReal x1970=x1955;
IkReal x1971=(cj0*x1970);
j4eval[0]=((IKabs((x1969+((cj0*r02)))))+(IKabs((((r02*x1969*x1970))+(((-1.0)*x1971))+((x1968*x1971))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1972=((1.0)*gconst89);
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1972)))),-1);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1972))+(((-1.0)*r10*sj0*x1972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1973.value)))+(x1974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1975=IKsin(j4);
IkReal x1976=IKcos(j4);
IkReal x1977=(cj2*sj1);
IkReal x1978=(cj1*sj2);
IkReal x1979=((1.0)*x1976);
IkReal x1980=(gconst89*x1976);
IkReal x1981=((1.0)*x1975);
IkReal x1982=(gconst88*x1975);
IkReal x1983=(gconst89*x1981);
evalcond[0]=((((-1.0)*r22*x1979))+((r21*x1982))+(((-1.0)*r20*x1983)));
evalcond[1]=(sj0+(((-1.0)*r02*x1979))+((r01*x1982))+(((-1.0)*r00*x1983)));
evalcond[2]=(((r11*x1982))+(((-1.0)*r10*x1983))+(((-1.0)*r12*x1979))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1979))+(((-1.0)*r22*x1981))+((r20*x1980)));
evalcond[4]=((((-1.0)*r02*x1981))+(((-1.0)*gconst88*r01*x1979))+((r00*x1980))+((cj0*x1977))+((cj0*x1978)));
evalcond[5]=(((r10*x1980))+((sj0*x1977))+((sj0*x1978))+(((-1.0)*gconst88*r11*x1979))+(((-1.0)*r12*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1984=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1984.valid){
continue;
}
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1984.value)))+(x1985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1986=IKsin(j4);
IkReal x1987=IKcos(j4);
IkReal x1988=(cj2*sj1);
IkReal x1989=(cj1*sj2);
IkReal x1990=((1.0)*x1987);
IkReal x1991=(gconst89*x1987);
IkReal x1992=((1.0)*x1986);
IkReal x1993=(gconst88*x1986);
IkReal x1994=(gconst89*x1992);
evalcond[0]=(((r21*x1993))+(((-1.0)*r22*x1990))+(((-1.0)*r20*x1994)));
evalcond[1]=(sj0+(((-1.0)*r00*x1994))+(((-1.0)*r02*x1990))+((r01*x1993)));
evalcond[2]=((((-1.0)*r10*x1994))+((r11*x1993))+(((-1.0)*r12*x1990))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1991))+(((-1.0)*gconst88*r21*x1990))+(((-1.0)*r22*x1992)));
evalcond[4]=((((-1.0)*r02*x1992))+((r00*x1991))+((cj0*x1988))+((cj0*x1989))+(((-1.0)*gconst88*r01*x1990)));
evalcond[5]=((((-1.0)*gconst88*r11*x1990))+((sj0*x1988))+((sj0*x1989))+((r10*x1991))+(((-1.0)*r12*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1995.value)))+(x1996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1997=IKsin(j4);
IkReal x1998=IKcos(j4);
IkReal x1999=(cj2*sj1);
IkReal x2000=(cj1*sj2);
IkReal x2001=((1.0)*x1998);
IkReal x2002=(gconst89*x1998);
IkReal x2003=((1.0)*x1997);
IkReal x2004=(gconst88*x1997);
IkReal x2005=(gconst89*x2003);
evalcond[0]=(((r21*x2004))+(((-1.0)*r22*x2001))+(((-1.0)*r20*x2005)));
evalcond[1]=(sj0+((r01*x2004))+(((-1.0)*r00*x2005))+(((-1.0)*r02*x2001)));
evalcond[2]=(((r11*x2004))+(((-1.0)*r12*x2001))+(((-1.0)*r10*x2005))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2003))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2002))+(((-1.0)*gconst88*r21*x2001)));
evalcond[4]=(((cj0*x1999))+((r00*x2002))+((cj0*x2000))+(((-1.0)*r02*x2003))+(((-1.0)*gconst88*r01*x2001)));
evalcond[5]=(((sj0*x1999))+((r10*x2002))+(((-1.0)*r12*x2003))+((sj0*x2000))+(((-1.0)*gconst88*r11*x2001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2006=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2006;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2007=((1.0)*cj5);
IkReal x2008=((((-1.0)*r21*x2007))+(((-1.0)*r20*sj5)));
j4eval[0]=x2008;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2007))+((r11*sj5))))));
j4eval[2]=IKsign(x2008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2009=cj5*cj5;
IkReal x2010=r01*r01;
IkReal x2011=(cj5*r00);
IkReal x2012=(r01*sj5);
IkReal x2013=(x2010+(((-1.0)*x2009*x2010))+((x2009*(r00*r00)))+(((-2.0)*x2011*x2012))+(r02*r02));
j4eval[0]=x2013;
j4eval[1]=((IKabs(r02))+(IKabs((x2011+(((-1.0)*x2012))))));
j4eval[2]=IKsign(x2013);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2014=cj5*cj5;
IkReal x2015=r01*r01;
IkReal x2016=(r01*sj5);
IkReal x2017=(cj5*r00);
CheckValue<IkReal> x2018=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2016*x2017))+x2015+((x2014*(r00*r00)))+(r02*r02)+(((-1.0)*x2014*x2015)))),-1);
if(!x2018.valid){
continue;
}
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal((x2017+(((-1.0)*x2016)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2018.value)))+(x2019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2020=IKsin(j4);
IkReal x2021=IKcos(j4);
IkReal x2022=(cj5*r10);
IkReal x2023=(r01*sj5);
IkReal x2024=(cj5*r00);
IkReal x2025=(cj5*r20);
IkReal x2026=((1.0)*x2021);
IkReal x2027=((1.0)*x2020);
IkReal x2028=(sj5*x2020);
evalcond[0]=((((-1.0)*r22*x2026))+(((-1.0)*x2025*x2027))+((r21*x2028)));
evalcond[1]=((((-1.0)*x2022*x2027))+((r11*x2028))+(((-1.0)*r12*x2026)));
evalcond[2]=((((-1.0)*x2023*x2026))+(((-1.0)*r02*x2027))+((x2021*x2024)));
evalcond[3]=((1.0)+((x2020*x2023))+(((-1.0)*r02*x2026))+(((-1.0)*x2024*x2027)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2027))+(((-1.0)*r11*sj5*x2026))+((x2021*x2022)));
evalcond[5]=((((-1.0)*r21*sj5*x2026))+(((-1.0)*r22*x2027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2021*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2029=((1.0)*cj5);
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2029))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2029))+(((-1.0)*r20*sj5)))),-1);
if(!x2031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2030.value)+(((1.5707963267949)*(x2031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2032=IKsin(j4);
IkReal x2033=IKcos(j4);
IkReal x2034=(cj5*r10);
IkReal x2035=(r01*sj5);
IkReal x2036=(cj5*r00);
IkReal x2037=(cj5*r20);
IkReal x2038=((1.0)*x2033);
IkReal x2039=((1.0)*x2032);
IkReal x2040=(sj5*x2032);
evalcond[0]=(((r21*x2040))+(((-1.0)*r22*x2038))+(((-1.0)*x2037*x2039)));
evalcond[1]=((((-1.0)*r12*x2038))+((r11*x2040))+(((-1.0)*x2034*x2039)));
evalcond[2]=((((-1.0)*x2035*x2038))+((x2033*x2036))+(((-1.0)*r02*x2039)));
evalcond[3]=((1.0)+(((-1.0)*x2036*x2039))+((x2032*x2035))+(((-1.0)*r02*x2038)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2039))+(((-1.0)*r11*sj5*x2038))+((x2033*x2034))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x2039))+((x2033*x2037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2041.value)+(((1.5707963267949)*(x2042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2043=IKsin(j4);
IkReal x2044=IKcos(j4);
IkReal x2045=(cj5*r10);
IkReal x2046=(r01*sj5);
IkReal x2047=(cj5*r00);
IkReal x2048=(cj5*r20);
IkReal x2049=((1.0)*x2044);
IkReal x2050=((1.0)*x2043);
IkReal x2051=(sj5*x2043);
evalcond[0]=((((-1.0)*r22*x2049))+(((-1.0)*x2048*x2050))+((r21*x2051)));
evalcond[1]=(((r11*x2051))+(((-1.0)*x2045*x2050))+(((-1.0)*r12*x2049)));
evalcond[2]=((((-1.0)*r02*x2050))+((x2044*x2047))+(((-1.0)*x2046*x2049)));
evalcond[3]=((1.0)+((x2043*x2046))+(((-1.0)*r02*x2049))+(((-1.0)*x2047*x2050)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2049))+((cj1*sj2))+(((-1.0)*r12*x2050))+((x2044*x2045)));
evalcond[5]=((((-1.0)*r22*x2050))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2049))+((x2044*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2052=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2052;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2053=((1.0)*cj5);
IkReal x2054=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2053)));
j4eval[0]=x2054;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2053)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2055=cj5*cj5;
IkReal x2056=r01*r01;
IkReal x2057=(r01*sj5);
IkReal x2058=(cj5*r00);
IkReal x2059=((((2.0)*x2057*x2058))+((x2055*x2056))+(((-1.0)*(r02*r02)))+(((-1.0)*x2056))+(((-1.0)*x2055*(r00*r00))));
j4eval[0]=x2059;
j4eval[1]=IKsign(x2059);
j4eval[2]=((IKabs(r02))+(IKabs((x2058+(((-1.0)*x2057))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2060=cj5*cj5;
IkReal x2061=r01*r01;
IkReal x2062=(r01*sj5);
IkReal x2063=(cj5*r00);
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal((x2063+(((-1.0)*x2062)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2060*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2061))+((x2060*x2061))+(((2.0)*x2062*x2063)))),-1);
if(!x2065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2064.value)+(((1.5707963267949)*(x2065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2066=IKsin(j4);
IkReal x2067=IKcos(j4);
IkReal x2068=(cj5*r10);
IkReal x2069=(r01*sj5);
IkReal x2070=((1.0)*cj2);
IkReal x2071=(cj5*r00);
IkReal x2072=(cj5*r20);
IkReal x2073=((1.0)*x2067);
IkReal x2074=((1.0)*x2066);
IkReal x2075=(sj5*x2066);
evalcond[0]=((((-1.0)*r22*x2073))+(((-1.0)*x2072*x2074))+((r21*x2075)));
evalcond[1]=((((-1.0)*r12*x2073))+((r11*x2075))+(((-1.0)*x2068*x2074)));
evalcond[2]=((((-1.0)*r02*x2074))+(((-1.0)*x2069*x2073))+((x2067*x2071)));
evalcond[3]=((-1.0)+((x2066*x2069))+(((-1.0)*r02*x2073))+(((-1.0)*x2071*x2074)));
evalcond[4]=((((-1.0)*r22*x2074))+((sj1*sj2))+(((-1.0)*r21*sj5*x2073))+(((-1.0)*cj1*x2070))+((x2067*x2072)));
evalcond[5]=(((x2067*x2068))+(((-1.0)*r12*x2074))+(((-1.0)*r11*sj5*x2073))+(((-1.0)*sj1*x2070))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2076=((1.0)*cj5);
CheckValue<IkReal> x2077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2076))+(((-1.0)*r10*sj5)))),-1);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2077.value)))+(x2078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=(cj5*r10);
IkReal x2082=(r01*sj5);
IkReal x2083=((1.0)*cj2);
IkReal x2084=(cj5*r00);
IkReal x2085=(cj5*r20);
IkReal x2086=((1.0)*x2080);
IkReal x2087=((1.0)*x2079);
IkReal x2088=(sj5*x2079);
evalcond[0]=((((-1.0)*r22*x2086))+(((-1.0)*x2085*x2087))+((r21*x2088)));
evalcond[1]=((((-1.0)*x2081*x2087))+(((-1.0)*r12*x2086))+((r11*x2088)));
evalcond[2]=((((-1.0)*r02*x2087))+(((-1.0)*x2082*x2086))+((x2080*x2084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2086))+(((-1.0)*x2084*x2087))+((x2079*x2082)));
evalcond[4]=((((-1.0)*cj1*x2083))+(((-1.0)*r21*sj5*x2086))+(((-1.0)*r22*x2087))+((sj1*sj2))+((x2080*x2085)));
evalcond[5]=((((-1.0)*sj1*x2083))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2086))+(((-1.0)*r12*x2087))+((x2080*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2089.valid){
continue;
}
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2089.value)))+(x2090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2091=IKsin(j4);
IkReal x2092=IKcos(j4);
IkReal x2093=(cj5*r10);
IkReal x2094=(r01*sj5);
IkReal x2095=((1.0)*cj2);
IkReal x2096=(cj5*r00);
IkReal x2097=(cj5*r20);
IkReal x2098=((1.0)*x2092);
IkReal x2099=((1.0)*x2091);
IkReal x2100=(sj5*x2091);
evalcond[0]=(((r21*x2100))+(((-1.0)*x2097*x2099))+(((-1.0)*r22*x2098)));
evalcond[1]=(((r11*x2100))+(((-1.0)*x2093*x2099))+(((-1.0)*r12*x2098)));
evalcond[2]=((((-1.0)*x2094*x2098))+((x2092*x2096))+(((-1.0)*r02*x2099)));
evalcond[3]=((-1.0)+(((-1.0)*x2096*x2099))+((x2091*x2094))+(((-1.0)*r02*x2098)));
evalcond[4]=((((-1.0)*r21*sj5*x2098))+((sj1*sj2))+((x2092*x2097))+(((-1.0)*cj1*x2095))+(((-1.0)*r22*x2099)));
evalcond[5]=((((-1.0)*r11*sj5*x2098))+(((-1.0)*cj1*sj2))+((x2092*x2093))+(((-1.0)*r12*x2099))+(((-1.0)*sj1*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2102 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2102)==0){
continue;
}
IkReal x2101=pow(x2102,-0.5);
CheckValue<IkReal> x2103 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2103.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2103.value));
IkReal gconst91=((-1.0)*r11*x2101);
IkReal gconst92=(r10*x2101);
CheckValue<IkReal> x2104 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2104.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2104.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
IkReal x2105=((-1.0)*(x2107.value));
IkReal x2106=x2101;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2105;
IkReal gconst90=x2105;
IkReal gconst91=((-1.0)*r11*x2106);
IkReal gconst92=(r10*x2106);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2108=((1.0)*gconst92);
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2108))+((gconst91*r11*sj0))+(((-1.0)*cj0*r00*x2108))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2108)))),-1);
if(!x2110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2109.value)+(((1.5707963267949)*(x2110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2111=IKsin(j4);
IkReal x2112=IKcos(j4);
IkReal x2113=(cj2*sj1);
IkReal x2114=(gconst92*r00);
IkReal x2115=(gconst92*r20);
IkReal x2116=(gconst92*r10);
IkReal x2117=(cj1*sj2);
IkReal x2118=((1.0)*x2112);
IkReal x2119=(gconst91*x2111);
IkReal x2120=((1.0)*x2111);
evalcond[0]=(((r21*x2119))+(((-1.0)*x2115*x2120))+(((-1.0)*r22*x2118)));
evalcond[1]=(sj0+((r01*x2119))+(((-1.0)*x2114*x2120))+(((-1.0)*r02*x2118)));
evalcond[2]=((((-1.0)*x2116*x2120))+(((-1.0)*r12*x2118))+(((-1.0)*cj0))+((r11*x2119)));
evalcond[3]=((((-1.0)*r22*x2120))+(((-1.0)*gconst91*r21*x2118))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2112*x2115)));
evalcond[4]=(((cj0*x2113))+((cj0*x2117))+(((-1.0)*r02*x2120))+(((-1.0)*gconst91*r01*x2118))+((x2112*x2114)));
evalcond[5]=((((-1.0)*gconst91*r11*x2118))+((sj0*x2117))+((sj0*x2113))+(((-1.0)*r12*x2120))+((x2112*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2121 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2121.value)+(((1.5707963267949)*(x2122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2123=IKsin(j4);
IkReal x2124=IKcos(j4);
IkReal x2125=(cj2*sj1);
IkReal x2126=(gconst92*r00);
IkReal x2127=(gconst92*r20);
IkReal x2128=(gconst92*r10);
IkReal x2129=(cj1*sj2);
IkReal x2130=((1.0)*x2124);
IkReal x2131=(gconst91*x2123);
IkReal x2132=((1.0)*x2123);
evalcond[0]=((((-1.0)*r22*x2130))+((r21*x2131))+(((-1.0)*x2127*x2132)));
evalcond[1]=(sj0+((r01*x2131))+(((-1.0)*x2126*x2132))+(((-1.0)*r02*x2130)));
evalcond[2]=((((-1.0)*r12*x2130))+((r11*x2131))+(((-1.0)*x2128*x2132))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2132))+(((-1.0)*gconst91*r21*x2130))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2124*x2127)));
evalcond[4]=((((-1.0)*gconst91*r01*x2130))+((x2124*x2126))+((cj0*x2125))+((cj0*x2129))+(((-1.0)*r02*x2132)));
evalcond[5]=((((-1.0)*r12*x2132))+((sj0*x2125))+((sj0*x2129))+(((-1.0)*gconst91*r11*x2130))+((x2124*x2128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2134 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2134)==0){
continue;
}
IkReal x2133=pow(x2134,-0.5);
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2135.value))));
IkReal gconst94=((1.0)*r11*x2133);
IkReal gconst95=((-1.0)*r10*x2133);
CheckValue<IkReal> x2136 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2136.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2136.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
IkReal x2137=((1.0)*(x2139.value));
IkReal x2138=x2133;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2137)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2137)));
IkReal gconst94=((1.0)*r11*x2138);
IkReal gconst95=((-1.0)*r10*x2138);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2142 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2142.valid){
continue;
}
IkReal x2140=((1.0)*(x2142.value));
IkReal x2141=x2133;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2140)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2140)));
IkReal gconst94=((1.0)*r11*x2141);
IkReal gconst95=((-1.0)*r10*x2141);
IkReal x2143=r12*r12;
IkReal x2144=(cj0*r02);
IkReal x2145=x2133;
IkReal x2146=(sj0*x2145);
j4eval[0]=((IKabs((x2144+((r12*sj0)))))+(IKabs(((((-1.0)*x2146))+((r12*x2144*x2145))+((x2143*x2146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2149 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2149.valid){
continue;
}
IkReal x2147=((1.0)*(x2149.value));
IkReal x2148=x2133;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2147)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2147)));
IkReal gconst94=((1.0)*r11*x2148);
IkReal gconst95=((-1.0)*r10*x2148);
IkReal x2150=r12*r12;
IkReal x2151=(sj1*sj2);
IkReal x2152=((1.0)*cj1*cj2);
CheckValue<IkReal> x2156=IKPowWithIntegerCheck(((-1.0)+x2150),-1);
if(!x2156.valid){
continue;
}
IkReal x2153=x2156.value;
if((((1.0)+(((-1.0)*x2150)))) < -0.00001)
continue;
IkReal x2154=IKsqrt(((1.0)+(((-1.0)*x2150))));
IkReal x2155=(r12*r22*x2153*x2154);
j4eval[0]=((IKabs(((((-1.0)*x2152*x2155))+((x2151*x2155)))))+(IKabs((((r22*x2151))+(((-1.0)*r22*x2152))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2157=(gconst94*r21);
IkReal x2158=(cj1*cj2);
IkReal x2159=(sj1*sj2);
IkReal x2160=(gconst95*r20);
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2160*x2160)+(((-2.0)*x2157*x2160))+(x2157*x2157))),-1);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal((((r22*x2159))+(((-1.0)*r22*x2158)))),IkReal(((((-1.0)*x2157*x2158))+((x2158*x2160))+((x2157*x2159))+(((-1.0)*x2159*x2160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2161.value)))+(x2162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2163=IKsin(j4);
IkReal x2164=IKcos(j4);
IkReal x2165=(cj2*sj1);
IkReal x2166=(gconst94*r11);
IkReal x2167=(gconst95*r10);
IkReal x2168=(gconst94*r21);
IkReal x2169=(gconst94*r01);
IkReal x2170=(cj1*sj2);
IkReal x2171=((1.0)*x2164);
IkReal x2172=((1.0)*x2163);
IkReal x2173=(gconst95*x2164);
evalcond[0]=((((-1.0)*gconst95*r20*x2172))+((x2163*x2168))+(((-1.0)*r22*x2171)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2172))+(((-1.0)*r02*x2171))+((x2163*x2169)));
evalcond[2]=(((x2163*x2166))+(((-1.0)*r12*x2171))+(((-1.0)*cj0))+(((-1.0)*x2167*x2172)));
evalcond[3]=((((-1.0)*x2168*x2171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2173))+(((-1.0)*r22*x2172)));
evalcond[4]=(((r00*x2173))+(((-1.0)*x2169*x2171))+((cj0*x2170))+((cj0*x2165))+(((-1.0)*r02*x2172)));
evalcond[5]=(((sj0*x2165))+((x2164*x2167))+(((-1.0)*x2166*x2171))+(((-1.0)*r12*x2172))+((sj0*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2174=((1.0)*gconst95);
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2174))+(((-1.0)*gconst94*r20)))),-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*cj0*r00*x2174))+(((-1.0)*r10*sj0*x2174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2175.value)))+(x2176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(cj2*sj1);
IkReal x2180=(gconst94*r11);
IkReal x2181=(gconst95*r10);
IkReal x2182=(gconst94*r21);
IkReal x2183=(gconst94*r01);
IkReal x2184=(cj1*sj2);
IkReal x2185=((1.0)*x2178);
IkReal x2186=((1.0)*x2177);
IkReal x2187=(gconst95*x2178);
evalcond[0]=((((-1.0)*gconst95*r20*x2186))+((x2177*x2182))+(((-1.0)*r22*x2185)));
evalcond[1]=(sj0+((x2177*x2183))+(((-1.0)*r02*x2185))+(((-1.0)*gconst95*r00*x2186)));
evalcond[2]=(((x2177*x2180))+(((-1.0)*x2181*x2186))+(((-1.0)*r12*x2185))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2187))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2186))+(((-1.0)*x2182*x2185)));
evalcond[4]=(((cj0*x2179))+((cj0*x2184))+(((-1.0)*r02*x2186))+(((-1.0)*x2183*x2185))+((r00*x2187)));
evalcond[5]=((((-1.0)*x2180*x2185))+((x2178*x2181))+((sj0*x2184))+(((-1.0)*r12*x2186))+((sj0*x2179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2188.value)+(((1.5707963267949)*(x2189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2190=IKsin(j4);
IkReal x2191=IKcos(j4);
IkReal x2192=(cj2*sj1);
IkReal x2193=(gconst94*r11);
IkReal x2194=(gconst95*r10);
IkReal x2195=(gconst94*r21);
IkReal x2196=(gconst94*r01);
IkReal x2197=(cj1*sj2);
IkReal x2198=((1.0)*x2191);
IkReal x2199=((1.0)*x2190);
IkReal x2200=(gconst95*x2191);
evalcond[0]=((((-1.0)*gconst95*r20*x2199))+((x2190*x2195))+(((-1.0)*r22*x2198)));
evalcond[1]=(sj0+((x2190*x2196))+(((-1.0)*r02*x2198))+(((-1.0)*gconst95*r00*x2199)));
evalcond[2]=((((-1.0)*x2194*x2199))+((x2190*x2193))+(((-1.0)*r12*x2198))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2195*x2198))+((r20*x2200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2199)));
evalcond[4]=(((r00*x2200))+(((-1.0)*x2196*x2198))+(((-1.0)*r02*x2199))+((cj0*x2192))+((cj0*x2197)));
evalcond[5]=(((x2191*x2194))+(((-1.0)*x2193*x2198))+((sj0*x2192))+((sj0*x2197))+(((-1.0)*r12*x2199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2201=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2201;
j4eval[1]=IKsign(x2201);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2202=((1.0)*cj5);
IkReal x2203=((((-1.0)*r21*x2202))+(((-1.0)*r20*sj5)));
j4eval[0]=x2203;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2202))))));
j4eval[2]=IKsign(x2203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2204=cj5*cj5;
IkReal x2205=r11*r11;
IkReal x2206=(cj5*r10);
IkReal x2207=(r11*sj5);
IkReal x2208=((((-1.0)*x2205))+(((-1.0)*x2204*(r10*r10)))+((x2204*x2205))+(((-1.0)*(r12*r12)))+(((2.0)*x2206*x2207)));
j4eval[0]=x2208;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2207))+x2206))));
j4eval[2]=IKsign(x2208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2209=cj5*cj5;
IkReal x2210=r11*r11;
IkReal x2211=(cj5*r10);
IkReal x2212=(r11*sj5);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((((-1.0)*x2212))+x2211)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2210))+(((-1.0)*x2209*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2211*x2212))+((x2209*x2210)))),-1);
if(!x2214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2213.value)+(((1.5707963267949)*(x2214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2215=IKsin(j4);
IkReal x2216=IKcos(j4);
IkReal x2217=(cj5*r10);
IkReal x2218=(r01*sj5);
IkReal x2219=(cj5*r00);
IkReal x2220=(cj5*r20);
IkReal x2221=((1.0)*x2216);
IkReal x2222=((1.0)*x2215);
IkReal x2223=(sj5*x2215);
evalcond[0]=((((-1.0)*x2220*x2222))+((r21*x2223))+(((-1.0)*r22*x2221)));
evalcond[1]=((((-1.0)*x2219*x2222))+(((-1.0)*r02*x2221))+((x2215*x2218)));
evalcond[2]=((((-1.0)*r11*sj5*x2221))+(((-1.0)*r12*x2222))+((x2216*x2217)));
evalcond[3]=((-1.0)+(((-1.0)*x2217*x2222))+(((-1.0)*r12*x2221))+((r11*x2223)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2222))+((x2216*x2219))+(((-1.0)*x2218*x2221)));
evalcond[5]=(((x2216*x2220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2221))+(((-1.0)*r22*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2224=((1.0)*cj5);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2224))+(((-1.0)*r20*sj5)))),-1);
if(!x2226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2225.value)+(((1.5707963267949)*(x2226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2227=IKsin(j4);
IkReal x2228=IKcos(j4);
IkReal x2229=(cj5*r10);
IkReal x2230=(r01*sj5);
IkReal x2231=(cj5*r00);
IkReal x2232=(cj5*r20);
IkReal x2233=((1.0)*x2228);
IkReal x2234=((1.0)*x2227);
IkReal x2235=(sj5*x2227);
evalcond[0]=((((-1.0)*x2232*x2234))+((r21*x2235))+(((-1.0)*r22*x2233)));
evalcond[1]=((((-1.0)*r02*x2233))+((x2227*x2230))+(((-1.0)*x2231*x2234)));
evalcond[2]=(((x2228*x2229))+(((-1.0)*r11*sj5*x2233))+(((-1.0)*r12*x2234)));
evalcond[3]=((-1.0)+(((-1.0)*x2229*x2234))+(((-1.0)*r12*x2233))+((r11*x2235)));
evalcond[4]=(((cj2*sj1))+((x2228*x2231))+((cj1*sj2))+(((-1.0)*r02*x2234))+(((-1.0)*x2230*x2233)));
evalcond[5]=(((x2228*x2232))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2233))+(((-1.0)*r22*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2236.value)+(((1.5707963267949)*(x2237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2238=IKsin(j4);
IkReal x2239=IKcos(j4);
IkReal x2240=(cj5*r10);
IkReal x2241=(r01*sj5);
IkReal x2242=(cj5*r00);
IkReal x2243=(cj5*r20);
IkReal x2244=((1.0)*x2239);
IkReal x2245=((1.0)*x2238);
IkReal x2246=(sj5*x2238);
evalcond[0]=((((-1.0)*r22*x2244))+(((-1.0)*x2243*x2245))+((r21*x2246)));
evalcond[1]=((((-1.0)*r02*x2244))+(((-1.0)*x2242*x2245))+((x2238*x2241)));
evalcond[2]=((((-1.0)*r12*x2245))+((x2239*x2240))+(((-1.0)*r11*sj5*x2244)));
evalcond[3]=((-1.0)+((r11*x2246))+(((-1.0)*x2240*x2245))+(((-1.0)*r12*x2244)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2245))+((cj1*sj2))+(((-1.0)*x2241*x2244))+((x2239*x2242)));
evalcond[5]=((((-1.0)*r22*x2245))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2244))+((x2239*x2243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2247=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2247;
j4eval[1]=IKsign(x2247);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2248=((1.0)*cj5);
IkReal x2249=((((-1.0)*r01*x2248))+(((-1.0)*r00*sj5)));
j4eval[0]=x2249;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2248))))));
j4eval[2]=IKsign(x2249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2250=cj5*cj5;
IkReal x2251=r11*r11;
IkReal x2252=(r11*sj5);
IkReal x2253=(cj5*r10);
IkReal x2254=((r12*r12)+x2251+((x2250*(r10*r10)))+(((-2.0)*x2252*x2253))+(((-1.0)*x2250*x2251)));
j4eval[0]=x2254;
j4eval[1]=IKsign(x2254);
j4eval[2]=((IKabs(r12))+(IKabs((x2253+(((-1.0)*x2252))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2255=cj5*cj5;
IkReal x2256=r11*r11;
IkReal x2257=(cj5*r10);
IkReal x2258=(r11*sj5);
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2255*(r10*r10)))+x2256+(((-2.0)*x2257*x2258))+(((-1.0)*x2255*x2256)))),-1);
if(!x2259.valid){
continue;
}
CheckValue<IkReal> x2260 = IKatan2WithCheck(IkReal((x2257+(((-1.0)*x2258)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2259.value)))+(x2260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2261=IKsin(j4);
IkReal x2262=IKcos(j4);
IkReal x2263=(cj5*r10);
IkReal x2264=(r01*sj5);
IkReal x2265=((1.0)*cj2);
IkReal x2266=(cj5*r00);
IkReal x2267=(cj5*r20);
IkReal x2268=((1.0)*x2262);
IkReal x2269=((1.0)*x2261);
IkReal x2270=(sj5*x2261);
evalcond[0]=(((r21*x2270))+(((-1.0)*r22*x2268))+(((-1.0)*x2267*x2269)));
evalcond[1]=(((x2261*x2264))+(((-1.0)*r02*x2268))+(((-1.0)*x2266*x2269)));
evalcond[2]=(((x2262*x2263))+(((-1.0)*r11*sj5*x2268))+(((-1.0)*r12*x2269)));
evalcond[3]=((1.0)+(((-1.0)*x2263*x2269))+((r11*x2270))+(((-1.0)*r12*x2268)));
evalcond[4]=((((-1.0)*cj1*x2265))+((sj1*sj2))+(((-1.0)*r22*x2269))+((x2262*x2267))+(((-1.0)*r21*sj5*x2268)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2262*x2266))+(((-1.0)*sj1*x2265))+(((-1.0)*r02*x2269))+(((-1.0)*x2264*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2271=((1.0)*cj5);
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
CheckValue<IkReal> x2273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2271))+(((-1.0)*r00*sj5)))),-1);
if(!x2273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2272.value)+(((1.5707963267949)*(x2273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2274=IKsin(j4);
IkReal x2275=IKcos(j4);
IkReal x2276=(cj5*r10);
IkReal x2277=(r01*sj5);
IkReal x2278=((1.0)*cj2);
IkReal x2279=(cj5*r00);
IkReal x2280=(cj5*r20);
IkReal x2281=((1.0)*x2275);
IkReal x2282=((1.0)*x2274);
IkReal x2283=(sj5*x2274);
evalcond[0]=((((-1.0)*x2280*x2282))+((r21*x2283))+(((-1.0)*r22*x2281)));
evalcond[1]=((((-1.0)*r02*x2281))+(((-1.0)*x2279*x2282))+((x2274*x2277)));
evalcond[2]=((((-1.0)*r12*x2282))+(((-1.0)*r11*sj5*x2281))+((x2275*x2276)));
evalcond[3]=((1.0)+(((-1.0)*x2276*x2282))+((r11*x2283))+(((-1.0)*r12*x2281)));
evalcond[4]=((((-1.0)*cj1*x2278))+(((-1.0)*r21*sj5*x2281))+((sj1*sj2))+((x2275*x2280))+(((-1.0)*r22*x2282)));
evalcond[5]=((((-1.0)*r02*x2282))+(((-1.0)*x2277*x2281))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2278))+((x2275*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2286=IKsin(j4);
IkReal x2287=IKcos(j4);
IkReal x2288=(cj5*r10);
IkReal x2289=(r01*sj5);
IkReal x2290=((1.0)*cj2);
IkReal x2291=(cj5*r00);
IkReal x2292=(cj5*r20);
IkReal x2293=((1.0)*x2287);
IkReal x2294=((1.0)*x2286);
IkReal x2295=(sj5*x2286);
evalcond[0]=((((-1.0)*x2292*x2294))+((r21*x2295))+(((-1.0)*r22*x2293)));
evalcond[1]=((((-1.0)*r02*x2293))+(((-1.0)*x2291*x2294))+((x2286*x2289)));
evalcond[2]=((((-1.0)*r11*sj5*x2293))+((x2287*x2288))+(((-1.0)*r12*x2294)));
evalcond[3]=((1.0)+(((-1.0)*x2288*x2294))+(((-1.0)*r12*x2293))+((r11*x2295)));
evalcond[4]=(((sj1*sj2))+((x2287*x2292))+(((-1.0)*r21*sj5*x2293))+(((-1.0)*cj1*x2290))+(((-1.0)*r22*x2294)));
evalcond[5]=((((-1.0)*x2289*x2293))+(((-1.0)*r02*x2294))+(((-1.0)*cj1*sj2))+((x2287*x2291))+(((-1.0)*sj1*x2290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2296=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2296);
rxp0_2=(py*r00);
rxp1_0=(r21*x2296);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2297=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2297);
rxp0_2=(py*r00);
rxp1_0=(r21*x2297);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2298=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2298);
rxp0_2=(py*r00);
rxp1_0=(r21*x2298);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2301=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2301.valid){
continue;
}
IkReal x2299=x2301.value;
IkReal x2300=((1.0)*cj0*x2299);
cj4array[0]=((((-1.0)*cj1*sj2*x2300))+(((-1.0)*cj2*sj1*x2300)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2302=IKsin(j4);
IkReal x2303=IKcos(j4);
IkReal x2304=(r21*sj5);
IkReal x2305=((1.0)*x2303);
IkReal x2306=((1.0)*cj5*x2302);
evalcond[0]=((-1.0)*r12*x2302);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2305)));
evalcond[2]=((((-1.0)*r20*x2306))+((x2302*x2304)));
evalcond[3]=((((-1.0)*r00*x2306))+((r01*sj5*x2302)));
evalcond[4]=(((cj5*r20*x2303))+(((-1.0)*x2304*x2305))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2308=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2308.valid){
continue;
}
IkReal x2307=x2308.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2307))+((cj1*cj2*x2307)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2309=IKsin(j4);
IkReal x2310=IKcos(j4);
IkReal x2311=(cj5*r00);
IkReal x2312=((1.0)*x2309);
IkReal x2313=(sj5*x2309);
IkReal x2314=((1.0)*x2310);
evalcond[0]=((-1.0)*r12*x2309);
evalcond[1]=((((-1.0)*r12*x2314))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2313))+(((-1.0)*cj5*r20*x2312)));
evalcond[3]=((((-1.0)*x2311*x2312))+((r01*x2313)));
evalcond[4]=((((-1.0)*r01*sj5*x2314))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x2310*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(r12,-1);
if(!x2315.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2315.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2316=IKsin(j4);
IkReal x2317=IKcos(j4);
IkReal x2318=(cj5*r00);
IkReal x2319=(cj5*r20);
IkReal x2320=(r21*sj5);
IkReal x2321=(r01*sj5);
IkReal x2322=((1.0)*x2316);
IkReal x2323=((1.0)*x2317);
evalcond[0]=((-1.0)*r12*x2316);
evalcond[1]=(((x2316*x2320))+(((-1.0)*x2319*x2322)));
evalcond[2]=(((x2316*x2321))+(((-1.0)*x2318*x2322)));
evalcond[3]=(((x2317*x2319))+(((-1.0)*x2320*x2323))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x2317*x2318))+(((-1.0)*x2321*x2323))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2324=((1.0)*cj5);
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2324))+(((-1.0)*r10*sj0*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5))+(((-1.0)*r21*x2324)))),-1);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2325.value)+(((1.5707963267949)*(x2326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKsin(j4);
IkReal x2328=IKcos(j4);
IkReal x2329=(cj5*r10);
IkReal x2330=(cj2*sj1);
IkReal x2331=(r01*sj5);
IkReal x2332=(cj5*r00);
IkReal x2333=(cj5*r20);
IkReal x2334=(cj1*sj2);
IkReal x2335=((1.0)*x2328);
IkReal x2336=((1.0)*x2327);
IkReal x2337=(sj5*x2327);
evalcond[0]=(((r21*x2337))+(((-1.0)*r22*x2335))+(((-1.0)*x2333*x2336)));
evalcond[1]=(sj0+(((-1.0)*x2332*x2336))+((x2327*x2331))+(((-1.0)*r02*x2335)));
evalcond[2]=(((r11*x2337))+(((-1.0)*x2329*x2336))+(((-1.0)*r12*x2335))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2336))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2328*x2333))+(((-1.0)*r21*sj5*x2335)));
evalcond[4]=((((-1.0)*x2331*x2335))+(((-1.0)*r02*x2336))+((cj0*x2334))+((cj0*x2330))+((x2328*x2332)));
evalcond[5]=(((sj0*x2330))+((sj0*x2334))+(((-1.0)*r11*sj5*x2335))+(((-1.0)*r12*x2336))+((x2328*x2329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2338=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2338.value)))+(x2339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2340=IKsin(j4);
IkReal x2341=IKcos(j4);
IkReal x2342=(cj5*r10);
IkReal x2343=(cj2*sj1);
IkReal x2344=(r01*sj5);
IkReal x2345=(cj5*r00);
IkReal x2346=(cj5*r20);
IkReal x2347=(cj1*sj2);
IkReal x2348=((1.0)*x2341);
IkReal x2349=((1.0)*x2340);
IkReal x2350=(sj5*x2340);
evalcond[0]=((((-1.0)*x2346*x2349))+(((-1.0)*r22*x2348))+((r21*x2350)));
evalcond[1]=((((-1.0)*x2345*x2349))+sj0+((x2340*x2344))+(((-1.0)*r02*x2348)));
evalcond[2]=(((r11*x2350))+(((-1.0)*r12*x2348))+(((-1.0)*x2342*x2349))+(((-1.0)*cj0)));
evalcond[3]=(((x2341*x2346))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2349))+(((-1.0)*r21*sj5*x2348)));
evalcond[4]=((((-1.0)*x2344*x2348))+((x2341*x2345))+(((-1.0)*r02*x2349))+((cj0*x2347))+((cj0*x2343)));
evalcond[5]=(((sj0*x2347))+((sj0*x2343))+((x2341*x2342))+(((-1.0)*r11*sj5*x2348))+(((-1.0)*r12*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2351.valid){
continue;
}
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2351.value)))+(x2352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2353=IKsin(j4);
IkReal x2354=IKcos(j4);
IkReal x2355=(cj5*r10);
IkReal x2356=(cj2*sj1);
IkReal x2357=(r01*sj5);
IkReal x2358=(cj5*r00);
IkReal x2359=(cj5*r20);
IkReal x2360=(cj1*sj2);
IkReal x2361=((1.0)*x2354);
IkReal x2362=((1.0)*x2353);
IkReal x2363=(sj5*x2353);
evalcond[0]=((((-1.0)*x2359*x2362))+(((-1.0)*r22*x2361))+((r21*x2363)));
evalcond[1]=(sj0+((x2353*x2357))+(((-1.0)*x2358*x2362))+(((-1.0)*r02*x2361)));
evalcond[2]=(((r11*x2363))+(((-1.0)*x2355*x2362))+(((-1.0)*cj0))+(((-1.0)*r12*x2361)));
evalcond[3]=((((-1.0)*r21*sj5*x2361))+((x2354*x2359))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2362)));
evalcond[4]=(((cj0*x2356))+((cj0*x2360))+((x2354*x2358))+(((-1.0)*x2357*x2361))+(((-1.0)*r02*x2362)));
evalcond[5]=(((sj0*x2356))+(((-1.0)*r11*sj5*x2361))+((sj0*x2360))+((x2354*x2355))+(((-1.0)*r12*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2364=cj5*cj5;
IkReal x2365=r21*r21;
IkReal x2366=(sj1*sj2);
IkReal x2367=(r21*sj5);
IkReal x2368=(cj1*cj2);
IkReal x2369=(cj5*r20);
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2368))+((r22*x2366)))),IkReal((((x2366*x2367))+(((-1.0)*x2366*x2369))+(((-1.0)*x2367*x2368))+((x2368*x2369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
CheckValue<IkReal> x2371=IKPowWithIntegerCheck(IKsign((((x2364*(r20*r20)))+(r22*r22)+x2365+(((-1.0)*x2364*x2365))+(((-2.0)*x2367*x2369)))),-1);
if(!x2371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2370.value)+(((1.5707963267949)*(x2371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2372=IKsin(j4);
IkReal x2373=IKcos(j4);
IkReal x2374=(r21*sj5);
IkReal x2375=(cj5*r20);
IkReal x2376=((1.0)*x2373);
IkReal x2377=((1.0)*x2372);
evalcond[0]=(((x2372*x2374))+(((-1.0)*x2375*x2377))+(((-1.0)*r22*x2376)));
evalcond[1]=(((x2373*x2375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2374*x2376))+(((-1.0)*r22*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2378=(cj5*sj4);
IkReal x2379=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2379))+((r00*x2378))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2378))+((r11*x2379))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2379))+((r00*x2378))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2378))+((r11*x2379))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2379))+((r00*x2378))+((cj4*r02))), ((((-1.0)*r10*x2378))+((r11*x2379))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2380=IKcos(j0);
IkReal x2381=IKsin(j0);
IkReal x2382=(cj4*cj5);
IkReal x2383=(cj5*r01);
IkReal x2384=(r11*sj5);
IkReal x2385=(cj1*cj2);
IkReal x2386=((1.0)*sj4);
IkReal x2387=(r00*sj5);
IkReal x2388=(cj5*r11);
IkReal x2389=((1.0)*cj4);
IkReal x2390=(r01*sj5);
IkReal x2391=(r10*sj5);
IkReal x2392=(sj1*x2380);
IkReal x2393=(cj1*x2381);
IkReal x2394=(cj1*x2380);
IkReal x2395=(sj1*sj2*x2381);
evalcond[0]=(((sj4*x2390))+(((-1.0)*cj5*r00*x2386))+(((-1.0)*r02*x2389))+x2381);
evalcond[1]=((((-1.0)*r12*x2389))+((sj4*x2384))+(((-1.0)*cj5*r10*x2386))+(((-1.0)*x2380)));
evalcond[2]=(x2383+x2387+(((-1.0)*sj2*x2392))+((x2380*x2385)));
evalcond[3]=(((x2381*x2385))+x2391+x2388+(((-1.0)*x2395)));
evalcond[4]=((((-1.0)*r02*x2386))+((r00*x2382))+(((-1.0)*x2389*x2390))+((sj2*x2394))+((cj2*x2392)));
evalcond[5]=((((-1.0)*r12*x2386))+((cj2*sj1*x2381))+((sj2*x2393))+((r10*x2382))+(((-1.0)*x2384*x2389)));
evalcond[6]=((((-0.09465)*x2387))+(((-0.09465)*x2383))+(((0.39225)*sj2*x2392))+(((-0.425)*x2394))+(((0.10915)*x2381))+(((-1.0)*px))+(((-0.39225)*x2380*x2385)));
evalcond[7]=((((-0.09465)*x2388))+(((-0.425)*x2393))+(((-0.39225)*x2381*x2385))+(((-1.0)*py))+(((0.39225)*x2395))+(((-0.10915)*x2380))+(((-0.09465)*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2396=((1.0)*cj5);
IkReal x2397=((1.0)*sj5);
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2397))+(((-1.0)*r11*x2396)))),IkReal(((((-1.0)*r00*x2397))+(((-1.0)*r01*x2396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2399.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2398.value)))+(x2399.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2400=IKcos(j0);
IkReal x2401=IKsin(j0);
IkReal x2402=(cj5*r01);
IkReal x2403=(cj1*cj2);
IkReal x2404=(sj1*sj2);
IkReal x2405=((0.425)*cj1);
IkReal x2406=(r00*sj5);
IkReal x2407=(cj5*r11);
IkReal x2408=(r10*sj5);
IkReal x2409=((0.39225)*x2400);
IkReal x2410=(x2401*x2404);
evalcond[0]=(x2406+x2402+((x2400*x2403))+(((-1.0)*x2400*x2404)));
evalcond[1]=(x2407+x2408+(((-1.0)*x2410))+((x2401*x2403)));
evalcond[2]=((((-1.0)*x2400*x2405))+(((-1.0)*x2403*x2409))+(((-0.09465)*x2402))+(((-0.09465)*x2406))+(((-1.0)*px))+(((0.10915)*x2401))+((x2404*x2409)));
evalcond[3]=((((-1.0)*x2401*x2405))+(((-0.10915)*x2400))+(((0.39225)*x2410))+(((-0.09465)*x2407))+(((-0.09465)*x2408))+(((-1.0)*py))+(((-0.39225)*x2401*x2403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2411=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2411;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2412=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2412;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2413=((1.0)*cj5);
IkReal x2414=((((-1.0)*r21*x2413))+(((-1.0)*r20*sj5)));
j4eval[0]=x2414;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2413))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2413))))));
j4eval[2]=IKsign(x2414);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2415=((-1.0)*r20);
IkReal x2417 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2417)==0){
continue;
}
IkReal x2416=pow(x2417,-0.5);
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2415),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2418.value));
IkReal gconst79=(r21*x2416);
IkReal gconst80=(x2415*x2416);
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2419.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2420=((-1.0)*r20);
IkReal x2421=x2416;
CheckValue<IkReal> x2423 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2420),IKFAST_ATAN2_MAGTHRESH);
if(!x2423.valid){
continue;
}
IkReal x2422=((-1.0)*(x2423.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2422;
IkReal gconst78=x2422;
IkReal gconst79=(r21*x2421);
IkReal gconst80=(x2420*x2421);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2424=((-1.0)*r20);
IkReal x2425=x2416;
CheckValue<IkReal> x2427 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2424),IKFAST_ATAN2_MAGTHRESH);
if(!x2427.valid){
continue;
}
IkReal x2426=((-1.0)*(x2427.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2426;
IkReal gconst78=x2426;
IkReal gconst79=(r21*x2425);
IkReal gconst80=(x2424*x2425);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2428=((-1.0)*r20);
IkReal x2429=x2416;
CheckValue<IkReal> x2431 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2428),IKFAST_ATAN2_MAGTHRESH);
if(!x2431.valid){
continue;
}
IkReal x2430=((-1.0)*(x2431.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2430;
IkReal gconst78=x2430;
IkReal gconst79=(r21*x2429);
IkReal gconst80=(x2428*x2429);
IkReal x2432=r22*r22;
CheckValue<IkReal> x2435=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2432))),-1);
if(!x2435.valid){
continue;
}
IkReal x2433=x2435.value;
IkReal x2434=(x2432+((x2433*(r20*r20*r20*r20)))+((x2433*(r21*r21*r21*r21)))+(((2.0)*x2433*(r20*r20)*(r21*r21))));
j4eval[0]=x2434;
j4eval[1]=IKsign(x2434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2436=(sj1*sj2);
IkReal x2437=(gconst80*r20);
IkReal x2438=(gconst79*r21);
IkReal x2439=(cj1*cj2);
CheckValue<IkReal> x2440 = IKatan2WithCheck(IkReal((((r22*x2436))+(((-1.0)*r22*x2439)))),IkReal(((((-1.0)*x2436*x2437))+((x2437*x2439))+(((-1.0)*x2438*x2439))+((x2436*x2438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2440.valid){
continue;
}
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(IKsign(((x2438*x2438)+(r22*r22)+(((-2.0)*x2437*x2438))+(x2437*x2437))),-1);
if(!x2441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2440.value)+(((1.5707963267949)*(x2441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2442=IKsin(j4);
IkReal x2443=IKcos(j4);
IkReal x2444=(gconst79*r01);
IkReal x2445=(cj2*sj1);
IkReal x2446=(gconst79*r21);
IkReal x2447=(gconst79*r11);
IkReal x2448=(cj1*sj2);
IkReal x2449=((1.0)*x2443);
IkReal x2450=(gconst80*x2443);
IkReal x2451=((1.0)*x2442);
IkReal x2452=(gconst80*x2451);
evalcond[0]=(((x2442*x2446))+(((-1.0)*r20*x2452))+(((-1.0)*r22*x2449)));
evalcond[1]=(sj0+((x2442*x2444))+(((-1.0)*r00*x2452))+(((-1.0)*r02*x2449)));
evalcond[2]=((((-1.0)*r10*x2452))+((x2442*x2447))+(((-1.0)*r12*x2449))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2446*x2449))+(((-1.0)*r22*x2451))+((r20*x2450)));
evalcond[4]=((((-1.0)*x2444*x2449))+((r00*x2450))+((cj0*x2445))+((cj0*x2448))+(((-1.0)*r02*x2451)));
evalcond[5]=(((sj0*x2445))+((sj0*x2448))+((r10*x2450))+(((-1.0)*r12*x2451))+(((-1.0)*x2447*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2453=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2453.value)))+(x2454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2455=IKsin(j4);
IkReal x2456=IKcos(j4);
IkReal x2457=(gconst79*r01);
IkReal x2458=(cj2*sj1);
IkReal x2459=(gconst79*r21);
IkReal x2460=(gconst79*r11);
IkReal x2461=(cj1*sj2);
IkReal x2462=((1.0)*x2456);
IkReal x2463=(gconst80*x2456);
IkReal x2464=((1.0)*x2455);
IkReal x2465=(gconst80*x2464);
evalcond[0]=((((-1.0)*r22*x2462))+(((-1.0)*r20*x2465))+((x2455*x2459)));
evalcond[1]=(sj0+(((-1.0)*r00*x2465))+((x2455*x2457))+(((-1.0)*r02*x2462)));
evalcond[2]=((((-1.0)*r12*x2462))+(((-1.0)*r10*x2465))+(((-1.0)*cj0))+((x2455*x2460)));
evalcond[3]=((((-1.0)*r22*x2464))+((r20*x2463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2459*x2462)));
evalcond[4]=((((-1.0)*x2457*x2462))+((cj0*x2458))+(((-1.0)*r02*x2464))+((cj0*x2461))+((r00*x2463)));
evalcond[5]=(((sj0*x2458))+(((-1.0)*r12*x2464))+(((-1.0)*x2460*x2462))+((sj0*x2461))+((r10*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2466.valid){
continue;
}
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2466.value)))+(x2467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2468=IKsin(j4);
IkReal x2469=IKcos(j4);
IkReal x2470=(gconst79*r01);
IkReal x2471=(cj2*sj1);
IkReal x2472=(gconst79*r21);
IkReal x2473=(gconst79*r11);
IkReal x2474=(cj1*sj2);
IkReal x2475=((1.0)*x2469);
IkReal x2476=(gconst80*x2469);
IkReal x2477=((1.0)*x2468);
IkReal x2478=(gconst80*x2477);
evalcond[0]=(((x2468*x2472))+(((-1.0)*r20*x2478))+(((-1.0)*r22*x2475)));
evalcond[1]=(((x2468*x2470))+sj0+(((-1.0)*r00*x2478))+(((-1.0)*r02*x2475)));
evalcond[2]=(((x2468*x2473))+(((-1.0)*r12*x2475))+(((-1.0)*r10*x2478))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2472*x2475))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2476))+(((-1.0)*r22*x2477)));
evalcond[4]=(((r00*x2476))+((cj0*x2474))+((cj0*x2471))+(((-1.0)*x2470*x2475))+(((-1.0)*r02*x2477)));
evalcond[5]=((((-1.0)*r12*x2477))+((r10*x2476))+(((-1.0)*x2473*x2475))+((sj0*x2471))+((sj0*x2474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2479=((-1.0)*r21);
IkReal x2481 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2481)==0){
continue;
}
IkReal x2480=pow(x2481,-0.5);
CheckValue<IkReal> x2482 = IKatan2WithCheck(IkReal(x2479),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2482.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2482.value))));
IkReal gconst82=(x2479*x2480);
IkReal gconst83=((1.0)*r20*x2480);
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2483.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2484=((-1.0)*r21);
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal(x2484),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
IkReal x2485=((1.0)*(x2487.value));
IkReal x2486=x2480;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2485)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2485)));
IkReal gconst82=(x2484*x2486);
IkReal gconst83=((1.0)*r20*x2486);
IkReal x2488=r22*r22;
IkReal x2489=((1.0)*x2488);
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(((-1.0)+x2488),-1);
if(!x2493.valid){
continue;
}
IkReal x2490=x2493.value;
if((((1.0)+(((-1.0)*x2489)))) < -0.00001)
continue;
IkReal x2491=IKsqrt(((1.0)+(((-1.0)*x2489))));
IkReal x2492=(sj0*x2490*x2491);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2492+(((-1.0)*x2489*x2492))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2494=((-1.0)*r21);
CheckValue<IkReal> x2497 = IKatan2WithCheck(IkReal(x2494),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2497.valid){
continue;
}
IkReal x2495=((1.0)*(x2497.value));
IkReal x2496=x2480;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2495)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2495)));
IkReal gconst82=(x2494*x2496);
IkReal gconst83=((1.0)*r20*x2496);
IkReal x2498=r22*r22;
IkReal x2499=((1.0)*x2498);
CheckValue<IkReal> x2503=IKPowWithIntegerCheck(((-1.0)+x2498),-1);
if(!x2503.valid){
continue;
}
IkReal x2500=x2503.value;
if((((1.0)+(((-1.0)*x2499)))) < -0.00001)
continue;
IkReal x2501=IKsqrt(((1.0)+(((-1.0)*x2499))));
IkReal x2502=(cj0*x2500*x2501);
j4eval[0]=((IKabs((x2502+(((-1.0)*x2499*x2502)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2504=((-1.0)*r21);
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(x2504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
IkReal x2505=((1.0)*(x2507.value));
IkReal x2506=x2480;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2505)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2505)));
IkReal gconst82=(x2504*x2506);
IkReal gconst83=((1.0)*r20*x2506);
IkReal x2508=r22*r22;
IkReal x2509=(cj0*r02);
IkReal x2510=(r12*sj0);
CheckValue<IkReal> x2514=IKPowWithIntegerCheck(((-1.0)+x2508),-1);
if(!x2514.valid){
continue;
}
IkReal x2511=x2514.value;
if((((1.0)+(((-1.0)*x2508)))) < -0.00001)
continue;
IkReal x2512=IKsqrt(((1.0)+(((-1.0)*x2508))));
IkReal x2513=((1.0)*r22*x2511*x2512);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x2510+x2509)))+(IKabs(((((-1.0)*x2510*x2513))+(((-1.0)*x2509*x2513))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2515=((1.0)*gconst83);
CheckValue<IkReal> x2516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2515)))),-1);
if(!x2516.valid){
continue;
}
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2515))+((gconst82*r11*sj0))+(((-1.0)*cj0*r00*x2515))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2516.value)))+(x2517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2518=IKsin(j4);
IkReal x2519=IKcos(j4);
IkReal x2520=(cj2*sj1);
IkReal x2521=(gconst82*r11);
IkReal x2522=(cj1*sj2);
IkReal x2523=((1.0)*x2519);
IkReal x2524=(gconst83*x2519);
IkReal x2525=(gconst82*x2518);
IkReal x2526=((1.0)*x2518);
evalcond[0]=((((-1.0)*gconst83*r20*x2526))+((r21*x2525))+(((-1.0)*r22*x2523)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2526))+((r01*x2525))+(((-1.0)*r02*x2523)));
evalcond[2]=((((-1.0)*gconst83*r10*x2526))+(((-1.0)*r12*x2523))+((x2518*x2521))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2523))+((r20*x2524))+(((-1.0)*r22*x2526)));
evalcond[4]=(((r00*x2524))+(((-1.0)*r02*x2526))+((cj0*x2520))+((cj0*x2522))+(((-1.0)*gconst82*r01*x2523)));
evalcond[5]=((((-1.0)*r12*x2526))+((sj0*x2520))+((sj0*x2522))+((r10*x2524))+(((-1.0)*x2521*x2523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
CheckValue<IkReal> x2528=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2527.value)+(((1.5707963267949)*(x2528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2529=IKsin(j4);
IkReal x2530=IKcos(j4);
IkReal x2531=(cj2*sj1);
IkReal x2532=(gconst82*r11);
IkReal x2533=(cj1*sj2);
IkReal x2534=((1.0)*x2530);
IkReal x2535=(gconst83*x2530);
IkReal x2536=(gconst82*x2529);
IkReal x2537=((1.0)*x2529);
evalcond[0]=((((-1.0)*gconst83*r20*x2537))+((r21*x2536))+(((-1.0)*r22*x2534)));
evalcond[1]=(((r01*x2536))+sj0+(((-1.0)*r02*x2534))+(((-1.0)*gconst83*r00*x2537)));
evalcond[2]=((((-1.0)*gconst83*r10*x2537))+(((-1.0)*r12*x2534))+((x2529*x2532))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2534))+((r20*x2535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2537)));
evalcond[4]=((((-1.0)*r02*x2537))+((cj0*x2531))+((cj0*x2533))+(((-1.0)*gconst82*r01*x2534))+((r00*x2535)));
evalcond[5]=(((sj0*x2533))+((sj0*x2531))+((r10*x2535))+(((-1.0)*r12*x2537))+(((-1.0)*x2532*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2538.value)+(((1.5707963267949)*(x2539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2540=IKsin(j4);
IkReal x2541=IKcos(j4);
IkReal x2542=(cj2*sj1);
IkReal x2543=(gconst82*r11);
IkReal x2544=(cj1*sj2);
IkReal x2545=((1.0)*x2541);
IkReal x2546=(gconst83*x2541);
IkReal x2547=(gconst82*x2540);
IkReal x2548=((1.0)*x2540);
evalcond[0]=(((r21*x2547))+(((-1.0)*gconst83*r20*x2548))+(((-1.0)*r22*x2545)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2548))+((r01*x2547))+(((-1.0)*r02*x2545)));
evalcond[2]=((((-1.0)*r12*x2545))+((x2540*x2543))+(((-1.0)*gconst83*r10*x2548))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2546))+(((-1.0)*r22*x2548)));
evalcond[4]=(((r00*x2546))+(((-1.0)*gconst82*r01*x2545))+(((-1.0)*r02*x2548))+((cj0*x2542))+((cj0*x2544)));
evalcond[5]=((((-1.0)*r12*x2548))+(((-1.0)*x2543*x2545))+((sj0*x2544))+((sj0*x2542))+((r10*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2550 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2550)==0){
continue;
}
IkReal x2549=pow(x2550,-0.5);
CheckValue<IkReal> x2551 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2551.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2551.value));
IkReal gconst85=((-1.0)*r01*x2549);
IkReal gconst86=(r00*x2549);
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2552.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
IkReal x2553=((-1.0)*(x2555.value));
IkReal x2554=x2549;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2553;
IkReal gconst84=x2553;
IkReal gconst85=((-1.0)*r01*x2554);
IkReal gconst86=(r00*x2554);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2556=((1.0)*gconst86);
CheckValue<IkReal> x2557=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2556)))),-1);
if(!x2557.valid){
continue;
}
CheckValue<IkReal> x2558 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2556))+((gconst85*r11*sj0))+(((-1.0)*r10*sj0*x2556))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2557.value)))+(x2558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2559=IKsin(j4);
IkReal x2560=IKcos(j4);
IkReal x2561=(gconst85*r21);
IkReal x2562=(cj2*sj1);
IkReal x2563=(gconst86*r00);
IkReal x2564=(gconst86*r10);
IkReal x2565=(gconst85*r11);
IkReal x2566=(gconst85*r01);
IkReal x2567=(gconst86*r20);
IkReal x2568=(cj1*sj2);
IkReal x2569=((1.0)*x2560);
IkReal x2570=((1.0)*x2559);
evalcond[0]=((((-1.0)*r22*x2569))+((x2559*x2561))+(((-1.0)*x2567*x2570)));
evalcond[1]=(sj0+(((-1.0)*r02*x2569))+(((-1.0)*x2563*x2570))+((x2559*x2566)));
evalcond[2]=(((x2559*x2565))+(((-1.0)*x2564*x2570))+(((-1.0)*r12*x2569))+(((-1.0)*cj0)));
evalcond[3]=(((x2560*x2567))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2561*x2569))+(((-1.0)*r22*x2570)));
evalcond[4]=(((x2560*x2563))+(((-1.0)*x2566*x2569))+((cj0*x2562))+((cj0*x2568))+(((-1.0)*r02*x2570)));
evalcond[5]=(((x2560*x2564))+(((-1.0)*r12*x2570))+(((-1.0)*x2565*x2569))+((sj0*x2568))+((sj0*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2571=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x2571.valid){
continue;
}
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2571.value)))+(x2572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2573=IKsin(j4);
IkReal x2574=IKcos(j4);
IkReal x2575=(gconst85*r21);
IkReal x2576=(cj2*sj1);
IkReal x2577=(gconst86*r00);
IkReal x2578=(gconst86*r10);
IkReal x2579=(gconst85*r11);
IkReal x2580=(gconst85*r01);
IkReal x2581=(gconst86*r20);
IkReal x2582=(cj1*sj2);
IkReal x2583=((1.0)*x2574);
IkReal x2584=((1.0)*x2573);
evalcond[0]=(((x2573*x2575))+(((-1.0)*x2581*x2584))+(((-1.0)*r22*x2583)));
evalcond[1]=(sj0+(((-1.0)*r02*x2583))+((x2573*x2580))+(((-1.0)*x2577*x2584)));
evalcond[2]=(((x2573*x2579))+(((-1.0)*x2578*x2584))+(((-1.0)*cj0))+(((-1.0)*r12*x2583)));
evalcond[3]=(((x2574*x2581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2575*x2583))+(((-1.0)*r22*x2584)));
evalcond[4]=(((x2574*x2577))+(((-1.0)*r02*x2584))+((cj0*x2582))+((cj0*x2576))+(((-1.0)*x2580*x2583)));
evalcond[5]=(((x2574*x2578))+(((-1.0)*x2579*x2583))+((sj0*x2576))+((sj0*x2582))+(((-1.0)*r12*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2586 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2586)==0){
continue;
}
IkReal x2585=pow(x2586,-0.5);
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2587.value))));
IkReal gconst88=((1.0)*r01*x2585);
IkReal gconst89=((-1.0)*r00*x2585);
CheckValue<IkReal> x2588 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2588.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2588.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
IkReal x2589=((1.0)*(x2591.value));
IkReal x2590=x2585;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2589)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2589)));
IkReal gconst88=((1.0)*r01*x2590);
IkReal gconst89=((-1.0)*r00*x2590);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
IkReal x2592=((1.0)*(x2594.value));
IkReal x2593=x2585;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2592)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2592)));
IkReal gconst88=((1.0)*r01*x2593);
IkReal gconst89=((-1.0)*r00*x2593);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
IkReal x2595=((1.0)*(x2597.value));
IkReal x2596=x2585;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2595)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2595)));
IkReal gconst88=((1.0)*r01*x2596);
IkReal gconst89=((-1.0)*r00*x2596);
IkReal x2598=r02*r02;
IkReal x2599=(r12*sj0);
IkReal x2600=x2585;
IkReal x2601=(cj0*x2600);
j4eval[0]=((IKabs(((((-1.0)*x2601))+((x2598*x2601))+((r02*x2599*x2600)))))+(IKabs((x2599+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2602=((1.0)*gconst89);
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*cj0*r00*x2602))+((gconst88*r11*sj0))+(((-1.0)*r10*sj0*x2602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2602)))),-1);
if(!x2604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2603.value)+(((1.5707963267949)*(x2604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2605=IKsin(j4);
IkReal x2606=IKcos(j4);
IkReal x2607=(cj2*sj1);
IkReal x2608=(cj1*sj2);
IkReal x2609=((1.0)*x2606);
IkReal x2610=(gconst89*x2606);
IkReal x2611=((1.0)*x2605);
IkReal x2612=(gconst88*x2605);
IkReal x2613=(gconst89*x2611);
evalcond[0]=((((-1.0)*r22*x2609))+(((-1.0)*r20*x2613))+((r21*x2612)));
evalcond[1]=((((-1.0)*r00*x2613))+((r01*x2612))+sj0+(((-1.0)*r02*x2609)));
evalcond[2]=((((-1.0)*r12*x2609))+((r11*x2612))+(((-1.0)*r10*x2613))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2609))+(((-1.0)*r22*x2611)));
evalcond[4]=(((r00*x2610))+(((-1.0)*gconst88*r01*x2609))+((cj0*x2608))+((cj0*x2607))+(((-1.0)*r02*x2611)));
evalcond[5]=((((-1.0)*gconst88*r11*x2609))+(((-1.0)*r12*x2611))+((sj0*x2607))+((sj0*x2608))+((r10*x2610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2614.valid){
continue;
}
CheckValue<IkReal> x2615 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2614.value)))+(x2615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2616=IKsin(j4);
IkReal x2617=IKcos(j4);
IkReal x2618=(cj2*sj1);
IkReal x2619=(cj1*sj2);
IkReal x2620=((1.0)*x2617);
IkReal x2621=(gconst89*x2617);
IkReal x2622=((1.0)*x2616);
IkReal x2623=(gconst88*x2616);
IkReal x2624=(gconst89*x2622);
evalcond[0]=((((-1.0)*r22*x2620))+((r21*x2623))+(((-1.0)*r20*x2624)));
evalcond[1]=(((r01*x2623))+(((-1.0)*r00*x2624))+sj0+(((-1.0)*r02*x2620)));
evalcond[2]=((((-1.0)*r12*x2620))+(((-1.0)*r10*x2624))+((r11*x2623))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2621))+(((-1.0)*gconst88*r21*x2620))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2622)));
evalcond[4]=(((r00*x2621))+(((-1.0)*r02*x2622))+((cj0*x2619))+((cj0*x2618))+(((-1.0)*gconst88*r01*x2620)));
evalcond[5]=((((-1.0)*gconst88*r11*x2620))+(((-1.0)*r12*x2622))+((r10*x2621))+((sj0*x2618))+((sj0*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2625=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2625.valid){
continue;
}
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2625.value)))+(x2626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2627=IKsin(j4);
IkReal x2628=IKcos(j4);
IkReal x2629=(cj2*sj1);
IkReal x2630=(cj1*sj2);
IkReal x2631=((1.0)*x2628);
IkReal x2632=(gconst89*x2628);
IkReal x2633=((1.0)*x2627);
IkReal x2634=(gconst88*x2627);
IkReal x2635=(gconst89*x2633);
evalcond[0]=((((-1.0)*r20*x2635))+((r21*x2634))+(((-1.0)*r22*x2631)));
evalcond[1]=(sj0+(((-1.0)*r02*x2631))+(((-1.0)*r00*x2635))+((r01*x2634)));
evalcond[2]=((((-1.0)*r10*x2635))+((r11*x2634))+(((-1.0)*r12*x2631))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2632))+(((-1.0)*gconst88*r21*x2631))+(((-1.0)*r22*x2633)));
evalcond[4]=((((-1.0)*r02*x2633))+((cj0*x2630))+((r00*x2632))+(((-1.0)*gconst88*r01*x2631))+((cj0*x2629)));
evalcond[5]=(((sj0*x2630))+((r10*x2632))+(((-1.0)*r12*x2633))+((sj0*x2629))+(((-1.0)*gconst88*r11*x2631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2636=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2636;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2637=((1.0)*cj5);
IkReal x2638=((((-1.0)*r21*x2637))+(((-1.0)*r20*sj5)));
j4eval[0]=x2638;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2637))+((r11*sj5))))));
j4eval[2]=IKsign(x2638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2639=cj5*cj5;
IkReal x2640=r01*r01;
IkReal x2641=(cj5*r00);
IkReal x2642=(r01*sj5);
IkReal x2643=(((x2639*(r00*r00)))+(((-2.0)*x2641*x2642))+(r02*r02)+(((-1.0)*x2639*x2640))+x2640);
j4eval[0]=x2643;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2642))+x2641))));
j4eval[2]=IKsign(x2643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2644=cj5*cj5;
IkReal x2645=r01*r01;
IkReal x2646=(r01*sj5);
IkReal x2647=(cj5*r00);
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2646*x2647))+(((-1.0)*x2644*x2645))+(r02*r02)+((x2644*(r00*r00)))+x2645)),-1);
if(!x2648.valid){
continue;
}
CheckValue<IkReal> x2649 = IKatan2WithCheck(IkReal(((((-1.0)*x2646))+x2647)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2648.value)))+(x2649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2650=IKsin(j4);
IkReal x2651=IKcos(j4);
IkReal x2652=(cj5*r10);
IkReal x2653=(r01*sj5);
IkReal x2654=(cj5*r00);
IkReal x2655=(cj5*r20);
IkReal x2656=((1.0)*x2651);
IkReal x2657=((1.0)*x2650);
IkReal x2658=(sj5*x2650);
evalcond[0]=((((-1.0)*r22*x2656))+((r21*x2658))+(((-1.0)*x2655*x2657)));
evalcond[1]=((((-1.0)*x2652*x2657))+((r11*x2658))+(((-1.0)*r12*x2656)));
evalcond[2]=((((-1.0)*r02*x2657))+((x2651*x2654))+(((-1.0)*x2653*x2656)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2656))+((x2650*x2653))+(((-1.0)*x2654*x2657)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2656))+(((-1.0)*r12*x2657))+((cj1*sj2))+((x2651*x2652)));
evalcond[5]=((((-1.0)*r22*x2657))+(((-1.0)*r21*sj5*x2656))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2651*x2655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2659=((1.0)*cj5);
CheckValue<IkReal> x2660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2659))+(((-1.0)*r20*sj5)))),-1);
if(!x2660.valid){
continue;
}
CheckValue<IkReal> x2661 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2660.value)))+(x2661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2662=IKsin(j4);
IkReal x2663=IKcos(j4);
IkReal x2664=(cj5*r10);
IkReal x2665=(r01*sj5);
IkReal x2666=(cj5*r00);
IkReal x2667=(cj5*r20);
IkReal x2668=((1.0)*x2663);
IkReal x2669=((1.0)*x2662);
IkReal x2670=(sj5*x2662);
evalcond[0]=(((r21*x2670))+(((-1.0)*x2667*x2669))+(((-1.0)*r22*x2668)));
evalcond[1]=((((-1.0)*r12*x2668))+(((-1.0)*x2664*x2669))+((r11*x2670)));
evalcond[2]=(((x2663*x2666))+(((-1.0)*r02*x2669))+(((-1.0)*x2665*x2668)));
evalcond[3]=((1.0)+((x2662*x2665))+(((-1.0)*r02*x2668))+(((-1.0)*x2666*x2669)));
evalcond[4]=((((-1.0)*r12*x2669))+((cj2*sj1))+((x2663*x2664))+((cj1*sj2))+(((-1.0)*r11*sj5*x2668)));
evalcond[5]=((((-1.0)*r21*sj5*x2668))+((x2663*x2667))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2671.value)+(((1.5707963267949)*(x2672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(cj5*r10);
IkReal x2676=(r01*sj5);
IkReal x2677=(cj5*r00);
IkReal x2678=(cj5*r20);
IkReal x2679=((1.0)*x2674);
IkReal x2680=((1.0)*x2673);
IkReal x2681=(sj5*x2673);
evalcond[0]=(((r21*x2681))+(((-1.0)*r22*x2679))+(((-1.0)*x2678*x2680)));
evalcond[1]=((((-1.0)*r12*x2679))+((r11*x2681))+(((-1.0)*x2675*x2680)));
evalcond[2]=((((-1.0)*r02*x2680))+(((-1.0)*x2676*x2679))+((x2674*x2677)));
evalcond[3]=((1.0)+((x2673*x2676))+(((-1.0)*r02*x2679))+(((-1.0)*x2677*x2680)));
evalcond[4]=((((-1.0)*r12*x2680))+((cj2*sj1))+((cj1*sj2))+((x2674*x2675))+(((-1.0)*r11*sj5*x2679)));
evalcond[5]=((((-1.0)*r21*sj5*x2679))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2680))+((x2674*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2682=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2682;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2683=((1.0)*cj5);
IkReal x2684=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2683)));
j4eval[0]=x2684;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2683))))));
j4eval[2]=IKsign(x2684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2685=cj5*cj5;
IkReal x2686=r01*r01;
IkReal x2687=(r01*sj5);
IkReal x2688=(cj5*r00);
IkReal x2689=((((-1.0)*(r02*r02)))+((x2685*x2686))+(((-1.0)*x2685*(r00*r00)))+(((2.0)*x2687*x2688))+(((-1.0)*x2686)));
j4eval[0]=x2689;
j4eval[1]=IKsign(x2689);
j4eval[2]=((IKabs(((((-1.0)*x2687))+x2688)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2690=cj5*cj5;
IkReal x2691=r01*r01;
IkReal x2692=(r01*sj5);
IkReal x2693=(cj5*r00);
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal(((((-1.0)*x2692))+x2693)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2692*x2693))+(((-1.0)*x2691))+((x2690*x2691))+(((-1.0)*x2690*(r00*r00))))),-1);
if(!x2695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2694.value)+(((1.5707963267949)*(x2695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2696=IKsin(j4);
IkReal x2697=IKcos(j4);
IkReal x2698=(cj5*r10);
IkReal x2699=(r01*sj5);
IkReal x2700=((1.0)*cj2);
IkReal x2701=(cj5*r00);
IkReal x2702=(cj5*r20);
IkReal x2703=((1.0)*x2697);
IkReal x2704=((1.0)*x2696);
IkReal x2705=(sj5*x2696);
evalcond[0]=((((-1.0)*x2702*x2704))+(((-1.0)*r22*x2703))+((r21*x2705)));
evalcond[1]=(((r11*x2705))+(((-1.0)*r12*x2703))+(((-1.0)*x2698*x2704)));
evalcond[2]=((((-1.0)*r02*x2704))+((x2697*x2701))+(((-1.0)*x2699*x2703)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2703))+((x2696*x2699))+(((-1.0)*x2701*x2704)));
evalcond[4]=((((-1.0)*r22*x2704))+((sj1*sj2))+((x2697*x2702))+(((-1.0)*cj1*x2700))+(((-1.0)*r21*sj5*x2703)));
evalcond[5]=((((-1.0)*r11*sj5*x2703))+(((-1.0)*r12*x2704))+(((-1.0)*cj1*sj2))+((x2697*x2698))+(((-1.0)*sj1*x2700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2706=((1.0)*cj5);
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2706)))),-1);
if(!x2707.valid){
continue;
}
CheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2707.value)))+(x2708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2709=IKsin(j4);
IkReal x2710=IKcos(j4);
IkReal x2711=(cj5*r10);
IkReal x2712=(r01*sj5);
IkReal x2713=((1.0)*cj2);
IkReal x2714=(cj5*r00);
IkReal x2715=(cj5*r20);
IkReal x2716=((1.0)*x2710);
IkReal x2717=((1.0)*x2709);
IkReal x2718=(sj5*x2709);
evalcond[0]=((((-1.0)*x2715*x2717))+(((-1.0)*r22*x2716))+((r21*x2718)));
evalcond[1]=(((r11*x2718))+(((-1.0)*r12*x2716))+(((-1.0)*x2711*x2717)));
evalcond[2]=((((-1.0)*x2712*x2716))+(((-1.0)*r02*x2717))+((x2710*x2714)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2716))+((x2709*x2712))+(((-1.0)*x2714*x2717)));
evalcond[4]=((((-1.0)*r21*sj5*x2716))+((sj1*sj2))+((x2710*x2715))+(((-1.0)*r22*x2717))+(((-1.0)*cj1*x2713)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2710*x2711))+(((-1.0)*r11*sj5*x2716))+(((-1.0)*sj1*x2713))+(((-1.0)*r12*x2717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2719=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2719.valid){
continue;
}
CheckValue<IkReal> x2720 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2719.value)))+(x2720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2721=IKsin(j4);
IkReal x2722=IKcos(j4);
IkReal x2723=(cj5*r10);
IkReal x2724=(r01*sj5);
IkReal x2725=((1.0)*cj2);
IkReal x2726=(cj5*r00);
IkReal x2727=(cj5*r20);
IkReal x2728=((1.0)*x2722);
IkReal x2729=((1.0)*x2721);
IkReal x2730=(sj5*x2721);
evalcond[0]=((((-1.0)*x2727*x2729))+((r21*x2730))+(((-1.0)*r22*x2728)));
evalcond[1]=((((-1.0)*r12*x2728))+(((-1.0)*x2723*x2729))+((r11*x2730)));
evalcond[2]=((((-1.0)*x2724*x2728))+((x2722*x2726))+(((-1.0)*r02*x2729)));
evalcond[3]=((-1.0)+(((-1.0)*x2726*x2729))+((x2721*x2724))+(((-1.0)*r02*x2728)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x2729))+((x2722*x2727))+(((-1.0)*r21*sj5*x2728))+(((-1.0)*cj1*x2725)));
evalcond[5]=((((-1.0)*sj1*x2725))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2729))+(((-1.0)*r11*sj5*x2728))+((x2722*x2723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2732 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2732)==0){
continue;
}
IkReal x2731=pow(x2732,-0.5);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2733.value));
IkReal gconst91=((-1.0)*r11*x2731);
IkReal gconst92=(r10*x2731);
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2734.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
IkReal x2735=((-1.0)*(x2737.value));
IkReal x2736=x2731;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2735;
IkReal gconst90=x2735;
IkReal gconst91=((-1.0)*r11*x2736);
IkReal gconst92=(r10*x2736);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2738=((1.0)*gconst92);
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2738)))),-1);
if(!x2739.valid){
continue;
}
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst91*r11*sj0))+(((-1.0)*cj0*r00*x2738))+((cj0*gconst91*r01))+(((-1.0)*r10*sj0*x2738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2739.value)))+(x2740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2741=IKsin(j4);
IkReal x2742=IKcos(j4);
IkReal x2743=(cj2*sj1);
IkReal x2744=(gconst92*r00);
IkReal x2745=(gconst92*r20);
IkReal x2746=(gconst92*r10);
IkReal x2747=(cj1*sj2);
IkReal x2748=((1.0)*x2742);
IkReal x2749=(gconst91*x2741);
IkReal x2750=((1.0)*x2741);
evalcond[0]=(((r21*x2749))+(((-1.0)*x2745*x2750))+(((-1.0)*r22*x2748)));
evalcond[1]=((((-1.0)*x2744*x2750))+sj0+((r01*x2749))+(((-1.0)*r02*x2748)));
evalcond[2]=(((r11*x2749))+(((-1.0)*r12*x2748))+(((-1.0)*x2746*x2750))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2750))+(((-1.0)*gconst91*r21*x2748))+((x2742*x2745))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x2742*x2744))+((cj0*x2743))+((cj0*x2747))+(((-1.0)*gconst91*r01*x2748))+(((-1.0)*r02*x2750)));
evalcond[5]=(((x2742*x2746))+(((-1.0)*gconst91*r11*x2748))+((sj0*x2747))+((sj0*x2743))+(((-1.0)*r12*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2751.value)+(((1.5707963267949)*(x2752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2753=IKsin(j4);
IkReal x2754=IKcos(j4);
IkReal x2755=(cj2*sj1);
IkReal x2756=(gconst92*r00);
IkReal x2757=(gconst92*r20);
IkReal x2758=(gconst92*r10);
IkReal x2759=(cj1*sj2);
IkReal x2760=((1.0)*x2754);
IkReal x2761=(gconst91*x2753);
IkReal x2762=((1.0)*x2753);
evalcond[0]=((((-1.0)*x2757*x2762))+((r21*x2761))+(((-1.0)*r22*x2760)));
evalcond[1]=(sj0+((r01*x2761))+(((-1.0)*r02*x2760))+(((-1.0)*x2756*x2762)));
evalcond[2]=((((-1.0)*r12*x2760))+(((-1.0)*x2758*x2762))+(((-1.0)*cj0))+((r11*x2761)));
evalcond[3]=(((x2754*x2757))+(((-1.0)*gconst91*r21*x2760))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2762)));
evalcond[4]=(((x2754*x2756))+((cj0*x2755))+((cj0*x2759))+(((-1.0)*gconst91*r01*x2760))+(((-1.0)*r02*x2762)));
evalcond[5]=((((-1.0)*r12*x2762))+((x2754*x2758))+(((-1.0)*gconst91*r11*x2760))+((sj0*x2755))+((sj0*x2759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2764 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2764)==0){
continue;
}
IkReal x2763=pow(x2764,-0.5);
CheckValue<IkReal> x2765 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2765.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2765.value))));
IkReal gconst94=((1.0)*r11*x2763);
IkReal gconst95=((-1.0)*r10*x2763);
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2766.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2769 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2769.valid){
continue;
}
IkReal x2767=((1.0)*(x2769.value));
IkReal x2768=x2763;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2767)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2767)));
IkReal gconst94=((1.0)*r11*x2768);
IkReal gconst95=((-1.0)*r10*x2768);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2772 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2772.valid){
continue;
}
IkReal x2770=((1.0)*(x2772.value));
IkReal x2771=x2763;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2770)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2770)));
IkReal gconst94=((1.0)*r11*x2771);
IkReal gconst95=((-1.0)*r10*x2771);
IkReal x2773=r12*r12;
IkReal x2774=(cj0*r02);
IkReal x2775=x2763;
IkReal x2776=(sj0*x2775);
j4eval[0]=((IKabs(((((-1.0)*x2776))+((r12*x2774*x2775))+((x2773*x2776)))))+(IKabs((x2774+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2779 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2779.valid){
continue;
}
IkReal x2777=((1.0)*(x2779.value));
IkReal x2778=x2763;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2777)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2777)));
IkReal gconst94=((1.0)*r11*x2778);
IkReal gconst95=((-1.0)*r10*x2778);
IkReal x2780=r12*r12;
IkReal x2781=(sj1*sj2);
IkReal x2782=((1.0)*cj1*cj2);
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(((-1.0)+x2780),-1);
if(!x2786.valid){
continue;
}
IkReal x2783=x2786.value;
if((((1.0)+(((-1.0)*x2780)))) < -0.00001)
continue;
IkReal x2784=IKsqrt(((1.0)+(((-1.0)*x2780))));
IkReal x2785=(r12*r22*x2783*x2784);
j4eval[0]=((IKabs((((x2781*x2785))+(((-1.0)*x2782*x2785)))))+(IKabs(((((-1.0)*r22*x2782))+((r22*x2781))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2787=(gconst94*r21);
IkReal x2788=(cj1*cj2);
IkReal x2789=(sj1*sj2);
IkReal x2790=(gconst95*r20);
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2788))+((r22*x2789)))),IkReal((((x2787*x2789))+(((-1.0)*x2789*x2790))+(((-1.0)*x2787*x2788))+((x2788*x2790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2787*x2790))+(r22*r22)+(x2790*x2790)+(x2787*x2787))),-1);
if(!x2792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2793=IKsin(j4);
IkReal x2794=IKcos(j4);
IkReal x2795=(cj2*sj1);
IkReal x2796=(gconst94*r11);
IkReal x2797=(gconst95*r10);
IkReal x2798=(gconst94*r21);
IkReal x2799=(gconst94*r01);
IkReal x2800=(cj1*sj2);
IkReal x2801=((1.0)*x2794);
IkReal x2802=((1.0)*x2793);
IkReal x2803=(gconst95*x2794);
evalcond[0]=((((-1.0)*gconst95*r20*x2802))+((x2793*x2798))+(((-1.0)*r22*x2801)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2802))+((x2793*x2799))+(((-1.0)*r02*x2801)));
evalcond[2]=(((x2793*x2796))+(((-1.0)*r12*x2801))+(((-1.0)*x2797*x2802))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2803))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2802))+(((-1.0)*x2798*x2801)));
evalcond[4]=((((-1.0)*x2799*x2801))+((cj0*x2800))+(((-1.0)*r02*x2802))+((cj0*x2795))+((r00*x2803)));
evalcond[5]=(((x2794*x2797))+(((-1.0)*r12*x2802))+((sj0*x2795))+(((-1.0)*x2796*x2801))+((sj0*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2804=((1.0)*gconst95);
CheckValue<IkReal> x2805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2804))+(((-1.0)*gconst94*r20)))),-1);
if(!x2805.valid){
continue;
}
CheckValue<IkReal> x2806 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2804))+((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*cj0*r00*x2804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2805.value)))+(x2806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2807=IKsin(j4);
IkReal x2808=IKcos(j4);
IkReal x2809=(cj2*sj1);
IkReal x2810=(gconst94*r11);
IkReal x2811=(gconst95*r10);
IkReal x2812=(gconst94*r21);
IkReal x2813=(gconst94*r01);
IkReal x2814=(cj1*sj2);
IkReal x2815=((1.0)*x2808);
IkReal x2816=((1.0)*x2807);
IkReal x2817=(gconst95*x2808);
evalcond[0]=((((-1.0)*r22*x2815))+(((-1.0)*gconst95*r20*x2816))+((x2807*x2812)));
evalcond[1]=((((-1.0)*r02*x2815))+sj0+(((-1.0)*gconst95*r00*x2816))+((x2807*x2813)));
evalcond[2]=((((-1.0)*r12*x2815))+(((-1.0)*cj0))+(((-1.0)*x2811*x2816))+((x2807*x2810)));
evalcond[3]=((((-1.0)*x2812*x2815))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2816))+((r20*x2817)));
evalcond[4]=(((r00*x2817))+(((-1.0)*r02*x2816))+(((-1.0)*x2813*x2815))+((cj0*x2809))+((cj0*x2814)));
evalcond[5]=((((-1.0)*r12*x2816))+(((-1.0)*x2810*x2815))+((sj0*x2814))+((x2808*x2811))+((sj0*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2818.value)+(((1.5707963267949)*(x2819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2820=IKsin(j4);
IkReal x2821=IKcos(j4);
IkReal x2822=(cj2*sj1);
IkReal x2823=(gconst94*r11);
IkReal x2824=(gconst95*r10);
IkReal x2825=(gconst94*r21);
IkReal x2826=(gconst94*r01);
IkReal x2827=(cj1*sj2);
IkReal x2828=((1.0)*x2821);
IkReal x2829=((1.0)*x2820);
IkReal x2830=(gconst95*x2821);
evalcond[0]=((((-1.0)*r22*x2828))+(((-1.0)*gconst95*r20*x2829))+((x2820*x2825)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2829))+(((-1.0)*r02*x2828))+((x2820*x2826)));
evalcond[2]=((((-1.0)*r12*x2828))+(((-1.0)*x2824*x2829))+((x2820*x2823))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2830))+(((-1.0)*r22*x2829))+(((-1.0)*x2825*x2828)));
evalcond[4]=((((-1.0)*x2826*x2828))+(((-1.0)*r02*x2829))+((r00*x2830))+((cj0*x2827))+((cj0*x2822)));
evalcond[5]=(((x2821*x2824))+(((-1.0)*r12*x2829))+((sj0*x2827))+((sj0*x2822))+(((-1.0)*x2823*x2828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2831=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2831;
j4eval[1]=IKsign(x2831);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2832=((1.0)*cj5);
IkReal x2833=((((-1.0)*r21*x2832))+(((-1.0)*r20*sj5)));
j4eval[0]=x2833;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2832))+((r01*sj5))))));
j4eval[2]=IKsign(x2833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2834=cj5*cj5;
IkReal x2835=r11*r11;
IkReal x2836=(cj5*r10);
IkReal x2837=(r11*sj5);
IkReal x2838=((((-1.0)*x2835))+((x2834*x2835))+(((-1.0)*(r12*r12)))+(((2.0)*x2836*x2837))+(((-1.0)*x2834*(r10*r10))));
j4eval[0]=x2838;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2837))+x2836))));
j4eval[2]=IKsign(x2838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2839=cj5*cj5;
IkReal x2840=r11*r11;
IkReal x2841=(cj5*r10);
IkReal x2842=(r11*sj5);
CheckValue<IkReal> x2843 = IKatan2WithCheck(IkReal(((((-1.0)*x2842))+x2841)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2843.valid){
continue;
}
CheckValue<IkReal> x2844=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2839*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2840))+(((2.0)*x2841*x2842))+((x2839*x2840)))),-1);
if(!x2844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2843.value)+(((1.5707963267949)*(x2844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2845=IKsin(j4);
IkReal x2846=IKcos(j4);
IkReal x2847=(cj5*r10);
IkReal x2848=(r01*sj5);
IkReal x2849=(cj5*r00);
IkReal x2850=(cj5*r20);
IkReal x2851=((1.0)*x2846);
IkReal x2852=((1.0)*x2845);
IkReal x2853=(sj5*x2845);
evalcond[0]=(((r21*x2853))+(((-1.0)*x2850*x2852))+(((-1.0)*r22*x2851)));
evalcond[1]=((((-1.0)*x2849*x2852))+(((-1.0)*r02*x2851))+((x2845*x2848)));
evalcond[2]=((((-1.0)*r11*sj5*x2851))+(((-1.0)*r12*x2852))+((x2846*x2847)));
evalcond[3]=((-1.0)+((r11*x2853))+(((-1.0)*r12*x2851))+(((-1.0)*x2847*x2852)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2846*x2849))+(((-1.0)*r02*x2852))+(((-1.0)*x2848*x2851)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2846*x2850))+(((-1.0)*r22*x2852))+(((-1.0)*r21*sj5*x2851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2854=((1.0)*cj5);
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2854))+(((-1.0)*r20*sj5)))),-1);
if(!x2856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2855.value)+(((1.5707963267949)*(x2856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2857=IKsin(j4);
IkReal x2858=IKcos(j4);
IkReal x2859=(cj5*r10);
IkReal x2860=(r01*sj5);
IkReal x2861=(cj5*r00);
IkReal x2862=(cj5*r20);
IkReal x2863=((1.0)*x2858);
IkReal x2864=((1.0)*x2857);
IkReal x2865=(sj5*x2857);
evalcond[0]=((((-1.0)*x2862*x2864))+((r21*x2865))+(((-1.0)*r22*x2863)));
evalcond[1]=((((-1.0)*r02*x2863))+((x2857*x2860))+(((-1.0)*x2861*x2864)));
evalcond[2]=((((-1.0)*r12*x2864))+((x2858*x2859))+(((-1.0)*r11*sj5*x2863)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2863))+(((-1.0)*x2859*x2864))+((r11*x2865)));
evalcond[4]=((((-1.0)*r02*x2864))+((cj2*sj1))+((cj1*sj2))+((x2858*x2861))+(((-1.0)*x2860*x2863)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2864))+((x2858*x2862))+(((-1.0)*r21*sj5*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
CheckValue<IkReal> x2867=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2866.value)+(((1.5707963267949)*(x2867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2868=IKsin(j4);
IkReal x2869=IKcos(j4);
IkReal x2870=(cj5*r10);
IkReal x2871=(r01*sj5);
IkReal x2872=(cj5*r00);
IkReal x2873=(cj5*r20);
IkReal x2874=((1.0)*x2869);
IkReal x2875=((1.0)*x2868);
IkReal x2876=(sj5*x2868);
evalcond[0]=((((-1.0)*r22*x2874))+((r21*x2876))+(((-1.0)*x2873*x2875)));
evalcond[1]=((((-1.0)*r02*x2874))+((x2868*x2871))+(((-1.0)*x2872*x2875)));
evalcond[2]=(((x2869*x2870))+(((-1.0)*r11*sj5*x2874))+(((-1.0)*r12*x2875)));
evalcond[3]=((-1.0)+(((-1.0)*x2870*x2875))+((r11*x2876))+(((-1.0)*r12*x2874)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2875))+((x2869*x2872))+((cj1*sj2))+(((-1.0)*x2871*x2874)));
evalcond[5]=(((x2869*x2873))+(((-1.0)*r22*x2875))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2877=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2877;
j4eval[1]=IKsign(x2877);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2878=((1.0)*cj5);
IkReal x2879=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2878)));
j4eval[0]=x2879;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2878))))));
j4eval[2]=IKsign(x2879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2880=cj5*cj5;
IkReal x2881=r11*r11;
IkReal x2882=(r11*sj5);
IkReal x2883=(cj5*r10);
IkReal x2884=((r12*r12)+(((-1.0)*x2880*x2881))+((x2880*(r10*r10)))+x2881+(((-2.0)*x2882*x2883)));
j4eval[0]=x2884;
j4eval[1]=IKsign(x2884);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2882))+x2883))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2885=cj5*cj5;
IkReal x2886=r11*r11;
IkReal x2887=(cj5*r10);
IkReal x2888=(r11*sj5);
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2887*x2888))+(r12*r12)+((x2885*(r10*r10)))+(((-1.0)*x2885*x2886))+x2886)),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((((-1.0)*x2888))+x2887)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2889.value)))+(x2890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2891=IKsin(j4);
IkReal x2892=IKcos(j4);
IkReal x2893=(cj5*r10);
IkReal x2894=(r01*sj5);
IkReal x2895=((1.0)*cj2);
IkReal x2896=(cj5*r00);
IkReal x2897=(cj5*r20);
IkReal x2898=((1.0)*x2892);
IkReal x2899=((1.0)*x2891);
IkReal x2900=(sj5*x2891);
evalcond[0]=((((-1.0)*r22*x2898))+((r21*x2900))+(((-1.0)*x2897*x2899)));
evalcond[1]=(((x2891*x2894))+(((-1.0)*r02*x2898))+(((-1.0)*x2896*x2899)));
evalcond[2]=(((x2892*x2893))+(((-1.0)*r11*sj5*x2898))+(((-1.0)*r12*x2899)));
evalcond[3]=((1.0)+(((-1.0)*x2893*x2899))+((r11*x2900))+(((-1.0)*r12*x2898)));
evalcond[4]=((((-1.0)*r22*x2899))+((x2892*x2897))+((sj1*sj2))+(((-1.0)*r21*sj5*x2898))+(((-1.0)*cj1*x2895)));
evalcond[5]=((((-1.0)*r02*x2899))+((x2892*x2896))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2895))+(((-1.0)*x2894*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2901=((1.0)*cj5);
CheckValue<IkReal> x2902 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2902.valid){
continue;
}
CheckValue<IkReal> x2903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2901)))),-1);
if(!x2903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2902.value)+(((1.5707963267949)*(x2903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2904=IKsin(j4);
IkReal x2905=IKcos(j4);
IkReal x2906=(cj5*r10);
IkReal x2907=(r01*sj5);
IkReal x2908=((1.0)*cj2);
IkReal x2909=(cj5*r00);
IkReal x2910=(cj5*r20);
IkReal x2911=((1.0)*x2905);
IkReal x2912=((1.0)*x2904);
IkReal x2913=(sj5*x2904);
evalcond[0]=(((r21*x2913))+(((-1.0)*x2910*x2912))+(((-1.0)*r22*x2911)));
evalcond[1]=(((x2904*x2907))+(((-1.0)*r02*x2911))+(((-1.0)*x2909*x2912)));
evalcond[2]=(((x2905*x2906))+(((-1.0)*r12*x2912))+(((-1.0)*r11*sj5*x2911)));
evalcond[3]=((1.0)+((r11*x2913))+(((-1.0)*r12*x2911))+(((-1.0)*x2906*x2912)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2908))+(((-1.0)*r21*sj5*x2911))+((x2905*x2910))+(((-1.0)*r22*x2912)));
evalcond[5]=((((-1.0)*x2907*x2911))+((x2905*x2909))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2908))+(((-1.0)*r02*x2912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2914=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2914.valid){
continue;
}
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2914.value)))+(x2915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2916=IKsin(j4);
IkReal x2917=IKcos(j4);
IkReal x2918=(cj5*r10);
IkReal x2919=(r01*sj5);
IkReal x2920=((1.0)*cj2);
IkReal x2921=(cj5*r00);
IkReal x2922=(cj5*r20);
IkReal x2923=((1.0)*x2917);
IkReal x2924=((1.0)*x2916);
IkReal x2925=(sj5*x2916);
evalcond[0]=(((r21*x2925))+(((-1.0)*r22*x2923))+(((-1.0)*x2922*x2924)));
evalcond[1]=((((-1.0)*r02*x2923))+(((-1.0)*x2921*x2924))+((x2916*x2919)));
evalcond[2]=(((x2917*x2918))+(((-1.0)*r11*sj5*x2923))+(((-1.0)*r12*x2924)));
evalcond[3]=((1.0)+(((-1.0)*x2918*x2924))+(((-1.0)*r12*x2923))+((r11*x2925)));
evalcond[4]=(((sj1*sj2))+((x2917*x2922))+(((-1.0)*cj1*x2920))+(((-1.0)*r22*x2924))+(((-1.0)*r21*sj5*x2923)));
evalcond[5]=((((-1.0)*r02*x2924))+(((-1.0)*cj1*sj2))+(((-1.0)*x2919*x2923))+((x2917*x2921))+(((-1.0)*sj1*x2920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2926=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2926);
rxp0_2=(py*r00);
rxp1_0=(r21*x2926);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2927=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2927);
rxp0_2=(py*r00);
rxp1_0=(r21*x2927);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2928=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2928);
rxp0_2=(py*r00);
rxp1_0=(r21*x2928);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2931=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2931.valid){
continue;
}
IkReal x2929=x2931.value;
IkReal x2930=((1.0)*cj0*x2929);
cj4array[0]=((((-1.0)*cj1*sj2*x2930))+(((-1.0)*cj2*sj1*x2930)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2932=IKsin(j4);
IkReal x2933=IKcos(j4);
IkReal x2934=(r21*sj5);
IkReal x2935=((1.0)*x2933);
IkReal x2936=((1.0)*cj5*x2932);
evalcond[0]=((-1.0)*r12*x2932);
evalcond[1]=((((-1.0)*r12*x2935))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x2936))+((x2932*x2934)));
evalcond[3]=((((-1.0)*r00*x2936))+((r01*sj5*x2932)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2934*x2935))+((cj5*r20*x2933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2938=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2938.valid){
continue;
}
IkReal x2937=x2938.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2937))+((cj1*cj2*x2937)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2939=IKsin(j4);
IkReal x2940=IKcos(j4);
IkReal x2941=(cj5*r00);
IkReal x2942=((1.0)*x2939);
IkReal x2943=(sj5*x2939);
IkReal x2944=((1.0)*x2940);
evalcond[0]=((-1.0)*r12*x2939);
evalcond[1]=((((-1.0)*r12*x2944))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2943))+(((-1.0)*cj5*r20*x2942)));
evalcond[3]=(((r01*x2943))+(((-1.0)*x2941*x2942)));
evalcond[4]=(((x2940*x2941))+((cj0*cj2*sj1))+(((-1.0)*r01*sj5*x2944))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2945=IKPowWithIntegerCheck(r12,-1);
if(!x2945.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2945.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2946=IKsin(j4);
IkReal x2947=IKcos(j4);
IkReal x2948=(cj5*r00);
IkReal x2949=(cj5*r20);
IkReal x2950=(r21*sj5);
IkReal x2951=(r01*sj5);
IkReal x2952=((1.0)*x2946);
IkReal x2953=((1.0)*x2947);
evalcond[0]=((-1.0)*r12*x2946);
evalcond[1]=(((x2946*x2950))+(((-1.0)*x2949*x2952)));
evalcond[2]=((((-1.0)*x2948*x2952))+((x2946*x2951)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2950*x2953))+((x2947*x2949)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x2951*x2953))+((cj0*cj1*sj2))+((x2947*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2954=((1.0)*cj5);
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2954))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2954))+(((-1.0)*r20*sj5)))),-1);
if(!x2956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2955.value)+(((1.5707963267949)*(x2956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2957=IKsin(j4);
IkReal x2958=IKcos(j4);
IkReal x2959=(cj5*r10);
IkReal x2960=(cj2*sj1);
IkReal x2961=(r01*sj5);
IkReal x2962=(cj5*r00);
IkReal x2963=(cj5*r20);
IkReal x2964=(cj1*sj2);
IkReal x2965=((1.0)*x2958);
IkReal x2966=((1.0)*x2957);
IkReal x2967=(sj5*x2957);
evalcond[0]=((((-1.0)*x2963*x2966))+((r21*x2967))+(((-1.0)*r22*x2965)));
evalcond[1]=(sj0+(((-1.0)*r02*x2965))+((x2957*x2961))+(((-1.0)*x2962*x2966)));
evalcond[2]=(((r11*x2967))+(((-1.0)*x2959*x2966))+(((-1.0)*cj0))+(((-1.0)*r12*x2965)));
evalcond[3]=((((-1.0)*r21*sj5*x2965))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2966))+((x2958*x2963)));
evalcond[4]=((((-1.0)*r02*x2966))+((cj0*x2960))+((cj0*x2964))+(((-1.0)*x2961*x2965))+((x2958*x2962)));
evalcond[5]=(((sj0*x2964))+((sj0*x2960))+(((-1.0)*r11*sj5*x2965))+((x2958*x2959))+(((-1.0)*r12*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2968=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2968.value)))+(x2969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2970=IKsin(j4);
IkReal x2971=IKcos(j4);
IkReal x2972=(cj5*r10);
IkReal x2973=(cj2*sj1);
IkReal x2974=(r01*sj5);
IkReal x2975=(cj5*r00);
IkReal x2976=(cj5*r20);
IkReal x2977=(cj1*sj2);
IkReal x2978=((1.0)*x2971);
IkReal x2979=((1.0)*x2970);
IkReal x2980=(sj5*x2970);
evalcond[0]=((((-1.0)*x2976*x2979))+(((-1.0)*r22*x2978))+((r21*x2980)));
evalcond[1]=((((-1.0)*x2975*x2979))+((x2970*x2974))+sj0+(((-1.0)*r02*x2978)));
evalcond[2]=((((-1.0)*x2972*x2979))+((r11*x2980))+(((-1.0)*r12*x2978))+(((-1.0)*cj0)));
evalcond[3]=(((x2971*x2976))+(((-1.0)*r21*sj5*x2978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2979)));
evalcond[4]=(((x2971*x2975))+(((-1.0)*r02*x2979))+((cj0*x2977))+((cj0*x2973))+(((-1.0)*x2974*x2978)));
evalcond[5]=(((x2971*x2972))+(((-1.0)*r12*x2979))+(((-1.0)*r11*sj5*x2978))+((sj0*x2973))+((sj0*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2981.value)))+(x2982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2983=IKsin(j4);
IkReal x2984=IKcos(j4);
IkReal x2985=(cj5*r10);
IkReal x2986=(cj2*sj1);
IkReal x2987=(r01*sj5);
IkReal x2988=(cj5*r00);
IkReal x2989=(cj5*r20);
IkReal x2990=(cj1*sj2);
IkReal x2991=((1.0)*x2984);
IkReal x2992=((1.0)*x2983);
IkReal x2993=(sj5*x2983);
evalcond[0]=((((-1.0)*r22*x2991))+(((-1.0)*x2989*x2992))+((r21*x2993)));
evalcond[1]=(((x2983*x2987))+sj0+(((-1.0)*x2988*x2992))+(((-1.0)*r02*x2991)));
evalcond[2]=((((-1.0)*x2985*x2992))+(((-1.0)*r12*x2991))+(((-1.0)*cj0))+((r11*x2993)));
evalcond[3]=((((-1.0)*r22*x2992))+((x2984*x2989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2991)));
evalcond[4]=(((x2984*x2988))+((cj0*x2986))+((cj0*x2990))+(((-1.0)*x2987*x2991))+(((-1.0)*r02*x2992)));
evalcond[5]=(((x2984*x2985))+(((-1.0)*r12*x2992))+((sj0*x2990))+(((-1.0)*r11*sj5*x2991))+((sj0*x2986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2994=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2994;
j0eval[1]=IKsign(x2994);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2995=r21*r21;
IkReal x2996=cj5*cj5;
IkReal x2997=(sj1*sj2);
IkReal x2998=(r21*sj5);
IkReal x2999=(cj5*r20);
IkReal x3000=(cj1*cj2);
IkReal x3001=(((x2995*x2996))+(((-1.0)*x2996*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x2995))+(((2.0)*x2998*x2999)));
j4eval[0]=x3001;
j4eval[1]=((IKabs(((((-1.0)*r22*x3000))+((r22*x2997)))))+(IKabs(((((-1.0)*x2998*x3000))+((x2999*x3000))+(((-1.0)*x2997*x2999))+((x2997*x2998))))));
j4eval[2]=IKsign(x3001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3002=IKsin(j0);
IkReal x3003=IKcos(j0);
evalcond[0]=((((0.10915)*x3002))+(((-0.425)*x3003))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x3002))+(((-0.10915)*x3003))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3004=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3004;
j4eval[1]=IKsign(x3004);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3005=((1.0)*cj5);
IkReal x3006=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3005)));
j4eval[0]=x3006;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3005))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3007=cj5*cj5;
IkReal x3008=((1.0)*r20);
IkReal x3009=(r01*r21);
IkReal x3010=(r21*sj5);
IkReal x3011=(((cj5*r01*r20*sj5))+(((-1.0)*x3009))+((cj5*r00*x3010))+(((-1.0)*r02*r22))+((x3007*x3009))+(((-1.0)*r00*x3007*x3008)));
j4eval[0]=x3011;
j4eval[1]=((IKabs((((cj0*x3010))+(((-1.0)*cj0*cj5*x3008)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3012=cj5*cj5;
IkReal x3013=((1.0)*r20);
IkReal x3014=(r01*r21);
IkReal x3015=(r21*sj5);
CheckValue<IkReal> x3016=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3015))+(((-1.0)*r02*r22))+((x3012*x3014))+(((-1.0)*r00*x3012*x3013))+(((-1.0)*x3014)))),-1);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3015))+(((-1.0)*cj0*cj5*x3013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3016.value)))+(x3017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3018=IKcos(j4);
IkReal x3019=IKsin(j4);
IkReal x3020=(cj5*r00);
IkReal x3021=(cj5*r10);
IkReal x3022=(cj5*r20);
IkReal x3023=((1.0)*x3018);
IkReal x3024=((1.0)*x3019);
IkReal x3025=(sj5*x3018);
IkReal x3026=(sj5*x3019);
evalcond[0]=(((r22*x3019))+((r21*x3025))+(((-1.0)*x3022*x3023)));
evalcond[1]=(((r21*x3026))+(((-1.0)*x3022*x3024))+(((-1.0)*r22*x3023)));
evalcond[2]=(cj0+(((-1.0)*x3020*x3023))+((r01*x3025))+((r02*x3019)));
evalcond[3]=(sj0+((r11*x3025))+(((-1.0)*x3021*x3023))+((r12*x3019)));
evalcond[4]=(sj0+(((-1.0)*x3020*x3024))+((r01*x3026))+(((-1.0)*r02*x3023)));
evalcond[5]=((((-1.0)*r12*x3023))+((r11*x3026))+(((-1.0)*x3021*x3024))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3027=((1.0)*cj5);
CheckValue<IkReal> x3028 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3027)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3028.valid){
continue;
}
CheckValue<IkReal> x3029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3027))+(((-1.0)*r10*sj5)))),-1);
if(!x3029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3028.value)+(((1.5707963267949)*(x3029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3030=IKcos(j4);
IkReal x3031=IKsin(j4);
IkReal x3032=(cj5*r00);
IkReal x3033=(cj5*r10);
IkReal x3034=(cj5*r20);
IkReal x3035=((1.0)*x3030);
IkReal x3036=((1.0)*x3031);
IkReal x3037=(sj5*x3030);
IkReal x3038=(sj5*x3031);
evalcond[0]=(((r22*x3031))+((r21*x3037))+(((-1.0)*x3034*x3035)));
evalcond[1]=(((r21*x3038))+(((-1.0)*r22*x3035))+(((-1.0)*x3034*x3036)));
evalcond[2]=(((r02*x3031))+cj0+((r01*x3037))+(((-1.0)*x3032*x3035)));
evalcond[3]=(sj0+((r11*x3037))+((r12*x3031))+(((-1.0)*x3033*x3035)));
evalcond[4]=(sj0+((r01*x3038))+(((-1.0)*r02*x3035))+(((-1.0)*x3032*x3036)));
evalcond[5]=(((r11*x3038))+(((-1.0)*x3033*x3036))+(((-1.0)*r12*x3035))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3039 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3039.valid){
continue;
}
CheckValue<IkReal> x3040=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3039.value)+(((1.5707963267949)*(x3040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3041=IKcos(j4);
IkReal x3042=IKsin(j4);
IkReal x3043=(cj5*r00);
IkReal x3044=(cj5*r10);
IkReal x3045=(cj5*r20);
IkReal x3046=((1.0)*x3041);
IkReal x3047=((1.0)*x3042);
IkReal x3048=(sj5*x3041);
IkReal x3049=(sj5*x3042);
evalcond[0]=(((r22*x3042))+((r21*x3048))+(((-1.0)*x3045*x3046)));
evalcond[1]=(((r21*x3049))+(((-1.0)*x3045*x3047))+(((-1.0)*r22*x3046)));
evalcond[2]=(cj0+((r02*x3042))+(((-1.0)*x3043*x3046))+((r01*x3048)));
evalcond[3]=(sj0+(((-1.0)*x3044*x3046))+((r12*x3042))+((r11*x3048)));
evalcond[4]=(sj0+(((-1.0)*r02*x3046))+(((-1.0)*x3043*x3047))+((r01*x3049)));
evalcond[5]=((((-1.0)*r12*x3046))+(((-1.0)*x3044*x3047))+(((-1.0)*cj0))+((r11*x3049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.566898951975751)*px))+(((-2.20734818680435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.566898951975751)*px))+(((-2.20734818680435)*py))))+IKsqr(((((-2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.566898951975751)*px))+(((-2.20734818680435)*py))), ((((-2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3050=IKsin(j0);
IkReal x3051=IKcos(j0);
evalcond[0]=((((-0.425)*x3051))+(((0.10915)*x3050))+(((-1.0)*px)));
evalcond[1]=((((-0.10915)*x3051))+(((-0.425)*x3050))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3052=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3052;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3053=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3053;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3054=((1.0)*cj5);
IkReal x3055=((((-1.0)*r01*x3054))+(((-1.0)*r00*sj5)));
j4eval[0]=x3055;
j4eval[1]=IKsign(x3055);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3054))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3056=((1.0)*cj5);
CheckValue<IkReal> x3057 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3056))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3057.valid){
continue;
}
CheckValue<IkReal> x3058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3056))+(((-1.0)*r00*sj5)))),-1);
if(!x3058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3057.value)+(((1.5707963267949)*(x3058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3059=IKcos(j4);
IkReal x3060=IKsin(j4);
IkReal x3061=((1.0)*cj0);
IkReal x3062=(cj5*r00);
IkReal x3063=(cj5*r10);
IkReal x3064=(cj5*r20);
IkReal x3065=((1.0)*x3059);
IkReal x3066=((1.0)*x3060);
IkReal x3067=(sj5*x3059);
IkReal x3068=(sj5*x3060);
evalcond[0]=(((r22*x3060))+(((-1.0)*x3064*x3065))+((r21*x3067)));
evalcond[1]=((((-1.0)*r22*x3065))+(((-1.0)*x3064*x3066))+((r21*x3068)));
evalcond[2]=(sj0+((r01*x3068))+(((-1.0)*x3062*x3066))+(((-1.0)*r02*x3065)));
evalcond[3]=(((r01*x3067))+(((-1.0)*x3062*x3065))+(((-1.0)*x3061))+((r02*x3060)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3063*x3065))+((r11*x3067))+((r12*x3060)));
evalcond[5]=((((-1.0)*x3063*x3066))+(((-1.0)*r12*x3065))+(((-1.0)*x3061))+((r11*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3069 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3069.valid){
continue;
}
CheckValue<IkReal> x3070=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3069.value)+(((1.5707963267949)*(x3070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3071=IKcos(j4);
IkReal x3072=IKsin(j4);
IkReal x3073=((1.0)*cj0);
IkReal x3074=(cj5*r00);
IkReal x3075=(cj5*r10);
IkReal x3076=(cj5*r20);
IkReal x3077=((1.0)*x3071);
IkReal x3078=((1.0)*x3072);
IkReal x3079=(sj5*x3071);
IkReal x3080=(sj5*x3072);
evalcond[0]=(((r22*x3072))+(((-1.0)*x3076*x3077))+((r21*x3079)));
evalcond[1]=((((-1.0)*r22*x3077))+((r21*x3080))+(((-1.0)*x3076*x3078)));
evalcond[2]=(sj0+(((-1.0)*r02*x3077))+(((-1.0)*x3074*x3078))+((r01*x3080)));
evalcond[3]=(((r01*x3079))+(((-1.0)*x3074*x3077))+(((-1.0)*x3073))+((r02*x3072)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3072))+((r11*x3079))+(((-1.0)*x3075*x3077)));
evalcond[5]=(((r11*x3080))+(((-1.0)*x3073))+(((-1.0)*r12*x3077))+(((-1.0)*x3075*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3081=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3081.value)))+(x3082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3083=IKcos(j4);
IkReal x3084=IKsin(j4);
IkReal x3085=((1.0)*cj0);
IkReal x3086=(cj5*r00);
IkReal x3087=(cj5*r10);
IkReal x3088=(cj5*r20);
IkReal x3089=((1.0)*x3083);
IkReal x3090=((1.0)*x3084);
IkReal x3091=(sj5*x3083);
IkReal x3092=(sj5*x3084);
evalcond[0]=(((r21*x3091))+((r22*x3084))+(((-1.0)*x3088*x3089)));
evalcond[1]=(((r21*x3092))+(((-1.0)*r22*x3089))+(((-1.0)*x3088*x3090)));
evalcond[2]=(((r01*x3092))+sj0+(((-1.0)*r02*x3089))+(((-1.0)*x3086*x3090)));
evalcond[3]=(((r01*x3091))+(((-1.0)*x3085))+((r02*x3084))+(((-1.0)*x3086*x3089)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3084))+((r11*x3091))+(((-1.0)*x3087*x3089)));
evalcond[5]=((((-1.0)*x3085))+(((-1.0)*x3087*x3090))+((r11*x3092))+(((-1.0)*r12*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3093=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3093;
j4eval[1]=IKsign(x3093);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3094=((1.0)*cj5);
IkReal x3095=((((-1.0)*r11*x3094))+(((-1.0)*r10*sj5)));
j4eval[0]=x3095;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3094)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3096=cj5*cj5;
IkReal x3097=((1.0)*r20);
IkReal x3098=(r01*r21);
IkReal x3099=(r21*sj5);
IkReal x3100=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3096*x3097))+((x3096*x3098))+(((-1.0)*x3098))+((cj5*r00*x3099)));
j4eval[0]=x3100;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3099))+(((-1.0)*cj0*cj5*x3097))))));
j4eval[2]=IKsign(x3100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3101=cj5*cj5;
IkReal x3102=((1.0)*r20);
IkReal x3103=(r01*r21);
IkReal x3104=(r21*sj5);
CheckValue<IkReal> x3105=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3101*x3102))+(((-1.0)*x3103))+((cj5*r00*x3104))+((x3101*x3103)))),-1);
if(!x3105.valid){
continue;
}
CheckValue<IkReal> x3106 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3104))+(((-1.0)*cj0*cj5*x3102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3105.value)))+(x3106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3107=IKcos(j4);
IkReal x3108=IKsin(j4);
IkReal x3109=(cj5*r00);
IkReal x3110=(cj5*r10);
IkReal x3111=(cj5*r20);
IkReal x3112=((1.0)*x3107);
IkReal x3113=((1.0)*x3108);
IkReal x3114=(sj5*x3107);
IkReal x3115=(sj5*x3108);
evalcond[0]=(((r22*x3108))+((r21*x3114))+(((-1.0)*x3111*x3112)));
evalcond[1]=(((r21*x3115))+(((-1.0)*r22*x3112))+(((-1.0)*x3111*x3113)));
evalcond[2]=(cj0+(((-1.0)*x3109*x3112))+((r02*x3108))+((r01*x3114)));
evalcond[3]=(sj0+(((-1.0)*x3110*x3112))+((r12*x3108))+((r11*x3114)));
evalcond[4]=((((-1.0)*r02*x3112))+sj0+(((-1.0)*x3109*x3113))+((r01*x3115)));
evalcond[5]=((((-1.0)*r12*x3112))+(((-1.0)*x3110*x3113))+((r11*x3115))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3116=((1.0)*cj5);
CheckValue<IkReal> x3117=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3116)))),-1);
if(!x3117.valid){
continue;
}
CheckValue<IkReal> x3118 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3116)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3117.value)))+(x3118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3119=IKcos(j4);
IkReal x3120=IKsin(j4);
IkReal x3121=(cj5*r00);
IkReal x3122=(cj5*r10);
IkReal x3123=(cj5*r20);
IkReal x3124=((1.0)*x3119);
IkReal x3125=((1.0)*x3120);
IkReal x3126=(sj5*x3119);
IkReal x3127=(sj5*x3120);
evalcond[0]=(((r21*x3126))+((r22*x3120))+(((-1.0)*x3123*x3124)));
evalcond[1]=(((r21*x3127))+(((-1.0)*x3123*x3125))+(((-1.0)*r22*x3124)));
evalcond[2]=(((r01*x3126))+cj0+((r02*x3120))+(((-1.0)*x3121*x3124)));
evalcond[3]=(sj0+(((-1.0)*x3122*x3124))+((r12*x3120))+((r11*x3126)));
evalcond[4]=(sj0+((r01*x3127))+(((-1.0)*r02*x3124))+(((-1.0)*x3121*x3125)));
evalcond[5]=((((-1.0)*x3122*x3125))+(((-1.0)*r12*x3124))+((r11*x3127))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3128 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3128.valid){
continue;
}
CheckValue<IkReal> x3129=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3128.value)+(((1.5707963267949)*(x3129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3130=IKcos(j4);
IkReal x3131=IKsin(j4);
IkReal x3132=(cj5*r00);
IkReal x3133=(cj5*r10);
IkReal x3134=(cj5*r20);
IkReal x3135=((1.0)*x3130);
IkReal x3136=((1.0)*x3131);
IkReal x3137=(sj5*x3130);
IkReal x3138=(sj5*x3131);
evalcond[0]=(((r21*x3137))+((r22*x3131))+(((-1.0)*x3134*x3135)));
evalcond[1]=(((r21*x3138))+(((-1.0)*x3134*x3136))+(((-1.0)*r22*x3135)));
evalcond[2]=(((r01*x3137))+cj0+(((-1.0)*x3132*x3135))+((r02*x3131)));
evalcond[3]=(sj0+(((-1.0)*x3133*x3135))+((r12*x3131))+((r11*x3137)));
evalcond[4]=(sj0+((r01*x3138))+(((-1.0)*r02*x3135))+(((-1.0)*x3132*x3136)));
evalcond[5]=((((-1.0)*x3133*x3136))+(((-1.0)*r12*x3135))+((r11*x3138))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3139=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3139;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3140=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3140;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3141=((1.0)*cj5);
IkReal x3142=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3141)));
j4eval[0]=x3142;
j4eval[1]=IKsign(x3142);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3143=((1.0)*cj5);
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3143)))),-1);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3143)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3144.value)))+(x3145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3146=IKcos(j4);
IkReal x3147=IKsin(j4);
IkReal x3148=((1.0)*cj0);
IkReal x3149=(cj5*r00);
IkReal x3150=(cj5*r10);
IkReal x3151=(cj5*r20);
IkReal x3152=((1.0)*x3146);
IkReal x3153=((1.0)*x3147);
IkReal x3154=(sj5*x3146);
IkReal x3155=(sj5*x3147);
evalcond[0]=(((r22*x3147))+((r21*x3154))+(((-1.0)*x3151*x3152)));
evalcond[1]=((((-1.0)*r22*x3152))+((r21*x3155))+(((-1.0)*x3151*x3153)));
evalcond[2]=(sj0+(((-1.0)*x3149*x3153))+((r01*x3155))+(((-1.0)*r02*x3152)));
evalcond[3]=((((-1.0)*x3148))+((r02*x3147))+(((-1.0)*x3149*x3152))+((r01*x3154)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3147))+((r11*x3154))+(((-1.0)*x3150*x3152)));
evalcond[5]=((((-1.0)*x3148))+((r11*x3155))+(((-1.0)*x3150*x3153))+(((-1.0)*r12*x3152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3156 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3156.valid){
continue;
}
CheckValue<IkReal> x3157=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3156.value)+(((1.5707963267949)*(x3157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3158=IKcos(j4);
IkReal x3159=IKsin(j4);
IkReal x3160=((1.0)*cj0);
IkReal x3161=(cj5*r00);
IkReal x3162=(cj5*r10);
IkReal x3163=(cj5*r20);
IkReal x3164=((1.0)*x3158);
IkReal x3165=((1.0)*x3159);
IkReal x3166=(sj5*x3158);
IkReal x3167=(sj5*x3159);
evalcond[0]=(((r22*x3159))+(((-1.0)*x3163*x3164))+((r21*x3166)));
evalcond[1]=((((-1.0)*x3163*x3165))+((r21*x3167))+(((-1.0)*r22*x3164)));
evalcond[2]=((((-1.0)*x3161*x3165))+sj0+((r01*x3167))+(((-1.0)*r02*x3164)));
evalcond[3]=((((-1.0)*x3161*x3164))+((r02*x3159))+((r01*x3166))+(((-1.0)*x3160)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3162*x3164))+((r11*x3166))+((r12*x3159)));
evalcond[5]=((((-1.0)*r12*x3164))+(((-1.0)*x3162*x3165))+((r11*x3167))+(((-1.0)*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3168.value)))+(x3169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3170=IKcos(j4);
IkReal x3171=IKsin(j4);
IkReal x3172=((1.0)*cj0);
IkReal x3173=(cj5*r00);
IkReal x3174=(cj5*r10);
IkReal x3175=(cj5*r20);
IkReal x3176=((1.0)*x3170);
IkReal x3177=((1.0)*x3171);
IkReal x3178=(sj5*x3170);
IkReal x3179=(sj5*x3171);
evalcond[0]=(((r22*x3171))+((r21*x3178))+(((-1.0)*x3175*x3176)));
evalcond[1]=(((r21*x3179))+(((-1.0)*r22*x3176))+(((-1.0)*x3175*x3177)));
evalcond[2]=(sj0+(((-1.0)*x3173*x3177))+((r01*x3179))+(((-1.0)*r02*x3176)));
evalcond[3]=((((-1.0)*x3172))+((r02*x3171))+(((-1.0)*x3173*x3176))+((r01*x3178)));
evalcond[4]=(((r11*x3178))+(((-1.0)*x3174*x3176))+(((-1.0)*sj0))+((r12*x3171)));
evalcond[5]=(((r11*x3179))+(((-1.0)*x3174*x3177))+(((-1.0)*r12*x3176))+(((-1.0)*x3172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3180=IKsin(j0);
IkReal x3181=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3181))+(((0.10915)*x3180)));
evalcond[1]=((((-0.10915)*x3181))+(((-1.0)*py))+(((0.425)*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3182=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3182;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3183=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3183;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3184=((1.0)*cj5);
IkReal x3185=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3184)));
j4eval[0]=x3185;
j4eval[1]=IKsign(x3185);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3184))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3186=((1.0)*cj5);
CheckValue<IkReal> x3187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3186)))),-1);
if(!x3187.valid){
continue;
}
CheckValue<IkReal> x3188 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3186)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3187.value)))+(x3188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3189=IKcos(j4);
IkReal x3190=IKsin(j4);
IkReal x3191=((1.0)*cj0);
IkReal x3192=(cj5*r00);
IkReal x3193=(cj5*r10);
IkReal x3194=(cj5*r20);
IkReal x3195=((1.0)*x3189);
IkReal x3196=((1.0)*x3190);
IkReal x3197=(sj5*x3189);
IkReal x3198=(sj5*x3190);
evalcond[0]=(((r21*x3197))+((r22*x3190))+(((-1.0)*x3194*x3195)));
evalcond[1]=((((-1.0)*r22*x3195))+((r21*x3198))+(((-1.0)*x3194*x3196)));
evalcond[2]=(sj0+(((-1.0)*x3192*x3196))+((r01*x3198))+(((-1.0)*r02*x3195)));
evalcond[3]=((((-1.0)*x3192*x3195))+((r01*x3197))+(((-1.0)*x3191))+((r02*x3190)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3193*x3195))+((r11*x3197))+((r12*x3190)));
evalcond[5]=((((-1.0)*x3193*x3196))+((r11*x3198))+(((-1.0)*r12*x3195))+(((-1.0)*x3191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3199 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3199.valid){
continue;
}
CheckValue<IkReal> x3200=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3199.value)+(((1.5707963267949)*(x3200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3201=IKcos(j4);
IkReal x3202=IKsin(j4);
IkReal x3203=((1.0)*cj0);
IkReal x3204=(cj5*r00);
IkReal x3205=(cj5*r10);
IkReal x3206=(cj5*r20);
IkReal x3207=((1.0)*x3201);
IkReal x3208=((1.0)*x3202);
IkReal x3209=(sj5*x3201);
IkReal x3210=(sj5*x3202);
evalcond[0]=(((r22*x3202))+(((-1.0)*x3206*x3207))+((r21*x3209)));
evalcond[1]=((((-1.0)*r22*x3207))+((r21*x3210))+(((-1.0)*x3206*x3208)));
evalcond[2]=((((-1.0)*r02*x3207))+sj0+(((-1.0)*x3204*x3208))+((r01*x3210)));
evalcond[3]=((((-1.0)*x3204*x3207))+((r01*x3209))+(((-1.0)*x3203))+((r02*x3202)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3209))+((r12*x3202))+(((-1.0)*x3205*x3207)));
evalcond[5]=((((-1.0)*r12*x3207))+((r11*x3210))+(((-1.0)*x3203))+(((-1.0)*x3205*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3211=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3211.valid){
continue;
}
CheckValue<IkReal> x3212 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3211.value)))+(x3212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3213=IKcos(j4);
IkReal x3214=IKsin(j4);
IkReal x3215=((1.0)*cj0);
IkReal x3216=(cj5*r00);
IkReal x3217=(cj5*r10);
IkReal x3218=(cj5*r20);
IkReal x3219=((1.0)*x3213);
IkReal x3220=((1.0)*x3214);
IkReal x3221=(sj5*x3213);
IkReal x3222=(sj5*x3214);
evalcond[0]=(((r22*x3214))+((r21*x3221))+(((-1.0)*x3218*x3219)));
evalcond[1]=(((r21*x3222))+(((-1.0)*x3218*x3220))+(((-1.0)*r22*x3219)));
evalcond[2]=(sj0+(((-1.0)*x3216*x3220))+((r01*x3222))+(((-1.0)*r02*x3219)));
evalcond[3]=((((-1.0)*x3216*x3219))+((r01*x3221))+(((-1.0)*x3215))+((r02*x3214)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3221))+((r12*x3214))+(((-1.0)*x3217*x3219)));
evalcond[5]=(((r11*x3222))+(((-1.0)*r12*x3219))+(((-1.0)*x3215))+(((-1.0)*x3217*x3220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((-0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((-0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((0.566898951975751)*px))), ((((2.20734818680435)*px))+(((-0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3223=IKsin(j0);
IkReal x3224=IKcos(j0);
evalcond[0]=((((0.425)*x3224))+(((-1.0)*px))+(((0.10915)*x3223)));
evalcond[1]=((((0.425)*x3223))+(((-1.0)*py))+(((-0.10915)*x3224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3225=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3225;
j4eval[1]=IKsign(x3225);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3226=((1.0)*cj5);
IkReal x3227=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3226)));
j4eval[0]=x3227;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3226))))));
j4eval[2]=IKsign(x3227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3228=cj5*cj5;
IkReal x3229=((1.0)*r20);
IkReal x3230=(r01*r21);
IkReal x3231=(r21*sj5);
IkReal x3232=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3228*x3229))+(((-1.0)*x3230))+((x3228*x3230))+((cj5*r00*x3231)));
j4eval[0]=x3232;
j4eval[1]=((IKabs((((cj0*x3231))+(((-1.0)*cj0*cj5*x3229)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3233=cj5*cj5;
IkReal x3234=((1.0)*r20);
IkReal x3235=(r01*r21);
IkReal x3236=(r21*sj5);
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3233*x3234))+(((-1.0)*x3235))+((cj5*r00*x3236))+((x3233*x3235)))),-1);
if(!x3237.valid){
continue;
}
CheckValue<IkReal> x3238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3236))+(((-1.0)*cj0*cj5*x3234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3237.value)))+(x3238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3239=IKcos(j4);
IkReal x3240=IKsin(j4);
IkReal x3241=(cj5*r00);
IkReal x3242=(cj5*r10);
IkReal x3243=(cj5*r20);
IkReal x3244=((1.0)*x3239);
IkReal x3245=((1.0)*x3240);
IkReal x3246=(sj5*x3239);
IkReal x3247=(sj5*x3240);
evalcond[0]=(((r22*x3240))+(((-1.0)*x3243*x3244))+((r21*x3246)));
evalcond[1]=((((-1.0)*x3243*x3245))+((r21*x3247))+(((-1.0)*r22*x3244)));
evalcond[2]=(((r01*x3246))+cj0+(((-1.0)*x3241*x3244))+((r02*x3240)));
evalcond[3]=(sj0+((r12*x3240))+(((-1.0)*x3242*x3244))+((r11*x3246)));
evalcond[4]=(((r01*x3247))+sj0+(((-1.0)*r02*x3244))+(((-1.0)*x3241*x3245)));
evalcond[5]=((((-1.0)*r12*x3244))+(((-1.0)*x3242*x3245))+((r11*x3247))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3248=((1.0)*cj5);
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3248)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3248)))),-1);
if(!x3250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3249.value)+(((1.5707963267949)*(x3250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3251=IKcos(j4);
IkReal x3252=IKsin(j4);
IkReal x3253=(cj5*r00);
IkReal x3254=(cj5*r10);
IkReal x3255=(cj5*r20);
IkReal x3256=((1.0)*x3251);
IkReal x3257=((1.0)*x3252);
IkReal x3258=(sj5*x3251);
IkReal x3259=(sj5*x3252);
evalcond[0]=(((r21*x3258))+((r22*x3252))+(((-1.0)*x3255*x3256)));
evalcond[1]=(((r21*x3259))+(((-1.0)*r22*x3256))+(((-1.0)*x3255*x3257)));
evalcond[2]=(cj0+((r02*x3252))+(((-1.0)*x3253*x3256))+((r01*x3258)));
evalcond[3]=(((r12*x3252))+sj0+((r11*x3258))+(((-1.0)*x3254*x3256)));
evalcond[4]=(sj0+(((-1.0)*r02*x3256))+(((-1.0)*x3253*x3257))+((r01*x3259)));
evalcond[5]=(((r11*x3259))+(((-1.0)*x3254*x3257))+(((-1.0)*r12*x3256))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3260.value)+(((1.5707963267949)*(x3261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3262=IKcos(j4);
IkReal x3263=IKsin(j4);
IkReal x3264=(cj5*r00);
IkReal x3265=(cj5*r10);
IkReal x3266=(cj5*r20);
IkReal x3267=((1.0)*x3262);
IkReal x3268=((1.0)*x3263);
IkReal x3269=(sj5*x3262);
IkReal x3270=(sj5*x3263);
evalcond[0]=(((r21*x3269))+(((-1.0)*x3266*x3267))+((r22*x3263)));
evalcond[1]=(((r21*x3270))+(((-1.0)*x3266*x3268))+(((-1.0)*r22*x3267)));
evalcond[2]=(((r01*x3269))+cj0+(((-1.0)*x3264*x3267))+((r02*x3263)));
evalcond[3]=(sj0+(((-1.0)*x3265*x3267))+((r11*x3269))+((r12*x3263)));
evalcond[4]=(sj0+((r01*x3270))+(((-1.0)*x3264*x3268))+(((-1.0)*r02*x3267)));
evalcond[5]=((((-1.0)*r12*x3267))+(((-1.0)*x3265*x3268))+((r11*x3270))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3271=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3271;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3272=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3272;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3273=((1.0)*cj5);
IkReal x3274=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3273)));
j4eval[0]=x3274;
j4eval[1]=IKsign(x3274);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3273)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3275=((1.0)*cj5);
CheckValue<IkReal> x3276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3275)))),-1);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3275)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3276.value)))+(x3277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=((1.0)*cj0);
IkReal x3281=(cj5*r00);
IkReal x3282=(cj5*r10);
IkReal x3283=(cj5*r20);
IkReal x3284=((1.0)*x3278);
IkReal x3285=((1.0)*x3279);
IkReal x3286=(sj5*x3278);
IkReal x3287=(sj5*x3279);
evalcond[0]=((((-1.0)*x3283*x3284))+((r21*x3286))+((r22*x3279)));
evalcond[1]=((((-1.0)*r22*x3284))+(((-1.0)*x3283*x3285))+((r21*x3287)));
evalcond[2]=(sj0+(((-1.0)*x3281*x3285))+(((-1.0)*r02*x3284))+((r01*x3287)));
evalcond[3]=((((-1.0)*x3280))+(((-1.0)*x3281*x3284))+((r02*x3279))+((r01*x3286)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3282*x3284))+((r12*x3279))+((r11*x3286)));
evalcond[5]=((((-1.0)*r12*x3284))+(((-1.0)*x3280))+(((-1.0)*x3282*x3285))+((r11*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=((1.0)*cj0);
IkReal x3293=(cj5*r00);
IkReal x3294=(cj5*r10);
IkReal x3295=(cj5*r20);
IkReal x3296=((1.0)*x3290);
IkReal x3297=((1.0)*x3291);
IkReal x3298=(sj5*x3290);
IkReal x3299=(sj5*x3291);
evalcond[0]=(((r21*x3298))+((r22*x3291))+(((-1.0)*x3295*x3296)));
evalcond[1]=((((-1.0)*r22*x3296))+((r21*x3299))+(((-1.0)*x3295*x3297)));
evalcond[2]=(((r01*x3299))+sj0+(((-1.0)*x3293*x3297))+(((-1.0)*r02*x3296)));
evalcond[3]=(((r01*x3298))+(((-1.0)*x3292))+((r02*x3291))+(((-1.0)*x3293*x3296)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3294*x3296))+((r11*x3298))+((r12*x3291)));
evalcond[5]=((((-1.0)*r12*x3296))+(((-1.0)*x3292))+(((-1.0)*x3294*x3297))+((r11*x3299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3300=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3300.value)))+(x3301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=((1.0)*cj0);
IkReal x3305=(cj5*r00);
IkReal x3306=(cj5*r10);
IkReal x3307=(cj5*r20);
IkReal x3308=((1.0)*x3302);
IkReal x3309=((1.0)*x3303);
IkReal x3310=(sj5*x3302);
IkReal x3311=(sj5*x3303);
evalcond[0]=(((r21*x3310))+((r22*x3303))+(((-1.0)*x3307*x3308)));
evalcond[1]=(((r21*x3311))+(((-1.0)*r22*x3308))+(((-1.0)*x3307*x3309)));
evalcond[2]=(sj0+(((-1.0)*x3305*x3309))+(((-1.0)*r02*x3308))+((r01*x3311)));
evalcond[3]=((((-1.0)*x3305*x3308))+((r02*x3303))+(((-1.0)*x3304))+((r01*x3310)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3310))+(((-1.0)*x3306*x3308))+((r12*x3303)));
evalcond[5]=((((-1.0)*x3304))+((r11*x3311))+(((-1.0)*x3306*x3309))+(((-1.0)*r12*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.16170407695831)*px))+IKsqr(((-9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.16170407695831)*px), ((-9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3312;
j4eval[1]=IKsign(x3312);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3313=((1.0)*cj5);
IkReal x3314=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3313)));
j4eval[0]=x3314;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3313))))));
j4eval[2]=IKsign(x3314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3315=cj5*cj5;
IkReal x3316=((1.0)*r20);
IkReal x3317=(r01*r21);
IkReal x3318=(r21*sj5);
IkReal x3319=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3318))+((x3315*x3317))+(((-1.0)*r00*x3315*x3316))+(((-1.0)*x3317)));
j4eval[0]=x3319;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3318))+(((-1.0)*cj0*cj5*x3316))))));
j4eval[2]=IKsign(x3319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3320=cj5*cj5;
IkReal x3321=((1.0)*r20);
IkReal x3322=(r01*r21);
IkReal x3323=(r21*sj5);
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3322))+(((-1.0)*r02*r22))+((cj5*r00*x3323))+((x3320*x3322))+(((-1.0)*r00*x3320*x3321)))),-1);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3321))+((cj0*x3323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3324.value)))+(x3325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3326=IKcos(j4);
IkReal x3327=IKsin(j4);
IkReal x3328=(cj5*r00);
IkReal x3329=(cj5*r10);
IkReal x3330=(cj5*r20);
IkReal x3331=((1.0)*x3326);
IkReal x3332=((1.0)*x3327);
IkReal x3333=(sj5*x3326);
IkReal x3334=(sj5*x3327);
evalcond[0]=(((r22*x3327))+((r21*x3333))+(((-1.0)*x3330*x3331)));
evalcond[1]=(((r21*x3334))+(((-1.0)*x3330*x3332))+(((-1.0)*r22*x3331)));
evalcond[2]=(cj0+((r01*x3333))+((r02*x3327))+(((-1.0)*x3328*x3331)));
evalcond[3]=(((r12*x3327))+sj0+((r11*x3333))+(((-1.0)*x3329*x3331)));
evalcond[4]=(sj0+(((-1.0)*r02*x3331))+((r01*x3334))+(((-1.0)*x3328*x3332)));
evalcond[5]=(((r11*x3334))+(((-1.0)*x3329*x3332))+(((-1.0)*cj0))+(((-1.0)*r12*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3335=((1.0)*cj5);
CheckValue<IkReal> x3336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3335)))),-1);
if(!x3336.valid){
continue;
}
CheckValue<IkReal> x3337 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3335)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3336.value)))+(x3337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3338=IKcos(j4);
IkReal x3339=IKsin(j4);
IkReal x3340=(cj5*r00);
IkReal x3341=(cj5*r10);
IkReal x3342=(cj5*r20);
IkReal x3343=((1.0)*x3338);
IkReal x3344=((1.0)*x3339);
IkReal x3345=(sj5*x3338);
IkReal x3346=(sj5*x3339);
evalcond[0]=(((r21*x3345))+((r22*x3339))+(((-1.0)*x3342*x3343)));
evalcond[1]=(((r21*x3346))+(((-1.0)*x3342*x3344))+(((-1.0)*r22*x3343)));
evalcond[2]=((((-1.0)*x3340*x3343))+cj0+((r02*x3339))+((r01*x3345)));
evalcond[3]=(sj0+(((-1.0)*x3341*x3343))+((r12*x3339))+((r11*x3345)));
evalcond[4]=((((-1.0)*x3340*x3344))+sj0+(((-1.0)*r02*x3343))+((r01*x3346)));
evalcond[5]=((((-1.0)*x3341*x3344))+(((-1.0)*r12*x3343))+((r11*x3346))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3347 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3347.valid){
continue;
}
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3347.value)+(((1.5707963267949)*(x3348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3349=IKcos(j4);
IkReal x3350=IKsin(j4);
IkReal x3351=(cj5*r00);
IkReal x3352=(cj5*r10);
IkReal x3353=(cj5*r20);
IkReal x3354=((1.0)*x3349);
IkReal x3355=((1.0)*x3350);
IkReal x3356=(sj5*x3349);
IkReal x3357=(sj5*x3350);
evalcond[0]=((((-1.0)*x3353*x3354))+((r21*x3356))+((r22*x3350)));
evalcond[1]=((((-1.0)*x3353*x3355))+((r21*x3357))+(((-1.0)*r22*x3354)));
evalcond[2]=(cj0+((r01*x3356))+(((-1.0)*x3351*x3354))+((r02*x3350)));
evalcond[3]=((((-1.0)*x3352*x3354))+((r12*x3350))+sj0+((r11*x3356)));
evalcond[4]=(sj0+(((-1.0)*r02*x3354))+((r01*x3357))+(((-1.0)*x3351*x3355)));
evalcond[5]=((((-1.0)*x3352*x3355))+((r11*x3357))+(((-1.0)*r12*x3354))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3358=(r00*sj5);
IkReal x3359=(cj5*r01);
IkReal x3360=(sj1*sj2);
IkReal x3361=(cj1*cj2);
IkReal x3362=((20000.0)*px);
IkReal x3363=((8500.0)*cj1);
IkReal x3364=((9738.0)*x3361);
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(((((-2183.0)*x3360))+(((2183.0)*x3361))),-1);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck((x3361+(((-1.0)*x3360))),-1);
if(!x3366.valid){
continue;
}
if( IKabs(((x3365.value)*(((((-1.0)*x3360*x3362))+(((-9738.0)*x3359*x3360))+((x3358*x3363))+((x3358*x3364))+(((-9738.0)*x3358*x3360))+((x3361*x3362))+((x3359*x3363))+((x3359*x3364)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3366.value)*((x3359+x3358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3365.value)*(((((-1.0)*x3360*x3362))+(((-9738.0)*x3359*x3360))+((x3358*x3363))+((x3358*x3364))+(((-9738.0)*x3358*x3360))+((x3361*x3362))+((x3359*x3363))+((x3359*x3364))))))+IKsqr(((x3366.value)*((x3359+x3358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3365.value)*(((((-1.0)*x3360*x3362))+(((-9738.0)*x3359*x3360))+((x3358*x3363))+((x3358*x3364))+(((-9738.0)*x3358*x3360))+((x3361*x3362))+((x3359*x3363))+((x3359*x3364))))), ((x3366.value)*((x3359+x3358))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3367=IKcos(j0);
IkReal x3368=IKsin(j0);
IkReal x3369=(cj1*cj2);
IkReal x3370=(cj5*r11);
IkReal x3371=(sj1*sj2);
IkReal x3372=(cj5*r01);
IkReal x3373=((1.0)*sj5);
IkReal x3374=((0.09465)*sj5);
IkReal x3375=((0.425)*cj1);
IkReal x3376=((0.39225)*x3367);
IkReal x3377=(x3368*x3371);
evalcond[0]=((((-1.0)*x3372))+((x3367*x3369))+(((-1.0)*x3367*x3371))+(((-1.0)*r00*x3373)));
evalcond[1]=((((-1.0)*x3377))+(((-1.0)*x3370))+(((-1.0)*r10*x3373))+((x3368*x3369)));
evalcond[2]=((((0.10915)*x3368))+(((-1.0)*x3367*x3375))+(((-1.0)*px))+((x3371*x3376))+(((-1.0)*r00*x3374))+(((-1.0)*x3369*x3376))+(((-0.09465)*x3372)));
evalcond[3]=((((-1.0)*r10*x3374))+(((0.39225)*x3377))+(((-1.0)*py))+(((-0.10915)*x3367))+(((-0.39225)*x3368*x3369))+(((-1.0)*x3368*x3375))+(((-0.09465)*x3370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3378=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3378;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3379=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3379;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3380=((1.0)*cj5);
IkReal x3381=((((-1.0)*r21*x3380))+(((-1.0)*r20*sj5)));
j4eval[0]=x3381;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3380))+(((-1.0)*cj0*r00*x3380))))));
j4eval[2]=IKsign(x3381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3382=((-1.0)*r20);
IkReal x3384 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3384)==0){
continue;
}
IkReal x3383=pow(x3384,-0.5);
CheckValue<IkReal> x3385 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3382),IKFAST_ATAN2_MAGTHRESH);
if(!x3385.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3385.value));
IkReal gconst97=(r21*x3383);
IkReal gconst98=(x3382*x3383);
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3386.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3387=((-1.0)*r20);
IkReal x3388=x3383;
CheckValue<IkReal> x3390 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3387),IKFAST_ATAN2_MAGTHRESH);
if(!x3390.valid){
continue;
}
IkReal x3389=((-1.0)*(x3390.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3389;
IkReal gconst96=x3389;
IkReal gconst97=(r21*x3388);
IkReal gconst98=(x3387*x3388);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3391=((-1.0)*r20);
IkReal x3392=x3383;
CheckValue<IkReal> x3394 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3391),IKFAST_ATAN2_MAGTHRESH);
if(!x3394.valid){
continue;
}
IkReal x3393=((-1.0)*(x3394.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3393;
IkReal gconst96=x3393;
IkReal gconst97=(r21*x3392);
IkReal gconst98=(x3391*x3392);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3395=((-1.0)*r20);
IkReal x3396=x3383;
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3395),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
IkReal x3397=((-1.0)*(x3398.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3397;
IkReal gconst96=x3397;
IkReal gconst97=(r21*x3396);
IkReal gconst98=(x3395*x3396);
IkReal x3399=((1.0)*(r22*r22));
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3399))),-1);
if(!x3403.valid){
continue;
}
IkReal x3400=x3403.value;
IkReal x3401=((1.0)*x3400);
IkReal x3402=((((-1.0)*x3401*(r20*r20*r20*r20)))+(((-2.0)*x3400*(r20*r20)*(r21*r21)))+(((-1.0)*x3399))+(((-1.0)*x3401*(r21*r21*r21*r21))));
j4eval[0]=x3402;
j4eval[1]=IKsign(x3402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3404=(cj1*cj2);
IkReal x3405=(gconst98*r20);
IkReal x3406=(sj1*sj2);
IkReal x3407=(gconst97*r21);
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal((((r22*x3406))+(((-1.0)*r22*x3404)))),IkReal(((((-1.0)*x3405*x3406))+((x3406*x3407))+(((-1.0)*x3404*x3407))+((x3404*x3405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign(((((2.0)*x3405*x3407))+(((-1.0)*(x3407*x3407)))+(((-1.0)*(x3405*x3405)))+(((-1.0)*(r22*r22))))),-1);
if(!x3409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3408.value)+(((1.5707963267949)*(x3409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3410=IKsin(j4);
IkReal x3411=IKcos(j4);
IkReal x3412=(gconst98*r10);
IkReal x3413=(gconst97*r21);
IkReal x3414=(cj2*sj1);
IkReal x3415=(gconst98*r20);
IkReal x3416=(gconst98*r00);
IkReal x3417=(cj1*sj2);
IkReal x3418=((1.0)*x3411);
IkReal x3419=((1.0)*x3410);
IkReal x3420=(gconst97*x3410);
IkReal x3421=(gconst97*x3411);
evalcond[0]=((((-1.0)*r22*x3418))+(((-1.0)*x3415*x3419))+((x3410*x3413)));
evalcond[1]=(sj0+(((-1.0)*r02*x3418))+(((-1.0)*x3416*x3419))+((r01*x3420)));
evalcond[2]=((((-1.0)*x3412*x3419))+(((-1.0)*r12*x3418))+(((-1.0)*cj0))+((r11*x3420)));
evalcond[3]=((((-1.0)*x3415*x3418))+((x3411*x3413))+((r22*x3410))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x3410))+((cj0*x3414))+((cj0*x3417))+(((-1.0)*x3416*x3418))+((r01*x3421)));
evalcond[5]=((((-1.0)*x3412*x3418))+((sj0*x3414))+((sj0*x3417))+((r12*x3410))+((r11*x3421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3422.valid){
continue;
}
CheckValue<IkReal> x3423=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3422.value)+(((1.5707963267949)*(x3423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3424=IKsin(j4);
IkReal x3425=IKcos(j4);
IkReal x3426=(gconst98*r10);
IkReal x3427=(gconst97*r21);
IkReal x3428=(cj2*sj1);
IkReal x3429=(gconst98*r20);
IkReal x3430=(gconst98*r00);
IkReal x3431=(cj1*sj2);
IkReal x3432=((1.0)*x3425);
IkReal x3433=((1.0)*x3424);
IkReal x3434=(gconst97*x3424);
IkReal x3435=(gconst97*x3425);
evalcond[0]=(((x3424*x3427))+(((-1.0)*r22*x3432))+(((-1.0)*x3429*x3433)));
evalcond[1]=(((r01*x3434))+sj0+(((-1.0)*x3430*x3433))+(((-1.0)*r02*x3432)));
evalcond[2]=((((-1.0)*r12*x3432))+(((-1.0)*x3426*x3433))+((r11*x3434))+(((-1.0)*cj0)));
evalcond[3]=(((x3425*x3427))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3424))+(((-1.0)*x3429*x3432)));
evalcond[4]=(((cj0*x3431))+((r01*x3435))+(((-1.0)*x3430*x3432))+((r02*x3424))+((cj0*x3428)));
evalcond[5]=((((-1.0)*x3426*x3432))+((sj0*x3428))+((r12*x3424))+((sj0*x3431))+((r11*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3436 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3436.valid){
continue;
}
CheckValue<IkReal> x3437=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3436.value)+(((1.5707963267949)*(x3437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3438=IKsin(j4);
IkReal x3439=IKcos(j4);
IkReal x3440=(gconst98*r10);
IkReal x3441=(gconst97*r21);
IkReal x3442=(cj2*sj1);
IkReal x3443=(gconst98*r20);
IkReal x3444=(gconst98*r00);
IkReal x3445=(cj1*sj2);
IkReal x3446=((1.0)*x3439);
IkReal x3447=((1.0)*x3438);
IkReal x3448=(gconst97*x3438);
IkReal x3449=(gconst97*x3439);
evalcond[0]=(((x3438*x3441))+(((-1.0)*x3443*x3447))+(((-1.0)*r22*x3446)));
evalcond[1]=(sj0+(((-1.0)*x3444*x3447))+(((-1.0)*r02*x3446))+((r01*x3448)));
evalcond[2]=(((r11*x3448))+(((-1.0)*r12*x3446))+(((-1.0)*cj0))+(((-1.0)*x3440*x3447)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3443*x3446))+((r22*x3438))+((x3439*x3441)));
evalcond[4]=((((-1.0)*x3444*x3446))+((cj0*x3445))+((cj0*x3442))+((r01*x3449))+((r02*x3438)));
evalcond[5]=(((r11*x3449))+((sj0*x3445))+((sj0*x3442))+((r12*x3438))+(((-1.0)*x3440*x3446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3450=((-1.0)*r21);
IkReal x3452 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3452)==0){
continue;
}
IkReal x3451=pow(x3452,-0.5);
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(x3450),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3453.value))));
IkReal gconst100=(x3450*x3451);
IkReal gconst101=((1.0)*r20*x3451);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3454.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3455=((-1.0)*r21);
CheckValue<IkReal> x3458 = IKatan2WithCheck(IkReal(x3455),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3458.valid){
continue;
}
IkReal x3456=((1.0)*(x3458.value));
IkReal x3457=x3451;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3456)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3456)));
IkReal gconst100=(x3455*x3457);
IkReal gconst101=((1.0)*r20*x3457);
IkReal x3459=r22*r22;
IkReal x3460=((1.0)*x3459);
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(((-1.0)+x3459),-1);
if(!x3464.valid){
continue;
}
IkReal x3461=x3464.value;
if((((1.0)+(((-1.0)*x3460)))) < -0.00001)
continue;
IkReal x3462=IKsqrt(((1.0)+(((-1.0)*x3460))));
IkReal x3463=(sj0*x3461*x3462);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3460*x3463))+x3463))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3465=((-1.0)*r21);
CheckValue<IkReal> x3468 = IKatan2WithCheck(IkReal(x3465),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3468.valid){
continue;
}
IkReal x3466=((1.0)*(x3468.value));
IkReal x3467=x3451;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3466)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3466)));
IkReal gconst100=(x3465*x3467);
IkReal gconst101=((1.0)*r20*x3467);
IkReal x3469=r22*r22;
IkReal x3470=((1.0)*x3469);
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(((-1.0)+x3469),-1);
if(!x3474.valid){
continue;
}
IkReal x3471=x3474.value;
if((((1.0)+(((-1.0)*x3470)))) < -0.00001)
continue;
IkReal x3472=IKsqrt(((1.0)+(((-1.0)*x3470))));
IkReal x3473=(cj0*x3471*x3472);
j4eval[0]=((IKabs((x3473+(((-1.0)*x3470*x3473)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3475=((-1.0)*r21);
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(x3475),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
IkReal x3476=((1.0)*(x3478.value));
IkReal x3477=x3451;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3476)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3476)));
IkReal gconst100=(x3475*x3477);
IkReal gconst101=((1.0)*r20*x3477);
IkReal x3479=r22*r22;
IkReal x3480=(cj0*r02);
IkReal x3481=(r12*sj0);
CheckValue<IkReal> x3485=IKPowWithIntegerCheck(((-1.0)+x3479),-1);
if(!x3485.valid){
continue;
}
IkReal x3482=x3485.value;
if((((1.0)+(((-1.0)*x3479)))) < -0.00001)
continue;
IkReal x3483=IKsqrt(((1.0)+(((-1.0)*x3479))));
IkReal x3484=((1.0)*r22*x3482*x3483);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3481*x3484))+(((-1.0)*x3480*x3484)))))+(IKabs((x3481+x3480))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3486=((1.0)*gconst101);
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3486))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*cj0*r00*x3486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
CheckValue<IkReal> x3488=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3486)))),-1);
if(!x3488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3487.value)+(((1.5707963267949)*(x3488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3489=IKsin(j4);
IkReal x3490=IKcos(j4);
IkReal x3491=(cj2*sj1);
IkReal x3492=(gconst101*r20);
IkReal x3493=(gconst101*r10);
IkReal x3494=(gconst101*r00);
IkReal x3495=(cj1*sj2);
IkReal x3496=((1.0)*x3490);
IkReal x3497=((1.0)*x3489);
IkReal x3498=(gconst100*x3489);
IkReal x3499=(gconst100*x3490);
evalcond[0]=((((-1.0)*r22*x3496))+(((-1.0)*x3492*x3497))+((r21*x3498)));
evalcond[1]=((((-1.0)*r02*x3496))+sj0+((r01*x3498))+(((-1.0)*x3494*x3497)));
evalcond[2]=((((-1.0)*r12*x3496))+(((-1.0)*x3493*x3497))+((r11*x3498))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3492*x3496))+((r21*x3499))+((r22*x3489)));
evalcond[4]=(((cj0*x3495))+((cj0*x3491))+((r01*x3499))+(((-1.0)*x3494*x3496))+((r02*x3489)));
evalcond[5]=(((r12*x3489))+(((-1.0)*x3493*x3496))+((r11*x3499))+((sj0*x3495))+((sj0*x3491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3500.value)+(((1.5707963267949)*(x3501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3502=IKsin(j4);
IkReal x3503=IKcos(j4);
IkReal x3504=(cj2*sj1);
IkReal x3505=(gconst101*r20);
IkReal x3506=(gconst101*r10);
IkReal x3507=(gconst101*r00);
IkReal x3508=(cj1*sj2);
IkReal x3509=((1.0)*x3503);
IkReal x3510=((1.0)*x3502);
IkReal x3511=(gconst100*x3502);
IkReal x3512=(gconst100*x3503);
evalcond[0]=(((r21*x3511))+(((-1.0)*r22*x3509))+(((-1.0)*x3505*x3510)));
evalcond[1]=(sj0+((r01*x3511))+(((-1.0)*r02*x3509))+(((-1.0)*x3507*x3510)));
evalcond[2]=((((-1.0)*r12*x3509))+(((-1.0)*x3506*x3510))+((r11*x3511))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3512))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3502))+(((-1.0)*x3505*x3509)));
evalcond[4]=(((cj0*x3508))+((cj0*x3504))+((r01*x3512))+((r02*x3502))+(((-1.0)*x3507*x3509)));
evalcond[5]=((((-1.0)*x3506*x3509))+((r12*x3502))+((r11*x3512))+((sj0*x3508))+((sj0*x3504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3513=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3513.valid){
continue;
}
CheckValue<IkReal> x3514 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3513.value)))+(x3514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3515=IKsin(j4);
IkReal x3516=IKcos(j4);
IkReal x3517=(cj2*sj1);
IkReal x3518=(gconst101*r20);
IkReal x3519=(gconst101*r10);
IkReal x3520=(gconst101*r00);
IkReal x3521=(cj1*sj2);
IkReal x3522=((1.0)*x3516);
IkReal x3523=((1.0)*x3515);
IkReal x3524=(gconst100*x3515);
IkReal x3525=(gconst100*x3516);
evalcond[0]=(((r21*x3524))+(((-1.0)*r22*x3522))+(((-1.0)*x3518*x3523)));
evalcond[1]=((((-1.0)*r02*x3522))+sj0+((r01*x3524))+(((-1.0)*x3520*x3523)));
evalcond[2]=((((-1.0)*x3519*x3523))+((r11*x3524))+(((-1.0)*r12*x3522))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3515))+(((-1.0)*x3518*x3522)));
evalcond[4]=(((r01*x3525))+((cj0*x3521))+((cj0*x3517))+((r02*x3515))+(((-1.0)*x3520*x3522)));
evalcond[5]=((((-1.0)*x3519*x3522))+((r11*x3525))+((r12*x3515))+((sj0*x3521))+((sj0*x3517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3527 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3527)==0){
continue;
}
IkReal x3526=pow(x3527,-0.5);
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3528.value));
IkReal gconst103=((-1.0)*r01*x3526);
IkReal gconst104=(r00*x3526);
CheckValue<IkReal> x3529 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3529.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3532 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3532.valid){
continue;
}
IkReal x3530=((-1.0)*(x3532.value));
IkReal x3531=x3526;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3530;
IkReal gconst102=x3530;
IkReal gconst103=((-1.0)*r01*x3531);
IkReal gconst104=(r00*x3531);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3533=((1.0)*gconst104);
CheckValue<IkReal> x3534=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3533)))),-1);
if(!x3534.valid){
continue;
}
CheckValue<IkReal> x3535 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst103*r01))+(((-1.0)*cj0*r00*x3533))+((gconst103*r11*sj0))+(((-1.0)*r10*sj0*x3533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3534.value)))+(x3535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3536=IKsin(j4);
IkReal x3537=IKcos(j4);
IkReal x3538=(gconst103*r11);
IkReal x3539=(cj2*sj1);
IkReal x3540=(gconst104*r10);
IkReal x3541=(gconst104*r20);
IkReal x3542=(gconst104*r00);
IkReal x3543=(cj1*sj2);
IkReal x3544=((1.0)*x3537);
IkReal x3545=(gconst103*x3537);
IkReal x3546=(gconst103*x3536);
IkReal x3547=((1.0)*x3536);
evalcond[0]=((((-1.0)*x3541*x3547))+((r21*x3546))+(((-1.0)*r22*x3544)));
evalcond[1]=((((-1.0)*r02*x3544))+sj0+((r01*x3546))+(((-1.0)*x3542*x3547)));
evalcond[2]=((((-1.0)*r12*x3544))+(((-1.0)*x3540*x3547))+((x3536*x3538))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3541*x3544))+((r22*x3536))+((r21*x3545))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x3536))+((r01*x3545))+(((-1.0)*x3542*x3544))+((cj0*x3543))+((cj0*x3539)));
evalcond[5]=(((r12*x3536))+((sj0*x3539))+((sj0*x3543))+(((-1.0)*x3540*x3544))+((x3537*x3538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3548 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3548.valid){
continue;
}
CheckValue<IkReal> x3549=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3548.value)+(((1.5707963267949)*(x3549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3550=IKsin(j4);
IkReal x3551=IKcos(j4);
IkReal x3552=(gconst103*r11);
IkReal x3553=(cj2*sj1);
IkReal x3554=(gconst104*r10);
IkReal x3555=(gconst104*r20);
IkReal x3556=(gconst104*r00);
IkReal x3557=(cj1*sj2);
IkReal x3558=((1.0)*x3551);
IkReal x3559=(gconst103*x3551);
IkReal x3560=(gconst103*x3550);
IkReal x3561=((1.0)*x3550);
evalcond[0]=((((-1.0)*x3555*x3561))+((r21*x3560))+(((-1.0)*r22*x3558)));
evalcond[1]=(sj0+((r01*x3560))+(((-1.0)*x3556*x3561))+(((-1.0)*r02*x3558)));
evalcond[2]=((((-1.0)*x3554*x3561))+(((-1.0)*r12*x3558))+((x3550*x3552))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3555*x3558))+((r21*x3559))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3550)));
evalcond[4]=(((r01*x3559))+((cj0*x3557))+((cj0*x3553))+((r02*x3550))+(((-1.0)*x3556*x3558)));
evalcond[5]=((((-1.0)*x3554*x3558))+((sj0*x3557))+((sj0*x3553))+((r12*x3550))+((x3551*x3552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3563 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3563)==0){
continue;
}
IkReal x3562=pow(x3563,-0.5);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3564.value))));
IkReal gconst106=((1.0)*r01*x3562);
IkReal gconst107=((-1.0)*r00*x3562);
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3565.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
IkReal x3566=((1.0)*(x3568.value));
IkReal x3567=x3562;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3566)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3566)));
IkReal gconst106=((1.0)*r01*x3567);
IkReal gconst107=((-1.0)*r00*x3567);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3571 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3571.valid){
continue;
}
IkReal x3569=((1.0)*(x3571.value));
IkReal x3570=x3562;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3569)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3569)));
IkReal gconst106=((1.0)*r01*x3570);
IkReal gconst107=((-1.0)*r00*x3570);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3574 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3574.valid){
continue;
}
IkReal x3572=((1.0)*(x3574.value));
IkReal x3573=x3562;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3572)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3572)));
IkReal gconst106=((1.0)*r01*x3573);
IkReal gconst107=((-1.0)*r00*x3573);
IkReal x3575=r02*r02;
IkReal x3576=(r12*sj0);
IkReal x3577=x3562;
IkReal x3578=(cj0*x3577);
j4eval[0]=((IKabs((((x3575*x3578))+((r02*x3576*x3577))+(((-1.0)*x3578)))))+(IKabs((x3576+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3579=((1.0)*gconst107);
CheckValue<IkReal> x3580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3579))+(((-1.0)*gconst106*r20)))),-1);
if(!x3580.valid){
continue;
}
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3579))+((cj0*gconst106*r01))+(((-1.0)*r10*sj0*x3579))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3580.value)))+(x3581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3582=IKsin(j4);
IkReal x3583=IKcos(j4);
IkReal x3584=(gconst107*r10);
IkReal x3585=(gconst107*r00);
IkReal x3586=(gconst107*r20);
IkReal x3587=(cj2*sj1);
IkReal x3588=(cj1*sj2);
IkReal x3589=((1.0)*x3583);
IkReal x3590=(gconst106*x3583);
IkReal x3591=(gconst106*x3582);
IkReal x3592=((1.0)*x3582);
evalcond[0]=(((r21*x3591))+(((-1.0)*r22*x3589))+(((-1.0)*x3586*x3592)));
evalcond[1]=(sj0+(((-1.0)*r02*x3589))+(((-1.0)*x3585*x3592))+((r01*x3591)));
evalcond[2]=(((r11*x3591))+(((-1.0)*x3584*x3592))+(((-1.0)*r12*x3589))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3586*x3589))+((r22*x3582)));
evalcond[4]=(((r02*x3582))+((cj0*x3588))+((cj0*x3587))+(((-1.0)*x3585*x3589))+((r01*x3590)));
evalcond[5]=(((r12*x3582))+((r11*x3590))+(((-1.0)*x3584*x3589))+((sj0*x3588))+((sj0*x3587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3593 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3593.valid){
continue;
}
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3593.value)+(((1.5707963267949)*(x3594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3595=IKsin(j4);
IkReal x3596=IKcos(j4);
IkReal x3597=(gconst107*r10);
IkReal x3598=(gconst107*r00);
IkReal x3599=(gconst107*r20);
IkReal x3600=(cj2*sj1);
IkReal x3601=(cj1*sj2);
IkReal x3602=((1.0)*x3596);
IkReal x3603=(gconst106*x3596);
IkReal x3604=(gconst106*x3595);
IkReal x3605=((1.0)*x3595);
evalcond[0]=(((r21*x3604))+(((-1.0)*r22*x3602))+(((-1.0)*x3599*x3605)));
evalcond[1]=(sj0+(((-1.0)*x3598*x3605))+(((-1.0)*r02*x3602))+((r01*x3604)));
evalcond[2]=(((r11*x3604))+(((-1.0)*r12*x3602))+(((-1.0)*cj0))+(((-1.0)*x3597*x3605)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3603))+(((-1.0)*x3599*x3602))+((r22*x3595)));
evalcond[4]=(((r02*x3595))+(((-1.0)*x3598*x3602))+((r01*x3603))+((cj0*x3601))+((cj0*x3600)));
evalcond[5]=(((r11*x3603))+((r12*x3595))+((sj0*x3601))+((sj0*x3600))+(((-1.0)*x3597*x3602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3606.valid){
continue;
}
CheckValue<IkReal> x3607 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3606.value)))+(x3607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3608=IKsin(j4);
IkReal x3609=IKcos(j4);
IkReal x3610=(gconst107*r10);
IkReal x3611=(gconst107*r00);
IkReal x3612=(gconst107*r20);
IkReal x3613=(cj2*sj1);
IkReal x3614=(cj1*sj2);
IkReal x3615=((1.0)*x3609);
IkReal x3616=(gconst106*x3609);
IkReal x3617=(gconst106*x3608);
IkReal x3618=((1.0)*x3608);
evalcond[0]=((((-1.0)*x3612*x3618))+((r21*x3617))+(((-1.0)*r22*x3615)));
evalcond[1]=(sj0+(((-1.0)*x3611*x3618))+(((-1.0)*r02*x3615))+((r01*x3617)));
evalcond[2]=(((r11*x3617))+(((-1.0)*r12*x3615))+(((-1.0)*x3610*x3618))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3612*x3615))+(((-1.0)*cj1*cj2))+((r22*x3608))+((sj1*sj2))+((r21*x3616)));
evalcond[4]=(((r02*x3608))+(((-1.0)*x3611*x3615))+((r01*x3616))+((cj0*x3613))+((cj0*x3614)));
evalcond[5]=(((r11*x3616))+(((-1.0)*x3610*x3615))+((sj0*x3613))+((sj0*x3614))+((r12*x3608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3619=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3619;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3620=((1.0)*cj5);
IkReal x3621=((((-1.0)*r21*x3620))+(((-1.0)*r20*sj5)));
j4eval[0]=x3621;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x3620)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3622=cj5*cj5;
IkReal x3623=r01*r01;
IkReal x3624=(r01*sj5);
IkReal x3625=(cj5*r00);
IkReal x3626=((((-1.0)*(r02*r02)))+(((2.0)*x3624*x3625))+(((-1.0)*x3622*(r00*r00)))+((x3622*x3623))+(((-1.0)*x3623)));
j4eval[0]=x3626;
j4eval[1]=IKsign(x3626);
j4eval[2]=((IKabs(r02))+(IKabs((x3624+(((-1.0)*x3625))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3627=cj5*cj5;
IkReal x3628=r01*r01;
IkReal x3629=(r01*sj5);
IkReal x3630=(cj5*r00);
CheckValue<IkReal> x3631=IKPowWithIntegerCheck(IKsign(((((2.0)*x3629*x3630))+((x3627*x3628))+(((-1.0)*(r02*r02)))+(((-1.0)*x3627*(r00*r00)))+(((-1.0)*x3628)))),-1);
if(!x3631.valid){
continue;
}
CheckValue<IkReal> x3632 = IKatan2WithCheck(IkReal((x3629+(((-1.0)*x3630)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3631.value)))+(x3632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3633=IKcos(j4);
IkReal x3634=IKsin(j4);
IkReal x3635=(cj5*r00);
IkReal x3636=(cj5*r10);
IkReal x3637=(r21*sj5);
IkReal x3638=(cj5*r20);
IkReal x3639=((1.0)*x3633);
IkReal x3640=((1.0)*x3634);
IkReal x3641=(sj5*x3634);
IkReal x3642=(sj5*x3633);
evalcond[0]=(((r02*x3634))+((r01*x3642))+(((-1.0)*x3635*x3639)));
evalcond[1]=((((-1.0)*r22*x3639))+((x3634*x3637))+(((-1.0)*x3638*x3640)));
evalcond[2]=(((r11*x3641))+(((-1.0)*r12*x3639))+(((-1.0)*x3636*x3640)));
evalcond[3]=((1.0)+((r01*x3641))+(((-1.0)*x3635*x3640))+(((-1.0)*r02*x3639)));
evalcond[4]=(((cj2*sj1))+((r12*x3634))+((r11*x3642))+((cj1*sj2))+(((-1.0)*x3636*x3639)));
evalcond[5]=((((-1.0)*x3638*x3639))+((r22*x3634))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3633*x3637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3643=((1.0)*cj5);
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3643))+(((-1.0)*r20*sj5)))),-1);
if(!x3645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3644.value)+(((1.5707963267949)*(x3645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3646=IKcos(j4);
IkReal x3647=IKsin(j4);
IkReal x3648=(cj5*r00);
IkReal x3649=(cj5*r10);
IkReal x3650=(r21*sj5);
IkReal x3651=(cj5*r20);
IkReal x3652=((1.0)*x3646);
IkReal x3653=((1.0)*x3647);
IkReal x3654=(sj5*x3647);
IkReal x3655=(sj5*x3646);
evalcond[0]=(((r02*x3647))+(((-1.0)*x3648*x3652))+((r01*x3655)));
evalcond[1]=(((x3647*x3650))+(((-1.0)*x3651*x3653))+(((-1.0)*r22*x3652)));
evalcond[2]=(((r11*x3654))+(((-1.0)*r12*x3652))+(((-1.0)*x3649*x3653)));
evalcond[3]=((1.0)+(((-1.0)*x3648*x3653))+(((-1.0)*r02*x3652))+((r01*x3654)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x3647))+((r11*x3655))+(((-1.0)*x3649*x3652)));
evalcond[5]=(((x3646*x3650))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3651*x3652))+((r22*x3647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3656.value)+(((1.5707963267949)*(x3657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3658=IKcos(j4);
IkReal x3659=IKsin(j4);
IkReal x3660=(cj5*r00);
IkReal x3661=(cj5*r10);
IkReal x3662=(r21*sj5);
IkReal x3663=(cj5*r20);
IkReal x3664=((1.0)*x3658);
IkReal x3665=((1.0)*x3659);
IkReal x3666=(sj5*x3659);
IkReal x3667=(sj5*x3658);
evalcond[0]=((((-1.0)*x3660*x3664))+((r01*x3667))+((r02*x3659)));
evalcond[1]=(((x3659*x3662))+(((-1.0)*x3663*x3665))+(((-1.0)*r22*x3664)));
evalcond[2]=((((-1.0)*x3661*x3665))+((r11*x3666))+(((-1.0)*r12*x3664)));
evalcond[3]=((1.0)+(((-1.0)*x3660*x3665))+(((-1.0)*r02*x3664))+((r01*x3666)));
evalcond[4]=(((cj2*sj1))+((r12*x3659))+(((-1.0)*x3661*x3664))+((cj1*sj2))+((r11*x3667)));
evalcond[5]=(((x3658*x3662))+(((-1.0)*x3663*x3664))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3668=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3668;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3669=((1.0)*cj5);
IkReal x3670=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3669)));
j4eval[0]=x3670;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3669)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3671=cj5*cj5;
IkReal x3672=r01*r01;
IkReal x3673=(cj5*r00);
IkReal x3674=(r01*sj5);
IkReal x3675=((((-2.0)*x3673*x3674))+x3672+(((-1.0)*x3671*x3672))+((x3671*(r00*r00)))+(r02*r02));
j4eval[0]=x3675;
j4eval[1]=IKsign(x3675);
j4eval[2]=((IKabs(r02))+(IKabs((x3674+(((-1.0)*x3673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3676=cj5*cj5;
IkReal x3677=r01*r01;
IkReal x3678=(r01*sj5);
IkReal x3679=(cj5*r00);
CheckValue<IkReal> x3680 = IKatan2WithCheck(IkReal((x3678+(((-1.0)*x3679)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3680.valid){
continue;
}
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3676*x3677))+((x3676*(r00*r00)))+x3677+(((-2.0)*x3678*x3679))+(r02*r02))),-1);
if(!x3681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3680.value)+(((1.5707963267949)*(x3681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3682=IKcos(j4);
IkReal x3683=IKsin(j4);
IkReal x3684=(cj5*r00);
IkReal x3685=(cj5*r10);
IkReal x3686=(r21*sj5);
IkReal x3687=((1.0)*cj2);
IkReal x3688=(cj5*r20);
IkReal x3689=((1.0)*x3682);
IkReal x3690=((1.0)*x3683);
IkReal x3691=(sj5*x3683);
IkReal x3692=(sj5*x3682);
evalcond[0]=(((r01*x3692))+(((-1.0)*x3684*x3689))+((r02*x3683)));
evalcond[1]=((((-1.0)*x3688*x3690))+(((-1.0)*r22*x3689))+((x3683*x3686)));
evalcond[2]=((((-1.0)*x3685*x3690))+(((-1.0)*r12*x3689))+((r11*x3691)));
evalcond[3]=((-1.0)+((r01*x3691))+(((-1.0)*r02*x3689))+(((-1.0)*x3684*x3690)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3687))+((x3682*x3686))+((r22*x3683))+(((-1.0)*x3688*x3689)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3687))+(((-1.0)*x3685*x3689))+((r12*x3683))+((r11*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3693=((1.0)*cj5);
CheckValue<IkReal> x3694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3693)))),-1);
if(!x3694.valid){
continue;
}
CheckValue<IkReal> x3695 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3693))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3694.value)))+(x3695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3696=IKcos(j4);
IkReal x3697=IKsin(j4);
IkReal x3698=(cj5*r00);
IkReal x3699=(cj5*r10);
IkReal x3700=(r21*sj5);
IkReal x3701=((1.0)*cj2);
IkReal x3702=(cj5*r20);
IkReal x3703=((1.0)*x3696);
IkReal x3704=((1.0)*x3697);
IkReal x3705=(sj5*x3697);
IkReal x3706=(sj5*x3696);
evalcond[0]=((((-1.0)*x3698*x3703))+((r01*x3706))+((r02*x3697)));
evalcond[1]=(((x3697*x3700))+(((-1.0)*x3702*x3704))+(((-1.0)*r22*x3703)));
evalcond[2]=((((-1.0)*x3699*x3704))+((r11*x3705))+(((-1.0)*r12*x3703)));
evalcond[3]=((-1.0)+(((-1.0)*x3698*x3704))+(((-1.0)*r02*x3703))+((r01*x3705)));
evalcond[4]=(((x3696*x3700))+(((-1.0)*cj1*x3701))+((sj1*sj2))+((r22*x3697))+(((-1.0)*x3702*x3703)));
evalcond[5]=((((-1.0)*x3699*x3703))+((r11*x3706))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3701))+((r12*x3697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3707=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3707.valid){
continue;
}
CheckValue<IkReal> x3708 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3707.value)))+(x3708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3709=IKcos(j4);
IkReal x3710=IKsin(j4);
IkReal x3711=(cj5*r00);
IkReal x3712=(cj5*r10);
IkReal x3713=(r21*sj5);
IkReal x3714=((1.0)*cj2);
IkReal x3715=(cj5*r20);
IkReal x3716=((1.0)*x3709);
IkReal x3717=((1.0)*x3710);
IkReal x3718=(sj5*x3710);
IkReal x3719=(sj5*x3709);
evalcond[0]=((((-1.0)*x3711*x3716))+((r01*x3719))+((r02*x3710)));
evalcond[1]=(((x3710*x3713))+(((-1.0)*x3715*x3717))+(((-1.0)*r22*x3716)));
evalcond[2]=(((r11*x3718))+(((-1.0)*r12*x3716))+(((-1.0)*x3712*x3717)));
evalcond[3]=((-1.0)+(((-1.0)*x3711*x3717))+(((-1.0)*r02*x3716))+((r01*x3718)));
evalcond[4]=((((-1.0)*x3715*x3716))+((x3709*x3713))+(((-1.0)*cj1*x3714))+((sj1*sj2))+((r22*x3710)));
evalcond[5]=(((r11*x3719))+((r12*x3710))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3714))+(((-1.0)*x3712*x3716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3721 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3721)==0){
continue;
}
IkReal x3720=pow(x3721,-0.5);
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3722.value));
IkReal gconst109=((-1.0)*r11*x3720);
IkReal gconst110=(r10*x3720);
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3723.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
IkReal x3724=((-1.0)*(x3726.value));
IkReal x3725=x3720;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3724;
IkReal gconst108=x3724;
IkReal gconst109=((-1.0)*r11*x3725);
IkReal gconst110=(r10*x3725);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3727=((1.0)*gconst110);
CheckValue<IkReal> x3728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3727))+(((-1.0)*gconst109*r20)))),-1);
if(!x3728.valid){
continue;
}
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3727))+(((-1.0)*cj0*r00*x3727))+((cj0*gconst109*r01))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3728.value)))+(x3729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3730=IKsin(j4);
IkReal x3731=IKcos(j4);
IkReal x3732=(gconst109*r21);
IkReal x3733=(cj2*sj1);
IkReal x3734=(cj1*sj2);
IkReal x3735=((1.0)*x3731);
IkReal x3736=(gconst109*x3730);
IkReal x3737=(gconst109*x3731);
IkReal x3738=((1.0)*gconst110*x3730);
evalcond[0]=(((x3730*x3732))+(((-1.0)*r20*x3738))+(((-1.0)*r22*x3735)));
evalcond[1]=(sj0+((r01*x3736))+(((-1.0)*r00*x3738))+(((-1.0)*r02*x3735)));
evalcond[2]=((((-1.0)*r12*x3735))+((r11*x3736))+(((-1.0)*r10*x3738))+(((-1.0)*cj0)));
evalcond[3]=(((x3731*x3732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3730))+(((-1.0)*gconst110*r20*x3735)));
evalcond[4]=((((-1.0)*gconst110*r00*x3735))+((r01*x3737))+((r02*x3730))+((cj0*x3733))+((cj0*x3734)));
evalcond[5]=((((-1.0)*gconst110*r10*x3735))+((sj0*x3733))+((sj0*x3734))+((r11*x3737))+((r12*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x3739.valid){
continue;
}
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3739.value)))+(x3740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3741=IKsin(j4);
IkReal x3742=IKcos(j4);
IkReal x3743=(gconst109*r21);
IkReal x3744=(cj2*sj1);
IkReal x3745=(cj1*sj2);
IkReal x3746=((1.0)*x3742);
IkReal x3747=(gconst109*x3741);
IkReal x3748=(gconst109*x3742);
IkReal x3749=((1.0)*gconst110*x3741);
evalcond[0]=((((-1.0)*r22*x3746))+(((-1.0)*r20*x3749))+((x3741*x3743)));
evalcond[1]=(((r01*x3747))+sj0+(((-1.0)*r00*x3749))+(((-1.0)*r02*x3746)));
evalcond[2]=((((-1.0)*r12*x3746))+((r11*x3747))+(((-1.0)*r10*x3749))+(((-1.0)*cj0)));
evalcond[3]=(((x3742*x3743))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3741))+(((-1.0)*gconst110*r20*x3746)));
evalcond[4]=((((-1.0)*gconst110*r00*x3746))+((r01*x3748))+((cj0*x3744))+((cj0*x3745))+((r02*x3741)));
evalcond[5]=(((sj0*x3744))+((sj0*x3745))+((r12*x3741))+((r11*x3748))+(((-1.0)*gconst110*r10*x3746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3751 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3751)==0){
continue;
}
IkReal x3750=pow(x3751,-0.5);
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3752.value))));
IkReal gconst112=((1.0)*r11*x3750);
IkReal gconst113=((-1.0)*r10*x3750);
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3756 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3756.valid){
continue;
}
IkReal x3754=((1.0)*(x3756.value));
IkReal x3755=x3750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3754)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3754)));
IkReal gconst112=((1.0)*r11*x3755);
IkReal gconst113=((-1.0)*r10*x3755);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
IkReal x3757=((1.0)*(x3759.value));
IkReal x3758=x3750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3757)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3757)));
IkReal gconst112=((1.0)*r11*x3758);
IkReal gconst113=((-1.0)*r10*x3758);
IkReal x3760=r12*r12;
IkReal x3761=(cj0*r02);
IkReal x3762=x3750;
IkReal x3763=(sj0*x3762);
j4eval[0]=((IKabs((x3761+((r12*sj0)))))+(IKabs((((r12*x3761*x3762))+(((-1.0)*x3763))+((x3760*x3763))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
IkReal x3764=((1.0)*(x3766.value));
IkReal x3765=x3750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3764)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3764)));
IkReal gconst112=((1.0)*r11*x3765);
IkReal gconst113=((-1.0)*r10*x3765);
IkReal x3767=r12*r12;
IkReal x3768=(sj1*sj2);
IkReal x3769=((1.0)+(((-1.0)*x3767)));
IkReal x3770=((1.0)*cj1*cj2);
CheckValue<IkReal> x3777=IKPowWithIntegerCheck(x3769,-1);
if(!x3777.valid){
continue;
}
IkReal x3771=x3777.value;
CheckValue<IkReal> x3778=IKPowWithIntegerCheck(((-1.0)+x3767),-1);
if(!x3778.valid){
continue;
}
IkReal x3772=x3778.value;
IkReal x3773=((1.0)*x3771);
if((x3769) < -0.00001)
continue;
IkReal x3774=IKsqrt(x3769);
IkReal x3775=(r12*r22*x3772*x3774);
IkReal x3776=((((-2.0)*r10*r11*r20*r21*x3771))+(((-1.0)*x3773*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3773*(r11*r11)*(r21*r21))));
j4eval[0]=x3776;
j4eval[1]=((IKabs((((x3768*x3775))+(((-1.0)*x3770*x3775)))))+(IKabs((((r22*x3768))+(((-1.0)*r22*x3770))))));
j4eval[2]=IKsign(x3776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3779=(sj1*sj2);
IkReal x3780=(gconst112*r21);
IkReal x3781=(gconst113*r20);
IkReal x3782=(cj1*cj2);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(IKsign(((((2.0)*x3780*x3781))+(((-1.0)*(x3780*x3780)))+(((-1.0)*(x3781*x3781)))+(((-1.0)*(r22*r22))))),-1);
if(!x3783.valid){
continue;
}
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal((((r22*x3779))+(((-1.0)*r22*x3782)))),IkReal(((((-1.0)*x3779*x3781))+((x3779*x3780))+(((-1.0)*x3780*x3782))+((x3781*x3782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3783.value)))+(x3784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3785=IKsin(j4);
IkReal x3786=IKcos(j4);
IkReal x3787=(cj2*sj1);
IkReal x3788=(gconst113*r20);
IkReal x3789=(gconst112*r21);
IkReal x3790=(gconst113*r00);
IkReal x3791=(gconst113*r10);
IkReal x3792=(cj1*sj2);
IkReal x3793=((1.0)*x3786);
IkReal x3794=((1.0)*x3785);
IkReal x3795=(gconst112*x3786);
IkReal x3796=(gconst112*x3785);
evalcond[0]=(((x3785*x3789))+(((-1.0)*r22*x3793))+(((-1.0)*x3788*x3794)));
evalcond[1]=(sj0+(((-1.0)*x3790*x3794))+(((-1.0)*r02*x3793))+((r01*x3796)));
evalcond[2]=((((-1.0)*r12*x3793))+(((-1.0)*x3791*x3794))+((r11*x3796))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3785))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3786*x3789))+(((-1.0)*x3788*x3793)));
evalcond[4]=(((r02*x3785))+((cj0*x3792))+(((-1.0)*x3790*x3793))+((cj0*x3787))+((r01*x3795)));
evalcond[5]=(((r12*x3785))+(((-1.0)*x3791*x3793))+((sj0*x3792))+((r11*x3795))+((sj0*x3787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3797=((1.0)*gconst113);
CheckValue<IkReal> x3798 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x3797))+(((-1.0)*cj0*r00*x3797))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3798.valid){
continue;
}
CheckValue<IkReal> x3799=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x3797)))),-1);
if(!x3799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3798.value)+(((1.5707963267949)*(x3799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3800=IKsin(j4);
IkReal x3801=IKcos(j4);
IkReal x3802=(cj2*sj1);
IkReal x3803=(gconst113*r20);
IkReal x3804=(gconst112*r21);
IkReal x3805=(gconst113*r00);
IkReal x3806=(gconst113*r10);
IkReal x3807=(cj1*sj2);
IkReal x3808=((1.0)*x3801);
IkReal x3809=((1.0)*x3800);
IkReal x3810=(gconst112*x3801);
IkReal x3811=(gconst112*x3800);
evalcond[0]=(((x3800*x3804))+(((-1.0)*x3803*x3809))+(((-1.0)*r22*x3808)));
evalcond[1]=(sj0+(((-1.0)*x3805*x3809))+(((-1.0)*r02*x3808))+((r01*x3811)));
evalcond[2]=(((r11*x3811))+(((-1.0)*x3806*x3809))+(((-1.0)*r12*x3808))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3800))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3801*x3804))+(((-1.0)*x3803*x3808)));
evalcond[4]=((((-1.0)*x3805*x3808))+((r02*x3800))+((cj0*x3807))+((cj0*x3802))+((r01*x3810)));
evalcond[5]=(((r11*x3810))+((r12*x3800))+(((-1.0)*x3806*x3808))+((sj0*x3807))+((sj0*x3802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3812.value)))+(x3813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3814=IKsin(j4);
IkReal x3815=IKcos(j4);
IkReal x3816=(cj2*sj1);
IkReal x3817=(gconst113*r20);
IkReal x3818=(gconst112*r21);
IkReal x3819=(gconst113*r00);
IkReal x3820=(gconst113*r10);
IkReal x3821=(cj1*sj2);
IkReal x3822=((1.0)*x3815);
IkReal x3823=((1.0)*x3814);
IkReal x3824=(gconst112*x3815);
IkReal x3825=(gconst112*x3814);
evalcond[0]=((((-1.0)*r22*x3822))+(((-1.0)*x3817*x3823))+((x3814*x3818)));
evalcond[1]=(sj0+(((-1.0)*r02*x3822))+(((-1.0)*x3819*x3823))+((r01*x3825)));
evalcond[2]=((((-1.0)*r12*x3822))+((r11*x3825))+(((-1.0)*cj0))+(((-1.0)*x3820*x3823)));
evalcond[3]=((((-1.0)*x3817*x3822))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3814))+((x3815*x3818)));
evalcond[4]=(((r02*x3814))+((cj0*x3816))+((cj0*x3821))+(((-1.0)*x3819*x3822))+((r01*x3824)));
evalcond[5]=(((r12*x3814))+((r11*x3824))+((sj0*x3821))+((sj0*x3816))+(((-1.0)*x3820*x3822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3826=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3826;
j4eval[1]=IKsign(x3826);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3827=((1.0)*cj5);
IkReal x3828=((((-1.0)*r21*x3827))+(((-1.0)*r20*sj5)));
j4eval[0]=x3828;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x3827)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3829=cj5*cj5;
IkReal x3830=r11*r11;
IkReal x3831=(r11*sj5);
IkReal x3832=(cj5*r10);
IkReal x3833=((r12*r12)+(((-2.0)*x3831*x3832))+((x3829*(r10*r10)))+x3830+(((-1.0)*x3829*x3830)));
j4eval[0]=x3833;
j4eval[1]=IKsign(x3833);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3832))+x3831))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3834=cj5*cj5;
IkReal x3835=r11*r11;
IkReal x3836=(cj5*r10);
IkReal x3837=(r11*sj5);
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3834*(r10*r10)))+x3835+(((-1.0)*x3834*x3835))+(((-2.0)*x3836*x3837)))),-1);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal(((((-1.0)*x3836))+x3837)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3838.value)))+(x3839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3840=IKcos(j4);
IkReal x3841=IKsin(j4);
IkReal x3842=(cj5*r00);
IkReal x3843=(cj5*r10);
IkReal x3844=(r21*sj5);
IkReal x3845=(cj5*r20);
IkReal x3846=((1.0)*x3840);
IkReal x3847=((1.0)*x3841);
IkReal x3848=(sj5*x3841);
IkReal x3849=(sj5*x3840);
evalcond[0]=(((r12*x3841))+(((-1.0)*x3843*x3846))+((r11*x3849)));
evalcond[1]=((((-1.0)*x3845*x3847))+((x3841*x3844))+(((-1.0)*r22*x3846)));
evalcond[2]=((((-1.0)*r02*x3846))+(((-1.0)*x3842*x3847))+((r01*x3848)));
evalcond[3]=((-1.0)+(((-1.0)*x3843*x3847))+(((-1.0)*r12*x3846))+((r11*x3848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3842*x3846))+((cj1*sj2))+((r01*x3849))+((r02*x3841)));
evalcond[5]=((((-1.0)*x3845*x3846))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3840*x3844))+((r22*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3850=((1.0)*cj5);
CheckValue<IkReal> x3851 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3850))+(((-1.0)*r20*sj5)))),-1);
if(!x3852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3851.value)+(((1.5707963267949)*(x3852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3853=IKcos(j4);
IkReal x3854=IKsin(j4);
IkReal x3855=(cj5*r00);
IkReal x3856=(cj5*r10);
IkReal x3857=(r21*sj5);
IkReal x3858=(cj5*r20);
IkReal x3859=((1.0)*x3853);
IkReal x3860=((1.0)*x3854);
IkReal x3861=(sj5*x3854);
IkReal x3862=(sj5*x3853);
evalcond[0]=(((r11*x3862))+(((-1.0)*x3856*x3859))+((r12*x3854)));
evalcond[1]=(((x3854*x3857))+(((-1.0)*x3858*x3860))+(((-1.0)*r22*x3859)));
evalcond[2]=(((r01*x3861))+(((-1.0)*x3855*x3860))+(((-1.0)*r02*x3859)));
evalcond[3]=((-1.0)+((r11*x3861))+(((-1.0)*x3856*x3860))+(((-1.0)*r12*x3859)));
evalcond[4]=(((r02*x3854))+((cj2*sj1))+((cj1*sj2))+((r01*x3862))+(((-1.0)*x3855*x3859)));
evalcond[5]=((((-1.0)*x3858*x3859))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3853*x3857))+((r22*x3854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3863 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3863.value)+(((1.5707963267949)*(x3864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKcos(j4);
IkReal x3866=IKsin(j4);
IkReal x3867=(cj5*r00);
IkReal x3868=(cj5*r10);
IkReal x3869=(r21*sj5);
IkReal x3870=(cj5*r20);
IkReal x3871=((1.0)*x3865);
IkReal x3872=((1.0)*x3866);
IkReal x3873=(sj5*x3866);
IkReal x3874=(sj5*x3865);
evalcond[0]=((((-1.0)*x3868*x3871))+((r11*x3874))+((r12*x3866)));
evalcond[1]=(((x3866*x3869))+(((-1.0)*x3870*x3872))+(((-1.0)*r22*x3871)));
evalcond[2]=((((-1.0)*x3867*x3872))+((r01*x3873))+(((-1.0)*r02*x3871)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3871))+(((-1.0)*x3868*x3872))+((r11*x3873)));
evalcond[4]=((((-1.0)*x3867*x3871))+((cj2*sj1))+((r02*x3866))+((r01*x3874))+((cj1*sj2)));
evalcond[5]=(((x3865*x3869))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3870*x3871))+((r22*x3866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3875=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3875;
j4eval[1]=IKsign(x3875);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3876=((1.0)*cj5);
IkReal x3877=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3876)));
j4eval[0]=x3877;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3876))))));
j4eval[2]=IKsign(x3877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3878=(sj1*sj2);
IkReal x3879=(cj5*r10);
IkReal x3880=(r11*sj5);
IkReal x3881=(cj1*cj2);
IkReal x3882=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3882;
j4eval[1]=((IKabs(((((-1.0)*x3878*x3879))+((x3878*x3880))+((x3879*x3881))+(((-1.0)*x3880*x3881)))))+(IKabs((((r12*x3881))+(((-1.0)*r12*x3878))))));
j4eval[2]=IKsign(x3882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3883=(sj1*sj2);
IkReal x3884=(cj5*r10);
IkReal x3885=(r11*sj5);
IkReal x3886=(cj1*cj2);
CheckValue<IkReal> x3887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3887.valid){
continue;
}
CheckValue<IkReal> x3888 = IKatan2WithCheck(IkReal(((((-1.0)*x3885*x3886))+((x3883*x3885))+(((-1.0)*x3883*x3884))+((x3884*x3886)))),IkReal(((((-1.0)*r12*x3883))+((r12*x3886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3887.value)))+(x3888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3889=IKcos(j4);
IkReal x3890=IKsin(j4);
IkReal x3891=(cj5*r00);
IkReal x3892=(cj5*r10);
IkReal x3893=(r21*sj5);
IkReal x3894=((1.0)*cj2);
IkReal x3895=(cj5*r20);
IkReal x3896=((1.0)*x3889);
IkReal x3897=((1.0)*x3890);
IkReal x3898=(sj5*x3890);
IkReal x3899=(sj5*x3889);
evalcond[0]=((((-1.0)*x3892*x3896))+((r11*x3899))+((r12*x3890)));
evalcond[1]=(((x3890*x3893))+(((-1.0)*x3895*x3897))+(((-1.0)*r22*x3896)));
evalcond[2]=(((r01*x3898))+(((-1.0)*x3891*x3897))+(((-1.0)*r02*x3896)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3896))+(((-1.0)*x3892*x3897))+((r11*x3898)));
evalcond[4]=((((-1.0)*x3895*x3896))+((x3889*x3893))+((sj1*sj2))+((r22*x3890))+(((-1.0)*cj1*x3894)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3899))+(((-1.0)*x3891*x3896))+(((-1.0)*sj1*x3894))+((r02*x3890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3900=((1.0)*cj5);
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3900)))),-1);
if(!x3901.valid){
continue;
}
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3901.value)))+(x3902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3903=IKcos(j4);
IkReal x3904=IKsin(j4);
IkReal x3905=(cj5*r00);
IkReal x3906=(cj5*r10);
IkReal x3907=(r21*sj5);
IkReal x3908=((1.0)*cj2);
IkReal x3909=(cj5*r20);
IkReal x3910=((1.0)*x3903);
IkReal x3911=((1.0)*x3904);
IkReal x3912=(sj5*x3904);
IkReal x3913=(sj5*x3903);
evalcond[0]=((((-1.0)*x3906*x3910))+((r12*x3904))+((r11*x3913)));
evalcond[1]=((((-1.0)*r22*x3910))+(((-1.0)*x3909*x3911))+((x3904*x3907)));
evalcond[2]=((((-1.0)*x3905*x3911))+(((-1.0)*r02*x3910))+((r01*x3912)));
evalcond[3]=((1.0)+(((-1.0)*x3906*x3911))+((r11*x3912))+(((-1.0)*r12*x3910)));
evalcond[4]=(((x3903*x3907))+((r22*x3904))+(((-1.0)*x3909*x3910))+((sj1*sj2))+(((-1.0)*cj1*x3908)));
evalcond[5]=((((-1.0)*x3905*x3910))+(((-1.0)*sj1*x3908))+(((-1.0)*cj1*sj2))+((r01*x3913))+((r02*x3904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3914=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3914.valid){
continue;
}
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3914.value)))+(x3915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3916=IKcos(j4);
IkReal x3917=IKsin(j4);
IkReal x3918=(cj5*r00);
IkReal x3919=(cj5*r10);
IkReal x3920=(r21*sj5);
IkReal x3921=((1.0)*cj2);
IkReal x3922=(cj5*r20);
IkReal x3923=((1.0)*x3916);
IkReal x3924=((1.0)*x3917);
IkReal x3925=(sj5*x3917);
IkReal x3926=(sj5*x3916);
evalcond[0]=(((r11*x3926))+(((-1.0)*x3919*x3923))+((r12*x3917)));
evalcond[1]=(((x3917*x3920))+(((-1.0)*x3922*x3924))+(((-1.0)*r22*x3923)));
evalcond[2]=((((-1.0)*r02*x3923))+(((-1.0)*x3918*x3924))+((r01*x3925)));
evalcond[3]=((1.0)+((r11*x3925))+(((-1.0)*r12*x3923))+(((-1.0)*x3919*x3924)));
evalcond[4]=((((-1.0)*cj1*x3921))+((x3916*x3920))+(((-1.0)*x3922*x3923))+((sj1*sj2))+((r22*x3917)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x3918*x3923))+(((-1.0)*sj1*x3921))+((r02*x3917))+((r01*x3926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3927=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3927);
rxp0_2=(py*r00);
rxp1_0=(r21*x3927);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3928=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3928);
rxp0_2=(py*r00);
rxp1_0=(r21*x3928);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3929=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3929);
rxp0_2=(py*r00);
rxp1_0=(r21*x3929);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3932=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3932.valid){
continue;
}
IkReal x3930=x3932.value;
IkReal x3931=((1.0)*cj0*x3930);
cj4array[0]=((((-1.0)*cj1*sj2*x3931))+(((-1.0)*cj2*sj1*x3931)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3933=IKsin(j4);
IkReal x3934=IKcos(j4);
IkReal x3935=(r21*sj5);
IkReal x3936=((1.0)*x3934);
IkReal x3937=((1.0)*cj5*x3933);
evalcond[0]=(r12*x3933);
evalcond[1]=((((-1.0)*r12*x3936))+(((-1.0)*cj0)));
evalcond[2]=(((x3933*x3935))+(((-1.0)*r20*x3937)));
evalcond[3]=((((-1.0)*r00*x3937))+((r01*sj5*x3933)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x3936))+((x3934*x3935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3939=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3939.valid){
continue;
}
IkReal x3938=x3939.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3938))+((cj1*cj2*x3938)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3940=IKsin(j4);
IkReal x3941=IKcos(j4);
IkReal x3942=(r01*sj5);
IkReal x3943=((1.0)*cj5*r00);
evalcond[0]=(r12*x3940);
evalcond[1]=((((-1.0)*r12*x3941))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x3940))+(((-1.0)*cj5*r20*x3940)));
evalcond[3]=(((x3940*x3942))+(((-1.0)*x3940*x3943)));
evalcond[4]=(((x3941*x3942))+(((-1.0)*x3941*x3943))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3944=IKPowWithIntegerCheck(r12,-1);
if(!x3944.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3944.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3945=IKsin(j4);
IkReal x3946=IKcos(j4);
IkReal x3947=(sj5*x3946);
IkReal x3948=(sj5*x3945);
IkReal x3949=((1.0)*cj5*x3945);
IkReal x3950=((1.0)*cj5*x3946);
evalcond[0]=(r12*x3945);
evalcond[1]=((((-1.0)*r20*x3949))+((r21*x3948)));
evalcond[2]=(((r01*x3948))+(((-1.0)*r00*x3949)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x3950))+((r21*x3947)));
evalcond[4]=(((r01*x3947))+(((-1.0)*r00*x3950))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3951=((1.0)*cj5);
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3951))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3951))+(((-1.0)*r20*sj5)))),-1);
if(!x3953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3952.value)+(((1.5707963267949)*(x3953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3954=IKsin(j4);
IkReal x3955=IKcos(j4);
IkReal x3956=(cj5*r00);
IkReal x3957=(cj5*r10);
IkReal x3958=(cj2*sj1);
IkReal x3959=(r21*sj5);
IkReal x3960=(cj5*r20);
IkReal x3961=(cj1*sj2);
IkReal x3962=((1.0)*x3955);
IkReal x3963=((1.0)*x3954);
IkReal x3964=(sj5*x3954);
IkReal x3965=(sj5*x3955);
evalcond[0]=((((-1.0)*x3960*x3963))+(((-1.0)*r22*x3962))+((x3954*x3959)));
evalcond[1]=(sj0+(((-1.0)*r02*x3962))+(((-1.0)*x3956*x3963))+((r01*x3964)));
evalcond[2]=(((r11*x3964))+(((-1.0)*x3957*x3963))+(((-1.0)*cj0))+(((-1.0)*r12*x3962)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3960*x3962))+((x3955*x3959))+((r22*x3954)));
evalcond[4]=(((cj0*x3958))+(((-1.0)*x3956*x3962))+((r02*x3954))+((r01*x3965))+((cj0*x3961)));
evalcond[5]=(((r11*x3965))+((sj0*x3958))+(((-1.0)*x3957*x3962))+((r12*x3954))+((sj0*x3961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3966=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3966.valid){
continue;
}
CheckValue<IkReal> x3967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3966.value)))+(x3967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3968=IKsin(j4);
IkReal x3969=IKcos(j4);
IkReal x3970=(cj5*r00);
IkReal x3971=(cj5*r10);
IkReal x3972=(cj2*sj1);
IkReal x3973=(r21*sj5);
IkReal x3974=(cj5*r20);
IkReal x3975=(cj1*sj2);
IkReal x3976=((1.0)*x3969);
IkReal x3977=((1.0)*x3968);
IkReal x3978=(sj5*x3968);
IkReal x3979=(sj5*x3969);
evalcond[0]=((((-1.0)*r22*x3976))+((x3968*x3973))+(((-1.0)*x3974*x3977)));
evalcond[1]=((((-1.0)*r02*x3976))+sj0+(((-1.0)*x3970*x3977))+((r01*x3978)));
evalcond[2]=((((-1.0)*r12*x3976))+((r11*x3978))+(((-1.0)*x3971*x3977))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3968))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3969*x3973))+(((-1.0)*x3974*x3976)));
evalcond[4]=(((r02*x3968))+(((-1.0)*x3970*x3976))+((r01*x3979))+((cj0*x3975))+((cj0*x3972)));
evalcond[5]=(((r11*x3979))+((r12*x3968))+(((-1.0)*x3971*x3976))+((sj0*x3975))+((sj0*x3972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3980.valid){
continue;
}
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3980.value)))+(x3981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3982=IKsin(j4);
IkReal x3983=IKcos(j4);
IkReal x3984=(cj5*r00);
IkReal x3985=(cj5*r10);
IkReal x3986=(cj2*sj1);
IkReal x3987=(r21*sj5);
IkReal x3988=(cj5*r20);
IkReal x3989=(cj1*sj2);
IkReal x3990=((1.0)*x3983);
IkReal x3991=((1.0)*x3982);
IkReal x3992=(sj5*x3982);
IkReal x3993=(sj5*x3983);
evalcond[0]=((((-1.0)*x3988*x3991))+((x3982*x3987))+(((-1.0)*r22*x3990)));
evalcond[1]=(sj0+(((-1.0)*r02*x3990))+(((-1.0)*x3984*x3991))+((r01*x3992)));
evalcond[2]=((((-1.0)*r12*x3990))+(((-1.0)*x3985*x3991))+((r11*x3992))+(((-1.0)*cj0)));
evalcond[3]=(((x3983*x3987))+(((-1.0)*x3988*x3990))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3982)));
evalcond[4]=((((-1.0)*x3984*x3990))+((cj0*x3986))+((cj0*x3989))+((r01*x3993))+((r02*x3982)));
evalcond[5]=(((sj0*x3989))+((sj0*x3986))+(((-1.0)*x3985*x3990))+((r11*x3993))+((r12*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3994=r21*r21;
IkReal x3995=cj5*cj5;
IkReal x3996=(sj1*sj2);
IkReal x3997=(r21*sj5);
IkReal x3998=(cj1*cj2);
IkReal x3999=(cj5*r20);
CheckValue<IkReal> x4000=IKPowWithIntegerCheck(IKsign((((x3994*x3995))+(((2.0)*x3997*x3999))+(((-1.0)*(r22*r22)))+(((-1.0)*x3994))+(((-1.0)*x3995*(r20*r20))))),-1);
if(!x4000.valid){
continue;
}
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal((((r22*x3996))+(((-1.0)*r22*x3998)))),IkReal((((x3998*x3999))+((x3996*x3997))+(((-1.0)*x3997*x3998))+(((-1.0)*x3996*x3999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4000.value)))+(x4001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4002=IKsin(j4);
IkReal x4003=IKcos(j4);
IkReal x4004=(r21*sj5);
IkReal x4005=(cj5*r20);
IkReal x4006=((1.0)*x4003);
evalcond[0]=((((-1.0)*r22*x4006))+(((-1.0)*x4002*x4005))+((x4002*x4004)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4002))+((x4003*x4004))+(((-1.0)*x4005*x4006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4007=(cj5*sj4);
IkReal x4008=(sj4*sj5);
if( IKabs((((r00*x4007))+(((-1.0)*r01*x4008))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12))+(((-1.0)*r10*x4007))+((r11*x4008)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x4007))+(((-1.0)*r01*x4008))+((cj4*r02))))+IKsqr(((((-1.0)*cj4*r12))+(((-1.0)*r10*x4007))+((r11*x4008))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x4007))+(((-1.0)*r01*x4008))+((cj4*r02))), ((((-1.0)*cj4*r12))+(((-1.0)*r10*x4007))+((r11*x4008))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4009=IKcos(j0);
IkReal x4010=IKsin(j0);
IkReal x4011=(r11*sj5);
IkReal x4012=(cj1*cj2);
IkReal x4013=(cj5*r11);
IkReal x4014=((1.0)*r00);
IkReal x4015=(cj4*cj5);
IkReal x4016=(cj5*r01);
IkReal x4017=((1.0)*r10);
IkReal x4018=((0.09465)*sj5);
IkReal x4019=(cj5*sj4);
IkReal x4020=((1.0)*cj4);
IkReal x4021=(r01*sj5);
IkReal x4022=(sj1*x4009);
IkReal x4023=(cj1*x4010);
IkReal x4024=(cj1*x4009);
IkReal x4025=(sj1*sj2*x4010);
evalcond[0]=((((-1.0)*r02*x4020))+((sj4*x4021))+x4010+(((-1.0)*x4014*x4019)));
evalcond[1]=((((-1.0)*r12*x4020))+(((-1.0)*x4009))+((sj4*x4011))+(((-1.0)*x4017*x4019)));
evalcond[2]=((((-1.0)*x4016))+(((-1.0)*sj5*x4014))+((x4009*x4012))+(((-1.0)*sj2*x4022)));
evalcond[3]=(((x4010*x4012))+(((-1.0)*x4013))+(((-1.0)*x4025))+(((-1.0)*sj5*x4017)));
evalcond[4]=(((r02*sj4))+((cj2*x4022))+(((-1.0)*x4014*x4015))+((cj4*x4021))+((sj2*x4024)));
evalcond[5]=(((cj4*x4011))+((cj2*sj1*x4010))+((r12*sj4))+(((-1.0)*x4015*x4017))+((sj2*x4023)));
evalcond[6]=((((-0.09465)*x4016))+(((0.39225)*sj2*x4022))+(((-0.425)*x4024))+(((0.10915)*x4010))+(((-1.0)*px))+(((-1.0)*r00*x4018))+(((-0.39225)*x4009*x4012)));
evalcond[7]=((((-0.09465)*x4013))+(((-0.425)*x4023))+(((-0.39225)*x4010*x4012))+(((-1.0)*py))+(((-0.10915)*x4009))+(((-1.0)*r10*x4018))+(((0.39225)*x4025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4026.valid){
continue;
}
CheckValue<IkReal> x4027 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4027.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4026.value)))+(x4027.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4028=IKcos(j0);
IkReal x4029=IKsin(j0);
IkReal x4030=(cj1*cj2);
IkReal x4031=(cj5*r11);
IkReal x4032=(sj1*sj2);
IkReal x4033=(cj5*r01);
IkReal x4034=((1.0)*sj5);
IkReal x4035=((0.09465)*sj5);
IkReal x4036=((0.425)*cj1);
IkReal x4037=((0.39225)*x4028);
IkReal x4038=(x4029*x4032);
evalcond[0]=((((-1.0)*r00*x4034))+((x4028*x4030))+(((-1.0)*x4033))+(((-1.0)*x4028*x4032)));
evalcond[1]=(((x4029*x4030))+(((-1.0)*x4031))+(((-1.0)*x4038))+(((-1.0)*r10*x4034)));
evalcond[2]=((((-1.0)*r00*x4035))+((x4032*x4037))+(((-0.09465)*x4033))+(((-1.0)*x4030*x4037))+(((0.10915)*x4029))+(((-1.0)*px))+(((-1.0)*x4028*x4036)));
evalcond[3]=((((-0.09465)*x4031))+(((-0.39225)*x4029*x4030))+(((0.39225)*x4038))+(((-1.0)*py))+(((-0.10915)*x4028))+(((-1.0)*x4029*x4036))+(((-1.0)*r10*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4039=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4039;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4040=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4040;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4041=((1.0)*cj5);
IkReal x4042=((((-1.0)*r21*x4041))+(((-1.0)*r20*sj5)));
j4eval[0]=x4042;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x4041))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x4041)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x4042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4043=((-1.0)*r20);
IkReal x4045 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4045)==0){
continue;
}
IkReal x4044=pow(x4045,-0.5);
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4043),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4046.value));
IkReal gconst97=(r21*x4044);
IkReal gconst98=(x4043*x4044);
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4047.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4048=((-1.0)*r20);
IkReal x4049=x4044;
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4048),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
IkReal x4050=((-1.0)*(x4051.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4050;
IkReal gconst96=x4050;
IkReal gconst97=(r21*x4049);
IkReal gconst98=(x4048*x4049);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4052=((-1.0)*r20);
IkReal x4053=x4044;
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4052),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
IkReal x4054=((-1.0)*(x4055.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4054;
IkReal gconst96=x4054;
IkReal gconst97=(r21*x4053);
IkReal gconst98=(x4052*x4053);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4056=((-1.0)*r20);
IkReal x4057=x4044;
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4056),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
IkReal x4058=((-1.0)*(x4059.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4058;
IkReal gconst96=x4058;
IkReal gconst97=(r21*x4057);
IkReal gconst98=(x4056*x4057);
IkReal x4060=((1.0)*(r22*r22));
CheckValue<IkReal> x4064=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4060))),-1);
if(!x4064.valid){
continue;
}
IkReal x4061=x4064.value;
IkReal x4062=((1.0)*x4061);
IkReal x4063=((((-1.0)*x4062*(r20*r20*r20*r20)))+(((-2.0)*x4061*(r20*r20)*(r21*r21)))+(((-1.0)*x4060))+(((-1.0)*x4062*(r21*r21*r21*r21))));
j4eval[0]=x4063;
j4eval[1]=IKsign(x4063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4065=(cj1*cj2);
IkReal x4066=(gconst98*r20);
IkReal x4067=(sj1*sj2);
IkReal x4068=(gconst97*r21);
CheckValue<IkReal> x4069 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4065))+((r22*x4067)))),IkReal(((((-1.0)*x4065*x4068))+((x4067*x4068))+(((-1.0)*x4066*x4067))+((x4065*x4066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4069.valid){
continue;
}
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4066*x4066)))+(((2.0)*x4066*x4068))+(((-1.0)*(x4068*x4068)))+(((-1.0)*(r22*r22))))),-1);
if(!x4070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4069.value)+(((1.5707963267949)*(x4070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4071=IKsin(j4);
IkReal x4072=IKcos(j4);
IkReal x4073=(gconst98*r10);
IkReal x4074=(gconst97*r21);
IkReal x4075=(cj2*sj1);
IkReal x4076=(gconst98*r20);
IkReal x4077=(gconst98*r00);
IkReal x4078=(cj1*sj2);
IkReal x4079=((1.0)*x4072);
IkReal x4080=((1.0)*x4071);
IkReal x4081=(gconst97*x4071);
IkReal x4082=(gconst97*x4072);
evalcond[0]=((((-1.0)*r22*x4079))+((x4071*x4074))+(((-1.0)*x4076*x4080)));
evalcond[1]=(((r01*x4081))+sj0+(((-1.0)*r02*x4079))+(((-1.0)*x4077*x4080)));
evalcond[2]=((((-1.0)*x4073*x4080))+(((-1.0)*r12*x4079))+((r11*x4081))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4072*x4074))+(((-1.0)*x4076*x4079)));
evalcond[4]=(((r01*x4082))+((cj0*x4078))+((cj0*x4075))+((r02*x4071))+(((-1.0)*x4077*x4079)));
evalcond[5]=(((r12*x4071))+((sj0*x4078))+((sj0*x4075))+((r11*x4082))+(((-1.0)*x4073*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4083.value)+(((1.5707963267949)*(x4084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4085=IKsin(j4);
IkReal x4086=IKcos(j4);
IkReal x4087=(gconst98*r10);
IkReal x4088=(gconst97*r21);
IkReal x4089=(cj2*sj1);
IkReal x4090=(gconst98*r20);
IkReal x4091=(gconst98*r00);
IkReal x4092=(cj1*sj2);
IkReal x4093=((1.0)*x4086);
IkReal x4094=((1.0)*x4085);
IkReal x4095=(gconst97*x4085);
IkReal x4096=(gconst97*x4086);
evalcond[0]=(((x4085*x4088))+(((-1.0)*x4090*x4094))+(((-1.0)*r22*x4093)));
evalcond[1]=(sj0+((r01*x4095))+(((-1.0)*r02*x4093))+(((-1.0)*x4091*x4094)));
evalcond[2]=((((-1.0)*r12*x4093))+((r11*x4095))+(((-1.0)*x4087*x4094))+(((-1.0)*cj0)));
evalcond[3]=(((x4086*x4088))+(((-1.0)*x4090*x4093))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4085)));
evalcond[4]=(((cj0*x4089))+((r01*x4096))+((cj0*x4092))+((r02*x4085))+(((-1.0)*x4091*x4093)));
evalcond[5]=(((r11*x4096))+((r12*x4085))+((sj0*x4089))+(((-1.0)*x4087*x4093))+((sj0*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4097 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4097.valid){
continue;
}
CheckValue<IkReal> x4098=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x4098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4097.value)+(((1.5707963267949)*(x4098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4099=IKsin(j4);
IkReal x4100=IKcos(j4);
IkReal x4101=(gconst98*r10);
IkReal x4102=(gconst97*r21);
IkReal x4103=(cj2*sj1);
IkReal x4104=(gconst98*r20);
IkReal x4105=(gconst98*r00);
IkReal x4106=(cj1*sj2);
IkReal x4107=((1.0)*x4100);
IkReal x4108=((1.0)*x4099);
IkReal x4109=(gconst97*x4099);
IkReal x4110=(gconst97*x4100);
evalcond[0]=(((x4099*x4102))+(((-1.0)*r22*x4107))+(((-1.0)*x4104*x4108)));
evalcond[1]=(sj0+(((-1.0)*x4105*x4108))+((r01*x4109))+(((-1.0)*r02*x4107)));
evalcond[2]=((((-1.0)*r12*x4107))+((r11*x4109))+(((-1.0)*x4101*x4108))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4104*x4107))+((x4100*x4102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4099)));
evalcond[4]=((((-1.0)*x4105*x4107))+((cj0*x4103))+((cj0*x4106))+((r02*x4099))+((r01*x4110)));
evalcond[5]=(((r12*x4099))+((sj0*x4103))+((sj0*x4106))+(((-1.0)*x4101*x4107))+((r11*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4111=((-1.0)*r21);
IkReal x4113 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4113)==0){
continue;
}
IkReal x4112=pow(x4113,-0.5);
CheckValue<IkReal> x4114 = IKatan2WithCheck(IkReal(x4111),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4114.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4114.value))));
IkReal gconst100=(x4111*x4112);
IkReal gconst101=((1.0)*r20*x4112);
CheckValue<IkReal> x4115 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4115.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4115.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4116=((-1.0)*r21);
CheckValue<IkReal> x4119 = IKatan2WithCheck(IkReal(x4116),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4119.valid){
continue;
}
IkReal x4117=((1.0)*(x4119.value));
IkReal x4118=x4112;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4117)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4117)));
IkReal gconst100=(x4116*x4118);
IkReal gconst101=((1.0)*r20*x4118);
IkReal x4120=r22*r22;
IkReal x4121=((1.0)*x4120);
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(((-1.0)+x4120),-1);
if(!x4125.valid){
continue;
}
IkReal x4122=x4125.value;
if((((1.0)+(((-1.0)*x4121)))) < -0.00001)
continue;
IkReal x4123=IKsqrt(((1.0)+(((-1.0)*x4121))));
IkReal x4124=(sj0*x4122*x4123);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4121*x4124))+x4124))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4126=((-1.0)*r21);
CheckValue<IkReal> x4129 = IKatan2WithCheck(IkReal(x4126),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4129.valid){
continue;
}
IkReal x4127=((1.0)*(x4129.value));
IkReal x4128=x4112;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4127)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4127)));
IkReal gconst100=(x4126*x4128);
IkReal gconst101=((1.0)*r20*x4128);
IkReal x4130=r22*r22;
IkReal x4131=((1.0)*x4130);
CheckValue<IkReal> x4135=IKPowWithIntegerCheck(((-1.0)+x4130),-1);
if(!x4135.valid){
continue;
}
IkReal x4132=x4135.value;
if((((1.0)+(((-1.0)*x4131)))) < -0.00001)
continue;
IkReal x4133=IKsqrt(((1.0)+(((-1.0)*x4131))));
IkReal x4134=(cj0*x4132*x4133);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4131*x4134))+x4134))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4136=((-1.0)*r21);
CheckValue<IkReal> x4139 = IKatan2WithCheck(IkReal(x4136),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4139.valid){
continue;
}
IkReal x4137=((1.0)*(x4139.value));
IkReal x4138=x4112;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4137)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4137)));
IkReal gconst100=(x4136*x4138);
IkReal gconst101=((1.0)*r20*x4138);
IkReal x4140=r22*r22;
IkReal x4141=(cj0*r02);
IkReal x4142=(r12*sj0);
CheckValue<IkReal> x4146=IKPowWithIntegerCheck(((-1.0)+x4140),-1);
if(!x4146.valid){
continue;
}
IkReal x4143=x4146.value;
if((((1.0)+(((-1.0)*x4140)))) < -0.00001)
continue;
IkReal x4144=IKsqrt(((1.0)+(((-1.0)*x4140))));
IkReal x4145=((1.0)*r22*x4143*x4144);
j4eval[0]=0;
j4eval[1]=((IKabs((x4141+x4142)))+(IKabs(((((-1.0)*x4141*x4145))+(((-1.0)*x4142*x4145))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4147=((1.0)*gconst101);
CheckValue<IkReal> x4148 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x4147))+(((-1.0)*cj0*r00*x4147))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x4147)))),-1);
if(!x4149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4148.value)+(((1.5707963267949)*(x4149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4150=IKsin(j4);
IkReal x4151=IKcos(j4);
IkReal x4152=(cj2*sj1);
IkReal x4153=(gconst101*r20);
IkReal x4154=(gconst101*r10);
IkReal x4155=(gconst101*r00);
IkReal x4156=(cj1*sj2);
IkReal x4157=((1.0)*x4151);
IkReal x4158=((1.0)*x4150);
IkReal x4159=(gconst100*x4150);
IkReal x4160=(gconst100*x4151);
evalcond[0]=(((r21*x4159))+(((-1.0)*x4153*x4158))+(((-1.0)*r22*x4157)));
evalcond[1]=(sj0+(((-1.0)*x4155*x4158))+((r01*x4159))+(((-1.0)*r02*x4157)));
evalcond[2]=(((r11*x4159))+(((-1.0)*x4154*x4158))+(((-1.0)*r12*x4157))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4153*x4157))+((r22*x4150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4160)));
evalcond[4]=(((r01*x4160))+((r02*x4150))+(((-1.0)*x4155*x4157))+((cj0*x4156))+((cj0*x4152)));
evalcond[5]=(((r12*x4150))+((sj0*x4156))+((sj0*x4152))+(((-1.0)*x4154*x4157))+((r11*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4161 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4161.valid){
continue;
}
CheckValue<IkReal> x4162=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4161.value)+(((1.5707963267949)*(x4162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4163=IKsin(j4);
IkReal x4164=IKcos(j4);
IkReal x4165=(cj2*sj1);
IkReal x4166=(gconst101*r20);
IkReal x4167=(gconst101*r10);
IkReal x4168=(gconst101*r00);
IkReal x4169=(cj1*sj2);
IkReal x4170=((1.0)*x4164);
IkReal x4171=((1.0)*x4163);
IkReal x4172=(gconst100*x4163);
IkReal x4173=(gconst100*x4164);
evalcond[0]=(((r21*x4172))+(((-1.0)*x4166*x4171))+(((-1.0)*r22*x4170)));
evalcond[1]=(sj0+(((-1.0)*x4168*x4171))+((r01*x4172))+(((-1.0)*r02*x4170)));
evalcond[2]=(((r11*x4172))+(((-1.0)*x4167*x4171))+(((-1.0)*r12*x4170))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4163))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4173))+(((-1.0)*x4166*x4170)));
evalcond[4]=((((-1.0)*x4168*x4170))+((cj0*x4165))+((cj0*x4169))+((r02*x4163))+((r01*x4173)));
evalcond[5]=(((r11*x4173))+(((-1.0)*x4167*x4170))+((r12*x4163))+((sj0*x4165))+((sj0*x4169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4174.valid){
continue;
}
CheckValue<IkReal> x4175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4174.value)))+(x4175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4176=IKsin(j4);
IkReal x4177=IKcos(j4);
IkReal x4178=(cj2*sj1);
IkReal x4179=(gconst101*r20);
IkReal x4180=(gconst101*r10);
IkReal x4181=(gconst101*r00);
IkReal x4182=(cj1*sj2);
IkReal x4183=((1.0)*x4177);
IkReal x4184=((1.0)*x4176);
IkReal x4185=(gconst100*x4176);
IkReal x4186=(gconst100*x4177);
evalcond[0]=(((r21*x4185))+(((-1.0)*r22*x4183))+(((-1.0)*x4179*x4184)));
evalcond[1]=((((-1.0)*x4181*x4184))+sj0+(((-1.0)*r02*x4183))+((r01*x4185)));
evalcond[2]=((((-1.0)*r12*x4183))+(((-1.0)*x4180*x4184))+((r11*x4185))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4186))+((r22*x4176))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4179*x4183)));
evalcond[4]=((((-1.0)*x4181*x4183))+((cj0*x4178))+((r01*x4186))+((r02*x4176))+((cj0*x4182)));
evalcond[5]=((((-1.0)*x4180*x4183))+((sj0*x4182))+((r12*x4176))+((r11*x4186))+((sj0*x4178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4188 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4188)==0){
continue;
}
IkReal x4187=pow(x4188,-0.5);
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4189.value));
IkReal gconst103=((-1.0)*r01*x4187);
IkReal gconst104=(r00*x4187);
CheckValue<IkReal> x4190 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4190.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4190.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4193 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4193.valid){
continue;
}
IkReal x4191=((-1.0)*(x4193.value));
IkReal x4192=x4187;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4191;
IkReal gconst102=x4191;
IkReal gconst103=((-1.0)*r01*x4192);
IkReal gconst104=(r00*x4192);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4194=((1.0)*gconst104);
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x4194)))),-1);
if(!x4195.valid){
continue;
}
CheckValue<IkReal> x4196 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4194))+((cj0*gconst103*r01))+(((-1.0)*r10*sj0*x4194))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4195.value)))+(x4196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4197=IKsin(j4);
IkReal x4198=IKcos(j4);
IkReal x4199=(gconst103*r11);
IkReal x4200=(cj2*sj1);
IkReal x4201=(gconst104*r10);
IkReal x4202=(gconst104*r20);
IkReal x4203=(gconst104*r00);
IkReal x4204=(cj1*sj2);
IkReal x4205=((1.0)*x4198);
IkReal x4206=(gconst103*x4198);
IkReal x4207=(gconst103*x4197);
IkReal x4208=((1.0)*x4197);
evalcond[0]=((((-1.0)*r22*x4205))+(((-1.0)*x4202*x4208))+((r21*x4207)));
evalcond[1]=(sj0+(((-1.0)*r02*x4205))+((r01*x4207))+(((-1.0)*x4203*x4208)));
evalcond[2]=((((-1.0)*r12*x4205))+(((-1.0)*x4201*x4208))+((x4197*x4199))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4197))+(((-1.0)*x4202*x4205))+((r21*x4206)));
evalcond[4]=(((cj0*x4204))+((cj0*x4200))+((r02*x4197))+((r01*x4206))+(((-1.0)*x4203*x4205)));
evalcond[5]=(((r12*x4197))+(((-1.0)*x4201*x4205))+((sj0*x4200))+((sj0*x4204))+((x4198*x4199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4209 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4209.valid){
continue;
}
CheckValue<IkReal> x4210=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x4210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4209.value)+(((1.5707963267949)*(x4210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4211=IKsin(j4);
IkReal x4212=IKcos(j4);
IkReal x4213=(gconst103*r11);
IkReal x4214=(cj2*sj1);
IkReal x4215=(gconst104*r10);
IkReal x4216=(gconst104*r20);
IkReal x4217=(gconst104*r00);
IkReal x4218=(cj1*sj2);
IkReal x4219=((1.0)*x4212);
IkReal x4220=(gconst103*x4212);
IkReal x4221=(gconst103*x4211);
IkReal x4222=((1.0)*x4211);
evalcond[0]=((((-1.0)*r22*x4219))+(((-1.0)*x4216*x4222))+((r21*x4221)));
evalcond[1]=(sj0+((r01*x4221))+(((-1.0)*r02*x4219))+(((-1.0)*x4217*x4222)));
evalcond[2]=((((-1.0)*r12*x4219))+(((-1.0)*x4215*x4222))+((x4211*x4213))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4211))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4216*x4219))+((r21*x4220)));
evalcond[4]=(((r01*x4220))+((r02*x4211))+((cj0*x4214))+((cj0*x4218))+(((-1.0)*x4217*x4219)));
evalcond[5]=(((r12*x4211))+((sj0*x4214))+((sj0*x4218))+((x4212*x4213))+(((-1.0)*x4215*x4219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4224 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4224)==0){
continue;
}
IkReal x4223=pow(x4224,-0.5);
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4225.value))));
IkReal gconst106=((1.0)*r01*x4223);
IkReal gconst107=((-1.0)*r00*x4223);
CheckValue<IkReal> x4226 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4226.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4226.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4229 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4229.valid){
continue;
}
IkReal x4227=((1.0)*(x4229.value));
IkReal x4228=x4223;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4227)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4227)));
IkReal gconst106=((1.0)*r01*x4228);
IkReal gconst107=((-1.0)*r00*x4228);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4232 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4232.valid){
continue;
}
IkReal x4230=((1.0)*(x4232.value));
IkReal x4231=x4223;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4230)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4230)));
IkReal gconst106=((1.0)*r01*x4231);
IkReal gconst107=((-1.0)*r00*x4231);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4235 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4235.valid){
continue;
}
IkReal x4233=((1.0)*(x4235.value));
IkReal x4234=x4223;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4233)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4233)));
IkReal gconst106=((1.0)*r01*x4234);
IkReal gconst107=((-1.0)*r00*x4234);
IkReal x4236=r02*r02;
IkReal x4237=(r12*sj0);
IkReal x4238=x4223;
IkReal x4239=(cj0*x4238);
j4eval[0]=((IKabs((x4237+((cj0*r02)))))+(IKabs((((x4236*x4239))+(((-1.0)*x4239))+((r02*x4237*x4238))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4240=((1.0)*gconst107);
CheckValue<IkReal> x4241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4240))+(((-1.0)*gconst106*r20)))),-1);
if(!x4241.valid){
continue;
}
CheckValue<IkReal> x4242 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst106*r01))+(((-1.0)*r10*sj0*x4240))+(((-1.0)*cj0*r00*x4240))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4241.value)))+(x4242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4243=IKsin(j4);
IkReal x4244=IKcos(j4);
IkReal x4245=(gconst107*r10);
IkReal x4246=(gconst107*r00);
IkReal x4247=(gconst107*r20);
IkReal x4248=(cj2*sj1);
IkReal x4249=(cj1*sj2);
IkReal x4250=((1.0)*x4244);
IkReal x4251=(gconst106*x4244);
IkReal x4252=(gconst106*x4243);
IkReal x4253=((1.0)*x4243);
evalcond[0]=((((-1.0)*x4247*x4253))+(((-1.0)*r22*x4250))+((r21*x4252)));
evalcond[1]=(sj0+(((-1.0)*x4246*x4253))+((r01*x4252))+(((-1.0)*r02*x4250)));
evalcond[2]=((((-1.0)*x4245*x4253))+((r11*x4252))+(((-1.0)*cj0))+(((-1.0)*r12*x4250)));
evalcond[3]=(((r22*x4243))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4247*x4250))+((r21*x4251)));
evalcond[4]=((((-1.0)*x4246*x4250))+((r01*x4251))+((r02*x4243))+((cj0*x4249))+((cj0*x4248)));
evalcond[5]=((((-1.0)*x4245*x4250))+((sj0*x4249))+((sj0*x4248))+((r11*x4251))+((r12*x4243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4254.value)+(((1.5707963267949)*(x4255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4256=IKsin(j4);
IkReal x4257=IKcos(j4);
IkReal x4258=(gconst107*r10);
IkReal x4259=(gconst107*r00);
IkReal x4260=(gconst107*r20);
IkReal x4261=(cj2*sj1);
IkReal x4262=(cj1*sj2);
IkReal x4263=((1.0)*x4257);
IkReal x4264=(gconst106*x4257);
IkReal x4265=(gconst106*x4256);
IkReal x4266=((1.0)*x4256);
evalcond[0]=(((r21*x4265))+(((-1.0)*r22*x4263))+(((-1.0)*x4260*x4266)));
evalcond[1]=(((r01*x4265))+sj0+(((-1.0)*x4259*x4266))+(((-1.0)*r02*x4263)));
evalcond[2]=((((-1.0)*r12*x4263))+((r11*x4265))+(((-1.0)*x4258*x4266))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4264))+((r22*x4256))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4260*x4263)));
evalcond[4]=(((r01*x4264))+((r02*x4256))+(((-1.0)*x4259*x4263))+((cj0*x4262))+((cj0*x4261)));
evalcond[5]=(((r11*x4264))+((r12*x4256))+(((-1.0)*x4258*x4263))+((sj0*x4261))+((sj0*x4262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4267=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x4267.valid){
continue;
}
CheckValue<IkReal> x4268 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4267.value)))+(x4268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4269=IKsin(j4);
IkReal x4270=IKcos(j4);
IkReal x4271=(gconst107*r10);
IkReal x4272=(gconst107*r00);
IkReal x4273=(gconst107*r20);
IkReal x4274=(cj2*sj1);
IkReal x4275=(cj1*sj2);
IkReal x4276=((1.0)*x4270);
IkReal x4277=(gconst106*x4270);
IkReal x4278=(gconst106*x4269);
IkReal x4279=((1.0)*x4269);
evalcond[0]=((((-1.0)*x4273*x4279))+((r21*x4278))+(((-1.0)*r22*x4276)));
evalcond[1]=(sj0+(((-1.0)*r02*x4276))+(((-1.0)*x4272*x4279))+((r01*x4278)));
evalcond[2]=((((-1.0)*r12*x4276))+((r11*x4278))+(((-1.0)*x4271*x4279))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4273*x4276))+((r21*x4277))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4269)));
evalcond[4]=(((r02*x4269))+(((-1.0)*x4272*x4276))+((cj0*x4275))+((cj0*x4274))+((r01*x4277)));
evalcond[5]=(((r11*x4277))+((r12*x4269))+(((-1.0)*x4271*x4276))+((sj0*x4274))+((sj0*x4275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4280=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4280;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4281=((1.0)*cj5);
IkReal x4282=((((-1.0)*r21*x4281))+(((-1.0)*r20*sj5)));
j4eval[0]=x4282;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4281))+((r11*sj5))))));
j4eval[2]=IKsign(x4282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4283=cj5*cj5;
IkReal x4284=r01*r01;
IkReal x4285=(r01*sj5);
IkReal x4286=(cj5*r00);
IkReal x4287=(((x4283*x4284))+(((-1.0)*(r02*r02)))+(((2.0)*x4285*x4286))+(((-1.0)*x4284))+(((-1.0)*x4283*(r00*r00))));
j4eval[0]=x4287;
j4eval[1]=IKsign(x4287);
j4eval[2]=((IKabs(r02))+(IKabs((x4285+(((-1.0)*x4286))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4288=cj5*cj5;
IkReal x4289=r01*r01;
IkReal x4290=(r01*sj5);
IkReal x4291=(cj5*r00);
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal(((((-1.0)*x4291))+x4290)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x4288*(r00*r00)))+(((-1.0)*x4289))+((x4288*x4289))+(((2.0)*x4290*x4291)))),-1);
if(!x4293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4292.value)+(((1.5707963267949)*(x4293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4294=IKcos(j4);
IkReal x4295=IKsin(j4);
IkReal x4296=(cj5*r00);
IkReal x4297=(cj5*r10);
IkReal x4298=(r21*sj5);
IkReal x4299=(cj5*r20);
IkReal x4300=((1.0)*x4294);
IkReal x4301=((1.0)*x4295);
IkReal x4302=(sj5*x4295);
IkReal x4303=(sj5*x4294);
evalcond[0]=((((-1.0)*x4296*x4300))+((r01*x4303))+((r02*x4295)));
evalcond[1]=((((-1.0)*r22*x4300))+((x4295*x4298))+(((-1.0)*x4299*x4301)));
evalcond[2]=((((-1.0)*r12*x4300))+((r11*x4302))+(((-1.0)*x4297*x4301)));
evalcond[3]=((1.0)+(((-1.0)*x4296*x4301))+((r01*x4302))+(((-1.0)*r02*x4300)));
evalcond[4]=(((cj2*sj1))+((r11*x4303))+((cj1*sj2))+(((-1.0)*x4297*x4300))+((r12*x4295)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4295))+(((-1.0)*x4299*x4300))+((x4294*x4298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4304=((1.0)*cj5);
CheckValue<IkReal> x4305 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4305.valid){
continue;
}
CheckValue<IkReal> x4306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4304))+(((-1.0)*r20*sj5)))),-1);
if(!x4306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4305.value)+(((1.5707963267949)*(x4306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4307=IKcos(j4);
IkReal x4308=IKsin(j4);
IkReal x4309=(cj5*r00);
IkReal x4310=(cj5*r10);
IkReal x4311=(r21*sj5);
IkReal x4312=(cj5*r20);
IkReal x4313=((1.0)*x4307);
IkReal x4314=((1.0)*x4308);
IkReal x4315=(sj5*x4308);
IkReal x4316=(sj5*x4307);
evalcond[0]=(((r02*x4308))+((r01*x4316))+(((-1.0)*x4309*x4313)));
evalcond[1]=((((-1.0)*x4312*x4314))+(((-1.0)*r22*x4313))+((x4308*x4311)));
evalcond[2]=(((r11*x4315))+(((-1.0)*x4310*x4314))+(((-1.0)*r12*x4313)));
evalcond[3]=((1.0)+((r01*x4315))+(((-1.0)*x4309*x4314))+(((-1.0)*r02*x4313)));
evalcond[4]=(((cj2*sj1))+((r12*x4308))+((cj1*sj2))+((r11*x4316))+(((-1.0)*x4310*x4313)));
evalcond[5]=((((-1.0)*x4312*x4313))+((r22*x4308))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4307*x4311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4317 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4317.valid){
continue;
}
CheckValue<IkReal> x4318=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4317.value)+(((1.5707963267949)*(x4318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4319=IKcos(j4);
IkReal x4320=IKsin(j4);
IkReal x4321=(cj5*r00);
IkReal x4322=(cj5*r10);
IkReal x4323=(r21*sj5);
IkReal x4324=(cj5*r20);
IkReal x4325=((1.0)*x4319);
IkReal x4326=((1.0)*x4320);
IkReal x4327=(sj5*x4320);
IkReal x4328=(sj5*x4319);
evalcond[0]=((((-1.0)*x4321*x4325))+((r02*x4320))+((r01*x4328)));
evalcond[1]=((((-1.0)*x4324*x4326))+((x4320*x4323))+(((-1.0)*r22*x4325)));
evalcond[2]=((((-1.0)*r12*x4325))+(((-1.0)*x4322*x4326))+((r11*x4327)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4325))+(((-1.0)*x4321*x4326))+((r01*x4327)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4320))+(((-1.0)*x4322*x4325))+((r11*x4328)));
evalcond[5]=(((x4319*x4323))+(((-1.0)*x4324*x4325))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4329=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4329;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4330=((1.0)*cj5);
IkReal x4331=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4330)));
j4eval[0]=x4331;
j4eval[1]=((IKabs(((((-1.0)*r20*x4330))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4332=cj5*cj5;
IkReal x4333=r01*r01;
IkReal x4334=(cj5*r00);
IkReal x4335=(r01*sj5);
IkReal x4336=((((-2.0)*x4334*x4335))+((x4332*(r00*r00)))+(((-1.0)*x4332*x4333))+x4333+(r02*r02));
j4eval[0]=x4336;
j4eval[1]=IKsign(x4336);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4334))+x4335))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4337=cj5*cj5;
IkReal x4338=r01*r01;
IkReal x4339=(r01*sj5);
IkReal x4340=(cj5*r00);
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(IKsign((((x4337*(r00*r00)))+(((-2.0)*x4339*x4340))+(((-1.0)*x4337*x4338))+x4338+(r02*r02))),-1);
if(!x4341.valid){
continue;
}
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal((x4339+(((-1.0)*x4340)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4341.value)))+(x4342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4343=IKcos(j4);
IkReal x4344=IKsin(j4);
IkReal x4345=(cj5*r00);
IkReal x4346=(cj5*r10);
IkReal x4347=(r21*sj5);
IkReal x4348=((1.0)*cj2);
IkReal x4349=(cj5*r20);
IkReal x4350=((1.0)*x4343);
IkReal x4351=((1.0)*x4344);
IkReal x4352=(sj5*x4344);
IkReal x4353=(sj5*x4343);
evalcond[0]=((((-1.0)*x4345*x4350))+((r02*x4344))+((r01*x4353)));
evalcond[1]=(((x4344*x4347))+(((-1.0)*x4349*x4351))+(((-1.0)*r22*x4350)));
evalcond[2]=((((-1.0)*r12*x4350))+((r11*x4352))+(((-1.0)*x4346*x4351)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4350))+(((-1.0)*x4345*x4351))+((r01*x4352)));
evalcond[4]=(((x4343*x4347))+(((-1.0)*x4349*x4350))+((sj1*sj2))+((r22*x4344))+(((-1.0)*cj1*x4348)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x4344))+((r11*x4353))+(((-1.0)*sj1*x4348))+(((-1.0)*x4346*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4354=((1.0)*cj5);
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4354)))),-1);
if(!x4355.valid){
continue;
}
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4355.value)))+(x4356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4357=IKcos(j4);
IkReal x4358=IKsin(j4);
IkReal x4359=(cj5*r00);
IkReal x4360=(cj5*r10);
IkReal x4361=(r21*sj5);
IkReal x4362=((1.0)*cj2);
IkReal x4363=(cj5*r20);
IkReal x4364=((1.0)*x4357);
IkReal x4365=((1.0)*x4358);
IkReal x4366=(sj5*x4358);
IkReal x4367=(sj5*x4357);
evalcond[0]=((((-1.0)*x4359*x4364))+((r01*x4367))+((r02*x4358)));
evalcond[1]=((((-1.0)*r22*x4364))+((x4358*x4361))+(((-1.0)*x4363*x4365)));
evalcond[2]=((((-1.0)*x4360*x4365))+((r11*x4366))+(((-1.0)*r12*x4364)));
evalcond[3]=((-1.0)+(((-1.0)*x4359*x4365))+((r01*x4366))+(((-1.0)*r02*x4364)));
evalcond[4]=((((-1.0)*cj1*x4362))+((x4357*x4361))+((r22*x4358))+((sj1*sj2))+(((-1.0)*x4363*x4364)));
evalcond[5]=((((-1.0)*x4360*x4364))+((r11*x4367))+(((-1.0)*sj1*x4362))+(((-1.0)*cj1*sj2))+((r12*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4368=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4368.value)))+(x4369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4370=IKcos(j4);
IkReal x4371=IKsin(j4);
IkReal x4372=(cj5*r00);
IkReal x4373=(cj5*r10);
IkReal x4374=(r21*sj5);
IkReal x4375=((1.0)*cj2);
IkReal x4376=(cj5*r20);
IkReal x4377=((1.0)*x4370);
IkReal x4378=((1.0)*x4371);
IkReal x4379=(sj5*x4371);
IkReal x4380=(sj5*x4370);
evalcond[0]=(((r02*x4371))+((r01*x4380))+(((-1.0)*x4372*x4377)));
evalcond[1]=(((x4371*x4374))+(((-1.0)*r22*x4377))+(((-1.0)*x4376*x4378)));
evalcond[2]=(((r11*x4379))+(((-1.0)*x4373*x4378))+(((-1.0)*r12*x4377)));
evalcond[3]=((-1.0)+((r01*x4379))+(((-1.0)*r02*x4377))+(((-1.0)*x4372*x4378)));
evalcond[4]=(((x4370*x4374))+((r22*x4371))+(((-1.0)*x4376*x4377))+((sj1*sj2))+(((-1.0)*cj1*x4375)));
evalcond[5]=(((r12*x4371))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4375))+(((-1.0)*x4373*x4377))+((r11*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4382 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4382)==0){
continue;
}
IkReal x4381=pow(x4382,-0.5);
CheckValue<IkReal> x4383 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4383.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4383.value));
IkReal gconst109=((-1.0)*r11*x4381);
IkReal gconst110=(r10*x4381);
CheckValue<IkReal> x4384 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4384.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4384.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4387 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4387.valid){
continue;
}
IkReal x4385=((-1.0)*(x4387.value));
IkReal x4386=x4381;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4385;
IkReal gconst108=x4385;
IkReal gconst109=((-1.0)*r11*x4386);
IkReal gconst110=(r10*x4386);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4388=((1.0)*gconst110);
CheckValue<IkReal> x4389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4388)))),-1);
if(!x4389.valid){
continue;
}
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*r10*sj0*x4388))+((gconst109*r11*sj0))+(((-1.0)*cj0*r00*x4388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4389.value)))+(x4390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4391=IKsin(j4);
IkReal x4392=IKcos(j4);
IkReal x4393=(gconst109*r21);
IkReal x4394=(cj2*sj1);
IkReal x4395=(cj1*sj2);
IkReal x4396=((1.0)*x4392);
IkReal x4397=(gconst109*x4391);
IkReal x4398=(gconst109*x4392);
IkReal x4399=((1.0)*gconst110*x4391);
evalcond[0]=(((x4391*x4393))+(((-1.0)*r22*x4396))+(((-1.0)*r20*x4399)));
evalcond[1]=(((r01*x4397))+(((-1.0)*r02*x4396))+sj0+(((-1.0)*r00*x4399)));
evalcond[2]=((((-1.0)*r12*x4396))+(((-1.0)*r10*x4399))+((r11*x4397))+(((-1.0)*cj0)));
evalcond[3]=(((x4392*x4393))+((r22*x4391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4396)));
evalcond[4]=(((r01*x4398))+((cj0*x4394))+((cj0*x4395))+(((-1.0)*gconst110*r00*x4396))+((r02*x4391)));
evalcond[5]=((((-1.0)*gconst110*r10*x4396))+((r11*x4398))+((sj0*x4394))+((sj0*x4395))+((r12*x4391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x4400.valid){
continue;
}
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4400.value)))+(x4401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4402=IKsin(j4);
IkReal x4403=IKcos(j4);
IkReal x4404=(gconst109*r21);
IkReal x4405=(cj2*sj1);
IkReal x4406=(cj1*sj2);
IkReal x4407=((1.0)*x4403);
IkReal x4408=(gconst109*x4402);
IkReal x4409=(gconst109*x4403);
IkReal x4410=((1.0)*gconst110*x4402);
evalcond[0]=(((x4402*x4404))+(((-1.0)*r20*x4410))+(((-1.0)*r22*x4407)));
evalcond[1]=(sj0+(((-1.0)*r00*x4410))+((r01*x4408))+(((-1.0)*r02*x4407)));
evalcond[2]=(((r11*x4408))+(((-1.0)*r10*x4410))+(((-1.0)*r12*x4407))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4402))+((x4403*x4404))+(((-1.0)*gconst110*r20*x4407))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*gconst110*r00*x4407))+((r01*x4409))+((cj0*x4406))+((cj0*x4405))+((r02*x4402)));
evalcond[5]=(((r11*x4409))+(((-1.0)*gconst110*r10*x4407))+((r12*x4402))+((sj0*x4406))+((sj0*x4405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4412 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4412)==0){
continue;
}
IkReal x4411=pow(x4412,-0.5);
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4413.value))));
IkReal gconst112=((1.0)*r11*x4411);
IkReal gconst113=((-1.0)*r10*x4411);
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4414.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
IkReal x4415=((1.0)*(x4417.value));
IkReal x4416=x4411;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4415)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4415)));
IkReal gconst112=((1.0)*r11*x4416);
IkReal gconst113=((-1.0)*r10*x4416);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4420 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4420.valid){
continue;
}
IkReal x4418=((1.0)*(x4420.value));
IkReal x4419=x4411;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4418)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4418)));
IkReal gconst112=((1.0)*r11*x4419);
IkReal gconst113=((-1.0)*r10*x4419);
IkReal x4421=r12*r12;
IkReal x4422=(cj0*r02);
IkReal x4423=x4411;
IkReal x4424=(sj0*x4423);
j4eval[0]=((IKabs((((r12*x4422*x4423))+((x4421*x4424))+(((-1.0)*x4424)))))+(IKabs((x4422+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
IkReal x4425=((1.0)*(x4427.value));
IkReal x4426=x4411;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4425)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4425)));
IkReal gconst112=((1.0)*r11*x4426);
IkReal gconst113=((-1.0)*r10*x4426);
IkReal x4428=r12*r12;
IkReal x4429=(sj1*sj2);
IkReal x4430=((1.0)+(((-1.0)*x4428)));
IkReal x4431=((1.0)*cj1*cj2);
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(x4430,-1);
if(!x4438.valid){
continue;
}
IkReal x4432=x4438.value;
CheckValue<IkReal> x4439=IKPowWithIntegerCheck(((-1.0)+x4428),-1);
if(!x4439.valid){
continue;
}
IkReal x4433=x4439.value;
IkReal x4434=((1.0)*x4432);
if((x4430) < -0.00001)
continue;
IkReal x4435=IKsqrt(x4430);
IkReal x4436=(r12*r22*x4433*x4435);
IkReal x4437=((((-1.0)*x4434*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4432))+(((-1.0)*x4434*(r10*r10)*(r20*r20))));
j4eval[0]=x4437;
j4eval[1]=((IKabs((((x4429*x4436))+(((-1.0)*x4431*x4436)))))+(IKabs((((r22*x4429))+(((-1.0)*r22*x4431))))));
j4eval[2]=IKsign(x4437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4440=(sj1*sj2);
IkReal x4441=(gconst112*r21);
IkReal x4442=(gconst113*r20);
IkReal x4443=(cj1*cj2);
CheckValue<IkReal> x4444=IKPowWithIntegerCheck(IKsign(((((2.0)*x4441*x4442))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4442*x4442)))+(((-1.0)*(x4441*x4441))))),-1);
if(!x4444.valid){
continue;
}
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4443))+((r22*x4440)))),IkReal((((x4440*x4441))+((x4442*x4443))+(((-1.0)*x4440*x4442))+(((-1.0)*x4441*x4443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4444.value)))+(x4445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4446=IKsin(j4);
IkReal x4447=IKcos(j4);
IkReal x4448=(cj2*sj1);
IkReal x4449=(gconst113*r20);
IkReal x4450=(gconst112*r21);
IkReal x4451=(gconst113*r00);
IkReal x4452=(gconst113*r10);
IkReal x4453=(cj1*sj2);
IkReal x4454=((1.0)*x4447);
IkReal x4455=((1.0)*x4446);
IkReal x4456=(gconst112*x4447);
IkReal x4457=(gconst112*x4446);
evalcond[0]=((((-1.0)*r22*x4454))+(((-1.0)*x4449*x4455))+((x4446*x4450)));
evalcond[1]=(sj0+((r01*x4457))+(((-1.0)*r02*x4454))+(((-1.0)*x4451*x4455)));
evalcond[2]=((((-1.0)*r12*x4454))+((r11*x4457))+(((-1.0)*cj0))+(((-1.0)*x4452*x4455)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4449*x4454))+((r22*x4446))+((x4447*x4450)));
evalcond[4]=(((r01*x4456))+((cj0*x4453))+((cj0*x4448))+((r02*x4446))+(((-1.0)*x4451*x4454)));
evalcond[5]=(((sj0*x4448))+((r11*x4456))+((r12*x4446))+((sj0*x4453))+(((-1.0)*x4452*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4458=((1.0)*gconst113);
CheckValue<IkReal> x4459 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x4458))+(((-1.0)*cj0*r00*x4458))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
CheckValue<IkReal> x4460=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x4458)))),-1);
if(!x4460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4459.value)+(((1.5707963267949)*(x4460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4461=IKsin(j4);
IkReal x4462=IKcos(j4);
IkReal x4463=(cj2*sj1);
IkReal x4464=(gconst113*r20);
IkReal x4465=(gconst112*r21);
IkReal x4466=(gconst113*r00);
IkReal x4467=(gconst113*r10);
IkReal x4468=(cj1*sj2);
IkReal x4469=((1.0)*x4462);
IkReal x4470=((1.0)*x4461);
IkReal x4471=(gconst112*x4462);
IkReal x4472=(gconst112*x4461);
evalcond[0]=((((-1.0)*r22*x4469))+(((-1.0)*x4464*x4470))+((x4461*x4465)));
evalcond[1]=(sj0+(((-1.0)*r02*x4469))+((r01*x4472))+(((-1.0)*x4466*x4470)));
evalcond[2]=((((-1.0)*r12*x4469))+(((-1.0)*x4467*x4470))+(((-1.0)*cj0))+((r11*x4472)));
evalcond[3]=((((-1.0)*x4464*x4469))+((r22*x4461))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4462*x4465)));
evalcond[4]=((((-1.0)*x4466*x4469))+((r01*x4471))+((cj0*x4468))+((cj0*x4463))+((r02*x4461)));
evalcond[5]=(((r12*x4461))+((sj0*x4463))+((sj0*x4468))+((r11*x4471))+(((-1.0)*x4467*x4469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4473.value)))+(x4474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4475=IKsin(j4);
IkReal x4476=IKcos(j4);
IkReal x4477=(cj2*sj1);
IkReal x4478=(gconst113*r20);
IkReal x4479=(gconst112*r21);
IkReal x4480=(gconst113*r00);
IkReal x4481=(gconst113*r10);
IkReal x4482=(cj1*sj2);
IkReal x4483=((1.0)*x4476);
IkReal x4484=((1.0)*x4475);
IkReal x4485=(gconst112*x4476);
IkReal x4486=(gconst112*x4475);
evalcond[0]=((((-1.0)*x4478*x4484))+((x4475*x4479))+(((-1.0)*r22*x4483)));
evalcond[1]=(sj0+(((-1.0)*x4480*x4484))+((r01*x4486))+(((-1.0)*r02*x4483)));
evalcond[2]=((((-1.0)*x4481*x4484))+((r11*x4486))+(((-1.0)*r12*x4483))+(((-1.0)*cj0)));
evalcond[3]=(((x4476*x4479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4478*x4483))+((r22*x4475)));
evalcond[4]=(((cj0*x4482))+((cj0*x4477))+(((-1.0)*x4480*x4483))+((r02*x4475))+((r01*x4485)));
evalcond[5]=((((-1.0)*x4481*x4483))+((r11*x4485))+((sj0*x4482))+((sj0*x4477))+((r12*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4487=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4487;
j4eval[1]=IKsign(x4487);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4488=((1.0)*cj5);
IkReal x4489=((((-1.0)*r21*x4488))+(((-1.0)*r20*sj5)));
j4eval[0]=x4489;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4488))))));
j4eval[2]=IKsign(x4489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4490=cj5*cj5;
IkReal x4491=r11*r11;
IkReal x4492=(r11*sj5);
IkReal x4493=(cj5*r10);
IkReal x4494=((r12*r12)+(((-2.0)*x4492*x4493))+x4491+(((-1.0)*x4490*x4491))+((x4490*(r10*r10))));
j4eval[0]=x4494;
j4eval[1]=IKsign(x4494);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4493))+x4492))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4495=cj5*cj5;
IkReal x4496=r11*r11;
IkReal x4497=(cj5*r10);
IkReal x4498=(r11*sj5);
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal(((((-1.0)*x4497))+x4498)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
CheckValue<IkReal> x4500=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4497*x4498))+(r12*r12)+x4496+((x4495*(r10*r10)))+(((-1.0)*x4495*x4496)))),-1);
if(!x4500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4499.value)+(((1.5707963267949)*(x4500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4501=IKcos(j4);
IkReal x4502=IKsin(j4);
IkReal x4503=(cj5*r00);
IkReal x4504=(cj5*r10);
IkReal x4505=(r21*sj5);
IkReal x4506=(cj5*r20);
IkReal x4507=((1.0)*x4501);
IkReal x4508=((1.0)*x4502);
IkReal x4509=(sj5*x4502);
IkReal x4510=(sj5*x4501);
evalcond[0]=(((r12*x4502))+((r11*x4510))+(((-1.0)*x4504*x4507)));
evalcond[1]=((((-1.0)*x4506*x4508))+((x4502*x4505))+(((-1.0)*r22*x4507)));
evalcond[2]=((((-1.0)*r02*x4507))+(((-1.0)*x4503*x4508))+((r01*x4509)));
evalcond[3]=((-1.0)+((r11*x4509))+(((-1.0)*r12*x4507))+(((-1.0)*x4504*x4508)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4503*x4507))+((r02*x4502))+((r01*x4510)));
evalcond[5]=((((-1.0)*x4506*x4507))+((r22*x4502))+((x4501*x4505))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4511=((1.0)*cj5);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4511))+(((-1.0)*r20*sj5)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKcos(j4);
IkReal x4515=IKsin(j4);
IkReal x4516=(cj5*r00);
IkReal x4517=(cj5*r10);
IkReal x4518=(r21*sj5);
IkReal x4519=(cj5*r20);
IkReal x4520=((1.0)*x4514);
IkReal x4521=((1.0)*x4515);
IkReal x4522=(sj5*x4515);
IkReal x4523=(sj5*x4514);
evalcond[0]=(((r11*x4523))+(((-1.0)*x4517*x4520))+((r12*x4515)));
evalcond[1]=((((-1.0)*r22*x4520))+(((-1.0)*x4519*x4521))+((x4515*x4518)));
evalcond[2]=(((r01*x4522))+(((-1.0)*x4516*x4521))+(((-1.0)*r02*x4520)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4520))+((r11*x4522))+(((-1.0)*x4517*x4521)));
evalcond[4]=(((r02*x4515))+((r01*x4523))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4516*x4520)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4519*x4520))+((r22*x4515))+((x4514*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4524 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4524.valid){
continue;
}
CheckValue<IkReal> x4525=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4524.value)+(((1.5707963267949)*(x4525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4526=IKcos(j4);
IkReal x4527=IKsin(j4);
IkReal x4528=(cj5*r00);
IkReal x4529=(cj5*r10);
IkReal x4530=(r21*sj5);
IkReal x4531=(cj5*r20);
IkReal x4532=((1.0)*x4526);
IkReal x4533=((1.0)*x4527);
IkReal x4534=(sj5*x4527);
IkReal x4535=(sj5*x4526);
evalcond[0]=(((r12*x4527))+(((-1.0)*x4529*x4532))+((r11*x4535)));
evalcond[1]=(((x4527*x4530))+(((-1.0)*x4531*x4533))+(((-1.0)*r22*x4532)));
evalcond[2]=(((r01*x4534))+(((-1.0)*x4528*x4533))+(((-1.0)*r02*x4532)));
evalcond[3]=((-1.0)+(((-1.0)*x4529*x4533))+(((-1.0)*r12*x4532))+((r11*x4534)));
evalcond[4]=(((cj2*sj1))+((r01*x4535))+((cj1*sj2))+(((-1.0)*x4528*x4532))+((r02*x4527)));
evalcond[5]=(((x4526*x4530))+(((-1.0)*x4531*x4532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4536=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4536;
j4eval[1]=IKsign(x4536);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4537=((1.0)*cj5);
IkReal x4538=((((-1.0)*r01*x4537))+(((-1.0)*r00*sj5)));
j4eval[0]=x4538;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4537)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4539=(sj1*sj2);
IkReal x4540=(cj5*r10);
IkReal x4541=(r11*sj5);
IkReal x4542=(cj1*cj2);
IkReal x4543=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4543;
j4eval[1]=((IKabs(((((-1.0)*r12*x4539))+((r12*x4542)))))+(IKabs(((((-1.0)*x4541*x4542))+((x4540*x4542))+(((-1.0)*x4539*x4540))+((x4539*x4541))))));
j4eval[2]=IKsign(x4543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4544=(sj1*sj2);
IkReal x4545=(cj5*r10);
IkReal x4546=(r11*sj5);
IkReal x4547=(cj1*cj2);
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal((((x4545*x4547))+((x4544*x4546))+(((-1.0)*x4546*x4547))+(((-1.0)*x4544*x4545)))),IkReal((((r12*x4547))+(((-1.0)*r12*x4544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4548.value)))+(x4549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKcos(j4);
IkReal x4551=IKsin(j4);
IkReal x4552=(cj5*r00);
IkReal x4553=(cj5*r10);
IkReal x4554=(r21*sj5);
IkReal x4555=((1.0)*cj2);
IkReal x4556=(cj5*r20);
IkReal x4557=((1.0)*x4550);
IkReal x4558=((1.0)*x4551);
IkReal x4559=(sj5*x4551);
IkReal x4560=(sj5*x4550);
evalcond[0]=(((r11*x4560))+(((-1.0)*x4553*x4557))+((r12*x4551)));
evalcond[1]=((((-1.0)*x4556*x4558))+((x4551*x4554))+(((-1.0)*r22*x4557)));
evalcond[2]=(((r01*x4559))+(((-1.0)*x4552*x4558))+(((-1.0)*r02*x4557)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4557))+(((-1.0)*x4553*x4558))+((r11*x4559)));
evalcond[4]=((((-1.0)*x4556*x4557))+((x4550*x4554))+(((-1.0)*cj1*x4555))+((sj1*sj2))+((r22*x4551)));
evalcond[5]=((((-1.0)*x4552*x4557))+(((-1.0)*cj1*sj2))+((r02*x4551))+((r01*x4560))+(((-1.0)*sj1*x4555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4561=((1.0)*cj5);
CheckValue<IkReal> x4562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4561))+(((-1.0)*r00*sj5)))),-1);
if(!x4562.valid){
continue;
}
CheckValue<IkReal> x4563 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4561))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4562.value)))+(x4563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4564=IKcos(j4);
IkReal x4565=IKsin(j4);
IkReal x4566=(cj5*r00);
IkReal x4567=(cj5*r10);
IkReal x4568=(r21*sj5);
IkReal x4569=((1.0)*cj2);
IkReal x4570=(cj5*r20);
IkReal x4571=((1.0)*x4564);
IkReal x4572=((1.0)*x4565);
IkReal x4573=(sj5*x4565);
IkReal x4574=(sj5*x4564);
evalcond[0]=((((-1.0)*x4567*x4571))+((r12*x4565))+((r11*x4574)));
evalcond[1]=(((x4565*x4568))+(((-1.0)*x4570*x4572))+(((-1.0)*r22*x4571)));
evalcond[2]=((((-1.0)*x4566*x4572))+(((-1.0)*r02*x4571))+((r01*x4573)));
evalcond[3]=((1.0)+(((-1.0)*x4567*x4572))+((r11*x4573))+(((-1.0)*r12*x4571)));
evalcond[4]=(((r22*x4565))+(((-1.0)*x4570*x4571))+(((-1.0)*cj1*x4569))+((sj1*sj2))+((x4564*x4568)));
evalcond[5]=((((-1.0)*sj1*x4569))+(((-1.0)*x4566*x4571))+((r02*x4565))+(((-1.0)*cj1*sj2))+((r01*x4574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4575=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4575.valid){
continue;
}
CheckValue<IkReal> x4576 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4575.value)))+(x4576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4577=IKcos(j4);
IkReal x4578=IKsin(j4);
IkReal x4579=(cj5*r00);
IkReal x4580=(cj5*r10);
IkReal x4581=(r21*sj5);
IkReal x4582=((1.0)*cj2);
IkReal x4583=(cj5*r20);
IkReal x4584=((1.0)*x4577);
IkReal x4585=((1.0)*x4578);
IkReal x4586=(sj5*x4578);
IkReal x4587=(sj5*x4577);
evalcond[0]=((((-1.0)*x4580*x4584))+((r12*x4578))+((r11*x4587)));
evalcond[1]=(((x4578*x4581))+(((-1.0)*r22*x4584))+(((-1.0)*x4583*x4585)));
evalcond[2]=((((-1.0)*x4579*x4585))+(((-1.0)*r02*x4584))+((r01*x4586)));
evalcond[3]=((1.0)+(((-1.0)*x4580*x4585))+((r11*x4586))+(((-1.0)*r12*x4584)));
evalcond[4]=(((x4577*x4581))+(((-1.0)*x4583*x4584))+((r22*x4578))+((sj1*sj2))+(((-1.0)*cj1*x4582)));
evalcond[5]=((((-1.0)*x4579*x4584))+((r02*x4578))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4582))+((r01*x4587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4588=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4588);
rxp0_2=(py*r00);
rxp1_0=(r21*x4588);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4589=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4589);
rxp0_2=(py*r00);
rxp1_0=(r21*x4589);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4590=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4590);
rxp0_2=(py*r00);
rxp1_0=(r21*x4590);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4593=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x4593.valid){
continue;
}
IkReal x4591=x4593.value;
IkReal x4592=((1.0)*cj0*x4591);
cj4array[0]=((((-1.0)*cj1*sj2*x4592))+(((-1.0)*cj2*sj1*x4592)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4594=IKsin(j4);
IkReal x4595=IKcos(j4);
IkReal x4596=(r21*sj5);
IkReal x4597=((1.0)*x4595);
IkReal x4598=((1.0)*cj5*x4594);
evalcond[0]=(r12*x4594);
evalcond[1]=((((-1.0)*r12*x4597))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x4598))+((x4594*x4596)));
evalcond[3]=((((-1.0)*r00*x4598))+((r01*sj5*x4594)));
evalcond[4]=(((x4595*x4596))+(((-1.0)*cj5*r20*x4597))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4600=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4600.valid){
continue;
}
IkReal x4599=x4600.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4599))+((cj1*cj2*x4599)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4601=IKsin(j4);
IkReal x4602=IKcos(j4);
IkReal x4603=(r01*sj5);
IkReal x4604=((1.0)*cj5*r00);
evalcond[0]=(r12*x4601);
evalcond[1]=((((-1.0)*r12*x4602))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x4601))+(((-1.0)*cj5*r20*x4601)));
evalcond[3]=(((x4601*x4603))+(((-1.0)*x4601*x4604)));
evalcond[4]=((((-1.0)*x4602*x4604))+((cj0*cj2*sj1))+((x4602*x4603))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4605=IKPowWithIntegerCheck(r12,-1);
if(!x4605.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4605.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4606=IKsin(j4);
IkReal x4607=IKcos(j4);
IkReal x4608=(sj5*x4607);
IkReal x4609=(sj5*x4606);
IkReal x4610=((1.0)*cj5*x4606);
IkReal x4611=((1.0)*cj5*x4607);
evalcond[0]=(r12*x4606);
evalcond[1]=((((-1.0)*r20*x4610))+((r21*x4609)));
evalcond[2]=(((r01*x4609))+(((-1.0)*r00*x4610)));
evalcond[3]=((((-1.0)*r20*x4611))+((r21*x4608))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x4608))+(((-1.0)*r00*x4611))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4612=((1.0)*cj5);
CheckValue<IkReal> x4613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4612))+(((-1.0)*r20*sj5)))),-1);
if(!x4613.valid){
continue;
}
CheckValue<IkReal> x4614 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x4612))+(((-1.0)*cj0*r00*x4612))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4613.value)))+(x4614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4615=IKsin(j4);
IkReal x4616=IKcos(j4);
IkReal x4617=(cj5*r00);
IkReal x4618=(cj5*r10);
IkReal x4619=(cj2*sj1);
IkReal x4620=(r21*sj5);
IkReal x4621=(cj5*r20);
IkReal x4622=(cj1*sj2);
IkReal x4623=((1.0)*x4616);
IkReal x4624=((1.0)*x4615);
IkReal x4625=(sj5*x4615);
IkReal x4626=(sj5*x4616);
evalcond[0]=((((-1.0)*x4621*x4624))+(((-1.0)*r22*x4623))+((x4615*x4620)));
evalcond[1]=(sj0+(((-1.0)*r02*x4623))+((r01*x4625))+(((-1.0)*x4617*x4624)));
evalcond[2]=(((r11*x4625))+(((-1.0)*x4618*x4624))+(((-1.0)*r12*x4623))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4621*x4623))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4615))+((x4616*x4620)));
evalcond[4]=(((cj0*x4622))+((r02*x4615))+((r01*x4626))+((cj0*x4619))+(((-1.0)*x4617*x4623)));
evalcond[5]=(((r11*x4626))+((sj0*x4619))+(((-1.0)*x4618*x4623))+((r12*x4615))+((sj0*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4627=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4627.valid){
continue;
}
CheckValue<IkReal> x4628 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4627.value)))+(x4628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4629=IKsin(j4);
IkReal x4630=IKcos(j4);
IkReal x4631=(cj5*r00);
IkReal x4632=(cj5*r10);
IkReal x4633=(cj2*sj1);
IkReal x4634=(r21*sj5);
IkReal x4635=(cj5*r20);
IkReal x4636=(cj1*sj2);
IkReal x4637=((1.0)*x4630);
IkReal x4638=((1.0)*x4629);
IkReal x4639=(sj5*x4629);
IkReal x4640=(sj5*x4630);
evalcond[0]=((((-1.0)*x4635*x4638))+((x4629*x4634))+(((-1.0)*r22*x4637)));
evalcond[1]=(((r01*x4639))+sj0+(((-1.0)*r02*x4637))+(((-1.0)*x4631*x4638)));
evalcond[2]=(((r11*x4639))+(((-1.0)*r12*x4637))+(((-1.0)*x4632*x4638))+(((-1.0)*cj0)));
evalcond[3]=(((x4630*x4634))+(((-1.0)*x4635*x4637))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4629)));
evalcond[4]=(((r02*x4629))+(((-1.0)*x4631*x4637))+((r01*x4640))+((cj0*x4636))+((cj0*x4633)));
evalcond[5]=(((r12*x4629))+((sj0*x4633))+((sj0*x4636))+((r11*x4640))+(((-1.0)*x4632*x4637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4641=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4641.valid){
continue;
}
CheckValue<IkReal> x4642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4641.value)))+(x4642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4643=IKsin(j4);
IkReal x4644=IKcos(j4);
IkReal x4645=(cj5*r00);
IkReal x4646=(cj5*r10);
IkReal x4647=(cj2*sj1);
IkReal x4648=(r21*sj5);
IkReal x4649=(cj5*r20);
IkReal x4650=(cj1*sj2);
IkReal x4651=((1.0)*x4644);
IkReal x4652=((1.0)*x4643);
IkReal x4653=(sj5*x4643);
IkReal x4654=(sj5*x4644);
evalcond[0]=((((-1.0)*x4649*x4652))+(((-1.0)*r22*x4651))+((x4643*x4648)));
evalcond[1]=(sj0+(((-1.0)*r02*x4651))+(((-1.0)*x4645*x4652))+((r01*x4653)));
evalcond[2]=(((r11*x4653))+(((-1.0)*x4646*x4652))+(((-1.0)*r12*x4651))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4649*x4651))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4643))+((x4644*x4648)));
evalcond[4]=(((r02*x4643))+((cj0*x4650))+(((-1.0)*x4645*x4651))+((r01*x4654))+((cj0*x4647)));
evalcond[5]=(((sj0*x4650))+((r11*x4654))+((sj0*x4647))+((r12*x4643))+(((-1.0)*x4646*x4651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4655=((1.0)*cj5);
IkReal x4656=((1.0)*sj5);
IkReal x4657=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4657;
j0eval[1]=((IKabs(((((-1.0)*r00*x4656))+(((-1.0)*r01*x4655)))))+(IKabs(((((-1.0)*r11*x4655))+(((-1.0)*r10*x4656))))));
j0eval[2]=IKsign(x4657);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4658=r21*r21;
IkReal x4659=cj5*cj5;
IkReal x4660=(cj2*sj1);
IkReal x4661=(cj1*sj2);
IkReal x4662=(r21*sj5);
IkReal x4663=((1.0)*cj5*r20);
IkReal x4664=((((-1.0)*x4659*(r20*r20)))+(((-1.0)*x4658))+(((-1.0)*(r22*r22)))+((x4658*x4659))+(((2.0)*cj5*r20*x4662)));
j4eval[0]=x4664;
j4eval[1]=((IKabs(((((-1.0)*x4661*x4663))+((x4661*x4662))+(((-1.0)*x4660*x4663))+((x4660*x4662)))))+(IKabs((((r22*x4661))+((r22*x4660))))));
j4eval[2]=IKsign(x4664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4665=cj1*cj1;
IkReal x4666=(cj2*sj2);
IkReal x4667=(cj1*sj1);
j0eval[0]=((((-2.0)*x4665*x4666))+x4666+x4667+(((-1.08349267049076)*cj2*x4667))+(((-1.08349267049076)*sj2*x4665))+(((-2.0)*x4667*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4668=IKsin(j0);
IkReal x4669=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x4669))+(((0.10915)*x4668)));
evalcond[1]=((((-1.0)*py))+(((-0.81725)*x4668))+(((-0.10915)*x4669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4670=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4670;
j4eval[1]=IKsign(x4670);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4671=((1.0)*cj5);
IkReal x4672=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4671)));
j4eval[0]=x4672;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4671))))));
j4eval[2]=IKsign(x4672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4673=cj5*cj5;
IkReal x4674=((1.0)*r20);
IkReal x4675=(r01*r21);
IkReal x4676=(r21*sj5);
IkReal x4677=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4673*x4674))+(((-1.0)*x4675))+((x4673*x4675))+((cj5*r00*x4676)));
j4eval[0]=x4677;
j4eval[1]=((IKabs((((cj0*x4676))+(((-1.0)*cj0*cj5*x4674)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4678=cj5*cj5;
IkReal x4679=((1.0)*r20);
IkReal x4680=(r01*r21);
IkReal x4681=(r21*sj5);
CheckValue<IkReal> x4682=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x4681))+(((-1.0)*r02*r22))+((x4678*x4680))+(((-1.0)*x4680))+(((-1.0)*r00*x4678*x4679)))),-1);
if(!x4682.valid){
continue;
}
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4679))+((cj0*x4681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4682.value)))+(x4683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4684=IKcos(j4);
IkReal x4685=IKsin(j4);
IkReal x4686=(cj5*r00);
IkReal x4687=(cj5*r10);
IkReal x4688=(cj5*r20);
IkReal x4689=((1.0)*x4684);
IkReal x4690=((1.0)*x4685);
IkReal x4691=(sj5*x4684);
IkReal x4692=(sj5*x4685);
evalcond[0]=((((-1.0)*x4688*x4689))+((r22*x4685))+((r21*x4691)));
evalcond[1]=((((-1.0)*x4688*x4690))+((r21*x4692))+(((-1.0)*r22*x4689)));
evalcond[2]=((((-1.0)*x4686*x4689))+cj0+((r02*x4685))+((r01*x4691)));
evalcond[3]=(sj0+(((-1.0)*x4687*x4689))+((r12*x4685))+((r11*x4691)));
evalcond[4]=(sj0+(((-1.0)*x4686*x4690))+((r01*x4692))+(((-1.0)*r02*x4689)));
evalcond[5]=((((-1.0)*x4687*x4690))+((r11*x4692))+(((-1.0)*cj0))+(((-1.0)*r12*x4689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4693=((1.0)*cj5);
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4693)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4693)))),-1);
if(!x4695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4694.value)+(((1.5707963267949)*(x4695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4696=IKcos(j4);
IkReal x4697=IKsin(j4);
IkReal x4698=(cj5*r00);
IkReal x4699=(cj5*r10);
IkReal x4700=(cj5*r20);
IkReal x4701=((1.0)*x4696);
IkReal x4702=((1.0)*x4697);
IkReal x4703=(sj5*x4696);
IkReal x4704=(sj5*x4697);
evalcond[0]=((((-1.0)*x4700*x4701))+((r21*x4703))+((r22*x4697)));
evalcond[1]=((((-1.0)*x4700*x4702))+(((-1.0)*r22*x4701))+((r21*x4704)));
evalcond[2]=(((r02*x4697))+cj0+(((-1.0)*x4698*x4701))+((r01*x4703)));
evalcond[3]=(sj0+((r12*x4697))+(((-1.0)*x4699*x4701))+((r11*x4703)));
evalcond[4]=(sj0+(((-1.0)*r02*x4701))+(((-1.0)*x4698*x4702))+((r01*x4704)));
evalcond[5]=((((-1.0)*r12*x4701))+(((-1.0)*x4699*x4702))+((r11*x4704))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4705 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4705.valid){
continue;
}
CheckValue<IkReal> x4706=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4705.value)+(((1.5707963267949)*(x4706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4707=IKcos(j4);
IkReal x4708=IKsin(j4);
IkReal x4709=(cj5*r00);
IkReal x4710=(cj5*r10);
IkReal x4711=(cj5*r20);
IkReal x4712=((1.0)*x4707);
IkReal x4713=((1.0)*x4708);
IkReal x4714=(sj5*x4707);
IkReal x4715=(sj5*x4708);
evalcond[0]=(((r21*x4714))+(((-1.0)*x4711*x4712))+((r22*x4708)));
evalcond[1]=((((-1.0)*r22*x4712))+((r21*x4715))+(((-1.0)*x4711*x4713)));
evalcond[2]=((((-1.0)*x4709*x4712))+cj0+((r01*x4714))+((r02*x4708)));
evalcond[3]=(sj0+(((-1.0)*x4710*x4712))+((r11*x4714))+((r12*x4708)));
evalcond[4]=((((-1.0)*r02*x4712))+sj0+(((-1.0)*x4709*x4713))+((r01*x4715)));
evalcond[5]=((((-1.0)*x4710*x4713))+(((-1.0)*r12*x4712))+(((-1.0)*cj0))+((r11*x4715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((-2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((-2.52189136462044)*py))))+IKsqr(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((-2.52189136462044)*py))), ((((-2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4716=IKsin(j0);
IkReal x4717=IKcos(j0);
evalcond[0]=((((-0.03275)*x4717))+(((-1.0)*px))+(((0.10915)*x4716)));
evalcond[1]=((((-0.03275)*x4716))+(((-0.10915)*x4717))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4718=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4718;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4719=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4719;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4720=((1.0)*cj5);
IkReal x4721=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4720)));
j4eval[0]=x4721;
j4eval[1]=IKsign(x4721);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4720))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4722=((1.0)*cj5);
CheckValue<IkReal> x4723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4722)))),-1);
if(!x4723.valid){
continue;
}
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4722))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4723.value)))+(x4724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4725=IKcos(j4);
IkReal x4726=IKsin(j4);
IkReal x4727=((1.0)*cj0);
IkReal x4728=(cj5*r00);
IkReal x4729=(cj5*r10);
IkReal x4730=(cj5*r20);
IkReal x4731=((1.0)*x4725);
IkReal x4732=((1.0)*x4726);
IkReal x4733=(sj5*x4725);
IkReal x4734=(sj5*x4726);
evalcond[0]=((((-1.0)*x4730*x4731))+((r21*x4733))+((r22*x4726)));
evalcond[1]=((((-1.0)*x4730*x4732))+((r21*x4734))+(((-1.0)*r22*x4731)));
evalcond[2]=(sj0+(((-1.0)*x4728*x4732))+((r01*x4734))+(((-1.0)*r02*x4731)));
evalcond[3]=((((-1.0)*x4728*x4731))+(((-1.0)*x4727))+((r02*x4726))+((r01*x4733)));
evalcond[4]=(((r11*x4733))+(((-1.0)*sj0))+(((-1.0)*x4729*x4731))+((r12*x4726)));
evalcond[5]=(((r11*x4734))+(((-1.0)*r12*x4731))+(((-1.0)*x4727))+(((-1.0)*x4729*x4732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4735 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4735.valid){
continue;
}
CheckValue<IkReal> x4736=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4735.value)+(((1.5707963267949)*(x4736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4737=IKcos(j4);
IkReal x4738=IKsin(j4);
IkReal x4739=((1.0)*cj0);
IkReal x4740=(cj5*r00);
IkReal x4741=(cj5*r10);
IkReal x4742=(cj5*r20);
IkReal x4743=((1.0)*x4737);
IkReal x4744=((1.0)*x4738);
IkReal x4745=(sj5*x4737);
IkReal x4746=(sj5*x4738);
evalcond[0]=(((r22*x4738))+((r21*x4745))+(((-1.0)*x4742*x4743)));
evalcond[1]=((((-1.0)*r22*x4743))+((r21*x4746))+(((-1.0)*x4742*x4744)));
evalcond[2]=(sj0+((r01*x4746))+(((-1.0)*x4740*x4744))+(((-1.0)*r02*x4743)));
evalcond[3]=(((r01*x4745))+(((-1.0)*x4739))+((r02*x4738))+(((-1.0)*x4740*x4743)));
evalcond[4]=(((r11*x4745))+(((-1.0)*sj0))+(((-1.0)*x4741*x4743))+((r12*x4738)));
evalcond[5]=(((r11*x4746))+(((-1.0)*r12*x4743))+(((-1.0)*x4739))+(((-1.0)*x4741*x4744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4747=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4747.valid){
continue;
}
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4747.value)))+(x4748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4749=IKcos(j4);
IkReal x4750=IKsin(j4);
IkReal x4751=((1.0)*cj0);
IkReal x4752=(cj5*r00);
IkReal x4753=(cj5*r10);
IkReal x4754=(cj5*r20);
IkReal x4755=((1.0)*x4749);
IkReal x4756=((1.0)*x4750);
IkReal x4757=(sj5*x4749);
IkReal x4758=(sj5*x4750);
evalcond[0]=((((-1.0)*x4754*x4755))+((r21*x4757))+((r22*x4750)));
evalcond[1]=((((-1.0)*x4754*x4756))+(((-1.0)*r22*x4755))+((r21*x4758)));
evalcond[2]=(((r01*x4758))+sj0+(((-1.0)*x4752*x4756))+(((-1.0)*r02*x4755)));
evalcond[3]=(((r01*x4757))+(((-1.0)*x4752*x4755))+(((-1.0)*x4751))+((r02*x4750)));
evalcond[4]=(((r12*x4750))+(((-1.0)*sj0))+(((-1.0)*x4753*x4755))+((r11*x4757)));
evalcond[5]=((((-1.0)*x4753*x4756))+((r11*x4758))+(((-1.0)*r12*x4755))+(((-1.0)*x4751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4759=((1.0)*sj5);
IkReal x4760=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x4760))+(((-1.0)*r10*x4759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4759))+(((-1.0)*r01*x4760)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x4760))+(((-1.0)*r10*x4759))))+IKsqr(((((-1.0)*r00*x4759))+(((-1.0)*r01*x4760))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x4760))+(((-1.0)*r10*x4759))), ((((-1.0)*r00*x4759))+(((-1.0)*r01*x4760))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4761=IKsin(j0);
IkReal x4762=IKcos(j0);
IkReal x4763=(r00*sj5);
IkReal x4764=(r10*sj5);
IkReal x4765=(cj5*r11);
IkReal x4766=(cj5*r01);
evalcond[0]=(x4763+x4762+x4766);
evalcond[1]=(x4761+x4765+x4764);
evalcond[2]=((((0.10915)*x4761))+(((-1.0)*px))+(((-0.09465)*x4763))+(((-0.09465)*x4766)));
evalcond[3]=((((-0.10915)*x4762))+(((-1.0)*py))+(((-0.09465)*x4765))+(((-0.09465)*x4764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4767=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4767;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4768=((1.0)*cj5);
IkReal x4769=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4768)));
j4eval[0]=x4769;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4768))))));
j4eval[2]=IKsign(x4769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4770=cj5*cj5;
IkReal x4771=r01*r01;
IkReal x4772=(cj5*r00);
IkReal x4773=(r01*sj5);
IkReal x4774=((((-1.0)*x4771))+(((-1.0)*x4770*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4772*x4773))+((x4770*x4771)));
j4eval[0]=x4774;
j4eval[1]=IKsign(x4774);
j4eval[2]=((IKabs((((sj0*x4773))+(((-1.0)*sj0*x4772)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4775=cj5*cj5;
IkReal x4776=r01*r01;
IkReal x4777=(cj5*r00);
IkReal x4778=(r01*sj5);
CheckValue<IkReal> x4779 = IKatan2WithCheck(IkReal((((sj0*x4778))+(((-1.0)*sj0*x4777)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4776))+((x4775*x4776))+(((-1.0)*(r02*r02)))+(((-1.0)*x4775*(r00*r00)))+(((2.0)*x4777*x4778)))),-1);
if(!x4780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4779.value)+(((1.5707963267949)*(x4780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4781=IKcos(j4);
IkReal x4782=IKsin(j4);
IkReal x4783=(cj5*r00);
IkReal x4784=(r01*sj5);
IkReal x4785=(cj5*r10);
IkReal x4786=(cj5*r20);
IkReal x4787=((1.0)*x4781);
IkReal x4788=((1.0)*x4782);
IkReal x4789=(sj5*x4782);
IkReal x4790=(sj5*x4781);
evalcond[0]=(((r02*x4782))+(((-1.0)*x4783*x4787))+((x4781*x4784)));
evalcond[1]=(((r12*x4782))+((r11*x4790))+(((-1.0)*x4785*x4787)));
evalcond[2]=((((-1.0)*x4786*x4788))+(((-1.0)*r22*x4787))+((r21*x4789)));
evalcond[3]=((1.0)+((r21*x4790))+((r22*x4782))+(((-1.0)*x4786*x4787)));
evalcond[4]=(sj0+(((-1.0)*x4783*x4788))+(((-1.0)*r02*x4787))+((x4782*x4784)));
evalcond[5]=(((r11*x4789))+(((-1.0)*x4785*x4788))+(((-1.0)*cj0))+(((-1.0)*r12*x4787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4791=((1.0)*cj5);
CheckValue<IkReal> x4792 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4791)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4792.valid){
continue;
}
CheckValue<IkReal> x4793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4791)))),-1);
if(!x4793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4792.value)+(((1.5707963267949)*(x4793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4794=IKcos(j4);
IkReal x4795=IKsin(j4);
IkReal x4796=(cj5*r00);
IkReal x4797=(r01*sj5);
IkReal x4798=(cj5*r10);
IkReal x4799=(cj5*r20);
IkReal x4800=((1.0)*x4794);
IkReal x4801=((1.0)*x4795);
IkReal x4802=(sj5*x4795);
IkReal x4803=(sj5*x4794);
evalcond[0]=((((-1.0)*x4796*x4800))+((r02*x4795))+((x4794*x4797)));
evalcond[1]=((((-1.0)*x4798*x4800))+((r12*x4795))+((r11*x4803)));
evalcond[2]=((((-1.0)*r22*x4800))+(((-1.0)*x4799*x4801))+((r21*x4802)));
evalcond[3]=((1.0)+(((-1.0)*x4799*x4800))+((r21*x4803))+((r22*x4795)));
evalcond[4]=(sj0+((x4795*x4797))+(((-1.0)*x4796*x4801))+(((-1.0)*r02*x4800)));
evalcond[5]=((((-1.0)*x4798*x4801))+(((-1.0)*r12*x4800))+((r11*x4802))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4804 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4804.valid){
continue;
}
CheckValue<IkReal> x4805=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4804.value)+(((1.5707963267949)*(x4805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4806=IKcos(j4);
IkReal x4807=IKsin(j4);
IkReal x4808=(cj5*r00);
IkReal x4809=(r01*sj5);
IkReal x4810=(cj5*r10);
IkReal x4811=(cj5*r20);
IkReal x4812=((1.0)*x4806);
IkReal x4813=((1.0)*x4807);
IkReal x4814=(sj5*x4807);
IkReal x4815=(sj5*x4806);
evalcond[0]=(((r02*x4807))+(((-1.0)*x4808*x4812))+((x4806*x4809)));
evalcond[1]=(((r11*x4815))+((r12*x4807))+(((-1.0)*x4810*x4812)));
evalcond[2]=((((-1.0)*x4811*x4813))+((r21*x4814))+(((-1.0)*r22*x4812)));
evalcond[3]=((1.0)+(((-1.0)*x4811*x4812))+((r21*x4815))+((r22*x4807)));
evalcond[4]=(sj0+(((-1.0)*x4808*x4813))+(((-1.0)*r02*x4812))+((x4807*x4809)));
evalcond[5]=(((r11*x4814))+(((-1.0)*x4810*x4813))+(((-1.0)*r12*x4812))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4816=IKsin(j0);
IkReal x4817=IKcos(j0);
evalcond[0]=((((0.39225)*x4817))+(((-1.0)*px))+(((0.10915)*x4816)));
evalcond[1]=((((0.39225)*x4816))+(((-0.10915)*x4817))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4818=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4818;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4819=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4819;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4820=((1.0)*cj5);
IkReal x4821=((((-1.0)*r01*x4820))+(((-1.0)*r00*sj5)));
j4eval[0]=x4821;
j4eval[1]=IKsign(x4821);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4820))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4822=((1.0)*cj5);
CheckValue<IkReal> x4823 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4822))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4823.valid){
continue;
}
CheckValue<IkReal> x4824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4822))+(((-1.0)*r00*sj5)))),-1);
if(!x4824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4823.value)+(((1.5707963267949)*(x4824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4825=IKcos(j4);
IkReal x4826=IKsin(j4);
IkReal x4827=((1.0)*cj0);
IkReal x4828=(cj5*r00);
IkReal x4829=(cj5*r10);
IkReal x4830=(cj5*r20);
IkReal x4831=((1.0)*x4825);
IkReal x4832=((1.0)*x4826);
IkReal x4833=(sj5*x4825);
IkReal x4834=(sj5*x4826);
evalcond[0]=(((r22*x4826))+(((-1.0)*x4830*x4831))+((r21*x4833)));
evalcond[1]=((((-1.0)*x4830*x4832))+(((-1.0)*r22*x4831))+((r21*x4834)));
evalcond[2]=(((r01*x4834))+sj0+(((-1.0)*r02*x4831))+(((-1.0)*x4828*x4832)));
evalcond[3]=(((r01*x4833))+(((-1.0)*x4827))+((r02*x4826))+(((-1.0)*x4828*x4831)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4833))+(((-1.0)*x4829*x4831))+((r12*x4826)));
evalcond[5]=(((r11*x4834))+(((-1.0)*x4827))+(((-1.0)*r12*x4831))+(((-1.0)*x4829*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4835.value)+(((1.5707963267949)*(x4836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4837=IKcos(j4);
IkReal x4838=IKsin(j4);
IkReal x4839=((1.0)*cj0);
IkReal x4840=(cj5*r00);
IkReal x4841=(cj5*r10);
IkReal x4842=(cj5*r20);
IkReal x4843=((1.0)*x4837);
IkReal x4844=((1.0)*x4838);
IkReal x4845=(sj5*x4837);
IkReal x4846=(sj5*x4838);
evalcond[0]=((((-1.0)*x4842*x4843))+((r22*x4838))+((r21*x4845)));
evalcond[1]=((((-1.0)*x4842*x4844))+((r21*x4846))+(((-1.0)*r22*x4843)));
evalcond[2]=(sj0+(((-1.0)*r02*x4843))+(((-1.0)*x4840*x4844))+((r01*x4846)));
evalcond[3]=((((-1.0)*x4840*x4843))+(((-1.0)*x4839))+((r01*x4845))+((r02*x4838)));
evalcond[4]=(((r12*x4838))+(((-1.0)*sj0))+(((-1.0)*x4841*x4843))+((r11*x4845)));
evalcond[5]=((((-1.0)*x4841*x4844))+((r11*x4846))+(((-1.0)*x4839))+(((-1.0)*r12*x4843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4847=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4847.valid){
continue;
}
CheckValue<IkReal> x4848 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4847.value)))+(x4848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4849=IKcos(j4);
IkReal x4850=IKsin(j4);
IkReal x4851=((1.0)*cj0);
IkReal x4852=(cj5*r00);
IkReal x4853=(cj5*r10);
IkReal x4854=(cj5*r20);
IkReal x4855=((1.0)*x4849);
IkReal x4856=((1.0)*x4850);
IkReal x4857=(sj5*x4849);
IkReal x4858=(sj5*x4850);
evalcond[0]=(((r21*x4857))+((r22*x4850))+(((-1.0)*x4854*x4855)));
evalcond[1]=(((r21*x4858))+(((-1.0)*r22*x4855))+(((-1.0)*x4854*x4856)));
evalcond[2]=(sj0+((r01*x4858))+(((-1.0)*r02*x4855))+(((-1.0)*x4852*x4856)));
evalcond[3]=(((r01*x4857))+(((-1.0)*x4851))+(((-1.0)*x4852*x4855))+((r02*x4850)));
evalcond[4]=((((-1.0)*x4853*x4855))+(((-1.0)*sj0))+((r12*x4850))+((r11*x4857)));
evalcond[5]=((((-1.0)*x4853*x4856))+(((-1.0)*r12*x4855))+(((-1.0)*x4851))+((r11*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4859=IKsin(j0);
IkReal x4860=IKcos(j0);
IkReal x4861=(r00*sj5);
IkReal x4862=(r10*sj5);
IkReal x4863=(cj5*r11);
IkReal x4864=(cj5*r01);
evalcond[0]=((((-1.0)*x4860))+x4861+x4864);
evalcond[1]=((((-1.0)*x4859))+x4862+x4863);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x4861))+(((-0.09465)*x4864))+(((0.10915)*x4859)));
evalcond[3]=((((-0.10915)*x4860))+(((-1.0)*py))+(((-0.09465)*x4862))+(((-0.09465)*x4863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4865=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4865;
j4eval[1]=IKsign(x4865);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4866=((1.0)*cj5);
IkReal x4867=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4866)));
j4eval[0]=x4867;
j4eval[1]=IKsign(x4867);
j4eval[2]=((IKabs(((((-1.0)*r00*x4866))+((r01*sj5)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4868=cj5*cj5;
IkReal x4869=r01*r01;
IkReal x4870=(cj5*r00);
IkReal x4871=(r01*sj5);
IkReal x4872=((((-1.0)*(r02*r02)))+((x4868*x4869))+(((-1.0)*x4868*(r00*r00)))+(((-1.0)*x4869))+(((2.0)*x4870*x4871)));
j4eval[0]=x4872;
j4eval[1]=IKsign(x4872);
j4eval[2]=((IKabs((((sj0*x4871))+(((-1.0)*sj0*x4870)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4873=cj5*cj5;
IkReal x4874=r01*r01;
IkReal x4875=(cj5*r00);
IkReal x4876=(r01*sj5);
CheckValue<IkReal> x4877 = IKatan2WithCheck(IkReal((((sj0*x4876))+(((-1.0)*sj0*x4875)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4877.valid){
continue;
}
CheckValue<IkReal> x4878=IKPowWithIntegerCheck(IKsign(((((2.0)*x4875*x4876))+(((-1.0)*(r02*r02)))+((x4873*x4874))+(((-1.0)*x4874))+(((-1.0)*x4873*(r00*r00))))),-1);
if(!x4878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4877.value)+(((1.5707963267949)*(x4878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4879=IKcos(j4);
IkReal x4880=IKsin(j4);
IkReal x4881=(cj5*r00);
IkReal x4882=(r01*sj5);
IkReal x4883=(cj5*r10);
IkReal x4884=(cj5*r20);
IkReal x4885=((1.0)*x4879);
IkReal x4886=((1.0)*x4880);
IkReal x4887=(sj5*x4880);
IkReal x4888=(sj5*x4879);
evalcond[0]=(((r02*x4880))+(((-1.0)*x4881*x4885))+((x4879*x4882)));
evalcond[1]=(((r12*x4880))+((r11*x4888))+(((-1.0)*x4883*x4885)));
evalcond[2]=((((-1.0)*x4884*x4886))+(((-1.0)*r22*x4885))+((r21*x4887)));
evalcond[3]=((-1.0)+(((-1.0)*x4884*x4885))+((r22*x4880))+((r21*x4888)));
evalcond[4]=(sj0+(((-1.0)*x4881*x4886))+(((-1.0)*r02*x4885))+((x4880*x4882)));
evalcond[5]=(((r11*x4887))+(((-1.0)*r12*x4885))+(((-1.0)*x4883*x4886))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4889=((1.0)*cj5);
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4889)))),-1);
if(!x4890.valid){
continue;
}
CheckValue<IkReal> x4891 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x4889)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4890.value)))+(x4891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4892=IKcos(j4);
IkReal x4893=IKsin(j4);
IkReal x4894=(cj5*r00);
IkReal x4895=(r01*sj5);
IkReal x4896=(cj5*r10);
IkReal x4897=(cj5*r20);
IkReal x4898=((1.0)*x4892);
IkReal x4899=((1.0)*x4893);
IkReal x4900=(sj5*x4893);
IkReal x4901=(sj5*x4892);
evalcond[0]=(((r02*x4893))+((x4892*x4895))+(((-1.0)*x4894*x4898)));
evalcond[1]=(((r12*x4893))+((r11*x4901))+(((-1.0)*x4896*x4898)));
evalcond[2]=(((r21*x4900))+(((-1.0)*x4897*x4899))+(((-1.0)*r22*x4898)));
evalcond[3]=((-1.0)+((r21*x4901))+(((-1.0)*x4897*x4898))+((r22*x4893)));
evalcond[4]=(sj0+(((-1.0)*r02*x4898))+(((-1.0)*x4894*x4899))+((x4893*x4895)));
evalcond[5]=((((-1.0)*r12*x4898))+((r11*x4900))+(((-1.0)*x4896*x4899))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4902.valid){
continue;
}
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4902.value)))+(x4903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4904=IKcos(j4);
IkReal x4905=IKsin(j4);
IkReal x4906=(cj5*r00);
IkReal x4907=(r01*sj5);
IkReal x4908=(cj5*r10);
IkReal x4909=(cj5*r20);
IkReal x4910=((1.0)*x4904);
IkReal x4911=((1.0)*x4905);
IkReal x4912=(sj5*x4905);
IkReal x4913=(sj5*x4904);
evalcond[0]=(((r02*x4905))+((x4904*x4907))+(((-1.0)*x4906*x4910)));
evalcond[1]=((((-1.0)*x4908*x4910))+((r11*x4913))+((r12*x4905)));
evalcond[2]=(((r21*x4912))+(((-1.0)*x4909*x4911))+(((-1.0)*r22*x4910)));
evalcond[3]=((-1.0)+((r21*x4913))+(((-1.0)*x4909*x4910))+((r22*x4905)));
evalcond[4]=(sj0+(((-1.0)*r02*x4910))+((x4905*x4907))+(((-1.0)*x4906*x4911)));
evalcond[5]=((((-1.0)*x4908*x4911))+(((-1.0)*r12*x4910))+((r11*x4912))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4914=IKsin(j0);
IkReal x4915=IKcos(j0);
evalcond[0]=((((0.10915)*x4914))+(((-0.39225)*x4915))+(((-1.0)*px)));
evalcond[1]=((((-0.39225)*x4914))+(((-1.0)*py))+(((-0.10915)*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4916=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4916;
j4eval[1]=IKsign(x4916);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4917=((1.0)*cj5);
IkReal x4918=((((-1.0)*r11*x4917))+(((-1.0)*r10*sj5)));
j4eval[0]=x4918;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4917))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4919=cj5*cj5;
IkReal x4920=((1.0)*r20);
IkReal x4921=(r01*r21);
IkReal x4922=(r21*sj5);
IkReal x4923=(((cj5*r01*r20*sj5))+((x4919*x4921))+(((-1.0)*r02*r22))+(((-1.0)*x4921))+((cj5*r00*x4922))+(((-1.0)*r00*x4919*x4920)));
j4eval[0]=x4923;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4920))+((cj0*x4922)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4924=cj5*cj5;
IkReal x4925=((1.0)*r20);
IkReal x4926=(r01*r21);
IkReal x4927=(r21*sj5);
CheckValue<IkReal> x4928 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4925))+((cj0*x4927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4928.valid){
continue;
}
CheckValue<IkReal> x4929=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x4924*x4926))+(((-1.0)*r02*r22))+(((-1.0)*x4926))+((cj5*r00*x4927))+(((-1.0)*r00*x4924*x4925)))),-1);
if(!x4929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4928.value)+(((1.5707963267949)*(x4929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4930=IKcos(j4);
IkReal x4931=IKsin(j4);
IkReal x4932=(cj5*r00);
IkReal x4933=(cj5*r10);
IkReal x4934=(cj5*r20);
IkReal x4935=((1.0)*x4930);
IkReal x4936=((1.0)*x4931);
IkReal x4937=(sj5*x4930);
IkReal x4938=(sj5*x4931);
evalcond[0]=((((-1.0)*x4934*x4935))+((r22*x4931))+((r21*x4937)));
evalcond[1]=((((-1.0)*x4934*x4936))+((r21*x4938))+(((-1.0)*r22*x4935)));
evalcond[2]=(cj0+(((-1.0)*x4932*x4935))+((r01*x4937))+((r02*x4931)));
evalcond[3]=(((r12*x4931))+sj0+(((-1.0)*x4933*x4935))+((r11*x4937)));
evalcond[4]=(sj0+(((-1.0)*r02*x4935))+(((-1.0)*x4932*x4936))+((r01*x4938)));
evalcond[5]=((((-1.0)*x4933*x4936))+(((-1.0)*r12*x4935))+((r11*x4938))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4939=((1.0)*cj5);
CheckValue<IkReal> x4940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4939)))),-1);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4939)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4940.value)))+(x4941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4942=IKcos(j4);
IkReal x4943=IKsin(j4);
IkReal x4944=(cj5*r00);
IkReal x4945=(cj5*r10);
IkReal x4946=(cj5*r20);
IkReal x4947=((1.0)*x4942);
IkReal x4948=((1.0)*x4943);
IkReal x4949=(sj5*x4942);
IkReal x4950=(sj5*x4943);
evalcond[0]=(((r21*x4949))+(((-1.0)*x4946*x4947))+((r22*x4943)));
evalcond[1]=((((-1.0)*x4946*x4948))+(((-1.0)*r22*x4947))+((r21*x4950)));
evalcond[2]=(((r01*x4949))+cj0+((r02*x4943))+(((-1.0)*x4944*x4947)));
evalcond[3]=(sj0+((r11*x4949))+(((-1.0)*x4945*x4947))+((r12*x4943)));
evalcond[4]=(sj0+(((-1.0)*x4944*x4948))+(((-1.0)*r02*x4947))+((r01*x4950)));
evalcond[5]=((((-1.0)*r12*x4947))+(((-1.0)*x4945*x4948))+((r11*x4950))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4951 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4951.valid){
continue;
}
CheckValue<IkReal> x4952=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4951.value)+(((1.5707963267949)*(x4952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4953=IKcos(j4);
IkReal x4954=IKsin(j4);
IkReal x4955=(cj5*r00);
IkReal x4956=(cj5*r10);
IkReal x4957=(cj5*r20);
IkReal x4958=((1.0)*x4953);
IkReal x4959=((1.0)*x4954);
IkReal x4960=(sj5*x4953);
IkReal x4961=(sj5*x4954);
evalcond[0]=(((r22*x4954))+(((-1.0)*x4957*x4958))+((r21*x4960)));
evalcond[1]=((((-1.0)*x4957*x4959))+(((-1.0)*r22*x4958))+((r21*x4961)));
evalcond[2]=(cj0+(((-1.0)*x4955*x4958))+((r02*x4954))+((r01*x4960)));
evalcond[3]=(sj0+((r12*x4954))+(((-1.0)*x4956*x4958))+((r11*x4960)));
evalcond[4]=(sj0+(((-1.0)*x4955*x4959))+(((-1.0)*r02*x4958))+((r01*x4961)));
evalcond[5]=((((-1.0)*x4956*x4959))+((r11*x4961))+(((-1.0)*r12*x4958))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4962=IKsin(j0);
IkReal x4963=IKcos(j0);
evalcond[0]=((((0.10915)*x4962))+(((-1.0)*px))+(((0.81725)*x4963)));
evalcond[1]=((((-1.0)*py))+(((0.81725)*x4962))+(((-0.10915)*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4964=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4964;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4965=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4965;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4966=((1.0)*cj5);
IkReal x4967=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4966)));
j4eval[0]=x4967;
j4eval[1]=IKsign(x4967);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4966))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4968=((1.0)*cj5);
CheckValue<IkReal> x4969 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4968))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4969.valid){
continue;
}
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4968)))),-1);
if(!x4970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4969.value)+(((1.5707963267949)*(x4970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4971=IKcos(j4);
IkReal x4972=IKsin(j4);
IkReal x4973=((1.0)*cj0);
IkReal x4974=(cj5*r00);
IkReal x4975=(cj5*r10);
IkReal x4976=(cj5*r20);
IkReal x4977=((1.0)*x4971);
IkReal x4978=((1.0)*x4972);
IkReal x4979=(sj5*x4971);
IkReal x4980=(sj5*x4972);
evalcond[0]=(((r22*x4972))+(((-1.0)*x4976*x4977))+((r21*x4979)));
evalcond[1]=((((-1.0)*x4976*x4978))+((r21*x4980))+(((-1.0)*r22*x4977)));
evalcond[2]=(((r01*x4980))+sj0+(((-1.0)*r02*x4977))+(((-1.0)*x4974*x4978)));
evalcond[3]=((((-1.0)*x4973))+((r02*x4972))+(((-1.0)*x4974*x4977))+((r01*x4979)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4975*x4977))+((r12*x4972))+((r11*x4979)));
evalcond[5]=((((-1.0)*x4975*x4978))+((r11*x4980))+(((-1.0)*r12*x4977))+(((-1.0)*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4981 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4981.valid){
continue;
}
CheckValue<IkReal> x4982=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4981.value)+(((1.5707963267949)*(x4982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4983=IKcos(j4);
IkReal x4984=IKsin(j4);
IkReal x4985=((1.0)*cj0);
IkReal x4986=(cj5*r00);
IkReal x4987=(cj5*r10);
IkReal x4988=(cj5*r20);
IkReal x4989=((1.0)*x4983);
IkReal x4990=((1.0)*x4984);
IkReal x4991=(sj5*x4983);
IkReal x4992=(sj5*x4984);
evalcond[0]=((((-1.0)*x4988*x4989))+((r22*x4984))+((r21*x4991)));
evalcond[1]=((((-1.0)*r22*x4989))+(((-1.0)*x4988*x4990))+((r21*x4992)));
evalcond[2]=((((-1.0)*x4986*x4990))+sj0+(((-1.0)*r02*x4989))+((r01*x4992)));
evalcond[3]=((((-1.0)*x4986*x4989))+(((-1.0)*x4985))+((r01*x4991))+((r02*x4984)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4984))+((r11*x4991))+(((-1.0)*x4987*x4989)));
evalcond[5]=(((r11*x4992))+(((-1.0)*r12*x4989))+(((-1.0)*x4985))+(((-1.0)*x4987*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4993=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4993.valid){
continue;
}
CheckValue<IkReal> x4994 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4993.value)))+(x4994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4995=IKcos(j4);
IkReal x4996=IKsin(j4);
IkReal x4997=((1.0)*cj0);
IkReal x4998=(cj5*r00);
IkReal x4999=(cj5*r10);
IkReal x5000=(cj5*r20);
IkReal x5001=((1.0)*x4995);
IkReal x5002=((1.0)*x4996);
IkReal x5003=(sj5*x4995);
IkReal x5004=(sj5*x4996);
evalcond[0]=(((r22*x4996))+(((-1.0)*x5000*x5001))+((r21*x5003)));
evalcond[1]=((((-1.0)*x5000*x5002))+((r21*x5004))+(((-1.0)*r22*x5001)));
evalcond[2]=(sj0+(((-1.0)*x4998*x5002))+((r01*x5004))+(((-1.0)*r02*x5001)));
evalcond[3]=((((-1.0)*x4997))+(((-1.0)*x4998*x5001))+((r02*x4996))+((r01*x5003)));
evalcond[4]=((((-1.0)*sj0))+((r11*x5003))+((r12*x4996))+(((-1.0)*x4999*x5001)));
evalcond[5]=(((r11*x5004))+(((-1.0)*x4997))+(((-1.0)*r12*x5001))+(((-1.0)*x4999*x5002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((2.52189136462044)*py))))+IKsqr(((((2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((2.52189136462044)*py))), ((((2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5005=IKsin(j0);
IkReal x5006=IKcos(j0);
evalcond[0]=((((0.03275)*x5006))+(((0.10915)*x5005))+(((-1.0)*px)));
evalcond[1]=((((0.03275)*x5005))+(((-1.0)*py))+(((-0.10915)*x5006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5007=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5007;
j4eval[1]=IKsign(x5007);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5008=((1.0)*cj5);
IkReal x5009=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5008)));
j4eval[0]=x5009;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5008)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5010=cj5*cj5;
IkReal x5011=((1.0)*r20);
IkReal x5012=(r01*r21);
IkReal x5013=(r21*sj5);
IkReal x5014=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5010*x5012))+(((-1.0)*x5012))+(((-1.0)*r00*x5010*x5011))+((cj5*r00*x5013)));
j4eval[0]=x5014;
j4eval[1]=((IKabs((((cj0*x5013))+(((-1.0)*cj0*cj5*x5011)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5015=cj5*cj5;
IkReal x5016=((1.0)*r20);
IkReal x5017=(r01*r21);
IkReal x5018=(r21*sj5);
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5015*x5016))+(((-1.0)*r02*r22))+(((-1.0)*x5017))+((x5015*x5017))+((cj5*r00*x5018)))),-1);
if(!x5019.valid){
continue;
}
CheckValue<IkReal> x5020 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5018))+(((-1.0)*cj0*cj5*x5016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5019.value)))+(x5020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5021=IKcos(j4);
IkReal x5022=IKsin(j4);
IkReal x5023=(cj5*r00);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5021);
IkReal x5027=((1.0)*x5022);
IkReal x5028=(sj5*x5021);
IkReal x5029=(sj5*x5022);
evalcond[0]=((((-1.0)*x5025*x5026))+((r22*x5022))+((r21*x5028)));
evalcond[1]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5029)));
evalcond[2]=(((r02*x5022))+cj0+(((-1.0)*x5023*x5026))+((r01*x5028)));
evalcond[3]=(((r11*x5028))+sj0+((r12*x5022))+(((-1.0)*x5024*x5026)));
evalcond[4]=((((-1.0)*r02*x5026))+sj0+(((-1.0)*x5023*x5027))+((r01*x5029)));
evalcond[5]=(((r11*x5029))+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5030=((1.0)*cj5);
CheckValue<IkReal> x5031 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5030)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5031.valid){
continue;
}
CheckValue<IkReal> x5032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5030)))),-1);
if(!x5032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5031.value)+(((1.5707963267949)*(x5032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5033=IKcos(j4);
IkReal x5034=IKsin(j4);
IkReal x5035=(cj5*r00);
IkReal x5036=(cj5*r10);
IkReal x5037=(cj5*r20);
IkReal x5038=((1.0)*x5033);
IkReal x5039=((1.0)*x5034);
IkReal x5040=(sj5*x5033);
IkReal x5041=(sj5*x5034);
evalcond[0]=((((-1.0)*x5037*x5038))+((r21*x5040))+((r22*x5034)));
evalcond[1]=((((-1.0)*x5037*x5039))+((r21*x5041))+(((-1.0)*r22*x5038)));
evalcond[2]=(cj0+((r02*x5034))+(((-1.0)*x5035*x5038))+((r01*x5040)));
evalcond[3]=(((r12*x5034))+sj0+(((-1.0)*x5036*x5038))+((r11*x5040)));
evalcond[4]=(sj0+(((-1.0)*x5035*x5039))+((r01*x5041))+(((-1.0)*r02*x5038)));
evalcond[5]=((((-1.0)*r12*x5038))+(((-1.0)*x5036*x5039))+((r11*x5041))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5042 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5042.valid){
continue;
}
CheckValue<IkReal> x5043=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5042.value)+(((1.5707963267949)*(x5043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5044=IKcos(j4);
IkReal x5045=IKsin(j4);
IkReal x5046=(cj5*r00);
IkReal x5047=(cj5*r10);
IkReal x5048=(cj5*r20);
IkReal x5049=((1.0)*x5044);
IkReal x5050=((1.0)*x5045);
IkReal x5051=(sj5*x5044);
IkReal x5052=(sj5*x5045);
evalcond[0]=(((r21*x5051))+(((-1.0)*x5048*x5049))+((r22*x5045)));
evalcond[1]=(((r21*x5052))+(((-1.0)*r22*x5049))+(((-1.0)*x5048*x5050)));
evalcond[2]=(cj0+((r01*x5051))+((r02*x5045))+(((-1.0)*x5046*x5049)));
evalcond[3]=(sj0+((r11*x5051))+(((-1.0)*x5047*x5049))+((r12*x5045)));
evalcond[4]=(sj0+(((-1.0)*r02*x5049))+((r01*x5052))+(((-1.0)*x5046*x5050)));
evalcond[5]=(((r11*x5052))+(((-1.0)*r12*x5049))+(((-1.0)*x5047*x5050))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5053=IKsin(j0);
IkReal x5054=IKcos(j0);
IkReal x5055=(r00*sj5);
IkReal x5056=(r10*sj5);
IkReal x5057=(cj5*r11);
IkReal x5058=(cj5*r01);
evalcond[0]=(x5058+x5055+(((-1.0)*x5054)));
evalcond[1]=(x5056+x5057+(((-1.0)*x5053)));
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5058))+(((-0.09465)*x5055))+(((0.10915)*x5053)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x5056))+(((-0.09465)*x5057))+(((-0.10915)*x5054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5059=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5059;
j4eval[1]=IKsign(x5059);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5060=((1.0)*cj5);
IkReal x5061=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5060)));
j4eval[0]=x5061;
j4eval[1]=IKsign(x5061);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5060))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5062=cj5*cj5;
IkReal x5063=r01*r01;
IkReal x5064=(cj5*r00);
IkReal x5065=(r01*sj5);
IkReal x5066=((((-1.0)*(r02*r02)))+(((2.0)*x5064*x5065))+((x5062*x5063))+(((-1.0)*x5063))+(((-1.0)*x5062*(r00*r00))));
j4eval[0]=x5066;
j4eval[1]=IKsign(x5066);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5064))+((sj0*x5065)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5067=cj5*cj5;
IkReal x5068=r01*r01;
IkReal x5069=(cj5*r00);
IkReal x5070=(r01*sj5);
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5069))+((sj0*x5070)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
CheckValue<IkReal> x5072=IKPowWithIntegerCheck(IKsign(((((2.0)*x5069*x5070))+(((-1.0)*(r02*r02)))+((x5067*x5068))+(((-1.0)*x5068))+(((-1.0)*x5067*(r00*r00))))),-1);
if(!x5072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5071.value)+(((1.5707963267949)*(x5072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5073=IKcos(j4);
IkReal x5074=IKsin(j4);
IkReal x5075=(cj5*r00);
IkReal x5076=(r01*sj5);
IkReal x5077=(cj5*r10);
IkReal x5078=(cj5*r20);
IkReal x5079=((1.0)*x5073);
IkReal x5080=((1.0)*x5074);
IkReal x5081=(sj5*x5074);
IkReal x5082=(sj5*x5073);
evalcond[0]=(((x5073*x5076))+((r02*x5074))+(((-1.0)*x5075*x5079)));
evalcond[1]=(((r11*x5082))+(((-1.0)*x5077*x5079))+((r12*x5074)));
evalcond[2]=(((r21*x5081))+(((-1.0)*x5078*x5080))+(((-1.0)*r22*x5079)));
evalcond[3]=((-1.0)+((r21*x5082))+(((-1.0)*x5078*x5079))+((r22*x5074)));
evalcond[4]=((((-1.0)*r02*x5079))+sj0+(((-1.0)*x5075*x5080))+((x5074*x5076)));
evalcond[5]=((((-1.0)*x5077*x5080))+((r11*x5081))+(((-1.0)*r12*x5079))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5083=((1.0)*cj5);
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5083)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5083))+(((-1.0)*r10*sj5)))),-1);
if(!x5085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5084.value)+(((1.5707963267949)*(x5085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5086=IKcos(j4);
IkReal x5087=IKsin(j4);
IkReal x5088=(cj5*r00);
IkReal x5089=(r01*sj5);
IkReal x5090=(cj5*r10);
IkReal x5091=(cj5*r20);
IkReal x5092=((1.0)*x5086);
IkReal x5093=((1.0)*x5087);
IkReal x5094=(sj5*x5087);
IkReal x5095=(sj5*x5086);
evalcond[0]=((((-1.0)*x5088*x5092))+((x5086*x5089))+((r02*x5087)));
evalcond[1]=(((r11*x5095))+(((-1.0)*x5090*x5092))+((r12*x5087)));
evalcond[2]=((((-1.0)*r22*x5092))+((r21*x5094))+(((-1.0)*x5091*x5093)));
evalcond[3]=((-1.0)+((r21*x5095))+(((-1.0)*x5091*x5092))+((r22*x5087)));
evalcond[4]=(sj0+(((-1.0)*x5088*x5093))+((x5087*x5089))+(((-1.0)*r02*x5092)));
evalcond[5]=(((r11*x5094))+(((-1.0)*x5090*x5093))+(((-1.0)*cj0))+(((-1.0)*r12*x5092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5096=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5096.valid){
continue;
}
CheckValue<IkReal> x5097 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5096.value)))+(x5097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5098=IKcos(j4);
IkReal x5099=IKsin(j4);
IkReal x5100=(cj5*r00);
IkReal x5101=(r01*sj5);
IkReal x5102=(cj5*r10);
IkReal x5103=(cj5*r20);
IkReal x5104=((1.0)*x5098);
IkReal x5105=((1.0)*x5099);
IkReal x5106=(sj5*x5099);
IkReal x5107=(sj5*x5098);
evalcond[0]=(((x5098*x5101))+(((-1.0)*x5100*x5104))+((r02*x5099)));
evalcond[1]=(((r12*x5099))+(((-1.0)*x5102*x5104))+((r11*x5107)));
evalcond[2]=((((-1.0)*r22*x5104))+(((-1.0)*x5103*x5105))+((r21*x5106)));
evalcond[3]=((-1.0)+((r22*x5099))+(((-1.0)*x5103*x5104))+((r21*x5107)));
evalcond[4]=(sj0+(((-1.0)*r02*x5104))+((x5099*x5101))+(((-1.0)*x5100*x5105)));
evalcond[5]=((((-1.0)*x5102*x5105))+((r11*x5106))+(((-1.0)*r12*x5104))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5108=IKsin(j0);
IkReal x5109=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5109))+(((0.10915)*x5108)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x5108))+(((-0.10915)*x5109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5110=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5110;
j4eval[1]=IKsign(x5110);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5111=((1.0)*cj5);
IkReal x5112=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5111)));
j4eval[0]=x5112;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5111)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5113=cj5*cj5;
IkReal x5114=((1.0)*r20);
IkReal x5115=(r01*r21);
IkReal x5116=(r21*sj5);
IkReal x5117=(((cj5*r01*r20*sj5))+((x5113*x5115))+(((-1.0)*r02*r22))+(((-1.0)*x5115))+(((-1.0)*r00*x5113*x5114))+((cj5*r00*x5116)));
j4eval[0]=x5117;
j4eval[1]=((IKabs((((cj0*x5116))+(((-1.0)*cj0*cj5*x5114)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5118=cj5*cj5;
IkReal x5119=((1.0)*r20);
IkReal x5120=(r01*r21);
IkReal x5121=(r21*sj5);
CheckValue<IkReal> x5122=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5121))+(((-1.0)*x5120))+((x5118*x5120))+(((-1.0)*r00*x5118*x5119)))),-1);
if(!x5122.valid){
continue;
}
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5119))+((cj0*x5121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5122.value)))+(x5123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5124=IKcos(j4);
IkReal x5125=IKsin(j4);
IkReal x5126=(cj5*r00);
IkReal x5127=(cj5*r10);
IkReal x5128=(cj5*r20);
IkReal x5129=((1.0)*x5124);
IkReal x5130=((1.0)*x5125);
IkReal x5131=(sj5*x5124);
IkReal x5132=(sj5*x5125);
evalcond[0]=(((r22*x5125))+(((-1.0)*x5128*x5129))+((r21*x5131)));
evalcond[1]=((((-1.0)*x5128*x5130))+((r21*x5132))+(((-1.0)*r22*x5129)));
evalcond[2]=(cj0+(((-1.0)*x5126*x5129))+((r01*x5131))+((r02*x5125)));
evalcond[3]=(sj0+((r12*x5125))+((r11*x5131))+(((-1.0)*x5127*x5129)));
evalcond[4]=(sj0+(((-1.0)*x5126*x5130))+((r01*x5132))+(((-1.0)*r02*x5129)));
evalcond[5]=(((r11*x5132))+(((-1.0)*r12*x5129))+(((-1.0)*x5127*x5130))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5133=((1.0)*cj5);
CheckValue<IkReal> x5134 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5133))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5133)))),-1);
if(!x5135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5134.value)+(((1.5707963267949)*(x5135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5136=IKcos(j4);
IkReal x5137=IKsin(j4);
IkReal x5138=(cj5*r00);
IkReal x5139=(cj5*r10);
IkReal x5140=(cj5*r20);
IkReal x5141=((1.0)*x5136);
IkReal x5142=((1.0)*x5137);
IkReal x5143=(sj5*x5136);
IkReal x5144=(sj5*x5137);
evalcond[0]=(((r21*x5143))+((r22*x5137))+(((-1.0)*x5140*x5141)));
evalcond[1]=(((r21*x5144))+(((-1.0)*x5140*x5142))+(((-1.0)*r22*x5141)));
evalcond[2]=(((r01*x5143))+cj0+((r02*x5137))+(((-1.0)*x5138*x5141)));
evalcond[3]=(sj0+((r12*x5137))+((r11*x5143))+(((-1.0)*x5139*x5141)));
evalcond[4]=(sj0+((r01*x5144))+(((-1.0)*r02*x5141))+(((-1.0)*x5138*x5142)));
evalcond[5]=((((-1.0)*r12*x5141))+((r11*x5144))+(((-1.0)*x5139*x5142))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5145 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5145.valid){
continue;
}
CheckValue<IkReal> x5146=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5145.value)+(((1.5707963267949)*(x5146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5147=IKcos(j4);
IkReal x5148=IKsin(j4);
IkReal x5149=(cj5*r00);
IkReal x5150=(cj5*r10);
IkReal x5151=(cj5*r20);
IkReal x5152=((1.0)*x5147);
IkReal x5153=((1.0)*x5148);
IkReal x5154=(sj5*x5147);
IkReal x5155=(sj5*x5148);
evalcond[0]=(((r21*x5154))+(((-1.0)*x5151*x5152))+((r22*x5148)));
evalcond[1]=(((r21*x5155))+(((-1.0)*x5151*x5153))+(((-1.0)*r22*x5152)));
evalcond[2]=(((r01*x5154))+cj0+((r02*x5148))+(((-1.0)*x5149*x5152)));
evalcond[3]=(((r11*x5154))+sj0+((r12*x5148))+(((-1.0)*x5150*x5152)));
evalcond[4]=(((r01*x5155))+sj0+(((-1.0)*x5149*x5153))+(((-1.0)*r02*x5152)));
evalcond[5]=(((r11*x5155))+(((-1.0)*r12*x5152))+(((-1.0)*x5150*x5153))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5156=((1.0)*sj5);
IkReal x5157=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5157))+(((-1.0)*r10*x5156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5156))+(((-1.0)*r01*x5157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5157))+(((-1.0)*r10*x5156))))+IKsqr(((((-1.0)*r00*x5156))+(((-1.0)*r01*x5157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5157))+(((-1.0)*r10*x5156))), ((((-1.0)*r00*x5156))+(((-1.0)*r01*x5157))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5158=IKsin(j0);
IkReal x5159=IKcos(j0);
IkReal x5160=(r00*sj5);
IkReal x5161=(r10*sj5);
IkReal x5162=(cj5*r11);
IkReal x5163=(cj5*r01);
evalcond[0]=(x5159+x5160+x5163);
evalcond[1]=(x5158+x5161+x5162);
evalcond[2]=((((-0.09465)*x5163))+(((-0.09465)*x5160))+(((-1.0)*px))+(((0.10915)*x5158)));
evalcond[3]=((((-0.09465)*x5162))+(((-0.09465)*x5161))+(((-0.10915)*x5159))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5164=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5164;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5165=((1.0)*cj5);
IkReal x5166=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5165)));
j4eval[0]=x5166;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5165))))));
j4eval[2]=IKsign(x5166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5167=cj5*cj5;
IkReal x5168=r01*r01;
IkReal x5169=(cj5*r00);
IkReal x5170=(r01*sj5);
IkReal x5171=((((2.0)*x5169*x5170))+(((-1.0)*x5167*(r00*r00)))+(((-1.0)*(r02*r02)))+((x5167*x5168))+(((-1.0)*x5168)));
j4eval[0]=x5171;
j4eval[1]=IKsign(x5171);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5169))+((sj0*x5170)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5172=cj5*cj5;
IkReal x5173=r01*r01;
IkReal x5174=(cj5*r00);
IkReal x5175=(r01*sj5);
CheckValue<IkReal> x5176 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5174))+((sj0*x5175)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5176.valid){
continue;
}
CheckValue<IkReal> x5177=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x5173))+(((2.0)*x5174*x5175))+(((-1.0)*x5172*(r00*r00)))+((x5172*x5173)))),-1);
if(!x5177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5176.value)+(((1.5707963267949)*(x5177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5178=IKcos(j4);
IkReal x5179=IKsin(j4);
IkReal x5180=(cj5*r00);
IkReal x5181=(r01*sj5);
IkReal x5182=(cj5*r10);
IkReal x5183=(cj5*r20);
IkReal x5184=((1.0)*x5178);
IkReal x5185=((1.0)*x5179);
IkReal x5186=(sj5*x5179);
IkReal x5187=(sj5*x5178);
evalcond[0]=(((r02*x5179))+((x5178*x5181))+(((-1.0)*x5180*x5184)));
evalcond[1]=((((-1.0)*x5182*x5184))+((r12*x5179))+((r11*x5187)));
evalcond[2]=((((-1.0)*x5183*x5185))+(((-1.0)*r22*x5184))+((r21*x5186)));
evalcond[3]=((1.0)+(((-1.0)*x5183*x5184))+((r21*x5187))+((r22*x5179)));
evalcond[4]=(sj0+(((-1.0)*r02*x5184))+((x5179*x5181))+(((-1.0)*x5180*x5185)));
evalcond[5]=((((-1.0)*x5182*x5185))+(((-1.0)*r12*x5184))+((r11*x5186))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5188=((1.0)*cj5);
CheckValue<IkReal> x5189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5188)))),-1);
if(!x5189.valid){
continue;
}
CheckValue<IkReal> x5190 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5188)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5189.value)))+(x5190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5191=IKcos(j4);
IkReal x5192=IKsin(j4);
IkReal x5193=(cj5*r00);
IkReal x5194=(r01*sj5);
IkReal x5195=(cj5*r10);
IkReal x5196=(cj5*r20);
IkReal x5197=((1.0)*x5191);
IkReal x5198=((1.0)*x5192);
IkReal x5199=(sj5*x5192);
IkReal x5200=(sj5*x5191);
evalcond[0]=(((r02*x5192))+(((-1.0)*x5193*x5197))+((x5191*x5194)));
evalcond[1]=(((r11*x5200))+((r12*x5192))+(((-1.0)*x5195*x5197)));
evalcond[2]=(((r21*x5199))+(((-1.0)*r22*x5197))+(((-1.0)*x5196*x5198)));
evalcond[3]=((1.0)+((r22*x5192))+(((-1.0)*x5196*x5197))+((r21*x5200)));
evalcond[4]=(sj0+(((-1.0)*x5193*x5198))+(((-1.0)*r02*x5197))+((x5192*x5194)));
evalcond[5]=((((-1.0)*r12*x5197))+((r11*x5199))+(((-1.0)*x5195*x5198))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5201 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5201.valid){
continue;
}
CheckValue<IkReal> x5202=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5201.value)+(((1.5707963267949)*(x5202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5203=IKcos(j4);
IkReal x5204=IKsin(j4);
IkReal x5205=(cj5*r00);
IkReal x5206=(r01*sj5);
IkReal x5207=(cj5*r10);
IkReal x5208=(cj5*r20);
IkReal x5209=((1.0)*x5203);
IkReal x5210=((1.0)*x5204);
IkReal x5211=(sj5*x5204);
IkReal x5212=(sj5*x5203);
evalcond[0]=(((x5203*x5206))+(((-1.0)*x5205*x5209))+((r02*x5204)));
evalcond[1]=(((r11*x5212))+((r12*x5204))+(((-1.0)*x5207*x5209)));
evalcond[2]=((((-1.0)*r22*x5209))+((r21*x5211))+(((-1.0)*x5208*x5210)));
evalcond[3]=((1.0)+((r22*x5204))+(((-1.0)*x5208*x5209))+((r21*x5212)));
evalcond[4]=((((-1.0)*r02*x5209))+((x5204*x5206))+sj0+(((-1.0)*x5205*x5210)));
evalcond[5]=(((r11*x5211))+(((-1.0)*r12*x5209))+(((-1.0)*x5207*x5210))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5213=IKsin(j0);
IkReal x5214=IKcos(j0);
evalcond[0]=((((0.10915)*x5213))+(((-1.0)*px))+(((0.39225)*x5214)));
evalcond[1]=((((-0.10915)*x5214))+(((-1.0)*py))+(((0.39225)*x5213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5215=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5215;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5216=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5216;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5217=((1.0)*cj5);
IkReal x5218=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5217)));
j4eval[0]=x5218;
j4eval[1]=IKsign(x5218);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5217))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5219=((1.0)*cj5);
CheckValue<IkReal> x5220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5219)))),-1);
if(!x5220.valid){
continue;
}
CheckValue<IkReal> x5221 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5219))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5220.value)))+(x5221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5222=IKcos(j4);
IkReal x5223=IKsin(j4);
IkReal x5224=((1.0)*cj0);
IkReal x5225=(cj5*r00);
IkReal x5226=(cj5*r10);
IkReal x5227=(cj5*r20);
IkReal x5228=((1.0)*x5222);
IkReal x5229=((1.0)*x5223);
IkReal x5230=(sj5*x5222);
IkReal x5231=(sj5*x5223);
evalcond[0]=((((-1.0)*x5227*x5228))+((r22*x5223))+((r21*x5230)));
evalcond[1]=((((-1.0)*x5227*x5229))+((r21*x5231))+(((-1.0)*r22*x5228)));
evalcond[2]=(sj0+((r01*x5231))+(((-1.0)*x5225*x5229))+(((-1.0)*r02*x5228)));
evalcond[3]=(((r02*x5223))+((r01*x5230))+(((-1.0)*x5225*x5228))+(((-1.0)*x5224)));
evalcond[4]=((((-1.0)*sj0))+((r11*x5230))+(((-1.0)*x5226*x5228))+((r12*x5223)));
evalcond[5]=(((r11*x5231))+(((-1.0)*r12*x5228))+(((-1.0)*x5226*x5229))+(((-1.0)*x5224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5232 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5232.valid){
continue;
}
CheckValue<IkReal> x5233=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5232.value)+(((1.5707963267949)*(x5233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5234=IKcos(j4);
IkReal x5235=IKsin(j4);
IkReal x5236=((1.0)*cj0);
IkReal x5237=(cj5*r00);
IkReal x5238=(cj5*r10);
IkReal x5239=(cj5*r20);
IkReal x5240=((1.0)*x5234);
IkReal x5241=((1.0)*x5235);
IkReal x5242=(sj5*x5234);
IkReal x5243=(sj5*x5235);
evalcond[0]=((((-1.0)*x5239*x5240))+((r21*x5242))+((r22*x5235)));
evalcond[1]=((((-1.0)*r22*x5240))+(((-1.0)*x5239*x5241))+((r21*x5243)));
evalcond[2]=(sj0+((r01*x5243))+(((-1.0)*r02*x5240))+(((-1.0)*x5237*x5241)));
evalcond[3]=((((-1.0)*x5236))+((r01*x5242))+(((-1.0)*x5237*x5240))+((r02*x5235)));
evalcond[4]=((((-1.0)*sj0))+((r11*x5242))+((r12*x5235))+(((-1.0)*x5238*x5240)));
evalcond[5]=((((-1.0)*x5236))+(((-1.0)*r12*x5240))+((r11*x5243))+(((-1.0)*x5238*x5241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5244=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5244.valid){
continue;
}
CheckValue<IkReal> x5245 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5244.value)))+(x5245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5246=IKcos(j4);
IkReal x5247=IKsin(j4);
IkReal x5248=((1.0)*cj0);
IkReal x5249=(cj5*r00);
IkReal x5250=(cj5*r10);
IkReal x5251=(cj5*r20);
IkReal x5252=((1.0)*x5246);
IkReal x5253=((1.0)*x5247);
IkReal x5254=(sj5*x5246);
IkReal x5255=(sj5*x5247);
evalcond[0]=(((r21*x5254))+(((-1.0)*x5251*x5252))+((r22*x5247)));
evalcond[1]=(((r21*x5255))+(((-1.0)*r22*x5252))+(((-1.0)*x5251*x5253)));
evalcond[2]=(sj0+(((-1.0)*r02*x5252))+((r01*x5255))+(((-1.0)*x5249*x5253)));
evalcond[3]=(((r01*x5254))+(((-1.0)*x5248))+(((-1.0)*x5249*x5252))+((r02*x5247)));
evalcond[4]=((((-1.0)*sj0))+((r12*x5247))+((r11*x5254))+(((-1.0)*x5250*x5252)));
evalcond[5]=((((-1.0)*x5248))+(((-1.0)*r12*x5252))+((r11*x5255))+(((-1.0)*x5250*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5256=cj1*cj1;
IkReal x5257=(cj1*sj1);
IkReal x5258=(r00*sj5);
IkReal x5259=(cj1*sj2);
IkReal x5260=(r10*sj5);
IkReal x5261=(cj5*r11);
IkReal x5262=((20000.0)*py);
IkReal x5263=(cj2*sj1);
IkReal x5264=(cj5*r01);
IkReal x5265=((1893.0)*x5263);
IkReal x5266=(sj2*x5256);
CheckValue<IkReal> x5267=IKPowWithIntegerCheck(((((-8500.0)*x5266))+(((-8500.0)*cj2*x5257))+(((7845.0)*cj2*sj2))+(((7845.0)*x5257))+(((-15690.0)*cj2*x5266))+(((-15690.0)*x5257*(cj2*cj2)))),-1);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck((x5263+x5259),-1);
if(!x5268.valid){
continue;
}
if( IKabs(((x5267.value)*((((x5262*x5263))+((x5261*x5265))+((x5260*x5265))+(((-2183.0)*x5258))+(((1893.0)*x5259*x5261))+(((1893.0)*x5259*x5260))+(((-2183.0)*x5264))+((x5259*x5262)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5268.value)*(((((-1.0)*x5264))+(((-1.0)*x5258)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5267.value)*((((x5262*x5263))+((x5261*x5265))+((x5260*x5265))+(((-2183.0)*x5258))+(((1893.0)*x5259*x5261))+(((1893.0)*x5259*x5260))+(((-2183.0)*x5264))+((x5259*x5262))))))+IKsqr(((x5268.value)*(((((-1.0)*x5264))+(((-1.0)*x5258))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5267.value)*((((x5262*x5263))+((x5261*x5265))+((x5260*x5265))+(((-2183.0)*x5258))+(((1893.0)*x5259*x5261))+(((1893.0)*x5259*x5260))+(((-2183.0)*x5264))+((x5259*x5262))))), ((x5268.value)*(((((-1.0)*x5264))+(((-1.0)*x5258))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5269=IKcos(j0);
IkReal x5270=IKsin(j0);
IkReal x5271=(cj5*r01);
IkReal x5272=(cj2*sj1);
IkReal x5273=(r00*sj5);
IkReal x5274=(cj5*r11);
IkReal x5275=((0.39225)*cj2);
IkReal x5276=(r10*sj5);
IkReal x5277=((0.39225)*sj1*sj2);
IkReal x5278=(cj1*x5269);
IkReal x5279=(cj1*x5270);
evalcond[0]=(((sj2*x5278))+x5271+x5273+((x5269*x5272)));
evalcond[1]=(((sj2*x5279))+x5274+x5276+((x5270*x5272)));
evalcond[2]=((((-0.09465)*x5273))+(((-0.09465)*x5271))+(((-1.0)*x5275*x5278))+(((-1.0)*px))+((x5269*x5277))+(((-0.425)*x5278))+(((0.10915)*x5270)));
evalcond[3]=((((-0.10915)*x5269))+(((-0.09465)*x5274))+(((-0.09465)*x5276))+(((-1.0)*x5275*x5279))+(((-1.0)*py))+((x5270*x5277))+(((-0.425)*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5280=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5280;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5281=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5281;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5282=((1.0)*cj5);
IkReal x5283=((((-1.0)*r21*x5282))+(((-1.0)*r20*sj5)));
j4eval[0]=x5283;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5282))+(((-1.0)*r10*sj0*x5282))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x5283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5284=((-1.0)*r20);
IkReal x5286 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5286)==0){
continue;
}
IkReal x5285=pow(x5286,-0.5);
CheckValue<IkReal> x5287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5284),IKFAST_ATAN2_MAGTHRESH);
if(!x5287.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5287.value));
IkReal gconst115=(r21*x5285);
IkReal gconst116=(x5284*x5285);
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5288.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5289=((-1.0)*r20);
IkReal x5290=x5285;
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5289),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
IkReal x5291=((-1.0)*(x5292.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5291;
IkReal gconst114=x5291;
IkReal gconst115=(r21*x5290);
IkReal gconst116=(x5289*x5290);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5293=((-1.0)*r20);
IkReal x5294=x5285;
CheckValue<IkReal> x5296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5293),IKFAST_ATAN2_MAGTHRESH);
if(!x5296.valid){
continue;
}
IkReal x5295=((-1.0)*(x5296.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5295;
IkReal gconst114=x5295;
IkReal gconst115=(r21*x5294);
IkReal gconst116=(x5293*x5294);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5297=((-1.0)*r20);
IkReal x5298=x5285;
CheckValue<IkReal> x5300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5297),IKFAST_ATAN2_MAGTHRESH);
if(!x5300.valid){
continue;
}
IkReal x5299=((-1.0)*(x5300.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5299;
IkReal gconst114=x5299;
IkReal gconst115=(r21*x5298);
IkReal gconst116=(x5297*x5298);
IkReal x5301=((1.0)*(r22*r22));
CheckValue<IkReal> x5305=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5301))),-1);
if(!x5305.valid){
continue;
}
IkReal x5302=x5305.value;
IkReal x5303=((1.0)*x5302);
IkReal x5304=((((-1.0)*x5303*(r20*r20*r20*r20)))+(((-1.0)*x5301))+(((-2.0)*x5302*(r20*r20)*(r21*r21)))+(((-1.0)*x5303*(r21*r21*r21*r21))));
j4eval[0]=x5304;
j4eval[1]=IKsign(x5304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5306=(cj2*sj1);
IkReal x5307=(gconst115*r21);
IkReal x5308=(cj1*sj2);
IkReal x5309=((1.0)*gconst116*r20);
CheckValue<IkReal> x5310=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5307))+(((-1.0)*(x5307*x5307)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x5309)))),-1);
if(!x5310.valid){
continue;
}
CheckValue<IkReal> x5311 = IKatan2WithCheck(IkReal((((r22*x5306))+((r22*x5308)))),IkReal(((((-1.0)*x5306*x5309))+((x5306*x5307))+(((-1.0)*x5308*x5309))+((x5307*x5308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5310.value)))+(x5311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5312=IKsin(j4);
IkReal x5313=IKcos(j4);
IkReal x5314=(cj1*cj2);
IkReal x5315=((1.0)*x5313);
IkReal x5316=(gconst115*x5312);
IkReal x5317=(gconst115*x5313);
IkReal x5318=((1.0)*sj1*sj2);
IkReal x5319=((1.0)*gconst116*x5312);
evalcond[0]=(((r21*x5316))+(((-1.0)*r20*x5319))+(((-1.0)*r22*x5315)));
evalcond[1]=(((r01*x5316))+sj0+(((-1.0)*r00*x5319))+(((-1.0)*r02*x5315)));
evalcond[2]=((((-1.0)*r12*x5315))+((r11*x5316))+(((-1.0)*cj0))+(((-1.0)*r10*x5319)));
evalcond[3]=(((cj2*sj1))+((r22*x5312))+((r21*x5317))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5315)));
evalcond[4]=(((r01*x5317))+((cj0*x5314))+((r02*x5312))+(((-1.0)*cj0*x5318))+(((-1.0)*gconst116*r00*x5315)));
evalcond[5]=((((-1.0)*sj0*x5318))+((sj0*x5314))+((r11*x5317))+(((-1.0)*gconst116*r10*x5315))+((r12*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5320 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5320.valid){
continue;
}
CheckValue<IkReal> x5321=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5320.value)+(((1.5707963267949)*(x5321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5322=IKsin(j4);
IkReal x5323=IKcos(j4);
IkReal x5324=(cj1*cj2);
IkReal x5325=((1.0)*x5323);
IkReal x5326=(gconst115*x5322);
IkReal x5327=(gconst115*x5323);
IkReal x5328=((1.0)*sj1*sj2);
IkReal x5329=((1.0)*gconst116*x5322);
evalcond[0]=((((-1.0)*r20*x5329))+(((-1.0)*r22*x5325))+((r21*x5326)));
evalcond[1]=(sj0+(((-1.0)*r02*x5325))+((r01*x5326))+(((-1.0)*r00*x5329)));
evalcond[2]=(((r11*x5326))+(((-1.0)*r12*x5325))+(((-1.0)*r10*x5329))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5325))+((cj1*sj2))+((r22*x5322))+((r21*x5327)));
evalcond[4]=((((-1.0)*gconst116*r00*x5325))+((r01*x5327))+((cj0*x5324))+((r02*x5322))+(((-1.0)*cj0*x5328)));
evalcond[5]=((((-1.0)*gconst116*r10*x5325))+((r11*x5327))+((r12*x5322))+(((-1.0)*sj0*x5328))+((sj0*x5324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5330.valid){
continue;
}
CheckValue<IkReal> x5331 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5330.value)))+(x5331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5332=IKsin(j4);
IkReal x5333=IKcos(j4);
IkReal x5334=(cj1*cj2);
IkReal x5335=((1.0)*x5333);
IkReal x5336=(gconst115*x5332);
IkReal x5337=(gconst115*x5333);
IkReal x5338=((1.0)*sj1*sj2);
IkReal x5339=((1.0)*gconst116*x5332);
evalcond[0]=((((-1.0)*r20*x5339))+(((-1.0)*r22*x5335))+((r21*x5336)));
evalcond[1]=((((-1.0)*r00*x5339))+sj0+(((-1.0)*r02*x5335))+((r01*x5336)));
evalcond[2]=(((r11*x5336))+(((-1.0)*r10*x5339))+(((-1.0)*r12*x5335))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5335))+((cj1*sj2))+((r21*x5337))+((r22*x5332)));
evalcond[4]=((((-1.0)*gconst116*r00*x5335))+((r01*x5337))+(((-1.0)*cj0*x5338))+((cj0*x5334))+((r02*x5332)));
evalcond[5]=((((-1.0)*gconst116*r10*x5335))+((r11*x5337))+((r12*x5332))+(((-1.0)*sj0*x5338))+((sj0*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5340=((-1.0)*r21);
IkReal x5342 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5342)==0){
continue;
}
IkReal x5341=pow(x5342,-0.5);
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal(x5340),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5343.value))));
IkReal gconst118=(x5340*x5341);
IkReal gconst119=((1.0)*r20*x5341);
CheckValue<IkReal> x5344 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5344.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5344.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5345=((-1.0)*r21);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal(x5345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
IkReal x5346=((1.0)*(x5348.value));
IkReal x5347=x5341;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5346)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5346)));
IkReal gconst118=(x5345*x5347);
IkReal gconst119=((1.0)*r20*x5347);
IkReal x5349=r22*r22;
IkReal x5350=((1.0)*x5349);
CheckValue<IkReal> x5354=IKPowWithIntegerCheck(((-1.0)+x5349),-1);
if(!x5354.valid){
continue;
}
IkReal x5351=x5354.value;
if((((1.0)+(((-1.0)*x5350)))) < -0.00001)
continue;
IkReal x5352=IKsqrt(((1.0)+(((-1.0)*x5350))));
IkReal x5353=(sj0*x5351*x5352);
j4eval[0]=((IKabs((x5353+(((-1.0)*x5350*x5353)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5355=((-1.0)*r21);
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal(x5355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
IkReal x5356=((1.0)*(x5358.value));
IkReal x5357=x5341;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5356)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5356)));
IkReal gconst118=(x5355*x5357);
IkReal gconst119=((1.0)*r20*x5357);
IkReal x5359=r22*r22;
IkReal x5360=((1.0)*x5359);
CheckValue<IkReal> x5364=IKPowWithIntegerCheck(((-1.0)+x5359),-1);
if(!x5364.valid){
continue;
}
IkReal x5361=x5364.value;
if((((1.0)+(((-1.0)*x5360)))) < -0.00001)
continue;
IkReal x5362=IKsqrt(((1.0)+(((-1.0)*x5360))));
IkReal x5363=(cj0*x5361*x5362);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5363+(((-1.0)*x5360*x5363))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5365=((-1.0)*r21);
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal(x5365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
IkReal x5366=((1.0)*(x5368.value));
IkReal x5367=x5341;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5366)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5366)));
IkReal gconst118=(x5365*x5367);
IkReal gconst119=((1.0)*r20*x5367);
IkReal x5369=r22*r22;
IkReal x5370=(cj0*r02);
IkReal x5371=(r12*sj0);
CheckValue<IkReal> x5375=IKPowWithIntegerCheck(((-1.0)+x5369),-1);
if(!x5375.valid){
continue;
}
IkReal x5372=x5375.value;
if((((1.0)+(((-1.0)*x5369)))) < -0.00001)
continue;
IkReal x5373=IKsqrt(((1.0)+(((-1.0)*x5369))));
IkReal x5374=((1.0)*r22*x5372*x5373);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5371*x5374))+(((-1.0)*x5370*x5374)))))+(IKabs((x5371+x5370))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5376=((1.0)*gconst119);
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5376)))),-1);
if(!x5377.valid){
continue;
}
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5376))+(((-1.0)*cj0*r00*x5376))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5377.value)))+(x5378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5379=IKsin(j4);
IkReal x5380=IKcos(j4);
IkReal x5381=(cj1*cj2);
IkReal x5382=(gconst118*r01);
IkReal x5383=(gconst119*r20);
IkReal x5384=(gconst119*r10);
IkReal x5385=(gconst119*r00);
IkReal x5386=(gconst118*r21);
IkReal x5387=(gconst118*r11);
IkReal x5388=((1.0)*cj0);
IkReal x5389=(sj1*sj2);
IkReal x5390=((1.0)*x5380);
IkReal x5391=((1.0)*x5379);
evalcond[0]=(((x5379*x5386))+(((-1.0)*r22*x5390))+(((-1.0)*x5383*x5391)));
evalcond[1]=(sj0+(((-1.0)*x5385*x5391))+((x5379*x5382))+(((-1.0)*r02*x5390)));
evalcond[2]=((((-1.0)*x5384*x5391))+((x5379*x5387))+(((-1.0)*r12*x5390))+(((-1.0)*x5388)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5379))+((x5380*x5386))+(((-1.0)*x5383*x5390)));
evalcond[4]=((((-1.0)*x5385*x5390))+(((-1.0)*x5388*x5389))+((cj0*x5381))+((r02*x5379))+((x5380*x5382)));
evalcond[5]=(((sj0*x5381))+(((-1.0)*x5384*x5390))+(((-1.0)*sj0*x5389))+((r12*x5379))+((x5380*x5387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5392.valid){
continue;
}
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5392.value)))+(x5393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5394=IKsin(j4);
IkReal x5395=IKcos(j4);
IkReal x5396=(cj1*cj2);
IkReal x5397=(gconst118*r01);
IkReal x5398=(gconst119*r20);
IkReal x5399=(gconst119*r10);
IkReal x5400=(gconst119*r00);
IkReal x5401=(gconst118*r21);
IkReal x5402=(gconst118*r11);
IkReal x5403=((1.0)*cj0);
IkReal x5404=(sj1*sj2);
IkReal x5405=((1.0)*x5395);
IkReal x5406=((1.0)*x5394);
evalcond[0]=((((-1.0)*x5398*x5406))+(((-1.0)*r22*x5405))+((x5394*x5401)));
evalcond[1]=((((-1.0)*x5400*x5406))+sj0+(((-1.0)*r02*x5405))+((x5394*x5397)));
evalcond[2]=((((-1.0)*x5399*x5406))+(((-1.0)*r12*x5405))+(((-1.0)*x5403))+((x5394*x5402)));
evalcond[3]=(((cj2*sj1))+((r22*x5394))+(((-1.0)*x5398*x5405))+((cj1*sj2))+((x5395*x5401)));
evalcond[4]=((((-1.0)*x5400*x5405))+((r02*x5394))+(((-1.0)*x5403*x5404))+((cj0*x5396))+((x5395*x5397)));
evalcond[5]=((((-1.0)*sj0*x5404))+(((-1.0)*x5399*x5405))+((r12*x5394))+((x5395*x5402))+((sj0*x5396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5407=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5407.valid){
continue;
}
CheckValue<IkReal> x5408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5407.value)))+(x5408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5409=IKsin(j4);
IkReal x5410=IKcos(j4);
IkReal x5411=(cj1*cj2);
IkReal x5412=(gconst118*r01);
IkReal x5413=(gconst119*r20);
IkReal x5414=(gconst119*r10);
IkReal x5415=(gconst119*r00);
IkReal x5416=(gconst118*r21);
IkReal x5417=(gconst118*r11);
IkReal x5418=((1.0)*cj0);
IkReal x5419=(sj1*sj2);
IkReal x5420=((1.0)*x5410);
IkReal x5421=((1.0)*x5409);
evalcond[0]=((((-1.0)*x5413*x5421))+(((-1.0)*r22*x5420))+((x5409*x5416)));
evalcond[1]=(sj0+(((-1.0)*x5415*x5421))+(((-1.0)*r02*x5420))+((x5409*x5412)));
evalcond[2]=((((-1.0)*x5414*x5421))+(((-1.0)*x5418))+(((-1.0)*r12*x5420))+((x5409*x5417)));
evalcond[3]=(((x5410*x5416))+((cj2*sj1))+((r22*x5409))+((cj1*sj2))+(((-1.0)*x5413*x5420)));
evalcond[4]=(((x5410*x5412))+((r02*x5409))+(((-1.0)*x5415*x5420))+((cj0*x5411))+(((-1.0)*x5418*x5419)));
evalcond[5]=(((r12*x5409))+((x5410*x5417))+(((-1.0)*sj0*x5419))+((sj0*x5411))+(((-1.0)*x5414*x5420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5423 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5423)==0){
continue;
}
IkReal x5422=pow(x5423,-0.5);
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5424.value));
IkReal gconst121=((-1.0)*r01*x5422);
IkReal gconst122=(r00*x5422);
CheckValue<IkReal> x5425 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5425.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5425.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5428 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5428.valid){
continue;
}
IkReal x5426=((-1.0)*(x5428.value));
IkReal x5427=x5422;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5426;
IkReal gconst120=x5426;
IkReal gconst121=((-1.0)*r01*x5427);
IkReal gconst122=(r00*x5427);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5429=((1.0)*gconst122);
CheckValue<IkReal> x5430 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5429))+(((-1.0)*cj0*r00*x5429))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5430.valid){
continue;
}
CheckValue<IkReal> x5431=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5429)))),-1);
if(!x5431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5430.value)+(((1.5707963267949)*(x5431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5432=IKsin(j4);
IkReal x5433=IKcos(j4);
IkReal x5434=(cj1*cj2);
IkReal x5435=(gconst121*r11);
IkReal x5436=(gconst122*r00);
IkReal x5437=(gconst122*r10);
IkReal x5438=(gconst122*r20);
IkReal x5439=((1.0)*cj0);
IkReal x5440=(sj1*sj2);
IkReal x5441=((1.0)*x5433);
IkReal x5442=((1.0)*x5432);
IkReal x5443=(gconst121*x5432);
IkReal x5444=(gconst121*x5433);
evalcond[0]=((((-1.0)*x5438*x5442))+(((-1.0)*r22*x5441))+((r21*x5443)));
evalcond[1]=(sj0+(((-1.0)*x5436*x5442))+((r01*x5443))+(((-1.0)*r02*x5441)));
evalcond[2]=((((-1.0)*x5437*x5442))+(((-1.0)*r12*x5441))+(((-1.0)*x5439))+((x5432*x5435)));
evalcond[3]=(((cj2*sj1))+((r22*x5432))+((cj1*sj2))+(((-1.0)*x5438*x5441))+((r21*x5444)));
evalcond[4]=((((-1.0)*x5436*x5441))+((r02*x5432))+((r01*x5444))+(((-1.0)*x5439*x5440))+((cj0*x5434)));
evalcond[5]=((((-1.0)*x5437*x5441))+((sj0*x5434))+(((-1.0)*sj0*x5440))+((x5433*x5435))+((r12*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5445 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5445.valid){
continue;
}
CheckValue<IkReal> x5446=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x5446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5445.value)+(((1.5707963267949)*(x5446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5447=IKsin(j4);
IkReal x5448=IKcos(j4);
IkReal x5449=(cj1*cj2);
IkReal x5450=(gconst121*r11);
IkReal x5451=(gconst122*r00);
IkReal x5452=(gconst122*r10);
IkReal x5453=(gconst122*r20);
IkReal x5454=((1.0)*cj0);
IkReal x5455=(sj1*sj2);
IkReal x5456=((1.0)*x5448);
IkReal x5457=((1.0)*x5447);
IkReal x5458=(gconst121*x5447);
IkReal x5459=(gconst121*x5448);
evalcond[0]=(((r21*x5458))+(((-1.0)*r22*x5456))+(((-1.0)*x5453*x5457)));
evalcond[1]=(sj0+(((-1.0)*x5451*x5457))+((r01*x5458))+(((-1.0)*r02*x5456)));
evalcond[2]=((((-1.0)*r12*x5456))+(((-1.0)*x5452*x5457))+((x5447*x5450))+(((-1.0)*x5454)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5459))+((r22*x5447))+(((-1.0)*x5453*x5456)));
evalcond[4]=((((-1.0)*x5454*x5455))+(((-1.0)*x5451*x5456))+((r01*x5459))+((cj0*x5449))+((r02*x5447)));
evalcond[5]=((((-1.0)*x5452*x5456))+(((-1.0)*sj0*x5455))+((sj0*x5449))+((r12*x5447))+((x5448*x5450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5461 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5461)==0){
continue;
}
IkReal x5460=pow(x5461,-0.5);
CheckValue<IkReal> x5462 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5462.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5462.value))));
IkReal gconst124=((1.0)*r01*x5460);
IkReal gconst125=((-1.0)*r00*x5460);
CheckValue<IkReal> x5463 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5463.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5463.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5466 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5466.valid){
continue;
}
IkReal x5464=((1.0)*(x5466.value));
IkReal x5465=x5460;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5464)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5464)));
IkReal gconst124=((1.0)*r01*x5465);
IkReal gconst125=((-1.0)*r00*x5465);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5469 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5469.valid){
continue;
}
IkReal x5467=((1.0)*(x5469.value));
IkReal x5468=x5460;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5467)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5467)));
IkReal gconst124=((1.0)*r01*x5468);
IkReal gconst125=((-1.0)*r00*x5468);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5472 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5472.valid){
continue;
}
IkReal x5470=((1.0)*(x5472.value));
IkReal x5471=x5460;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5470)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5470)));
IkReal gconst124=((1.0)*r01*x5471);
IkReal gconst125=((-1.0)*r00*x5471);
IkReal x5473=r02*r02;
IkReal x5474=(r12*sj0);
IkReal x5475=x5460;
IkReal x5476=(cj0*x5475);
j4eval[0]=((IKabs(((((-1.0)*x5476))+((x5473*x5476))+((r02*x5474*x5475)))))+(IKabs((x5474+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5477=((1.0)*gconst125);
CheckValue<IkReal> x5478=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5477)))),-1);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5477))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5477))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5478.value)))+(x5479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5480=IKsin(j4);
IkReal x5481=IKcos(j4);
IkReal x5482=(cj1*cj2);
IkReal x5483=(gconst125*r20);
IkReal x5484=(gconst124*r01);
IkReal x5485=(gconst125*r00);
IkReal x5486=(gconst125*r10);
IkReal x5487=((1.0)*cj0);
IkReal x5488=(sj1*sj2);
IkReal x5489=((1.0)*x5481);
IkReal x5490=((1.0)*x5480);
IkReal x5491=(gconst124*x5480);
IkReal x5492=(gconst124*x5481);
evalcond[0]=((((-1.0)*r22*x5489))+((r21*x5491))+(((-1.0)*x5483*x5490)));
evalcond[1]=(((x5480*x5484))+sj0+(((-1.0)*x5485*x5490))+(((-1.0)*r02*x5489)));
evalcond[2]=((((-1.0)*x5487))+(((-1.0)*r12*x5489))+((r11*x5491))+(((-1.0)*x5486*x5490)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5483*x5489))+((cj1*sj2))+((r21*x5492))+((r22*x5480)));
evalcond[4]=(((x5481*x5484))+((cj0*x5482))+(((-1.0)*x5487*x5488))+(((-1.0)*x5485*x5489))+((r02*x5480)));
evalcond[5]=((((-1.0)*x5486*x5489))+((r12*x5480))+((r11*x5492))+(((-1.0)*sj0*x5488))+((sj0*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5493=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5493.valid){
continue;
}
CheckValue<IkReal> x5494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5493.value)))+(x5494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5495=IKsin(j4);
IkReal x5496=IKcos(j4);
IkReal x5497=(cj1*cj2);
IkReal x5498=(gconst125*r20);
IkReal x5499=(gconst124*r01);
IkReal x5500=(gconst125*r00);
IkReal x5501=(gconst125*r10);
IkReal x5502=((1.0)*cj0);
IkReal x5503=(sj1*sj2);
IkReal x5504=((1.0)*x5496);
IkReal x5505=((1.0)*x5495);
IkReal x5506=(gconst124*x5495);
IkReal x5507=(gconst124*x5496);
evalcond[0]=((((-1.0)*r22*x5504))+(((-1.0)*x5498*x5505))+((r21*x5506)));
evalcond[1]=(((x5495*x5499))+sj0+(((-1.0)*x5500*x5505))+(((-1.0)*r02*x5504)));
evalcond[2]=((((-1.0)*x5501*x5505))+(((-1.0)*r12*x5504))+((r11*x5506))+(((-1.0)*x5502)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5498*x5504))+((cj1*sj2))+((r21*x5507))+((r22*x5495)));
evalcond[4]=(((cj0*x5497))+(((-1.0)*x5502*x5503))+(((-1.0)*x5500*x5504))+((x5496*x5499))+((r02*x5495)));
evalcond[5]=((((-1.0)*x5501*x5504))+((r12*x5495))+(((-1.0)*sj0*x5503))+((r11*x5507))+((sj0*x5497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5508.value)+(((1.5707963267949)*(x5509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5510=IKsin(j4);
IkReal x5511=IKcos(j4);
IkReal x5512=(cj1*cj2);
IkReal x5513=(gconst125*r20);
IkReal x5514=(gconst124*r01);
IkReal x5515=(gconst125*r00);
IkReal x5516=(gconst125*r10);
IkReal x5517=((1.0)*cj0);
IkReal x5518=(sj1*sj2);
IkReal x5519=((1.0)*x5511);
IkReal x5520=((1.0)*x5510);
IkReal x5521=(gconst124*x5510);
IkReal x5522=(gconst124*x5511);
evalcond[0]=((((-1.0)*r22*x5519))+((r21*x5521))+(((-1.0)*x5513*x5520)));
evalcond[1]=(sj0+(((-1.0)*r02*x5519))+(((-1.0)*x5515*x5520))+((x5510*x5514)));
evalcond[2]=((((-1.0)*x5516*x5520))+(((-1.0)*r12*x5519))+(((-1.0)*x5517))+((r11*x5521)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5513*x5519))+((cj1*sj2))+((r21*x5522))+((r22*x5510)));
evalcond[4]=(((r02*x5510))+(((-1.0)*x5515*x5519))+((x5511*x5514))+(((-1.0)*x5517*x5518))+((cj0*x5512)));
evalcond[5]=(((sj0*x5512))+((r12*x5510))+(((-1.0)*sj0*x5518))+((r11*x5522))+(((-1.0)*x5516*x5519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5523=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5523;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5524=((1.0)*cj5);
IkReal x5525=((((-1.0)*r21*x5524))+(((-1.0)*r20*sj5)));
j4eval[0]=x5525;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5524))+((r11*sj5))))));
j4eval[2]=IKsign(x5525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5526=(r01*sj5);
IkReal x5527=(cj1*sj2);
IkReal x5528=(cj2*sj1);
IkReal x5529=((1.0)*r02);
IkReal x5530=((1.0)*cj5*r00);
IkReal x5531=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5531;
j4eval[1]=((IKabs(((((-1.0)*x5527*x5529))+(((-1.0)*x5528*x5529)))))+(IKabs((((x5526*x5527))+((x5526*x5528))+(((-1.0)*x5528*x5530))+(((-1.0)*x5527*x5530))))));
j4eval[2]=IKsign(x5531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5532=(r01*sj5);
IkReal x5533=(cj1*sj2);
IkReal x5534=(cj2*sj1);
IkReal x5535=((1.0)*r02);
IkReal x5536=((1.0)*cj5*r00);
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal(((((-1.0)*x5534*x5536))+((x5532*x5533))+((x5532*x5534))+(((-1.0)*x5533*x5536)))),IkReal(((((-1.0)*x5534*x5535))+(((-1.0)*x5533*x5535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
CheckValue<IkReal> x5538=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5537.value)+(((1.5707963267949)*(x5538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5539=IKcos(j4);
IkReal x5540=IKsin(j4);
IkReal x5541=(cj5*r00);
IkReal x5542=(cj5*r10);
IkReal x5543=(r21*sj5);
IkReal x5544=(cj5*r20);
IkReal x5545=((1.0)*x5539);
IkReal x5546=((1.0)*x5540);
IkReal x5547=(sj5*x5540);
IkReal x5548=(sj5*x5539);
evalcond[0]=((((-1.0)*x5541*x5545))+((r02*x5540))+((r01*x5548)));
evalcond[1]=((((-1.0)*x5544*x5546))+((x5540*x5543))+(((-1.0)*r22*x5545)));
evalcond[2]=((((-1.0)*x5542*x5546))+((r11*x5547))+(((-1.0)*r12*x5545)));
evalcond[3]=((1.0)+(((-1.0)*x5541*x5546))+(((-1.0)*r02*x5545))+((r01*x5547)));
evalcond[4]=(((x5539*x5543))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5544*x5545))+((r22*x5540)));
evalcond[5]=((((-1.0)*x5542*x5545))+((r12*x5540))+(((-1.0)*sj1*sj2))+((r11*x5548))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5549=((1.0)*cj5);
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5549))+(((-1.0)*r20*sj5)))),-1);
if(!x5550.valid){
continue;
}
CheckValue<IkReal> x5551 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x5549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5550.value)))+(x5551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5552=IKcos(j4);
IkReal x5553=IKsin(j4);
IkReal x5554=(cj5*r00);
IkReal x5555=(cj5*r10);
IkReal x5556=(r21*sj5);
IkReal x5557=(cj5*r20);
IkReal x5558=((1.0)*x5552);
IkReal x5559=((1.0)*x5553);
IkReal x5560=(sj5*x5553);
IkReal x5561=(sj5*x5552);
evalcond[0]=(((r02*x5553))+(((-1.0)*x5554*x5558))+((r01*x5561)));
evalcond[1]=(((x5553*x5556))+(((-1.0)*x5557*x5559))+(((-1.0)*r22*x5558)));
evalcond[2]=((((-1.0)*x5555*x5559))+(((-1.0)*r12*x5558))+((r11*x5560)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5558))+(((-1.0)*x5554*x5559))+((r01*x5560)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5552*x5556))+((r22*x5553))+(((-1.0)*x5557*x5558)));
evalcond[5]=((((-1.0)*x5555*x5558))+(((-1.0)*sj1*sj2))+((r12*x5553))+((r11*x5561))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5562 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5562.valid){
continue;
}
CheckValue<IkReal> x5563=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5562.value)+(((1.5707963267949)*(x5563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5564=IKcos(j4);
IkReal x5565=IKsin(j4);
IkReal x5566=(cj5*r00);
IkReal x5567=(cj5*r10);
IkReal x5568=(r21*sj5);
IkReal x5569=(cj5*r20);
IkReal x5570=((1.0)*x5564);
IkReal x5571=((1.0)*x5565);
IkReal x5572=(sj5*x5565);
IkReal x5573=(sj5*x5564);
evalcond[0]=(((r02*x5565))+((r01*x5573))+(((-1.0)*x5566*x5570)));
evalcond[1]=(((x5565*x5568))+(((-1.0)*x5569*x5571))+(((-1.0)*r22*x5570)));
evalcond[2]=((((-1.0)*r12*x5570))+((r11*x5572))+(((-1.0)*x5567*x5571)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5570))+((r01*x5572))+(((-1.0)*x5566*x5571)));
evalcond[4]=(((cj2*sj1))+((x5564*x5568))+((cj1*sj2))+((r22*x5565))+(((-1.0)*x5569*x5570)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x5573))+((r12*x5565))+((cj1*cj2))+(((-1.0)*x5567*x5570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5574=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5574;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5575=((1.0)*cj5);
IkReal x5576=((((-1.0)*r11*x5575))+(((-1.0)*r10*sj5)));
j4eval[0]=x5576;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5575)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5577=cj5*cj5;
IkReal x5578=r01*r01;
IkReal x5579=(cj5*r00);
IkReal x5580=(r01*sj5);
IkReal x5581=(x5578+(((-1.0)*x5577*x5578))+((x5577*(r00*r00)))+(((-2.0)*x5579*x5580))+(r02*r02));
j4eval[0]=x5581;
j4eval[1]=IKsign(x5581);
j4eval[2]=((IKabs((x5580+(((-1.0)*x5579)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5582=cj5*cj5;
IkReal x5583=r01*r01;
IkReal x5584=(r01*sj5);
IkReal x5585=(cj5*r00);
CheckValue<IkReal> x5586=IKPowWithIntegerCheck(IKsign((x5583+(((-2.0)*x5584*x5585))+((x5582*(r00*r00)))+(r02*r02)+(((-1.0)*x5582*x5583)))),-1);
if(!x5586.valid){
continue;
}
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal((x5584+(((-1.0)*x5585)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5586.value)))+(x5587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5588=IKcos(j4);
IkReal x5589=IKsin(j4);
IkReal x5590=(cj5*r00);
IkReal x5591=(cj5*r10);
IkReal x5592=(r21*sj5);
IkReal x5593=(cj5*r20);
IkReal x5594=((1.0)*x5588);
IkReal x5595=((1.0)*x5589);
IkReal x5596=(sj5*x5589);
IkReal x5597=(sj5*x5588);
evalcond[0]=((((-1.0)*x5590*x5594))+((r02*x5589))+((r01*x5597)));
evalcond[1]=((((-1.0)*x5593*x5595))+(((-1.0)*r22*x5594))+((x5589*x5592)));
evalcond[2]=((((-1.0)*r12*x5594))+((r11*x5596))+(((-1.0)*x5591*x5595)));
evalcond[3]=((-1.0)+(((-1.0)*x5590*x5595))+(((-1.0)*r02*x5594))+((r01*x5596)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5593*x5594))+((x5588*x5592))+((r22*x5589)));
evalcond[5]=(((r11*x5597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5589))+(((-1.0)*x5591*x5594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5598=((1.0)*cj5);
CheckValue<IkReal> x5599 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5599.valid){
continue;
}
CheckValue<IkReal> x5600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5598))+(((-1.0)*r10*sj5)))),-1);
if(!x5600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5599.value)+(((1.5707963267949)*(x5600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5601=IKcos(j4);
IkReal x5602=IKsin(j4);
IkReal x5603=(cj5*r00);
IkReal x5604=(cj5*r10);
IkReal x5605=(r21*sj5);
IkReal x5606=(cj5*r20);
IkReal x5607=((1.0)*x5601);
IkReal x5608=((1.0)*x5602);
IkReal x5609=(sj5*x5602);
IkReal x5610=(sj5*x5601);
evalcond[0]=(((r02*x5602))+(((-1.0)*x5603*x5607))+((r01*x5610)));
evalcond[1]=((((-1.0)*r22*x5607))+((x5602*x5605))+(((-1.0)*x5606*x5608)));
evalcond[2]=((((-1.0)*r12*x5607))+((r11*x5609))+(((-1.0)*x5604*x5608)));
evalcond[3]=((-1.0)+(((-1.0)*x5603*x5608))+((r01*x5609))+(((-1.0)*r02*x5607)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5606*x5607))+((x5601*x5605))+((r22*x5602)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5602))+((r11*x5610))+(((-1.0)*x5604*x5607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5611.value)))+(x5612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5613=IKcos(j4);
IkReal x5614=IKsin(j4);
IkReal x5615=(cj5*r00);
IkReal x5616=(cj5*r10);
IkReal x5617=(r21*sj5);
IkReal x5618=(cj5*r20);
IkReal x5619=((1.0)*x5613);
IkReal x5620=((1.0)*x5614);
IkReal x5621=(sj5*x5614);
IkReal x5622=(sj5*x5613);
evalcond[0]=(((r02*x5614))+((r01*x5622))+(((-1.0)*x5615*x5619)));
evalcond[1]=((((-1.0)*x5618*x5620))+(((-1.0)*r22*x5619))+((x5614*x5617)));
evalcond[2]=((((-1.0)*r12*x5619))+((r11*x5621))+(((-1.0)*x5616*x5620)));
evalcond[3]=((-1.0)+((r01*x5621))+(((-1.0)*x5615*x5620))+(((-1.0)*r02*x5619)));
evalcond[4]=(((x5613*x5617))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5618*x5619))+((r22*x5614)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5614))+((r11*x5622))+(((-1.0)*x5616*x5619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5624 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5624)==0){
continue;
}
IkReal x5623=pow(x5624,-0.5);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5625.value));
IkReal gconst127=((-1.0)*r11*x5623);
IkReal gconst128=(r10*x5623);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
IkReal x5627=((-1.0)*(x5629.value));
IkReal x5628=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5627;
IkReal gconst126=x5627;
IkReal gconst127=((-1.0)*r11*x5628);
IkReal gconst128=(r10*x5628);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5630=((1.0)*gconst128);
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5630))+(((-1.0)*cj0*r00*x5630))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
CheckValue<IkReal> x5632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5630)))),-1);
if(!x5632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5631.value)+(((1.5707963267949)*(x5632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5633=IKsin(j4);
IkReal x5634=IKcos(j4);
IkReal x5635=(cj1*cj2);
IkReal x5636=(gconst127*r01);
IkReal x5637=(gconst128*r10);
IkReal x5638=(gconst128*r00);
IkReal x5639=(gconst128*r20);
IkReal x5640=((1.0)*cj0);
IkReal x5641=(sj1*sj2);
IkReal x5642=((1.0)*x5634);
IkReal x5643=((1.0)*x5633);
IkReal x5644=(gconst127*x5634);
IkReal x5645=(gconst127*x5633);
evalcond[0]=((((-1.0)*r22*x5642))+((r21*x5645))+(((-1.0)*x5639*x5643)));
evalcond[1]=(sj0+(((-1.0)*x5638*x5643))+(((-1.0)*r02*x5642))+((x5633*x5636)));
evalcond[2]=((((-1.0)*r12*x5642))+(((-1.0)*x5640))+((r11*x5645))+(((-1.0)*x5637*x5643)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5633))+((r21*x5644))+(((-1.0)*x5639*x5642)));
evalcond[4]=((((-1.0)*x5638*x5642))+((cj0*x5635))+(((-1.0)*x5640*x5641))+((x5634*x5636))+((r02*x5633)));
evalcond[5]=(((r12*x5633))+(((-1.0)*sj0*x5641))+((r11*x5644))+((sj0*x5635))+(((-1.0)*x5637*x5642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5646 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5646.valid){
continue;
}
CheckValue<IkReal> x5647=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5646.value)+(((1.5707963267949)*(x5647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5648=IKsin(j4);
IkReal x5649=IKcos(j4);
IkReal x5650=(cj1*cj2);
IkReal x5651=(gconst127*r01);
IkReal x5652=(gconst128*r10);
IkReal x5653=(gconst128*r00);
IkReal x5654=(gconst128*r20);
IkReal x5655=((1.0)*cj0);
IkReal x5656=(sj1*sj2);
IkReal x5657=((1.0)*x5649);
IkReal x5658=((1.0)*x5648);
IkReal x5659=(gconst127*x5649);
IkReal x5660=(gconst127*x5648);
evalcond[0]=((((-1.0)*r22*x5657))+(((-1.0)*x5654*x5658))+((r21*x5660)));
evalcond[1]=(sj0+(((-1.0)*x5653*x5658))+((x5648*x5651))+(((-1.0)*r02*x5657)));
evalcond[2]=((((-1.0)*r12*x5657))+(((-1.0)*x5652*x5658))+(((-1.0)*x5655))+((r11*x5660)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5654*x5657))+((cj1*sj2))+((r22*x5648))+((r21*x5659)));
evalcond[4]=(((cj0*x5650))+(((-1.0)*x5653*x5657))+(((-1.0)*x5655*x5656))+((x5649*x5651))+((r02*x5648)));
evalcond[5]=((((-1.0)*x5652*x5657))+((r12*x5648))+((sj0*x5650))+(((-1.0)*sj0*x5656))+((r11*x5659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5662 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5662)==0){
continue;
}
IkReal x5661=pow(x5662,-0.5);
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5663.value))));
IkReal gconst130=((1.0)*r11*x5661);
IkReal gconst131=((-1.0)*r10*x5661);
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5664.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5667 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5667.valid){
continue;
}
IkReal x5665=((1.0)*(x5667.value));
IkReal x5666=x5661;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5665)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5665)));
IkReal gconst130=((1.0)*r11*x5666);
IkReal gconst131=((-1.0)*r10*x5666);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5670 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5670.valid){
continue;
}
IkReal x5668=((1.0)*(x5670.value));
IkReal x5669=x5661;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5668)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5668)));
IkReal gconst130=((1.0)*r11*x5669);
IkReal gconst131=((-1.0)*r10*x5669);
IkReal x5671=r12*r12;
IkReal x5672=(cj0*r02);
IkReal x5673=x5661;
IkReal x5674=(sj0*x5673);
j4eval[0]=((IKabs((x5672+((r12*sj0)))))+(IKabs(((((-1.0)*x5674))+((r12*x5672*x5673))+((x5671*x5674))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
IkReal x5675=((1.0)*(x5677.value));
IkReal x5676=x5661;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5675)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5675)));
IkReal gconst130=((1.0)*r11*x5676);
IkReal gconst131=((-1.0)*r10*x5676);
IkReal x5678=(cj1*sj2);
IkReal x5679=(cj2*sj1);
IkReal x5680=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5686=IKPowWithIntegerCheck(x5680,-1);
if(!x5686.valid){
continue;
}
IkReal x5681=x5686.value;
IkReal x5682=((1.0)*x5681);
IkReal x5683=x5661;
IkReal x5684=(r12*r22*x5683);
IkReal x5685=((((-1.0)*x5682*(r10*r10)*(r20*r20)))+(((-1.0)*x5682*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5681)));
j4eval[0]=x5685;
j4eval[1]=((IKabs((((x5679*x5684))+((x5678*x5684)))))+(IKabs((((r22*x5678))+((r22*x5679))))));
j4eval[2]=IKsign(x5685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5687=(cj2*sj1);
IkReal x5688=(cj1*sj2);
IkReal x5689=(gconst130*r21);
IkReal x5690=((1.0)*gconst131*r20);
CheckValue<IkReal> x5691=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst131*r20*x5689))+(((-1.0)*(x5689*x5689)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst131*r20*x5690)))),-1);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal((((r22*x5688))+((r22*x5687)))),IkReal((((x5687*x5689))+(((-1.0)*x5687*x5690))+((x5688*x5689))+(((-1.0)*x5688*x5690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5691.value)))+(x5692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j4);
IkReal x5694=IKcos(j4);
IkReal x5695=(cj1*cj2);
IkReal x5696=(gconst131*r10);
IkReal x5697=(gconst130*r11);
IkReal x5698=(gconst131*r20);
IkReal x5699=(gconst131*r00);
IkReal x5700=((1.0)*cj0);
IkReal x5701=(sj1*sj2);
IkReal x5702=((1.0)*x5694);
IkReal x5703=((1.0)*x5693);
IkReal x5704=(gconst130*x5694);
IkReal x5705=(gconst130*x5693);
evalcond[0]=((((-1.0)*r22*x5702))+(((-1.0)*x5698*x5703))+((r21*x5705)));
evalcond[1]=(sj0+(((-1.0)*x5699*x5703))+((r01*x5705))+(((-1.0)*r02*x5702)));
evalcond[2]=((((-1.0)*r12*x5702))+((x5693*x5697))+(((-1.0)*x5700))+(((-1.0)*x5696*x5703)));
evalcond[3]=(((cj2*sj1))+((r22*x5693))+((cj1*sj2))+(((-1.0)*x5698*x5702))+((r21*x5704)));
evalcond[4]=((((-1.0)*x5700*x5701))+((r02*x5693))+(((-1.0)*x5699*x5702))+((r01*x5704))+((cj0*x5695)));
evalcond[5]=(((x5694*x5697))+(((-1.0)*sj0*x5701))+((sj0*x5695))+((r12*x5693))+(((-1.0)*x5696*x5702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5706=((1.0)*gconst131);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*cj0*r00*x5706))+((gconst130*r11*sj0))+(((-1.0)*r10*sj0*x5706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
CheckValue<IkReal> x5708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5706))+(((-1.0)*gconst130*r20)))),-1);
if(!x5708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5707.value)+(((1.5707963267949)*(x5708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5709=IKsin(j4);
IkReal x5710=IKcos(j4);
IkReal x5711=(cj1*cj2);
IkReal x5712=(gconst131*r10);
IkReal x5713=(gconst130*r11);
IkReal x5714=(gconst131*r20);
IkReal x5715=(gconst131*r00);
IkReal x5716=((1.0)*cj0);
IkReal x5717=(sj1*sj2);
IkReal x5718=((1.0)*x5710);
IkReal x5719=((1.0)*x5709);
IkReal x5720=(gconst130*x5710);
IkReal x5721=(gconst130*x5709);
evalcond[0]=(((r21*x5721))+(((-1.0)*r22*x5718))+(((-1.0)*x5714*x5719)));
evalcond[1]=(sj0+((r01*x5721))+(((-1.0)*x5715*x5719))+(((-1.0)*r02*x5718)));
evalcond[2]=((((-1.0)*x5712*x5719))+(((-1.0)*r12*x5718))+(((-1.0)*x5716))+((x5709*x5713)));
evalcond[3]=(((cj2*sj1))+((r21*x5720))+(((-1.0)*x5714*x5718))+((cj1*sj2))+((r22*x5709)));
evalcond[4]=(((r02*x5709))+((r01*x5720))+(((-1.0)*x5715*x5718))+((cj0*x5711))+(((-1.0)*x5716*x5717)));
evalcond[5]=(((x5710*x5713))+((r12*x5709))+((sj0*x5711))+(((-1.0)*x5712*x5718))+(((-1.0)*sj0*x5717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5722=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5722.valid){
continue;
}
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5722.value)))+(x5723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5724=IKsin(j4);
IkReal x5725=IKcos(j4);
IkReal x5726=(cj1*cj2);
IkReal x5727=(gconst131*r10);
IkReal x5728=(gconst130*r11);
IkReal x5729=(gconst131*r20);
IkReal x5730=(gconst131*r00);
IkReal x5731=((1.0)*cj0);
IkReal x5732=(sj1*sj2);
IkReal x5733=((1.0)*x5725);
IkReal x5734=((1.0)*x5724);
IkReal x5735=(gconst130*x5725);
IkReal x5736=(gconst130*x5724);
evalcond[0]=(((r21*x5736))+(((-1.0)*x5729*x5734))+(((-1.0)*r22*x5733)));
evalcond[1]=(sj0+((r01*x5736))+(((-1.0)*r02*x5733))+(((-1.0)*x5730*x5734)));
evalcond[2]=((((-1.0)*x5731))+((x5724*x5728))+(((-1.0)*r12*x5733))+(((-1.0)*x5727*x5734)));
evalcond[3]=(((cj2*sj1))+((r21*x5735))+(((-1.0)*x5729*x5733))+((cj1*sj2))+((r22*x5724)));
evalcond[4]=(((r01*x5735))+(((-1.0)*x5730*x5733))+((cj0*x5726))+(((-1.0)*x5731*x5732))+((r02*x5724)));
evalcond[5]=(((sj0*x5726))+((x5725*x5728))+((r12*x5724))+(((-1.0)*x5727*x5733))+(((-1.0)*sj0*x5732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5737=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5737;
j4eval[1]=IKsign(x5737);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5738=((1.0)*cj5);
IkReal x5739=((((-1.0)*r21*x5738))+(((-1.0)*r20*sj5)));
j4eval[0]=x5739;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5738))))));
j4eval[2]=IKsign(x5739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5740=cj5*cj5;
IkReal x5741=r11*r11;
IkReal x5742=(r11*sj5);
IkReal x5743=(cj5*r10);
IkReal x5744=((r12*r12)+(((-2.0)*x5742*x5743))+((x5740*(r10*r10)))+x5741+(((-1.0)*x5740*x5741)));
j4eval[0]=x5744;
j4eval[1]=IKsign(x5744);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5743))+x5742))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5745=cj5*cj5;
IkReal x5746=r11*r11;
IkReal x5747=(cj5*r10);
IkReal x5748=(r11*sj5);
CheckValue<IkReal> x5749 = IKatan2WithCheck(IkReal(((((-1.0)*x5747))+x5748)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
CheckValue<IkReal> x5750=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5747*x5748))+(((-1.0)*x5745*x5746))+((x5745*(r10*r10)))+x5746)),-1);
if(!x5750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5749.value)+(((1.5707963267949)*(x5750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5751=IKcos(j4);
IkReal x5752=IKsin(j4);
IkReal x5753=(cj5*r00);
IkReal x5754=(cj5*r10);
IkReal x5755=(r21*sj5);
IkReal x5756=(cj5*r20);
IkReal x5757=((1.0)*x5751);
IkReal x5758=((1.0)*x5752);
IkReal x5759=(sj5*x5752);
IkReal x5760=(sj5*x5751);
evalcond[0]=(((r11*x5760))+(((-1.0)*x5754*x5757))+((r12*x5752)));
evalcond[1]=((((-1.0)*r22*x5757))+((x5752*x5755))+(((-1.0)*x5756*x5758)));
evalcond[2]=(((r01*x5759))+(((-1.0)*r02*x5757))+(((-1.0)*x5753*x5758)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5757))+((r11*x5759))+(((-1.0)*x5754*x5758)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5751*x5755))+(((-1.0)*x5756*x5757))+((r22*x5752)));
evalcond[5]=(((r01*x5760))+(((-1.0)*sj1*sj2))+(((-1.0)*x5753*x5757))+((cj1*cj2))+((r02*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5761=((1.0)*cj5);
CheckValue<IkReal> x5762 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5762.valid){
continue;
}
CheckValue<IkReal> x5763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5761))+(((-1.0)*r20*sj5)))),-1);
if(!x5763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5762.value)+(((1.5707963267949)*(x5763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5764=IKcos(j4);
IkReal x5765=IKsin(j4);
IkReal x5766=(cj5*r00);
IkReal x5767=(cj5*r10);
IkReal x5768=(r21*sj5);
IkReal x5769=(cj5*r20);
IkReal x5770=((1.0)*x5764);
IkReal x5771=((1.0)*x5765);
IkReal x5772=(sj5*x5765);
IkReal x5773=(sj5*x5764);
evalcond[0]=((((-1.0)*x5767*x5770))+((r11*x5773))+((r12*x5765)));
evalcond[1]=((((-1.0)*x5769*x5771))+((x5765*x5768))+(((-1.0)*r22*x5770)));
evalcond[2]=((((-1.0)*x5766*x5771))+((r01*x5772))+(((-1.0)*r02*x5770)));
evalcond[3]=((-1.0)+(((-1.0)*x5767*x5771))+(((-1.0)*r12*x5770))+((r11*x5772)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5769*x5770))+((cj1*sj2))+((r22*x5765))+((x5764*x5768)));
evalcond[5]=((((-1.0)*x5766*x5770))+((r01*x5773))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x5765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5774 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5774.valid){
continue;
}
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5774.value)+(((1.5707963267949)*(x5775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5776=IKcos(j4);
IkReal x5777=IKsin(j4);
IkReal x5778=(cj5*r00);
IkReal x5779=(cj5*r10);
IkReal x5780=(r21*sj5);
IkReal x5781=(cj5*r20);
IkReal x5782=((1.0)*x5776);
IkReal x5783=((1.0)*x5777);
IkReal x5784=(sj5*x5777);
IkReal x5785=(sj5*x5776);
evalcond[0]=(((r11*x5785))+(((-1.0)*x5779*x5782))+((r12*x5777)));
evalcond[1]=(((x5777*x5780))+(((-1.0)*r22*x5782))+(((-1.0)*x5781*x5783)));
evalcond[2]=(((r01*x5784))+(((-1.0)*x5778*x5783))+(((-1.0)*r02*x5782)));
evalcond[3]=((-1.0)+((r11*x5784))+(((-1.0)*x5779*x5783))+(((-1.0)*r12*x5782)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5777))+((x5776*x5780))+(((-1.0)*x5781*x5782)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x5785))+(((-1.0)*x5778*x5782))+((r02*x5777))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5786=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5786;
j4eval[1]=IKsign(x5786);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5787=((1.0)*cj5);
IkReal x5788=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5787)));
j4eval[0]=x5788;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5787))+((r21*sj5))))));
j4eval[2]=IKsign(x5788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5789=cj5*cj5;
IkReal x5790=r11*r11;
IkReal x5791=(cj5*r10);
IkReal x5792=(r11*sj5);
IkReal x5793=((((2.0)*x5791*x5792))+((x5789*x5790))+(((-1.0)*(r12*r12)))+(((-1.0)*x5790))+(((-1.0)*x5789*(r10*r10))));
j4eval[0]=x5793;
j4eval[1]=IKsign(x5793);
j4eval[2]=((IKabs(((((-1.0)*x5791))+x5792)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5794=cj5*cj5;
IkReal x5795=r11*r11;
IkReal x5796=(cj5*r10);
IkReal x5797=(r11*sj5);
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5794*(r10*r10)))+((x5794*x5795))+(((2.0)*x5796*x5797))+(((-1.0)*(r12*r12)))+(((-1.0)*x5795)))),-1);
if(!x5798.valid){
continue;
}
CheckValue<IkReal> x5799 = IKatan2WithCheck(IkReal(((((-1.0)*x5796))+x5797)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5798.value)))+(x5799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5800=IKcos(j4);
IkReal x5801=IKsin(j4);
IkReal x5802=(cj5*r00);
IkReal x5803=(cj5*r10);
IkReal x5804=(r21*sj5);
IkReal x5805=(cj5*r20);
IkReal x5806=((1.0)*x5800);
IkReal x5807=((1.0)*x5801);
IkReal x5808=(sj5*x5801);
IkReal x5809=(sj5*x5800);
evalcond[0]=(((r11*x5809))+(((-1.0)*x5803*x5806))+((r12*x5801)));
evalcond[1]=((((-1.0)*r22*x5806))+(((-1.0)*x5805*x5807))+((x5801*x5804)));
evalcond[2]=(((r01*x5808))+(((-1.0)*x5802*x5807))+(((-1.0)*r02*x5806)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5806))+((r11*x5808))+(((-1.0)*x5803*x5807)));
evalcond[4]=(((x5800*x5804))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5805*x5806))+((r22*x5801)));
evalcond[5]=(((r01*x5809))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5801))+(((-1.0)*x5802*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5810=((1.0)*cj5);
CheckValue<IkReal> x5811 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5811.valid){
continue;
}
CheckValue<IkReal> x5812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5810)))),-1);
if(!x5812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5811.value)+(((1.5707963267949)*(x5812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5813=IKcos(j4);
IkReal x5814=IKsin(j4);
IkReal x5815=(cj5*r00);
IkReal x5816=(cj5*r10);
IkReal x5817=(r21*sj5);
IkReal x5818=(cj5*r20);
IkReal x5819=((1.0)*x5813);
IkReal x5820=((1.0)*x5814);
IkReal x5821=(sj5*x5814);
IkReal x5822=(sj5*x5813);
evalcond[0]=(((r11*x5822))+((r12*x5814))+(((-1.0)*x5816*x5819)));
evalcond[1]=(((x5814*x5817))+(((-1.0)*x5818*x5820))+(((-1.0)*r22*x5819)));
evalcond[2]=((((-1.0)*r02*x5819))+((r01*x5821))+(((-1.0)*x5815*x5820)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5819))+((r11*x5821))+(((-1.0)*x5816*x5820)));
evalcond[4]=(((cj2*sj1))+((x5813*x5817))+((r22*x5814))+((cj1*sj2))+(((-1.0)*x5818*x5819)));
evalcond[5]=((((-1.0)*x5815*x5819))+((r02*x5814))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5823=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5823.valid){
continue;
}
CheckValue<IkReal> x5824 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5823.value)))+(x5824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5825=IKcos(j4);
IkReal x5826=IKsin(j4);
IkReal x5827=(cj5*r00);
IkReal x5828=(cj5*r10);
IkReal x5829=(r21*sj5);
IkReal x5830=(cj5*r20);
IkReal x5831=((1.0)*x5825);
IkReal x5832=((1.0)*x5826);
IkReal x5833=(sj5*x5826);
IkReal x5834=(sj5*x5825);
evalcond[0]=(((r12*x5826))+((r11*x5834))+(((-1.0)*x5828*x5831)));
evalcond[1]=((((-1.0)*r22*x5831))+(((-1.0)*x5830*x5832))+((x5826*x5829)));
evalcond[2]=((((-1.0)*r02*x5831))+((r01*x5833))+(((-1.0)*x5827*x5832)));
evalcond[3]=((1.0)+((r11*x5833))+(((-1.0)*x5828*x5832))+(((-1.0)*r12*x5831)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5830*x5831))+((cj1*sj2))+((x5825*x5829))+((r22*x5826)));
evalcond[5]=(((r02*x5826))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5834))+(((-1.0)*x5827*x5831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5835=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5835);
rxp0_2=(py*r00);
rxp1_0=(r21*x5835);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5836=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5836);
rxp0_2=(py*r00);
rxp1_0=(r21*x5836);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5837=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5837);
rxp0_2=(py*r00);
rxp1_0=(r21*x5837);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5840=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5840.valid){
continue;
}
IkReal x5838=x5840.value;
IkReal x5839=(cj0*x5838);
cj4array[0]=(((sj1*sj2*x5839))+(((-1.0)*cj1*cj2*x5839)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5841=IKsin(j4);
IkReal x5842=IKcos(j4);
IkReal x5843=(r21*sj5);
IkReal x5844=((1.0)*x5842);
IkReal x5845=((1.0)*cj5*x5841);
evalcond[0]=(r12*x5841);
evalcond[1]=((((-1.0)*r12*x5844))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x5845))+((x5841*x5843)));
evalcond[3]=((((-1.0)*r00*x5845))+((r01*sj5*x5841)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5842*x5843))+(((-1.0)*cj5*r20*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5848=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5848.valid){
continue;
}
IkReal x5846=x5848.value;
IkReal x5847=((1.0)*x5846);
cj4array[0]=((((-1.0)*cj1*sj2*x5847))+(((-1.0)*cj2*sj1*x5847)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5849=IKsin(j4);
IkReal x5850=IKcos(j4);
IkReal x5851=((1.0)*cj0);
IkReal x5852=(r01*sj5);
IkReal x5853=((1.0)*cj5*r00);
evalcond[0]=(r12*x5849);
evalcond[1]=((((-1.0)*x5851))+(((-1.0)*r12*x5850)));
evalcond[2]=((((-1.0)*cj5*r20*x5849))+((r21*sj5*x5849)));
evalcond[3]=((((-1.0)*x5849*x5853))+((x5849*x5852)));
evalcond[4]=((((-1.0)*sj1*sj2*x5851))+((cj0*cj1*cj2))+((x5850*x5852))+(((-1.0)*x5850*x5853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5854=IKPowWithIntegerCheck(r12,-1);
if(!x5854.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5854.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5855=IKsin(j4);
IkReal x5856=IKcos(j4);
IkReal x5857=((1.0)*cj5*r00);
IkReal x5858=(sj5*x5856);
IkReal x5859=(sj5*x5855);
IkReal x5860=((1.0)*cj5*r20);
evalcond[0]=(r12*x5855);
evalcond[1]=((((-1.0)*x5855*x5860))+((r21*x5859)));
evalcond[2]=(((r01*x5859))+(((-1.0)*x5855*x5857)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5856*x5860))+((r21*x5858)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r01*x5858))+(((-1.0)*x5856*x5857))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5861=((1.0)*cj5);
CheckValue<IkReal> x5862 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5861))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5862.valid){
continue;
}
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5861))+(((-1.0)*r20*sj5)))),-1);
if(!x5863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5862.value)+(((1.5707963267949)*(x5863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5864=IKsin(j4);
IkReal x5865=IKcos(j4);
IkReal x5866=(cj5*r00);
IkReal x5867=(cj1*cj2);
IkReal x5868=(cj5*r10);
IkReal x5869=(r21*sj5);
IkReal x5870=(cj5*r20);
IkReal x5871=((1.0)*x5865);
IkReal x5872=((1.0)*x5864);
IkReal x5873=(sj5*x5864);
IkReal x5874=(sj5*x5865);
IkReal x5875=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x5871))+(((-1.0)*x5870*x5872))+((x5864*x5869)));
evalcond[1]=(sj0+(((-1.0)*x5866*x5872))+(((-1.0)*r02*x5871))+((r01*x5873)));
evalcond[2]=((((-1.0)*r12*x5871))+((r11*x5873))+(((-1.0)*x5868*x5872))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x5864))+((cj1*sj2))+(((-1.0)*x5870*x5871))+((x5865*x5869)));
evalcond[4]=((((-1.0)*cj0*x5875))+(((-1.0)*x5866*x5871))+((r02*x5864))+((cj0*x5867))+((r01*x5874)));
evalcond[5]=((((-1.0)*sj0*x5875))+((sj0*x5867))+((r11*x5874))+((r12*x5864))+(((-1.0)*x5868*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5876=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5876.valid){
continue;
}
CheckValue<IkReal> x5877 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5876.value)))+(x5877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5878=IKsin(j4);
IkReal x5879=IKcos(j4);
IkReal x5880=(cj5*r00);
IkReal x5881=(cj1*cj2);
IkReal x5882=(cj5*r10);
IkReal x5883=(r21*sj5);
IkReal x5884=(cj5*r20);
IkReal x5885=((1.0)*x5879);
IkReal x5886=((1.0)*x5878);
IkReal x5887=(sj5*x5878);
IkReal x5888=(sj5*x5879);
IkReal x5889=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5884*x5886))+((x5878*x5883))+(((-1.0)*r22*x5885)));
evalcond[1]=(sj0+((r01*x5887))+(((-1.0)*x5880*x5886))+(((-1.0)*r02*x5885)));
evalcond[2]=((((-1.0)*x5882*x5886))+((r11*x5887))+(((-1.0)*r12*x5885))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((x5879*x5883))+((cj1*sj2))+((r22*x5878))+(((-1.0)*x5884*x5885)));
evalcond[4]=(((r01*x5888))+(((-1.0)*x5880*x5885))+((r02*x5878))+(((-1.0)*cj0*x5889))+((cj0*x5881)));
evalcond[5]=((((-1.0)*x5882*x5885))+((r11*x5888))+((r12*x5878))+(((-1.0)*sj0*x5889))+((sj0*x5881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5890=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5890.valid){
continue;
}
CheckValue<IkReal> x5891 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5890.value)))+(x5891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5892=IKsin(j4);
IkReal x5893=IKcos(j4);
IkReal x5894=(cj5*r00);
IkReal x5895=(cj1*cj2);
IkReal x5896=(cj5*r10);
IkReal x5897=(r21*sj5);
IkReal x5898=(cj5*r20);
IkReal x5899=((1.0)*x5893);
IkReal x5900=((1.0)*x5892);
IkReal x5901=(sj5*x5892);
IkReal x5902=(sj5*x5893);
IkReal x5903=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x5899))+(((-1.0)*x5898*x5900))+((x5892*x5897)));
evalcond[1]=(sj0+(((-1.0)*x5894*x5900))+(((-1.0)*r02*x5899))+((r01*x5901)));
evalcond[2]=((((-1.0)*r12*x5899))+(((-1.0)*x5896*x5900))+(((-1.0)*cj0))+((r11*x5901)));
evalcond[3]=(((r22*x5892))+((cj2*sj1))+(((-1.0)*x5898*x5899))+((cj1*sj2))+((x5893*x5897)));
evalcond[4]=(((cj0*x5895))+(((-1.0)*cj0*x5903))+((r02*x5892))+(((-1.0)*x5894*x5899))+((r01*x5902)));
evalcond[5]=((((-1.0)*x5896*x5899))+((sj0*x5895))+(((-1.0)*sj0*x5903))+((r12*x5892))+((r11*x5902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5904=r21*r21;
IkReal x5905=cj5*cj5;
IkReal x5906=(cj2*sj1);
IkReal x5907=(cj1*sj2);
IkReal x5908=(r21*sj5);
IkReal x5909=((1.0)*cj5*r20);
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+((x5904*x5905))+(((2.0)*cj5*r20*x5908))+(((-1.0)*x5905*(r20*r20)))+(((-1.0)*x5904)))),-1);
if(!x5910.valid){
continue;
}
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal((((r22*x5906))+((r22*x5907)))),IkReal(((((-1.0)*x5907*x5909))+(((-1.0)*x5906*x5909))+((x5907*x5908))+((x5906*x5908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5910.value)))+(x5911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5912=IKsin(j4);
IkReal x5913=IKcos(j4);
IkReal x5914=(r21*sj5);
IkReal x5915=(cj5*r20);
IkReal x5916=((1.0)*x5913);
evalcond[0]=((((-1.0)*r22*x5916))+((x5912*x5914))+(((-1.0)*x5912*x5915)));
evalcond[1]=(((cj2*sj1))+((r22*x5912))+((cj1*sj2))+((x5913*x5914))+(((-1.0)*x5915*x5916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5917=(cj5*sj4);
IkReal x5918=(sj4*sj5);
if( IKabs((((r00*x5917))+(((-1.0)*r01*x5918))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x5917))+((r11*x5918))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x5917))+(((-1.0)*r01*x5918))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x5917))+((r11*x5918))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x5917))+(((-1.0)*r01*x5918))+((cj4*r02))), ((((-1.0)*r10*x5917))+((r11*x5918))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5919=IKcos(j0);
IkReal x5920=IKsin(j0);
IkReal x5921=(cj5*r01);
IkReal x5922=(r11*sj5);
IkReal x5923=(cj1*cj2);
IkReal x5924=(r00*sj5);
IkReal x5925=(cj5*r11);
IkReal x5926=((1.0)*cj4);
IkReal x5927=(r01*sj5);
IkReal x5928=(r10*sj5);
IkReal x5929=(sj1*x5919);
IkReal x5930=(cj1*x5920);
IkReal x5931=(cj5*x5926);
IkReal x5932=(cj1*x5919);
IkReal x5933=((1.0)*cj5*sj4);
IkReal x5934=(sj1*sj2*x5920);
evalcond[0]=((((-1.0)*r02*x5926))+(((-1.0)*r00*x5933))+((sj4*x5927))+x5920);
evalcond[1]=((((-1.0)*r12*x5926))+(((-1.0)*r10*x5933))+((sj4*x5922))+(((-1.0)*x5919)));
evalcond[2]=(((sj2*x5932))+((cj2*x5929))+x5924+x5921);
evalcond[3]=(((sj2*x5930))+((cj2*sj1*x5920))+x5925+x5928);
evalcond[4]=(((cj4*x5927))+(((-1.0)*sj2*x5929))+((x5919*x5923))+(((-1.0)*r00*x5931))+((r02*sj4)));
evalcond[5]=(((cj4*x5922))+(((-1.0)*x5934))+((x5920*x5923))+((r12*sj4))+(((-1.0)*r10*x5931)));
evalcond[6]=((((-0.39225)*x5919*x5923))+(((0.39225)*sj2*x5929))+(((-1.0)*px))+(((0.10915)*x5920))+(((-0.09465)*x5921))+(((-0.09465)*x5924))+(((-0.425)*x5932)));
evalcond[7]=((((-0.39225)*x5920*x5923))+(((-0.10915)*x5919))+(((-1.0)*py))+(((-0.09465)*x5925))+(((-0.09465)*x5928))+(((-0.425)*x5930))+(((0.39225)*x5934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5935=((1.0)*cj5);
IkReal x5936=((1.0)*sj5);
CheckValue<IkReal> x5937=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5937.valid){
continue;
}
CheckValue<IkReal> x5938 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5935))+(((-1.0)*r10*x5936)))),IkReal(((((-1.0)*r01*x5935))+(((-1.0)*r00*x5936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5938.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5937.value)))+(x5938.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5939=IKcos(j0);
IkReal x5940=IKsin(j0);
IkReal x5941=(cj5*r01);
IkReal x5942=(cj2*sj1);
IkReal x5943=(r00*sj5);
IkReal x5944=(cj5*r11);
IkReal x5945=((0.39225)*cj2);
IkReal x5946=(r10*sj5);
IkReal x5947=((0.39225)*sj1*sj2);
IkReal x5948=(cj1*x5939);
IkReal x5949=(cj1*x5940);
evalcond[0]=(((x5939*x5942))+x5943+x5941+((sj2*x5948)));
evalcond[1]=(((x5940*x5942))+x5946+x5944+((sj2*x5949)));
evalcond[2]=(((x5939*x5947))+(((-0.425)*x5948))+(((-1.0)*x5945*x5948))+(((-1.0)*px))+(((-0.09465)*x5943))+(((-0.09465)*x5941))+(((0.10915)*x5940)));
evalcond[3]=((((-0.425)*x5949))+(((-1.0)*x5945*x5949))+(((-1.0)*py))+(((-0.09465)*x5946))+(((-0.09465)*x5944))+(((-0.10915)*x5939))+((x5940*x5947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5950=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5950;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5951=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5951;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5952=((1.0)*cj5);
IkReal x5953=((((-1.0)*r21*x5952))+(((-1.0)*r20*sj5)));
j4eval[0]=x5953;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x5952))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x5952)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x5953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5954=((-1.0)*r20);
IkReal x5956 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5956)==0){
continue;
}
IkReal x5955=pow(x5956,-0.5);
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5954),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5957.value));
IkReal gconst115=(r21*x5955);
IkReal gconst116=(x5954*x5955);
CheckValue<IkReal> x5958 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5958.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5958.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5959=((-1.0)*r20);
IkReal x5960=x5955;
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5959),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
IkReal x5961=((-1.0)*(x5962.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5961;
IkReal gconst114=x5961;
IkReal gconst115=(r21*x5960);
IkReal gconst116=(x5959*x5960);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5963=((-1.0)*r20);
IkReal x5964=x5955;
CheckValue<IkReal> x5966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5963),IKFAST_ATAN2_MAGTHRESH);
if(!x5966.valid){
continue;
}
IkReal x5965=((-1.0)*(x5966.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5965;
IkReal gconst114=x5965;
IkReal gconst115=(r21*x5964);
IkReal gconst116=(x5963*x5964);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5967=((-1.0)*r20);
IkReal x5968=x5955;
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5967),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
IkReal x5969=((-1.0)*(x5970.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5969;
IkReal gconst114=x5969;
IkReal gconst115=(r21*x5968);
IkReal gconst116=(x5967*x5968);
IkReal x5971=((1.0)*(r22*r22));
CheckValue<IkReal> x5975=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5971))),-1);
if(!x5975.valid){
continue;
}
IkReal x5972=x5975.value;
IkReal x5973=((1.0)*x5972);
IkReal x5974=((((-1.0)*x5973*(r20*r20*r20*r20)))+(((-1.0)*x5971))+(((-2.0)*x5972*(r20*r20)*(r21*r21)))+(((-1.0)*x5973*(r21*r21*r21*r21))));
j4eval[0]=x5974;
j4eval[1]=IKsign(x5974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5976=(cj2*sj1);
IkReal x5977=(gconst115*r21);
IkReal x5978=(cj1*sj2);
IkReal x5979=((1.0)*gconst116*r20);
CheckValue<IkReal> x5980=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5979))+(((-1.0)*(x5977*x5977)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5977)))),-1);
if(!x5980.valid){
continue;
}
CheckValue<IkReal> x5981 = IKatan2WithCheck(IkReal((((r22*x5978))+((r22*x5976)))),IkReal((((x5976*x5977))+(((-1.0)*x5976*x5979))+(((-1.0)*x5978*x5979))+((x5977*x5978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5980.value)))+(x5981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5982=IKsin(j4);
IkReal x5983=IKcos(j4);
IkReal x5984=(cj1*cj2);
IkReal x5985=((1.0)*x5983);
IkReal x5986=(gconst115*x5982);
IkReal x5987=(gconst115*x5983);
IkReal x5988=((1.0)*sj1*sj2);
IkReal x5989=((1.0)*gconst116*x5982);
evalcond[0]=(((r21*x5986))+(((-1.0)*r22*x5985))+(((-1.0)*r20*x5989)));
evalcond[1]=(sj0+(((-1.0)*r02*x5985))+(((-1.0)*r00*x5989))+((r01*x5986)));
evalcond[2]=((((-1.0)*r12*x5985))+((r11*x5986))+(((-1.0)*r10*x5989))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r21*x5987))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5985))+((r22*x5982)));
evalcond[4]=((((-1.0)*gconst116*r00*x5985))+((r02*x5982))+((cj0*x5984))+(((-1.0)*cj0*x5988))+((r01*x5987)));
evalcond[5]=(((r12*x5982))+((r11*x5987))+((sj0*x5984))+(((-1.0)*gconst116*r10*x5985))+(((-1.0)*sj0*x5988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5990.value)+(((1.5707963267949)*(x5991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5992=IKsin(j4);
IkReal x5993=IKcos(j4);
IkReal x5994=(cj1*cj2);
IkReal x5995=((1.0)*x5993);
IkReal x5996=(gconst115*x5992);
IkReal x5997=(gconst115*x5993);
IkReal x5998=((1.0)*sj1*sj2);
IkReal x5999=((1.0)*gconst116*x5992);
evalcond[0]=((((-1.0)*r20*x5999))+((r21*x5996))+(((-1.0)*r22*x5995)));
evalcond[1]=(sj0+(((-1.0)*r02*x5995))+((r01*x5996))+(((-1.0)*r00*x5999)));
evalcond[2]=((((-1.0)*r12*x5995))+(((-1.0)*r10*x5999))+((r11*x5996))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5997))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5995))+((r22*x5992)));
evalcond[4]=(((r02*x5992))+((cj0*x5994))+(((-1.0)*cj0*x5998))+((r01*x5997))+(((-1.0)*gconst116*r00*x5995)));
evalcond[5]=(((r12*x5992))+((sj0*x5994))+((r11*x5997))+(((-1.0)*sj0*x5998))+(((-1.0)*gconst116*r10*x5995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6000=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6000.value)))+(x6001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6002=IKsin(j4);
IkReal x6003=IKcos(j4);
IkReal x6004=(cj1*cj2);
IkReal x6005=((1.0)*x6003);
IkReal x6006=(gconst115*x6002);
IkReal x6007=(gconst115*x6003);
IkReal x6008=((1.0)*sj1*sj2);
IkReal x6009=((1.0)*gconst116*x6002);
evalcond[0]=(((r21*x6006))+(((-1.0)*r22*x6005))+(((-1.0)*r20*x6009)));
evalcond[1]=(sj0+(((-1.0)*r00*x6009))+((r01*x6006))+(((-1.0)*r02*x6005)));
evalcond[2]=(((r11*x6006))+(((-1.0)*r12*x6005))+(((-1.0)*r10*x6009))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6007))+((cj2*sj1))+(((-1.0)*gconst116*r20*x6005))+((r22*x6002))+((cj1*sj2)));
evalcond[4]=(((cj0*x6004))+(((-1.0)*cj0*x6008))+((r02*x6002))+((r01*x6007))+(((-1.0)*gconst116*r00*x6005)));
evalcond[5]=((((-1.0)*sj0*x6008))+((r12*x6002))+(((-1.0)*gconst116*r10*x6005))+((r11*x6007))+((sj0*x6004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6010=((-1.0)*r21);
IkReal x6012 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6012)==0){
continue;
}
IkReal x6011=pow(x6012,-0.5);
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal(x6010),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6013.value))));
IkReal gconst118=(x6010*x6011);
IkReal gconst119=((1.0)*r20*x6011);
CheckValue<IkReal> x6014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6014.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6015=((-1.0)*r21);
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal(x6015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
IkReal x6016=((1.0)*(x6018.value));
IkReal x6017=x6011;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6016)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6016)));
IkReal gconst118=(x6015*x6017);
IkReal gconst119=((1.0)*r20*x6017);
IkReal x6019=r22*r22;
IkReal x6020=((1.0)*x6019);
CheckValue<IkReal> x6024=IKPowWithIntegerCheck(((-1.0)+x6019),-1);
if(!x6024.valid){
continue;
}
IkReal x6021=x6024.value;
if((((1.0)+(((-1.0)*x6020)))) < -0.00001)
continue;
IkReal x6022=IKsqrt(((1.0)+(((-1.0)*x6020))));
IkReal x6023=(sj0*x6021*x6022);
j4eval[0]=((IKabs((x6023+(((-1.0)*x6020*x6023)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6025=((-1.0)*r21);
CheckValue<IkReal> x6028 = IKatan2WithCheck(IkReal(x6025),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6028.valid){
continue;
}
IkReal x6026=((1.0)*(x6028.value));
IkReal x6027=x6011;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6026)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6026)));
IkReal gconst118=(x6025*x6027);
IkReal gconst119=((1.0)*r20*x6027);
IkReal x6029=r22*r22;
IkReal x6030=((1.0)*x6029);
CheckValue<IkReal> x6034=IKPowWithIntegerCheck(((-1.0)+x6029),-1);
if(!x6034.valid){
continue;
}
IkReal x6031=x6034.value;
if((((1.0)+(((-1.0)*x6030)))) < -0.00001)
continue;
IkReal x6032=IKsqrt(((1.0)+(((-1.0)*x6030))));
IkReal x6033=(cj0*x6031*x6032);
j4eval[0]=((IKabs((x6033+(((-1.0)*x6030*x6033)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6035=((-1.0)*r21);
CheckValue<IkReal> x6038 = IKatan2WithCheck(IkReal(x6035),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6038.valid){
continue;
}
IkReal x6036=((1.0)*(x6038.value));
IkReal x6037=x6011;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6036)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6036)));
IkReal gconst118=(x6035*x6037);
IkReal gconst119=((1.0)*r20*x6037);
IkReal x6039=r22*r22;
IkReal x6040=(cj0*r02);
IkReal x6041=(r12*sj0);
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(((-1.0)+x6039),-1);
if(!x6045.valid){
continue;
}
IkReal x6042=x6045.value;
if((((1.0)+(((-1.0)*x6039)))) < -0.00001)
continue;
IkReal x6043=IKsqrt(((1.0)+(((-1.0)*x6039))));
IkReal x6044=((1.0)*r22*x6042*x6043);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6040*x6044))+(((-1.0)*x6041*x6044)))))+(IKabs((x6040+x6041))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6046=((1.0)*gconst119);
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6046))+(((-1.0)*r10*sj0*x6046))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
CheckValue<IkReal> x6048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6046))+(((-1.0)*gconst118*r20)))),-1);
if(!x6048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6047.value)+(((1.5707963267949)*(x6048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6049=IKsin(j4);
IkReal x6050=IKcos(j4);
IkReal x6051=(cj1*cj2);
IkReal x6052=(gconst118*r01);
IkReal x6053=(gconst119*r20);
IkReal x6054=(gconst119*r10);
IkReal x6055=(gconst119*r00);
IkReal x6056=(gconst118*r21);
IkReal x6057=(gconst118*r11);
IkReal x6058=((1.0)*cj0);
IkReal x6059=(sj1*sj2);
IkReal x6060=((1.0)*x6050);
IkReal x6061=((1.0)*x6049);
evalcond[0]=((((-1.0)*r22*x6060))+(((-1.0)*x6053*x6061))+((x6049*x6056)));
evalcond[1]=(sj0+(((-1.0)*x6055*x6061))+((x6049*x6052))+(((-1.0)*r02*x6060)));
evalcond[2]=((((-1.0)*x6054*x6061))+(((-1.0)*x6058))+((x6049*x6057))+(((-1.0)*r12*x6060)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6049))+(((-1.0)*x6053*x6060))+((x6050*x6056)));
evalcond[4]=((((-1.0)*x6055*x6060))+(((-1.0)*x6058*x6059))+((cj0*x6051))+((x6050*x6052))+((r02*x6049)));
evalcond[5]=((((-1.0)*x6054*x6060))+((sj0*x6051))+((x6050*x6057))+(((-1.0)*sj0*x6059))+((r12*x6049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6062.valid){
continue;
}
CheckValue<IkReal> x6063 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6062.value)))+(x6063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6064=IKsin(j4);
IkReal x6065=IKcos(j4);
IkReal x6066=(cj1*cj2);
IkReal x6067=(gconst118*r01);
IkReal x6068=(gconst119*r20);
IkReal x6069=(gconst119*r10);
IkReal x6070=(gconst119*r00);
IkReal x6071=(gconst118*r21);
IkReal x6072=(gconst118*r11);
IkReal x6073=((1.0)*cj0);
IkReal x6074=(sj1*sj2);
IkReal x6075=((1.0)*x6065);
IkReal x6076=((1.0)*x6064);
evalcond[0]=((((-1.0)*r22*x6075))+(((-1.0)*x6068*x6076))+((x6064*x6071)));
evalcond[1]=(sj0+(((-1.0)*r02*x6075))+((x6064*x6067))+(((-1.0)*x6070*x6076)));
evalcond[2]=((((-1.0)*x6073))+(((-1.0)*r12*x6075))+((x6064*x6072))+(((-1.0)*x6069*x6076)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6064))+(((-1.0)*x6068*x6075))+((x6065*x6071)));
evalcond[4]=((((-1.0)*x6073*x6074))+((cj0*x6066))+((x6065*x6067))+((r02*x6064))+(((-1.0)*x6070*x6075)));
evalcond[5]=(((sj0*x6066))+(((-1.0)*sj0*x6074))+((r12*x6064))+((x6065*x6072))+(((-1.0)*x6069*x6075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6077=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6077.value)))+(x6078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKsin(j4);
IkReal x6080=IKcos(j4);
IkReal x6081=(cj1*cj2);
IkReal x6082=(gconst118*r01);
IkReal x6083=(gconst119*r20);
IkReal x6084=(gconst119*r10);
IkReal x6085=(gconst119*r00);
IkReal x6086=(gconst118*r21);
IkReal x6087=(gconst118*r11);
IkReal x6088=((1.0)*cj0);
IkReal x6089=(sj1*sj2);
IkReal x6090=((1.0)*x6080);
IkReal x6091=((1.0)*x6079);
evalcond[0]=((((-1.0)*r22*x6090))+(((-1.0)*x6083*x6091))+((x6079*x6086)));
evalcond[1]=(sj0+((x6079*x6082))+(((-1.0)*r02*x6090))+(((-1.0)*x6085*x6091)));
evalcond[2]=(((x6079*x6087))+(((-1.0)*x6088))+(((-1.0)*r12*x6090))+(((-1.0)*x6084*x6091)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6083*x6090))+((cj1*sj2))+((r22*x6079))+((x6080*x6086)));
evalcond[4]=((((-1.0)*x6088*x6089))+((cj0*x6081))+((r02*x6079))+((x6080*x6082))+(((-1.0)*x6085*x6090)));
evalcond[5]=(((sj0*x6081))+(((-1.0)*sj0*x6089))+((x6080*x6087))+((r12*x6079))+(((-1.0)*x6084*x6090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6093 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6093)==0){
continue;
}
IkReal x6092=pow(x6093,-0.5);
CheckValue<IkReal> x6094 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6094.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6094.value));
IkReal gconst121=((-1.0)*r01*x6092);
IkReal gconst122=(r00*x6092);
CheckValue<IkReal> x6095 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6095.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6095.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
IkReal x6096=((-1.0)*(x6098.value));
IkReal x6097=x6092;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6096;
IkReal gconst120=x6096;
IkReal gconst121=((-1.0)*r01*x6097);
IkReal gconst122=(r00*x6097);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6099=((1.0)*gconst122);
CheckValue<IkReal> x6100 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst121*r01))+(((-1.0)*cj0*r00*x6099))+(((-1.0)*r10*sj0*x6099))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6100.valid){
continue;
}
CheckValue<IkReal> x6101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x6099)))),-1);
if(!x6101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6100.value)+(((1.5707963267949)*(x6101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6102=IKsin(j4);
IkReal x6103=IKcos(j4);
IkReal x6104=(cj1*cj2);
IkReal x6105=(gconst121*r11);
IkReal x6106=(gconst122*r00);
IkReal x6107=(gconst122*r10);
IkReal x6108=(gconst122*r20);
IkReal x6109=((1.0)*cj0);
IkReal x6110=(sj1*sj2);
IkReal x6111=((1.0)*x6103);
IkReal x6112=((1.0)*x6102);
IkReal x6113=(gconst121*x6102);
IkReal x6114=(gconst121*x6103);
evalcond[0]=((((-1.0)*r22*x6111))+(((-1.0)*x6108*x6112))+((r21*x6113)));
evalcond[1]=(sj0+(((-1.0)*x6106*x6112))+(((-1.0)*r02*x6111))+((r01*x6113)));
evalcond[2]=(((x6102*x6105))+(((-1.0)*r12*x6111))+(((-1.0)*x6107*x6112))+(((-1.0)*x6109)));
evalcond[3]=(((cj2*sj1))+((r22*x6102))+((cj1*sj2))+(((-1.0)*x6108*x6111))+((r21*x6114)));
evalcond[4]=(((cj0*x6104))+(((-1.0)*x6109*x6110))+(((-1.0)*x6106*x6111))+((r01*x6114))+((r02*x6102)));
evalcond[5]=(((sj0*x6104))+((x6103*x6105))+(((-1.0)*x6107*x6111))+(((-1.0)*sj0*x6110))+((r12*x6102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
CheckValue<IkReal> x6116=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x6116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6115.value)+(((1.5707963267949)*(x6116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6117=IKsin(j4);
IkReal x6118=IKcos(j4);
IkReal x6119=(cj1*cj2);
IkReal x6120=(gconst121*r11);
IkReal x6121=(gconst122*r00);
IkReal x6122=(gconst122*r10);
IkReal x6123=(gconst122*r20);
IkReal x6124=((1.0)*cj0);
IkReal x6125=(sj1*sj2);
IkReal x6126=((1.0)*x6118);
IkReal x6127=((1.0)*x6117);
IkReal x6128=(gconst121*x6117);
IkReal x6129=(gconst121*x6118);
evalcond[0]=(((r21*x6128))+(((-1.0)*r22*x6126))+(((-1.0)*x6123*x6127)));
evalcond[1]=(((r01*x6128))+sj0+(((-1.0)*r02*x6126))+(((-1.0)*x6121*x6127)));
evalcond[2]=((((-1.0)*r12*x6126))+(((-1.0)*x6124))+(((-1.0)*x6122*x6127))+((x6117*x6120)));
evalcond[3]=(((cj2*sj1))+((r21*x6129))+((cj1*sj2))+((r22*x6117))+(((-1.0)*x6123*x6126)));
evalcond[4]=(((r01*x6129))+((r02*x6117))+(((-1.0)*x6121*x6126))+(((-1.0)*x6124*x6125))+((cj0*x6119)));
evalcond[5]=(((x6118*x6120))+(((-1.0)*sj0*x6125))+((r12*x6117))+((sj0*x6119))+(((-1.0)*x6122*x6126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6131 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6131)==0){
continue;
}
IkReal x6130=pow(x6131,-0.5);
CheckValue<IkReal> x6132 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6132.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6132.value))));
IkReal gconst124=((1.0)*r01*x6130);
IkReal gconst125=((-1.0)*r00*x6130);
CheckValue<IkReal> x6133 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6133.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6133.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6136 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6136.valid){
continue;
}
IkReal x6134=((1.0)*(x6136.value));
IkReal x6135=x6130;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6134)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6134)));
IkReal gconst124=((1.0)*r01*x6135);
IkReal gconst125=((-1.0)*r00*x6135);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6139 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6139.valid){
continue;
}
IkReal x6137=((1.0)*(x6139.value));
IkReal x6138=x6130;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6137)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6137)));
IkReal gconst124=((1.0)*r01*x6138);
IkReal gconst125=((-1.0)*r00*x6138);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6142 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6142.valid){
continue;
}
IkReal x6140=((1.0)*(x6142.value));
IkReal x6141=x6130;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6140)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6140)));
IkReal gconst124=((1.0)*r01*x6141);
IkReal gconst125=((-1.0)*r00*x6141);
IkReal x6143=r02*r02;
IkReal x6144=(r12*sj0);
IkReal x6145=x6130;
IkReal x6146=(cj0*x6145);
j4eval[0]=((IKabs((x6144+((cj0*r02)))))+(IKabs((((r02*x6144*x6145))+(((-1.0)*x6146))+((x6143*x6146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6147=((1.0)*gconst125);
CheckValue<IkReal> x6148 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6147))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x6147))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6148.valid){
continue;
}
CheckValue<IkReal> x6149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6147))+(((-1.0)*gconst124*r20)))),-1);
if(!x6149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6148.value)+(((1.5707963267949)*(x6149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6150=IKsin(j4);
IkReal x6151=IKcos(j4);
IkReal x6152=(cj1*cj2);
IkReal x6153=(gconst125*r20);
IkReal x6154=(gconst124*r01);
IkReal x6155=(gconst125*r00);
IkReal x6156=(gconst125*r10);
IkReal x6157=((1.0)*cj0);
IkReal x6158=(sj1*sj2);
IkReal x6159=((1.0)*x6151);
IkReal x6160=((1.0)*x6150);
IkReal x6161=(gconst124*x6150);
IkReal x6162=(gconst124*x6151);
evalcond[0]=((((-1.0)*x6153*x6160))+(((-1.0)*r22*x6159))+((r21*x6161)));
evalcond[1]=((((-1.0)*r02*x6159))+sj0+(((-1.0)*x6155*x6160))+((x6150*x6154)));
evalcond[2]=((((-1.0)*x6156*x6160))+((r11*x6161))+(((-1.0)*x6157))+(((-1.0)*r12*x6159)));
evalcond[3]=(((r22*x6150))+((cj2*sj1))+((cj1*sj2))+((r21*x6162))+(((-1.0)*x6153*x6159)));
evalcond[4]=(((cj0*x6152))+(((-1.0)*x6155*x6159))+((r02*x6150))+(((-1.0)*x6157*x6158))+((x6151*x6154)));
evalcond[5]=(((r12*x6150))+((sj0*x6152))+((r11*x6162))+(((-1.0)*sj0*x6158))+(((-1.0)*x6156*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6163=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6163.valid){
continue;
}
CheckValue<IkReal> x6164 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6163.value)))+(x6164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6165=IKsin(j4);
IkReal x6166=IKcos(j4);
IkReal x6167=(cj1*cj2);
IkReal x6168=(gconst125*r20);
IkReal x6169=(gconst124*r01);
IkReal x6170=(gconst125*r00);
IkReal x6171=(gconst125*r10);
IkReal x6172=((1.0)*cj0);
IkReal x6173=(sj1*sj2);
IkReal x6174=((1.0)*x6166);
IkReal x6175=((1.0)*x6165);
IkReal x6176=(gconst124*x6165);
IkReal x6177=(gconst124*x6166);
evalcond[0]=((((-1.0)*x6168*x6175))+((r21*x6176))+(((-1.0)*r22*x6174)));
evalcond[1]=(sj0+((x6165*x6169))+(((-1.0)*x6170*x6175))+(((-1.0)*r02*x6174)));
evalcond[2]=(((r11*x6176))+(((-1.0)*r12*x6174))+(((-1.0)*x6172))+(((-1.0)*x6171*x6175)));
evalcond[3]=((((-1.0)*x6168*x6174))+((cj2*sj1))+((cj1*sj2))+((r21*x6177))+((r22*x6165)));
evalcond[4]=(((x6166*x6169))+((r02*x6165))+(((-1.0)*x6170*x6174))+(((-1.0)*x6172*x6173))+((cj0*x6167)));
evalcond[5]=(((sj0*x6167))+((r12*x6165))+((r11*x6177))+(((-1.0)*sj0*x6173))+(((-1.0)*x6171*x6174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6178 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6178.valid){
continue;
}
CheckValue<IkReal> x6179=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x6179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6178.value)+(((1.5707963267949)*(x6179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6180=IKsin(j4);
IkReal x6181=IKcos(j4);
IkReal x6182=(cj1*cj2);
IkReal x6183=(gconst125*r20);
IkReal x6184=(gconst124*r01);
IkReal x6185=(gconst125*r00);
IkReal x6186=(gconst125*r10);
IkReal x6187=((1.0)*cj0);
IkReal x6188=(sj1*sj2);
IkReal x6189=((1.0)*x6181);
IkReal x6190=((1.0)*x6180);
IkReal x6191=(gconst124*x6180);
IkReal x6192=(gconst124*x6181);
evalcond[0]=((((-1.0)*r22*x6189))+(((-1.0)*x6183*x6190))+((r21*x6191)));
evalcond[1]=(sj0+(((-1.0)*r02*x6189))+((x6180*x6184))+(((-1.0)*x6185*x6190)));
evalcond[2]=((((-1.0)*x6186*x6190))+((r11*x6191))+(((-1.0)*r12*x6189))+(((-1.0)*x6187)));
evalcond[3]=(((cj2*sj1))+((r22*x6180))+((cj1*sj2))+((r21*x6192))+(((-1.0)*x6183*x6189)));
evalcond[4]=((((-1.0)*x6185*x6189))+(((-1.0)*x6187*x6188))+((cj0*x6182))+((r02*x6180))+((x6181*x6184)));
evalcond[5]=((((-1.0)*sj0*x6188))+((r11*x6192))+(((-1.0)*x6186*x6189))+((sj0*x6182))+((r12*x6180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6193=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6193;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6194=((1.0)*cj5);
IkReal x6195=((((-1.0)*r21*x6194))+(((-1.0)*r20*sj5)));
j4eval[0]=x6195;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6194))+((r11*sj5))))));
j4eval[2]=IKsign(x6195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6196=(r01*sj5);
IkReal x6197=(cj1*sj2);
IkReal x6198=(cj2*sj1);
IkReal x6199=((1.0)*r02);
IkReal x6200=((1.0)*cj5*r00);
IkReal x6201=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6201;
j4eval[1]=((IKabs(((((-1.0)*x6197*x6199))+(((-1.0)*x6198*x6199)))))+(IKabs(((((-1.0)*x6197*x6200))+(((-1.0)*x6198*x6200))+((x6196*x6197))+((x6196*x6198))))));
j4eval[2]=IKsign(x6201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6202=(r01*sj5);
IkReal x6203=(cj1*sj2);
IkReal x6204=(cj2*sj1);
IkReal x6205=((1.0)*r02);
IkReal x6206=((1.0)*cj5*r00);
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal((((x6202*x6203))+((x6202*x6204))+(((-1.0)*x6204*x6206))+(((-1.0)*x6203*x6206)))),IkReal(((((-1.0)*x6204*x6205))+(((-1.0)*x6203*x6205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
CheckValue<IkReal> x6208=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6207.value)+(((1.5707963267949)*(x6208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6209=IKcos(j4);
IkReal x6210=IKsin(j4);
IkReal x6211=(cj5*r00);
IkReal x6212=(cj5*r10);
IkReal x6213=(r21*sj5);
IkReal x6214=(cj5*r20);
IkReal x6215=((1.0)*x6209);
IkReal x6216=((1.0)*x6210);
IkReal x6217=(sj5*x6210);
IkReal x6218=(sj5*x6209);
evalcond[0]=(((r02*x6210))+((r01*x6218))+(((-1.0)*x6211*x6215)));
evalcond[1]=(((x6210*x6213))+(((-1.0)*x6214*x6216))+(((-1.0)*r22*x6215)));
evalcond[2]=(((r11*x6217))+(((-1.0)*r12*x6215))+(((-1.0)*x6212*x6216)));
evalcond[3]=((1.0)+((r01*x6217))+(((-1.0)*r02*x6215))+(((-1.0)*x6211*x6216)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6209*x6213))+(((-1.0)*x6214*x6215))+((r22*x6210)));
evalcond[5]=(((r12*x6210))+((r11*x6218))+(((-1.0)*sj1*sj2))+(((-1.0)*x6212*x6215))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6219=((1.0)*cj5);
CheckValue<IkReal> x6220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6219))+(((-1.0)*r20*sj5)))),-1);
if(!x6220.valid){
continue;
}
CheckValue<IkReal> x6221 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6220.value)))+(x6221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6222=IKcos(j4);
IkReal x6223=IKsin(j4);
IkReal x6224=(cj5*r00);
IkReal x6225=(cj5*r10);
IkReal x6226=(r21*sj5);
IkReal x6227=(cj5*r20);
IkReal x6228=((1.0)*x6222);
IkReal x6229=((1.0)*x6223);
IkReal x6230=(sj5*x6223);
IkReal x6231=(sj5*x6222);
evalcond[0]=((((-1.0)*x6224*x6228))+((r02*x6223))+((r01*x6231)));
evalcond[1]=(((x6223*x6226))+(((-1.0)*x6227*x6229))+(((-1.0)*r22*x6228)));
evalcond[2]=((((-1.0)*r12*x6228))+(((-1.0)*x6225*x6229))+((r11*x6230)));
evalcond[3]=((1.0)+(((-1.0)*x6224*x6229))+(((-1.0)*r02*x6228))+((r01*x6230)));
evalcond[4]=(((cj2*sj1))+((x6222*x6226))+((cj1*sj2))+((r22*x6223))+(((-1.0)*x6227*x6228)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6225*x6228))+((r12*x6223))+((r11*x6231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6232 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6232.valid){
continue;
}
CheckValue<IkReal> x6233=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6232.value)+(((1.5707963267949)*(x6233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6234=IKcos(j4);
IkReal x6235=IKsin(j4);
IkReal x6236=(cj5*r00);
IkReal x6237=(cj5*r10);
IkReal x6238=(r21*sj5);
IkReal x6239=(cj5*r20);
IkReal x6240=((1.0)*x6234);
IkReal x6241=((1.0)*x6235);
IkReal x6242=(sj5*x6235);
IkReal x6243=(sj5*x6234);
evalcond[0]=(((r02*x6235))+(((-1.0)*x6236*x6240))+((r01*x6243)));
evalcond[1]=((((-1.0)*x6239*x6241))+((x6235*x6238))+(((-1.0)*r22*x6240)));
evalcond[2]=((((-1.0)*x6237*x6241))+((r11*x6242))+(((-1.0)*r12*x6240)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6240))+(((-1.0)*x6236*x6241))+((r01*x6242)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6239*x6240))+((x6234*x6238))+((cj1*sj2))+((r22*x6235)));
evalcond[5]=((((-1.0)*x6237*x6240))+((r12*x6235))+((r11*x6243))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6244=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6244;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6245=((1.0)*cj5);
IkReal x6246=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6245)));
j4eval[0]=x6246;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6245))))));
j4eval[2]=IKsign(x6246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6247=cj5*cj5;
IkReal x6248=r01*r01;
IkReal x6249=(cj5*r00);
IkReal x6250=(r01*sj5);
IkReal x6251=((((-2.0)*x6249*x6250))+x6248+(((-1.0)*x6247*x6248))+((x6247*(r00*r00)))+(r02*r02));
j4eval[0]=x6251;
j4eval[1]=IKsign(x6251);
j4eval[2]=((IKabs(r02))+(IKabs((x6250+(((-1.0)*x6249))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6252=cj5*cj5;
IkReal x6253=r01*r01;
IkReal x6254=(r01*sj5);
IkReal x6255=(cj5*r00);
CheckValue<IkReal> x6256=IKPowWithIntegerCheck(IKsign((x6253+(((-2.0)*x6254*x6255))+(((-1.0)*x6252*x6253))+((x6252*(r00*r00)))+(r02*r02))),-1);
if(!x6256.valid){
continue;
}
CheckValue<IkReal> x6257 = IKatan2WithCheck(IkReal((x6254+(((-1.0)*x6255)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6256.value)))+(x6257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6258=IKcos(j4);
IkReal x6259=IKsin(j4);
IkReal x6260=(cj5*r00);
IkReal x6261=(cj5*r10);
IkReal x6262=(r21*sj5);
IkReal x6263=(cj5*r20);
IkReal x6264=((1.0)*x6258);
IkReal x6265=((1.0)*x6259);
IkReal x6266=(sj5*x6259);
IkReal x6267=(sj5*x6258);
evalcond[0]=(((r01*x6267))+(((-1.0)*x6260*x6264))+((r02*x6259)));
evalcond[1]=((((-1.0)*x6263*x6265))+((x6259*x6262))+(((-1.0)*r22*x6264)));
evalcond[2]=((((-1.0)*x6261*x6265))+(((-1.0)*r12*x6264))+((r11*x6266)));
evalcond[3]=((-1.0)+((r01*x6266))+(((-1.0)*r02*x6264))+(((-1.0)*x6260*x6265)));
evalcond[4]=(((cj2*sj1))+((r22*x6259))+((cj1*sj2))+(((-1.0)*x6263*x6264))+((x6258*x6262)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6261*x6264))+((r12*x6259))+((r11*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6268=((1.0)*cj5);
CheckValue<IkReal> x6269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6268)))),-1);
if(!x6269.valid){
continue;
}
CheckValue<IkReal> x6270 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6269.value)))+(x6270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6271=IKcos(j4);
IkReal x6272=IKsin(j4);
IkReal x6273=(cj5*r00);
IkReal x6274=(cj5*r10);
IkReal x6275=(r21*sj5);
IkReal x6276=(cj5*r20);
IkReal x6277=((1.0)*x6271);
IkReal x6278=((1.0)*x6272);
IkReal x6279=(sj5*x6272);
IkReal x6280=(sj5*x6271);
evalcond[0]=((((-1.0)*x6273*x6277))+((r02*x6272))+((r01*x6280)));
evalcond[1]=((((-1.0)*x6276*x6278))+(((-1.0)*r22*x6277))+((x6272*x6275)));
evalcond[2]=((((-1.0)*x6274*x6278))+(((-1.0)*r12*x6277))+((r11*x6279)));
evalcond[3]=((-1.0)+(((-1.0)*x6273*x6278))+((r01*x6279))+(((-1.0)*r02*x6277)));
evalcond[4]=(((r22*x6272))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6276*x6277))+((x6271*x6275)));
evalcond[5]=(((r12*x6272))+(((-1.0)*x6274*x6277))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6281.valid){
continue;
}
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6281.value)))+(x6282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6283=IKcos(j4);
IkReal x6284=IKsin(j4);
IkReal x6285=(cj5*r00);
IkReal x6286=(cj5*r10);
IkReal x6287=(r21*sj5);
IkReal x6288=(cj5*r20);
IkReal x6289=((1.0)*x6283);
IkReal x6290=((1.0)*x6284);
IkReal x6291=(sj5*x6284);
IkReal x6292=(sj5*x6283);
evalcond[0]=(((r01*x6292))+(((-1.0)*x6285*x6289))+((r02*x6284)));
evalcond[1]=(((x6284*x6287))+(((-1.0)*x6288*x6290))+(((-1.0)*r22*x6289)));
evalcond[2]=(((r11*x6291))+(((-1.0)*x6286*x6290))+(((-1.0)*r12*x6289)));
evalcond[3]=((-1.0)+((r01*x6291))+(((-1.0)*r02*x6289))+(((-1.0)*x6285*x6290)));
evalcond[4]=(((cj2*sj1))+((r22*x6284))+(((-1.0)*x6288*x6289))+((cj1*sj2))+((x6283*x6287)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6292))+((r12*x6284))+(((-1.0)*x6286*x6289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6294 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6294)==0){
continue;
}
IkReal x6293=pow(x6294,-0.5);
CheckValue<IkReal> x6295 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6295.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6295.value));
IkReal gconst127=((-1.0)*r11*x6293);
IkReal gconst128=(r10*x6293);
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
IkReal x6297=((-1.0)*(x6299.value));
IkReal x6298=x6293;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6297;
IkReal gconst126=x6297;
IkReal gconst127=((-1.0)*r11*x6298);
IkReal gconst128=(r10*x6298);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6300=((1.0)*gconst128);
CheckValue<IkReal> x6301=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x6300)))),-1);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst127*r01))+(((-1.0)*r10*sj0*x6300))+(((-1.0)*cj0*r00*x6300))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6301.value)))+(x6302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=(cj1*cj2);
IkReal x6306=(gconst127*r01);
IkReal x6307=(gconst128*r10);
IkReal x6308=(gconst128*r00);
IkReal x6309=(gconst128*r20);
IkReal x6310=((1.0)*cj0);
IkReal x6311=(sj1*sj2);
IkReal x6312=((1.0)*x6304);
IkReal x6313=((1.0)*x6303);
IkReal x6314=(gconst127*x6304);
IkReal x6315=(gconst127*x6303);
evalcond[0]=((((-1.0)*r22*x6312))+(((-1.0)*x6309*x6313))+((r21*x6315)));
evalcond[1]=(((x6303*x6306))+sj0+(((-1.0)*r02*x6312))+(((-1.0)*x6308*x6313)));
evalcond[2]=((((-1.0)*r12*x6312))+(((-1.0)*x6310))+(((-1.0)*x6307*x6313))+((r11*x6315)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6303))+(((-1.0)*x6309*x6312))+((r21*x6314)));
evalcond[4]=((((-1.0)*x6308*x6312))+(((-1.0)*x6310*x6311))+((r02*x6303))+((cj0*x6305))+((x6304*x6306)));
evalcond[5]=((((-1.0)*sj0*x6311))+(((-1.0)*x6307*x6312))+((r11*x6314))+((r12*x6303))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
CheckValue<IkReal> x6317=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x6317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6316.value)+(((1.5707963267949)*(x6317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6318=IKsin(j4);
IkReal x6319=IKcos(j4);
IkReal x6320=(cj1*cj2);
IkReal x6321=(gconst127*r01);
IkReal x6322=(gconst128*r10);
IkReal x6323=(gconst128*r00);
IkReal x6324=(gconst128*r20);
IkReal x6325=((1.0)*cj0);
IkReal x6326=(sj1*sj2);
IkReal x6327=((1.0)*x6319);
IkReal x6328=((1.0)*x6318);
IkReal x6329=(gconst127*x6319);
IkReal x6330=(gconst127*x6318);
evalcond[0]=((((-1.0)*r22*x6327))+((r21*x6330))+(((-1.0)*x6324*x6328)));
evalcond[1]=(sj0+((x6318*x6321))+(((-1.0)*r02*x6327))+(((-1.0)*x6323*x6328)));
evalcond[2]=(((r11*x6330))+(((-1.0)*x6322*x6328))+(((-1.0)*x6325))+(((-1.0)*r12*x6327)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6318))+(((-1.0)*x6324*x6327))+((r21*x6329)));
evalcond[4]=((((-1.0)*x6325*x6326))+((cj0*x6320))+((x6319*x6321))+((r02*x6318))+(((-1.0)*x6323*x6327)));
evalcond[5]=(((r11*x6329))+((sj0*x6320))+(((-1.0)*x6322*x6327))+(((-1.0)*sj0*x6326))+((r12*x6318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6332 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6332)==0){
continue;
}
IkReal x6331=pow(x6332,-0.5);
CheckValue<IkReal> x6333 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6333.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6333.value))));
IkReal gconst130=((1.0)*r11*x6331);
IkReal gconst131=((-1.0)*r10*x6331);
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6334.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
IkReal x6335=((1.0)*(x6337.value));
IkReal x6336=x6331;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6335)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6335)));
IkReal gconst130=((1.0)*r11*x6336);
IkReal gconst131=((-1.0)*r10*x6336);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6340 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6340.valid){
continue;
}
IkReal x6338=((1.0)*(x6340.value));
IkReal x6339=x6331;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6338)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6338)));
IkReal gconst130=((1.0)*r11*x6339);
IkReal gconst131=((-1.0)*r10*x6339);
IkReal x6341=r12*r12;
IkReal x6342=(cj0*r02);
IkReal x6343=x6331;
IkReal x6344=(sj0*x6343);
j4eval[0]=((IKabs((x6342+((r12*sj0)))))+(IKabs((((x6341*x6344))+(((-1.0)*x6344))+((r12*x6342*x6343))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
IkReal x6345=((1.0)*(x6347.value));
IkReal x6346=x6331;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6345)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6345)));
IkReal gconst130=((1.0)*r11*x6346);
IkReal gconst131=((-1.0)*r10*x6346);
IkReal x6348=(cj1*sj2);
IkReal x6349=(cj2*sj1);
IkReal x6350=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(x6350,-1);
if(!x6356.valid){
continue;
}
IkReal x6351=x6356.value;
IkReal x6352=((1.0)*x6351);
IkReal x6353=x6331;
IkReal x6354=(r12*r22*x6353);
IkReal x6355=((((-1.0)*x6352*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6351))+(((-1.0)*(r22*r22)))+(((-1.0)*x6352*(r11*r11)*(r21*r21))));
j4eval[0]=x6355;
j4eval[1]=((IKabs((((x6348*x6354))+((x6349*x6354)))))+(IKabs((((r22*x6349))+((r22*x6348))))));
j4eval[2]=IKsign(x6355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6357=(cj2*sj1);
IkReal x6358=(cj1*sj2);
IkReal x6359=(gconst130*r21);
IkReal x6360=((1.0)*gconst131*r20);
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6359*x6359)))+(((-1.0)*gconst131*r20*x6360))+(((-1.0)*(r22*r22)))+(((2.0)*gconst131*r20*x6359)))),-1);
if(!x6361.valid){
continue;
}
CheckValue<IkReal> x6362 = IKatan2WithCheck(IkReal((((r22*x6358))+((r22*x6357)))),IkReal((((x6358*x6359))+(((-1.0)*x6357*x6360))+(((-1.0)*x6358*x6360))+((x6357*x6359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6361.value)))+(x6362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6363=IKsin(j4);
IkReal x6364=IKcos(j4);
IkReal x6365=(cj1*cj2);
IkReal x6366=(gconst131*r10);
IkReal x6367=(gconst130*r11);
IkReal x6368=(gconst131*r20);
IkReal x6369=(gconst131*r00);
IkReal x6370=((1.0)*cj0);
IkReal x6371=(sj1*sj2);
IkReal x6372=((1.0)*x6364);
IkReal x6373=((1.0)*x6363);
IkReal x6374=(gconst130*x6364);
IkReal x6375=(gconst130*x6363);
evalcond[0]=(((r21*x6375))+(((-1.0)*x6368*x6373))+(((-1.0)*r22*x6372)));
evalcond[1]=(sj0+(((-1.0)*r02*x6372))+((r01*x6375))+(((-1.0)*x6369*x6373)));
evalcond[2]=((((-1.0)*x6366*x6373))+((x6363*x6367))+(((-1.0)*r12*x6372))+(((-1.0)*x6370)));
evalcond[3]=(((r21*x6374))+(((-1.0)*x6368*x6372))+((cj2*sj1))+((cj1*sj2))+((r22*x6363)));
evalcond[4]=(((r01*x6374))+(((-1.0)*x6370*x6371))+((cj0*x6365))+((r02*x6363))+(((-1.0)*x6369*x6372)));
evalcond[5]=((((-1.0)*x6366*x6372))+((r12*x6363))+((sj0*x6365))+(((-1.0)*sj0*x6371))+((x6364*x6367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6376=((1.0)*gconst131);
CheckValue<IkReal> x6377 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x6376))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x6376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6377.valid){
continue;
}
CheckValue<IkReal> x6378=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x6376)))),-1);
if(!x6378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6377.value)+(((1.5707963267949)*(x6378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6379=IKsin(j4);
IkReal x6380=IKcos(j4);
IkReal x6381=(cj1*cj2);
IkReal x6382=(gconst131*r10);
IkReal x6383=(gconst130*r11);
IkReal x6384=(gconst131*r20);
IkReal x6385=(gconst131*r00);
IkReal x6386=((1.0)*cj0);
IkReal x6387=(sj1*sj2);
IkReal x6388=((1.0)*x6380);
IkReal x6389=((1.0)*x6379);
IkReal x6390=(gconst130*x6380);
IkReal x6391=(gconst130*x6379);
evalcond[0]=((((-1.0)*x6384*x6389))+(((-1.0)*r22*x6388))+((r21*x6391)));
evalcond[1]=(sj0+((r01*x6391))+(((-1.0)*x6385*x6389))+(((-1.0)*r02*x6388)));
evalcond[2]=((((-1.0)*x6386))+(((-1.0)*r12*x6388))+(((-1.0)*x6382*x6389))+((x6379*x6383)));
evalcond[3]=((((-1.0)*x6384*x6388))+((cj2*sj1))+((cj1*sj2))+((r22*x6379))+((r21*x6390)));
evalcond[4]=((((-1.0)*x6386*x6387))+((cj0*x6381))+((r01*x6390))+(((-1.0)*x6385*x6388))+((r02*x6379)));
evalcond[5]=(((sj0*x6381))+((x6380*x6383))+(((-1.0)*x6382*x6388))+(((-1.0)*sj0*x6387))+((r12*x6379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6392=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6392.valid){
continue;
}
CheckValue<IkReal> x6393 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6392.value)))+(x6393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6394=IKsin(j4);
IkReal x6395=IKcos(j4);
IkReal x6396=(cj1*cj2);
IkReal x6397=(gconst131*r10);
IkReal x6398=(gconst130*r11);
IkReal x6399=(gconst131*r20);
IkReal x6400=(gconst131*r00);
IkReal x6401=((1.0)*cj0);
IkReal x6402=(sj1*sj2);
IkReal x6403=((1.0)*x6395);
IkReal x6404=((1.0)*x6394);
IkReal x6405=(gconst130*x6395);
IkReal x6406=(gconst130*x6394);
evalcond[0]=(((r21*x6406))+(((-1.0)*r22*x6403))+(((-1.0)*x6399*x6404)));
evalcond[1]=(sj0+(((-1.0)*x6400*x6404))+((r01*x6406))+(((-1.0)*r02*x6403)));
evalcond[2]=((((-1.0)*x6401))+(((-1.0)*r12*x6403))+((x6394*x6398))+(((-1.0)*x6397*x6404)));
evalcond[3]=(((cj2*sj1))+((r21*x6405))+((cj1*sj2))+(((-1.0)*x6399*x6403))+((r22*x6394)));
evalcond[4]=(((cj0*x6396))+(((-1.0)*x6401*x6402))+(((-1.0)*x6400*x6403))+((r01*x6405))+((r02*x6394)));
evalcond[5]=(((r12*x6394))+((sj0*x6396))+((x6395*x6398))+(((-1.0)*x6397*x6403))+(((-1.0)*sj0*x6402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6407=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6407;
j4eval[1]=IKsign(x6407);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6408=((1.0)*cj5);
IkReal x6409=((((-1.0)*r21*x6408))+(((-1.0)*r20*sj5)));
j4eval[0]=x6409;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6408))))));
j4eval[2]=IKsign(x6409);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6410=cj5*cj5;
IkReal x6411=r11*r11;
IkReal x6412=(r11*sj5);
IkReal x6413=(cj5*r10);
IkReal x6414=((r12*r12)+(((-1.0)*x6410*x6411))+(((-2.0)*x6412*x6413))+x6411+((x6410*(r10*r10))));
j4eval[0]=x6414;
j4eval[1]=IKsign(x6414);
j4eval[2]=((IKabs(r12))+(IKabs((x6412+(((-1.0)*x6413))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6415=cj5*cj5;
IkReal x6416=r11*r11;
IkReal x6417=(cj5*r10);
IkReal x6418=(r11*sj5);
CheckValue<IkReal> x6419 = IKatan2WithCheck(IkReal((x6418+(((-1.0)*x6417)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6419.valid){
continue;
}
CheckValue<IkReal> x6420=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6415*x6416))+x6416+((x6415*(r10*r10)))+(((-2.0)*x6417*x6418)))),-1);
if(!x6420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6419.value)+(((1.5707963267949)*(x6420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6421=IKcos(j4);
IkReal x6422=IKsin(j4);
IkReal x6423=(cj5*r00);
IkReal x6424=(cj5*r10);
IkReal x6425=(r21*sj5);
IkReal x6426=(cj5*r20);
IkReal x6427=((1.0)*x6421);
IkReal x6428=((1.0)*x6422);
IkReal x6429=(sj5*x6422);
IkReal x6430=(sj5*x6421);
evalcond[0]=(((r11*x6430))+(((-1.0)*x6424*x6427))+((r12*x6422)));
evalcond[1]=((((-1.0)*r22*x6427))+(((-1.0)*x6426*x6428))+((x6422*x6425)));
evalcond[2]=(((r01*x6429))+(((-1.0)*r02*x6427))+(((-1.0)*x6423*x6428)));
evalcond[3]=((-1.0)+(((-1.0)*x6424*x6428))+((r11*x6429))+(((-1.0)*r12*x6427)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6426*x6427))+((x6421*x6425))+((r22*x6422)));
evalcond[5]=(((r01*x6430))+((r02*x6422))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6423*x6427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6431=((1.0)*cj5);
CheckValue<IkReal> x6432 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6431))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6432.valid){
continue;
}
CheckValue<IkReal> x6433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6431))+(((-1.0)*r20*sj5)))),-1);
if(!x6433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6432.value)+(((1.5707963267949)*(x6433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6434=IKcos(j4);
IkReal x6435=IKsin(j4);
IkReal x6436=(cj5*r00);
IkReal x6437=(cj5*r10);
IkReal x6438=(r21*sj5);
IkReal x6439=(cj5*r20);
IkReal x6440=((1.0)*x6434);
IkReal x6441=((1.0)*x6435);
IkReal x6442=(sj5*x6435);
IkReal x6443=(sj5*x6434);
evalcond[0]=(((r11*x6443))+((r12*x6435))+(((-1.0)*x6437*x6440)));
evalcond[1]=(((x6435*x6438))+(((-1.0)*x6439*x6441))+(((-1.0)*r22*x6440)));
evalcond[2]=((((-1.0)*x6436*x6441))+((r01*x6442))+(((-1.0)*r02*x6440)));
evalcond[3]=((-1.0)+((r11*x6442))+(((-1.0)*r12*x6440))+(((-1.0)*x6437*x6441)));
evalcond[4]=(((r22*x6435))+((cj2*sj1))+(((-1.0)*x6439*x6440))+((x6434*x6438))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x6436*x6440))+((r01*x6443))+(((-1.0)*sj1*sj2))+((r02*x6435))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6444 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6444.valid){
continue;
}
CheckValue<IkReal> x6445=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6444.value)+(((1.5707963267949)*(x6445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6446=IKcos(j4);
IkReal x6447=IKsin(j4);
IkReal x6448=(cj5*r00);
IkReal x6449=(cj5*r10);
IkReal x6450=(r21*sj5);
IkReal x6451=(cj5*r20);
IkReal x6452=((1.0)*x6446);
IkReal x6453=((1.0)*x6447);
IkReal x6454=(sj5*x6447);
IkReal x6455=(sj5*x6446);
evalcond[0]=(((r12*x6447))+((r11*x6455))+(((-1.0)*x6449*x6452)));
evalcond[1]=((((-1.0)*x6451*x6453))+((x6447*x6450))+(((-1.0)*r22*x6452)));
evalcond[2]=(((r01*x6454))+(((-1.0)*r02*x6452))+(((-1.0)*x6448*x6453)));
evalcond[3]=((-1.0)+((r11*x6454))+(((-1.0)*x6449*x6453))+(((-1.0)*r12*x6452)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6451*x6452))+((cj1*sj2))+((x6446*x6450))+((r22*x6447)));
evalcond[5]=(((r01*x6455))+(((-1.0)*sj1*sj2))+(((-1.0)*x6448*x6452))+((cj1*cj2))+((r02*x6447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6456=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6456;
j4eval[1]=IKsign(x6456);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6457=((1.0)*cj5);
IkReal x6458=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6457)));
j4eval[0]=x6458;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6457))+((r21*sj5))))));
j4eval[2]=IKsign(x6458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6459=cj5*cj5;
IkReal x6460=r11*r11;
IkReal x6461=(cj5*r10);
IkReal x6462=(r11*sj5);
IkReal x6463=((((2.0)*x6461*x6462))+(((-1.0)*x6459*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6460))+((x6459*x6460)));
j4eval[0]=x6463;
j4eval[1]=IKsign(x6463);
j4eval[2]=((IKabs(r12))+(IKabs((x6462+(((-1.0)*x6461))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6464=cj5*cj5;
IkReal x6465=r11*r11;
IkReal x6466=(cj5*r10);
IkReal x6467=(r11*sj5);
CheckValue<IkReal> x6468 = IKatan2WithCheck(IkReal((x6467+(((-1.0)*x6466)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6468.valid){
continue;
}
CheckValue<IkReal> x6469=IKPowWithIntegerCheck(IKsign((((x6464*x6465))+(((-1.0)*x6464*(r10*r10)))+(((2.0)*x6466*x6467))+(((-1.0)*(r12*r12)))+(((-1.0)*x6465)))),-1);
if(!x6469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6468.value)+(((1.5707963267949)*(x6469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6470=IKcos(j4);
IkReal x6471=IKsin(j4);
IkReal x6472=(cj5*r00);
IkReal x6473=(cj5*r10);
IkReal x6474=(r21*sj5);
IkReal x6475=(cj5*r20);
IkReal x6476=((1.0)*x6470);
IkReal x6477=((1.0)*x6471);
IkReal x6478=(sj5*x6471);
IkReal x6479=(sj5*x6470);
evalcond[0]=((((-1.0)*x6473*x6476))+((r12*x6471))+((r11*x6479)));
evalcond[1]=(((x6471*x6474))+(((-1.0)*r22*x6476))+(((-1.0)*x6475*x6477)));
evalcond[2]=((((-1.0)*x6472*x6477))+((r01*x6478))+(((-1.0)*r02*x6476)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6476))+(((-1.0)*x6473*x6477))+((r11*x6478)));
evalcond[4]=(((r22*x6471))+((cj2*sj1))+((cj1*sj2))+((x6470*x6474))+(((-1.0)*x6475*x6476)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6471))+(((-1.0)*x6472*x6476))+((r01*x6479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6480=((1.0)*cj5);
CheckValue<IkReal> x6481 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6481.valid){
continue;
}
CheckValue<IkReal> x6482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6480))+(((-1.0)*r00*sj5)))),-1);
if(!x6482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6481.value)+(((1.5707963267949)*(x6482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6483=IKcos(j4);
IkReal x6484=IKsin(j4);
IkReal x6485=(cj5*r00);
IkReal x6486=(cj5*r10);
IkReal x6487=(r21*sj5);
IkReal x6488=(cj5*r20);
IkReal x6489=((1.0)*x6483);
IkReal x6490=((1.0)*x6484);
IkReal x6491=(sj5*x6484);
IkReal x6492=(sj5*x6483);
evalcond[0]=(((r11*x6492))+(((-1.0)*x6486*x6489))+((r12*x6484)));
evalcond[1]=((((-1.0)*x6488*x6490))+(((-1.0)*r22*x6489))+((x6484*x6487)));
evalcond[2]=(((r01*x6491))+(((-1.0)*r02*x6489))+(((-1.0)*x6485*x6490)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6489))+((r11*x6491))+(((-1.0)*x6486*x6490)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6488*x6489))+((cj1*sj2))+((x6483*x6487))+((r22*x6484)));
evalcond[5]=((((-1.0)*x6485*x6489))+((r01*x6492))+((r02*x6484))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6493=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6493.valid){
continue;
}
CheckValue<IkReal> x6494 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6493.value)))+(x6494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6495=IKcos(j4);
IkReal x6496=IKsin(j4);
IkReal x6497=(cj5*r00);
IkReal x6498=(cj5*r10);
IkReal x6499=(r21*sj5);
IkReal x6500=(cj5*r20);
IkReal x6501=((1.0)*x6495);
IkReal x6502=((1.0)*x6496);
IkReal x6503=(sj5*x6496);
IkReal x6504=(sj5*x6495);
evalcond[0]=(((r12*x6496))+(((-1.0)*x6498*x6501))+((r11*x6504)));
evalcond[1]=(((x6496*x6499))+(((-1.0)*x6500*x6502))+(((-1.0)*r22*x6501)));
evalcond[2]=((((-1.0)*r02*x6501))+(((-1.0)*x6497*x6502))+((r01*x6503)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6501))+(((-1.0)*x6498*x6502))+((r11*x6503)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6500*x6501))+((x6495*x6499))+((cj1*sj2))+((r22*x6496)));
evalcond[5]=(((r02*x6496))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6497*x6501))+((r01*x6504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6505=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6505);
rxp0_2=(py*r00);
rxp1_0=(r21*x6505);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6506=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6506);
rxp0_2=(py*r00);
rxp1_0=(r21*x6506);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6507=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6507);
rxp0_2=(py*r00);
rxp1_0=(r21*x6507);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6510=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6510.valid){
continue;
}
IkReal x6508=x6510.value;
IkReal x6509=(cj0*x6508);
cj4array[0]=((((-1.0)*cj1*cj2*x6509))+((sj1*sj2*x6509)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6511=IKsin(j4);
IkReal x6512=IKcos(j4);
IkReal x6513=(r21*sj5);
IkReal x6514=((1.0)*x6512);
IkReal x6515=((1.0)*cj5*x6511);
evalcond[0]=(r12*x6511);
evalcond[1]=((((-1.0)*r12*x6514))+(((-1.0)*cj0)));
evalcond[2]=(((x6511*x6513))+(((-1.0)*r20*x6515)));
evalcond[3]=(((r01*sj5*x6511))+(((-1.0)*r00*x6515)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6512*x6513))+(((-1.0)*cj5*r20*x6514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6518=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6518.valid){
continue;
}
IkReal x6516=x6518.value;
IkReal x6517=((1.0)*x6516);
cj4array[0]=((((-1.0)*cj1*sj2*x6517))+(((-1.0)*cj2*sj1*x6517)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6519=IKsin(j4);
IkReal x6520=IKcos(j4);
IkReal x6521=((1.0)*cj0);
IkReal x6522=(r01*sj5);
IkReal x6523=((1.0)*cj5*r00);
evalcond[0]=(r12*x6519);
evalcond[1]=((((-1.0)*r12*x6520))+(((-1.0)*x6521)));
evalcond[2]=((((-1.0)*cj5*r20*x6519))+((r21*sj5*x6519)));
evalcond[3]=((((-1.0)*x6519*x6523))+((x6519*x6522)));
evalcond[4]=((((-1.0)*sj1*sj2*x6521))+((x6520*x6522))+((cj0*cj1*cj2))+(((-1.0)*x6520*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6524=IKPowWithIntegerCheck(r12,-1);
if(!x6524.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6524.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6525=IKsin(j4);
IkReal x6526=IKcos(j4);
IkReal x6527=((1.0)*cj5*r00);
IkReal x6528=(sj5*x6526);
IkReal x6529=(sj5*x6525);
IkReal x6530=((1.0)*cj5*r20);
evalcond[0]=(r12*x6525);
evalcond[1]=((((-1.0)*x6525*x6530))+((r21*x6529)));
evalcond[2]=((((-1.0)*x6525*x6527))+((r01*x6529)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6526*x6530))+((r21*x6528)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x6526*x6527))+((cj0*cj1*cj2))+((r01*x6528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6531=((1.0)*cj5);
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6531))+(((-1.0)*r20*sj5)))),-1);
if(!x6532.valid){
continue;
}
CheckValue<IkReal> x6533 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x6531))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x6531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6532.value)))+(x6533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6534=IKsin(j4);
IkReal x6535=IKcos(j4);
IkReal x6536=(cj5*r00);
IkReal x6537=(cj1*cj2);
IkReal x6538=(cj5*r10);
IkReal x6539=(r21*sj5);
IkReal x6540=(cj5*r20);
IkReal x6541=((1.0)*x6535);
IkReal x6542=((1.0)*x6534);
IkReal x6543=(sj5*x6534);
IkReal x6544=(sj5*x6535);
IkReal x6545=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x6540*x6542))+(((-1.0)*r22*x6541))+((x6534*x6539)));
evalcond[1]=(sj0+(((-1.0)*x6536*x6542))+(((-1.0)*r02*x6541))+((r01*x6543)));
evalcond[2]=((((-1.0)*r12*x6541))+(((-1.0)*x6538*x6542))+((r11*x6543))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6540*x6541))+((cj1*sj2))+((r22*x6534))+((x6535*x6539)));
evalcond[4]=(((r02*x6534))+(((-1.0)*x6536*x6541))+((cj0*x6537))+(((-1.0)*cj0*x6545))+((r01*x6544)));
evalcond[5]=((((-1.0)*sj0*x6545))+((sj0*x6537))+(((-1.0)*x6538*x6541))+((r11*x6544))+((r12*x6534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6546.valid){
continue;
}
CheckValue<IkReal> x6547 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6546.value)))+(x6547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6548=IKsin(j4);
IkReal x6549=IKcos(j4);
IkReal x6550=(cj5*r00);
IkReal x6551=(cj1*cj2);
IkReal x6552=(cj5*r10);
IkReal x6553=(r21*sj5);
IkReal x6554=(cj5*r20);
IkReal x6555=((1.0)*x6549);
IkReal x6556=((1.0)*x6548);
IkReal x6557=(sj5*x6548);
IkReal x6558=(sj5*x6549);
IkReal x6559=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6555))+(((-1.0)*x6554*x6556))+((x6548*x6553)));
evalcond[1]=(sj0+(((-1.0)*x6550*x6556))+(((-1.0)*r02*x6555))+((r01*x6557)));
evalcond[2]=((((-1.0)*x6552*x6556))+(((-1.0)*r12*x6555))+((r11*x6557))+(((-1.0)*cj0)));
evalcond[3]=(((x6549*x6553))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6554*x6555))+((r22*x6548)));
evalcond[4]=((((-1.0)*x6550*x6555))+((r02*x6548))+(((-1.0)*cj0*x6559))+((cj0*x6551))+((r01*x6558)));
evalcond[5]=((((-1.0)*sj0*x6559))+(((-1.0)*x6552*x6555))+((r11*x6558))+((r12*x6548))+((sj0*x6551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6560=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6560.valid){
continue;
}
CheckValue<IkReal> x6561 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6560.value)))+(x6561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6562=IKsin(j4);
IkReal x6563=IKcos(j4);
IkReal x6564=(cj5*r00);
IkReal x6565=(cj1*cj2);
IkReal x6566=(cj5*r10);
IkReal x6567=(r21*sj5);
IkReal x6568=(cj5*r20);
IkReal x6569=((1.0)*x6563);
IkReal x6570=((1.0)*x6562);
IkReal x6571=(sj5*x6562);
IkReal x6572=(sj5*x6563);
IkReal x6573=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x6569))+((x6562*x6567))+(((-1.0)*x6568*x6570)));
evalcond[1]=(((r01*x6571))+sj0+(((-1.0)*r02*x6569))+(((-1.0)*x6564*x6570)));
evalcond[2]=((((-1.0)*x6566*x6570))+((r11*x6571))+(((-1.0)*cj0))+(((-1.0)*r12*x6569)));
evalcond[3]=(((cj2*sj1))+((r22*x6562))+((x6563*x6567))+((cj1*sj2))+(((-1.0)*x6568*x6569)));
evalcond[4]=(((r01*x6572))+((r02*x6562))+(((-1.0)*cj0*x6573))+((cj0*x6565))+(((-1.0)*x6564*x6569)));
evalcond[5]=((((-1.0)*x6566*x6569))+((r12*x6562))+((r11*x6572))+((sj0*x6565))+(((-1.0)*sj0*x6573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6574=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6574;
j0eval[1]=IKsign(x6574);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6575=cj5*cj5;
IkReal x6576=r21*r21;
IkReal x6577=(cj2*sj1);
IkReal x6578=(cj1*sj2);
IkReal x6579=(r21*sj5);
IkReal x6580=((1.0)*cj5*r20);
IkReal x6581=((r22*r22)+((x6575*(r20*r20)))+(((-2.0)*cj5*r20*x6579))+x6576+(((-1.0)*x6575*x6576)));
j4eval[0]=x6581;
j4eval[1]=IKsign(x6581);
j4eval[2]=((IKabs((((x6578*x6579))+(((-1.0)*x6578*x6580))+(((-1.0)*x6577*x6580))+((x6577*x6579)))))+(IKabs((((r22*x6578))+((r22*x6577))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6582=cj1*cj1;
IkReal x6583=(cj2*sj2);
IkReal x6584=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj2*x6584))+(((-2.0)*x6582*x6583))+(((-1.08349267049076)*sj2*x6582))+x6583+x6584+(((-2.0)*x6584*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6585=IKsin(j0);
IkReal x6586=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x6586))+(((0.10915)*x6585)));
evalcond[1]=((((-1.0)*py))+(((-0.10915)*x6586))+(((-0.81725)*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6587=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6587;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6588=cj5*cj5;
IkReal x6589=((1.0)*r21);
IkReal x6590=(cj5*sj5);
IkReal x6591=((1.0)*r20);
IkReal x6592=(((r01*r21))+((r00*r20*x6588))+(((-1.0)*r01*x6590*x6591))+((r02*r22))+(((-1.0)*r00*x6589*x6590))+(((-1.0)*r01*x6588*x6589)));
j4eval[0]=x6592;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6591))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6593=cj5*cj5;
IkReal x6594=(r21*sj5);
IkReal x6595=(r11*r21);
IkReal x6596=((1.0)*cj5*r20);
IkReal x6597=((((-1.0)*x6593*x6595))+((r12*r22))+x6595+(((-1.0)*r11*sj5*x6596))+(((-1.0)*cj5*r10*x6594))+((r10*r20*x6593)));
j4eval[0]=x6597;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6594))+(((-1.0)*sj0*x6596))))));
j4eval[2]=IKsign(x6597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6598=cj5*cj5;
IkReal x6599=(r21*sj5);
IkReal x6600=(r11*r21);
IkReal x6601=((1.0)*cj5*r20);
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6599))+(((-1.0)*sj0*x6601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
CheckValue<IkReal> x6603=IKPowWithIntegerCheck(IKsign((x6600+((r12*r22))+(((-1.0)*r11*sj5*x6601))+(((-1.0)*cj5*r10*x6599))+(((-1.0)*x6598*x6600))+((r10*r20*x6598)))),-1);
if(!x6603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6602.value)+(((1.5707963267949)*(x6603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6604=IKsin(j4);
IkReal x6605=IKcos(j4);
IkReal x6606=(r11*sj5);
IkReal x6607=(cj5*r00);
IkReal x6608=(cj5*r10);
IkReal x6609=(r21*sj5);
IkReal x6610=(cj5*r20);
IkReal x6611=(r01*sj5);
IkReal x6612=((1.0)*x6605);
IkReal x6613=((1.0)*x6604);
evalcond[0]=((((-1.0)*r22*x6612))+(((-1.0)*x6610*x6613))+((x6604*x6609)));
evalcond[1]=(((x6605*x6610))+(((-1.0)*r22*x6613))+(((-1.0)*x6609*x6612)));
evalcond[2]=((((-1.0)*x6607*x6613))+sj0+((x6604*x6611))+(((-1.0)*r02*x6612)));
evalcond[3]=(((x6605*x6607))+cj0+(((-1.0)*x6611*x6612))+(((-1.0)*r02*x6613)));
evalcond[4]=(((x6605*x6608))+(((-1.0)*r12*x6613))+(((-1.0)*x6606*x6612))+sj0);
evalcond[5]=((((-1.0)*r12*x6612))+(((-1.0)*x6608*x6613))+((x6604*x6606))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6614=cj5*cj5;
IkReal x6615=((1.0)*r21);
IkReal x6616=(cj5*sj5);
IkReal x6617=((1.0)*r20);
CheckValue<IkReal> x6618=IKPowWithIntegerCheck(IKsign((((r00*r20*x6614))+(((-1.0)*r00*x6615*x6616))+((r01*r21))+(((-1.0)*r01*x6614*x6615))+(((-1.0)*r01*x6616*x6617))+((r02*r22)))),-1);
if(!x6618.valid){
continue;
}
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6618.value)))+(x6619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6620=IKsin(j4);
IkReal x6621=IKcos(j4);
IkReal x6622=(r11*sj5);
IkReal x6623=(cj5*r00);
IkReal x6624=(cj5*r10);
IkReal x6625=(r21*sj5);
IkReal x6626=(cj5*r20);
IkReal x6627=(r01*sj5);
IkReal x6628=((1.0)*x6621);
IkReal x6629=((1.0)*x6620);
evalcond[0]=((((-1.0)*r22*x6628))+((x6620*x6625))+(((-1.0)*x6626*x6629)));
evalcond[1]=((((-1.0)*r22*x6629))+((x6621*x6626))+(((-1.0)*x6625*x6628)));
evalcond[2]=(sj0+((x6620*x6627))+(((-1.0)*r02*x6628))+(((-1.0)*x6623*x6629)));
evalcond[3]=(cj0+(((-1.0)*r02*x6629))+((x6621*x6623))+(((-1.0)*x6627*x6628)));
evalcond[4]=(sj0+(((-1.0)*r12*x6629))+((x6621*x6624))+(((-1.0)*x6622*x6628)));
evalcond[5]=((((-1.0)*r12*x6628))+((x6620*x6622))+(((-1.0)*x6624*x6629))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6630=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6630.valid){
continue;
}
CheckValue<IkReal> x6631 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6630.value)))+(x6631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6632=IKsin(j4);
IkReal x6633=IKcos(j4);
IkReal x6634=(r11*sj5);
IkReal x6635=(cj5*r00);
IkReal x6636=(cj5*r10);
IkReal x6637=(r21*sj5);
IkReal x6638=(cj5*r20);
IkReal x6639=(r01*sj5);
IkReal x6640=((1.0)*x6633);
IkReal x6641=((1.0)*x6632);
evalcond[0]=((((-1.0)*x6638*x6641))+(((-1.0)*r22*x6640))+((x6632*x6637)));
evalcond[1]=((((-1.0)*r22*x6641))+(((-1.0)*x6637*x6640))+((x6633*x6638)));
evalcond[2]=(sj0+((x6632*x6639))+(((-1.0)*r02*x6640))+(((-1.0)*x6635*x6641)));
evalcond[3]=((((-1.0)*x6639*x6640))+cj0+((x6633*x6635))+(((-1.0)*r02*x6641)));
evalcond[4]=(sj0+(((-1.0)*x6634*x6640))+((x6633*x6636))+(((-1.0)*r12*x6641)));
evalcond[5]=((((-1.0)*x6636*x6641))+((x6632*x6634))+(((-1.0)*cj0))+(((-1.0)*r12*x6640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((-2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((-2.52189136462044)*py))))+IKsqr(((((-2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((-2.52189136462044)*py))), ((((-2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6642=IKsin(j0);
IkReal x6643=IKcos(j0);
evalcond[0]=((((-0.03275)*x6643))+(((-1.0)*px))+(((0.10915)*x6642)));
evalcond[1]=((((-0.03275)*x6642))+(((-1.0)*py))+(((-0.10915)*x6643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6644=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6644;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6645=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6645;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6646=cj5*cj5;
IkReal x6647=((1.0)*r21);
IkReal x6648=(cj5*r20);
IkReal x6649=((((-1.0)*cj5*r00*sj5*x6647))+((r01*r21))+(((-1.0)*r01*x6646*x6647))+(((-1.0)*r01*sj5*x6648))+((r02*r22))+((r00*r20*x6646)));
j4eval[0]=x6649;
j4eval[1]=IKsign(x6649);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6647))+((sj0*x6648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6650=cj5*cj5;
IkReal x6651=((1.0)*r21);
IkReal x6652=(cj5*r20);
CheckValue<IkReal> x6653 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6651))+((sj0*x6652)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6653.valid){
continue;
}
CheckValue<IkReal> x6654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6650*x6651))+((r01*r21))+((r00*r20*x6650))+(((-1.0)*r01*sj5*x6652))+(((-1.0)*cj5*r00*sj5*x6651))+((r02*r22)))),-1);
if(!x6654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6653.value)+(((1.5707963267949)*(x6654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6655=IKsin(j4);
IkReal x6656=IKcos(j4);
IkReal x6657=((1.0)*cj0);
IkReal x6658=(cj5*r00);
IkReal x6659=(r11*sj5);
IkReal x6660=(cj5*r10);
IkReal x6661=(r21*sj5);
IkReal x6662=(cj5*r20);
IkReal x6663=(r01*sj5);
IkReal x6664=((1.0)*x6656);
IkReal x6665=((1.0)*x6655);
evalcond[0]=((((-1.0)*x6662*x6665))+((x6655*x6661))+(((-1.0)*r22*x6664)));
evalcond[1]=(((x6656*x6662))+(((-1.0)*x6661*x6664))+(((-1.0)*r22*x6665)));
evalcond[2]=(sj0+(((-1.0)*x6658*x6665))+(((-1.0)*r02*x6664))+((x6655*x6663)));
evalcond[3]=((((-1.0)*x6657))+(((-1.0)*x6660*x6665))+(((-1.0)*r12*x6664))+((x6655*x6659)));
evalcond[4]=(((x6656*x6658))+(((-1.0)*x6657))+(((-1.0)*r02*x6665))+(((-1.0)*x6663*x6664)));
evalcond[5]=((((-1.0)*sj0))+((x6656*x6660))+(((-1.0)*r12*x6665))+(((-1.0)*x6659*x6664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6666=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6666.valid){
continue;
}
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6666.value)))+(x6667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6668=IKsin(j4);
IkReal x6669=IKcos(j4);
IkReal x6670=((1.0)*cj0);
IkReal x6671=(cj5*r00);
IkReal x6672=(r11*sj5);
IkReal x6673=(cj5*r10);
IkReal x6674=(r21*sj5);
IkReal x6675=(cj5*r20);
IkReal x6676=(r01*sj5);
IkReal x6677=((1.0)*x6669);
IkReal x6678=((1.0)*x6668);
evalcond[0]=(((x6668*x6674))+(((-1.0)*r22*x6677))+(((-1.0)*x6675*x6678)));
evalcond[1]=(((x6669*x6675))+(((-1.0)*x6674*x6677))+(((-1.0)*r22*x6678)));
evalcond[2]=((((-1.0)*r02*x6677))+sj0+(((-1.0)*x6671*x6678))+((x6668*x6676)));
evalcond[3]=((((-1.0)*x6673*x6678))+(((-1.0)*x6670))+(((-1.0)*r12*x6677))+((x6668*x6672)));
evalcond[4]=((((-1.0)*r02*x6678))+(((-1.0)*x6670))+((x6669*x6671))+(((-1.0)*x6676*x6677)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6672*x6677))+(((-1.0)*r12*x6678))+((x6669*x6673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6679=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6679.valid){
continue;
}
CheckValue<IkReal> x6680 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6679.value)))+(x6680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6681=IKsin(j4);
IkReal x6682=IKcos(j4);
IkReal x6683=((1.0)*cj0);
IkReal x6684=(cj5*r00);
IkReal x6685=(r11*sj5);
IkReal x6686=(cj5*r10);
IkReal x6687=(r21*sj5);
IkReal x6688=(cj5*r20);
IkReal x6689=(r01*sj5);
IkReal x6690=((1.0)*x6682);
IkReal x6691=((1.0)*x6681);
evalcond[0]=((((-1.0)*x6688*x6691))+((x6681*x6687))+(((-1.0)*r22*x6690)));
evalcond[1]=((((-1.0)*x6687*x6690))+((x6682*x6688))+(((-1.0)*r22*x6691)));
evalcond[2]=(sj0+(((-1.0)*x6684*x6691))+(((-1.0)*r02*x6690))+((x6681*x6689)));
evalcond[3]=((((-1.0)*x6686*x6691))+(((-1.0)*x6683))+((x6681*x6685))+(((-1.0)*r12*x6690)));
evalcond[4]=((((-1.0)*r02*x6691))+(((-1.0)*x6689*x6690))+(((-1.0)*x6683))+((x6682*x6684)));
evalcond[5]=((((-1.0)*x6685*x6690))+(((-1.0)*sj0))+(((-1.0)*r12*x6691))+((x6682*x6686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6692=IKsin(j0);
IkReal x6693=IKcos(j0);
IkReal x6694=((1.0)*cj5);
IkReal x6695=((1.0)*sj5);
IkReal x6696=((0.09465)*cj5);
IkReal x6697=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r00*x6695))+x6693+(((-1.0)*r01*x6694)));
evalcond[1]=((((-1.0)*r10*x6695))+x6692+(((-1.0)*r11*x6694)));
evalcond[2]=((((-1.0)*r00*x6697))+(((-1.0)*r01*x6696))+(((-1.0)*px))+(((0.10915)*x6692)));
evalcond[3]=((((-1.0)*r10*x6697))+(((-0.10915)*x6693))+(((-1.0)*py))+(((-1.0)*r11*x6696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6698=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6698;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6699=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6699;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6700=cj5*cj5;
IkReal x6701=r21*r21;
IkReal x6702=(r21*sj5);
IkReal x6703=(cj5*r20);
IkReal x6704=(((x6700*(r20*r20)))+(r22*r22)+x6701+(((-2.0)*x6702*x6703))+(((-1.0)*x6700*x6701)));
j4eval[0]=x6704;
j4eval[1]=IKsign(x6704);
j4eval[2]=((IKabs((x6702+(((-1.0)*x6703)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6705=cj5*cj5;
IkReal x6706=r21*r21;
IkReal x6707=(r21*sj5);
IkReal x6708=(cj5*r20);
CheckValue<IkReal> x6709 = IKatan2WithCheck(IkReal(r22),IkReal((x6707+(((-1.0)*x6708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6709.valid){
continue;
}
CheckValue<IkReal> x6710=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6705*x6706))+(r22*r22)+x6706+(((-2.0)*x6707*x6708))+((x6705*(r20*r20))))),-1);
if(!x6710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6709.value)+(((1.5707963267949)*(x6710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6711=IKsin(j4);
IkReal x6712=IKcos(j4);
IkReal x6713=(r11*sj5);
IkReal x6714=(r21*sj5);
IkReal x6715=(cj5*r00);
IkReal x6716=(cj5*r10);
IkReal x6717=(cj5*r20);
IkReal x6718=(r01*sj5);
IkReal x6719=((1.0)*x6712);
IkReal x6720=((1.0)*x6711);
evalcond[0]=(((x6711*x6714))+(((-1.0)*x6717*x6720))+(((-1.0)*r22*x6719)));
evalcond[1]=((((-1.0)*x6718*x6719))+((x6712*x6715))+(((-1.0)*r02*x6720)));
evalcond[2]=((((-1.0)*x6713*x6719))+((x6712*x6716))+(((-1.0)*r12*x6720)));
evalcond[3]=(sj0+((x6711*x6718))+(((-1.0)*r02*x6719))+(((-1.0)*x6715*x6720)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6720))+((x6712*x6717))+(((-1.0)*x6714*x6719)));
evalcond[5]=(((x6711*x6713))+(((-1.0)*r12*x6719))+(((-1.0)*x6716*x6720))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6721=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6721.valid){
continue;
}
CheckValue<IkReal> x6722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6721.value)))+(x6722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6723=IKsin(j4);
IkReal x6724=IKcos(j4);
IkReal x6725=(r11*sj5);
IkReal x6726=(r21*sj5);
IkReal x6727=(cj5*r00);
IkReal x6728=(cj5*r10);
IkReal x6729=(cj5*r20);
IkReal x6730=(r01*sj5);
IkReal x6731=((1.0)*x6724);
IkReal x6732=((1.0)*x6723);
evalcond[0]=((((-1.0)*r22*x6731))+((x6723*x6726))+(((-1.0)*x6729*x6732)));
evalcond[1]=(((x6724*x6727))+(((-1.0)*x6730*x6731))+(((-1.0)*r02*x6732)));
evalcond[2]=(((x6724*x6728))+(((-1.0)*r12*x6732))+(((-1.0)*x6725*x6731)));
evalcond[3]=(sj0+(((-1.0)*x6727*x6732))+(((-1.0)*r02*x6731))+((x6723*x6730)));
evalcond[4]=((1.0)+((x6724*x6729))+(((-1.0)*r22*x6732))+(((-1.0)*x6726*x6731)));
evalcond[5]=((((-1.0)*r12*x6731))+(((-1.0)*x6728*x6732))+((x6723*x6725))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6733 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6733.valid){
continue;
}
CheckValue<IkReal> x6734=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6733.value)+(((1.5707963267949)*(x6734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6735=IKsin(j4);
IkReal x6736=IKcos(j4);
IkReal x6737=(r11*sj5);
IkReal x6738=(r21*sj5);
IkReal x6739=(cj5*r00);
IkReal x6740=(cj5*r10);
IkReal x6741=(cj5*r20);
IkReal x6742=(r01*sj5);
IkReal x6743=((1.0)*x6736);
IkReal x6744=((1.0)*x6735);
evalcond[0]=((((-1.0)*r22*x6743))+((x6735*x6738))+(((-1.0)*x6741*x6744)));
evalcond[1]=((((-1.0)*x6742*x6743))+(((-1.0)*r02*x6744))+((x6736*x6739)));
evalcond[2]=((((-1.0)*r12*x6744))+(((-1.0)*x6737*x6743))+((x6736*x6740)));
evalcond[3]=(sj0+(((-1.0)*r02*x6743))+((x6735*x6742))+(((-1.0)*x6739*x6744)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6744))+(((-1.0)*x6738*x6743))+((x6736*x6741)));
evalcond[5]=((((-1.0)*r12*x6743))+((x6735*x6737))+(((-1.0)*x6740*x6744))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6745=IKsin(j0);
IkReal x6746=IKcos(j0);
evalcond[0]=((((0.39225)*x6746))+(((-1.0)*px))+(((0.10915)*x6745)));
evalcond[1]=((((0.39225)*x6745))+(((-0.10915)*x6746))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6747=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6747;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6748=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6748;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6749=cj5*cj5;
IkReal x6750=((1.0)*r21);
IkReal x6751=(cj5*r20);
IkReal x6752=((((-1.0)*r01*x6749*x6750))+((r01*r21))+(((-1.0)*r01*sj5*x6751))+((r02*r22))+((r00*r20*x6749))+(((-1.0)*cj5*r00*sj5*x6750)));
j4eval[0]=x6752;
j4eval[1]=IKsign(x6752);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6750))+((sj0*x6751))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6753=cj5*cj5;
IkReal x6754=((1.0)*r21);
IkReal x6755=(cj5*r20);
CheckValue<IkReal> x6756=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*sj5*x6755))+((r00*r20*x6753))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6754))+(((-1.0)*r01*x6753*x6754)))),-1);
if(!x6756.valid){
continue;
}
CheckValue<IkReal> x6757 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6754))+((sj0*x6755)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6756.value)))+(x6757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6758=IKsin(j4);
IkReal x6759=IKcos(j4);
IkReal x6760=((1.0)*cj0);
IkReal x6761=(cj5*r00);
IkReal x6762=(r11*sj5);
IkReal x6763=(cj5*r10);
IkReal x6764=(r21*sj5);
IkReal x6765=(cj5*r20);
IkReal x6766=(r01*sj5);
IkReal x6767=((1.0)*x6759);
IkReal x6768=((1.0)*x6758);
evalcond[0]=(((x6758*x6764))+(((-1.0)*r22*x6767))+(((-1.0)*x6765*x6768)));
evalcond[1]=(((x6759*x6765))+(((-1.0)*r22*x6768))+(((-1.0)*x6764*x6767)));
evalcond[2]=(((x6758*x6766))+sj0+(((-1.0)*r02*x6767))+(((-1.0)*x6761*x6768)));
evalcond[3]=(((x6758*x6762))+(((-1.0)*x6760))+(((-1.0)*r12*x6767))+(((-1.0)*x6763*x6768)));
evalcond[4]=(((x6759*x6761))+(((-1.0)*x6766*x6767))+(((-1.0)*x6760))+(((-1.0)*r02*x6768)));
evalcond[5]=(((x6759*x6763))+(((-1.0)*sj0))+(((-1.0)*x6762*x6767))+(((-1.0)*r12*x6768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6769=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6769.valid){
continue;
}
CheckValue<IkReal> x6770 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6769.value)))+(x6770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6771=IKsin(j4);
IkReal x6772=IKcos(j4);
IkReal x6773=((1.0)*cj0);
IkReal x6774=(cj5*r00);
IkReal x6775=(r11*sj5);
IkReal x6776=(cj5*r10);
IkReal x6777=(r21*sj5);
IkReal x6778=(cj5*r20);
IkReal x6779=(r01*sj5);
IkReal x6780=((1.0)*x6772);
IkReal x6781=((1.0)*x6771);
evalcond[0]=((((-1.0)*x6778*x6781))+((x6771*x6777))+(((-1.0)*r22*x6780)));
evalcond[1]=(((x6772*x6778))+(((-1.0)*r22*x6781))+(((-1.0)*x6777*x6780)));
evalcond[2]=(sj0+(((-1.0)*r02*x6780))+(((-1.0)*x6774*x6781))+((x6771*x6779)));
evalcond[3]=((((-1.0)*x6773))+(((-1.0)*r12*x6780))+((x6771*x6775))+(((-1.0)*x6776*x6781)));
evalcond[4]=((((-1.0)*x6773))+(((-1.0)*x6779*x6780))+(((-1.0)*r02*x6781))+((x6772*x6774)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6781))+((x6772*x6776))+(((-1.0)*x6775*x6780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6782=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6782.valid){
continue;
}
CheckValue<IkReal> x6783 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6782.value)))+(x6783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6784=IKsin(j4);
IkReal x6785=IKcos(j4);
IkReal x6786=((1.0)*cj0);
IkReal x6787=(cj5*r00);
IkReal x6788=(r11*sj5);
IkReal x6789=(cj5*r10);
IkReal x6790=(r21*sj5);
IkReal x6791=(cj5*r20);
IkReal x6792=(r01*sj5);
IkReal x6793=((1.0)*x6785);
IkReal x6794=((1.0)*x6784);
evalcond[0]=(((x6784*x6790))+(((-1.0)*r22*x6793))+(((-1.0)*x6791*x6794)));
evalcond[1]=(((x6785*x6791))+(((-1.0)*r22*x6794))+(((-1.0)*x6790*x6793)));
evalcond[2]=(sj0+((x6784*x6792))+(((-1.0)*x6787*x6794))+(((-1.0)*r02*x6793)));
evalcond[3]=(((x6784*x6788))+(((-1.0)*x6786))+(((-1.0)*x6789*x6794))+(((-1.0)*r12*x6793)));
evalcond[4]=((((-1.0)*x6786))+(((-1.0)*x6792*x6793))+((x6785*x6787))+(((-1.0)*r02*x6794)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6788*x6793))+((x6785*x6789))+(((-1.0)*r12*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6795=((1.0)*sj5);
IkReal x6796=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6795))+(((-1.0)*r11*x6796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6795))+(((-1.0)*r01*x6796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6795))+(((-1.0)*r11*x6796))))+IKsqr(((((-1.0)*r00*x6795))+(((-1.0)*r01*x6796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6795))+(((-1.0)*r11*x6796))), ((((-1.0)*r00*x6795))+(((-1.0)*r01*x6796))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6797=IKsin(j0);
IkReal x6798=IKcos(j0);
IkReal x6799=((1.0)*cj5);
IkReal x6800=((1.0)*sj5);
IkReal x6801=((0.09465)*cj5);
IkReal x6802=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x6799))+(((-1.0)*r00*x6800))+(((-1.0)*x6798)));
evalcond[1]=((((-1.0)*r11*x6799))+(((-1.0)*r10*x6800))+(((-1.0)*x6797)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r01*x6801))+(((0.10915)*x6797))+(((-1.0)*r00*x6802)));
evalcond[3]=((((-1.0)*r11*x6801))+(((-1.0)*py))+(((-1.0)*r10*x6802))+(((-0.10915)*x6798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6803=((1.0)*sj5);
IkReal x6804=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6803)));
j4eval[0]=x6804;
j4eval[1]=IKsign(x6804);
j4eval[2]=((IKabs(((((-1.0)*r01*x6803))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6805=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6805;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6806=r21*r21;
IkReal x6807=cj5*cj5;
IkReal x6808=(r21*sj5);
IkReal x6809=(cj5*r20);
IkReal x6810=((((-1.0)*x6807*(r20*r20)))+(((-1.0)*x6806))+(((-1.0)*(r22*r22)))+(((2.0)*x6808*x6809))+((x6806*x6807)));
j4eval[0]=x6810;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x6809))+x6808))));
j4eval[2]=IKsign(x6810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6811=r21*r21;
IkReal x6812=cj5*cj5;
IkReal x6813=(r21*sj5);
IkReal x6814=(cj5*r20);
CheckValue<IkReal> x6815 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6814))+x6813)),IKFAST_ATAN2_MAGTHRESH);
if(!x6815.valid){
continue;
}
CheckValue<IkReal> x6816=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6811))+((x6811*x6812))+(((2.0)*x6813*x6814))+(((-1.0)*(r22*r22)))+(((-1.0)*x6812*(r20*r20))))),-1);
if(!x6816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6815.value)+(((1.5707963267949)*(x6816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6817=IKsin(j4);
IkReal x6818=IKcos(j4);
IkReal x6819=(r11*sj5);
IkReal x6820=(r21*sj5);
IkReal x6821=(cj5*r00);
IkReal x6822=(cj5*r10);
IkReal x6823=(cj5*r20);
IkReal x6824=(r01*sj5);
IkReal x6825=((1.0)*x6818);
IkReal x6826=((1.0)*x6817);
evalcond[0]=(((x6817*x6820))+(((-1.0)*x6823*x6826))+(((-1.0)*r22*x6825)));
evalcond[1]=((((-1.0)*r02*x6826))+(((-1.0)*x6824*x6825))+((x6818*x6821)));
evalcond[2]=((((-1.0)*r12*x6826))+((x6818*x6822))+(((-1.0)*x6819*x6825)));
evalcond[3]=(((x6817*x6824))+sj0+(((-1.0)*r02*x6825))+(((-1.0)*x6821*x6826)));
evalcond[4]=((-1.0)+((x6818*x6823))+(((-1.0)*r22*x6826))+(((-1.0)*x6820*x6825)));
evalcond[5]=((((-1.0)*r12*x6825))+(((-1.0)*x6822*x6826))+((x6817*x6819))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6827=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6827.valid){
continue;
}
CheckValue<IkReal> x6828 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6827.value)))+(x6828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6829=IKsin(j4);
IkReal x6830=IKcos(j4);
IkReal x6831=(r11*sj5);
IkReal x6832=(r21*sj5);
IkReal x6833=(cj5*r00);
IkReal x6834=(cj5*r10);
IkReal x6835=(cj5*r20);
IkReal x6836=(r01*sj5);
IkReal x6837=((1.0)*x6830);
IkReal x6838=((1.0)*x6829);
evalcond[0]=((((-1.0)*r22*x6837))+((x6829*x6832))+(((-1.0)*x6835*x6838)));
evalcond[1]=(((x6830*x6833))+(((-1.0)*r02*x6838))+(((-1.0)*x6836*x6837)));
evalcond[2]=((((-1.0)*r12*x6838))+((x6830*x6834))+(((-1.0)*x6831*x6837)));
evalcond[3]=(sj0+(((-1.0)*x6833*x6838))+(((-1.0)*r02*x6837))+((x6829*x6836)));
evalcond[4]=((-1.0)+((x6830*x6835))+(((-1.0)*x6832*x6837))+(((-1.0)*r22*x6838)));
evalcond[5]=((((-1.0)*r12*x6837))+((x6829*x6831))+(((-1.0)*x6834*x6838))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6839=((1.0)*sj5);
CheckValue<IkReal> x6840=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6839)))),-1);
if(!x6840.valid){
continue;
}
CheckValue<IkReal> x6841 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6839))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6840.value)))+(x6841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6842=IKsin(j4);
IkReal x6843=IKcos(j4);
IkReal x6844=(r11*sj5);
IkReal x6845=(r21*sj5);
IkReal x6846=(cj5*r00);
IkReal x6847=(cj5*r10);
IkReal x6848=(cj5*r20);
IkReal x6849=(r01*sj5);
IkReal x6850=((1.0)*x6843);
IkReal x6851=((1.0)*x6842);
evalcond[0]=((((-1.0)*r22*x6850))+(((-1.0)*x6848*x6851))+((x6842*x6845)));
evalcond[1]=((((-1.0)*r02*x6851))+((x6843*x6846))+(((-1.0)*x6849*x6850)));
evalcond[2]=((((-1.0)*r12*x6851))+(((-1.0)*x6844*x6850))+((x6843*x6847)));
evalcond[3]=(sj0+(((-1.0)*r02*x6850))+(((-1.0)*x6846*x6851))+((x6842*x6849)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6851))+((x6843*x6848))+(((-1.0)*x6845*x6850)));
evalcond[5]=((((-1.0)*x6847*x6851))+(((-1.0)*r12*x6850))+((x6842*x6844))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6852=IKsin(j0);
IkReal x6853=IKcos(j0);
evalcond[0]=((((0.10915)*x6852))+(((-1.0)*px))+(((-0.39225)*x6853)));
evalcond[1]=((((-0.10915)*x6853))+(((-1.0)*py))+(((-0.39225)*x6852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6854=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6854;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6855=cj5*cj5;
IkReal x6856=((1.0)*r21);
IkReal x6857=(cj5*sj5);
IkReal x6858=((1.0)*r20);
IkReal x6859=((((-1.0)*r01*x6857*x6858))+((r01*r21))+(((-1.0)*r01*x6855*x6856))+(((-1.0)*r00*x6856*x6857))+((r02*r22))+((r00*r20*x6855)));
j4eval[0]=x6859;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6858)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6860=cj5*cj5;
IkReal x6861=(r21*sj5);
IkReal x6862=(r11*r21);
IkReal x6863=((1.0)*cj5*r20);
IkReal x6864=((((-1.0)*x6860*x6862))+((r12*r22))+(((-1.0)*cj5*r10*x6861))+x6862+(((-1.0)*r11*sj5*x6863))+((r10*r20*x6860)));
j4eval[0]=x6864;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6861))+(((-1.0)*sj0*x6863))))));
j4eval[2]=IKsign(x6864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6865=cj5*cj5;
IkReal x6866=(r21*sj5);
IkReal x6867=(r11*r21);
IkReal x6868=((1.0)*cj5*r20);
CheckValue<IkReal> x6869=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6865*x6867))+((r12*r22))+(((-1.0)*cj5*r10*x6866))+x6867+(((-1.0)*r11*sj5*x6868))+((r10*r20*x6865)))),-1);
if(!x6869.valid){
continue;
}
CheckValue<IkReal> x6870 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6866))+(((-1.0)*sj0*x6868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6869.value)))+(x6870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6871=IKsin(j4);
IkReal x6872=IKcos(j4);
IkReal x6873=(r11*sj5);
IkReal x6874=(cj5*r00);
IkReal x6875=(cj5*r10);
IkReal x6876=(r21*sj5);
IkReal x6877=(cj5*r20);
IkReal x6878=(r01*sj5);
IkReal x6879=((1.0)*x6872);
IkReal x6880=((1.0)*x6871);
evalcond[0]=((((-1.0)*r22*x6879))+((x6871*x6876))+(((-1.0)*x6877*x6880)));
evalcond[1]=((((-1.0)*x6876*x6879))+((x6872*x6877))+(((-1.0)*r22*x6880)));
evalcond[2]=(sj0+(((-1.0)*r02*x6879))+((x6871*x6878))+(((-1.0)*x6874*x6880)));
evalcond[3]=(cj0+((x6872*x6874))+(((-1.0)*x6878*x6879))+(((-1.0)*r02*x6880)));
evalcond[4]=(sj0+((x6872*x6875))+(((-1.0)*x6873*x6879))+(((-1.0)*r12*x6880)));
evalcond[5]=((((-1.0)*x6875*x6880))+(((-1.0)*r12*x6879))+((x6871*x6873))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6881=cj5*cj5;
IkReal x6882=((1.0)*r21);
IkReal x6883=(cj5*sj5);
IkReal x6884=((1.0)*r20);
CheckValue<IkReal> x6885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
CheckValue<IkReal> x6886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6882*x6883))+((r00*r20*x6881))+((r01*r21))+(((-1.0)*r01*x6883*x6884))+(((-1.0)*r01*x6881*x6882))+((r02*r22)))),-1);
if(!x6886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6885.value)+(((1.5707963267949)*(x6886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6887=IKsin(j4);
IkReal x6888=IKcos(j4);
IkReal x6889=(r11*sj5);
IkReal x6890=(cj5*r00);
IkReal x6891=(cj5*r10);
IkReal x6892=(r21*sj5);
IkReal x6893=(cj5*r20);
IkReal x6894=(r01*sj5);
IkReal x6895=((1.0)*x6888);
IkReal x6896=((1.0)*x6887);
evalcond[0]=((((-1.0)*x6893*x6896))+(((-1.0)*r22*x6895))+((x6887*x6892)));
evalcond[1]=((((-1.0)*x6892*x6895))+((x6888*x6893))+(((-1.0)*r22*x6896)));
evalcond[2]=(sj0+(((-1.0)*x6890*x6896))+(((-1.0)*r02*x6895))+((x6887*x6894)));
evalcond[3]=(cj0+(((-1.0)*x6894*x6895))+((x6888*x6890))+(((-1.0)*r02*x6896)));
evalcond[4]=((((-1.0)*x6889*x6895))+sj0+((x6888*x6891))+(((-1.0)*r12*x6896)));
evalcond[5]=(((x6887*x6889))+(((-1.0)*x6891*x6896))+(((-1.0)*r12*x6895))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6897.valid){
continue;
}
CheckValue<IkReal> x6898 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6897.value)))+(x6898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6899=IKsin(j4);
IkReal x6900=IKcos(j4);
IkReal x6901=(r11*sj5);
IkReal x6902=(cj5*r00);
IkReal x6903=(cj5*r10);
IkReal x6904=(r21*sj5);
IkReal x6905=(cj5*r20);
IkReal x6906=(r01*sj5);
IkReal x6907=((1.0)*x6900);
IkReal x6908=((1.0)*x6899);
evalcond[0]=(((x6899*x6904))+(((-1.0)*r22*x6907))+(((-1.0)*x6905*x6908)));
evalcond[1]=((((-1.0)*x6904*x6907))+(((-1.0)*r22*x6908))+((x6900*x6905)));
evalcond[2]=((((-1.0)*r02*x6907))+sj0+((x6899*x6906))+(((-1.0)*x6902*x6908)));
evalcond[3]=((((-1.0)*r02*x6908))+cj0+(((-1.0)*x6906*x6907))+((x6900*x6902)));
evalcond[4]=(sj0+(((-1.0)*r12*x6908))+((x6900*x6903))+(((-1.0)*x6901*x6907)));
evalcond[5]=(((x6899*x6901))+(((-1.0)*r12*x6907))+(((-1.0)*x6903*x6908))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((-0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.160559264620033)*px))+(((1.20217186450501)*py))), ((((-0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6909=IKsin(j0);
IkReal x6910=IKcos(j0);
evalcond[0]=((((0.81725)*x6910))+(((-1.0)*px))+(((0.10915)*x6909)));
evalcond[1]=((((0.81725)*x6909))+(((-1.0)*py))+(((-0.10915)*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6911;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6912=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6912;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6913=cj5*cj5;
IkReal x6914=((1.0)*r21);
IkReal x6915=(cj5*r20);
IkReal x6916=((((-1.0)*r01*sj5*x6915))+(((-1.0)*r01*x6913*x6914))+(((-1.0)*cj5*r00*sj5*x6914))+((r01*r21))+((r00*r20*x6913))+((r02*r22)));
j4eval[0]=x6916;
j4eval[1]=IKsign(x6916);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6914))+((sj0*x6915))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6917=cj5*cj5;
IkReal x6918=((1.0)*r21);
IkReal x6919=(cj5*r20);
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6918))+((sj0*x6919)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
CheckValue<IkReal> x6921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x6919))+(((-1.0)*r01*x6917*x6918))+(((-1.0)*cj5*r00*sj5*x6918))+((r01*r21))+((r00*r20*x6917))+((r02*r22)))),-1);
if(!x6921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6920.value)+(((1.5707963267949)*(x6921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6922=IKsin(j4);
IkReal x6923=IKcos(j4);
IkReal x6924=((1.0)*cj0);
IkReal x6925=(cj5*r00);
IkReal x6926=(r11*sj5);
IkReal x6927=(cj5*r10);
IkReal x6928=(r21*sj5);
IkReal x6929=(cj5*r20);
IkReal x6930=(r01*sj5);
IkReal x6931=((1.0)*x6923);
IkReal x6932=((1.0)*x6922);
evalcond[0]=(((x6922*x6928))+(((-1.0)*r22*x6931))+(((-1.0)*x6929*x6932)));
evalcond[1]=(((x6923*x6929))+(((-1.0)*r22*x6932))+(((-1.0)*x6928*x6931)));
evalcond[2]=(sj0+((x6922*x6930))+(((-1.0)*x6925*x6932))+(((-1.0)*r02*x6931)));
evalcond[3]=(((x6922*x6926))+(((-1.0)*r12*x6931))+(((-1.0)*x6924))+(((-1.0)*x6927*x6932)));
evalcond[4]=(((x6923*x6925))+(((-1.0)*x6930*x6931))+(((-1.0)*r02*x6932))+(((-1.0)*x6924)));
evalcond[5]=((((-1.0)*x6926*x6931))+(((-1.0)*sj0))+((x6923*x6927))+(((-1.0)*r12*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6933=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6933.valid){
continue;
}
CheckValue<IkReal> x6934 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6933.value)))+(x6934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6935=IKsin(j4);
IkReal x6936=IKcos(j4);
IkReal x6937=((1.0)*cj0);
IkReal x6938=(cj5*r00);
IkReal x6939=(r11*sj5);
IkReal x6940=(cj5*r10);
IkReal x6941=(r21*sj5);
IkReal x6942=(cj5*r20);
IkReal x6943=(r01*sj5);
IkReal x6944=((1.0)*x6936);
IkReal x6945=((1.0)*x6935);
evalcond[0]=((((-1.0)*x6942*x6945))+(((-1.0)*r22*x6944))+((x6935*x6941)));
evalcond[1]=((((-1.0)*x6941*x6944))+((x6936*x6942))+(((-1.0)*r22*x6945)));
evalcond[2]=(sj0+(((-1.0)*r02*x6944))+(((-1.0)*x6938*x6945))+((x6935*x6943)));
evalcond[3]=((((-1.0)*r12*x6944))+(((-1.0)*x6940*x6945))+((x6935*x6939))+(((-1.0)*x6937)));
evalcond[4]=((((-1.0)*x6943*x6944))+(((-1.0)*r02*x6945))+(((-1.0)*x6937))+((x6936*x6938)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6945))+((x6936*x6940))+(((-1.0)*x6939*x6944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6946=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6946.valid){
continue;
}
CheckValue<IkReal> x6947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6946.value)))+(x6947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6948=IKsin(j4);
IkReal x6949=IKcos(j4);
IkReal x6950=((1.0)*cj0);
IkReal x6951=(cj5*r00);
IkReal x6952=(r11*sj5);
IkReal x6953=(cj5*r10);
IkReal x6954=(r21*sj5);
IkReal x6955=(cj5*r20);
IkReal x6956=(r01*sj5);
IkReal x6957=((1.0)*x6949);
IkReal x6958=((1.0)*x6948);
evalcond[0]=((((-1.0)*x6955*x6958))+(((-1.0)*r22*x6957))+((x6948*x6954)));
evalcond[1]=(((x6949*x6955))+(((-1.0)*r22*x6958))+(((-1.0)*x6954*x6957)));
evalcond[2]=((((-1.0)*x6951*x6958))+sj0+(((-1.0)*r02*x6957))+((x6948*x6956)));
evalcond[3]=((((-1.0)*r12*x6957))+(((-1.0)*x6950))+((x6948*x6952))+(((-1.0)*x6953*x6958)));
evalcond[4]=((((-1.0)*x6956*x6957))+((x6949*x6951))+(((-1.0)*x6950))+(((-1.0)*r02*x6958)));
evalcond[5]=((((-1.0)*sj0))+((x6949*x6953))+(((-1.0)*r12*x6958))+(((-1.0)*x6952*x6957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((8.4050211434602)*px))+(((2.52189136462044)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52189136462044)*px))+(((-8.4050211434602)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((8.4050211434602)*px))+(((2.52189136462044)*py))))+IKsqr(((((2.52189136462044)*px))+(((-8.4050211434602)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((8.4050211434602)*px))+(((2.52189136462044)*py))), ((((2.52189136462044)*px))+(((-8.4050211434602)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6959=IKsin(j0);
IkReal x6960=IKcos(j0);
evalcond[0]=((((0.03275)*x6960))+(((-1.0)*px))+(((0.10915)*x6959)));
evalcond[1]=((((-1.0)*py))+(((0.03275)*x6959))+(((-0.10915)*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6961=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6961;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6962=cj5*cj5;
IkReal x6963=((1.0)*r21);
IkReal x6964=(cj5*sj5);
IkReal x6965=((1.0)*r20);
IkReal x6966=((((-1.0)*r01*x6962*x6963))+((r01*r21))+((r00*r20*x6962))+(((-1.0)*r00*x6963*x6964))+((r02*r22))+(((-1.0)*r01*x6964*x6965)));
j4eval[0]=x6966;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6965))))));
j4eval[2]=IKsign(x6966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6967=cj5*cj5;
IkReal x6968=(r21*sj5);
IkReal x6969=(r11*r21);
IkReal x6970=((1.0)*cj5*r20);
IkReal x6971=((((-1.0)*cj5*r10*x6968))+(((-1.0)*r11*sj5*x6970))+((r12*r22))+(((-1.0)*x6967*x6969))+x6969+((r10*r20*x6967)));
j4eval[0]=x6971;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6968))+(((-1.0)*sj0*x6970))))));
j4eval[2]=IKsign(x6971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6972=cj5*cj5;
IkReal x6973=(r21*sj5);
IkReal x6974=(r11*r21);
IkReal x6975=((1.0)*cj5*r20);
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6972*x6974))+((r10*r20*x6972))+(((-1.0)*cj5*r10*x6973))+(((-1.0)*r11*sj5*x6975))+((r12*r22))+x6974)),-1);
if(!x6976.valid){
continue;
}
CheckValue<IkReal> x6977 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6973))+(((-1.0)*sj0*x6975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6976.value)))+(x6977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6978=IKsin(j4);
IkReal x6979=IKcos(j4);
IkReal x6980=(r11*sj5);
IkReal x6981=(cj5*r00);
IkReal x6982=(cj5*r10);
IkReal x6983=(r21*sj5);
IkReal x6984=(cj5*r20);
IkReal x6985=(r01*sj5);
IkReal x6986=((1.0)*x6979);
IkReal x6987=((1.0)*x6978);
evalcond[0]=((((-1.0)*x6984*x6987))+(((-1.0)*r22*x6986))+((x6978*x6983)));
evalcond[1]=((((-1.0)*r22*x6987))+((x6979*x6984))+(((-1.0)*x6983*x6986)));
evalcond[2]=(sj0+((x6978*x6985))+(((-1.0)*x6981*x6987))+(((-1.0)*r02*x6986)));
evalcond[3]=(cj0+(((-1.0)*x6985*x6986))+((x6979*x6981))+(((-1.0)*r02*x6987)));
evalcond[4]=(sj0+(((-1.0)*r12*x6987))+((x6979*x6982))+(((-1.0)*x6980*x6986)));
evalcond[5]=((((-1.0)*r12*x6986))+((x6978*x6980))+(((-1.0)*x6982*x6987))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6988=cj5*cj5;
IkReal x6989=((1.0)*r21);
IkReal x6990=(cj5*sj5);
IkReal x6991=((1.0)*r20);
CheckValue<IkReal> x6992 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6992.valid){
continue;
}
CheckValue<IkReal> x6993=IKPowWithIntegerCheck(IKsign((((r00*r20*x6988))+((r01*r21))+(((-1.0)*r01*x6988*x6989))+(((-1.0)*r01*x6990*x6991))+(((-1.0)*r00*x6989*x6990))+((r02*r22)))),-1);
if(!x6993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6992.value)+(((1.5707963267949)*(x6993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6994=IKsin(j4);
IkReal x6995=IKcos(j4);
IkReal x6996=(r11*sj5);
IkReal x6997=(cj5*r00);
IkReal x6998=(cj5*r10);
IkReal x6999=(r21*sj5);
IkReal x7000=(cj5*r20);
IkReal x7001=(r01*sj5);
IkReal x7002=((1.0)*x6995);
IkReal x7003=((1.0)*x6994);
evalcond[0]=((((-1.0)*r22*x7002))+((x6994*x6999))+(((-1.0)*x7000*x7003)));
evalcond[1]=((((-1.0)*r22*x7003))+((x6995*x7000))+(((-1.0)*x6999*x7002)));
evalcond[2]=((((-1.0)*r02*x7002))+sj0+((x6994*x7001))+(((-1.0)*x6997*x7003)));
evalcond[3]=((((-1.0)*r02*x7003))+cj0+(((-1.0)*x7001*x7002))+((x6995*x6997)));
evalcond[4]=((((-1.0)*r12*x7003))+sj0+(((-1.0)*x6996*x7002))+((x6995*x6998)));
evalcond[5]=((((-1.0)*r12*x7002))+((x6994*x6996))+(((-1.0)*x6998*x7003))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7004=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7004.valid){
continue;
}
CheckValue<IkReal> x7005 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7004.value)))+(x7005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7006=IKsin(j4);
IkReal x7007=IKcos(j4);
IkReal x7008=(r11*sj5);
IkReal x7009=(cj5*r00);
IkReal x7010=(cj5*r10);
IkReal x7011=(r21*sj5);
IkReal x7012=(cj5*r20);
IkReal x7013=(r01*sj5);
IkReal x7014=((1.0)*x7007);
IkReal x7015=((1.0)*x7006);
evalcond[0]=((((-1.0)*r22*x7014))+(((-1.0)*x7012*x7015))+((x7006*x7011)));
evalcond[1]=((((-1.0)*r22*x7015))+(((-1.0)*x7011*x7014))+((x7007*x7012)));
evalcond[2]=((((-1.0)*x7009*x7015))+sj0+((x7006*x7013))+(((-1.0)*r02*x7014)));
evalcond[3]=(cj0+((x7007*x7009))+(((-1.0)*x7013*x7014))+(((-1.0)*r02*x7015)));
evalcond[4]=(sj0+(((-1.0)*x7008*x7014))+((x7007*x7010))+(((-1.0)*r12*x7015)));
evalcond[5]=((((-1.0)*x7010*x7015))+(((-1.0)*r12*x7014))+((x7006*x7008))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7016=((1.0)*sj5);
IkReal x7017=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7017))+(((-1.0)*r10*x7016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7016))+(((-1.0)*r01*x7017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7017))+(((-1.0)*r10*x7016))))+IKsqr(((((-1.0)*r00*x7016))+(((-1.0)*r01*x7017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7017))+(((-1.0)*r10*x7016))), ((((-1.0)*r00*x7016))+(((-1.0)*r01*x7017))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7018=IKsin(j0);
IkReal x7019=IKcos(j0);
IkReal x7020=((1.0)*cj5);
IkReal x7021=((1.0)*sj5);
IkReal x7022=((0.09465)*cj5);
IkReal x7023=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r00*x7021))+(((-1.0)*r01*x7020))+(((-1.0)*x7019)));
evalcond[1]=((((-1.0)*r11*x7020))+(((-1.0)*r10*x7021))+(((-1.0)*x7018)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r00*x7023))+(((-1.0)*r01*x7022))+(((0.10915)*x7018)));
evalcond[3]=((((-0.10915)*x7019))+(((-1.0)*r11*x7022))+(((-1.0)*r10*x7023))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7024=((1.0)*sj5);
IkReal x7025=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7024)));
j4eval[0]=x7025;
j4eval[1]=IKsign(x7025);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7024))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7026=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7026;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7027=r21*r21;
IkReal x7028=cj5*cj5;
IkReal x7029=(r21*sj5);
IkReal x7030=(cj5*r20);
IkReal x7031=(((x7027*x7028))+(((-1.0)*x7027))+(((-1.0)*x7028*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x7029*x7030)));
j4eval[0]=x7031;
j4eval[1]=((IKabs((x7029+(((-1.0)*x7030)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7032=r21*r21;
IkReal x7033=cj5*cj5;
IkReal x7034=(r21*sj5);
IkReal x7035=(cj5*r20);
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal(r22),IkReal((x7034+(((-1.0)*x7035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
CheckValue<IkReal> x7037=IKPowWithIntegerCheck(IKsign(((((2.0)*x7034*x7035))+(((-1.0)*x7033*(r20*r20)))+(((-1.0)*x7032))+((x7032*x7033))+(((-1.0)*(r22*r22))))),-1);
if(!x7037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7036.value)+(((1.5707963267949)*(x7037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7038=IKsin(j4);
IkReal x7039=IKcos(j4);
IkReal x7040=(r11*sj5);
IkReal x7041=(r21*sj5);
IkReal x7042=(cj5*r00);
IkReal x7043=(cj5*r10);
IkReal x7044=(cj5*r20);
IkReal x7045=(r01*sj5);
IkReal x7046=((1.0)*x7039);
IkReal x7047=((1.0)*x7038);
evalcond[0]=((((-1.0)*r22*x7046))+(((-1.0)*x7044*x7047))+((x7038*x7041)));
evalcond[1]=(((x7039*x7042))+(((-1.0)*r02*x7047))+(((-1.0)*x7045*x7046)));
evalcond[2]=(((x7039*x7043))+(((-1.0)*r12*x7047))+(((-1.0)*x7040*x7046)));
evalcond[3]=(sj0+(((-1.0)*r02*x7046))+(((-1.0)*x7042*x7047))+((x7038*x7045)));
evalcond[4]=((-1.0)+((x7039*x7044))+(((-1.0)*r22*x7047))+(((-1.0)*x7041*x7046)));
evalcond[5]=((((-1.0)*r12*x7046))+(((-1.0)*x7043*x7047))+((x7038*x7040))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7048=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7048.valid){
continue;
}
CheckValue<IkReal> x7049 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7048.value)))+(x7049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7050=IKsin(j4);
IkReal x7051=IKcos(j4);
IkReal x7052=(r11*sj5);
IkReal x7053=(r21*sj5);
IkReal x7054=(cj5*r00);
IkReal x7055=(cj5*r10);
IkReal x7056=(cj5*r20);
IkReal x7057=(r01*sj5);
IkReal x7058=((1.0)*x7051);
IkReal x7059=((1.0)*x7050);
evalcond[0]=((((-1.0)*r22*x7058))+((x7050*x7053))+(((-1.0)*x7056*x7059)));
evalcond[1]=(((x7051*x7054))+(((-1.0)*x7057*x7058))+(((-1.0)*r02*x7059)));
evalcond[2]=(((x7051*x7055))+(((-1.0)*x7052*x7058))+(((-1.0)*r12*x7059)));
evalcond[3]=((((-1.0)*x7054*x7059))+sj0+((x7050*x7057))+(((-1.0)*r02*x7058)));
evalcond[4]=((-1.0)+((x7051*x7056))+(((-1.0)*r22*x7059))+(((-1.0)*x7053*x7058)));
evalcond[5]=(((x7050*x7052))+(((-1.0)*r12*x7058))+(((-1.0)*x7055*x7059))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7060=((1.0)*sj5);
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7060))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7060)))),-1);
if(!x7062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7061.value)+(((1.5707963267949)*(x7062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7063=IKsin(j4);
IkReal x7064=IKcos(j4);
IkReal x7065=(r11*sj5);
IkReal x7066=(r21*sj5);
IkReal x7067=(cj5*r00);
IkReal x7068=(cj5*r10);
IkReal x7069=(cj5*r20);
IkReal x7070=(r01*sj5);
IkReal x7071=((1.0)*x7064);
IkReal x7072=((1.0)*x7063);
evalcond[0]=((((-1.0)*x7069*x7072))+((x7063*x7066))+(((-1.0)*r22*x7071)));
evalcond[1]=(((x7064*x7067))+(((-1.0)*x7070*x7071))+(((-1.0)*r02*x7072)));
evalcond[2]=(((x7064*x7068))+(((-1.0)*x7065*x7071))+(((-1.0)*r12*x7072)));
evalcond[3]=(sj0+(((-1.0)*x7067*x7072))+((x7063*x7070))+(((-1.0)*r02*x7071)));
evalcond[4]=((-1.0)+(((-1.0)*x7066*x7071))+((x7064*x7069))+(((-1.0)*r22*x7072)));
evalcond[5]=(((x7063*x7065))+(((-1.0)*x7068*x7072))+(((-1.0)*r12*x7071))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((-0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((-0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7073=IKsin(j0);
IkReal x7074=IKcos(j0);
evalcond[0]=((((0.10915)*x7073))+(((-1.0)*px))+(((-0.39225)*x7074)));
evalcond[1]=((((-0.10915)*x7074))+(((-1.0)*py))+(((-0.39225)*x7073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7075=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7075;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7076=cj5*cj5;
IkReal x7077=((1.0)*r21);
IkReal x7078=(cj5*sj5);
IkReal x7079=((1.0)*r20);
IkReal x7080=((((-1.0)*r01*x7078*x7079))+(((-1.0)*r01*x7076*x7077))+((r01*r21))+(((-1.0)*r00*x7077*x7078))+((r02*r22))+((r00*r20*x7076)));
j4eval[0]=x7080;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7079))))));
j4eval[2]=IKsign(x7080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7081=cj5*cj5;
IkReal x7082=(r21*sj5);
IkReal x7083=(r11*r21);
IkReal x7084=((1.0)*cj5*r20);
IkReal x7085=(x7083+(((-1.0)*cj5*r10*x7082))+((r12*r22))+((r10*r20*x7081))+(((-1.0)*x7081*x7083))+(((-1.0)*r11*sj5*x7084)));
j4eval[0]=x7085;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7082))+(((-1.0)*sj0*x7084))))));
j4eval[2]=IKsign(x7085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7086=cj5*cj5;
IkReal x7087=(r21*sj5);
IkReal x7088=(r11*r21);
IkReal x7089=((1.0)*cj5*r20);
CheckValue<IkReal> x7090=IKPowWithIntegerCheck(IKsign((x7088+(((-1.0)*cj5*r10*x7087))+((r12*r22))+((r10*r20*x7086))+(((-1.0)*r11*sj5*x7089))+(((-1.0)*x7086*x7088)))),-1);
if(!x7090.valid){
continue;
}
CheckValue<IkReal> x7091 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7087))+(((-1.0)*sj0*x7089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7090.value)))+(x7091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7092=IKsin(j4);
IkReal x7093=IKcos(j4);
IkReal x7094=(r11*sj5);
IkReal x7095=(cj5*r00);
IkReal x7096=(cj5*r10);
IkReal x7097=(r21*sj5);
IkReal x7098=(cj5*r20);
IkReal x7099=(r01*sj5);
IkReal x7100=((1.0)*x7093);
IkReal x7101=((1.0)*x7092);
evalcond[0]=(((x7092*x7097))+(((-1.0)*r22*x7100))+(((-1.0)*x7098*x7101)));
evalcond[1]=(((x7093*x7098))+(((-1.0)*r22*x7101))+(((-1.0)*x7097*x7100)));
evalcond[2]=(sj0+((x7092*x7099))+(((-1.0)*r02*x7100))+(((-1.0)*x7095*x7101)));
evalcond[3]=(cj0+((x7093*x7095))+(((-1.0)*r02*x7101))+(((-1.0)*x7099*x7100)));
evalcond[4]=(sj0+(((-1.0)*r12*x7101))+(((-1.0)*x7094*x7100))+((x7093*x7096)));
evalcond[5]=(((x7092*x7094))+(((-1.0)*r12*x7100))+(((-1.0)*cj0))+(((-1.0)*x7096*x7101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7102=cj5*cj5;
IkReal x7103=((1.0)*r21);
IkReal x7104=(cj5*sj5);
IkReal x7105=((1.0)*r20);
CheckValue<IkReal> x7106 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7106.valid){
continue;
}
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7103*x7104))+((r01*r21))+((r00*r20*x7102))+((r02*r22))+(((-1.0)*r01*x7104*x7105))+(((-1.0)*r01*x7102*x7103)))),-1);
if(!x7107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7106.value)+(((1.5707963267949)*(x7107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7108=IKsin(j4);
IkReal x7109=IKcos(j4);
IkReal x7110=(r11*sj5);
IkReal x7111=(cj5*r00);
IkReal x7112=(cj5*r10);
IkReal x7113=(r21*sj5);
IkReal x7114=(cj5*r20);
IkReal x7115=(r01*sj5);
IkReal x7116=((1.0)*x7109);
IkReal x7117=((1.0)*x7108);
evalcond[0]=((((-1.0)*r22*x7116))+((x7108*x7113))+(((-1.0)*x7114*x7117)));
evalcond[1]=(((x7109*x7114))+(((-1.0)*r22*x7117))+(((-1.0)*x7113*x7116)));
evalcond[2]=(sj0+(((-1.0)*x7111*x7117))+(((-1.0)*r02*x7116))+((x7108*x7115)));
evalcond[3]=((((-1.0)*x7115*x7116))+cj0+((x7109*x7111))+(((-1.0)*r02*x7117)));
evalcond[4]=(sj0+(((-1.0)*x7110*x7116))+(((-1.0)*r12*x7117))+((x7109*x7112)));
evalcond[5]=((((-1.0)*r12*x7116))+(((-1.0)*x7112*x7117))+((x7108*x7110))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7118=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7118.valid){
continue;
}
CheckValue<IkReal> x7119 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7118.value)))+(x7119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7120=IKsin(j4);
IkReal x7121=IKcos(j4);
IkReal x7122=(r11*sj5);
IkReal x7123=(cj5*r00);
IkReal x7124=(cj5*r10);
IkReal x7125=(r21*sj5);
IkReal x7126=(cj5*r20);
IkReal x7127=(r01*sj5);
IkReal x7128=((1.0)*x7121);
IkReal x7129=((1.0)*x7120);
evalcond[0]=(((x7120*x7125))+(((-1.0)*r22*x7128))+(((-1.0)*x7126*x7129)));
evalcond[1]=(((x7121*x7126))+(((-1.0)*r22*x7129))+(((-1.0)*x7125*x7128)));
evalcond[2]=((((-1.0)*x7123*x7129))+sj0+((x7120*x7127))+(((-1.0)*r02*x7128)));
evalcond[3]=(cj0+((x7121*x7123))+(((-1.0)*x7127*x7128))+(((-1.0)*r02*x7129)));
evalcond[4]=(sj0+((x7121*x7124))+(((-1.0)*x7122*x7128))+(((-1.0)*r12*x7129)));
evalcond[5]=(((x7120*x7122))+(((-1.0)*r12*x7128))+(((-1.0)*x7124*x7129))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7130=IKsin(j0);
IkReal x7131=IKcos(j0);
IkReal x7132=((1.0)*cj5);
IkReal x7133=((1.0)*sj5);
IkReal x7134=((0.09465)*cj5);
IkReal x7135=((0.09465)*sj5);
evalcond[0]=(x7131+(((-1.0)*r01*x7132))+(((-1.0)*r00*x7133)));
evalcond[1]=(x7130+(((-1.0)*r10*x7133))+(((-1.0)*r11*x7132)));
evalcond[2]=((((-1.0)*r01*x7134))+(((-1.0)*r00*x7135))+(((0.10915)*x7130))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7135))+(((-1.0)*r11*x7134))+(((-1.0)*py))+(((-0.10915)*x7131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7136=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7136;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7137=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7137;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7138=cj5*cj5;
IkReal x7139=r21*r21;
IkReal x7140=(r21*sj5);
IkReal x7141=(cj5*r20);
IkReal x7142=(x7139+(r22*r22)+(((-2.0)*x7140*x7141))+((x7138*(r20*r20)))+(((-1.0)*x7138*x7139)));
j4eval[0]=x7142;
j4eval[1]=IKsign(x7142);
j4eval[2]=((IKabs(r22))+(IKabs((x7140+(((-1.0)*x7141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7143=cj5*cj5;
IkReal x7144=r21*r21;
IkReal x7145=(r21*sj5);
IkReal x7146=(cj5*r20);
CheckValue<IkReal> x7147=IKPowWithIntegerCheck(IKsign((x7144+(((-1.0)*x7143*x7144))+(r22*r22)+(((-2.0)*x7145*x7146))+((x7143*(r20*r20))))),-1);
if(!x7147.valid){
continue;
}
CheckValue<IkReal> x7148 = IKatan2WithCheck(IkReal(r22),IkReal((x7145+(((-1.0)*x7146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7147.value)))+(x7148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7149=IKsin(j4);
IkReal x7150=IKcos(j4);
IkReal x7151=(r11*sj5);
IkReal x7152=(r21*sj5);
IkReal x7153=(cj5*r00);
IkReal x7154=(cj5*r10);
IkReal x7155=(cj5*r20);
IkReal x7156=(r01*sj5);
IkReal x7157=((1.0)*x7150);
IkReal x7158=((1.0)*x7149);
evalcond[0]=(((x7149*x7152))+(((-1.0)*x7155*x7158))+(((-1.0)*r22*x7157)));
evalcond[1]=((((-1.0)*x7156*x7157))+((x7150*x7153))+(((-1.0)*r02*x7158)));
evalcond[2]=((((-1.0)*r12*x7158))+(((-1.0)*x7151*x7157))+((x7150*x7154)));
evalcond[3]=(((x7149*x7156))+sj0+(((-1.0)*x7153*x7158))+(((-1.0)*r02*x7157)));
evalcond[4]=((1.0)+(((-1.0)*x7152*x7157))+(((-1.0)*r22*x7158))+((x7150*x7155)));
evalcond[5]=(((x7149*x7151))+(((-1.0)*r12*x7157))+(((-1.0)*x7154*x7158))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7159=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7159.valid){
continue;
}
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7159.value)))+(x7160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7161=IKsin(j4);
IkReal x7162=IKcos(j4);
IkReal x7163=(r11*sj5);
IkReal x7164=(r21*sj5);
IkReal x7165=(cj5*r00);
IkReal x7166=(cj5*r10);
IkReal x7167=(cj5*r20);
IkReal x7168=(r01*sj5);
IkReal x7169=((1.0)*x7162);
IkReal x7170=((1.0)*x7161);
evalcond[0]=((((-1.0)*r22*x7169))+(((-1.0)*x7167*x7170))+((x7161*x7164)));
evalcond[1]=(((x7162*x7165))+(((-1.0)*r02*x7170))+(((-1.0)*x7168*x7169)));
evalcond[2]=(((x7162*x7166))+(((-1.0)*x7163*x7169))+(((-1.0)*r12*x7170)));
evalcond[3]=((((-1.0)*r02*x7169))+sj0+((x7161*x7168))+(((-1.0)*x7165*x7170)));
evalcond[4]=((1.0)+((x7162*x7167))+(((-1.0)*x7164*x7169))+(((-1.0)*r22*x7170)));
evalcond[5]=(((x7161*x7163))+(((-1.0)*r12*x7169))+(((-1.0)*cj0))+(((-1.0)*x7166*x7170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7171.value)+(((1.5707963267949)*(x7172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7173=IKsin(j4);
IkReal x7174=IKcos(j4);
IkReal x7175=(r11*sj5);
IkReal x7176=(r21*sj5);
IkReal x7177=(cj5*r00);
IkReal x7178=(cj5*r10);
IkReal x7179=(cj5*r20);
IkReal x7180=(r01*sj5);
IkReal x7181=((1.0)*x7174);
IkReal x7182=((1.0)*x7173);
evalcond[0]=((((-1.0)*x7179*x7182))+((x7173*x7176))+(((-1.0)*r22*x7181)));
evalcond[1]=((((-1.0)*r02*x7182))+(((-1.0)*x7180*x7181))+((x7174*x7177)));
evalcond[2]=((((-1.0)*x7175*x7181))+(((-1.0)*r12*x7182))+((x7174*x7178)));
evalcond[3]=(sj0+(((-1.0)*x7177*x7182))+(((-1.0)*r02*x7181))+((x7173*x7180)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7182))+((x7174*x7179))+(((-1.0)*x7176*x7181)));
evalcond[5]=((((-1.0)*x7178*x7182))+((x7173*x7175))+(((-1.0)*r12*x7181))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.658427386453172)*px))+(((2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.36617629259053)*px))+(((-0.658427386453172)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.658427386453172)*px))+(((2.36617629259053)*py))))+IKsqr(((((2.36617629259053)*px))+(((-0.658427386453172)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.658427386453172)*px))+(((2.36617629259053)*py))), ((((2.36617629259053)*px))+(((-0.658427386453172)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7183=IKsin(j0);
IkReal x7184=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.39225)*x7184))+(((0.10915)*x7183)));
evalcond[1]=((((-1.0)*py))+(((0.39225)*x7183))+(((-0.10915)*x7184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7185=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7185;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7186=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7186;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7187=cj5*cj5;
IkReal x7188=((1.0)*r21);
IkReal x7189=(cj5*r20);
IkReal x7190=((((-1.0)*cj5*r00*sj5*x7188))+((r01*r21))+(((-1.0)*r01*sj5*x7189))+(((-1.0)*r01*x7187*x7188))+((r02*r22))+((r00*r20*x7187)));
j4eval[0]=x7190;
j4eval[1]=IKsign(x7190);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x7188))+((sj0*x7189))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7191=cj5*cj5;
IkReal x7192=((1.0)*r21);
IkReal x7193=(cj5*r20);
CheckValue<IkReal> x7194 = IKatan2WithCheck(IkReal((((sj0*x7193))+(((-1.0)*sj0*sj5*x7192)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7194.valid){
continue;
}
CheckValue<IkReal> x7195=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x7192))+(((-1.0)*r01*sj5*x7193))+((r01*r21))+(((-1.0)*r01*x7191*x7192))+((r00*r20*x7191))+((r02*r22)))),-1);
if(!x7195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7194.value)+(((1.5707963267949)*(x7195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7196=IKsin(j4);
IkReal x7197=IKcos(j4);
IkReal x7198=((1.0)*cj0);
IkReal x7199=(cj5*r00);
IkReal x7200=(r11*sj5);
IkReal x7201=(cj5*r10);
IkReal x7202=(r21*sj5);
IkReal x7203=(cj5*r20);
IkReal x7204=(r01*sj5);
IkReal x7205=((1.0)*x7197);
IkReal x7206=((1.0)*x7196);
evalcond[0]=((((-1.0)*x7203*x7206))+((x7196*x7202))+(((-1.0)*r22*x7205)));
evalcond[1]=((((-1.0)*x7202*x7205))+((x7197*x7203))+(((-1.0)*r22*x7206)));
evalcond[2]=(sj0+(((-1.0)*x7199*x7206))+((x7196*x7204))+(((-1.0)*r02*x7205)));
evalcond[3]=((((-1.0)*x7198))+((x7196*x7200))+(((-1.0)*x7201*x7206))+(((-1.0)*r12*x7205)));
evalcond[4]=((((-1.0)*x7198))+(((-1.0)*x7204*x7205))+((x7197*x7199))+(((-1.0)*r02*x7206)));
evalcond[5]=((((-1.0)*sj0))+((x7197*x7201))+(((-1.0)*r12*x7206))+(((-1.0)*x7200*x7205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7207.value)))+(x7208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=((1.0)*cj0);
IkReal x7212=(cj5*r00);
IkReal x7213=(r11*sj5);
IkReal x7214=(cj5*r10);
IkReal x7215=(r21*sj5);
IkReal x7216=(cj5*r20);
IkReal x7217=(r01*sj5);
IkReal x7218=((1.0)*x7210);
IkReal x7219=((1.0)*x7209);
evalcond[0]=(((x7209*x7215))+(((-1.0)*x7216*x7219))+(((-1.0)*r22*x7218)));
evalcond[1]=((((-1.0)*x7215*x7218))+((x7210*x7216))+(((-1.0)*r22*x7219)));
evalcond[2]=(sj0+(((-1.0)*x7212*x7219))+((x7209*x7217))+(((-1.0)*r02*x7218)));
evalcond[3]=(((x7209*x7213))+(((-1.0)*x7211))+(((-1.0)*r12*x7218))+(((-1.0)*x7214*x7219)));
evalcond[4]=((((-1.0)*x7217*x7218))+((x7210*x7212))+(((-1.0)*x7211))+(((-1.0)*r02*x7219)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7213*x7218))+((x7210*x7214))+(((-1.0)*r12*x7219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7220=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7220.valid){
continue;
}
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7220.value)))+(x7221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7222=IKsin(j4);
IkReal x7223=IKcos(j4);
IkReal x7224=((1.0)*cj0);
IkReal x7225=(cj5*r00);
IkReal x7226=(r11*sj5);
IkReal x7227=(cj5*r10);
IkReal x7228=(r21*sj5);
IkReal x7229=(cj5*r20);
IkReal x7230=(r01*sj5);
IkReal x7231=((1.0)*x7223);
IkReal x7232=((1.0)*x7222);
evalcond[0]=((((-1.0)*x7229*x7232))+((x7222*x7228))+(((-1.0)*r22*x7231)));
evalcond[1]=((((-1.0)*x7228*x7231))+((x7223*x7229))+(((-1.0)*r22*x7232)));
evalcond[2]=(sj0+(((-1.0)*x7225*x7232))+((x7222*x7230))+(((-1.0)*r02*x7231)));
evalcond[3]=(((x7222*x7226))+(((-1.0)*x7227*x7232))+(((-1.0)*x7224))+(((-1.0)*r12*x7231)));
evalcond[4]=(((x7223*x7225))+(((-1.0)*x7230*x7231))+(((-1.0)*x7224))+(((-1.0)*r02*x7232)));
evalcond[5]=((((-1.0)*sj0))+((x7223*x7227))+(((-1.0)*x7226*x7231))+(((-1.0)*r12*x7232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7233=cj1*cj1;
IkReal x7234=(cj1*sj1);
IkReal x7235=(r00*sj5);
IkReal x7236=(cj1*sj2);
IkReal x7237=(r10*sj5);
IkReal x7238=(cj5*r11);
IkReal x7239=(cj5*r01);
IkReal x7240=((20000.0)*py);
IkReal x7241=(cj2*sj1);
IkReal x7242=((1893.0)*x7241);
IkReal x7243=(sj2*x7233);
CheckValue<IkReal> x7244=IKPowWithIntegerCheck(((((-15690.0)*cj2*x7243))+(((7845.0)*x7234))+(((-8500.0)*cj2*x7234))+(((-8500.0)*x7243))+(((-15690.0)*x7234*(cj2*cj2)))+(((7845.0)*cj2*sj2))),-1);
if(!x7244.valid){
continue;
}
CheckValue<IkReal> x7245=IKPowWithIntegerCheck((x7241+x7236),-1);
if(!x7245.valid){
continue;
}
if( IKabs(((x7244.value)*(((((2183.0)*x7239))+(((2183.0)*x7235))+((x7240*x7241))+((x7238*x7242))+((x7236*x7240))+(((1893.0)*x7236*x7237))+(((1893.0)*x7236*x7238))+((x7237*x7242)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7245.value)*((x7235+x7239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7244.value)*(((((2183.0)*x7239))+(((2183.0)*x7235))+((x7240*x7241))+((x7238*x7242))+((x7236*x7240))+(((1893.0)*x7236*x7237))+(((1893.0)*x7236*x7238))+((x7237*x7242))))))+IKsqr(((x7245.value)*((x7235+x7239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7244.value)*(((((2183.0)*x7239))+(((2183.0)*x7235))+((x7240*x7241))+((x7238*x7242))+((x7236*x7240))+(((1893.0)*x7236*x7237))+(((1893.0)*x7236*x7238))+((x7237*x7242))))), ((x7245.value)*((x7235+x7239))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7246=IKcos(j0);
IkReal x7247=IKsin(j0);
IkReal x7248=(cj5*r11);
IkReal x7249=(cj5*r01);
IkReal x7250=(cj2*sj1);
IkReal x7251=((1.0)*sj5);
IkReal x7252=((0.09465)*sj5);
IkReal x7253=((0.39225)*cj2);
IkReal x7254=((0.39225)*sj1*sj2);
IkReal x7255=(cj1*x7246);
IkReal x7256=(cj1*x7247);
evalcond[0]=((((-1.0)*x7249))+(((-1.0)*r00*x7251))+((sj2*x7255))+((x7246*x7250)));
evalcond[1]=((((-1.0)*x7248))+(((-1.0)*r10*x7251))+((sj2*x7256))+((x7247*x7250)));
evalcond[2]=((((0.10915)*x7247))+(((-0.09465)*x7249))+(((-1.0)*r00*x7252))+(((-0.425)*x7255))+(((-1.0)*px))+(((-1.0)*x7253*x7255))+((x7246*x7254)));
evalcond[3]=((((-1.0)*r10*x7252))+(((-0.09465)*x7248))+(((-0.425)*x7256))+(((-1.0)*py))+((x7247*x7254))+(((-1.0)*x7253*x7256))+(((-0.10915)*x7246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7257=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7257;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7258=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7258;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7259=((1.0)*cj5);
IkReal x7260=((((-1.0)*r21*x7259))+(((-1.0)*r20*sj5)));
j4eval[0]=x7260;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x7259))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7259))))));
j4eval[2]=IKsign(x7260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7261=((-1.0)*r20);
IkReal x7263 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7263)==0){
continue;
}
IkReal x7262=pow(x7263,-0.5);
CheckValue<IkReal> x7264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7261),IKFAST_ATAN2_MAGTHRESH);
if(!x7264.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7264.value));
IkReal gconst133=(r21*x7262);
IkReal gconst134=(x7261*x7262);
CheckValue<IkReal> x7265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7266=((-1.0)*r20);
IkReal x7267=x7262;
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7266),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
IkReal x7268=((-1.0)*(x7269.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7268;
IkReal gconst132=x7268;
IkReal gconst133=(r21*x7267);
IkReal gconst134=(x7266*x7267);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7270=((-1.0)*r20);
IkReal x7271=x7262;
CheckValue<IkReal> x7273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7270),IKFAST_ATAN2_MAGTHRESH);
if(!x7273.valid){
continue;
}
IkReal x7272=((-1.0)*(x7273.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7272;
IkReal gconst132=x7272;
IkReal gconst133=(r21*x7271);
IkReal gconst134=(x7270*x7271);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7274=((-1.0)*r20);
IkReal x7275=x7262;
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7274),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
IkReal x7276=((-1.0)*(x7277.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7276;
IkReal gconst132=x7276;
IkReal gconst133=(r21*x7275);
IkReal gconst134=(x7274*x7275);
IkReal x7278=r22*r22;
CheckValue<IkReal> x7281=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7278))),-1);
if(!x7281.valid){
continue;
}
IkReal x7279=x7281.value;
IkReal x7280=(x7278+((x7279*(r20*r20*r20*r20)))+((x7279*(r21*r21*r21*r21)))+(((2.0)*x7279*(r20*r20)*(r21*r21))));
j4eval[0]=x7280;
j4eval[1]=IKsign(x7280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7282=(gconst133*r21);
IkReal x7283=(cj1*sj2);
IkReal x7284=(gconst134*r20);
IkReal x7285=(cj2*sj1);
CheckValue<IkReal> x7286 = IKatan2WithCheck(IkReal((((r22*x7283))+((r22*x7285)))),IkReal((((x7282*x7283))+((x7282*x7285))+(((-1.0)*x7284*x7285))+(((-1.0)*x7283*x7284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287=IKPowWithIntegerCheck(IKsign(((x7284*x7284)+(x7282*x7282)+(r22*r22)+(((-2.0)*x7282*x7284)))),-1);
if(!x7287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7286.value)+(((1.5707963267949)*(x7287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7288=IKsin(j4);
IkReal x7289=IKcos(j4);
IkReal x7290=(cj1*cj2);
IkReal x7291=(gconst133*r11);
IkReal x7292=(gconst133*r21);
IkReal x7293=(gconst133*r01);
IkReal x7294=((1.0)*cj0);
IkReal x7295=(sj1*sj2);
IkReal x7296=((1.0)*x7289);
IkReal x7297=(gconst134*x7289);
IkReal x7298=((1.0)*x7288);
evalcond[0]=((((-1.0)*r22*x7296))+(((-1.0)*gconst134*r20*x7298))+((x7288*x7292)));
evalcond[1]=(sj0+(((-1.0)*gconst134*r00*x7298))+(((-1.0)*r02*x7296))+((x7288*x7293)));
evalcond[2]=((((-1.0)*x7294))+(((-1.0)*r12*x7296))+((x7288*x7291))+(((-1.0)*gconst134*r10*x7298)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7298))+((cj1*sj2))+(((-1.0)*x7292*x7296))+((r20*x7297)));
evalcond[4]=(((cj0*x7290))+(((-1.0)*x7294*x7295))+(((-1.0)*r02*x7298))+(((-1.0)*x7293*x7296))+((r00*x7297)));
evalcond[5]=((((-1.0)*sj0*x7295))+(((-1.0)*x7291*x7296))+((sj0*x7290))+((r10*x7297))+(((-1.0)*r12*x7298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(cj1*cj2);
IkReal x7304=(gconst133*r11);
IkReal x7305=(gconst133*r21);
IkReal x7306=(gconst133*r01);
IkReal x7307=((1.0)*cj0);
IkReal x7308=(sj1*sj2);
IkReal x7309=((1.0)*x7302);
IkReal x7310=(gconst134*x7302);
IkReal x7311=((1.0)*x7301);
evalcond[0]=(((x7301*x7305))+(((-1.0)*gconst134*r20*x7311))+(((-1.0)*r22*x7309)));
evalcond[1]=((((-1.0)*r02*x7309))+sj0+((x7301*x7306))+(((-1.0)*gconst134*r00*x7311)));
evalcond[2]=(((x7301*x7304))+(((-1.0)*r12*x7309))+(((-1.0)*gconst134*r10*x7311))+(((-1.0)*x7307)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7310))+(((-1.0)*r22*x7311))+(((-1.0)*x7305*x7309)));
evalcond[4]=((((-1.0)*x7307*x7308))+((r00*x7310))+((cj0*x7303))+(((-1.0)*x7306*x7309))+(((-1.0)*r02*x7311)));
evalcond[5]=(((r10*x7310))+((sj0*x7303))+(((-1.0)*r12*x7311))+(((-1.0)*sj0*x7308))+(((-1.0)*x7304*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7312.value)+(((1.5707963267949)*(x7313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7314=IKsin(j4);
IkReal x7315=IKcos(j4);
IkReal x7316=(cj1*cj2);
IkReal x7317=(gconst133*r11);
IkReal x7318=(gconst133*r21);
IkReal x7319=(gconst133*r01);
IkReal x7320=((1.0)*cj0);
IkReal x7321=(sj1*sj2);
IkReal x7322=((1.0)*x7315);
IkReal x7323=(gconst134*x7315);
IkReal x7324=((1.0)*x7314);
evalcond[0]=((((-1.0)*r22*x7322))+(((-1.0)*gconst134*r20*x7324))+((x7314*x7318)));
evalcond[1]=(sj0+(((-1.0)*gconst134*r00*x7324))+((x7314*x7319))+(((-1.0)*r02*x7322)));
evalcond[2]=((((-1.0)*gconst134*r10*x7324))+((x7314*x7317))+(((-1.0)*x7320))+(((-1.0)*r12*x7322)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7324))+((cj1*sj2))+(((-1.0)*x7318*x7322))+((r20*x7323)));
evalcond[4]=(((r00*x7323))+(((-1.0)*x7319*x7322))+((cj0*x7316))+(((-1.0)*r02*x7324))+(((-1.0)*x7320*x7321)));
evalcond[5]=((((-1.0)*sj0*x7321))+(((-1.0)*x7317*x7322))+((r10*x7323))+((sj0*x7316))+(((-1.0)*r12*x7324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7325=((-1.0)*r21);
IkReal x7327 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7327)==0){
continue;
}
IkReal x7326=pow(x7327,-0.5);
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal(x7325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7328.value))));
IkReal gconst136=(x7325*x7326);
IkReal gconst137=((1.0)*r20*x7326);
CheckValue<IkReal> x7329 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7329.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7329.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7330=((-1.0)*r21);
CheckValue<IkReal> x7333 = IKatan2WithCheck(IkReal(x7330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7333.valid){
continue;
}
IkReal x7331=((1.0)*(x7333.value));
IkReal x7332=x7326;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7331)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7331)));
IkReal gconst136=(x7330*x7332);
IkReal gconst137=((1.0)*r20*x7332);
IkReal x7334=r22*r22;
IkReal x7335=((1.0)*x7334);
CheckValue<IkReal> x7339=IKPowWithIntegerCheck(((-1.0)+x7334),-1);
if(!x7339.valid){
continue;
}
IkReal x7336=x7339.value;
if((((1.0)+(((-1.0)*x7335)))) < -0.00001)
continue;
IkReal x7337=IKsqrt(((1.0)+(((-1.0)*x7335))));
IkReal x7338=(sj0*x7336*x7337);
j4eval[0]=((IKabs((x7338+(((-1.0)*x7335*x7338)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7340=((-1.0)*r21);
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal(x7340),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
IkReal x7341=((1.0)*(x7343.value));
IkReal x7342=x7326;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7341)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7341)));
IkReal gconst136=(x7340*x7342);
IkReal gconst137=((1.0)*r20*x7342);
IkReal x7344=r22*r22;
IkReal x7345=((1.0)*x7344);
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(((-1.0)+x7344),-1);
if(!x7349.valid){
continue;
}
IkReal x7346=x7349.value;
if((((1.0)+(((-1.0)*x7345)))) < -0.00001)
continue;
IkReal x7347=IKsqrt(((1.0)+(((-1.0)*x7345))));
IkReal x7348=(cj0*x7346*x7347);
j4eval[0]=((IKabs((x7348+(((-1.0)*x7345*x7348)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7350=((-1.0)*r21);
CheckValue<IkReal> x7353 = IKatan2WithCheck(IkReal(x7350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7353.valid){
continue;
}
IkReal x7351=((1.0)*(x7353.value));
IkReal x7352=x7326;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7351)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7351)));
IkReal gconst136=(x7350*x7352);
IkReal gconst137=((1.0)*r20*x7352);
IkReal x7354=r22*r22;
IkReal x7355=(cj0*r02);
IkReal x7356=(r12*sj0);
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(((-1.0)+x7354),-1);
if(!x7360.valid){
continue;
}
IkReal x7357=x7360.value;
if((((1.0)+(((-1.0)*x7354)))) < -0.00001)
continue;
IkReal x7358=IKsqrt(((1.0)+(((-1.0)*x7354))));
IkReal x7359=((1.0)*r22*x7357*x7358);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7356*x7359))+(((-1.0)*x7355*x7359)))))+(IKabs((x7355+x7356))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7361=((1.0)*gconst137);
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7361))+(((-1.0)*gconst136*r20)))),-1);
if(!x7362.valid){
continue;
}
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst136*r11*sj0))+(((-1.0)*cj0*r00*x7361))+(((-1.0)*r10*sj0*x7361))+((cj0*gconst136*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7362.value)))+(x7363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7364=IKsin(j4);
IkReal x7365=IKcos(j4);
IkReal x7366=(gconst136*r01);
IkReal x7367=(gconst137*r10);
IkReal x7368=(cj1*cj2);
IkReal x7369=(gconst137*r20);
IkReal x7370=(gconst136*r11);
IkReal x7371=(gconst136*r21);
IkReal x7372=(gconst137*r00);
IkReal x7373=((1.0)*cj0);
IkReal x7374=(sj1*sj2);
IkReal x7375=((1.0)*x7365);
IkReal x7376=((1.0)*x7364);
evalcond[0]=(((x7364*x7371))+(((-1.0)*r22*x7375))+(((-1.0)*x7369*x7376)));
evalcond[1]=(sj0+((x7364*x7366))+(((-1.0)*r02*x7375))+(((-1.0)*x7372*x7376)));
evalcond[2]=(((x7364*x7370))+(((-1.0)*r12*x7375))+(((-1.0)*x7373))+(((-1.0)*x7367*x7376)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7376))+((cj1*sj2))+((x7365*x7369))+(((-1.0)*x7371*x7375)));
evalcond[4]=(((x7365*x7372))+((cj0*x7368))+(((-1.0)*r02*x7376))+(((-1.0)*x7373*x7374))+(((-1.0)*x7366*x7375)));
evalcond[5]=(((sj0*x7368))+(((-1.0)*r12*x7376))+(((-1.0)*x7370*x7375))+((x7365*x7367))+(((-1.0)*sj0*x7374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
CheckValue<IkReal> x7378=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7377.value)+(((1.5707963267949)*(x7378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7379=IKsin(j4);
IkReal x7380=IKcos(j4);
IkReal x7381=(gconst136*r01);
IkReal x7382=(gconst137*r10);
IkReal x7383=(cj1*cj2);
IkReal x7384=(gconst137*r20);
IkReal x7385=(gconst136*r11);
IkReal x7386=(gconst136*r21);
IkReal x7387=(gconst137*r00);
IkReal x7388=((1.0)*cj0);
IkReal x7389=(sj1*sj2);
IkReal x7390=((1.0)*x7380);
IkReal x7391=((1.0)*x7379);
evalcond[0]=((((-1.0)*r22*x7390))+((x7379*x7386))+(((-1.0)*x7384*x7391)));
evalcond[1]=(sj0+(((-1.0)*r02*x7390))+((x7379*x7381))+(((-1.0)*x7387*x7391)));
evalcond[2]=((((-1.0)*r12*x7390))+((x7379*x7385))+(((-1.0)*x7382*x7391))+(((-1.0)*x7388)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7391))+((cj1*sj2))+((x7380*x7384))+(((-1.0)*x7386*x7390)));
evalcond[4]=((((-1.0)*r02*x7391))+((x7380*x7387))+(((-1.0)*x7381*x7390))+(((-1.0)*x7388*x7389))+((cj0*x7383)));
evalcond[5]=((((-1.0)*r12*x7391))+((sj0*x7383))+(((-1.0)*sj0*x7389))+((x7380*x7382))+(((-1.0)*x7385*x7390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7392.valid){
continue;
}
CheckValue<IkReal> x7393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7392.value)))+(x7393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7394=IKsin(j4);
IkReal x7395=IKcos(j4);
IkReal x7396=(gconst136*r01);
IkReal x7397=(gconst137*r10);
IkReal x7398=(cj1*cj2);
IkReal x7399=(gconst137*r20);
IkReal x7400=(gconst136*r11);
IkReal x7401=(gconst136*r21);
IkReal x7402=(gconst137*r00);
IkReal x7403=((1.0)*cj0);
IkReal x7404=(sj1*sj2);
IkReal x7405=((1.0)*x7395);
IkReal x7406=((1.0)*x7394);
evalcond[0]=((((-1.0)*x7399*x7406))+((x7394*x7401))+(((-1.0)*r22*x7405)));
evalcond[1]=(sj0+(((-1.0)*x7402*x7406))+(((-1.0)*r02*x7405))+((x7394*x7396)));
evalcond[2]=((((-1.0)*r12*x7405))+(((-1.0)*x7397*x7406))+(((-1.0)*x7403))+((x7394*x7400)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7395*x7399))+(((-1.0)*r22*x7406))+(((-1.0)*x7401*x7405)));
evalcond[4]=((((-1.0)*x7403*x7404))+(((-1.0)*x7396*x7405))+(((-1.0)*r02*x7406))+((x7395*x7402))+((cj0*x7398)));
evalcond[5]=((((-1.0)*r12*x7406))+(((-1.0)*sj0*x7404))+((x7395*x7397))+(((-1.0)*x7400*x7405))+((sj0*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7408 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7408)==0){
continue;
}
IkReal x7407=pow(x7408,-0.5);
CheckValue<IkReal> x7409 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7409.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7409.value));
IkReal gconst139=((-1.0)*r01*x7407);
IkReal gconst140=(r00*x7407);
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7413 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7413.valid){
continue;
}
IkReal x7411=((-1.0)*(x7413.value));
IkReal x7412=x7407;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7411;
IkReal gconst138=x7411;
IkReal gconst139=((-1.0)*r01*x7412);
IkReal gconst140=(r00*x7412);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7414=((1.0)*gconst140);
CheckValue<IkReal> x7415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7414))+(((-1.0)*gconst139*r20)))),-1);
if(!x7415.valid){
continue;
}
CheckValue<IkReal> x7416 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7414))+(((-1.0)*cj0*r00*x7414))+((gconst139*r11*sj0))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7415.value)))+(x7416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7417=IKsin(j4);
IkReal x7418=IKcos(j4);
IkReal x7419=(gconst140*r00);
IkReal x7420=(cj1*cj2);
IkReal x7421=(gconst139*r11);
IkReal x7422=(gconst139*r01);
IkReal x7423=((1.0)*cj0);
IkReal x7424=(gconst139*r21);
IkReal x7425=(sj1*sj2);
IkReal x7426=((1.0)*x7418);
IkReal x7427=((1.0)*x7417);
IkReal x7428=(gconst140*x7418);
evalcond[0]=((((-1.0)*r22*x7426))+(((-1.0)*gconst140*r20*x7427))+((x7417*x7424)));
evalcond[1]=(sj0+(((-1.0)*r02*x7426))+(((-1.0)*x7419*x7427))+((x7417*x7422)));
evalcond[2]=((((-1.0)*gconst140*r10*x7427))+(((-1.0)*r12*x7426))+(((-1.0)*x7423))+((x7417*x7421)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7427))+((cj1*sj2))+((r20*x7428))+(((-1.0)*x7424*x7426)));
evalcond[4]=((((-1.0)*x7422*x7426))+((cj0*x7420))+(((-1.0)*r02*x7427))+((x7418*x7419))+(((-1.0)*x7423*x7425)));
evalcond[5]=((((-1.0)*sj0*x7425))+(((-1.0)*x7421*x7426))+(((-1.0)*r12*x7427))+((r10*x7428))+((sj0*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7429 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7429.valid){
continue;
}
CheckValue<IkReal> x7430=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x7430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7429.value)+(((1.5707963267949)*(x7430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7431=IKsin(j4);
IkReal x7432=IKcos(j4);
IkReal x7433=(gconst140*r00);
IkReal x7434=(cj1*cj2);
IkReal x7435=(gconst139*r11);
IkReal x7436=(gconst139*r01);
IkReal x7437=((1.0)*cj0);
IkReal x7438=(gconst139*r21);
IkReal x7439=(sj1*sj2);
IkReal x7440=((1.0)*x7432);
IkReal x7441=((1.0)*x7431);
IkReal x7442=(gconst140*x7432);
evalcond[0]=(((x7431*x7438))+(((-1.0)*gconst140*r20*x7441))+(((-1.0)*r22*x7440)));
evalcond[1]=(sj0+(((-1.0)*x7433*x7441))+(((-1.0)*r02*x7440))+((x7431*x7436)));
evalcond[2]=((((-1.0)*x7437))+((x7431*x7435))+(((-1.0)*gconst140*r10*x7441))+(((-1.0)*r12*x7440)));
evalcond[3]=(((cj2*sj1))+((r20*x7442))+((cj1*sj2))+(((-1.0)*x7438*x7440))+(((-1.0)*r22*x7441)));
evalcond[4]=((((-1.0)*x7436*x7440))+((cj0*x7434))+(((-1.0)*x7437*x7439))+(((-1.0)*r02*x7441))+((x7432*x7433)));
evalcond[5]=((((-1.0)*sj0*x7439))+(((-1.0)*x7435*x7440))+((r10*x7442))+((sj0*x7434))+(((-1.0)*r12*x7441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7444 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7444)==0){
continue;
}
IkReal x7443=pow(x7444,-0.5);
CheckValue<IkReal> x7445 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7445.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7445.value))));
IkReal gconst142=((1.0)*r01*x7443);
IkReal gconst143=((-1.0)*r00*x7443);
CheckValue<IkReal> x7446 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7446.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7446.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7449 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7449.valid){
continue;
}
IkReal x7447=((1.0)*(x7449.value));
IkReal x7448=x7443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7447)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7447)));
IkReal gconst142=((1.0)*r01*x7448);
IkReal gconst143=((-1.0)*r00*x7448);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7452 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7452.valid){
continue;
}
IkReal x7450=((1.0)*(x7452.value));
IkReal x7451=x7443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7450)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7450)));
IkReal gconst142=((1.0)*r01*x7451);
IkReal gconst143=((-1.0)*r00*x7451);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7455 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7455.valid){
continue;
}
IkReal x7453=((1.0)*(x7455.value));
IkReal x7454=x7443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7453)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7453)));
IkReal gconst142=((1.0)*r01*x7454);
IkReal gconst143=((-1.0)*r00*x7454);
IkReal x7456=r02*r02;
IkReal x7457=(r12*sj0);
IkReal x7458=x7443;
IkReal x7459=(cj0*x7458);
j4eval[0]=((IKabs(((((-1.0)*x7459))+((x7456*x7459))+((r02*x7457*x7458)))))+(IKabs((x7457+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7460=((1.0)*gconst143);
CheckValue<IkReal> x7461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7460))+(((-1.0)*gconst142*r20)))),-1);
if(!x7461.valid){
continue;
}
CheckValue<IkReal> x7462 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7460))+((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x7460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7461.value)))+(x7462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7463=IKsin(j4);
IkReal x7464=IKcos(j4);
IkReal x7465=(cj1*cj2);
IkReal x7466=(gconst143*r20);
IkReal x7467=((1.0)*cj0);
IkReal x7468=(sj1*sj2);
IkReal x7469=((1.0)*x7464);
IkReal x7470=((1.0)*x7463);
IkReal x7471=(gconst142*x7463);
IkReal x7472=(gconst143*x7464);
evalcond[0]=((((-1.0)*x7466*x7470))+(((-1.0)*r22*x7469))+((r21*x7471)));
evalcond[1]=(sj0+(((-1.0)*r02*x7469))+(((-1.0)*gconst143*r00*x7470))+((r01*x7471)));
evalcond[2]=((((-1.0)*r12*x7469))+(((-1.0)*gconst143*r10*x7470))+(((-1.0)*x7467))+((r11*x7471)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7464*x7466))+(((-1.0)*r22*x7470))+(((-1.0)*gconst142*r21*x7469)));
evalcond[4]=((((-1.0)*r02*x7470))+((cj0*x7465))+(((-1.0)*x7467*x7468))+((r00*x7472))+(((-1.0)*gconst142*r01*x7469)));
evalcond[5]=(((r10*x7472))+(((-1.0)*gconst142*r11*x7469))+((sj0*x7465))+(((-1.0)*sj0*x7468))+(((-1.0)*r12*x7470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7473=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7473.valid){
continue;
}
CheckValue<IkReal> x7474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7473.value)))+(x7474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7475=IKsin(j4);
IkReal x7476=IKcos(j4);
IkReal x7477=(cj1*cj2);
IkReal x7478=(gconst143*r20);
IkReal x7479=((1.0)*cj0);
IkReal x7480=(sj1*sj2);
IkReal x7481=((1.0)*x7476);
IkReal x7482=((1.0)*x7475);
IkReal x7483=(gconst142*x7475);
IkReal x7484=(gconst143*x7476);
evalcond[0]=((((-1.0)*x7478*x7482))+(((-1.0)*r22*x7481))+((r21*x7483)));
evalcond[1]=(sj0+((r01*x7483))+(((-1.0)*gconst143*r00*x7482))+(((-1.0)*r02*x7481)));
evalcond[2]=((((-1.0)*gconst143*r10*x7482))+((r11*x7483))+(((-1.0)*x7479))+(((-1.0)*r12*x7481)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7481))+(((-1.0)*r22*x7482))+((x7476*x7478)));
evalcond[4]=((((-1.0)*x7479*x7480))+((cj0*x7477))+((r00*x7484))+(((-1.0)*gconst142*r01*x7481))+(((-1.0)*r02*x7482)));
evalcond[5]=((((-1.0)*sj0*x7480))+((sj0*x7477))+(((-1.0)*gconst142*r11*x7481))+((r10*x7484))+(((-1.0)*r12*x7482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7485=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7485.value)))+(x7486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKsin(j4);
IkReal x7488=IKcos(j4);
IkReal x7489=(cj1*cj2);
IkReal x7490=(gconst143*r20);
IkReal x7491=((1.0)*cj0);
IkReal x7492=(sj1*sj2);
IkReal x7493=((1.0)*x7488);
IkReal x7494=((1.0)*x7487);
IkReal x7495=(gconst142*x7487);
IkReal x7496=(gconst143*x7488);
evalcond[0]=((((-1.0)*r22*x7493))+(((-1.0)*x7490*x7494))+((r21*x7495)));
evalcond[1]=(sj0+((r01*x7495))+(((-1.0)*r02*x7493))+(((-1.0)*gconst143*r00*x7494)));
evalcond[2]=((((-1.0)*gconst143*r10*x7494))+((r11*x7495))+(((-1.0)*x7491))+(((-1.0)*r12*x7493)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7493))+((x7488*x7490))+(((-1.0)*r22*x7494)));
evalcond[4]=(((r00*x7496))+(((-1.0)*gconst142*r01*x7493))+((cj0*x7489))+(((-1.0)*x7491*x7492))+(((-1.0)*r02*x7494)));
evalcond[5]=((((-1.0)*sj0*x7492))+(((-1.0)*gconst142*r11*x7493))+((r10*x7496))+((sj0*x7489))+(((-1.0)*r12*x7494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7497=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7497;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7498=((1.0)*cj5);
IkReal x7499=((((-1.0)*r21*x7498))+(((-1.0)*r20*sj5)));
j4eval[0]=x7499;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x7498)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7500=cj5*cj5;
IkReal x7501=r01*r01;
IkReal x7502=(cj5*r00);
IkReal x7503=(r01*sj5);
IkReal x7504=((((-1.0)*x7500*x7501))+(((-2.0)*x7502*x7503))+((x7500*(r00*r00)))+x7501+(r02*r02));
j4eval[0]=x7504;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7503))+x7502))));
j4eval[2]=IKsign(x7504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7505=cj5*cj5;
IkReal x7506=r01*r01;
IkReal x7507=(r01*sj5);
IkReal x7508=(cj5*r00);
CheckValue<IkReal> x7509 = IKatan2WithCheck(IkReal(((((-1.0)*x7507))+x7508)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7509.valid){
continue;
}
CheckValue<IkReal> x7510=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7505*x7506))+x7506+(r02*r02)+(((-2.0)*x7507*x7508))+((x7505*(r00*r00))))),-1);
if(!x7510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7509.value)+(((1.5707963267949)*(x7510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7511=IKsin(j4);
IkReal x7512=IKcos(j4);
IkReal x7513=(cj5*r10);
IkReal x7514=(r01*sj5);
IkReal x7515=(cj5*r00);
IkReal x7516=(cj5*r20);
IkReal x7517=((1.0)*x7512);
IkReal x7518=((1.0)*x7511);
IkReal x7519=(sj5*x7511);
evalcond[0]=((((-1.0)*x7516*x7518))+((r21*x7519))+(((-1.0)*r22*x7517)));
evalcond[1]=(((r11*x7519))+(((-1.0)*r12*x7517))+(((-1.0)*x7513*x7518)));
evalcond[2]=((((-1.0)*r02*x7518))+((x7512*x7515))+(((-1.0)*x7514*x7517)));
evalcond[3]=((1.0)+(((-1.0)*x7515*x7518))+(((-1.0)*r02*x7517))+((x7511*x7514)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7512*x7516))+(((-1.0)*r21*sj5*x7517))+(((-1.0)*r22*x7518)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7517))+((x7512*x7513))+((cj1*cj2))+(((-1.0)*r12*x7518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7520=((1.0)*cj5);
CheckValue<IkReal> x7521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7520))+(((-1.0)*r20*sj5)))),-1);
if(!x7521.valid){
continue;
}
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x7520))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7521.value)))+(x7522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7523=IKsin(j4);
IkReal x7524=IKcos(j4);
IkReal x7525=(cj5*r10);
IkReal x7526=(r01*sj5);
IkReal x7527=(cj5*r00);
IkReal x7528=(cj5*r20);
IkReal x7529=((1.0)*x7524);
IkReal x7530=((1.0)*x7523);
IkReal x7531=(sj5*x7523);
evalcond[0]=((((-1.0)*x7528*x7530))+((r21*x7531))+(((-1.0)*r22*x7529)));
evalcond[1]=(((r11*x7531))+(((-1.0)*r12*x7529))+(((-1.0)*x7525*x7530)));
evalcond[2]=(((x7524*x7527))+(((-1.0)*x7526*x7529))+(((-1.0)*r02*x7530)));
evalcond[3]=((1.0)+(((-1.0)*x7527*x7530))+(((-1.0)*r02*x7529))+((x7523*x7526)));
evalcond[4]=(((cj2*sj1))+((x7524*x7528))+((cj1*sj2))+(((-1.0)*r22*x7530))+(((-1.0)*r21*sj5*x7529)));
evalcond[5]=((((-1.0)*r12*x7530))+((x7524*x7525))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7529))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7532 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7532.valid){
continue;
}
CheckValue<IkReal> x7533=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7532.value)+(((1.5707963267949)*(x7533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7534=IKsin(j4);
IkReal x7535=IKcos(j4);
IkReal x7536=(cj5*r10);
IkReal x7537=(r01*sj5);
IkReal x7538=(cj5*r00);
IkReal x7539=(cj5*r20);
IkReal x7540=((1.0)*x7535);
IkReal x7541=((1.0)*x7534);
IkReal x7542=(sj5*x7534);
evalcond[0]=(((r21*x7542))+(((-1.0)*r22*x7540))+(((-1.0)*x7539*x7541)));
evalcond[1]=(((r11*x7542))+(((-1.0)*r12*x7540))+(((-1.0)*x7536*x7541)));
evalcond[2]=((((-1.0)*x7537*x7540))+((x7535*x7538))+(((-1.0)*r02*x7541)));
evalcond[3]=((1.0)+(((-1.0)*x7538*x7541))+((x7534*x7537))+(((-1.0)*r02*x7540)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7541))+((x7535*x7539))+(((-1.0)*r21*sj5*x7540)));
evalcond[5]=((((-1.0)*r11*sj5*x7540))+(((-1.0)*sj1*sj2))+((x7535*x7536))+(((-1.0)*r12*x7541))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7543=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7543;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7544=((1.0)*cj5);
IkReal x7545=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7544)));
j4eval[0]=x7545;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7544)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7546=cj5*cj5;
IkReal x7547=r01*r01;
IkReal x7548=(r01*sj5);
IkReal x7549=(cj5*r00);
IkReal x7550=(((x7546*x7547))+(((-1.0)*x7546*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7547))+(((2.0)*x7548*x7549)));
j4eval[0]=x7550;
j4eval[1]=IKsign(x7550);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7548))+x7549))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7551=cj5*cj5;
IkReal x7552=r01*r01;
IkReal x7553=(r01*sj5);
IkReal x7554=(cj5*r00);
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7551*(r00*r00)))+((x7551*x7552))+(((2.0)*x7553*x7554))+(((-1.0)*(r02*r02)))+(((-1.0)*x7552)))),-1);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal(((((-1.0)*x7553))+x7554)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7555.value)))+(x7556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j4);
IkReal x7558=IKcos(j4);
IkReal x7559=(cj5*r10);
IkReal x7560=(r01*sj5);
IkReal x7561=(cj5*r00);
IkReal x7562=(cj5*r20);
IkReal x7563=((1.0)*x7558);
IkReal x7564=((1.0)*x7557);
IkReal x7565=(sj5*x7557);
evalcond[0]=((((-1.0)*x7562*x7564))+(((-1.0)*r22*x7563))+((r21*x7565)));
evalcond[1]=((((-1.0)*x7559*x7564))+((r11*x7565))+(((-1.0)*r12*x7563)));
evalcond[2]=((((-1.0)*r02*x7564))+(((-1.0)*x7560*x7563))+((x7558*x7561)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7563))+((x7557*x7560))+(((-1.0)*x7561*x7564)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7564))+((cj1*sj2))+(((-1.0)*r21*sj5*x7563))+((x7558*x7562)));
evalcond[5]=(((x7558*x7559))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7564))+(((-1.0)*r11*sj5*x7563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7566=((1.0)*cj5);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7566))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
CheckValue<IkReal> x7568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7566)))),-1);
if(!x7568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7567.value)+(((1.5707963267949)*(x7568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7569=IKsin(j4);
IkReal x7570=IKcos(j4);
IkReal x7571=(cj5*r10);
IkReal x7572=(r01*sj5);
IkReal x7573=(cj5*r00);
IkReal x7574=(cj5*r20);
IkReal x7575=((1.0)*x7570);
IkReal x7576=((1.0)*x7569);
IkReal x7577=(sj5*x7569);
evalcond[0]=((((-1.0)*x7574*x7576))+(((-1.0)*r22*x7575))+((r21*x7577)));
evalcond[1]=((((-1.0)*x7571*x7576))+(((-1.0)*r12*x7575))+((r11*x7577)));
evalcond[2]=((((-1.0)*r02*x7576))+((x7570*x7573))+(((-1.0)*x7572*x7575)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7575))+((x7569*x7572))+(((-1.0)*x7573*x7576)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7570*x7574))+(((-1.0)*r22*x7576))+(((-1.0)*r21*sj5*x7575)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x7575))+((x7570*x7571))+(((-1.0)*r12*x7576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7578=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7578.valid){
continue;
}
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7578.value)))+(x7579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7580=IKsin(j4);
IkReal x7581=IKcos(j4);
IkReal x7582=(cj5*r10);
IkReal x7583=(r01*sj5);
IkReal x7584=(cj5*r00);
IkReal x7585=(cj5*r20);
IkReal x7586=((1.0)*x7581);
IkReal x7587=((1.0)*x7580);
IkReal x7588=(sj5*x7580);
evalcond[0]=((((-1.0)*x7585*x7587))+(((-1.0)*r22*x7586))+((r21*x7588)));
evalcond[1]=((((-1.0)*x7582*x7587))+(((-1.0)*r12*x7586))+((r11*x7588)));
evalcond[2]=((((-1.0)*r02*x7587))+((x7581*x7584))+(((-1.0)*x7583*x7586)));
evalcond[3]=((-1.0)+(((-1.0)*x7584*x7587))+(((-1.0)*r02*x7586))+((x7580*x7583)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7586))+((cj1*sj2))+(((-1.0)*r22*x7587))+((x7581*x7585)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x7586))+((x7581*x7582))+(((-1.0)*r12*x7587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7590 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7590)==0){
continue;
}
IkReal x7589=pow(x7590,-0.5);
CheckValue<IkReal> x7591 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7591.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7591.value));
IkReal gconst145=((-1.0)*r11*x7589);
IkReal gconst146=(r10*x7589);
CheckValue<IkReal> x7592 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7592.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7592.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7595 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7595.valid){
continue;
}
IkReal x7593=((-1.0)*(x7595.value));
IkReal x7594=x7589;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7593;
IkReal gconst144=x7593;
IkReal gconst145=((-1.0)*r11*x7594);
IkReal gconst146=(r10*x7594);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7596=((1.0)*gconst146);
CheckValue<IkReal> x7597 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*cj0*r00*x7596))+(((-1.0)*r10*sj0*x7596))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7597.valid){
continue;
}
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x7596)))),-1);
if(!x7598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7597.value)+(((1.5707963267949)*(x7598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7599=IKsin(j4);
IkReal x7600=IKcos(j4);
IkReal x7601=(gconst146*r10);
IkReal x7602=(cj1*cj2);
IkReal x7603=(gconst145*r11);
IkReal x7604=(gconst146*r20);
IkReal x7605=(gconst146*r00);
IkReal x7606=((1.0)*cj0);
IkReal x7607=(sj1*sj2);
IkReal x7608=((1.0)*x7600);
IkReal x7609=((1.0)*x7599);
IkReal x7610=(gconst145*x7599);
evalcond[0]=((((-1.0)*r22*x7608))+((r21*x7610))+(((-1.0)*x7604*x7609)));
evalcond[1]=(((r01*x7610))+sj0+(((-1.0)*x7605*x7609))+(((-1.0)*r02*x7608)));
evalcond[2]=(((x7599*x7603))+(((-1.0)*x7606))+(((-1.0)*x7601*x7609))+(((-1.0)*r12*x7608)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7609))+((x7600*x7604))+(((-1.0)*gconst145*r21*x7608))+((cj1*sj2)));
evalcond[4]=(((x7600*x7605))+(((-1.0)*x7606*x7607))+(((-1.0)*gconst145*r01*x7608))+(((-1.0)*r02*x7609))+((cj0*x7602)));
evalcond[5]=(((x7600*x7601))+(((-1.0)*sj0*x7607))+(((-1.0)*x7603*x7608))+(((-1.0)*r12*x7609))+((sj0*x7602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
CheckValue<IkReal> x7612=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x7612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7611.value)+(((1.5707963267949)*(x7612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7613=IKsin(j4);
IkReal x7614=IKcos(j4);
IkReal x7615=(gconst146*r10);
IkReal x7616=(cj1*cj2);
IkReal x7617=(gconst145*r11);
IkReal x7618=(gconst146*r20);
IkReal x7619=(gconst146*r00);
IkReal x7620=((1.0)*cj0);
IkReal x7621=(sj1*sj2);
IkReal x7622=((1.0)*x7614);
IkReal x7623=((1.0)*x7613);
IkReal x7624=(gconst145*x7613);
evalcond[0]=(((r21*x7624))+(((-1.0)*x7618*x7623))+(((-1.0)*r22*x7622)));
evalcond[1]=(sj0+((r01*x7624))+(((-1.0)*x7619*x7623))+(((-1.0)*r02*x7622)));
evalcond[2]=((((-1.0)*x7615*x7623))+((x7613*x7617))+(((-1.0)*r12*x7622))+(((-1.0)*x7620)));
evalcond[3]=((((-1.0)*gconst145*r21*x7622))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7623))+((x7614*x7618)));
evalcond[4]=((((-1.0)*x7620*x7621))+(((-1.0)*gconst145*r01*x7622))+((cj0*x7616))+(((-1.0)*r02*x7623))+((x7614*x7619)));
evalcond[5]=((((-1.0)*r12*x7623))+(((-1.0)*x7617*x7622))+((sj0*x7616))+(((-1.0)*sj0*x7621))+((x7614*x7615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7626 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7626)==0){
continue;
}
IkReal x7625=pow(x7626,-0.5);
CheckValue<IkReal> x7627 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7627.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7627.value))));
IkReal gconst148=((1.0)*r11*x7625);
IkReal gconst149=((-1.0)*r10*x7625);
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7628.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7631 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7631.valid){
continue;
}
IkReal x7629=((1.0)*(x7631.value));
IkReal x7630=x7625;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7629)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7629)));
IkReal gconst148=((1.0)*r11*x7630);
IkReal gconst149=((-1.0)*r10*x7630);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
IkReal x7632=((1.0)*(x7634.value));
IkReal x7633=x7625;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7632)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7632)));
IkReal gconst148=((1.0)*r11*x7633);
IkReal gconst149=((-1.0)*r10*x7633);
IkReal x7635=r12*r12;
IkReal x7636=(cj0*r02);
IkReal x7637=x7625;
IkReal x7638=(sj0*x7637);
j4eval[0]=((IKabs((((r12*sj0))+x7636)))+(IKabs((((x7635*x7638))+((r12*x7636*x7637))+(((-1.0)*x7638))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7641 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7641.valid){
continue;
}
IkReal x7639=((1.0)*(x7641.value));
IkReal x7640=x7625;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7639)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7639)));
IkReal gconst148=((1.0)*r11*x7640);
IkReal gconst149=((-1.0)*r10*x7640);
IkReal x7642=(cj1*r22*sj2);
IkReal x7643=(cj2*r22*sj1);
IkReal x7644=x7625;
IkReal x7645=(r12*x7644);
j4eval[0]=((IKabs((x7643+x7642)))+(IKabs((((x7643*x7645))+((x7642*x7645))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7646=(cj2*sj1);
IkReal x7647=(cj1*sj2);
IkReal x7648=(gconst148*r21);
IkReal x7649=((1.0)*gconst149*r20);
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(x7648*x7648)+(((-2.0)*gconst149*r20*x7648)))),-1);
if(!x7650.valid){
continue;
}
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal((((r22*x7647))+((r22*x7646)))),IkReal(((((-1.0)*x7646*x7649))+((x7647*x7648))+((x7646*x7648))+(((-1.0)*x7647*x7649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7650.value)))+(x7651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7652=IKsin(j4);
IkReal x7653=IKcos(j4);
IkReal x7654=(cj1*cj2);
IkReal x7655=(gconst148*r11);
IkReal x7656=((1.0)*cj0);
IkReal x7657=(sj1*sj2);
IkReal x7658=((1.0)*x7653);
IkReal x7659=(gconst149*x7653);
IkReal x7660=((1.0)*x7652);
IkReal x7661=(gconst148*x7652);
evalcond[0]=((((-1.0)*r22*x7658))+((r21*x7661))+(((-1.0)*gconst149*r20*x7660)));
evalcond[1]=((((-1.0)*gconst149*r00*x7660))+sj0+((r01*x7661))+(((-1.0)*r02*x7658)));
evalcond[2]=((((-1.0)*gconst149*r10*x7660))+(((-1.0)*r12*x7658))+(((-1.0)*x7656))+((x7652*x7655)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x7658))+((cj1*sj2))+(((-1.0)*r22*x7660))+((r20*x7659)));
evalcond[4]=((((-1.0)*x7656*x7657))+(((-1.0)*gconst148*r01*x7658))+(((-1.0)*r02*x7660))+((cj0*x7654))+((r00*x7659)));
evalcond[5]=((((-1.0)*r12*x7660))+(((-1.0)*x7655*x7658))+((r10*x7659))+((sj0*x7654))+(((-1.0)*sj0*x7657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7662=((1.0)*gconst149);
CheckValue<IkReal> x7663 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7662))+(((-1.0)*r10*sj0*x7662))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7663.valid){
continue;
}
CheckValue<IkReal> x7664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7662)))),-1);
if(!x7664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7663.value)+(((1.5707963267949)*(x7664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7665=IKsin(j4);
IkReal x7666=IKcos(j4);
IkReal x7667=(cj1*cj2);
IkReal x7668=(gconst148*r11);
IkReal x7669=((1.0)*cj0);
IkReal x7670=(sj1*sj2);
IkReal x7671=((1.0)*x7666);
IkReal x7672=(gconst149*x7666);
IkReal x7673=((1.0)*x7665);
IkReal x7674=(gconst148*x7665);
evalcond[0]=(((r21*x7674))+(((-1.0)*gconst149*r20*x7673))+(((-1.0)*r22*x7671)));
evalcond[1]=(sj0+(((-1.0)*r02*x7671))+(((-1.0)*gconst149*r00*x7673))+((r01*x7674)));
evalcond[2]=((((-1.0)*x7669))+((x7665*x7668))+(((-1.0)*r12*x7671))+(((-1.0)*gconst149*r10*x7673)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7671))+((r20*x7672))+(((-1.0)*r22*x7673)));
evalcond[4]=((((-1.0)*r02*x7673))+((cj0*x7667))+(((-1.0)*gconst148*r01*x7671))+((r00*x7672))+(((-1.0)*x7669*x7670)));
evalcond[5]=((((-1.0)*sj0*x7670))+(((-1.0)*r12*x7673))+((r10*x7672))+((sj0*x7667))+(((-1.0)*x7668*x7671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7675=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7675.valid){
continue;
}
CheckValue<IkReal> x7676 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7675.value)))+(x7676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7677=IKsin(j4);
IkReal x7678=IKcos(j4);
IkReal x7679=(cj1*cj2);
IkReal x7680=(gconst148*r11);
IkReal x7681=((1.0)*cj0);
IkReal x7682=(sj1*sj2);
IkReal x7683=((1.0)*x7678);
IkReal x7684=(gconst149*x7678);
IkReal x7685=((1.0)*x7677);
IkReal x7686=(gconst148*x7677);
evalcond[0]=((((-1.0)*gconst149*r20*x7685))+(((-1.0)*r22*x7683))+((r21*x7686)));
evalcond[1]=(sj0+(((-1.0)*gconst149*r00*x7685))+((r01*x7686))+(((-1.0)*r02*x7683)));
evalcond[2]=(((x7677*x7680))+(((-1.0)*r12*x7683))+(((-1.0)*x7681))+(((-1.0)*gconst149*r10*x7685)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7685))+((r20*x7684))+(((-1.0)*gconst148*r21*x7683)));
evalcond[4]=((((-1.0)*gconst148*r01*x7683))+(((-1.0)*x7681*x7682))+((r00*x7684))+((cj0*x7679))+(((-1.0)*r02*x7685)));
evalcond[5]=(((sj0*x7679))+(((-1.0)*sj0*x7682))+((r10*x7684))+(((-1.0)*x7680*x7683))+(((-1.0)*r12*x7685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7687=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7687;
j4eval[1]=IKsign(x7687);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7688=((1.0)*cj5);
IkReal x7689=((((-1.0)*r21*x7688))+(((-1.0)*r20*sj5)));
j4eval[0]=x7689;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x7688)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7690=cj5*cj5;
IkReal x7691=r11*r11;
IkReal x7692=(cj5*r10);
IkReal x7693=(r11*sj5);
IkReal x7694=(((x7690*x7691))+(((-1.0)*x7691))+(((-1.0)*(r12*r12)))+(((-1.0)*x7690*(r10*r10)))+(((2.0)*x7692*x7693)));
j4eval[0]=x7694;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7693))+x7692))));
j4eval[2]=IKsign(x7694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7695=cj5*cj5;
IkReal x7696=r11*r11;
IkReal x7697=(cj5*r10);
IkReal x7698=(r11*sj5);
CheckValue<IkReal> x7699=IKPowWithIntegerCheck(IKsign((((x7695*x7696))+(((-1.0)*x7696))+(((-1.0)*(r12*r12)))+(((2.0)*x7697*x7698))+(((-1.0)*x7695*(r10*r10))))),-1);
if(!x7699.valid){
continue;
}
CheckValue<IkReal> x7700 = IKatan2WithCheck(IkReal(((((-1.0)*x7698))+x7697)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7699.value)))+(x7700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7701=IKsin(j4);
IkReal x7702=IKcos(j4);
IkReal x7703=(cj5*r10);
IkReal x7704=(r01*sj5);
IkReal x7705=(cj5*r00);
IkReal x7706=(cj5*r20);
IkReal x7707=((1.0)*x7702);
IkReal x7708=((1.0)*x7701);
IkReal x7709=(sj5*x7701);
evalcond[0]=(((r21*x7709))+(((-1.0)*r22*x7707))+(((-1.0)*x7706*x7708)));
evalcond[1]=(((x7701*x7704))+(((-1.0)*x7705*x7708))+(((-1.0)*r02*x7707)));
evalcond[2]=((((-1.0)*r11*sj5*x7707))+(((-1.0)*r12*x7708))+((x7702*x7703)));
evalcond[3]=((-1.0)+((r11*x7709))+(((-1.0)*r12*x7707))+(((-1.0)*x7703*x7708)));
evalcond[4]=((((-1.0)*r21*sj5*x7707))+((cj2*sj1))+(((-1.0)*r22*x7708))+((cj1*sj2))+((x7702*x7706)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7704*x7707))+((cj1*cj2))+(((-1.0)*r02*x7708))+((x7702*x7705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7710=((1.0)*cj5);
CheckValue<IkReal> x7711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7710))+(((-1.0)*r20*sj5)))),-1);
if(!x7711.valid){
continue;
}
CheckValue<IkReal> x7712 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7711.value)))+(x7712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7713=IKsin(j4);
IkReal x7714=IKcos(j4);
IkReal x7715=(cj5*r10);
IkReal x7716=(r01*sj5);
IkReal x7717=(cj5*r00);
IkReal x7718=(cj5*r20);
IkReal x7719=((1.0)*x7714);
IkReal x7720=((1.0)*x7713);
IkReal x7721=(sj5*x7713);
evalcond[0]=((((-1.0)*r22*x7719))+(((-1.0)*x7718*x7720))+((r21*x7721)));
evalcond[1]=(((x7713*x7716))+(((-1.0)*x7717*x7720))+(((-1.0)*r02*x7719)));
evalcond[2]=(((x7714*x7715))+(((-1.0)*r11*sj5*x7719))+(((-1.0)*r12*x7720)));
evalcond[3]=((-1.0)+(((-1.0)*x7715*x7720))+(((-1.0)*r12*x7719))+((r11*x7721)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7714*x7718))+(((-1.0)*r22*x7720))+(((-1.0)*r21*sj5*x7719)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7720))+((x7714*x7717))+((cj1*cj2))+(((-1.0)*x7716*x7719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
CheckValue<IkReal> x7723=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7722.value)+(((1.5707963267949)*(x7723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7724=IKsin(j4);
IkReal x7725=IKcos(j4);
IkReal x7726=(cj5*r10);
IkReal x7727=(r01*sj5);
IkReal x7728=(cj5*r00);
IkReal x7729=(cj5*r20);
IkReal x7730=((1.0)*x7725);
IkReal x7731=((1.0)*x7724);
IkReal x7732=(sj5*x7724);
evalcond[0]=(((r21*x7732))+(((-1.0)*r22*x7730))+(((-1.0)*x7729*x7731)));
evalcond[1]=((((-1.0)*x7728*x7731))+((x7724*x7727))+(((-1.0)*r02*x7730)));
evalcond[2]=((((-1.0)*r11*sj5*x7730))+(((-1.0)*r12*x7731))+((x7725*x7726)));
evalcond[3]=((-1.0)+((r11*x7732))+(((-1.0)*r12*x7730))+(((-1.0)*x7726*x7731)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7730))+((cj1*sj2))+(((-1.0)*r22*x7731))+((x7725*x7729)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7725*x7728))+((cj1*cj2))+(((-1.0)*r02*x7731))+(((-1.0)*x7727*x7730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7733=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7733;
j4eval[1]=IKsign(x7733);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7734=((1.0)*cj5);
IkReal x7735=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7734)));
j4eval[0]=x7735;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7734)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7736=cj5*cj5;
IkReal x7737=r11*r11;
IkReal x7738=(r11*sj5);
IkReal x7739=(cj5*r10);
IkReal x7740=((r12*r12)+(((-1.0)*x7736*x7737))+x7737+(((-2.0)*x7738*x7739))+((x7736*(r10*r10))));
j4eval[0]=x7740;
j4eval[1]=IKsign(x7740);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7738))+x7739))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7741=cj5*cj5;
IkReal x7742=r11*r11;
IkReal x7743=(cj5*r10);
IkReal x7744=(r11*sj5);
CheckValue<IkReal> x7745=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7741*(r10*r10)))+(((-2.0)*x7743*x7744))+(((-1.0)*x7741*x7742))+x7742)),-1);
if(!x7745.valid){
continue;
}
CheckValue<IkReal> x7746 = IKatan2WithCheck(IkReal(((((-1.0)*x7744))+x7743)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7745.value)))+(x7746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7747=IKsin(j4);
IkReal x7748=IKcos(j4);
IkReal x7749=(cj5*r10);
IkReal x7750=(r01*sj5);
IkReal x7751=(cj5*r00);
IkReal x7752=(cj5*r20);
IkReal x7753=((1.0)*x7748);
IkReal x7754=((1.0)*x7747);
IkReal x7755=(sj5*x7747);
evalcond[0]=((((-1.0)*r22*x7753))+(((-1.0)*x7752*x7754))+((r21*x7755)));
evalcond[1]=((((-1.0)*r02*x7753))+((x7747*x7750))+(((-1.0)*x7751*x7754)));
evalcond[2]=((((-1.0)*r12*x7754))+(((-1.0)*r11*sj5*x7753))+((x7748*x7749)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7753))+(((-1.0)*x7749*x7754))+((r11*x7755)));
evalcond[4]=((((-1.0)*r22*x7754))+((cj2*sj1))+(((-1.0)*r21*sj5*x7753))+((cj1*sj2))+((x7748*x7752)));
evalcond[5]=((((-1.0)*r02*x7754))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7748*x7751))+(((-1.0)*x7750*x7753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7756=((1.0)*cj5);
CheckValue<IkReal> x7757 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7757.valid){
continue;
}
CheckValue<IkReal> x7758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7756)))),-1);
if(!x7758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7757.value)+(((1.5707963267949)*(x7758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7759=IKsin(j4);
IkReal x7760=IKcos(j4);
IkReal x7761=(cj5*r10);
IkReal x7762=(r01*sj5);
IkReal x7763=(cj5*r00);
IkReal x7764=(cj5*r20);
IkReal x7765=((1.0)*x7760);
IkReal x7766=((1.0)*x7759);
IkReal x7767=(sj5*x7759);
evalcond[0]=((((-1.0)*r22*x7765))+(((-1.0)*x7764*x7766))+((r21*x7767)));
evalcond[1]=((((-1.0)*r02*x7765))+(((-1.0)*x7763*x7766))+((x7759*x7762)));
evalcond[2]=(((x7760*x7761))+(((-1.0)*r12*x7766))+(((-1.0)*r11*sj5*x7765)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7765))+(((-1.0)*x7761*x7766))+((r11*x7767)));
evalcond[4]=(((cj2*sj1))+((x7760*x7764))+(((-1.0)*r22*x7766))+((cj1*sj2))+(((-1.0)*r21*sj5*x7765)));
evalcond[5]=(((x7760*x7763))+(((-1.0)*r02*x7766))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7762*x7765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7768=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7768.valid){
continue;
}
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7768.value)))+(x7769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7770=IKsin(j4);
IkReal x7771=IKcos(j4);
IkReal x7772=(cj5*r10);
IkReal x7773=(r01*sj5);
IkReal x7774=(cj5*r00);
IkReal x7775=(cj5*r20);
IkReal x7776=((1.0)*x7771);
IkReal x7777=((1.0)*x7770);
IkReal x7778=(sj5*x7770);
evalcond[0]=((((-1.0)*r22*x7776))+(((-1.0)*x7775*x7777))+((r21*x7778)));
evalcond[1]=((((-1.0)*r02*x7776))+((x7770*x7773))+(((-1.0)*x7774*x7777)));
evalcond[2]=(((x7771*x7772))+(((-1.0)*r12*x7777))+(((-1.0)*r11*sj5*x7776)));
evalcond[3]=((1.0)+((r11*x7778))+(((-1.0)*x7772*x7777))+(((-1.0)*r12*x7776)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7777))+((x7771*x7775))+((cj1*sj2))+(((-1.0)*r21*sj5*x7776)));
evalcond[5]=((((-1.0)*r02*x7777))+((x7771*x7774))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7773*x7776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7779=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7779);
rxp0_2=(py*r00);
rxp1_0=(r21*x7779);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7780=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7780);
rxp0_2=(py*r00);
rxp1_0=(r21*x7780);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7781=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7781);
rxp0_2=(py*r00);
rxp1_0=(r21*x7781);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7784=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7784.valid){
continue;
}
IkReal x7782=x7784.value;
IkReal x7783=(cj0*x7782);
cj4array[0]=((((-1.0)*cj1*cj2*x7783))+((sj1*sj2*x7783)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7785=IKsin(j4);
IkReal x7786=IKcos(j4);
IkReal x7787=(r21*sj5);
IkReal x7788=((1.0)*x7786);
IkReal x7789=((1.0)*cj5*x7785);
evalcond[0]=((-1.0)*r12*x7785);
evalcond[1]=((((-1.0)*r12*x7788))+(((-1.0)*cj0)));
evalcond[2]=(((x7785*x7787))+(((-1.0)*r20*x7789)));
evalcond[3]=((((-1.0)*r00*x7789))+((r01*sj5*x7785)));
evalcond[4]=(((cj2*sj1))+((cj5*r20*x7786))+(((-1.0)*x7787*x7788))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7792=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7792.valid){
continue;
}
IkReal x7790=x7792.value;
IkReal x7791=((1.0)*x7790);
cj4array[0]=((((-1.0)*cj2*sj1*x7791))+(((-1.0)*cj1*sj2*x7791)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7793=IKsin(j4);
IkReal x7794=IKcos(j4);
IkReal x7795=(cj5*r00);
IkReal x7796=((1.0)*cj0);
IkReal x7797=((1.0)*x7793);
IkReal x7798=(sj5*x7793);
IkReal x7799=((1.0)*x7794);
evalcond[0]=((-1.0)*r12*x7793);
evalcond[1]=((((-1.0)*r12*x7799))+(((-1.0)*x7796)));
evalcond[2]=((((-1.0)*cj5*r20*x7797))+((r21*x7798)));
evalcond[3]=((((-1.0)*x7795*x7797))+((r01*x7798)));
evalcond[4]=((((-1.0)*sj1*sj2*x7796))+((x7794*x7795))+((cj0*cj1*cj2))+(((-1.0)*r01*sj5*x7799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7800=IKPowWithIntegerCheck(r12,-1);
if(!x7800.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7800.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7801=IKsin(j4);
IkReal x7802=IKcos(j4);
IkReal x7803=(cj5*r00);
IkReal x7804=(r21*sj5);
IkReal x7805=(cj5*r20);
IkReal x7806=(r01*sj5);
IkReal x7807=((1.0)*x7801);
IkReal x7808=((1.0)*x7802);
evalcond[0]=((-1.0)*r12*x7801);
evalcond[1]=((((-1.0)*x7805*x7807))+((x7801*x7804)));
evalcond[2]=((((-1.0)*x7803*x7807))+((x7801*x7806)));
evalcond[3]=(((x7802*x7805))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7804*x7808)));
evalcond[4]=(((x7802*x7803))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x7806*x7808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7809=((1.0)*cj5);
CheckValue<IkReal> x7810 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7809))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7810.valid){
continue;
}
CheckValue<IkReal> x7811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7809))+(((-1.0)*r20*sj5)))),-1);
if(!x7811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7810.value)+(((1.5707963267949)*(x7811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7812=IKsin(j4);
IkReal x7813=IKcos(j4);
IkReal x7814=(cj1*cj2);
IkReal x7815=(cj5*r10);
IkReal x7816=(r01*sj5);
IkReal x7817=(cj5*r00);
IkReal x7818=(cj5*r20);
IkReal x7819=((1.0)*cj0);
IkReal x7820=(sj1*sj2);
IkReal x7821=((1.0)*x7813);
IkReal x7822=((1.0)*x7812);
IkReal x7823=(sj5*x7812);
evalcond[0]=(((r21*x7823))+(((-1.0)*r22*x7821))+(((-1.0)*x7818*x7822)));
evalcond[1]=(sj0+((x7812*x7816))+(((-1.0)*r02*x7821))+(((-1.0)*x7817*x7822)));
evalcond[2]=(((r11*x7823))+(((-1.0)*x7819))+(((-1.0)*x7815*x7822))+(((-1.0)*r12*x7821)));
evalcond[3]=(((cj2*sj1))+((x7813*x7818))+((cj1*sj2))+(((-1.0)*r21*sj5*x7821))+(((-1.0)*r22*x7822)));
evalcond[4]=(((x7813*x7817))+(((-1.0)*r02*x7822))+(((-1.0)*x7816*x7821))+(((-1.0)*x7819*x7820))+((cj0*x7814)));
evalcond[5]=((((-1.0)*r11*sj5*x7821))+((x7813*x7815))+((sj0*x7814))+(((-1.0)*r12*x7822))+(((-1.0)*sj0*x7820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7824=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7824.valid){
continue;
}
CheckValue<IkReal> x7825 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7824.value)))+(x7825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7826=IKsin(j4);
IkReal x7827=IKcos(j4);
IkReal x7828=(cj1*cj2);
IkReal x7829=(cj5*r10);
IkReal x7830=(r01*sj5);
IkReal x7831=(cj5*r00);
IkReal x7832=(cj5*r20);
IkReal x7833=((1.0)*cj0);
IkReal x7834=(sj1*sj2);
IkReal x7835=((1.0)*x7827);
IkReal x7836=((1.0)*x7826);
IkReal x7837=(sj5*x7826);
evalcond[0]=(((r21*x7837))+(((-1.0)*r22*x7835))+(((-1.0)*x7832*x7836)));
evalcond[1]=(sj0+(((-1.0)*x7831*x7836))+(((-1.0)*r02*x7835))+((x7826*x7830)));
evalcond[2]=((((-1.0)*x7829*x7836))+(((-1.0)*r12*x7835))+(((-1.0)*x7833))+((r11*x7837)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7836))+((cj1*sj2))+(((-1.0)*r21*sj5*x7835))+((x7827*x7832)));
evalcond[4]=((((-1.0)*x7830*x7835))+(((-1.0)*r02*x7836))+((x7827*x7831))+((cj0*x7828))+(((-1.0)*x7833*x7834)));
evalcond[5]=((((-1.0)*sj0*x7834))+((x7827*x7829))+((sj0*x7828))+(((-1.0)*r11*sj5*x7835))+(((-1.0)*r12*x7836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7838=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7838.valid){
continue;
}
CheckValue<IkReal> x7839 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7838.value)))+(x7839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7840=IKsin(j4);
IkReal x7841=IKcos(j4);
IkReal x7842=(cj1*cj2);
IkReal x7843=(cj5*r10);
IkReal x7844=(r01*sj5);
IkReal x7845=(cj5*r00);
IkReal x7846=(cj5*r20);
IkReal x7847=((1.0)*cj0);
IkReal x7848=(sj1*sj2);
IkReal x7849=((1.0)*x7841);
IkReal x7850=((1.0)*x7840);
IkReal x7851=(sj5*x7840);
evalcond[0]=((((-1.0)*r22*x7849))+(((-1.0)*x7846*x7850))+((r21*x7851)));
evalcond[1]=(sj0+(((-1.0)*r02*x7849))+((x7840*x7844))+(((-1.0)*x7845*x7850)));
evalcond[2]=(((r11*x7851))+(((-1.0)*r12*x7849))+(((-1.0)*x7843*x7850))+(((-1.0)*x7847)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7849))+(((-1.0)*r22*x7850))+((x7841*x7846)));
evalcond[4]=((((-1.0)*x7844*x7849))+((cj0*x7842))+(((-1.0)*x7847*x7848))+(((-1.0)*r02*x7850))+((x7841*x7845)));
evalcond[5]=((((-1.0)*sj0*x7848))+(((-1.0)*r11*sj5*x7849))+(((-1.0)*r12*x7850))+((x7841*x7843))+((sj0*x7842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7852=cj5*cj5;
IkReal x7853=r21*r21;
IkReal x7854=(cj2*sj1);
IkReal x7855=(cj1*sj2);
IkReal x7856=(r21*sj5);
IkReal x7857=((1.0)*cj5*r20);
CheckValue<IkReal> x7858 = IKatan2WithCheck(IkReal((((r22*x7854))+((r22*x7855)))),IkReal(((((-1.0)*x7854*x7857))+(((-1.0)*x7855*x7857))+((x7854*x7856))+((x7855*x7856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7858.valid){
continue;
}
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x7856))+((x7852*(r20*r20)))+x7853+(((-1.0)*x7852*x7853)))),-1);
if(!x7859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7858.value)+(((1.5707963267949)*(x7859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7860=IKsin(j4);
IkReal x7861=IKcos(j4);
IkReal x7862=(r21*sj5);
IkReal x7863=(cj5*r20);
IkReal x7864=((1.0)*x7861);
IkReal x7865=((1.0)*x7860);
evalcond[0]=((((-1.0)*x7863*x7865))+((x7860*x7862))+(((-1.0)*r22*x7864)));
evalcond[1]=((((-1.0)*x7862*x7864))+((cj2*sj1))+((x7861*x7863))+((cj1*sj2))+(((-1.0)*r22*x7865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7866=(cj5*sj4);
IkReal x7867=(sj4*sj5);
if( IKabs((((r00*x7866))+(((-1.0)*r01*x7867))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7867))+(((-1.0)*r10*x7866))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7866))+(((-1.0)*r01*x7867))+((cj4*r02))))+IKsqr((((r11*x7867))+(((-1.0)*r10*x7866))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x7866))+(((-1.0)*r01*x7867))+((cj4*r02))), (((r11*x7867))+(((-1.0)*r10*x7866))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7868=IKcos(j0);
IkReal x7869=IKsin(j0);
IkReal x7870=(cj4*cj5);
IkReal x7871=(r11*sj5);
IkReal x7872=(cj1*cj2);
IkReal x7873=(cj5*r11);
IkReal x7874=((1.0)*sj4);
IkReal x7875=(cj5*r01);
IkReal x7876=((1.0)*sj5);
IkReal x7877=((0.09465)*sj5);
IkReal x7878=((1.0)*cj4);
IkReal x7879=(sj1*x7868);
IkReal x7880=(cj1*x7869);
IkReal x7881=(cj1*x7868);
IkReal x7882=(sj1*sj2*x7869);
evalcond[0]=(((r01*sj4*sj5))+x7869+(((-1.0)*r02*x7878))+(((-1.0)*cj5*r00*x7874)));
evalcond[1]=((((-1.0)*r12*x7878))+(((-1.0)*x7868))+(((-1.0)*cj5*r10*x7874))+((sj4*x7871)));
evalcond[2]=(((sj2*x7881))+(((-1.0)*r00*x7876))+((cj2*x7879))+(((-1.0)*x7875)));
evalcond[3]=(((sj2*x7880))+(((-1.0)*x7873))+(((-1.0)*r10*x7876))+((cj2*sj1*x7869)));
evalcond[4]=((((-1.0)*cj4*r01*x7876))+((r00*x7870))+(((-1.0)*r02*x7874))+((x7868*x7872))+(((-1.0)*sj2*x7879)));
evalcond[5]=((((-1.0)*x7882))+((r10*x7870))+(((-1.0)*x7871*x7878))+(((-1.0)*r12*x7874))+((x7869*x7872)));
evalcond[6]=((((0.39225)*sj2*x7879))+(((-1.0)*r00*x7877))+(((0.10915)*x7869))+(((-0.09465)*x7875))+(((-0.425)*x7881))+(((-1.0)*px))+(((-0.39225)*x7868*x7872)));
evalcond[7]=((((-0.10915)*x7868))+(((-0.09465)*x7873))+(((-0.39225)*x7869*x7872))+(((-0.425)*x7880))+(((-1.0)*py))+(((-1.0)*r10*x7877))+(((0.39225)*x7882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7883.value)))+(x7884.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7885=IKcos(j0);
IkReal x7886=IKsin(j0);
IkReal x7887=(cj5*r11);
IkReal x7888=(cj5*r01);
IkReal x7889=(cj2*sj1);
IkReal x7890=((1.0)*sj5);
IkReal x7891=((0.09465)*sj5);
IkReal x7892=((0.39225)*cj2);
IkReal x7893=((0.39225)*sj1*sj2);
IkReal x7894=(cj1*x7885);
IkReal x7895=(cj1*x7886);
evalcond[0]=(((x7885*x7889))+(((-1.0)*x7888))+(((-1.0)*r00*x7890))+((sj2*x7894)));
evalcond[1]=(((x7886*x7889))+(((-1.0)*x7887))+(((-1.0)*r10*x7890))+((sj2*x7895)));
evalcond[2]=((((0.10915)*x7886))+(((-0.09465)*x7888))+(((-1.0)*px))+(((-1.0)*r00*x7891))+((x7885*x7893))+(((-1.0)*x7892*x7894))+(((-0.425)*x7894)));
evalcond[3]=((((-0.09465)*x7887))+(((-1.0)*py))+(((-0.10915)*x7885))+((x7886*x7893))+(((-1.0)*r10*x7891))+(((-1.0)*x7892*x7895))+(((-0.425)*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7896=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7896;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7897=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7897;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7898=((1.0)*cj5);
IkReal x7899=((((-1.0)*r21*x7898))+(((-1.0)*r20*sj5)));
j4eval[0]=x7899;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7898))+(((-1.0)*cj0*r00*x7898))))));
j4eval[2]=IKsign(x7899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7900=((-1.0)*r20);
IkReal x7902 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7902)==0){
continue;
}
IkReal x7901=pow(x7902,-0.5);
CheckValue<IkReal> x7903 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7900),IKFAST_ATAN2_MAGTHRESH);
if(!x7903.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7903.value));
IkReal gconst133=(r21*x7901);
IkReal gconst134=(x7900*x7901);
CheckValue<IkReal> x7904 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7905=((-1.0)*r20);
IkReal x7906=x7901;
CheckValue<IkReal> x7908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7905),IKFAST_ATAN2_MAGTHRESH);
if(!x7908.valid){
continue;
}
IkReal x7907=((-1.0)*(x7908.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7907;
IkReal gconst132=x7907;
IkReal gconst133=(r21*x7906);
IkReal gconst134=(x7905*x7906);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7909=((-1.0)*r20);
IkReal x7910=x7901;
CheckValue<IkReal> x7912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7909),IKFAST_ATAN2_MAGTHRESH);
if(!x7912.valid){
continue;
}
IkReal x7911=((-1.0)*(x7912.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7911;
IkReal gconst132=x7911;
IkReal gconst133=(r21*x7910);
IkReal gconst134=(x7909*x7910);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7913=((-1.0)*r20);
IkReal x7914=x7901;
CheckValue<IkReal> x7916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7913),IKFAST_ATAN2_MAGTHRESH);
if(!x7916.valid){
continue;
}
IkReal x7915=((-1.0)*(x7916.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7915;
IkReal gconst132=x7915;
IkReal gconst133=(r21*x7914);
IkReal gconst134=(x7913*x7914);
IkReal x7917=r22*r22;
CheckValue<IkReal> x7920=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7917))),-1);
if(!x7920.valid){
continue;
}
IkReal x7918=x7920.value;
IkReal x7919=((((2.0)*x7918*(r20*r20)*(r21*r21)))+x7917+((x7918*(r20*r20*r20*r20)))+((x7918*(r21*r21*r21*r21))));
j4eval[0]=x7919;
j4eval[1]=IKsign(x7919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7921=(gconst133*r21);
IkReal x7922=(cj1*sj2);
IkReal x7923=(gconst134*r20);
IkReal x7924=(cj2*sj1);
CheckValue<IkReal> x7925 = IKatan2WithCheck(IkReal((((r22*x7924))+((r22*x7922)))),IkReal((((x7921*x7922))+((x7921*x7924))+(((-1.0)*x7923*x7924))+(((-1.0)*x7922*x7923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7925.valid){
continue;
}
CheckValue<IkReal> x7926=IKPowWithIntegerCheck(IKsign(((x7923*x7923)+(r22*r22)+(((-2.0)*x7921*x7923))+(x7921*x7921))),-1);
if(!x7926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7925.value)+(((1.5707963267949)*(x7926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7927=IKsin(j4);
IkReal x7928=IKcos(j4);
IkReal x7929=(cj1*cj2);
IkReal x7930=(gconst133*r11);
IkReal x7931=(gconst133*r21);
IkReal x7932=(gconst133*r01);
IkReal x7933=((1.0)*cj0);
IkReal x7934=(sj1*sj2);
IkReal x7935=((1.0)*x7928);
IkReal x7936=(gconst134*x7928);
IkReal x7937=((1.0)*x7927);
evalcond[0]=((((-1.0)*r22*x7935))+((x7927*x7931))+(((-1.0)*gconst134*r20*x7937)));
evalcond[1]=(sj0+(((-1.0)*r02*x7935))+((x7927*x7932))+(((-1.0)*gconst134*r00*x7937)));
evalcond[2]=((((-1.0)*gconst134*r10*x7937))+(((-1.0)*r12*x7935))+((x7927*x7930))+(((-1.0)*x7933)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7937))+((r20*x7936))+((cj1*sj2))+(((-1.0)*x7931*x7935)));
evalcond[4]=((((-1.0)*x7932*x7935))+(((-1.0)*r02*x7937))+(((-1.0)*x7933*x7934))+((r00*x7936))+((cj0*x7929)));
evalcond[5]=((((-1.0)*sj0*x7934))+(((-1.0)*r12*x7937))+((r10*x7936))+(((-1.0)*x7930*x7935))+((sj0*x7929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7938=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7938.valid){
continue;
}
CheckValue<IkReal> x7939 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7938.value)))+(x7939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7940=IKsin(j4);
IkReal x7941=IKcos(j4);
IkReal x7942=(cj1*cj2);
IkReal x7943=(gconst133*r11);
IkReal x7944=(gconst133*r21);
IkReal x7945=(gconst133*r01);
IkReal x7946=((1.0)*cj0);
IkReal x7947=(sj1*sj2);
IkReal x7948=((1.0)*x7941);
IkReal x7949=(gconst134*x7941);
IkReal x7950=((1.0)*x7940);
evalcond[0]=((((-1.0)*r22*x7948))+(((-1.0)*gconst134*r20*x7950))+((x7940*x7944)));
evalcond[1]=(sj0+(((-1.0)*r02*x7948))+((x7940*x7945))+(((-1.0)*gconst134*r00*x7950)));
evalcond[2]=((((-1.0)*r12*x7948))+((x7940*x7943))+(((-1.0)*gconst134*r10*x7950))+(((-1.0)*x7946)));
evalcond[3]=(((cj2*sj1))+((r20*x7949))+(((-1.0)*r22*x7950))+((cj1*sj2))+(((-1.0)*x7944*x7948)));
evalcond[4]=(((cj0*x7942))+(((-1.0)*r02*x7950))+(((-1.0)*x7946*x7947))+(((-1.0)*x7945*x7948))+((r00*x7949)));
evalcond[5]=(((sj0*x7942))+(((-1.0)*sj0*x7947))+((r10*x7949))+(((-1.0)*r12*x7950))+(((-1.0)*x7943*x7948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7951.value)+(((1.5707963267949)*(x7952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7953=IKsin(j4);
IkReal x7954=IKcos(j4);
IkReal x7955=(cj1*cj2);
IkReal x7956=(gconst133*r11);
IkReal x7957=(gconst133*r21);
IkReal x7958=(gconst133*r01);
IkReal x7959=((1.0)*cj0);
IkReal x7960=(sj1*sj2);
IkReal x7961=((1.0)*x7954);
IkReal x7962=(gconst134*x7954);
IkReal x7963=((1.0)*x7953);
evalcond[0]=((((-1.0)*r22*x7961))+(((-1.0)*gconst134*r20*x7963))+((x7953*x7957)));
evalcond[1]=((((-1.0)*gconst134*r00*x7963))+sj0+(((-1.0)*r02*x7961))+((x7953*x7958)));
evalcond[2]=((((-1.0)*x7959))+(((-1.0)*r12*x7961))+((x7953*x7956))+(((-1.0)*gconst134*r10*x7963)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7957*x7961))+(((-1.0)*r22*x7963))+((cj1*sj2))+((r20*x7962)));
evalcond[4]=(((r00*x7962))+(((-1.0)*x7958*x7961))+((cj0*x7955))+(((-1.0)*r02*x7963))+(((-1.0)*x7959*x7960)));
evalcond[5]=((((-1.0)*x7956*x7961))+(((-1.0)*r12*x7963))+(((-1.0)*sj0*x7960))+((sj0*x7955))+((r10*x7962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7964=((-1.0)*r21);
IkReal x7966 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7966)==0){
continue;
}
IkReal x7965=pow(x7966,-0.5);
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal(x7964),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7967.value))));
IkReal gconst136=(x7964*x7965);
IkReal gconst137=((1.0)*r20*x7965);
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7968.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7969=((-1.0)*r21);
CheckValue<IkReal> x7972 = IKatan2WithCheck(IkReal(x7969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7972.valid){
continue;
}
IkReal x7970=((1.0)*(x7972.value));
IkReal x7971=x7965;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7970)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7970)));
IkReal gconst136=(x7969*x7971);
IkReal gconst137=((1.0)*r20*x7971);
IkReal x7973=r22*r22;
IkReal x7974=((1.0)*x7973);
CheckValue<IkReal> x7978=IKPowWithIntegerCheck(((-1.0)+x7973),-1);
if(!x7978.valid){
continue;
}
IkReal x7975=x7978.value;
if((((1.0)+(((-1.0)*x7974)))) < -0.00001)
continue;
IkReal x7976=IKsqrt(((1.0)+(((-1.0)*x7974))));
IkReal x7977=(sj0*x7975*x7976);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7977+(((-1.0)*x7974*x7977))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7979=((-1.0)*r21);
CheckValue<IkReal> x7982 = IKatan2WithCheck(IkReal(x7979),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7982.valid){
continue;
}
IkReal x7980=((1.0)*(x7982.value));
IkReal x7981=x7965;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7980)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7980)));
IkReal gconst136=(x7979*x7981);
IkReal gconst137=((1.0)*r20*x7981);
IkReal x7983=r22*r22;
IkReal x7984=((1.0)*x7983);
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(((-1.0)+x7983),-1);
if(!x7988.valid){
continue;
}
IkReal x7985=x7988.value;
if((((1.0)+(((-1.0)*x7984)))) < -0.00001)
continue;
IkReal x7986=IKsqrt(((1.0)+(((-1.0)*x7984))));
IkReal x7987=(cj0*x7985*x7986);
j4eval[0]=((IKabs(((((-1.0)*x7984*x7987))+x7987)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7989=((-1.0)*r21);
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal(x7989),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
IkReal x7990=((1.0)*(x7992.value));
IkReal x7991=x7965;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7990)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7990)));
IkReal gconst136=(x7989*x7991);
IkReal gconst137=((1.0)*r20*x7991);
IkReal x7993=r22*r22;
IkReal x7994=(cj0*r02);
IkReal x7995=(r12*sj0);
CheckValue<IkReal> x7999=IKPowWithIntegerCheck(((-1.0)+x7993),-1);
if(!x7999.valid){
continue;
}
IkReal x7996=x7999.value;
if((((1.0)+(((-1.0)*x7993)))) < -0.00001)
continue;
IkReal x7997=IKsqrt(((1.0)+(((-1.0)*x7993))));
IkReal x7998=((1.0)*r22*x7996*x7997);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7995*x7998))+(((-1.0)*x7994*x7998)))))+(IKabs((x7995+x7994))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8000=((1.0)*gconst137);
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8000))+(((-1.0)*gconst136*r20)))),-1);
if(!x8001.valid){
continue;
}
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst136*r11*sj0))+(((-1.0)*r10*sj0*x8000))+((cj0*gconst136*r01))+(((-1.0)*cj0*r00*x8000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8001.value)))+(x8002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8003=IKsin(j4);
IkReal x8004=IKcos(j4);
IkReal x8005=(gconst136*r01);
IkReal x8006=(gconst137*r10);
IkReal x8007=(cj1*cj2);
IkReal x8008=(gconst137*r20);
IkReal x8009=(gconst136*r11);
IkReal x8010=(gconst136*r21);
IkReal x8011=(gconst137*r00);
IkReal x8012=((1.0)*cj0);
IkReal x8013=(sj1*sj2);
IkReal x8014=((1.0)*x8004);
IkReal x8015=((1.0)*x8003);
evalcond[0]=((((-1.0)*r22*x8014))+(((-1.0)*x8008*x8015))+((x8003*x8010)));
evalcond[1]=((((-1.0)*x8011*x8015))+(((-1.0)*r02*x8014))+sj0+((x8003*x8005)));
evalcond[2]=((((-1.0)*x8012))+(((-1.0)*x8006*x8015))+(((-1.0)*r12*x8014))+((x8003*x8009)));
evalcond[3]=((((-1.0)*r22*x8015))+((cj2*sj1))+(((-1.0)*x8010*x8014))+((cj1*sj2))+((x8004*x8008)));
evalcond[4]=(((x8004*x8011))+(((-1.0)*x8012*x8013))+(((-1.0)*r02*x8015))+((cj0*x8007))+(((-1.0)*x8005*x8014)));
evalcond[5]=(((sj0*x8007))+(((-1.0)*x8009*x8014))+((x8004*x8006))+(((-1.0)*sj0*x8013))+(((-1.0)*r12*x8015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8016 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8016.valid){
continue;
}
CheckValue<IkReal> x8017=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x8017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8016.value)+(((1.5707963267949)*(x8017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8018=IKsin(j4);
IkReal x8019=IKcos(j4);
IkReal x8020=(gconst136*r01);
IkReal x8021=(gconst137*r10);
IkReal x8022=(cj1*cj2);
IkReal x8023=(gconst137*r20);
IkReal x8024=(gconst136*r11);
IkReal x8025=(gconst136*r21);
IkReal x8026=(gconst137*r00);
IkReal x8027=((1.0)*cj0);
IkReal x8028=(sj1*sj2);
IkReal x8029=((1.0)*x8019);
IkReal x8030=((1.0)*x8018);
evalcond[0]=(((x8018*x8025))+(((-1.0)*x8023*x8030))+(((-1.0)*r22*x8029)));
evalcond[1]=(((x8018*x8020))+sj0+(((-1.0)*r02*x8029))+(((-1.0)*x8026*x8030)));
evalcond[2]=(((x8018*x8024))+(((-1.0)*r12*x8029))+(((-1.0)*x8027))+(((-1.0)*x8021*x8030)));
evalcond[3]=((((-1.0)*x8025*x8029))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8030))+((x8019*x8023)));
evalcond[4]=((((-1.0)*r02*x8030))+((cj0*x8022))+(((-1.0)*x8020*x8029))+(((-1.0)*x8027*x8028))+((x8019*x8026)));
evalcond[5]=((((-1.0)*sj0*x8028))+(((-1.0)*r12*x8030))+((sj0*x8022))+(((-1.0)*x8024*x8029))+((x8019*x8021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8031=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x8031.valid){
continue;
}
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8031.value)))+(x8032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8033=IKsin(j4);
IkReal x8034=IKcos(j4);
IkReal x8035=(gconst136*r01);
IkReal x8036=(gconst137*r10);
IkReal x8037=(cj1*cj2);
IkReal x8038=(gconst137*r20);
IkReal x8039=(gconst136*r11);
IkReal x8040=(gconst136*r21);
IkReal x8041=(gconst137*r00);
IkReal x8042=((1.0)*cj0);
IkReal x8043=(sj1*sj2);
IkReal x8044=((1.0)*x8034);
IkReal x8045=((1.0)*x8033);
evalcond[0]=((((-1.0)*r22*x8044))+((x8033*x8040))+(((-1.0)*x8038*x8045)));
evalcond[1]=(sj0+(((-1.0)*x8041*x8045))+(((-1.0)*r02*x8044))+((x8033*x8035)));
evalcond[2]=((((-1.0)*x8036*x8045))+(((-1.0)*x8042))+((x8033*x8039))+(((-1.0)*r12*x8044)));
evalcond[3]=(((cj2*sj1))+((x8034*x8038))+((cj1*sj2))+(((-1.0)*x8040*x8044))+(((-1.0)*r22*x8045)));
evalcond[4]=(((x8034*x8041))+(((-1.0)*x8035*x8044))+(((-1.0)*x8042*x8043))+((cj0*x8037))+(((-1.0)*r02*x8045)));
evalcond[5]=(((x8034*x8036))+(((-1.0)*sj0*x8043))+((sj0*x8037))+(((-1.0)*x8039*x8044))+(((-1.0)*r12*x8045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8047 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8047)==0){
continue;
}
IkReal x8046=pow(x8047,-0.5);
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8048.value));
IkReal gconst139=((-1.0)*r01*x8046);
IkReal gconst140=(r00*x8046);
CheckValue<IkReal> x8049 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8049.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8049.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
IkReal x8050=((-1.0)*(x8052.value));
IkReal x8051=x8046;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8050;
IkReal gconst138=x8050;
IkReal gconst139=((-1.0)*r01*x8051);
IkReal gconst140=(r00*x8051);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8053=((1.0)*gconst140);
CheckValue<IkReal> x8054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8053))+(((-1.0)*gconst139*r20)))),-1);
if(!x8054.valid){
continue;
}
CheckValue<IkReal> x8055 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8053))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*r10*sj0*x8053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8054.value)))+(x8055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8056=IKsin(j4);
IkReal x8057=IKcos(j4);
IkReal x8058=(gconst140*r00);
IkReal x8059=(cj1*cj2);
IkReal x8060=(gconst139*r11);
IkReal x8061=(gconst139*r01);
IkReal x8062=((1.0)*cj0);
IkReal x8063=(gconst139*r21);
IkReal x8064=(sj1*sj2);
IkReal x8065=((1.0)*x8057);
IkReal x8066=((1.0)*x8056);
IkReal x8067=(gconst140*x8057);
evalcond[0]=((((-1.0)*gconst140*r20*x8066))+(((-1.0)*r22*x8065))+((x8056*x8063)));
evalcond[1]=(sj0+(((-1.0)*x8058*x8066))+((x8056*x8061))+(((-1.0)*r02*x8065)));
evalcond[2]=((((-1.0)*x8062))+(((-1.0)*gconst140*r10*x8066))+(((-1.0)*r12*x8065))+((x8056*x8060)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8067))+(((-1.0)*x8063*x8065))+(((-1.0)*r22*x8066)));
evalcond[4]=((((-1.0)*x8061*x8065))+((cj0*x8059))+(((-1.0)*x8062*x8064))+((x8057*x8058))+(((-1.0)*r02*x8066)));
evalcond[5]=(((r10*x8067))+(((-1.0)*sj0*x8064))+((sj0*x8059))+(((-1.0)*r12*x8066))+(((-1.0)*x8060*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8068 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8068.valid){
continue;
}
CheckValue<IkReal> x8069=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x8069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8068.value)+(((1.5707963267949)*(x8069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8070=IKsin(j4);
IkReal x8071=IKcos(j4);
IkReal x8072=(gconst140*r00);
IkReal x8073=(cj1*cj2);
IkReal x8074=(gconst139*r11);
IkReal x8075=(gconst139*r01);
IkReal x8076=((1.0)*cj0);
IkReal x8077=(gconst139*r21);
IkReal x8078=(sj1*sj2);
IkReal x8079=((1.0)*x8071);
IkReal x8080=((1.0)*x8070);
IkReal x8081=(gconst140*x8071);
evalcond[0]=((((-1.0)*gconst140*r20*x8080))+(((-1.0)*r22*x8079))+((x8070*x8077)));
evalcond[1]=(sj0+(((-1.0)*r02*x8079))+((x8070*x8075))+(((-1.0)*x8072*x8080)));
evalcond[2]=((((-1.0)*gconst140*r10*x8080))+(((-1.0)*x8076))+((x8070*x8074))+(((-1.0)*r12*x8079)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8080))+(((-1.0)*x8077*x8079))+((r20*x8081)));
evalcond[4]=((((-1.0)*r02*x8080))+(((-1.0)*x8075*x8079))+((cj0*x8073))+((x8071*x8072))+(((-1.0)*x8076*x8078)));
evalcond[5]=(((r10*x8081))+((sj0*x8073))+(((-1.0)*x8074*x8079))+(((-1.0)*sj0*x8078))+(((-1.0)*r12*x8080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8083 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8083)==0){
continue;
}
IkReal x8082=pow(x8083,-0.5);
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8084.value))));
IkReal gconst142=((1.0)*r01*x8082);
IkReal gconst143=((-1.0)*r00*x8082);
CheckValue<IkReal> x8085 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8085.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8085.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8088 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8088.valid){
continue;
}
IkReal x8086=((1.0)*(x8088.value));
IkReal x8087=x8082;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8086)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8086)));
IkReal gconst142=((1.0)*r01*x8087);
IkReal gconst143=((-1.0)*r00*x8087);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x8091 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8091.valid){
continue;
}
IkReal x8089=((1.0)*(x8091.value));
IkReal x8090=x8082;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8089)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8089)));
IkReal gconst142=((1.0)*r01*x8090);
IkReal gconst143=((-1.0)*r00*x8090);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
IkReal x8092=((1.0)*(x8094.value));
IkReal x8093=x8082;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8092)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8092)));
IkReal gconst142=((1.0)*r01*x8093);
IkReal gconst143=((-1.0)*r00*x8093);
IkReal x8095=r02*r02;
IkReal x8096=(r12*sj0);
IkReal x8097=x8082;
IkReal x8098=(cj0*x8097);
j4eval[0]=((IKabs((x8096+((cj0*r02)))))+(IKabs((((x8095*x8098))+(((-1.0)*x8098))+((r02*x8096*x8097))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8099=((1.0)*gconst143);
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8099))+((cj0*gconst142*r01))+(((-1.0)*r10*sj0*x8099))+((gconst142*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
CheckValue<IkReal> x8101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r20))+(((-1.0)*r21*x8099)))),-1);
if(!x8101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8100.value)+(((1.5707963267949)*(x8101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8102=IKsin(j4);
IkReal x8103=IKcos(j4);
IkReal x8104=(cj1*cj2);
IkReal x8105=(gconst143*r20);
IkReal x8106=((1.0)*cj0);
IkReal x8107=(sj1*sj2);
IkReal x8108=((1.0)*x8103);
IkReal x8109=((1.0)*x8102);
IkReal x8110=(gconst142*x8102);
IkReal x8111=(gconst143*x8103);
evalcond[0]=((((-1.0)*x8105*x8109))+((r21*x8110))+(((-1.0)*r22*x8108)));
evalcond[1]=(sj0+((r01*x8110))+(((-1.0)*gconst143*r00*x8109))+(((-1.0)*r02*x8108)));
evalcond[2]=((((-1.0)*x8106))+(((-1.0)*gconst143*r10*x8109))+((r11*x8110))+(((-1.0)*r12*x8108)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8108))+((cj1*sj2))+(((-1.0)*r22*x8109))+((x8103*x8105)));
evalcond[4]=((((-1.0)*gconst142*r01*x8108))+(((-1.0)*x8106*x8107))+((cj0*x8104))+((r00*x8111))+(((-1.0)*r02*x8109)));
evalcond[5]=(((sj0*x8104))+((r10*x8111))+(((-1.0)*sj0*x8107))+(((-1.0)*gconst142*r11*x8108))+(((-1.0)*r12*x8109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8112=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8112.valid){
continue;
}
CheckValue<IkReal> x8113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8112.value)))+(x8113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8114=IKsin(j4);
IkReal x8115=IKcos(j4);
IkReal x8116=(cj1*cj2);
IkReal x8117=(gconst143*r20);
IkReal x8118=((1.0)*cj0);
IkReal x8119=(sj1*sj2);
IkReal x8120=((1.0)*x8115);
IkReal x8121=((1.0)*x8114);
IkReal x8122=(gconst142*x8114);
IkReal x8123=(gconst143*x8115);
evalcond[0]=(((r21*x8122))+(((-1.0)*x8117*x8121))+(((-1.0)*r22*x8120)));
evalcond[1]=(sj0+((r01*x8122))+(((-1.0)*r02*x8120))+(((-1.0)*gconst143*r00*x8121)));
evalcond[2]=((((-1.0)*r12*x8120))+(((-1.0)*x8118))+(((-1.0)*gconst143*r10*x8121))+((r11*x8122)));
evalcond[3]=(((x8115*x8117))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8121))+(((-1.0)*gconst142*r21*x8120)));
evalcond[4]=(((cj0*x8116))+((r00*x8123))+(((-1.0)*gconst142*r01*x8120))+(((-1.0)*r02*x8121))+(((-1.0)*x8118*x8119)));
evalcond[5]=((((-1.0)*r12*x8121))+((r10*x8123))+(((-1.0)*sj0*x8119))+(((-1.0)*gconst142*r11*x8120))+((sj0*x8116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8124=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x8124.valid){
continue;
}
CheckValue<IkReal> x8125 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8124.value)))+(x8125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8126=IKsin(j4);
IkReal x8127=IKcos(j4);
IkReal x8128=(cj1*cj2);
IkReal x8129=(gconst143*r20);
IkReal x8130=((1.0)*cj0);
IkReal x8131=(sj1*sj2);
IkReal x8132=((1.0)*x8127);
IkReal x8133=((1.0)*x8126);
IkReal x8134=(gconst142*x8126);
IkReal x8135=(gconst143*x8127);
evalcond[0]=((((-1.0)*r22*x8132))+((r21*x8134))+(((-1.0)*x8129*x8133)));
evalcond[1]=((((-1.0)*r02*x8132))+sj0+(((-1.0)*gconst143*r00*x8133))+((r01*x8134)));
evalcond[2]=(((r11*x8134))+(((-1.0)*x8130))+(((-1.0)*r12*x8132))+(((-1.0)*gconst143*r10*x8133)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8133))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8132))+((x8127*x8129)));
evalcond[4]=((((-1.0)*r02*x8133))+((r00*x8135))+(((-1.0)*x8130*x8131))+((cj0*x8128))+(((-1.0)*gconst142*r01*x8132)));
evalcond[5]=((((-1.0)*gconst142*r11*x8132))+(((-1.0)*r12*x8133))+(((-1.0)*sj0*x8131))+((r10*x8135))+((sj0*x8128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8136=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8136;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8137=((1.0)*cj5);
IkReal x8138=((((-1.0)*r21*x8137))+(((-1.0)*r20*sj5)));
j4eval[0]=x8138;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8137))))));
j4eval[2]=IKsign(x8138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8139=cj5*cj5;
IkReal x8140=r01*r01;
IkReal x8141=(cj5*r00);
IkReal x8142=(r01*sj5);
IkReal x8143=(((x8139*(r00*r00)))+(((-2.0)*x8141*x8142))+(((-1.0)*x8139*x8140))+(r02*r02)+x8140);
j4eval[0]=x8143;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8142))+x8141))));
j4eval[2]=IKsign(x8143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8144=cj5*cj5;
IkReal x8145=r01*r01;
IkReal x8146=(r01*sj5);
IkReal x8147=(cj5*r00);
CheckValue<IkReal> x8148=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8144*x8145))+((x8144*(r00*r00)))+(r02*r02)+x8145+(((-2.0)*x8146*x8147)))),-1);
if(!x8148.valid){
continue;
}
CheckValue<IkReal> x8149 = IKatan2WithCheck(IkReal(((((-1.0)*x8146))+x8147)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8148.value)))+(x8149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8150=IKsin(j4);
IkReal x8151=IKcos(j4);
IkReal x8152=(cj5*r10);
IkReal x8153=(r01*sj5);
IkReal x8154=(cj5*r00);
IkReal x8155=(cj5*r20);
IkReal x8156=((1.0)*x8151);
IkReal x8157=((1.0)*x8150);
IkReal x8158=(sj5*x8150);
evalcond[0]=((((-1.0)*r22*x8156))+(((-1.0)*x8155*x8157))+((r21*x8158)));
evalcond[1]=(((r11*x8158))+(((-1.0)*r12*x8156))+(((-1.0)*x8152*x8157)));
evalcond[2]=((((-1.0)*x8153*x8156))+(((-1.0)*r02*x8157))+((x8151*x8154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8156))+((x8150*x8153))+(((-1.0)*x8154*x8157)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8151*x8155))+(((-1.0)*r21*sj5*x8156))+(((-1.0)*r22*x8157)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8156))+((x8151*x8152))+((cj1*cj2))+(((-1.0)*r12*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8159=((1.0)*cj5);
CheckValue<IkReal> x8160 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8159))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8160.valid){
continue;
}
CheckValue<IkReal> x8161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8159))+(((-1.0)*r20*sj5)))),-1);
if(!x8161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8160.value)+(((1.5707963267949)*(x8161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8162=IKsin(j4);
IkReal x8163=IKcos(j4);
IkReal x8164=(cj5*r10);
IkReal x8165=(r01*sj5);
IkReal x8166=(cj5*r00);
IkReal x8167=(cj5*r20);
IkReal x8168=((1.0)*x8163);
IkReal x8169=((1.0)*x8162);
IkReal x8170=(sj5*x8162);
evalcond[0]=((((-1.0)*x8167*x8169))+((r21*x8170))+(((-1.0)*r22*x8168)));
evalcond[1]=(((r11*x8170))+(((-1.0)*r12*x8168))+(((-1.0)*x8164*x8169)));
evalcond[2]=((((-1.0)*x8165*x8168))+(((-1.0)*r02*x8169))+((x8163*x8166)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8168))+(((-1.0)*x8166*x8169))+((x8162*x8165)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8168))+((x8163*x8167))+((cj1*sj2))+(((-1.0)*r22*x8169)));
evalcond[5]=(((x8163*x8164))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8169))+(((-1.0)*r11*sj5*x8168))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8171 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8171.valid){
continue;
}
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8171.value)+(((1.5707963267949)*(x8172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8173=IKsin(j4);
IkReal x8174=IKcos(j4);
IkReal x8175=(cj5*r10);
IkReal x8176=(r01*sj5);
IkReal x8177=(cj5*r00);
IkReal x8178=(cj5*r20);
IkReal x8179=((1.0)*x8174);
IkReal x8180=((1.0)*x8173);
IkReal x8181=(sj5*x8173);
evalcond[0]=(((r21*x8181))+(((-1.0)*r22*x8179))+(((-1.0)*x8178*x8180)));
evalcond[1]=(((r11*x8181))+(((-1.0)*r12*x8179))+(((-1.0)*x8175*x8180)));
evalcond[2]=(((x8174*x8177))+(((-1.0)*r02*x8180))+(((-1.0)*x8176*x8179)));
evalcond[3]=((1.0)+((x8173*x8176))+(((-1.0)*r02*x8179))+(((-1.0)*x8177*x8180)));
evalcond[4]=(((x8174*x8178))+((cj2*sj1))+(((-1.0)*r22*x8180))+((cj1*sj2))+(((-1.0)*r21*sj5*x8179)));
evalcond[5]=(((x8174*x8175))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8180))+((cj1*cj2))+(((-1.0)*r11*sj5*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8182=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8182;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8183=((1.0)*cj5);
IkReal x8184=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8183)));
j4eval[0]=x8184;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8183)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8185=cj5*cj5;
IkReal x8186=r01*r01;
IkReal x8187=(r01*sj5);
IkReal x8188=(cj5*r00);
IkReal x8189=((((2.0)*x8187*x8188))+((x8185*x8186))+(((-1.0)*(r02*r02)))+(((-1.0)*x8186))+(((-1.0)*x8185*(r00*r00))));
j4eval[0]=x8189;
j4eval[1]=IKsign(x8189);
j4eval[2]=((IKabs(((((-1.0)*x8187))+x8188)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8190=cj5*cj5;
IkReal x8191=r01*r01;
IkReal x8192=(r01*sj5);
IkReal x8193=(cj5*r00);
CheckValue<IkReal> x8194 = IKatan2WithCheck(IkReal(((((-1.0)*x8192))+x8193)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8194.valid){
continue;
}
CheckValue<IkReal> x8195=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8191))+((x8190*x8191))+(((-1.0)*x8190*(r00*r00)))+(((2.0)*x8192*x8193)))),-1);
if(!x8195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8194.value)+(((1.5707963267949)*(x8195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8196=IKsin(j4);
IkReal x8197=IKcos(j4);
IkReal x8198=(cj5*r10);
IkReal x8199=(r01*sj5);
IkReal x8200=(cj5*r00);
IkReal x8201=(cj5*r20);
IkReal x8202=((1.0)*x8197);
IkReal x8203=((1.0)*x8196);
IkReal x8204=(sj5*x8196);
evalcond[0]=((((-1.0)*x8201*x8203))+(((-1.0)*r22*x8202))+((r21*x8204)));
evalcond[1]=((((-1.0)*x8198*x8203))+((r11*x8204))+(((-1.0)*r12*x8202)));
evalcond[2]=((((-1.0)*r02*x8203))+((x8197*x8200))+(((-1.0)*x8199*x8202)));
evalcond[3]=((-1.0)+(((-1.0)*x8200*x8203))+(((-1.0)*r02*x8202))+((x8196*x8199)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8202))+(((-1.0)*r22*x8203))+((x8197*x8201)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8203))+((x8197*x8198))+(((-1.0)*r11*sj5*x8202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8205=((1.0)*cj5);
CheckValue<IkReal> x8206 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8206.valid){
continue;
}
CheckValue<IkReal> x8207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8205)))),-1);
if(!x8207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8206.value)+(((1.5707963267949)*(x8207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8208=IKsin(j4);
IkReal x8209=IKcos(j4);
IkReal x8210=(cj5*r10);
IkReal x8211=(r01*sj5);
IkReal x8212=(cj5*r00);
IkReal x8213=(cj5*r20);
IkReal x8214=((1.0)*x8209);
IkReal x8215=((1.0)*x8208);
IkReal x8216=(sj5*x8208);
evalcond[0]=((((-1.0)*r22*x8214))+(((-1.0)*x8213*x8215))+((r21*x8216)));
evalcond[1]=(((r11*x8216))+(((-1.0)*x8210*x8215))+(((-1.0)*r12*x8214)));
evalcond[2]=(((x8209*x8212))+(((-1.0)*r02*x8215))+(((-1.0)*x8211*x8214)));
evalcond[3]=((-1.0)+((x8208*x8211))+(((-1.0)*r02*x8214))+(((-1.0)*x8212*x8215)));
evalcond[4]=(((cj2*sj1))+((x8209*x8213))+((cj1*sj2))+(((-1.0)*r21*sj5*x8214))+(((-1.0)*r22*x8215)));
evalcond[5]=(((x8209*x8210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8215))+(((-1.0)*r11*sj5*x8214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8217=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8217.valid){
continue;
}
CheckValue<IkReal> x8218 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8217.value)))+(x8218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8219=IKsin(j4);
IkReal x8220=IKcos(j4);
IkReal x8221=(cj5*r10);
IkReal x8222=(r01*sj5);
IkReal x8223=(cj5*r00);
IkReal x8224=(cj5*r20);
IkReal x8225=((1.0)*x8220);
IkReal x8226=((1.0)*x8219);
IkReal x8227=(sj5*x8219);
evalcond[0]=((((-1.0)*x8224*x8226))+((r21*x8227))+(((-1.0)*r22*x8225)));
evalcond[1]=(((r11*x8227))+(((-1.0)*x8221*x8226))+(((-1.0)*r12*x8225)));
evalcond[2]=((((-1.0)*r02*x8226))+((x8220*x8223))+(((-1.0)*x8222*x8225)));
evalcond[3]=((-1.0)+(((-1.0)*x8223*x8226))+(((-1.0)*r02*x8225))+((x8219*x8222)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8220*x8224))+(((-1.0)*r21*sj5*x8225))+(((-1.0)*r22*x8226)));
evalcond[5]=((((-1.0)*r11*sj5*x8225))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8220*x8221))+(((-1.0)*r12*x8226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8229 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8229)==0){
continue;
}
IkReal x8228=pow(x8229,-0.5);
CheckValue<IkReal> x8230 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8230.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8230.value));
IkReal gconst145=((-1.0)*r11*x8228);
IkReal gconst146=(r10*x8228);
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8231.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8234 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8234.valid){
continue;
}
IkReal x8232=((-1.0)*(x8234.value));
IkReal x8233=x8228;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8232;
IkReal gconst144=x8232;
IkReal gconst145=((-1.0)*r11*x8233);
IkReal gconst146=(r10*x8233);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8235=((1.0)*gconst146);
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x8235)))),-1);
if(!x8236.valid){
continue;
}
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x8235))+(((-1.0)*cj0*r00*x8235))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8236.value)))+(x8237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8238=IKsin(j4);
IkReal x8239=IKcos(j4);
IkReal x8240=(gconst146*r10);
IkReal x8241=(cj1*cj2);
IkReal x8242=(gconst145*r11);
IkReal x8243=(gconst146*r20);
IkReal x8244=(gconst146*r00);
IkReal x8245=((1.0)*cj0);
IkReal x8246=(sj1*sj2);
IkReal x8247=((1.0)*x8239);
IkReal x8248=((1.0)*x8238);
IkReal x8249=(gconst145*x8238);
evalcond[0]=((((-1.0)*x8243*x8248))+(((-1.0)*r22*x8247))+((r21*x8249)));
evalcond[1]=((((-1.0)*x8244*x8248))+sj0+(((-1.0)*r02*x8247))+((r01*x8249)));
evalcond[2]=((((-1.0)*x8240*x8248))+((x8238*x8242))+(((-1.0)*x8245))+(((-1.0)*r12*x8247)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8248))+((x8239*x8243))+(((-1.0)*gconst145*r21*x8247)));
evalcond[4]=((((-1.0)*x8245*x8246))+(((-1.0)*gconst145*r01*x8247))+((cj0*x8241))+((x8239*x8244))+(((-1.0)*r02*x8248)));
evalcond[5]=((((-1.0)*sj0*x8246))+(((-1.0)*x8242*x8247))+((x8239*x8240))+((sj0*x8241))+(((-1.0)*r12*x8248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8250.valid){
continue;
}
CheckValue<IkReal> x8251=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x8251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8250.value)+(((1.5707963267949)*(x8251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8252=IKsin(j4);
IkReal x8253=IKcos(j4);
IkReal x8254=(gconst146*r10);
IkReal x8255=(cj1*cj2);
IkReal x8256=(gconst145*r11);
IkReal x8257=(gconst146*r20);
IkReal x8258=(gconst146*r00);
IkReal x8259=((1.0)*cj0);
IkReal x8260=(sj1*sj2);
IkReal x8261=((1.0)*x8253);
IkReal x8262=((1.0)*x8252);
IkReal x8263=(gconst145*x8252);
evalcond[0]=(((r21*x8263))+(((-1.0)*x8257*x8262))+(((-1.0)*r22*x8261)));
evalcond[1]=(sj0+(((-1.0)*x8258*x8262))+(((-1.0)*r02*x8261))+((r01*x8263)));
evalcond[2]=((((-1.0)*r12*x8261))+(((-1.0)*x8259))+(((-1.0)*x8254*x8262))+((x8252*x8256)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8261))+((cj1*sj2))+(((-1.0)*r22*x8262))+((x8253*x8257)));
evalcond[4]=((((-1.0)*gconst145*r01*x8261))+(((-1.0)*r02*x8262))+(((-1.0)*x8259*x8260))+((cj0*x8255))+((x8253*x8258)));
evalcond[5]=((((-1.0)*r12*x8262))+((sj0*x8255))+(((-1.0)*x8256*x8261))+((x8253*x8254))+(((-1.0)*sj0*x8260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8265 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8265)==0){
continue;
}
IkReal x8264=pow(x8265,-0.5);
CheckValue<IkReal> x8266 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8266.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8266.value))));
IkReal gconst148=((1.0)*r11*x8264);
IkReal gconst149=((-1.0)*r10*x8264);
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8267.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8270 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8270.valid){
continue;
}
IkReal x8268=((1.0)*(x8270.value));
IkReal x8269=x8264;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8268)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8268)));
IkReal gconst148=((1.0)*r11*x8269);
IkReal gconst149=((-1.0)*r10*x8269);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
IkReal x8271=((1.0)*(x8273.value));
IkReal x8272=x8264;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8271)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8271)));
IkReal gconst148=((1.0)*r11*x8272);
IkReal gconst149=((-1.0)*r10*x8272);
IkReal x8274=r12*r12;
IkReal x8275=(cj0*r02);
IkReal x8276=x8264;
IkReal x8277=(sj0*x8276);
j4eval[0]=((IKabs((((r12*sj0))+x8275)))+(IKabs((((x8274*x8277))+((r12*x8275*x8276))+(((-1.0)*x8277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8280 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8280.valid){
continue;
}
IkReal x8278=((1.0)*(x8280.value));
IkReal x8279=x8264;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8278)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8278)));
IkReal gconst148=((1.0)*r11*x8279);
IkReal gconst149=((-1.0)*r10*x8279);
IkReal x8281=(cj1*r22*sj2);
IkReal x8282=(cj2*r22*sj1);
IkReal x8283=x8264;
IkReal x8284=(r12*x8283);
j4eval[0]=((IKabs((x8282+x8281)))+(IKabs((((x8282*x8284))+((x8281*x8284))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8285=(cj2*sj1);
IkReal x8286=(cj1*sj2);
IkReal x8287=(gconst148*r21);
IkReal x8288=((1.0)*gconst149*r20);
CheckValue<IkReal> x8289=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8287*x8287)+(((gconst149*gconst149)*(r20*r20)))+(((-2.0)*gconst149*r20*x8287)))),-1);
if(!x8289.valid){
continue;
}
CheckValue<IkReal> x8290 = IKatan2WithCheck(IkReal((((r22*x8286))+((r22*x8285)))),IkReal(((((-1.0)*x8285*x8288))+((x8286*x8287))+(((-1.0)*x8286*x8288))+((x8285*x8287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8289.value)))+(x8290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8291=IKsin(j4);
IkReal x8292=IKcos(j4);
IkReal x8293=(cj1*cj2);
IkReal x8294=(gconst148*r11);
IkReal x8295=((1.0)*cj0);
IkReal x8296=(sj1*sj2);
IkReal x8297=((1.0)*x8292);
IkReal x8298=(gconst149*x8292);
IkReal x8299=((1.0)*x8291);
IkReal x8300=(gconst148*x8291);
evalcond[0]=((((-1.0)*gconst149*r20*x8299))+((r21*x8300))+(((-1.0)*r22*x8297)));
evalcond[1]=(sj0+((r01*x8300))+(((-1.0)*gconst149*r00*x8299))+(((-1.0)*r02*x8297)));
evalcond[2]=((((-1.0)*r12*x8297))+((x8291*x8294))+(((-1.0)*x8295))+(((-1.0)*gconst149*r10*x8299)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8297))+((r20*x8298))+((cj1*sj2))+(((-1.0)*r22*x8299)));
evalcond[4]=(((r00*x8298))+((cj0*x8293))+(((-1.0)*x8295*x8296))+(((-1.0)*r02*x8299))+(((-1.0)*gconst148*r01*x8297)));
evalcond[5]=((((-1.0)*r12*x8299))+((r10*x8298))+(((-1.0)*sj0*x8296))+((sj0*x8293))+(((-1.0)*x8294*x8297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8301=((1.0)*gconst149);
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x8301))+((cj0*gconst148*r01))+((gconst148*r11*sj0))+(((-1.0)*cj0*r00*x8301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
CheckValue<IkReal> x8303=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x8301)))),-1);
if(!x8303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8302.value)+(((1.5707963267949)*(x8303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8304=IKsin(j4);
IkReal x8305=IKcos(j4);
IkReal x8306=(cj1*cj2);
IkReal x8307=(gconst148*r11);
IkReal x8308=((1.0)*cj0);
IkReal x8309=(sj1*sj2);
IkReal x8310=((1.0)*x8305);
IkReal x8311=(gconst149*x8305);
IkReal x8312=((1.0)*x8304);
IkReal x8313=(gconst148*x8304);
evalcond[0]=((((-1.0)*gconst149*r20*x8312))+(((-1.0)*r22*x8310))+((r21*x8313)));
evalcond[1]=(sj0+((r01*x8313))+(((-1.0)*r02*x8310))+(((-1.0)*gconst149*r00*x8312)));
evalcond[2]=(((x8304*x8307))+(((-1.0)*gconst149*r10*x8312))+(((-1.0)*r12*x8310))+(((-1.0)*x8308)));
evalcond[3]=((((-1.0)*gconst148*r21*x8310))+((cj2*sj1))+((r20*x8311))+((cj1*sj2))+(((-1.0)*r22*x8312)));
evalcond[4]=(((r00*x8311))+(((-1.0)*r02*x8312))+((cj0*x8306))+(((-1.0)*x8308*x8309))+(((-1.0)*gconst148*r01*x8310)));
evalcond[5]=(((sj0*x8306))+((r10*x8311))+(((-1.0)*sj0*x8309))+(((-1.0)*x8307*x8310))+(((-1.0)*r12*x8312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8314=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8314.valid){
continue;
}
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8314.value)))+(x8315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8316=IKsin(j4);
IkReal x8317=IKcos(j4);
IkReal x8318=(cj1*cj2);
IkReal x8319=(gconst148*r11);
IkReal x8320=((1.0)*cj0);
IkReal x8321=(sj1*sj2);
IkReal x8322=((1.0)*x8317);
IkReal x8323=(gconst149*x8317);
IkReal x8324=((1.0)*x8316);
IkReal x8325=(gconst148*x8316);
evalcond[0]=((((-1.0)*r22*x8322))+((r21*x8325))+(((-1.0)*gconst149*r20*x8324)));
evalcond[1]=(sj0+((r01*x8325))+(((-1.0)*gconst149*r00*x8324))+(((-1.0)*r02*x8322)));
evalcond[2]=((((-1.0)*x8320))+(((-1.0)*gconst149*r10*x8324))+(((-1.0)*r12*x8322))+((x8316*x8319)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8324))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8322))+((r20*x8323)));
evalcond[4]=((((-1.0)*gconst148*r01*x8322))+((cj0*x8318))+((r00*x8323))+(((-1.0)*x8320*x8321))+(((-1.0)*r02*x8324)));
evalcond[5]=(((r10*x8323))+((sj0*x8318))+(((-1.0)*sj0*x8321))+(((-1.0)*r12*x8324))+(((-1.0)*x8319*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8326=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8326;
j4eval[1]=IKsign(x8326);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8327=((1.0)*cj5);
IkReal x8328=((((-1.0)*r21*x8327))+(((-1.0)*r20*sj5)));
j4eval[0]=x8328;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8327))+((r01*sj5))))));
j4eval[2]=IKsign(x8328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8329=cj5*cj5;
IkReal x8330=r11*r11;
IkReal x8331=(cj5*r10);
IkReal x8332=(r11*sj5);
IkReal x8333=(((x8329*x8330))+(((-1.0)*x8329*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x8331*x8332))+(((-1.0)*x8330)));
j4eval[0]=x8333;
j4eval[1]=((IKabs(r12))+(IKabs((x8331+(((-1.0)*x8332))))));
j4eval[2]=IKsign(x8333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8334=cj5*cj5;
IkReal x8335=r11*r11;
IkReal x8336=(cj5*r10);
IkReal x8337=(r11*sj5);
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8334*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x8336*x8337))+((x8334*x8335))+(((-1.0)*x8335)))),-1);
if(!x8338.valid){
continue;
}
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal((x8336+(((-1.0)*x8337)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8338.value)))+(x8339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8340=IKsin(j4);
IkReal x8341=IKcos(j4);
IkReal x8342=(cj5*r10);
IkReal x8343=(r01*sj5);
IkReal x8344=(cj5*r00);
IkReal x8345=(cj5*r20);
IkReal x8346=((1.0)*x8341);
IkReal x8347=((1.0)*x8340);
IkReal x8348=(sj5*x8340);
evalcond[0]=((((-1.0)*x8345*x8347))+((r21*x8348))+(((-1.0)*r22*x8346)));
evalcond[1]=((((-1.0)*r02*x8346))+((x8340*x8343))+(((-1.0)*x8344*x8347)));
evalcond[2]=(((x8341*x8342))+(((-1.0)*r11*sj5*x8346))+(((-1.0)*r12*x8347)));
evalcond[3]=((-1.0)+(((-1.0)*x8342*x8347))+((r11*x8348))+(((-1.0)*r12*x8346)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8346))+((cj1*sj2))+((x8341*x8345))+(((-1.0)*r22*x8347)));
evalcond[5]=((((-1.0)*r02*x8347))+(((-1.0)*x8343*x8346))+(((-1.0)*sj1*sj2))+((x8341*x8344))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8349=((1.0)*cj5);
CheckValue<IkReal> x8350 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8350.valid){
continue;
}
CheckValue<IkReal> x8351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8349))+(((-1.0)*r20*sj5)))),-1);
if(!x8351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8350.value)+(((1.5707963267949)*(x8351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8352=IKsin(j4);
IkReal x8353=IKcos(j4);
IkReal x8354=(cj5*r10);
IkReal x8355=(r01*sj5);
IkReal x8356=(cj5*r00);
IkReal x8357=(cj5*r20);
IkReal x8358=((1.0)*x8353);
IkReal x8359=((1.0)*x8352);
IkReal x8360=(sj5*x8352);
evalcond[0]=((((-1.0)*x8357*x8359))+(((-1.0)*r22*x8358))+((r21*x8360)));
evalcond[1]=((((-1.0)*r02*x8358))+(((-1.0)*x8356*x8359))+((x8352*x8355)));
evalcond[2]=(((x8353*x8354))+(((-1.0)*r11*sj5*x8358))+(((-1.0)*r12*x8359)));
evalcond[3]=((-1.0)+(((-1.0)*x8354*x8359))+(((-1.0)*r12*x8358))+((r11*x8360)));
evalcond[4]=(((x8353*x8357))+((cj2*sj1))+(((-1.0)*r22*x8359))+((cj1*sj2))+(((-1.0)*r21*sj5*x8358)));
evalcond[5]=(((x8353*x8356))+(((-1.0)*r02*x8359))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8355*x8358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8361 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8361.valid){
continue;
}
CheckValue<IkReal> x8362=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8361.value)+(((1.5707963267949)*(x8362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8363=IKsin(j4);
IkReal x8364=IKcos(j4);
IkReal x8365=(cj5*r10);
IkReal x8366=(r01*sj5);
IkReal x8367=(cj5*r00);
IkReal x8368=(cj5*r20);
IkReal x8369=((1.0)*x8364);
IkReal x8370=((1.0)*x8363);
IkReal x8371=(sj5*x8363);
evalcond[0]=((((-1.0)*x8368*x8370))+((r21*x8371))+(((-1.0)*r22*x8369)));
evalcond[1]=(((x8363*x8366))+(((-1.0)*x8367*x8370))+(((-1.0)*r02*x8369)));
evalcond[2]=((((-1.0)*r12*x8370))+((x8364*x8365))+(((-1.0)*r11*sj5*x8369)));
evalcond[3]=((-1.0)+(((-1.0)*x8365*x8370))+(((-1.0)*r12*x8369))+((r11*x8371)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8370))+(((-1.0)*r21*sj5*x8369))+((x8364*x8368)));
evalcond[5]=((((-1.0)*r02*x8370))+(((-1.0)*sj1*sj2))+(((-1.0)*x8366*x8369))+((x8364*x8367))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8372=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8372;
j4eval[1]=IKsign(x8372);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8373=((1.0)*cj5);
IkReal x8374=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8373)));
j4eval[0]=x8374;
j4eval[1]=((IKabs(((((-1.0)*r20*x8373))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8375=cj5*cj5;
IkReal x8376=r11*r11;
IkReal x8377=(r11*sj5);
IkReal x8378=(cj5*r10);
IkReal x8379=(x8376+(r12*r12)+((x8375*(r10*r10)))+(((-1.0)*x8375*x8376))+(((-2.0)*x8377*x8378)));
j4eval[0]=x8379;
j4eval[1]=IKsign(x8379);
j4eval[2]=((IKabs(r12))+(IKabs((x8378+(((-1.0)*x8377))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8380=cj5*cj5;
IkReal x8381=r11*r11;
IkReal x8382=(cj5*r10);
IkReal x8383=(r11*sj5);
CheckValue<IkReal> x8384=IKPowWithIntegerCheck(IKsign((x8381+(r12*r12)+(((-2.0)*x8382*x8383))+((x8380*(r10*r10)))+(((-1.0)*x8380*x8381)))),-1);
if(!x8384.valid){
continue;
}
CheckValue<IkReal> x8385 = IKatan2WithCheck(IkReal((x8382+(((-1.0)*x8383)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8384.value)))+(x8385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8386=IKsin(j4);
IkReal x8387=IKcos(j4);
IkReal x8388=(cj5*r10);
IkReal x8389=(r01*sj5);
IkReal x8390=(cj5*r00);
IkReal x8391=(cj5*r20);
IkReal x8392=((1.0)*x8387);
IkReal x8393=((1.0)*x8386);
IkReal x8394=(sj5*x8386);
evalcond[0]=(((r21*x8394))+(((-1.0)*x8391*x8393))+(((-1.0)*r22*x8392)));
evalcond[1]=((((-1.0)*x8390*x8393))+(((-1.0)*r02*x8392))+((x8386*x8389)));
evalcond[2]=(((x8387*x8388))+(((-1.0)*r11*sj5*x8392))+(((-1.0)*r12*x8393)));
evalcond[3]=((1.0)+(((-1.0)*x8388*x8393))+(((-1.0)*r12*x8392))+((r11*x8394)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8392))+((cj1*sj2))+((x8387*x8391))+(((-1.0)*r22*x8393)));
evalcond[5]=((((-1.0)*r02*x8393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8387*x8390))+(((-1.0)*x8389*x8392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8395=((1.0)*cj5);
CheckValue<IkReal> x8396 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8396.valid){
continue;
}
CheckValue<IkReal> x8397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8395)))),-1);
if(!x8397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8396.value)+(((1.5707963267949)*(x8397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8398=IKsin(j4);
IkReal x8399=IKcos(j4);
IkReal x8400=(cj5*r10);
IkReal x8401=(r01*sj5);
IkReal x8402=(cj5*r00);
IkReal x8403=(cj5*r20);
IkReal x8404=((1.0)*x8399);
IkReal x8405=((1.0)*x8398);
IkReal x8406=(sj5*x8398);
evalcond[0]=((((-1.0)*r22*x8404))+(((-1.0)*x8403*x8405))+((r21*x8406)));
evalcond[1]=(((x8398*x8401))+(((-1.0)*r02*x8404))+(((-1.0)*x8402*x8405)));
evalcond[2]=(((x8399*x8400))+(((-1.0)*r12*x8405))+(((-1.0)*r11*sj5*x8404)));
evalcond[3]=((1.0)+((r11*x8406))+(((-1.0)*x8400*x8405))+(((-1.0)*r12*x8404)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8399*x8403))+(((-1.0)*r21*sj5*x8404))+(((-1.0)*r22*x8405)));
evalcond[5]=(((x8399*x8402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8405))+(((-1.0)*x8401*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8407=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8407.valid){
continue;
}
CheckValue<IkReal> x8408 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8407.value)))+(x8408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8409=IKsin(j4);
IkReal x8410=IKcos(j4);
IkReal x8411=(cj5*r10);
IkReal x8412=(r01*sj5);
IkReal x8413=(cj5*r00);
IkReal x8414=(cj5*r20);
IkReal x8415=((1.0)*x8410);
IkReal x8416=((1.0)*x8409);
IkReal x8417=(sj5*x8409);
evalcond[0]=((((-1.0)*x8414*x8416))+((r21*x8417))+(((-1.0)*r22*x8415)));
evalcond[1]=((((-1.0)*r02*x8415))+(((-1.0)*x8413*x8416))+((x8409*x8412)));
evalcond[2]=((((-1.0)*r12*x8416))+(((-1.0)*r11*sj5*x8415))+((x8410*x8411)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8415))+((r11*x8417))+(((-1.0)*x8411*x8416)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8410*x8414))+(((-1.0)*r21*sj5*x8415))+(((-1.0)*r22*x8416)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8416))+(((-1.0)*x8412*x8415))+((x8410*x8413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8418=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8418);
rxp0_2=(py*r00);
rxp1_0=(r21*x8418);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8419=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8419);
rxp0_2=(py*r00);
rxp1_0=(r21*x8419);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8420=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8420);
rxp0_2=(py*r00);
rxp1_0=(r21*x8420);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8423=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8423.valid){
continue;
}
IkReal x8421=x8423.value;
IkReal x8422=(cj0*x8421);
cj4array[0]=((((-1.0)*cj1*cj2*x8422))+((sj1*sj2*x8422)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8424=IKsin(j4);
IkReal x8425=IKcos(j4);
IkReal x8426=(r21*sj5);
IkReal x8427=((1.0)*x8425);
IkReal x8428=((1.0)*cj5*x8424);
evalcond[0]=((-1.0)*r12*x8424);
evalcond[1]=((((-1.0)*r12*x8427))+(((-1.0)*cj0)));
evalcond[2]=(((x8424*x8426))+(((-1.0)*r20*x8428)));
evalcond[3]=((((-1.0)*r00*x8428))+((r01*sj5*x8424)));
evalcond[4]=((((-1.0)*x8426*x8427))+((cj2*sj1))+((cj1*sj2))+((cj5*r20*x8425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8431=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8431.valid){
continue;
}
IkReal x8429=x8431.value;
IkReal x8430=((1.0)*x8429);
cj4array[0]=((((-1.0)*cj1*sj2*x8430))+(((-1.0)*cj2*sj1*x8430)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8432=IKsin(j4);
IkReal x8433=IKcos(j4);
IkReal x8434=(cj5*r00);
IkReal x8435=((1.0)*cj0);
IkReal x8436=((1.0)*x8432);
IkReal x8437=(sj5*x8432);
IkReal x8438=((1.0)*x8433);
evalcond[0]=((-1.0)*r12*x8432);
evalcond[1]=((((-1.0)*x8435))+(((-1.0)*r12*x8438)));
evalcond[2]=(((r21*x8437))+(((-1.0)*cj5*r20*x8436)));
evalcond[3]=(((r01*x8437))+(((-1.0)*x8434*x8436)));
evalcond[4]=(((cj0*cj1*cj2))+(((-1.0)*r01*sj5*x8438))+((x8433*x8434))+(((-1.0)*sj1*sj2*x8435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8439=IKPowWithIntegerCheck(r12,-1);
if(!x8439.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8439.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8440=IKsin(j4);
IkReal x8441=IKcos(j4);
IkReal x8442=(cj5*r00);
IkReal x8443=(r21*sj5);
IkReal x8444=(cj5*r20);
IkReal x8445=(r01*sj5);
IkReal x8446=((1.0)*x8440);
IkReal x8447=((1.0)*x8441);
evalcond[0]=((-1.0)*r12*x8440);
evalcond[1]=((((-1.0)*x8444*x8446))+((x8440*x8443)));
evalcond[2]=((((-1.0)*x8442*x8446))+((x8440*x8445)));
evalcond[3]=(((cj2*sj1))+((x8441*x8444))+((cj1*sj2))+(((-1.0)*x8443*x8447)));
evalcond[4]=(((x8441*x8442))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x8445*x8447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8448=((1.0)*cj5);
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8448))+(((-1.0)*r20*sj5)))),-1);
if(!x8449.valid){
continue;
}
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x8448))+(((-1.0)*cj0*r00*x8448))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8449.value)))+(x8450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8451=IKsin(j4);
IkReal x8452=IKcos(j4);
IkReal x8453=(cj1*cj2);
IkReal x8454=(cj5*r10);
IkReal x8455=(r01*sj5);
IkReal x8456=(cj5*r00);
IkReal x8457=(cj5*r20);
IkReal x8458=((1.0)*cj0);
IkReal x8459=(sj1*sj2);
IkReal x8460=((1.0)*x8452);
IkReal x8461=((1.0)*x8451);
IkReal x8462=(sj5*x8451);
evalcond[0]=((((-1.0)*x8457*x8461))+((r21*x8462))+(((-1.0)*r22*x8460)));
evalcond[1]=(sj0+(((-1.0)*r02*x8460))+((x8451*x8455))+(((-1.0)*x8456*x8461)));
evalcond[2]=((((-1.0)*x8454*x8461))+((r11*x8462))+(((-1.0)*x8458))+(((-1.0)*r12*x8460)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8460))+((x8452*x8457))+(((-1.0)*r22*x8461)));
evalcond[4]=((((-1.0)*x8458*x8459))+(((-1.0)*r02*x8461))+(((-1.0)*x8455*x8460))+((cj0*x8453))+((x8452*x8456)));
evalcond[5]=((((-1.0)*sj0*x8459))+((sj0*x8453))+((x8452*x8454))+(((-1.0)*r12*x8461))+(((-1.0)*r11*sj5*x8460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8463=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8463.valid){
continue;
}
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8463.value)))+(x8464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8465=IKsin(j4);
IkReal x8466=IKcos(j4);
IkReal x8467=(cj1*cj2);
IkReal x8468=(cj5*r10);
IkReal x8469=(r01*sj5);
IkReal x8470=(cj5*r00);
IkReal x8471=(cj5*r20);
IkReal x8472=((1.0)*cj0);
IkReal x8473=(sj1*sj2);
IkReal x8474=((1.0)*x8466);
IkReal x8475=((1.0)*x8465);
IkReal x8476=(sj5*x8465);
evalcond[0]=((((-1.0)*x8471*x8475))+((r21*x8476))+(((-1.0)*r22*x8474)));
evalcond[1]=(((x8465*x8469))+sj0+(((-1.0)*r02*x8474))+(((-1.0)*x8470*x8475)));
evalcond[2]=((((-1.0)*x8472))+((r11*x8476))+(((-1.0)*x8468*x8475))+(((-1.0)*r12*x8474)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8474))+(((-1.0)*r22*x8475))+((x8466*x8471)));
evalcond[4]=((((-1.0)*r02*x8475))+((cj0*x8467))+(((-1.0)*x8472*x8473))+(((-1.0)*x8469*x8474))+((x8466*x8470)));
evalcond[5]=((((-1.0)*r11*sj5*x8474))+(((-1.0)*sj0*x8473))+(((-1.0)*r12*x8475))+((sj0*x8467))+((x8466*x8468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8477.valid){
continue;
}
CheckValue<IkReal> x8478 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8477.value)))+(x8478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8479=IKsin(j4);
IkReal x8480=IKcos(j4);
IkReal x8481=(cj1*cj2);
IkReal x8482=(cj5*r10);
IkReal x8483=(r01*sj5);
IkReal x8484=(cj5*r00);
IkReal x8485=(cj5*r20);
IkReal x8486=((1.0)*cj0);
IkReal x8487=(sj1*sj2);
IkReal x8488=((1.0)*x8480);
IkReal x8489=((1.0)*x8479);
IkReal x8490=(sj5*x8479);
evalcond[0]=((((-1.0)*x8485*x8489))+(((-1.0)*r22*x8488))+((r21*x8490)));
evalcond[1]=((((-1.0)*r02*x8488))+sj0+(((-1.0)*x8484*x8489))+((x8479*x8483)));
evalcond[2]=((((-1.0)*x8486))+(((-1.0)*x8482*x8489))+(((-1.0)*r12*x8488))+((r11*x8490)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8480*x8485))+(((-1.0)*r22*x8489))+(((-1.0)*r21*sj5*x8488)));
evalcond[4]=(((cj0*x8481))+(((-1.0)*r02*x8489))+(((-1.0)*x8483*x8488))+((x8480*x8484))+(((-1.0)*x8486*x8487)));
evalcond[5]=((((-1.0)*sj0*x8487))+((sj0*x8481))+((x8480*x8482))+(((-1.0)*r11*sj5*x8488))+(((-1.0)*r12*x8489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8491=cj1*cj1;
IkReal x8492=cj2*cj2;
IkReal x8493=(sj1*sj2);
IkReal x8494=((156900000.0)*py);
IkReal x8495=(cj1*cj5);
IkReal x8496=((14850585.0)*cj2);
IkReal x8497=(r00*sj5);
IkReal x8498=((16090500.0)*cj1);
IkReal x8499=((4132419.0)*cj5);
IkReal x8500=(r10*sj5);
IkReal x8501=((170000000.0)*cj1);
IkReal x8502=((156900000.0)*px);
IkReal x8503=(cj1*cj2);
IkReal x8504=((14850585.0)*cj5);
CheckValue<IkReal> x8505 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((r11*x8495*x8496))+((py*x8501))+(((-14850585.0)*x8493*x8500))+((cj1*x8496*x8500))+(((-1.0)*r11*x8493*x8504))+((x8498*x8500))+(((-4132419.0)*x8497))+(((16090500.0)*r11*x8495))+(((-1.0)*x8493*x8494))+(((-1.0)*r01*x8499))+((x8494*x8503)))),IkReal((((px*x8501))+(((43660000.0)*py))+(((-1.0)*x8493*x8502))+((x8497*x8498))+((x8502*x8503))+(((-1.0)*r01*x8493*x8504))+(((16090500.0)*r01*x8495))+((cj1*x8496*x8497))+(((-14850585.0)*x8493*x8497))+(((4132419.0)*x8500))+((r11*x8499))+((r01*x8495*x8496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8505.valid){
continue;
}
CheckValue<IkReal> x8506=IKPowWithIntegerCheck(IKsign(((-66309514.0)+(((61544025.0)*x8492))+(((123088050.0)*x8493*x8503))+(((133365000.0)*cj1*x8493))+(((-123088050.0)*x8491*x8492))+(((-133365000.0)*cj2*x8491))+(((-10705975.0)*x8491)))),-1);
if(!x8506.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8505.value)+(((1.5707963267949)*(x8506.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8507=IKcos(j0);
IkReal x8508=IKsin(j0);
IkReal x8509=((0.425)*cj1);
IkReal x8510=(sj1*sj2);
IkReal x8511=(cj1*cj2);
IkReal x8512=((0.09465)*cj5);
IkReal x8513=((0.09465)*sj5);
IkReal x8514=((0.39225)*x8508);
IkReal x8515=((0.39225)*x8507);
evalcond[0]=((((-1.0)*px))+(((-1.0)*r00*x8513))+(((-1.0)*r01*x8512))+((x8510*x8515))+(((-1.0)*x8507*x8509))+(((0.10915)*x8508))+(((-1.0)*x8511*x8515)));
evalcond[1]=((((-1.0)*x8508*x8509))+(((-1.0)*py))+((x8510*x8514))+(((-0.10915)*x8507))+(((-1.0)*r11*x8512))+(((-1.0)*r10*x8513))+(((-1.0)*x8511*x8514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8516=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8516;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8517=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8517;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8518=((1.0)*cj5);
IkReal x8519=((((-1.0)*r21*x8518))+(((-1.0)*r20*sj5)));
j4eval[0]=x8519;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x8518))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x8518))))));
j4eval[2]=IKsign(x8519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8520=((-1.0)*r20);
IkReal x8522 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8522)==0){
continue;
}
IkReal x8521=pow(x8522,-0.5);
CheckValue<IkReal> x8523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8520),IKFAST_ATAN2_MAGTHRESH);
if(!x8523.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8523.value));
IkReal gconst1=(r21*x8521);
IkReal gconst2=(x8520*x8521);
CheckValue<IkReal> x8524 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8525=((-1.0)*r20);
IkReal x8526=x8521;
CheckValue<IkReal> x8528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8525),IKFAST_ATAN2_MAGTHRESH);
if(!x8528.valid){
continue;
}
IkReal x8527=((-1.0)*(x8528.value));
sj5=gconst1;
cj5=gconst2;
j5=x8527;
IkReal gconst0=x8527;
IkReal gconst1=(r21*x8526);
IkReal gconst2=(x8525*x8526);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8529=((-1.0)*r20);
IkReal x8530=x8521;
CheckValue<IkReal> x8532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8529),IKFAST_ATAN2_MAGTHRESH);
if(!x8532.valid){
continue;
}
IkReal x8531=((-1.0)*(x8532.value));
sj5=gconst1;
cj5=gconst2;
j5=x8531;
IkReal gconst0=x8531;
IkReal gconst1=(r21*x8530);
IkReal gconst2=(x8529*x8530);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8533=((-1.0)*r20);
IkReal x8534=x8521;
CheckValue<IkReal> x8536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8533),IKFAST_ATAN2_MAGTHRESH);
if(!x8536.valid){
continue;
}
IkReal x8535=((-1.0)*(x8536.value));
sj5=gconst1;
cj5=gconst2;
j5=x8535;
IkReal gconst0=x8535;
IkReal gconst1=(r21*x8534);
IkReal gconst2=(x8533*x8534);
IkReal x8537=r22*r22;
CheckValue<IkReal> x8541=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8537))),-1);
if(!x8541.valid){
continue;
}
IkReal x8538=x8541.value;
IkReal x8539=(sj3*x8538);
IkReal x8540=((((2.0)*x8539*(r20*r20)*(r21*r21)))+((x8539*(r20*r20*r20*r20)))+((x8539*(r21*r21*r21*r21)))+((sj3*x8537)));
j4eval[0]=x8540;
j4eval[1]=IKsign(x8540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8542=((-1.0)*r20);
IkReal x8543=x8521;
CheckValue<IkReal> x8545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8542),IKFAST_ATAN2_MAGTHRESH);
if(!x8545.valid){
continue;
}
IkReal x8544=((-1.0)*(x8545.value));
sj5=gconst1;
cj5=gconst2;
j5=x8544;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8544;
IkReal gconst1=(r21*x8543);
IkReal gconst2=(x8542*x8543);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8546=((-1.0)*r20);
IkReal x8547=x8521;
CheckValue<IkReal> x8549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8546),IKFAST_ATAN2_MAGTHRESH);
if(!x8549.valid){
continue;
}
IkReal x8548=((-1.0)*(x8549.value));
sj5=gconst1;
cj5=gconst2;
j5=x8548;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8548;
IkReal gconst1=(r21*x8547);
IkReal gconst2=(x8546*x8547);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8550=((-1.0)*r20);
IkReal x8551=x8521;
CheckValue<IkReal> x8553 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8550),IKFAST_ATAN2_MAGTHRESH);
if(!x8553.valid){
continue;
}
IkReal x8552=((-1.0)*(x8553.value));
sj5=gconst1;
cj5=gconst2;
j5=x8552;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8552;
IkReal gconst1=(r21*x8551);
IkReal gconst2=(x8550*x8551);
IkReal x8554=((1.0)*(r22*r22));
CheckValue<IkReal> x8558=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8554))),-1);
if(!x8558.valid){
continue;
}
IkReal x8555=x8558.value;
IkReal x8556=((1.0)*x8555);
IkReal x8557=((((-1.0)*x8556*(r20*r20*r20*r20)))+(((-1.0)*x8556*(r21*r21*r21*r21)))+(((-2.0)*x8555*(r20*r20)*(r21*r21)))+(((-1.0)*x8554)));
j4eval[0]=x8557;
j4eval[1]=IKsign(x8557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8559=((-1.0)*r20);
IkReal x8560=x8521;
CheckValue<IkReal> x8562 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8559),IKFAST_ATAN2_MAGTHRESH);
if(!x8562.valid){
continue;
}
IkReal x8561=((-1.0)*(x8562.value));
sj5=gconst1;
cj5=gconst2;
j5=x8561;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8561;
IkReal gconst1=(r21*x8560);
IkReal gconst2=(x8559*x8560);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8563=((-1.0)*r20);
IkReal x8564=x8521;
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8563),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
IkReal x8565=((-1.0)*(x8566.value));
sj5=gconst1;
cj5=gconst2;
j5=x8565;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8565;
IkReal gconst1=(r21*x8564);
IkReal gconst2=(x8563*x8564);
IkReal x8567=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8571=IKPowWithIntegerCheck(x8567,-1);
if(!x8571.valid){
continue;
}
IkReal x8568=x8571.value;
IkReal x8569=((1.0)*x8568);
IkReal x8570=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8568))+(((-1.0)*x8569*(r01*r01)*(r21*r21)))+(((-1.0)*x8569*(r00*r00)*(r20*r20))));
j4eval[0]=x8570;
j4eval[1]=IKsign(x8570);
j4eval[2]=r02;
j4eval[3]=x8567;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8572=((-1.0)*r20);
IkReal x8573=x8521;
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8572),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
IkReal x8574=((-1.0)*(x8575.value));
sj5=gconst1;
cj5=gconst2;
j5=x8574;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8574;
IkReal gconst1=(r21*x8573);
IkReal gconst2=(x8572*x8573);
IkReal x8576=r22*r22;
IkReal x8577=((1.0)*r02);
IkReal x8578=(cj1*sj2);
IkReal x8579=(cj2*sj1);
CheckValue<IkReal> x8583=IKPowWithIntegerCheck(((-1.0)+x8576),-1);
if(!x8583.valid){
continue;
}
IkReal x8580=x8583.value;
if((((1.0)+(((-1.0)*x8576)))) < -0.00001)
continue;
IkReal x8581=IKsqrt(((1.0)+(((-1.0)*x8576))));
IkReal x8582=(r02*r22*x8580*x8581);
j4eval[0]=((IKabs(((((-1.0)*x8577*x8579))+(((-1.0)*x8577*x8578)))))+(IKabs((((x8578*x8582))+((x8579*x8582))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8584=(cj1*sj2);
IkReal x8585=(gconst1*r01);
IkReal x8586=((1.0)*r02);
IkReal x8587=(cj2*sj1);
IkReal x8588=((1.0)*gconst2*r00);
CheckValue<IkReal> x8589=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8589.valid){
continue;
}
CheckValue<IkReal> x8590 = IKatan2WithCheck(IkReal(((((-1.0)*x8584*x8588))+(((-1.0)*x8587*x8588))+((x8585*x8587))+((x8584*x8585)))),IkReal(((((-1.0)*x8584*x8586))+(((-1.0)*x8586*x8587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8589.value)))+(x8590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8591=IKcos(j4);
IkReal x8592=IKsin(j4);
IkReal x8593=((1.0)*x8591);
IkReal x8594=(gconst1*x8591);
IkReal x8595=(gconst1*x8592);
IkReal x8596=((1.0)*gconst2*x8592);
evalcond[0]=(((r01*x8594))+(((-1.0)*gconst2*r00*x8593))+((r02*x8592)));
evalcond[1]=((((-1.0)*r20*x8596))+(((-1.0)*r22*x8593))+((r21*x8595)));
evalcond[2]=((((-1.0)*r10*x8596))+(((-1.0)*r12*x8593))+((r11*x8595)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8593))+(((-1.0)*r00*x8596))+((r01*x8595)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8594))+((r22*x8592))+(((-1.0)*gconst2*r20*x8593)));
evalcond[5]=((((-1.0)*gconst2*r10*x8593))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x8594))+((r12*x8592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8597=(gconst1*r01);
IkReal x8598=(gconst2*r00);
CheckValue<IkReal> x8599 = IKatan2WithCheck(IkReal((x8597+(((-1.0)*x8598)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8599.valid){
continue;
}
CheckValue<IkReal> x8600=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8598*x8598)))+(((2.0)*x8597*x8598))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8597*x8597))))),-1);
if(!x8600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8599.value)+(((1.5707963267949)*(x8600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8601=IKcos(j4);
IkReal x8602=IKsin(j4);
IkReal x8603=((1.0)*x8601);
IkReal x8604=(gconst1*x8601);
IkReal x8605=(gconst1*x8602);
IkReal x8606=((1.0)*gconst2*x8602);
evalcond[0]=(((r01*x8604))+(((-1.0)*gconst2*r00*x8603))+((r02*x8602)));
evalcond[1]=((((-1.0)*r22*x8603))+(((-1.0)*r20*x8606))+((r21*x8605)));
evalcond[2]=(((r11*x8605))+(((-1.0)*r12*x8603))+(((-1.0)*r10*x8606)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8606))+(((-1.0)*r02*x8603))+((r01*x8605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8602))+((r21*x8604))+(((-1.0)*gconst2*r20*x8603)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8602))+((r11*x8604))+(((-1.0)*gconst2*r10*x8603))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8607.value)+(((1.5707963267949)*(x8608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8609=IKcos(j4);
IkReal x8610=IKsin(j4);
IkReal x8611=((1.0)*x8609);
IkReal x8612=(gconst1*x8609);
IkReal x8613=(gconst1*x8610);
IkReal x8614=((1.0)*gconst2*x8610);
evalcond[0]=(((r01*x8612))+(((-1.0)*gconst2*r00*x8611))+((r02*x8610)));
evalcond[1]=((((-1.0)*r22*x8611))+(((-1.0)*r20*x8614))+((r21*x8613)));
evalcond[2]=(((r11*x8613))+(((-1.0)*r12*x8611))+(((-1.0)*r10*x8614)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8611))+(((-1.0)*r00*x8614))+((r01*x8613)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8610))+((r21*x8612))+(((-1.0)*gconst2*r20*x8611)));
evalcond[5]=(((r12*x8610))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x8611))+((r11*x8612))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8615=((-1.0)*r20);
IkReal x8616=x8521;
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8615),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
IkReal x8617=((-1.0)*(x8618.value));
sj5=gconst1;
cj5=gconst2;
j5=x8617;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8617;
IkReal gconst1=(r21*x8616);
IkReal gconst2=(x8615*x8616);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8619=((-1.0)*r20);
IkReal x8620=x8521;
CheckValue<IkReal> x8622 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8619),IKFAST_ATAN2_MAGTHRESH);
if(!x8622.valid){
continue;
}
IkReal x8621=((-1.0)*(x8622.value));
sj5=gconst1;
cj5=gconst2;
j5=x8621;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8621;
IkReal gconst1=(r21*x8620);
IkReal gconst2=(x8619*x8620);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8623=((-1.0)*r20);
IkReal x8624=x8521;
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8623),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
IkReal x8625=((-1.0)*(x8626.value));
sj5=gconst1;
cj5=gconst2;
j5=x8625;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8625;
IkReal gconst1=(r21*x8624);
IkReal gconst2=(x8623*x8624);
IkReal x8627=r22*r22;
IkReal x8628=((1.0)*r02);
IkReal x8629=(cj1*sj2);
IkReal x8630=(cj2*sj1);
CheckValue<IkReal> x8634=IKPowWithIntegerCheck(((-1.0)+x8627),-1);
if(!x8634.valid){
continue;
}
IkReal x8631=x8634.value;
if((((1.0)+(((-1.0)*x8627)))) < -0.00001)
continue;
IkReal x8632=IKsqrt(((1.0)+(((-1.0)*x8627))));
IkReal x8633=(r02*r22*x8631*x8632);
j4eval[0]=((IKabs((((x8630*x8633))+((x8629*x8633)))))+(IKabs(((((-1.0)*x8628*x8630))+(((-1.0)*x8628*x8629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8635=(cj1*sj2);
IkReal x8636=(gconst1*r01);
IkReal x8637=((1.0)*r02);
IkReal x8638=(cj2*sj1);
IkReal x8639=((1.0)*gconst2*r00);
CheckValue<IkReal> x8640=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8640.valid){
continue;
}
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((((-1.0)*x8638*x8639))+((x8636*x8638))+((x8635*x8636))+(((-1.0)*x8635*x8639)))),IkReal(((((-1.0)*x8635*x8637))+(((-1.0)*x8637*x8638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8640.value)))+(x8641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8642=IKcos(j4);
IkReal x8643=IKsin(j4);
IkReal x8644=((1.0)*x8642);
IkReal x8645=(gconst1*x8642);
IkReal x8646=(gconst1*x8643);
IkReal x8647=((1.0)*gconst2*x8643);
evalcond[0]=((((-1.0)*gconst2*r00*x8644))+((r02*x8643))+((r01*x8645)));
evalcond[1]=((((-1.0)*r22*x8644))+((r21*x8646))+(((-1.0)*r20*x8647)));
evalcond[2]=(((r11*x8646))+(((-1.0)*r10*x8647))+(((-1.0)*r12*x8644)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8644))+((r01*x8646))+(((-1.0)*r00*x8647)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8645))+(((-1.0)*gconst2*r20*x8644))+((r22*x8643)));
evalcond[5]=(((r12*x8643))+((r11*x8645))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8648=(gconst1*r01);
IkReal x8649=(gconst2*r00);
CheckValue<IkReal> x8650 = IKatan2WithCheck(IkReal((x8648+(((-1.0)*x8649)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8650.valid){
continue;
}
CheckValue<IkReal> x8651=IKPowWithIntegerCheck(IKsign(((x8648*x8648)+(r02*r02)+(x8649*x8649)+(((-2.0)*x8648*x8649)))),-1);
if(!x8651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8650.value)+(((1.5707963267949)*(x8651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8652=IKcos(j4);
IkReal x8653=IKsin(j4);
IkReal x8654=((1.0)*x8652);
IkReal x8655=(gconst1*x8652);
IkReal x8656=(gconst1*x8653);
IkReal x8657=((1.0)*gconst2*x8653);
evalcond[0]=(((r01*x8655))+((r02*x8653))+(((-1.0)*gconst2*r00*x8654)));
evalcond[1]=(((r21*x8656))+(((-1.0)*r20*x8657))+(((-1.0)*r22*x8654)));
evalcond[2]=((((-1.0)*r12*x8654))+((r11*x8656))+(((-1.0)*r10*x8657)));
evalcond[3]=((-1.0)+((r01*x8656))+(((-1.0)*r00*x8657))+(((-1.0)*r02*x8654)));
evalcond[4]=(((cj2*sj1))+((r21*x8655))+((r22*x8653))+(((-1.0)*gconst2*r20*x8654))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8653))+((r11*x8655))+(((-1.0)*gconst2*r10*x8654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8658=((1.0)*gconst2);
CheckValue<IkReal> x8659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8658))+(((-1.0)*gconst1*r10)))),-1);
if(!x8659.valid){
continue;
}
CheckValue<IkReal> x8660 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8658))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8659.value)))+(x8660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8661=IKcos(j4);
IkReal x8662=IKsin(j4);
IkReal x8663=((1.0)*x8661);
IkReal x8664=(gconst1*x8661);
IkReal x8665=(gconst1*x8662);
IkReal x8666=((1.0)*gconst2*x8662);
evalcond[0]=((((-1.0)*gconst2*r00*x8663))+((r01*x8664))+((r02*x8662)));
evalcond[1]=((((-1.0)*r22*x8663))+(((-1.0)*r20*x8666))+((r21*x8665)));
evalcond[2]=((((-1.0)*r12*x8663))+((r11*x8665))+(((-1.0)*r10*x8666)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8666))+(((-1.0)*r02*x8663))+((r01*x8665)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8662))+(((-1.0)*gconst2*r20*x8663))+((r21*x8664)));
evalcond[5]=(((r11*x8664))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8662))+(((-1.0)*gconst2*r10*x8663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8667=((-1.0)*r20);
IkReal x8668=x8521;
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8667),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
IkReal x8669=((-1.0)*(x8670.value));
sj5=gconst1;
cj5=gconst2;
j5=x8669;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8669;
IkReal gconst1=(r21*x8668);
IkReal gconst2=(x8667*x8668);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8671=((-1.0)*r20);
IkReal x8672=x8521;
CheckValue<IkReal> x8674 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8671),IKFAST_ATAN2_MAGTHRESH);
if(!x8674.valid){
continue;
}
IkReal x8673=((-1.0)*(x8674.value));
sj5=gconst1;
cj5=gconst2;
j5=x8673;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8673;
IkReal gconst1=(r21*x8672);
IkReal gconst2=(x8671*x8672);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8675=((-1.0)*r20);
IkReal x8676=x8521;
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8675),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
IkReal x8677=((-1.0)*(x8678.value));
sj5=gconst1;
cj5=gconst2;
j5=x8677;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8677;
IkReal gconst1=(r21*x8676);
IkReal gconst2=(x8675*x8676);
IkReal x8679=r22*r22;
IkReal x8680=(cj1*r12*sj2);
IkReal x8681=(cj2*r12*sj1);
CheckValue<IkReal> x8685=IKPowWithIntegerCheck(((-1.0)+x8679),-1);
if(!x8685.valid){
continue;
}
IkReal x8682=x8685.value;
if((((1.0)+(((-1.0)*x8679)))) < -0.00001)
continue;
IkReal x8683=IKsqrt(((1.0)+(((-1.0)*x8679))));
IkReal x8684=(r22*x8682*x8683);
j4eval[0]=((IKabs((((x8681*x8684))+((x8680*x8684)))))+(IKabs(((((-1.0)*x8681))+(((-1.0)*x8680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8686=(cj1*sj2);
IkReal x8687=(cj2*sj1);
IkReal x8688=((1.0)*r12);
IkReal x8689=(gconst1*r11);
IkReal x8690=((1.0)*gconst2*r10);
CheckValue<IkReal> x8691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8691.valid){
continue;
}
CheckValue<IkReal> x8692 = IKatan2WithCheck(IkReal(((((-1.0)*x8687*x8690))+((x8686*x8689))+((x8687*x8689))+(((-1.0)*x8686*x8690)))),IkReal(((((-1.0)*x8686*x8688))+(((-1.0)*x8687*x8688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8691.value)))+(x8692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8693=IKcos(j4);
IkReal x8694=IKsin(j4);
IkReal x8695=((1.0)*x8693);
IkReal x8696=(gconst1*x8693);
IkReal x8697=(gconst1*x8694);
IkReal x8698=((1.0)*gconst2*x8694);
evalcond[0]=((((-1.0)*gconst2*r10*x8695))+((r12*x8694))+((r11*x8696)));
evalcond[1]=(((r21*x8697))+(((-1.0)*r22*x8695))+(((-1.0)*r20*x8698)));
evalcond[2]=((((-1.0)*r02*x8695))+((r01*x8697))+(((-1.0)*r00*x8698)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8695))+(((-1.0)*r10*x8698))+((r11*x8697)));
evalcond[4]=((((-1.0)*gconst2*r20*x8695))+((cj2*sj1))+((r21*x8696))+((r22*x8694))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8695))+((r02*x8694))+((r01*x8696))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8699=(gconst1*r11);
IkReal x8700=(gconst2*r10);
CheckValue<IkReal> x8701=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8699*x8700))+(r12*r12)+(x8699*x8699)+(x8700*x8700))),-1);
if(!x8701.valid){
continue;
}
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal((x8699+(((-1.0)*x8700)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8701.value)))+(x8702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8703=IKcos(j4);
IkReal x8704=IKsin(j4);
IkReal x8705=((1.0)*x8703);
IkReal x8706=(gconst1*x8703);
IkReal x8707=(gconst1*x8704);
IkReal x8708=((1.0)*gconst2*x8704);
evalcond[0]=(((r11*x8706))+((r12*x8704))+(((-1.0)*gconst2*r10*x8705)));
evalcond[1]=(((r21*x8707))+(((-1.0)*r20*x8708))+(((-1.0)*r22*x8705)));
evalcond[2]=((((-1.0)*r00*x8708))+(((-1.0)*r02*x8705))+((r01*x8707)));
evalcond[3]=((-1.0)+((r11*x8707))+(((-1.0)*r10*x8708))+(((-1.0)*r12*x8705)));
evalcond[4]=(((cj2*sj1))+((r21*x8706))+((cj1*sj2))+((r22*x8704))+(((-1.0)*gconst2*r20*x8705)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x8704))+(((-1.0)*gconst2*r00*x8705))+((cj1*cj2))+((r01*x8706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8709 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8709.valid){
continue;
}
CheckValue<IkReal> x8710=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8709.value)+(((1.5707963267949)*(x8710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8711=IKcos(j4);
IkReal x8712=IKsin(j4);
IkReal x8713=((1.0)*x8711);
IkReal x8714=(gconst1*x8711);
IkReal x8715=(gconst1*x8712);
IkReal x8716=((1.0)*gconst2*x8712);
evalcond[0]=((((-1.0)*gconst2*r10*x8713))+((r11*x8714))+((r12*x8712)));
evalcond[1]=((((-1.0)*r20*x8716))+(((-1.0)*r22*x8713))+((r21*x8715)));
evalcond[2]=((((-1.0)*r02*x8713))+((r01*x8715))+(((-1.0)*r00*x8716)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8713))+((r11*x8715))+(((-1.0)*r10*x8716)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8712))+((r21*x8714))+(((-1.0)*gconst2*r20*x8713)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8713))+((r01*x8714))+((r02*x8712))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8717=((-1.0)*r20);
IkReal x8718=x8521;
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8717),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
IkReal x8719=((-1.0)*(x8720.value));
sj5=gconst1;
cj5=gconst2;
j5=x8719;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8719;
IkReal gconst1=(r21*x8718);
IkReal gconst2=(x8717*x8718);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8721=((-1.0)*r20);
IkReal x8722=x8521;
CheckValue<IkReal> x8724 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8721),IKFAST_ATAN2_MAGTHRESH);
if(!x8724.valid){
continue;
}
IkReal x8723=((-1.0)*(x8724.value));
sj5=gconst1;
cj5=gconst2;
j5=x8723;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8723;
IkReal gconst1=(r21*x8722);
IkReal gconst2=(x8721*x8722);
IkReal x8725=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(x8725,-1);
if(!x8729.valid){
continue;
}
IkReal x8726=x8729.value;
IkReal x8727=((1.0)*x8726);
IkReal x8728=((((-1.0)*x8727*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8726))+(((-1.0)*(r12*r12)))+(((-1.0)*x8727*(r11*r11)*(r21*r21))));
j4eval[0]=x8728;
j4eval[1]=r12;
j4eval[2]=x8725;
j4eval[3]=IKsign(x8728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8730=((-1.0)*r20);
IkReal x8731=x8521;
CheckValue<IkReal> x8733 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8730),IKFAST_ATAN2_MAGTHRESH);
if(!x8733.valid){
continue;
}
IkReal x8732=((-1.0)*(x8733.value));
sj5=gconst1;
cj5=gconst2;
j5=x8732;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8732;
IkReal gconst1=(r21*x8731);
IkReal gconst2=(x8730*x8731);
IkReal x8734=r22*r22;
IkReal x8735=(cj1*r12*sj2);
IkReal x8736=(cj2*r12*sj1);
CheckValue<IkReal> x8740=IKPowWithIntegerCheck(((-1.0)+x8734),-1);
if(!x8740.valid){
continue;
}
IkReal x8737=x8740.value;
if((((1.0)+(((-1.0)*x8734)))) < -0.00001)
continue;
IkReal x8738=IKsqrt(((1.0)+(((-1.0)*x8734))));
IkReal x8739=(r22*x8737*x8738);
j4eval[0]=((IKabs(((((-1.0)*x8735))+(((-1.0)*x8736)))))+(IKabs((((x8735*x8739))+((x8736*x8739))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8741=(cj1*sj2);
IkReal x8742=(cj2*sj1);
IkReal x8743=((1.0)*r12);
IkReal x8744=(gconst1*r11);
IkReal x8745=((1.0)*gconst2*r10);
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal(((((-1.0)*x8741*x8745))+(((-1.0)*x8742*x8745))+((x8741*x8744))+((x8742*x8744)))),IkReal(((((-1.0)*x8741*x8743))+(((-1.0)*x8742*x8743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
CheckValue<IkReal> x8747=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8746.value)+(((1.5707963267949)*(x8747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8748=IKcos(j4);
IkReal x8749=IKsin(j4);
IkReal x8750=((1.0)*x8748);
IkReal x8751=(gconst1*x8748);
IkReal x8752=(gconst1*x8749);
IkReal x8753=((1.0)*gconst2*x8749);
evalcond[0]=(((r12*x8749))+(((-1.0)*gconst2*r10*x8750))+((r11*x8751)));
evalcond[1]=((((-1.0)*r22*x8750))+(((-1.0)*r20*x8753))+((r21*x8752)));
evalcond[2]=((((-1.0)*r02*x8750))+(((-1.0)*r00*x8753))+((r01*x8752)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8753))+((r11*x8752))+(((-1.0)*r12*x8750)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8750))+((r21*x8751))+((r22*x8749)));
evalcond[5]=((((-1.0)*gconst2*r00*x8750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8749))+((r01*x8751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8754=(gconst2*r10);
IkReal x8755=(gconst1*r11);
CheckValue<IkReal> x8756=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x8755*x8755)))+(((2.0)*x8754*x8755))+(((-1.0)*(x8754*x8754))))),-1);
if(!x8756.valid){
continue;
}
CheckValue<IkReal> x8757 = IKatan2WithCheck(IkReal((x8755+(((-1.0)*x8754)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8756.value)))+(x8757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8758=IKcos(j4);
IkReal x8759=IKsin(j4);
IkReal x8760=((1.0)*x8758);
IkReal x8761=(gconst1*x8758);
IkReal x8762=(gconst1*x8759);
IkReal x8763=((1.0)*gconst2*x8759);
evalcond[0]=((((-1.0)*gconst2*r10*x8760))+((r12*x8759))+((r11*x8761)));
evalcond[1]=((((-1.0)*r20*x8763))+(((-1.0)*r22*x8760))+((r21*x8762)));
evalcond[2]=((((-1.0)*r02*x8760))+((r01*x8762))+(((-1.0)*r00*x8763)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8763))+(((-1.0)*r12*x8760))+((r11*x8762)));
evalcond[4]=(((r22*x8759))+((cj2*sj1))+((cj1*sj2))+((r21*x8761))+(((-1.0)*gconst2*r20*x8760)));
evalcond[5]=(((r02*x8759))+((r01*x8761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8764=((1.0)*gconst2);
CheckValue<IkReal> x8765 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8764))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8765.valid){
continue;
}
CheckValue<IkReal> x8766=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8764)))),-1);
if(!x8766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8765.value)+(((1.5707963267949)*(x8766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8767=IKcos(j4);
IkReal x8768=IKsin(j4);
IkReal x8769=((1.0)*x8767);
IkReal x8770=(gconst1*x8767);
IkReal x8771=(gconst1*x8768);
IkReal x8772=((1.0)*gconst2*x8768);
evalcond[0]=((((-1.0)*gconst2*r10*x8769))+((r12*x8768))+((r11*x8770)));
evalcond[1]=((((-1.0)*r20*x8772))+(((-1.0)*r22*x8769))+((r21*x8771)));
evalcond[2]=((((-1.0)*r02*x8769))+((r01*x8771))+(((-1.0)*r00*x8772)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8772))+(((-1.0)*r12*x8769))+((r11*x8771)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8770))+(((-1.0)*gconst2*r20*x8769))+((r22*x8768)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8770))+(((-1.0)*gconst2*r00*x8769))+((r02*x8768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8773=((-1.0)*r20);
IkReal x8774=((-1.0)*r21);
CheckValue<IkReal> x8776 = IKatan2WithCheck(IkReal(x8774),IkReal(x8773),IKFAST_ATAN2_MAGTHRESH);
if(!x8776.valid){
continue;
}
IkReal x8775=((-1.0)*(x8776.value));
sj5=gconst1;
cj5=gconst2;
j5=x8775;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8773);
rxp0_2=(py*r00);
rxp1_0=(py*x8774);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8775;
IkReal gconst1=r21;
IkReal gconst2=x8773;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8777=((-1.0)*r20);
IkReal x8778=((-1.0)*r21);
CheckValue<IkReal> x8780 = IKatan2WithCheck(IkReal(x8778),IkReal(x8777),IKFAST_ATAN2_MAGTHRESH);
if(!x8780.valid){
continue;
}
IkReal x8779=((-1.0)*(x8780.value));
sj5=gconst1;
cj5=gconst2;
j5=x8779;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8777);
rxp0_2=(py*r00);
rxp1_0=(py*x8778);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8779;
IkReal gconst1=r21;
IkReal gconst2=x8777;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8781=((-1.0)*r20);
IkReal x8782=((-1.0)*r21);
CheckValue<IkReal> x8784 = IKatan2WithCheck(IkReal(x8782),IkReal(x8781),IKFAST_ATAN2_MAGTHRESH);
if(!x8784.valid){
continue;
}
IkReal x8783=((-1.0)*(x8784.value));
sj5=gconst1;
cj5=gconst2;
j5=x8783;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8781);
rxp0_2=(py*r00);
rxp1_0=(py*x8782);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8783;
IkReal gconst1=r21;
IkReal gconst2=x8781;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8787=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8787.valid){
continue;
}
IkReal x8785=x8787.value;
IkReal x8786=(cj0*x8785);
cj4array[0]=((((-1.0)*cj1*cj2*x8786))+((sj1*sj2*x8786)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8788=IKsin(j4);
IkReal x8789=IKcos(j4);
IkReal x8790=(gconst1*r21);
IkReal x8791=(gconst2*r20);
IkReal x8792=((1.0)*x8789);
IkReal x8793=((1.0)*x8788);
evalcond[0]=(r12*x8788);
evalcond[1]=((((-1.0)*r12*x8792))+(((-1.0)*cj0)));
evalcond[2]=(((x8788*x8790))+(((-1.0)*x8791*x8793)));
evalcond[3]=(((gconst1*r01*x8788))+(((-1.0)*gconst2*r00*x8793)));
evalcond[4]=(((cj2*sj1))+((x8789*x8790))+((cj1*sj2))+(((-1.0)*x8791*x8792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8796=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8796.valid){
continue;
}
IkReal x8794=x8796.value;
IkReal x8795=((1.0)*x8794);
cj4array[0]=((((-1.0)*cj1*sj2*x8795))+(((-1.0)*cj2*sj1*x8795)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8797=IKsin(j4);
IkReal x8798=IKcos(j4);
IkReal x8799=((1.0)*cj0);
IkReal x8800=(gconst1*r01);
IkReal x8801=((1.0)*x8798);
IkReal x8802=((1.0)*gconst2*x8797);
evalcond[0]=(r12*x8797);
evalcond[1]=((((-1.0)*r12*x8801))+(((-1.0)*x8799)));
evalcond[2]=((((-1.0)*r20*x8802))+((gconst1*r21*x8797)));
evalcond[3]=(((x8797*x8800))+(((-1.0)*r00*x8802)));
evalcond[4]=((((-1.0)*gconst2*r00*x8801))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x8799))+((x8798*x8800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(r12,-1);
if(!x8803.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8803.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8804=IKsin(j4);
IkReal x8805=IKcos(j4);
IkReal x8806=(gconst1*x8805);
IkReal x8807=(gconst1*x8804);
IkReal x8808=((1.0)*gconst2*r20);
IkReal x8809=((1.0)*gconst2*r00);
evalcond[0]=(r12*x8804);
evalcond[1]=(((r21*x8807))+(((-1.0)*x8804*x8808)));
evalcond[2]=(((r01*x8807))+(((-1.0)*x8804*x8809)));
evalcond[3]=(((cj2*sj1))+((r21*x8806))+((cj1*sj2))+(((-1.0)*x8805*x8808)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+((r01*x8806))+(((-1.0)*x8805*x8809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8810=(cj2*sj1);
IkReal x8811=(cj1*sj2);
IkReal x8812=(gconst1*r21);
IkReal x8813=((1.0)*gconst2*r20);
CheckValue<IkReal> x8814 = IKatan2WithCheck(IkReal((((r22*x8810))+((r22*x8811)))),IkReal((((x8810*x8812))+((x8811*x8812))+(((-1.0)*x8811*x8813))+(((-1.0)*x8810*x8813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8814.valid){
continue;
}
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x8813))+(((-1.0)*(x8812*x8812)))+(((2.0)*gconst2*r20*x8812))+(((-1.0)*(r22*r22))))),-1);
if(!x8815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8814.value)+(((1.5707963267949)*(x8815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8816=IKsin(j4);
IkReal x8817=IKcos(j4);
IkReal x8818=(cj1*cj2);
IkReal x8819=((1.0)*cj0);
IkReal x8820=(sj1*sj2);
IkReal x8821=((1.0)*x8817);
IkReal x8822=(gconst1*x8817);
IkReal x8823=(gconst1*x8816);
IkReal x8824=((1.0)*gconst2*x8816);
evalcond[0]=(((r21*x8823))+(((-1.0)*r20*x8824))+(((-1.0)*r22*x8821)));
evalcond[1]=(sj0+(((-1.0)*r02*x8821))+((r01*x8823))+(((-1.0)*r00*x8824)));
evalcond[2]=((((-1.0)*r12*x8821))+((r11*x8823))+(((-1.0)*x8819))+(((-1.0)*r10*x8824)));
evalcond[3]=((((-1.0)*gconst2*r20*x8821))+((r21*x8822))+((cj2*sj1))+((r22*x8816))+((cj1*sj2)));
evalcond[4]=(((r02*x8816))+((r01*x8822))+(((-1.0)*gconst2*r00*x8821))+(((-1.0)*x8819*x8820))+((cj0*x8818)));
evalcond[5]=(((r12*x8816))+((sj0*x8818))+((r11*x8822))+(((-1.0)*gconst2*r10*x8821))+(((-1.0)*sj0*x8820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8825=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8825.valid){
continue;
}
CheckValue<IkReal> x8826 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8825.value)))+(x8826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8827=IKsin(j4);
IkReal x8828=IKcos(j4);
IkReal x8829=(cj1*cj2);
IkReal x8830=((1.0)*cj0);
IkReal x8831=(sj1*sj2);
IkReal x8832=((1.0)*x8828);
IkReal x8833=(gconst1*x8828);
IkReal x8834=(gconst1*x8827);
IkReal x8835=((1.0)*gconst2*x8827);
evalcond[0]=(((r21*x8834))+(((-1.0)*r20*x8835))+(((-1.0)*r22*x8832)));
evalcond[1]=(sj0+(((-1.0)*r02*x8832))+(((-1.0)*r00*x8835))+((r01*x8834)));
evalcond[2]=((((-1.0)*r10*x8835))+((r11*x8834))+(((-1.0)*x8830))+(((-1.0)*r12*x8832)));
evalcond[3]=(((cj2*sj1))+((r22*x8827))+((r21*x8833))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8832)));
evalcond[4]=(((r02*x8827))+(((-1.0)*x8830*x8831))+(((-1.0)*gconst2*r00*x8832))+((r01*x8833))+((cj0*x8829)));
evalcond[5]=(((r12*x8827))+((r11*x8833))+((sj0*x8829))+(((-1.0)*sj0*x8831))+(((-1.0)*gconst2*r10*x8832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8836=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8836.valid){
continue;
}
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8836.value)))+(x8837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8838=IKsin(j4);
IkReal x8839=IKcos(j4);
IkReal x8840=(cj1*cj2);
IkReal x8841=((1.0)*cj0);
IkReal x8842=(sj1*sj2);
IkReal x8843=((1.0)*x8839);
IkReal x8844=(gconst1*x8839);
IkReal x8845=(gconst1*x8838);
IkReal x8846=((1.0)*gconst2*x8838);
evalcond[0]=(((r21*x8845))+(((-1.0)*r20*x8846))+(((-1.0)*r22*x8843)));
evalcond[1]=(sj0+(((-1.0)*r02*x8843))+((r01*x8845))+(((-1.0)*r00*x8846)));
evalcond[2]=((((-1.0)*r10*x8846))+((r11*x8845))+(((-1.0)*x8841))+(((-1.0)*r12*x8843)));
evalcond[3]=(((cj2*sj1))+((r21*x8844))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8843))+((r22*x8838)));
evalcond[4]=(((cj0*x8840))+(((-1.0)*x8841*x8842))+((r02*x8838))+(((-1.0)*gconst2*r00*x8843))+((r01*x8844)));
evalcond[5]=(((r11*x8844))+((r12*x8838))+((sj0*x8840))+(((-1.0)*gconst2*r10*x8843))+(((-1.0)*sj0*x8842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8847=((-1.0)*r20);
IkReal x8848=x8521;
CheckValue<IkReal> x8850 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8847),IKFAST_ATAN2_MAGTHRESH);
if(!x8850.valid){
continue;
}
IkReal x8849=((-1.0)*(x8850.value));
sj5=gconst1;
cj5=gconst2;
j5=x8849;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8849;
IkReal gconst1=(r21*x8848);
IkReal gconst2=(x8847*x8848);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8851=((-1.0)*r20);
IkReal x8852=x8521;
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8851),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
IkReal x8853=((-1.0)*(x8854.value));
sj5=gconst1;
cj5=gconst2;
j5=x8853;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8853;
IkReal gconst1=(r21*x8852);
IkReal gconst2=(x8851*x8852);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8855=((-1.0)*r20);
IkReal x8856=x8521;
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8855),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
IkReal x8857=((-1.0)*(x8858.value));
sj5=gconst1;
cj5=gconst2;
j5=x8857;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8857;
IkReal gconst1=(r21*x8856);
IkReal gconst2=(x8855*x8856);
IkReal x8859=r22*r22;
CheckValue<IkReal> x8862=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8859))),-1);
if(!x8862.valid){
continue;
}
IkReal x8860=x8862.value;
IkReal x8861=(((x8860*(r21*r21*r21*r21)))+x8859+((x8860*(r20*r20*r20*r20)))+(((2.0)*x8860*(r20*r20)*(r21*r21))));
j4eval[0]=x8861;
j4eval[1]=IKsign(x8861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8863=((-1.0)*r20);
IkReal x8864=x8521;
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8863),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
IkReal x8865=((-1.0)*(x8866.value));
sj5=gconst1;
cj5=gconst2;
j5=x8865;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8865;
IkReal gconst1=(r21*x8864);
IkReal gconst2=(x8863*x8864);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8867=((-1.0)*r20);
IkReal x8868=x8521;
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8867),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
IkReal x8869=((-1.0)*(x8870.value));
sj5=gconst1;
cj5=gconst2;
j5=x8869;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8869;
IkReal gconst1=(r21*x8868);
IkReal gconst2=(x8867*x8868);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8871=((-1.0)*r20);
IkReal x8872=x8521;
CheckValue<IkReal> x8874 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8871),IKFAST_ATAN2_MAGTHRESH);
if(!x8874.valid){
continue;
}
IkReal x8873=((-1.0)*(x8874.value));
sj5=gconst1;
cj5=gconst2;
j5=x8873;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8873;
IkReal gconst1=(r21*x8872);
IkReal gconst2=(x8871*x8872);
IkReal x8875=r22*r22;
IkReal x8876=(cj1*r02*sj2);
IkReal x8877=(cj2*r02*sj1);
CheckValue<IkReal> x8881=IKPowWithIntegerCheck(((-1.0)+x8875),-1);
if(!x8881.valid){
continue;
}
IkReal x8878=x8881.value;
if((((1.0)+(((-1.0)*x8875)))) < -0.00001)
continue;
IkReal x8879=IKsqrt(((1.0)+(((-1.0)*x8875))));
IkReal x8880=((1.0)*r22*x8878*x8879);
j4eval[0]=((IKabs(((((-1.0)*x8876*x8880))+(((-1.0)*x8877*x8880)))))+(IKabs((x8877+x8876))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8882=(cj2*sj1);
IkReal x8883=(cj1*sj2);
IkReal x8884=(gconst2*r00);
IkReal x8885=((1.0)*gconst1*r01);
CheckValue<IkReal> x8886 = IKatan2WithCheck(IkReal(((((-1.0)*x8883*x8885))+(((-1.0)*x8882*x8885))+((x8882*x8884))+((x8883*x8884)))),IkReal((((r02*x8882))+((r02*x8883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8886.valid){
continue;
}
CheckValue<IkReal> x8887=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8886.value)+(((1.5707963267949)*(x8887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8888=IKsin(j4);
IkReal x8889=IKcos(j4);
IkReal x8890=(gconst1*r11);
IkReal x8891=(gconst1*r21);
IkReal x8892=(gconst1*r01);
IkReal x8893=((1.0)*x8889);
IkReal x8894=(gconst2*x8889);
IkReal x8895=((1.0)*x8888);
evalcond[0]=(((x8888*x8891))+(((-1.0)*gconst2*r20*x8895))+(((-1.0)*r22*x8893)));
evalcond[1]=((((-1.0)*r12*x8893))+((x8888*x8890))+(((-1.0)*gconst2*r10*x8895)));
evalcond[2]=(((r00*x8894))+(((-1.0)*x8892*x8893))+(((-1.0)*r02*x8895)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8895))+(((-1.0)*r02*x8893))+((x8888*x8892)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8891*x8893))+((r20*x8894))+((cj1*sj2))+(((-1.0)*r22*x8895)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8895))+((r10*x8894))+(((-1.0)*x8890*x8893))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8896=(gconst1*r01);
IkReal x8897=(gconst2*r00);
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal(((((-1.0)*x8896))+x8897)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
CheckValue<IkReal> x8899=IKPowWithIntegerCheck(IKsign(((x8896*x8896)+(x8897*x8897)+(((-2.0)*x8896*x8897))+(r02*r02))),-1);
if(!x8899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8898.value)+(((1.5707963267949)*(x8899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8900=IKsin(j4);
IkReal x8901=IKcos(j4);
IkReal x8902=(gconst1*r11);
IkReal x8903=(gconst1*r21);
IkReal x8904=(gconst1*r01);
IkReal x8905=((1.0)*x8901);
IkReal x8906=(gconst2*x8901);
IkReal x8907=((1.0)*x8900);
evalcond[0]=((((-1.0)*gconst2*r20*x8907))+(((-1.0)*r22*x8905))+((x8900*x8903)));
evalcond[1]=(((x8900*x8902))+(((-1.0)*gconst2*r10*x8907))+(((-1.0)*r12*x8905)));
evalcond[2]=(((r00*x8906))+(((-1.0)*r02*x8907))+(((-1.0)*x8904*x8905)));
evalcond[3]=((1.0)+((x8900*x8904))+(((-1.0)*gconst2*r00*x8907))+(((-1.0)*r02*x8905)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8903*x8905))+((r20*x8906))+((cj1*sj2))+(((-1.0)*r22*x8907)));
evalcond[5]=((((-1.0)*x8902*x8905))+((r10*x8906))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8908 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8908.valid){
continue;
}
CheckValue<IkReal> x8909=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8908.value)+(((1.5707963267949)*(x8909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8910=IKsin(j4);
IkReal x8911=IKcos(j4);
IkReal x8912=(gconst1*r11);
IkReal x8913=(gconst1*r21);
IkReal x8914=(gconst1*r01);
IkReal x8915=((1.0)*x8911);
IkReal x8916=(gconst2*x8911);
IkReal x8917=((1.0)*x8910);
evalcond[0]=(((x8910*x8913))+(((-1.0)*gconst2*r20*x8917))+(((-1.0)*r22*x8915)));
evalcond[1]=(((x8910*x8912))+(((-1.0)*gconst2*r10*x8917))+(((-1.0)*r12*x8915)));
evalcond[2]=(((r00*x8916))+(((-1.0)*r02*x8917))+(((-1.0)*x8914*x8915)));
evalcond[3]=((1.0)+((x8910*x8914))+(((-1.0)*r02*x8915))+(((-1.0)*gconst2*r00*x8917)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8913*x8915))+(((-1.0)*r22*x8917))+((r20*x8916)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8917))+(((-1.0)*x8912*x8915))+((cj1*cj2))+((r10*x8916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8918=((-1.0)*r20);
IkReal x8919=x8521;
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8918),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
IkReal x8920=((-1.0)*(x8921.value));
sj5=gconst1;
cj5=gconst2;
j5=x8920;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8920;
IkReal gconst1=(r21*x8919);
IkReal gconst2=(x8918*x8919);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8922=((-1.0)*r20);
IkReal x8923=x8521;
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8922),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
IkReal x8924=((-1.0)*(x8925.value));
sj5=gconst1;
cj5=gconst2;
j5=x8924;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8924;
IkReal gconst1=(r21*x8923);
IkReal gconst2=(x8922*x8923);
IkReal x8926=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8930=IKPowWithIntegerCheck(x8926,-1);
if(!x8930.valid){
continue;
}
IkReal x8927=x8930.value;
IkReal x8928=((1.0)*x8927);
IkReal x8929=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8927))+(((-1.0)*x8928*(r01*r01)*(r21*r21)))+(((-1.0)*x8928*(r00*r00)*(r20*r20))));
j4eval[0]=x8929;
j4eval[1]=IKsign(x8929);
j4eval[2]=r02;
j4eval[3]=x8926;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8931=((-1.0)*r20);
IkReal x8932=x8521;
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8931),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
IkReal x8933=((-1.0)*(x8934.value));
sj5=gconst1;
cj5=gconst2;
j5=x8933;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8933;
IkReal gconst1=(r21*x8932);
IkReal gconst2=(x8931*x8932);
IkReal x8935=r22*r22;
IkReal x8936=(cj1*r02*sj2);
IkReal x8937=(cj2*r02*sj1);
CheckValue<IkReal> x8941=IKPowWithIntegerCheck(((-1.0)+x8935),-1);
if(!x8941.valid){
continue;
}
IkReal x8938=x8941.value;
if((((1.0)+(((-1.0)*x8935)))) < -0.00001)
continue;
IkReal x8939=IKsqrt(((1.0)+(((-1.0)*x8935))));
IkReal x8940=((1.0)*r22*x8938*x8939);
j4eval[0]=((IKabs((x8936+x8937)))+(IKabs(((((-1.0)*x8936*x8940))+(((-1.0)*x8937*x8940))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8942=(cj2*sj1);
IkReal x8943=(cj1*sj2);
IkReal x8944=(gconst2*r00);
IkReal x8945=((1.0)*gconst1*r01);
CheckValue<IkReal> x8946 = IKatan2WithCheck(IkReal((((x8942*x8944))+((x8943*x8944))+(((-1.0)*x8942*x8945))+(((-1.0)*x8943*x8945)))),IkReal((((r02*x8943))+((r02*x8942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8946.valid){
continue;
}
CheckValue<IkReal> x8947=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8946.value)+(((1.5707963267949)*(x8947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8948=IKsin(j4);
IkReal x8949=IKcos(j4);
IkReal x8950=(gconst1*r11);
IkReal x8951=(gconst1*r21);
IkReal x8952=(gconst1*r01);
IkReal x8953=((1.0)*x8949);
IkReal x8954=(gconst2*x8949);
IkReal x8955=((1.0)*x8948);
evalcond[0]=((((-1.0)*r22*x8953))+(((-1.0)*gconst2*r20*x8955))+((x8948*x8951)));
evalcond[1]=((((-1.0)*r12*x8953))+(((-1.0)*gconst2*r10*x8955))+((x8948*x8950)));
evalcond[2]=(((r00*x8954))+(((-1.0)*x8952*x8953))+(((-1.0)*r02*x8955)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8953))+(((-1.0)*gconst2*r00*x8955))+((x8948*x8952)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8951*x8953))+((cj1*sj2))+(((-1.0)*r22*x8955))+((r20*x8954)));
evalcond[5]=((((-1.0)*r12*x8955))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8954))+(((-1.0)*x8950*x8953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8956=(gconst2*r00);
IkReal x8957=(gconst1*r01);
CheckValue<IkReal> x8958=IKPowWithIntegerCheck(IKsign(((((2.0)*x8956*x8957))+(((-1.0)*(x8956*x8956)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8957*x8957))))),-1);
if(!x8958.valid){
continue;
}
CheckValue<IkReal> x8959 = IKatan2WithCheck(IkReal((x8956+(((-1.0)*x8957)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8958.value)))+(x8959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8960=IKsin(j4);
IkReal x8961=IKcos(j4);
IkReal x8962=(gconst1*r11);
IkReal x8963=(gconst1*r21);
IkReal x8964=(gconst1*r01);
IkReal x8965=((1.0)*x8961);
IkReal x8966=(gconst2*x8961);
IkReal x8967=((1.0)*x8960);
evalcond[0]=((((-1.0)*r22*x8965))+(((-1.0)*gconst2*r20*x8967))+((x8960*x8963)));
evalcond[1]=((((-1.0)*r12*x8965))+(((-1.0)*gconst2*r10*x8967))+((x8960*x8962)));
evalcond[2]=((((-1.0)*x8964*x8965))+((r00*x8966))+(((-1.0)*r02*x8967)));
evalcond[3]=((-1.0)+((x8960*x8964))+(((-1.0)*r02*x8965))+(((-1.0)*gconst2*r00*x8967)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8967))+(((-1.0)*x8963*x8965))+((r20*x8966)));
evalcond[5]=((((-1.0)*r12*x8967))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8966))+(((-1.0)*x8962*x8965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8968=((1.0)*gconst2);
CheckValue<IkReal> x8969=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8968)))),-1);
if(!x8969.valid){
continue;
}
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8969.value)))+(x8970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8971=IKsin(j4);
IkReal x8972=IKcos(j4);
IkReal x8973=(gconst1*r11);
IkReal x8974=(gconst1*r21);
IkReal x8975=(gconst1*r01);
IkReal x8976=((1.0)*x8972);
IkReal x8977=(gconst2*x8972);
IkReal x8978=((1.0)*x8971);
evalcond[0]=(((x8971*x8974))+(((-1.0)*gconst2*r20*x8978))+(((-1.0)*r22*x8976)));
evalcond[1]=(((x8971*x8973))+(((-1.0)*gconst2*r10*x8978))+(((-1.0)*r12*x8976)));
evalcond[2]=((((-1.0)*x8975*x8976))+((r00*x8977))+(((-1.0)*r02*x8978)));
evalcond[3]=((-1.0)+((x8971*x8975))+(((-1.0)*r02*x8976))+(((-1.0)*gconst2*r00*x8978)));
evalcond[4]=(((cj2*sj1))+((r20*x8977))+(((-1.0)*r22*x8978))+((cj1*sj2))+(((-1.0)*x8974*x8976)));
evalcond[5]=(((r10*x8977))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8973*x8976))+(((-1.0)*r12*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8979=((-1.0)*r20);
IkReal x8980=x8521;
CheckValue<IkReal> x8982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8979),IKFAST_ATAN2_MAGTHRESH);
if(!x8982.valid){
continue;
}
IkReal x8981=((-1.0)*(x8982.value));
sj5=gconst1;
cj5=gconst2;
j5=x8981;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8981;
IkReal gconst1=(r21*x8980);
IkReal gconst2=(x8979*x8980);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8983=((-1.0)*r20);
IkReal x8984=x8521;
CheckValue<IkReal> x8986 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8983),IKFAST_ATAN2_MAGTHRESH);
if(!x8986.valid){
continue;
}
IkReal x8985=((-1.0)*(x8986.value));
sj5=gconst1;
cj5=gconst2;
j5=x8985;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8985;
IkReal gconst1=(r21*x8984);
IkReal gconst2=(x8983*x8984);
IkReal x8987=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8991=IKPowWithIntegerCheck(x8987,-1);
if(!x8991.valid){
continue;
}
IkReal x8988=x8991.value;
IkReal x8989=((1.0)*x8988);
IkReal x8990=((((-2.0)*r10*r11*r20*r21*x8988))+(((-1.0)*x8989*(r10*r10)*(r20*r20)))+(((-1.0)*x8989*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8990;
j4eval[1]=r12;
j4eval[2]=x8987;
j4eval[3]=IKsign(x8990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8992=((-1.0)*r20);
IkReal x8993=x8521;
CheckValue<IkReal> x8995 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8992),IKFAST_ATAN2_MAGTHRESH);
if(!x8995.valid){
continue;
}
IkReal x8994=((-1.0)*(x8995.value));
sj5=gconst1;
cj5=gconst2;
j5=x8994;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8994;
IkReal gconst1=(r21*x8993);
IkReal gconst2=(x8992*x8993);
IkReal x8996=r22*r22;
IkReal x8997=(cj1*r12*sj2);
IkReal x8998=(cj2*r12*sj1);
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(((-1.0)+x8996),-1);
if(!x9002.valid){
continue;
}
IkReal x8999=x9002.value;
if((((1.0)+(((-1.0)*x8996)))) < -0.00001)
continue;
IkReal x9000=IKsqrt(((1.0)+(((-1.0)*x8996))));
IkReal x9001=((1.0)*r22*x8999*x9000);
j4eval[0]=((IKabs(((((-1.0)*x8998*x9001))+(((-1.0)*x8997*x9001)))))+(IKabs((x8998+x8997))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9003=((1.0)*gconst1);
IkReal x9004=(cj2*sj1);
IkReal x9005=(gconst2*r10);
IkReal x9006=(cj1*sj2);
CheckValue<IkReal> x9007 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9003*x9006))+(((-1.0)*r11*x9003*x9004))+((x9005*x9006))+((x9004*x9005)))),IkReal((((r12*x9006))+((r12*x9004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9007.valid){
continue;
}
CheckValue<IkReal> x9008=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9003)))),-1);
if(!x9008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9007.value)+(((1.5707963267949)*(x9008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9009=IKsin(j4);
IkReal x9010=IKcos(j4);
IkReal x9011=((1.0)*x9010);
IkReal x9012=(gconst2*x9010);
IkReal x9013=(gconst1*x9009);
IkReal x9014=((1.0)*x9009);
evalcond[0]=((((-1.0)*gconst2*r20*x9014))+(((-1.0)*r22*x9011))+((r21*x9013)));
evalcond[1]=((((-1.0)*r02*x9011))+((r01*x9013))+(((-1.0)*gconst2*r00*x9014)));
evalcond[2]=((((-1.0)*gconst1*r11*x9011))+(((-1.0)*r12*x9014))+((r10*x9012)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9011))+(((-1.0)*gconst2*r10*x9014))+((r11*x9013)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9014))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9011))+((r20*x9012)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9014))+((r00*x9012))+(((-1.0)*gconst1*r01*x9011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9015=(gconst1*r11);
IkReal x9016=(gconst2*r10);
CheckValue<IkReal> x9017=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9015*x9015)))+(((-1.0)*(x9016*x9016)))+(((-1.0)*(r12*r12)))+(((2.0)*x9015*x9016)))),-1);
if(!x9017.valid){
continue;
}
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(((((-1.0)*x9015))+x9016)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9017.value)))+(x9018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9019=IKsin(j4);
IkReal x9020=IKcos(j4);
IkReal x9021=((1.0)*x9020);
IkReal x9022=(gconst2*x9020);
IkReal x9023=(gconst1*x9019);
IkReal x9024=((1.0)*x9019);
evalcond[0]=((((-1.0)*gconst2*r20*x9024))+((r21*x9023))+(((-1.0)*r22*x9021)));
evalcond[1]=((((-1.0)*gconst2*r00*x9024))+((r01*x9023))+(((-1.0)*r02*x9021)));
evalcond[2]=((((-1.0)*r12*x9024))+(((-1.0)*gconst1*r11*x9021))+((r10*x9022)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9021))+(((-1.0)*gconst2*r10*x9024))+((r11*x9023)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9021))+(((-1.0)*r22*x9024))+((r20*x9022)));
evalcond[5]=(((r00*x9022))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9021))+(((-1.0)*r02*x9024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9025 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9025.valid){
continue;
}
CheckValue<IkReal> x9026=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9025.value)+(((1.5707963267949)*(x9026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9027=IKsin(j4);
IkReal x9028=IKcos(j4);
IkReal x9029=((1.0)*x9028);
IkReal x9030=(gconst2*x9028);
IkReal x9031=(gconst1*x9027);
IkReal x9032=((1.0)*x9027);
evalcond[0]=((((-1.0)*gconst2*r20*x9032))+((r21*x9031))+(((-1.0)*r22*x9029)));
evalcond[1]=(((r01*x9031))+(((-1.0)*r02*x9029))+(((-1.0)*gconst2*r00*x9032)));
evalcond[2]=((((-1.0)*r12*x9032))+(((-1.0)*gconst1*r11*x9029))+((r10*x9030)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9029))+(((-1.0)*gconst2*r10*x9032))+((r11*x9031)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9029))+(((-1.0)*r22*x9032))+((r20*x9030)));
evalcond[5]=(((r00*x9030))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9029))+(((-1.0)*r02*x9032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9033=((-1.0)*r20);
IkReal x9034=x8521;
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9033),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
IkReal x9035=((-1.0)*(x9036.value));
sj5=gconst1;
cj5=gconst2;
j5=x9035;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9035;
IkReal gconst1=(r21*x9034);
IkReal gconst2=(x9033*x9034);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9037=((-1.0)*r20);
IkReal x9038=x8521;
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9037),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
IkReal x9039=((-1.0)*(x9040.value));
sj5=gconst1;
cj5=gconst2;
j5=x9039;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9039;
IkReal gconst1=(r21*x9038);
IkReal gconst2=(x9037*x9038);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9041=((-1.0)*r20);
IkReal x9042=x8521;
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9041),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
IkReal x9043=((-1.0)*(x9044.value));
sj5=gconst1;
cj5=gconst2;
j5=x9043;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9043;
IkReal gconst1=(r21*x9042);
IkReal gconst2=(x9041*x9042);
IkReal x9045=r22*r22;
IkReal x9046=(cj1*r12*sj2);
IkReal x9047=(cj2*r12*sj1);
CheckValue<IkReal> x9051=IKPowWithIntegerCheck(((-1.0)+x9045),-1);
if(!x9051.valid){
continue;
}
IkReal x9048=x9051.value;
if((((1.0)+(((-1.0)*x9045)))) < -0.00001)
continue;
IkReal x9049=IKsqrt(((1.0)+(((-1.0)*x9045))));
IkReal x9050=((1.0)*r22*x9048*x9049);
j4eval[0]=((IKabs((x9047+x9046)))+(IKabs(((((-1.0)*x9046*x9050))+(((-1.0)*x9047*x9050))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9052=((1.0)*gconst1);
IkReal x9053=(cj2*sj1);
IkReal x9054=(gconst2*r10);
IkReal x9055=(cj1*sj2);
CheckValue<IkReal> x9056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9052))+(((-1.0)*gconst2*r01)))),-1);
if(!x9056.valid){
continue;
}
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal((((x9053*x9054))+((x9054*x9055))+(((-1.0)*r11*x9052*x9055))+(((-1.0)*r11*x9052*x9053)))),IkReal((((r12*x9053))+((r12*x9055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9056.value)))+(x9057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9058=IKsin(j4);
IkReal x9059=IKcos(j4);
IkReal x9060=((1.0)*x9059);
IkReal x9061=(gconst2*x9059);
IkReal x9062=(gconst1*x9058);
IkReal x9063=((1.0)*x9058);
evalcond[0]=((((-1.0)*gconst2*r20*x9063))+((r21*x9062))+(((-1.0)*r22*x9060)));
evalcond[1]=(((r01*x9062))+(((-1.0)*gconst2*r00*x9063))+(((-1.0)*r02*x9060)));
evalcond[2]=(((r10*x9061))+(((-1.0)*gconst1*r11*x9060))+(((-1.0)*r12*x9063)));
evalcond[3]=((1.0)+((r11*x9062))+(((-1.0)*gconst2*r10*x9063))+(((-1.0)*r12*x9060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9060))+((r20*x9061))+(((-1.0)*r22*x9063)));
evalcond[5]=(((r00*x9061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9063))+(((-1.0)*gconst1*r01*x9060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9064=(gconst1*r11);
IkReal x9065=(gconst2*r10);
CheckValue<IkReal> x9066=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9064*x9065))+(x9064*x9064)+(x9065*x9065))),-1);
if(!x9066.valid){
continue;
}
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal((x9065+(((-1.0)*x9064)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9066.value)))+(x9067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9068=IKsin(j4);
IkReal x9069=IKcos(j4);
IkReal x9070=((1.0)*x9069);
IkReal x9071=(gconst2*x9069);
IkReal x9072=(gconst1*x9068);
IkReal x9073=((1.0)*x9068);
evalcond[0]=(((r21*x9072))+(((-1.0)*r22*x9070))+(((-1.0)*gconst2*r20*x9073)));
evalcond[1]=((((-1.0)*r02*x9070))+(((-1.0)*gconst2*r00*x9073))+((r01*x9072)));
evalcond[2]=((((-1.0)*gconst1*r11*x9070))+(((-1.0)*r12*x9073))+((r10*x9071)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9073))+(((-1.0)*r12*x9070))+((r11*x9072)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9070))+((r20*x9071))+((cj1*sj2))+(((-1.0)*r22*x9073)));
evalcond[5]=((((-1.0)*r02*x9073))+(((-1.0)*gconst1*r01*x9070))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9074=((1.0)*gconst2);
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
CheckValue<IkReal> x9076=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9074)))),-1);
if(!x9076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9075.value)+(((1.5707963267949)*(x9076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9077=IKsin(j4);
IkReal x9078=IKcos(j4);
IkReal x9079=((1.0)*x9078);
IkReal x9080=(gconst2*x9078);
IkReal x9081=(gconst1*x9077);
IkReal x9082=((1.0)*x9077);
evalcond[0]=((((-1.0)*gconst2*r20*x9082))+(((-1.0)*r22*x9079))+((r21*x9081)));
evalcond[1]=((((-1.0)*gconst2*r00*x9082))+(((-1.0)*r02*x9079))+((r01*x9081)));
evalcond[2]=((((-1.0)*gconst1*r11*x9079))+((r10*x9080))+(((-1.0)*r12*x9082)));
evalcond[3]=((1.0)+((r11*x9081))+(((-1.0)*r12*x9079))+(((-1.0)*gconst2*r10*x9082)));
evalcond[4]=(((cj2*sj1))+((r20*x9080))+(((-1.0)*gconst1*r21*x9079))+((cj1*sj2))+(((-1.0)*r22*x9082)));
evalcond[5]=((((-1.0)*gconst1*r01*x9079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9080))+(((-1.0)*r02*x9082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9083=((-1.0)*r20);
IkReal x9084=((-1.0)*r21);
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(x9084),IkReal(x9083),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9085=((-1.0)*(x9086.value));
sj5=gconst1;
cj5=gconst2;
j5=x9085;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9083);
rxp0_2=(py*r00);
rxp1_0=(py*x9084);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9085;
IkReal gconst1=r21;
IkReal gconst2=x9083;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9087=((-1.0)*r20);
IkReal x9088=((-1.0)*r21);
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal(x9088),IkReal(x9087),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
IkReal x9089=((-1.0)*(x9090.value));
sj5=gconst1;
cj5=gconst2;
j5=x9089;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9087);
rxp0_2=(py*r00);
rxp1_0=(py*x9088);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9089;
IkReal gconst1=r21;
IkReal gconst2=x9087;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9091=((-1.0)*r20);
IkReal x9092=((-1.0)*r21);
CheckValue<IkReal> x9094 = IKatan2WithCheck(IkReal(x9092),IkReal(x9091),IKFAST_ATAN2_MAGTHRESH);
if(!x9094.valid){
continue;
}
IkReal x9093=((-1.0)*(x9094.value));
sj5=gconst1;
cj5=gconst2;
j5=x9093;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9091);
rxp0_2=(py*r00);
rxp1_0=(py*x9092);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9093;
IkReal gconst1=r21;
IkReal gconst2=x9091;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9097.valid){
continue;
}
IkReal x9095=x9097.value;
IkReal x9096=(cj0*x9095);
cj4array[0]=((((-1.0)*cj1*cj2*x9096))+((sj1*sj2*x9096)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9098=IKsin(j4);
IkReal x9099=IKcos(j4);
IkReal x9100=(gconst2*r20);
IkReal x9101=(gconst1*x9098);
IkReal x9102=((1.0)*x9099);
IkReal x9103=((1.0)*x9098);
evalcond[0]=((-1.0)*r12*x9098);
evalcond[1]=((((-1.0)*r12*x9102))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9100*x9103))+((r21*x9101)));
evalcond[3]=((((-1.0)*gconst2*r00*x9103))+((r01*x9101)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9102))+((x9099*x9100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9106=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9106.valid){
continue;
}
IkReal x9104=x9106.value;
IkReal x9105=((1.0)*x9104);
cj4array[0]=((((-1.0)*cj2*sj1*x9105))+(((-1.0)*cj1*sj2*x9105)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9107=IKsin(j4);
IkReal x9108=IKcos(j4);
IkReal x9109=(gconst2*r00);
IkReal x9110=(gconst1*r01);
IkReal x9111=((1.0)*cj0);
IkReal x9112=((1.0)*x9108);
IkReal x9113=((1.0)*x9107);
evalcond[0]=((-1.0)*r12*x9107);
evalcond[1]=((((-1.0)*x9111))+(((-1.0)*r12*x9112)));
evalcond[2]=(((gconst1*r21*x9107))+(((-1.0)*gconst2*r20*x9113)));
evalcond[3]=((((-1.0)*x9109*x9113))+((x9107*x9110)));
evalcond[4]=(((x9108*x9109))+(((-1.0)*sj1*sj2*x9111))+(((-1.0)*x9110*x9112))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9114=IKPowWithIntegerCheck(r12,-1);
if(!x9114.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9114.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9115=IKsin(j4);
IkReal x9116=IKcos(j4);
IkReal x9117=(gconst2*x9116);
IkReal x9118=(gconst1*x9115);
IkReal x9119=((1.0)*gconst1*x9116);
IkReal x9120=((1.0)*gconst2*x9115);
evalcond[0]=((-1.0)*r12*x9115);
evalcond[1]=(((r21*x9118))+(((-1.0)*r20*x9120)));
evalcond[2]=(((r01*x9118))+(((-1.0)*r00*x9120)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9117))+(((-1.0)*r21*x9119)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r00*x9117))+((cj0*cj1*cj2))+(((-1.0)*r01*x9119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9121=(cj2*sj1);
IkReal x9122=(cj1*sj2);
IkReal x9123=(gconst1*r21);
IkReal x9124=((1.0)*gconst2*r20);
CheckValue<IkReal> x9125 = IKatan2WithCheck(IkReal((((r22*x9121))+((r22*x9122)))),IkReal((((x9122*x9123))+(((-1.0)*x9121*x9124))+(((-1.0)*x9122*x9124))+((x9121*x9123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9125.valid){
continue;
}
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(IKsign(((x9123*x9123)+(r22*r22)+(((-2.0)*gconst2*r20*x9123))+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9125.value)+(((1.5707963267949)*(x9126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9127=IKsin(j4);
IkReal x9128=IKcos(j4);
IkReal x9129=(cj1*cj2);
IkReal x9130=(gconst1*r11);
IkReal x9131=(gconst1*r21);
IkReal x9132=(gconst1*r01);
IkReal x9133=((1.0)*cj0);
IkReal x9134=(sj1*sj2);
IkReal x9135=((1.0)*x9128);
IkReal x9136=(gconst2*x9128);
IkReal x9137=((1.0)*x9127);
evalcond[0]=((((-1.0)*r22*x9135))+((x9127*x9131))+(((-1.0)*gconst2*r20*x9137)));
evalcond[1]=(sj0+(((-1.0)*r02*x9135))+(((-1.0)*gconst2*r00*x9137))+((x9127*x9132)));
evalcond[2]=((((-1.0)*gconst2*r10*x9137))+(((-1.0)*r12*x9135))+(((-1.0)*x9133))+((x9127*x9130)));
evalcond[3]=(((r20*x9136))+((cj2*sj1))+(((-1.0)*x9131*x9135))+((cj1*sj2))+(((-1.0)*r22*x9137)));
evalcond[4]=(((cj0*x9129))+(((-1.0)*x9133*x9134))+(((-1.0)*r02*x9137))+(((-1.0)*x9132*x9135))+((r00*x9136)));
evalcond[5]=((((-1.0)*sj0*x9134))+((r10*x9136))+(((-1.0)*x9130*x9135))+(((-1.0)*r12*x9137))+((sj0*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9138=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9138.valid){
continue;
}
CheckValue<IkReal> x9139 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9138.value)))+(x9139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9140=IKsin(j4);
IkReal x9141=IKcos(j4);
IkReal x9142=(cj1*cj2);
IkReal x9143=(gconst1*r11);
IkReal x9144=(gconst1*r21);
IkReal x9145=(gconst1*r01);
IkReal x9146=((1.0)*cj0);
IkReal x9147=(sj1*sj2);
IkReal x9148=((1.0)*x9141);
IkReal x9149=(gconst2*x9141);
IkReal x9150=((1.0)*x9140);
evalcond[0]=((((-1.0)*gconst2*r20*x9150))+((x9140*x9144))+(((-1.0)*r22*x9148)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9150))+((x9140*x9145))+(((-1.0)*r02*x9148)));
evalcond[2]=((((-1.0)*x9146))+((x9140*x9143))+(((-1.0)*gconst2*r10*x9150))+(((-1.0)*r12*x9148)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9149))+(((-1.0)*r22*x9150))+(((-1.0)*x9144*x9148)));
evalcond[4]=((((-1.0)*r02*x9150))+((r00*x9149))+(((-1.0)*x9146*x9147))+((cj0*x9142))+(((-1.0)*x9145*x9148)));
evalcond[5]=(((sj0*x9142))+((r10*x9149))+(((-1.0)*r12*x9150))+(((-1.0)*sj0*x9147))+(((-1.0)*x9143*x9148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9151=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9151.valid){
continue;
}
CheckValue<IkReal> x9152 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9151.value)))+(x9152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9153=IKsin(j4);
IkReal x9154=IKcos(j4);
IkReal x9155=(cj1*cj2);
IkReal x9156=(gconst1*r11);
IkReal x9157=(gconst1*r21);
IkReal x9158=(gconst1*r01);
IkReal x9159=((1.0)*cj0);
IkReal x9160=(sj1*sj2);
IkReal x9161=((1.0)*x9154);
IkReal x9162=(gconst2*x9154);
IkReal x9163=((1.0)*x9153);
evalcond[0]=((((-1.0)*r22*x9161))+((x9153*x9157))+(((-1.0)*gconst2*r20*x9163)));
evalcond[1]=(sj0+(((-1.0)*r02*x9161))+((x9153*x9158))+(((-1.0)*gconst2*r00*x9163)));
evalcond[2]=((((-1.0)*r12*x9161))+(((-1.0)*gconst2*r10*x9163))+((x9153*x9156))+(((-1.0)*x9159)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9157*x9161))+(((-1.0)*r22*x9163))+((cj1*sj2))+((r20*x9162)));
evalcond[4]=(((r00*x9162))+(((-1.0)*x9159*x9160))+((cj0*x9155))+(((-1.0)*r02*x9163))+(((-1.0)*x9158*x9161)));
evalcond[5]=((((-1.0)*sj0*x9160))+(((-1.0)*x9156*x9161))+(((-1.0)*r12*x9163))+((r10*x9162))+((sj0*x9155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9164=((-1.0)*r20);
IkReal x9165=x8521;
CheckValue<IkReal> x9167 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9164),IKFAST_ATAN2_MAGTHRESH);
if(!x9167.valid){
continue;
}
IkReal x9166=((-1.0)*(x9167.value));
sj5=gconst1;
cj5=gconst2;
j5=x9166;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9166;
IkReal gconst1=(r21*x9165);
IkReal gconst2=(x9164*x9165);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9168=((-1.0)*r20);
IkReal x9169=x8521;
CheckValue<IkReal> x9171 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9168),IKFAST_ATAN2_MAGTHRESH);
if(!x9171.valid){
continue;
}
IkReal x9170=((-1.0)*(x9171.value));
sj5=gconst1;
cj5=gconst2;
j5=x9170;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9170;
IkReal gconst1=(r21*x9169);
IkReal gconst2=(x9168*x9169);
CheckValue<IkReal> x9179=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9179.valid){
continue;
}
IkReal x9172=x9179.value;
IkReal x9173=(sj3*x9172);
IkReal x9174=(r11*x9173);
IkReal x9175=(r00*x9173);
IkReal x9176=(r01*x9173);
IkReal x9177=(r10*x9173);
IkReal x9178=(r20*r21*x9173);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9175*(r20*r20)))+((r01*x9174*(r21*r21)))+((r10*r20*r21*x9176))+((r00*r20*r21*x9174))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9180=gconst1*gconst1;
IkReal x9181=gconst2*gconst2;
IkReal x9182=((1.0)*cj3);
IkReal x9183=(gconst2*r10);
IkReal x9184=(r01*sj3);
IkReal x9185=(gconst1*r00*sj3);
IkReal x9186=(gconst1*gconst2*r11);
IkReal x9187=(r10*x9181);
IkReal x9188=(r11*x9180);
CheckValue<IkReal> x9189 = IKatan2WithCheck(IkReal((((r12*x9185))+((gconst2*r12*x9184)))),IkReal((((r00*sj3*x9188))+(((-1.0)*x9183*x9185))+((x9184*x9186))+(((-1.0)*x9184*x9187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9189.valid){
continue;
}
CheckValue<IkReal> x9190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9182*x9188))+((cj3*gconst1*r01*x9183))+(((-1.0)*r02*r12*x9182))+(((-1.0)*r00*x9182*x9187))+((cj3*r00*x9186)))),-1);
if(!x9190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9189.value)+(((1.5707963267949)*(x9190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9191=IKsin(j4);
IkReal x9192=IKcos(j4);
IkReal x9193=(cj2*sj1);
IkReal x9194=(cj1*sj2);
IkReal x9195=(gconst1*sj3);
IkReal x9196=(cj3*gconst1);
IkReal x9197=(sj1*sj2);
IkReal x9198=(cj3*gconst2);
IkReal x9199=(cj1*cj2);
IkReal x9200=(gconst2*sj3);
IkReal x9201=((1.0)*x9192);
IkReal x9202=((1.0)*x9191);
IkReal x9203=(gconst1*x9191);
IkReal x9204=(cj3*x9191);
IkReal x9205=(x9193+x9194);
IkReal x9206=(x9192*x9200);
evalcond[0]=((((-1.0)*gconst2*r20*x9202))+((r21*x9203))+(((-1.0)*r22*x9201)));
evalcond[1]=(((r11*x9203))+(((-1.0)*r12*x9201))+(((-1.0)*gconst2*r10*x9202)));
evalcond[2]=((1.0)+((r01*x9203))+(((-1.0)*r02*x9201))+(((-1.0)*gconst2*r00*x9202)));
evalcond[3]=(((r01*x9200))+((r00*x9195))+((r02*x9204))+((r01*x9192*x9196))+(((-1.0)*r00*x9198*x9201)));
evalcond[4]=(((r01*x9198))+((r00*x9206))+((r00*x9196))+(((-1.0)*r01*x9195*x9201))+(((-1.0)*r02*sj3*x9202)));
evalcond[5]=(x9205+((r22*x9204))+((r21*x9200))+((r21*x9192*x9196))+((r20*x9195))+(((-1.0)*r20*x9198*x9201)));
evalcond[6]=(((r10*x9206))+x9205+(((-1.0)*r12*sj3*x9202))+((r10*x9196))+(((-1.0)*r11*x9195*x9201))+((r11*x9198)));
evalcond[7]=((((-1.0)*r10*x9198*x9201))+((r11*x9200))+x9199+((r10*x9195))+((r12*x9204))+((r11*x9192*x9196))+(((-1.0)*x9197)));
evalcond[8]=(((r20*x9206))+(((-1.0)*r21*x9195*x9201))+x9197+((r21*x9198))+(((-1.0)*r22*sj3*x9202))+((r20*x9196))+(((-1.0)*x9199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9207=gconst2*gconst2;
IkReal x9208=gconst1*gconst1;
IkReal x9209=(gconst1*r00);
IkReal x9210=(r11*sj3);
IkReal x9211=((1.0)*gconst2);
IkReal x9212=(cj3*r12);
IkReal x9213=(cj3*r11);
IkReal x9214=(gconst2*r01);
IkReal x9215=(cj3*r10);
IkReal x9216=(r10*sj3);
CheckValue<IkReal> x9217 = IKatan2WithCheck(IkReal((((x9212*x9214))+((x9209*x9212)))),IkReal((((gconst1*x9213*x9214))+(((-1.0)*r01*x9207*x9215))+(((-1.0)*x9209*x9211*x9215))+((r00*x9208*x9213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9217.valid){
continue;
}
CheckValue<IkReal> x9218=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9209*x9210*x9211))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9211*x9216))+((r00*x9207*x9216))+((r01*x9208*x9210)))),-1);
if(!x9218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9217.value)+(((1.5707963267949)*(x9218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9219=IKsin(j4);
IkReal x9220=IKcos(j4);
IkReal x9221=(cj2*sj1);
IkReal x9222=(cj1*sj2);
IkReal x9223=(gconst1*sj3);
IkReal x9224=(cj3*gconst1);
IkReal x9225=(sj1*sj2);
IkReal x9226=(cj3*gconst2);
IkReal x9227=(cj1*cj2);
IkReal x9228=(gconst2*sj3);
IkReal x9229=((1.0)*x9220);
IkReal x9230=((1.0)*x9219);
IkReal x9231=(gconst1*x9219);
IkReal x9232=(cj3*x9219);
IkReal x9233=(x9222+x9221);
IkReal x9234=(x9220*x9228);
evalcond[0]=(((r21*x9231))+(((-1.0)*gconst2*r20*x9230))+(((-1.0)*r22*x9229)));
evalcond[1]=((((-1.0)*gconst2*r10*x9230))+(((-1.0)*r12*x9229))+((r11*x9231)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9229))+(((-1.0)*gconst2*r00*x9230))+((r01*x9231)));
evalcond[3]=(((r00*x9223))+((r01*x9228))+((r02*x9232))+((r01*x9220*x9224))+(((-1.0)*r00*x9226*x9229)));
evalcond[4]=(((r00*x9224))+((r01*x9226))+(((-1.0)*r02*sj3*x9230))+((r00*x9234))+(((-1.0)*r01*x9223*x9229)));
evalcond[5]=(((r21*x9220*x9224))+((r20*x9223))+x9233+(((-1.0)*r20*x9226*x9229))+((r21*x9228))+((r22*x9232)));
evalcond[6]=(x9233+((r11*x9226))+(((-1.0)*r11*x9223*x9229))+((r10*x9234))+(((-1.0)*r12*sj3*x9230))+((r10*x9224)));
evalcond[7]=(x9227+((r11*x9228))+((r11*x9220*x9224))+(((-1.0)*r10*x9226*x9229))+(((-1.0)*x9225))+((r12*x9232))+((r10*x9223)));
evalcond[8]=(((r20*x9224))+x9225+((r21*x9226))+(((-1.0)*r21*x9223*x9229))+(((-1.0)*r22*sj3*x9230))+((r20*x9234))+(((-1.0)*x9227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9235 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9235.valid){
continue;
}
CheckValue<IkReal> x9236=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9235.value)+(((1.5707963267949)*(x9236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9237=IKsin(j4);
IkReal x9238=IKcos(j4);
IkReal x9239=(cj2*sj1);
IkReal x9240=(cj1*sj2);
IkReal x9241=(gconst1*sj3);
IkReal x9242=(cj3*gconst1);
IkReal x9243=(sj1*sj2);
IkReal x9244=(cj3*gconst2);
IkReal x9245=(cj1*cj2);
IkReal x9246=(gconst2*sj3);
IkReal x9247=((1.0)*x9238);
IkReal x9248=((1.0)*x9237);
IkReal x9249=(gconst1*x9237);
IkReal x9250=(cj3*x9237);
IkReal x9251=(x9240+x9239);
IkReal x9252=(x9238*x9246);
evalcond[0]=((((-1.0)*r22*x9247))+((r21*x9249))+(((-1.0)*gconst2*r20*x9248)));
evalcond[1]=((((-1.0)*gconst2*r10*x9248))+(((-1.0)*r12*x9247))+((r11*x9249)));
evalcond[2]=((1.0)+((r01*x9249))+(((-1.0)*r02*x9247))+(((-1.0)*gconst2*r00*x9248)));
evalcond[3]=(((r01*x9238*x9242))+(((-1.0)*r00*x9244*x9247))+((r02*x9250))+((r01*x9246))+((r00*x9241)));
evalcond[4]=(((r01*x9244))+((r00*x9252))+((r00*x9242))+(((-1.0)*r01*x9241*x9247))+(((-1.0)*r02*sj3*x9248)));
evalcond[5]=(x9251+((r21*x9246))+((r22*x9250))+(((-1.0)*r20*x9244*x9247))+((r21*x9238*x9242))+((r20*x9241)));
evalcond[6]=((((-1.0)*r11*x9241*x9247))+x9251+((r10*x9252))+(((-1.0)*r12*sj3*x9248))+((r10*x9242))+((r11*x9244)));
evalcond[7]=(x9245+(((-1.0)*r10*x9244*x9247))+((r10*x9241))+((r12*x9250))+((r11*x9246))+(((-1.0)*x9243))+((r11*x9238*x9242)));
evalcond[8]=((((-1.0)*r21*x9241*x9247))+x9243+((r21*x9244))+(((-1.0)*r22*sj3*x9248))+((r20*x9242))+((r20*x9252))+(((-1.0)*x9245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9253=((-1.0)*r20);
IkReal x9254=x8521;
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9253),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
IkReal x9255=((-1.0)*(x9256.value));
sj5=gconst1;
cj5=gconst2;
j5=x9255;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9255;
IkReal gconst1=(r21*x9254);
IkReal gconst2=(x9253*x9254);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9257=((-1.0)*r20);
IkReal x9258=x8521;
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9257),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
IkReal x9259=((-1.0)*(x9260.value));
sj5=gconst1;
cj5=gconst2;
j5=x9259;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9259;
IkReal gconst1=(r21*x9258);
IkReal gconst2=(x9257*x9258);
CheckValue<IkReal> x9268=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9268.valid){
continue;
}
IkReal x9261=x9268.value;
IkReal x9262=(sj3*x9261);
IkReal x9263=(r11*x9262);
IkReal x9264=(r00*x9262);
IkReal x9265=(r01*x9262);
IkReal x9266=(r10*x9262);
IkReal x9267=(r20*r21*x9262);
j4eval[0]=IKsign((((r01*x9263*(r21*r21)))+((r02*r12*sj3))+((r10*r20*r21*x9265))+((r00*r20*r21*x9263))+((r10*x9264*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9269=gconst1*gconst1;
IkReal x9270=gconst2*gconst2;
IkReal x9271=((1.0)*cj3);
IkReal x9272=(gconst2*r10);
IkReal x9273=(r01*sj3);
IkReal x9274=(gconst1*r00*sj3);
IkReal x9275=(gconst1*gconst2*r11);
IkReal x9276=(r10*x9270);
IkReal x9277=(r11*x9269);
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal((((r12*x9274))+((gconst2*r12*x9273)))),IkReal(((((-1.0)*x9272*x9274))+((x9273*x9275))+(((-1.0)*x9273*x9276))+((r00*sj3*x9277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
CheckValue<IkReal> x9279=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9275))+((cj3*gconst1*r01*x9272))+(((-1.0)*r02*r12*x9271))+(((-1.0)*r00*x9271*x9276))+(((-1.0)*r01*x9271*x9277)))),-1);
if(!x9279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9278.value)+(((1.5707963267949)*(x9279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9280=IKsin(j4);
IkReal x9281=IKcos(j4);
IkReal x9282=(sj1*sj2);
IkReal x9283=(gconst1*sj3);
IkReal x9284=(cj3*gconst1);
IkReal x9285=(cj3*gconst2);
IkReal x9286=((1.0)*cj2);
IkReal x9287=(cj1*sj2);
IkReal x9288=(gconst2*sj3);
IkReal x9289=(cj1*x9286);
IkReal x9290=((1.0)*x9281);
IkReal x9291=((1.0)*x9280);
IkReal x9292=(gconst1*x9280);
IkReal x9293=(cj3*x9280);
IkReal x9294=(x9281*x9288);
evalcond[0]=((((-1.0)*gconst2*r20*x9291))+(((-1.0)*r22*x9290))+((r21*x9292)));
evalcond[1]=(((r11*x9292))+(((-1.0)*gconst2*r10*x9291))+(((-1.0)*r12*x9290)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9291))+((r01*x9292))+(((-1.0)*r02*x9290)));
evalcond[3]=(((r02*x9293))+(((-1.0)*r00*x9285*x9290))+((r01*x9288))+((r00*x9283))+((r01*x9281*x9284)));
evalcond[4]=((((-1.0)*r02*sj3*x9291))+((r00*x9294))+((r01*x9285))+((r00*x9284))+(((-1.0)*r01*x9283*x9290)));
evalcond[5]=(((cj2*sj1))+((r22*x9293))+x9287+((r20*x9283))+((r21*x9288))+((r21*x9281*x9284))+(((-1.0)*r20*x9285*x9290)));
evalcond[6]=(((r11*x9288))+(((-1.0)*x9289))+x9282+((r11*x9281*x9284))+((r10*x9283))+(((-1.0)*r10*x9285*x9290))+((r12*x9293)));
evalcond[7]=((((-1.0)*r22*sj3*x9291))+(((-1.0)*x9289))+(((-1.0)*r21*x9283*x9290))+x9282+((r20*x9284))+((r20*x9294))+((r21*x9285)));
evalcond[8]=((((-1.0)*sj1*x9286))+((r11*x9285))+(((-1.0)*r12*sj3*x9291))+((r10*x9294))+((r10*x9284))+(((-1.0)*x9287))+(((-1.0)*r11*x9283*x9290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9295=gconst2*gconst2;
IkReal x9296=gconst1*gconst1;
IkReal x9297=(gconst1*r00);
IkReal x9298=(r11*sj3);
IkReal x9299=((1.0)*gconst2);
IkReal x9300=(cj3*r12);
IkReal x9301=(cj3*r11);
IkReal x9302=(gconst2*r01);
IkReal x9303=(cj3*r10);
IkReal x9304=(r10*sj3);
CheckValue<IkReal> x9305=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9299*x9304))+(((-1.0)*x9297*x9298*x9299))+((r00*x9295*x9304))+((r01*x9296*x9298)))),-1);
if(!x9305.valid){
continue;
}
CheckValue<IkReal> x9306 = IKatan2WithCheck(IkReal((((x9297*x9300))+((x9300*x9302)))),IkReal(((((-1.0)*x9297*x9299*x9303))+((gconst1*x9301*x9302))+(((-1.0)*r01*x9295*x9303))+((r00*x9296*x9301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9305.value)))+(x9306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9307=IKsin(j4);
IkReal x9308=IKcos(j4);
IkReal x9309=(sj1*sj2);
IkReal x9310=(gconst1*sj3);
IkReal x9311=(cj3*gconst1);
IkReal x9312=(cj3*gconst2);
IkReal x9313=((1.0)*cj2);
IkReal x9314=(cj1*sj2);
IkReal x9315=(gconst2*sj3);
IkReal x9316=(cj1*x9313);
IkReal x9317=((1.0)*x9308);
IkReal x9318=((1.0)*x9307);
IkReal x9319=(gconst1*x9307);
IkReal x9320=(cj3*x9307);
IkReal x9321=(x9308*x9315);
evalcond[0]=(((r21*x9319))+(((-1.0)*r22*x9317))+(((-1.0)*gconst2*r20*x9318)));
evalcond[1]=((((-1.0)*gconst2*r10*x9318))+((r11*x9319))+(((-1.0)*r12*x9317)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9318))+((r01*x9319))+(((-1.0)*r02*x9317)));
evalcond[3]=(((r01*x9308*x9311))+((r02*x9320))+((r01*x9315))+((r00*x9310))+(((-1.0)*r00*x9312*x9317)));
evalcond[4]=((((-1.0)*r02*sj3*x9318))+((r00*x9321))+((r01*x9312))+((r00*x9311))+(((-1.0)*r01*x9310*x9317)));
evalcond[5]=(((cj2*sj1))+x9314+((r21*x9315))+((r22*x9320))+((r21*x9308*x9311))+((r20*x9310))+(((-1.0)*r20*x9312*x9317)));
evalcond[6]=(x9309+((r11*x9308*x9311))+((r12*x9320))+(((-1.0)*x9316))+(((-1.0)*r10*x9312*x9317))+((r11*x9315))+((r10*x9310)));
evalcond[7]=((((-1.0)*r21*x9310*x9317))+((r20*x9321))+x9309+((r21*x9312))+(((-1.0)*x9316))+((r20*x9311))+(((-1.0)*r22*sj3*x9318)));
evalcond[8]=((((-1.0)*r11*x9310*x9317))+((r10*x9321))+(((-1.0)*sj1*x9313))+(((-1.0)*r12*sj3*x9318))+(((-1.0)*x9314))+((r11*x9312))+((r10*x9311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9322=((1.0)*gconst2);
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9322))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
CheckValue<IkReal> x9324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9322))+(((-1.0)*gconst1*r10)))),-1);
if(!x9324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9323.value)+(((1.5707963267949)*(x9324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9325=IKsin(j4);
IkReal x9326=IKcos(j4);
IkReal x9327=(sj1*sj2);
IkReal x9328=(gconst1*sj3);
IkReal x9329=(cj3*gconst1);
IkReal x9330=(cj3*gconst2);
IkReal x9331=((1.0)*cj2);
IkReal x9332=(cj1*sj2);
IkReal x9333=(gconst2*sj3);
IkReal x9334=(cj1*x9331);
IkReal x9335=((1.0)*x9326);
IkReal x9336=((1.0)*x9325);
IkReal x9337=(gconst1*x9325);
IkReal x9338=(cj3*x9325);
IkReal x9339=(x9326*x9333);
evalcond[0]=((((-1.0)*r22*x9335))+(((-1.0)*gconst2*r20*x9336))+((r21*x9337)));
evalcond[1]=((((-1.0)*gconst2*r10*x9336))+(((-1.0)*r12*x9335))+((r11*x9337)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9335))+((r01*x9337))+(((-1.0)*gconst2*r00*x9336)));
evalcond[3]=(((r01*x9326*x9329))+((r00*x9328))+((r01*x9333))+(((-1.0)*r00*x9330*x9335))+((r02*x9338)));
evalcond[4]=(((r00*x9329))+((r01*x9330))+((r00*x9339))+(((-1.0)*r01*x9328*x9335))+(((-1.0)*r02*sj3*x9336)));
evalcond[5]=(((cj2*sj1))+((r20*x9328))+x9332+((r21*x9326*x9329))+((r22*x9338))+((r21*x9333))+(((-1.0)*r20*x9330*x9335)));
evalcond[6]=(x9327+((r11*x9333))+((r12*x9338))+((r10*x9328))+((r11*x9326*x9329))+(((-1.0)*r10*x9330*x9335))+(((-1.0)*x9334)));
evalcond[7]=((((-1.0)*r21*x9328*x9335))+((r20*x9339))+((r20*x9329))+x9327+(((-1.0)*r22*sj3*x9336))+((r21*x9330))+(((-1.0)*x9334)));
evalcond[8]=((((-1.0)*sj1*x9331))+(((-1.0)*x9332))+((r11*x9330))+(((-1.0)*r12*sj3*x9336))+((r10*x9329))+((r10*x9339))+(((-1.0)*r11*x9328*x9335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9340=((-1.0)*r20);
IkReal x9341=x8521;
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9340),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
IkReal x9342=((-1.0)*(x9343.value));
sj5=gconst1;
cj5=gconst2;
j5=x9342;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9342;
IkReal gconst1=(r21*x9341);
IkReal gconst2=(x9340*x9341);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9344=((-1.0)*r20);
IkReal x9345=x8521;
CheckValue<IkReal> x9347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9344),IKFAST_ATAN2_MAGTHRESH);
if(!x9347.valid){
continue;
}
IkReal x9346=((-1.0)*(x9347.value));
sj5=gconst1;
cj5=gconst2;
j5=x9346;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9346;
IkReal gconst1=(r21*x9345);
IkReal gconst2=(x9344*x9345);
CheckValue<IkReal> x9355=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9355.valid){
continue;
}
IkReal x9348=x9355.value;
IkReal x9349=(sj3*x9348);
IkReal x9350=(r11*x9349);
IkReal x9351=(r00*x9349);
IkReal x9352=(r01*x9349);
IkReal x9353=(r10*x9349);
IkReal x9354=(r20*r21*x9349);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9351*(r20*r20)))+((r01*x9350*(r21*r21)))+((r10*r20*r21*x9352))+((r00*r20*r21*x9350))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9356=gconst2*gconst2;
IkReal x9357=gconst1*gconst1;
IkReal x9358=((1.0)*cj3);
IkReal x9359=((1.0)*sj3);
IkReal x9360=(r11*sj3);
IkReal x9361=(r10*sj3);
IkReal x9362=(gconst1*gconst2*r00);
IkReal x9363=(gconst1*gconst2*r01);
IkReal x9364=(r00*x9356);
IkReal x9365=(r01*x9357);
CheckValue<IkReal> x9366=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9363))+(((-1.0)*r11*x9358*x9365))+((cj3*r11*x9362))+(((-1.0)*r02*r12*x9358))+(((-1.0)*r10*x9358*x9364)))),-1);
if(!x9366.valid){
continue;
}
CheckValue<IkReal> x9367 = IKatan2WithCheck(IkReal((((gconst1*r02*x9361))+((gconst2*r02*x9360)))),IkReal(((((-1.0)*r10*x9359*x9362))+(((-1.0)*r11*x9359*x9364))+((x9361*x9365))+((x9360*x9363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9366.value)))+(x9367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9368=IKsin(j4);
IkReal x9369=IKcos(j4);
IkReal x9370=(cj2*sj1);
IkReal x9371=(cj1*sj2);
IkReal x9372=(gconst1*sj3);
IkReal x9373=(cj3*gconst1);
IkReal x9374=(sj1*sj2);
IkReal x9375=(cj3*gconst2);
IkReal x9376=(cj1*cj2);
IkReal x9377=(gconst2*sj3);
IkReal x9378=((1.0)*x9369);
IkReal x9379=((1.0)*x9368);
IkReal x9380=(gconst1*x9368);
IkReal x9381=(cj3*x9368);
IkReal x9382=(x9371+x9370);
IkReal x9383=(x9369*x9377);
evalcond[0]=(((r21*x9380))+(((-1.0)*r22*x9378))+(((-1.0)*gconst2*r20*x9379)));
evalcond[1]=((((-1.0)*r02*x9378))+(((-1.0)*gconst2*r00*x9379))+((r01*x9380)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9379))+((r11*x9380))+(((-1.0)*r12*x9378)));
evalcond[3]=(((r11*x9377))+((r11*x9369*x9373))+((r12*x9381))+((r10*x9372))+(((-1.0)*r10*x9375*x9378)));
evalcond[4]=(((r10*x9383))+((r11*x9375))+(((-1.0)*r11*x9372*x9378))+(((-1.0)*r12*sj3*x9379))+((r10*x9373)));
evalcond[5]=(x9382+((r21*x9369*x9373))+((r21*x9377))+((r22*x9381))+(((-1.0)*r20*x9375*x9378))+((r20*x9372)));
evalcond[6]=(x9382+(((-1.0)*r01*x9372*x9378))+((r00*x9373))+((r00*x9383))+(((-1.0)*r02*sj3*x9379))+((r01*x9375)));
evalcond[7]=((((-1.0)*r00*x9375*x9378))+((r02*x9381))+x9376+(((-1.0)*x9374))+((r01*x9369*x9373))+((r00*x9372))+((r01*x9377)));
evalcond[8]=(x9374+(((-1.0)*r22*sj3*x9379))+((r21*x9375))+(((-1.0)*x9376))+((r20*x9383))+((r20*x9373))+(((-1.0)*r21*x9372*x9378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9384=gconst2*gconst2;
IkReal x9385=gconst1*gconst1;
IkReal x9386=(gconst2*r11);
IkReal x9387=(cj3*r02);
IkReal x9388=(gconst1*r01);
IkReal x9389=(cj3*r10);
IkReal x9390=(r10*sj3);
IkReal x9391=((1.0)*gconst1*r00);
IkReal x9392=(r01*x9385);
IkReal x9393=(r00*x9384);
CheckValue<IkReal> x9394=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9390*x9393))+(((-1.0)*gconst2*x9388*x9390))+((r11*sj3*x9392))+(((-1.0)*sj3*x9386*x9391)))),-1);
if(!x9394.valid){
continue;
}
CheckValue<IkReal> x9395 = IKatan2WithCheck(IkReal((((x9386*x9387))+((gconst1*r10*x9387)))),IkReal(((((-1.0)*cj3*r11*x9393))+((x9389*x9392))+(((-1.0)*gconst2*x9389*x9391))+((cj3*x9386*x9388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9394.value)))+(x9395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9396=IKsin(j4);
IkReal x9397=IKcos(j4);
IkReal x9398=(cj2*sj1);
IkReal x9399=(cj1*sj2);
IkReal x9400=(gconst1*sj3);
IkReal x9401=(cj3*gconst1);
IkReal x9402=(sj1*sj2);
IkReal x9403=(cj3*gconst2);
IkReal x9404=(cj1*cj2);
IkReal x9405=(gconst2*sj3);
IkReal x9406=((1.0)*x9397);
IkReal x9407=((1.0)*x9396);
IkReal x9408=(gconst1*x9396);
IkReal x9409=(cj3*x9396);
IkReal x9410=(x9399+x9398);
IkReal x9411=(x9397*x9405);
evalcond[0]=((((-1.0)*r22*x9406))+((r21*x9408))+(((-1.0)*gconst2*r20*x9407)));
evalcond[1]=(((r01*x9408))+(((-1.0)*r02*x9406))+(((-1.0)*gconst2*r00*x9407)));
evalcond[2]=((-1.0)+((r11*x9408))+(((-1.0)*gconst2*r10*x9407))+(((-1.0)*r12*x9406)));
evalcond[3]=(((r12*x9409))+((r11*x9405))+(((-1.0)*r10*x9403*x9406))+((r11*x9397*x9401))+((r10*x9400)));
evalcond[4]=((((-1.0)*r12*sj3*x9407))+((r11*x9403))+((r10*x9411))+(((-1.0)*r11*x9400*x9406))+((r10*x9401)));
evalcond[5]=(((r22*x9409))+((r21*x9397*x9401))+((r20*x9400))+((r21*x9405))+x9410+(((-1.0)*r20*x9403*x9406)));
evalcond[6]=(((r01*x9403))+(((-1.0)*r01*x9400*x9406))+((r00*x9411))+x9410+(((-1.0)*r02*sj3*x9407))+((r00*x9401)));
evalcond[7]=(((r01*x9405))+(((-1.0)*x9402))+(((-1.0)*r00*x9403*x9406))+((r02*x9409))+x9404+((r00*x9400))+((r01*x9397*x9401)));
evalcond[8]=(((r20*x9411))+(((-1.0)*x9404))+((r20*x9401))+((r21*x9403))+x9402+(((-1.0)*r21*x9400*x9406))+(((-1.0)*r22*sj3*x9407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9412 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9412.valid){
continue;
}
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9412.value)+(((1.5707963267949)*(x9413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9414=IKsin(j4);
IkReal x9415=IKcos(j4);
IkReal x9416=(cj2*sj1);
IkReal x9417=(cj1*sj2);
IkReal x9418=(gconst1*sj3);
IkReal x9419=(cj3*gconst1);
IkReal x9420=(sj1*sj2);
IkReal x9421=(cj3*gconst2);
IkReal x9422=(cj1*cj2);
IkReal x9423=(gconst2*sj3);
IkReal x9424=((1.0)*x9415);
IkReal x9425=((1.0)*x9414);
IkReal x9426=(gconst1*x9414);
IkReal x9427=(cj3*x9414);
IkReal x9428=(x9416+x9417);
IkReal x9429=(x9415*x9423);
evalcond[0]=(((r21*x9426))+(((-1.0)*gconst2*r20*x9425))+(((-1.0)*r22*x9424)));
evalcond[1]=(((r01*x9426))+(((-1.0)*r02*x9424))+(((-1.0)*gconst2*r00*x9425)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9425))+(((-1.0)*r12*x9424))+((r11*x9426)));
evalcond[3]=(((r12*x9427))+((r10*x9418))+(((-1.0)*r10*x9421*x9424))+((r11*x9415*x9419))+((r11*x9423)));
evalcond[4]=(((r10*x9419))+(((-1.0)*r12*sj3*x9425))+(((-1.0)*r11*x9418*x9424))+((r10*x9429))+((r11*x9421)));
evalcond[5]=(((r20*x9418))+(((-1.0)*r20*x9421*x9424))+((r21*x9415*x9419))+x9428+((r21*x9423))+((r22*x9427)));
evalcond[6]=(((r01*x9421))+((r00*x9429))+(((-1.0)*r01*x9418*x9424))+((r00*x9419))+x9428+(((-1.0)*r02*sj3*x9425)));
evalcond[7]=(((r01*x9423))+((r00*x9418))+(((-1.0)*r00*x9421*x9424))+(((-1.0)*x9420))+((r02*x9427))+x9422+((r01*x9415*x9419)));
evalcond[8]=(((r20*x9419))+(((-1.0)*r22*sj3*x9425))+(((-1.0)*r21*x9418*x9424))+((r20*x9429))+(((-1.0)*x9422))+x9420+((r21*x9421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9430=((-1.0)*r20);
IkReal x9431=x8521;
CheckValue<IkReal> x9433 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9430),IKFAST_ATAN2_MAGTHRESH);
if(!x9433.valid){
continue;
}
IkReal x9432=((-1.0)*(x9433.value));
sj5=gconst1;
cj5=gconst2;
j5=x9432;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9432;
IkReal gconst1=(r21*x9431);
IkReal gconst2=(x9430*x9431);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9434=((-1.0)*r20);
IkReal x9435=x8521;
CheckValue<IkReal> x9437 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9434),IKFAST_ATAN2_MAGTHRESH);
if(!x9437.valid){
continue;
}
IkReal x9436=((-1.0)*(x9437.value));
sj5=gconst1;
cj5=gconst2;
j5=x9436;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9436;
IkReal gconst1=(r21*x9435);
IkReal gconst2=(x9434*x9435);
CheckValue<IkReal> x9445=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9445.valid){
continue;
}
IkReal x9438=x9445.value;
IkReal x9439=(sj3*x9438);
IkReal x9440=(r11*x9439);
IkReal x9441=(r00*x9439);
IkReal x9442=(r01*x9439);
IkReal x9443=(r10*x9439);
IkReal x9444=(r20*r21*x9439);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9440))+((r01*x9440*(r21*r21)))+((r10*x9441*(r20*r20)))+((r10*r20*r21*x9442))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9446=gconst2*gconst2;
IkReal x9447=gconst1*gconst1;
IkReal x9448=((1.0)*cj3);
IkReal x9449=((1.0)*sj3);
IkReal x9450=(r11*sj3);
IkReal x9451=(r10*sj3);
IkReal x9452=(gconst1*gconst2*r00);
IkReal x9453=(gconst1*gconst2*r01);
IkReal x9454=(r00*x9446);
IkReal x9455=(r01*x9447);
CheckValue<IkReal> x9456 = IKatan2WithCheck(IkReal((((gconst2*r02*x9450))+((gconst1*r02*x9451)))),IkReal((((x9451*x9455))+(((-1.0)*r11*x9449*x9454))+(((-1.0)*r10*x9449*x9452))+((x9450*x9453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9456.valid){
continue;
}
CheckValue<IkReal> x9457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9448*x9454))+((cj3*r10*x9453))+(((-1.0)*r11*x9448*x9455))+(((-1.0)*r02*r12*x9448))+((cj3*r11*x9452)))),-1);
if(!x9457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9456.value)+(((1.5707963267949)*(x9457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9458=IKsin(j4);
IkReal x9459=IKcos(j4);
IkReal x9460=(sj1*sj2);
IkReal x9461=(gconst1*sj3);
IkReal x9462=(cj3*gconst1);
IkReal x9463=(cj3*gconst2);
IkReal x9464=((1.0)*cj2);
IkReal x9465=(cj1*sj2);
IkReal x9466=(gconst2*sj3);
IkReal x9467=(cj1*x9464);
IkReal x9468=((1.0)*x9459);
IkReal x9469=((1.0)*x9458);
IkReal x9470=(gconst1*x9458);
IkReal x9471=(cj3*x9458);
IkReal x9472=(x9459*x9466);
evalcond[0]=((((-1.0)*gconst2*r20*x9469))+(((-1.0)*r22*x9468))+((r21*x9470)));
evalcond[1]=(((r01*x9470))+(((-1.0)*gconst2*r00*x9469))+(((-1.0)*r02*x9468)));
evalcond[2]=((1.0)+((r11*x9470))+(((-1.0)*r12*x9468))+(((-1.0)*gconst2*r10*x9469)));
evalcond[3]=((((-1.0)*r10*x9463*x9468))+((r10*x9461))+((r11*x9459*x9462))+((r11*x9466))+((r12*x9471)));
evalcond[4]=(((r10*x9472))+((r10*x9462))+(((-1.0)*r12*sj3*x9469))+((r11*x9463))+(((-1.0)*r11*x9461*x9468)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9463*x9468))+((r22*x9471))+((r21*x9459*x9462))+((r21*x9466))+((r20*x9461))+x9465);
evalcond[6]=((((-1.0)*x9467))+((r01*x9459*x9462))+((r01*x9466))+((r00*x9461))+(((-1.0)*r00*x9463*x9468))+x9460+((r02*x9471)));
evalcond[7]=((((-1.0)*x9467))+(((-1.0)*r22*sj3*x9469))+((r21*x9463))+((r20*x9462))+x9460+((r20*x9472))+(((-1.0)*r21*x9461*x9468)));
evalcond[8]=(((r00*x9472))+((r01*x9463))+((r00*x9462))+(((-1.0)*sj1*x9464))+(((-1.0)*r02*sj3*x9469))+(((-1.0)*x9465))+(((-1.0)*r01*x9461*x9468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9473=gconst2*gconst2;
IkReal x9474=gconst1*gconst1;
IkReal x9475=(gconst2*r11);
IkReal x9476=(cj3*r02);
IkReal x9477=(gconst1*r01);
IkReal x9478=(cj3*r10);
IkReal x9479=(r10*sj3);
IkReal x9480=((1.0)*gconst1*r00);
IkReal x9481=(r01*x9474);
IkReal x9482=(r00*x9473);
CheckValue<IkReal> x9483=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9475*x9480))+(((-1.0)*gconst2*x9477*x9479))+((x9479*x9482))+((r11*sj3*x9481)))),-1);
if(!x9483.valid){
continue;
}
CheckValue<IkReal> x9484 = IKatan2WithCheck(IkReal((((x9475*x9476))+((gconst1*r10*x9476)))),IkReal(((((-1.0)*cj3*r11*x9482))+((x9478*x9481))+((cj3*x9475*x9477))+(((-1.0)*gconst2*x9478*x9480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9483.value)))+(x9484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9485=IKsin(j4);
IkReal x9486=IKcos(j4);
IkReal x9487=(sj1*sj2);
IkReal x9488=(gconst1*sj3);
IkReal x9489=(cj3*gconst1);
IkReal x9490=(cj3*gconst2);
IkReal x9491=((1.0)*cj2);
IkReal x9492=(cj1*sj2);
IkReal x9493=(gconst2*sj3);
IkReal x9494=(cj1*x9491);
IkReal x9495=((1.0)*x9486);
IkReal x9496=((1.0)*x9485);
IkReal x9497=(gconst1*x9485);
IkReal x9498=(cj3*x9485);
IkReal x9499=(x9486*x9493);
evalcond[0]=((((-1.0)*gconst2*r20*x9496))+(((-1.0)*r22*x9495))+((r21*x9497)));
evalcond[1]=((((-1.0)*r02*x9495))+(((-1.0)*gconst2*r00*x9496))+((r01*x9497)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9496))+(((-1.0)*r12*x9495))+((r11*x9497)));
evalcond[3]=(((r12*x9498))+((r11*x9486*x9489))+(((-1.0)*r10*x9490*x9495))+((r10*x9488))+((r11*x9493)));
evalcond[4]=((((-1.0)*r12*sj3*x9496))+((r10*x9499))+(((-1.0)*r11*x9488*x9495))+((r10*x9489))+((r11*x9490)));
evalcond[5]=(((cj2*sj1))+((r21*x9486*x9489))+((r22*x9498))+((r20*x9488))+x9492+(((-1.0)*r20*x9490*x9495))+((r21*x9493)));
evalcond[6]=(((r02*x9498))+((r00*x9488))+(((-1.0)*r00*x9490*x9495))+x9487+((r01*x9493))+((r01*x9486*x9489))+(((-1.0)*x9494)));
evalcond[7]=(((r20*x9489))+(((-1.0)*r21*x9488*x9495))+(((-1.0)*r22*sj3*x9496))+x9487+((r21*x9490))+((r20*x9499))+(((-1.0)*x9494)));
evalcond[8]=((((-1.0)*r01*x9488*x9495))+((r00*x9489))+((r00*x9499))+((r01*x9490))+(((-1.0)*x9492))+(((-1.0)*r02*sj3*x9496))+(((-1.0)*sj1*x9491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9500=((1.0)*gconst2);
CheckValue<IkReal> x9501 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9501.valid){
continue;
}
CheckValue<IkReal> x9502=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9500)))),-1);
if(!x9502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9501.value)+(((1.5707963267949)*(x9502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9503=IKsin(j4);
IkReal x9504=IKcos(j4);
IkReal x9505=(sj1*sj2);
IkReal x9506=(gconst1*sj3);
IkReal x9507=(cj3*gconst1);
IkReal x9508=(cj3*gconst2);
IkReal x9509=((1.0)*cj2);
IkReal x9510=(cj1*sj2);
IkReal x9511=(gconst2*sj3);
IkReal x9512=(cj1*x9509);
IkReal x9513=((1.0)*x9504);
IkReal x9514=((1.0)*x9503);
IkReal x9515=(gconst1*x9503);
IkReal x9516=(cj3*x9503);
IkReal x9517=(x9504*x9511);
evalcond[0]=(((r21*x9515))+(((-1.0)*gconst2*r20*x9514))+(((-1.0)*r22*x9513)));
evalcond[1]=((((-1.0)*r02*x9513))+((r01*x9515))+(((-1.0)*gconst2*r00*x9514)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9514))+((r11*x9515))+(((-1.0)*r12*x9513)));
evalcond[3]=(((r10*x9506))+((r11*x9504*x9507))+((r12*x9516))+((r11*x9511))+(((-1.0)*r10*x9508*x9513)));
evalcond[4]=(((r10*x9507))+(((-1.0)*r11*x9506*x9513))+((r11*x9508))+(((-1.0)*r12*sj3*x9514))+((r10*x9517)));
evalcond[5]=(((cj2*sj1))+((r21*x9511))+((r21*x9504*x9507))+((r20*x9506))+(((-1.0)*r20*x9508*x9513))+((r22*x9516))+x9510);
evalcond[6]=(((r01*x9511))+(((-1.0)*x9512))+x9505+((r01*x9504*x9507))+(((-1.0)*r00*x9508*x9513))+((r02*x9516))+((r00*x9506)));
evalcond[7]=(((r21*x9508))+(((-1.0)*r22*sj3*x9514))+((r20*x9507))+(((-1.0)*x9512))+(((-1.0)*r21*x9506*x9513))+x9505+((r20*x9517)));
evalcond[8]=((((-1.0)*x9510))+((r00*x9517))+(((-1.0)*sj1*x9509))+(((-1.0)*r01*x9506*x9513))+((r01*x9508))+((r00*x9507))+(((-1.0)*r02*sj3*x9514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9518=((-1.0)*r20);
IkReal x9519=((-1.0)*r21);
CheckValue<IkReal> x9521 = IKatan2WithCheck(IkReal(x9519),IkReal(x9518),IKFAST_ATAN2_MAGTHRESH);
if(!x9521.valid){
continue;
}
IkReal x9520=((-1.0)*(x9521.value));
sj5=gconst1;
cj5=gconst2;
j5=x9520;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9518);
rxp0_2=(py*r00);
rxp1_0=(py*x9519);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9520;
IkReal gconst1=r21;
IkReal gconst2=x9518;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9522=((-1.0)*r20);
IkReal x9523=((-1.0)*r21);
CheckValue<IkReal> x9525 = IKatan2WithCheck(IkReal(x9523),IkReal(x9522),IKFAST_ATAN2_MAGTHRESH);
if(!x9525.valid){
continue;
}
IkReal x9524=((-1.0)*(x9525.value));
sj5=gconst1;
cj5=gconst2;
j5=x9524;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9522);
rxp0_2=(py*r00);
rxp1_0=(py*x9523);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9524;
IkReal gconst1=r21;
IkReal gconst2=x9522;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9526=((-1.0)*r20);
IkReal x9527=((-1.0)*r21);
CheckValue<IkReal> x9529 = IKatan2WithCheck(IkReal(x9527),IkReal(x9526),IKFAST_ATAN2_MAGTHRESH);
if(!x9529.valid){
continue;
}
IkReal x9528=((-1.0)*(x9529.value));
sj5=gconst1;
cj5=gconst2;
j5=x9528;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9526);
rxp0_2=(py*r00);
rxp1_0=(py*x9527);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9528;
IkReal gconst1=r21;
IkReal gconst2=x9526;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9530=((-1.0)*r20);
IkReal x9531=((-1.0)*r21);
CheckValue<IkReal> x9533 = IKatan2WithCheck(IkReal(x9531),IkReal(x9530),IKFAST_ATAN2_MAGTHRESH);
if(!x9533.valid){
continue;
}
IkReal x9532=((-1.0)*(x9533.value));
sj5=gconst1;
cj5=gconst2;
j5=x9532;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9530);
rxp0_2=(py*r00);
rxp1_0=(py*x9531);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9532;
IkReal gconst1=r21;
IkReal gconst2=x9530;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9534=((-1.0)*r20);
IkReal x9535=((-1.0)*r21);
CheckValue<IkReal> x9537 = IKatan2WithCheck(IkReal(x9535),IkReal(x9534),IKFAST_ATAN2_MAGTHRESH);
if(!x9537.valid){
continue;
}
IkReal x9536=((-1.0)*(x9537.value));
sj5=gconst1;
cj5=gconst2;
j5=x9536;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9534);
rxp0_2=(py*r00);
rxp1_0=(py*x9535);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9536;
IkReal gconst1=r21;
IkReal gconst2=x9534;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9538=((-1.0)*r20);
IkReal x9539=((-1.0)*r21);
CheckValue<IkReal> x9541 = IKatan2WithCheck(IkReal(x9539),IkReal(x9538),IKFAST_ATAN2_MAGTHRESH);
if(!x9541.valid){
continue;
}
IkReal x9540=((-1.0)*(x9541.value));
sj5=gconst1;
cj5=gconst2;
j5=x9540;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9538);
rxp0_2=(py*r00);
rxp1_0=(py*x9539);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9540;
IkReal gconst1=r21;
IkReal gconst2=x9538;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9544=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9544.valid){
continue;
}
IkReal x9542=x9544.value;
IkReal x9543=((1.0)*cj0*x9542);
cj4array[0]=((((-1.0)*cj1*sj2*x9543))+(((-1.0)*cj2*sj1*x9543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9545=IKsin(j4);
IkReal x9546=IKcos(j4);
IkReal x9547=(gconst2*r20);
IkReal x9548=(gconst1*x9545);
IkReal x9549=((1.0)*x9546);
IkReal x9550=((1.0)*x9545);
evalcond[0]=((-1.0)*r12*x9545);
evalcond[1]=((((-1.0)*r12*x9549))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9548))+(((-1.0)*x9547*x9550)));
evalcond[3]=(((r01*x9548))+(((-1.0)*gconst2*r00*x9550)));
evalcond[4]=(((x9546*x9547))+(((-1.0)*gconst1*r21*x9549))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9552=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9552.valid){
continue;
}
IkReal x9551=x9552.value;
cj4array[0]=(((cj1*cj2*x9551))+(((-1.0)*sj1*sj2*x9551)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9553=IKsin(j4);
IkReal x9554=IKcos(j4);
IkReal x9555=(gconst2*r00);
IkReal x9556=(gconst1*r01);
IkReal x9557=((1.0)*x9554);
IkReal x9558=((1.0)*x9553);
evalcond[0]=((-1.0)*r12*x9553);
evalcond[1]=((((-1.0)*r12*x9557))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x9553))+(((-1.0)*gconst2*r20*x9558)));
evalcond[3]=((((-1.0)*x9555*x9558))+((x9553*x9556)));
evalcond[4]=((((-1.0)*x9556*x9557))+((x9554*x9555))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9559=IKPowWithIntegerCheck(r12,-1);
if(!x9559.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9559.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9560=IKsin(j4);
IkReal x9561=IKcos(j4);
IkReal x9562=(gconst2*x9561);
IkReal x9563=(gconst1*x9560);
IkReal x9564=((1.0)*gconst1*x9561);
IkReal x9565=((1.0)*gconst2*x9560);
evalcond[0]=((-1.0)*r12*x9560);
evalcond[1]=(((r21*x9563))+(((-1.0)*r20*x9565)));
evalcond[2]=(((r01*x9563))+(((-1.0)*r00*x9565)));
evalcond[3]=((((-1.0)*r21*x9564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9562)));
evalcond[4]=(((r00*x9562))+(((-1.0)*r01*x9564))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9566=((-1.0)*r20);
IkReal x9567=((-1.0)*r21);
CheckValue<IkReal> x9569 = IKatan2WithCheck(IkReal(x9567),IkReal(x9566),IKFAST_ATAN2_MAGTHRESH);
if(!x9569.valid){
continue;
}
IkReal x9568=((-1.0)*(x9569.value));
sj5=gconst1;
cj5=gconst2;
j5=x9568;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9566);
rxp0_2=(py*r00);
rxp1_0=(py*x9567);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9568;
IkReal gconst1=r21;
IkReal gconst2=x9566;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9570=((-1.0)*r20);
IkReal x9571=((-1.0)*r21);
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal(x9571),IkReal(x9570),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
IkReal x9572=((-1.0)*(x9573.value));
sj5=gconst1;
cj5=gconst2;
j5=x9572;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9570);
rxp0_2=(py*r00);
rxp1_0=(py*x9571);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9572;
IkReal gconst1=r21;
IkReal gconst2=x9570;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9574=((-1.0)*r20);
IkReal x9575=((-1.0)*r21);
CheckValue<IkReal> x9577 = IKatan2WithCheck(IkReal(x9575),IkReal(x9574),IKFAST_ATAN2_MAGTHRESH);
if(!x9577.valid){
continue;
}
IkReal x9576=((-1.0)*(x9577.value));
sj5=gconst1;
cj5=gconst2;
j5=x9576;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9574);
rxp0_2=(py*r00);
rxp1_0=(py*x9575);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9576;
IkReal gconst1=r21;
IkReal gconst2=x9574;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9580=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9580.valid){
continue;
}
IkReal x9578=x9580.value;
IkReal x9579=((1.0)*cj0*x9578);
cj4array[0]=((((-1.0)*cj1*sj2*x9579))+(((-1.0)*cj2*sj1*x9579)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9581=IKsin(j4);
IkReal x9582=IKcos(j4);
IkReal x9583=(gconst1*r21);
IkReal x9584=(gconst2*r20);
IkReal x9585=((1.0)*x9582);
IkReal x9586=((1.0)*x9581);
evalcond[0]=(r12*x9581);
evalcond[1]=((((-1.0)*r12*x9585))+(((-1.0)*cj0)));
evalcond[2]=(((x9581*x9583))+(((-1.0)*x9584*x9586)));
evalcond[3]=((((-1.0)*gconst2*r00*x9586))+((gconst1*r01*x9581)));
evalcond[4]=(((x9582*x9583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9584*x9585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9588=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9588.valid){
continue;
}
IkReal x9587=x9588.value;
cj4array[0]=(((cj1*cj2*x9587))+(((-1.0)*sj1*sj2*x9587)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9589=IKsin(j4);
IkReal x9590=IKcos(j4);
IkReal x9591=(gconst1*r01);
IkReal x9592=((1.0)*x9590);
IkReal x9593=((1.0)*gconst2*x9589);
evalcond[0]=(r12*x9589);
evalcond[1]=((((-1.0)*r12*x9592))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x9593))+((gconst1*r21*x9589)));
evalcond[3]=((((-1.0)*r00*x9593))+((x9589*x9591)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*gconst2*r00*x9592))+((cj0*cj1*sj2))+((x9590*x9591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9594=IKPowWithIntegerCheck(r12,-1);
if(!x9594.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9594.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9595=IKsin(j4);
IkReal x9596=IKcos(j4);
IkReal x9597=(gconst1*x9596);
IkReal x9598=(gconst1*x9595);
IkReal x9599=((1.0)*gconst2*r20);
IkReal x9600=((1.0)*gconst2*r00);
evalcond[0]=(r12*x9595);
evalcond[1]=(((r21*x9598))+(((-1.0)*x9595*x9599)));
evalcond[2]=(((r01*x9598))+(((-1.0)*x9595*x9600)));
evalcond[3]=((((-1.0)*x9596*x9599))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9597)));
evalcond[4]=((((-1.0)*x9596*x9600))+((r01*x9597))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9602=IKPowWithIntegerCheck(r12,-1);
if(!x9602.valid){
continue;
}
IkReal x9601=x9602.value;
CheckValue<IkReal> x9603=IKPowWithIntegerCheck(sj3,-1);
if(!x9603.valid){
continue;
}
if( IKabs((x9601*(x9603.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9601)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9601*(x9603.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x9601))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9601*(x9603.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x9601));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9604=IKsin(j4);
IkReal x9605=IKcos(j4);
IkReal x9606=((1.0)*sj3);
IkReal x9607=(gconst1*sj3);
IkReal x9608=(gconst1*r01);
IkReal x9609=(cj2*sj0);
IkReal x9610=(sj1*sj2);
IkReal x9611=((1.0)*cj3);
IkReal x9612=(cj1*cj2);
IkReal x9613=(cj3*gconst1);
IkReal x9614=(cj2*sj1);
IkReal x9615=(gconst1*r21);
IkReal x9616=((1.0)*cj0);
IkReal x9617=(gconst2*r00);
IkReal x9618=(gconst2*r01);
IkReal x9619=(cj1*sj2);
IkReal x9620=(gconst2*r21);
IkReal x9621=(r12*x9604);
IkReal x9622=((1.0)*x9604);
IkReal x9623=(gconst2*r20*x9605);
evalcond[0]=((((-1.0)*r12*x9605))+(((-1.0)*x9616)));
evalcond[1]=(((x9604*x9615))+(((-1.0)*gconst2*r20*x9622)));
evalcond[2]=(sj0+(((-1.0)*x9617*x9622))+((x9604*x9608)));
evalcond[3]=(((sj0*x9619))+(((-1.0)*x9606*x9621))+((sj1*x9609)));
evalcond[4]=(((cj3*x9621))+(((-1.0)*sj0*x9610))+((cj1*x9609)));
evalcond[5]=(((sj3*x9620))+((r20*x9607))+(((-1.0)*x9611*x9623))+x9614+x9619+((r21*x9605*x9613)));
evalcond[6]=(((sj3*x9623))+((r20*x9613))+(((-1.0)*x9605*x9606*x9615))+(((-1.0)*x9612))+((cj3*x9620))+x9610);
evalcond[7]=(((r00*x9613))+((cj0*x9614))+((cj0*x9619))+((cj3*x9618))+((sj3*x9605*x9617))+(((-1.0)*x9605*x9606*x9608)));
evalcond[8]=(((cj0*x9612))+((r00*x9607))+((cj3*x9605*x9608))+(((-1.0)*x9610*x9616))+(((-1.0)*x9605*x9611*x9617))+((sj3*x9618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9624=((1.0)*gconst2);
CheckValue<IkReal> x9625=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*r00*x9624))),-1);
if(!x9625.valid){
continue;
}
CheckValue<IkReal> x9626=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9624))),-1);
if(!x9626.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9625.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9626.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9624)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9625.value)))+IKsqr(((x9626.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9624))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9625.value)), ((x9626.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9624))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9627=IKsin(j4);
IkReal x9628=IKcos(j4);
IkReal x9629=((1.0)*sj3);
IkReal x9630=(gconst1*sj3);
IkReal x9631=(gconst1*r01);
IkReal x9632=(cj2*sj0);
IkReal x9633=(sj1*sj2);
IkReal x9634=((1.0)*cj3);
IkReal x9635=(cj1*cj2);
IkReal x9636=(cj3*gconst1);
IkReal x9637=(cj2*sj1);
IkReal x9638=(gconst1*r21);
IkReal x9639=((1.0)*cj0);
IkReal x9640=(gconst2*r00);
IkReal x9641=(gconst2*r01);
IkReal x9642=(cj1*sj2);
IkReal x9643=(gconst2*r21);
IkReal x9644=(r12*x9627);
IkReal x9645=((1.0)*x9627);
IkReal x9646=(gconst2*r20*x9628);
evalcond[0]=((((-1.0)*r12*x9628))+(((-1.0)*x9639)));
evalcond[1]=((((-1.0)*gconst2*r20*x9645))+((x9627*x9638)));
evalcond[2]=(sj0+((x9627*x9631))+(((-1.0)*x9640*x9645)));
evalcond[3]=(((sj1*x9632))+(((-1.0)*x9629*x9644))+((sj0*x9642)));
evalcond[4]=(((cj1*x9632))+(((-1.0)*sj0*x9633))+((cj3*x9644)));
evalcond[5]=(((r20*x9630))+((r21*x9628*x9636))+((sj3*x9643))+x9637+x9642+(((-1.0)*x9634*x9646)));
evalcond[6]=(((r20*x9636))+(((-1.0)*x9635))+((sj3*x9646))+x9633+(((-1.0)*x9628*x9629*x9638))+((cj3*x9643)));
evalcond[7]=(((r00*x9636))+((sj3*x9628*x9640))+((cj0*x9637))+((cj0*x9642))+(((-1.0)*x9628*x9629*x9631))+((cj3*x9641)));
evalcond[8]=(((r00*x9630))+((cj3*x9628*x9631))+((cj0*x9635))+(((-1.0)*x9633*x9639))+(((-1.0)*x9628*x9634*x9640))+((sj3*x9641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9647=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9647.valid){
continue;
}
CheckValue<IkReal> x9648=IKPowWithIntegerCheck(r12,-1);
if(!x9648.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9647.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9647.value)))+IKsqr(((-1.0)*cj0*(x9648.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9647.value)), ((-1.0)*cj0*(x9648.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9649=IKsin(j4);
IkReal x9650=IKcos(j4);
IkReal x9651=((1.0)*sj3);
IkReal x9652=(gconst1*sj3);
IkReal x9653=(gconst1*r01);
IkReal x9654=(cj2*sj0);
IkReal x9655=(sj1*sj2);
IkReal x9656=((1.0)*cj3);
IkReal x9657=(cj1*cj2);
IkReal x9658=(cj3*gconst1);
IkReal x9659=(cj2*sj1);
IkReal x9660=(gconst1*r21);
IkReal x9661=((1.0)*cj0);
IkReal x9662=(gconst2*r00);
IkReal x9663=(gconst2*r01);
IkReal x9664=(cj1*sj2);
IkReal x9665=(gconst2*r21);
IkReal x9666=(r12*x9649);
IkReal x9667=((1.0)*x9649);
IkReal x9668=(gconst2*r20*x9650);
evalcond[0]=((((-1.0)*x9661))+(((-1.0)*r12*x9650)));
evalcond[1]=((((-1.0)*gconst2*r20*x9667))+((x9649*x9660)));
evalcond[2]=(sj0+((x9649*x9653))+(((-1.0)*x9662*x9667)));
evalcond[3]=(((sj0*x9664))+((sj1*x9654))+(((-1.0)*x9651*x9666)));
evalcond[4]=(((cj3*x9666))+(((-1.0)*sj0*x9655))+((cj1*x9654)));
evalcond[5]=(((r21*x9650*x9658))+((sj3*x9665))+((r20*x9652))+x9664+x9659+(((-1.0)*x9656*x9668)));
evalcond[6]=(((cj3*x9665))+((sj3*x9668))+((r20*x9658))+x9655+(((-1.0)*x9650*x9651*x9660))+(((-1.0)*x9657)));
evalcond[7]=(((cj3*x9663))+((sj3*x9650*x9662))+((cj0*x9659))+((r00*x9658))+(((-1.0)*x9650*x9651*x9653))+((cj0*x9664)));
evalcond[8]=(((sj3*x9663))+(((-1.0)*x9655*x9661))+(((-1.0)*x9650*x9656*x9662))+((cj3*x9650*x9653))+((cj0*x9657))+((r00*x9652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9669=gconst1*gconst1;
IkReal x9670=r21*r21;
IkReal x9671=gconst2*gconst2;
IkReal x9672=r20*r20;
IkReal x9673=(gconst2*r20);
IkReal x9674=(cj1*cj2);
IkReal x9675=(sj1*sj2);
IkReal x9676=(gconst1*r21);
IkReal x9677=(cj3*gconst2);
IkReal x9678=(cj3*r20);
CheckValue<IkReal> x9679=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x9673*x9676))+((sj3*x9671*x9672))+((sj3*x9669*x9670)))),-1);
if(!x9679.valid){
continue;
}
CheckValue<IkReal> x9680 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x9674))+((r21*r22*x9677))+((gconst1*r22*x9678))+((r22*x9675)))),IkReal((((gconst1*x9670*x9677))+(((-1.0)*x9673*x9675))+((x9673*x9674))+(((-1.0)*x9674*x9676))+(((-1.0)*r21*x9671*x9678))+(((-1.0)*gconst1*x9672*x9677))+((x9675*x9676))+((r21*x9669*x9678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9679.value)))+(x9680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9681=IKsin(j4);
IkReal x9682=IKcos(j4);
IkReal x9683=(gconst1*sj3);
IkReal x9684=(cj2*sj0);
IkReal x9685=(cj3*gconst1);
IkReal x9686=(sj1*sj2);
IkReal x9687=(cj3*gconst2);
IkReal x9688=(cj1*cj2);
IkReal x9689=(gconst2*sj3);
IkReal x9690=(cj2*sj1);
IkReal x9691=((1.0)*cj0);
IkReal x9692=(cj1*sj2);
IkReal x9693=((1.0)*x9682);
IkReal x9694=((1.0)*x9681);
IkReal x9695=(gconst1*x9681);
IkReal x9696=(cj3*x9681);
IkReal x9697=(x9682*x9689);
evalcond[0]=(((r21*x9695))+(((-1.0)*r22*x9693))+(((-1.0)*gconst2*r20*x9694)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9694))+(((-1.0)*r02*x9693))+((r01*x9695)));
evalcond[2]=((((-1.0)*gconst2*r10*x9694))+(((-1.0)*r12*x9693))+(((-1.0)*x9691))+((r11*x9695)));
evalcond[3]=((((-1.0)*r20*x9687*x9693))+((r22*x9696))+((r21*x9689))+x9692+x9690+((r20*x9683))+((r21*x9682*x9685)));
evalcond[4]=((((-1.0)*x9688))+(((-1.0)*r21*x9683*x9693))+(((-1.0)*r22*sj3*x9694))+((r21*x9687))+x9686+((r20*x9685))+((r20*x9697)));
evalcond[5]=((((-1.0)*r01*x9683*x9693))+(((-1.0)*r02*sj3*x9694))+((r01*x9687))+((r00*x9697))+((cj0*x9692))+((cj0*x9690))+((r00*x9685)));
evalcond[6]=((((-1.0)*r00*x9687*x9693))+((r02*x9696))+((r01*x9682*x9685))+(((-1.0)*x9686*x9691))+((r01*x9689))+((cj0*x9688))+((r00*x9683)));
evalcond[7]=((((-1.0)*r11*x9683*x9693))+((sj1*x9684))+((sj0*x9692))+((r10*x9697))+((r11*x9687))+(((-1.0)*r12*sj3*x9694))+((r10*x9685)));
evalcond[8]=(((cj1*x9684))+((r11*x9682*x9685))+((r12*x9696))+(((-1.0)*sj0*x9686))+((r11*x9689))+((r10*x9683))+(((-1.0)*r10*x9687*x9693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9698=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9698.valid){
continue;
}
CheckValue<IkReal> x9699 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9698.value)))+(x9699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9700=IKsin(j4);
IkReal x9701=IKcos(j4);
IkReal x9702=(gconst1*sj3);
IkReal x9703=(cj2*sj0);
IkReal x9704=(cj3*gconst1);
IkReal x9705=(sj1*sj2);
IkReal x9706=(cj3*gconst2);
IkReal x9707=(cj1*cj2);
IkReal x9708=(gconst2*sj3);
IkReal x9709=(cj2*sj1);
IkReal x9710=((1.0)*cj0);
IkReal x9711=(cj1*sj2);
IkReal x9712=((1.0)*x9701);
IkReal x9713=((1.0)*x9700);
IkReal x9714=(gconst1*x9700);
IkReal x9715=(cj3*x9700);
IkReal x9716=(x9701*x9708);
evalcond[0]=((((-1.0)*gconst2*r20*x9713))+((r21*x9714))+(((-1.0)*r22*x9712)));
evalcond[1]=((((-1.0)*r02*x9712))+sj0+(((-1.0)*gconst2*r00*x9713))+((r01*x9714)));
evalcond[2]=(((r11*x9714))+(((-1.0)*gconst2*r10*x9713))+(((-1.0)*r12*x9712))+(((-1.0)*x9710)));
evalcond[3]=((((-1.0)*r20*x9706*x9712))+((r22*x9715))+((r20*x9702))+((r21*x9708))+((r21*x9701*x9704))+x9711+x9709);
evalcond[4]=((((-1.0)*x9707))+((r20*x9704))+(((-1.0)*r22*sj3*x9713))+((r21*x9706))+x9705+((r20*x9716))+(((-1.0)*r21*x9702*x9712)));
evalcond[5]=((((-1.0)*r02*sj3*x9713))+(((-1.0)*r01*x9702*x9712))+((r01*x9706))+((cj0*x9711))+((r00*x9704))+((cj0*x9709))+((r00*x9716)));
evalcond[6]=(((r02*x9715))+((r01*x9708))+((r00*x9702))+(((-1.0)*x9705*x9710))+(((-1.0)*r00*x9706*x9712))+((r01*x9701*x9704))+((cj0*x9707)));
evalcond[7]=(((r10*x9704))+(((-1.0)*r12*sj3*x9713))+((r11*x9706))+((sj1*x9703))+((sj0*x9711))+((r10*x9716))+(((-1.0)*r11*x9702*x9712)));
evalcond[8]=(((r10*x9702))+((r11*x9701*x9704))+((r12*x9715))+(((-1.0)*r10*x9706*x9712))+((cj1*x9703))+((r11*x9708))+(((-1.0)*sj0*x9705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9717=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9717.valid){
continue;
}
CheckValue<IkReal> x9718 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9717.value)))+(x9718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9719=IKsin(j4);
IkReal x9720=IKcos(j4);
IkReal x9721=(gconst1*sj3);
IkReal x9722=(cj2*sj0);
IkReal x9723=(cj3*gconst1);
IkReal x9724=(sj1*sj2);
IkReal x9725=(cj3*gconst2);
IkReal x9726=(cj1*cj2);
IkReal x9727=(gconst2*sj3);
IkReal x9728=(cj2*sj1);
IkReal x9729=((1.0)*cj0);
IkReal x9730=(cj1*sj2);
IkReal x9731=((1.0)*x9720);
IkReal x9732=((1.0)*x9719);
IkReal x9733=(gconst1*x9719);
IkReal x9734=(cj3*x9719);
IkReal x9735=(x9720*x9727);
evalcond[0]=((((-1.0)*r22*x9731))+((r21*x9733))+(((-1.0)*gconst2*r20*x9732)));
evalcond[1]=(sj0+(((-1.0)*r02*x9731))+(((-1.0)*gconst2*r00*x9732))+((r01*x9733)));
evalcond[2]=(((r11*x9733))+(((-1.0)*r12*x9731))+(((-1.0)*x9729))+(((-1.0)*gconst2*r10*x9732)));
evalcond[3]=(((r21*x9720*x9723))+x9728+x9730+((r20*x9721))+(((-1.0)*r20*x9725*x9731))+((r21*x9727))+((r22*x9734)));
evalcond[4]=(((r20*x9735))+x9724+((r20*x9723))+(((-1.0)*r22*sj3*x9732))+(((-1.0)*r21*x9721*x9731))+((r21*x9725))+(((-1.0)*x9726)));
evalcond[5]=(((r01*x9725))+(((-1.0)*r02*sj3*x9732))+((cj0*x9730))+((cj0*x9728))+((r00*x9723))+(((-1.0)*r01*x9721*x9731))+((r00*x9735)));
evalcond[6]=(((r01*x9727))+(((-1.0)*x9724*x9729))+((r02*x9734))+((r01*x9720*x9723))+((cj0*x9726))+(((-1.0)*r00*x9725*x9731))+((r00*x9721)));
evalcond[7]=(((r11*x9725))+(((-1.0)*r11*x9721*x9731))+(((-1.0)*r12*sj3*x9732))+((sj0*x9730))+((sj1*x9722))+((r10*x9723))+((r10*x9735)));
evalcond[8]=(((cj1*x9722))+(((-1.0)*r10*x9725*x9731))+((r11*x9727))+(((-1.0)*sj0*x9724))+((r12*x9734))+((r11*x9720*x9723))+((r10*x9721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9736=((-1.0)*r21);
IkReal x9738 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9738)==0){
continue;
}
IkReal x9737=pow(x9738,-0.5);
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(x9736),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9739.value))));
IkReal gconst4=(x9736*x9737);
IkReal gconst5=((1.0)*r20*x9737);
CheckValue<IkReal> x9740 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9740.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9740.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9741=((-1.0)*r21);
CheckValue<IkReal> x9744 = IKatan2WithCheck(IkReal(x9741),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9744.valid){
continue;
}
IkReal x9742=((1.0)*(x9744.value));
IkReal x9743=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9742)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9742)));
IkReal gconst4=(x9741*x9743);
IkReal gconst5=((1.0)*r20*x9743);
IkReal x9745=r22*r22;
IkReal x9746=((1.0)*x9745);
CheckValue<IkReal> x9750=IKPowWithIntegerCheck(((-1.0)+x9745),-1);
if(!x9750.valid){
continue;
}
IkReal x9747=x9750.value;
if((((1.0)+(((-1.0)*x9746)))) < -0.00001)
continue;
IkReal x9748=IKsqrt(((1.0)+(((-1.0)*x9746))));
IkReal x9749=(sj0*x9747*x9748);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9746*x9749))+x9749))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9751=((-1.0)*r21);
CheckValue<IkReal> x9754 = IKatan2WithCheck(IkReal(x9751),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9754.valid){
continue;
}
IkReal x9752=((1.0)*(x9754.value));
IkReal x9753=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9752)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9752)));
IkReal gconst4=(x9751*x9753);
IkReal gconst5=((1.0)*r20*x9753);
IkReal x9755=r22*r22;
IkReal x9756=((1.0)*x9755);
CheckValue<IkReal> x9760=IKPowWithIntegerCheck(((-1.0)+x9755),-1);
if(!x9760.valid){
continue;
}
IkReal x9757=x9760.value;
if((((1.0)+(((-1.0)*x9756)))) < -0.00001)
continue;
IkReal x9758=IKsqrt(((1.0)+(((-1.0)*x9756))));
IkReal x9759=(cj0*x9757*x9758);
j4eval[0]=((IKabs(((((-1.0)*x9756*x9759))+x9759)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9761=((-1.0)*r21);
CheckValue<IkReal> x9764 = IKatan2WithCheck(IkReal(x9761),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9764.valid){
continue;
}
IkReal x9762=((1.0)*(x9764.value));
IkReal x9763=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9762)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9762)));
IkReal gconst4=(x9761*x9763);
IkReal gconst5=((1.0)*r20*x9763);
IkReal x9765=r22*r22;
IkReal x9766=(cj0*r02);
IkReal x9767=(r12*sj0);
CheckValue<IkReal> x9771=IKPowWithIntegerCheck(((-1.0)+x9765),-1);
if(!x9771.valid){
continue;
}
IkReal x9768=x9771.value;
if((((1.0)+(((-1.0)*x9765)))) < -0.00001)
continue;
IkReal x9769=IKsqrt(((1.0)+(((-1.0)*x9765))));
IkReal x9770=((1.0)*r22*x9768*x9769);
j4eval[0]=0;
j4eval[1]=((IKabs((x9766+x9767)))+(IKabs(((((-1.0)*x9767*x9770))+(((-1.0)*x9766*x9770))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9772=((-1.0)*r21);
CheckValue<IkReal> x9775 = IKatan2WithCheck(IkReal(x9772),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9775.valid){
continue;
}
IkReal x9773=((1.0)*(x9775.value));
IkReal x9774=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9773)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9773)));
IkReal gconst4=(x9772*x9774);
IkReal gconst5=((1.0)*r20*x9774);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9776=((-1.0)*r21);
CheckValue<IkReal> x9779 = IKatan2WithCheck(IkReal(x9776),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9779.valid){
continue;
}
IkReal x9777=((1.0)*(x9779.value));
IkReal x9778=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9777)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9777)));
IkReal gconst4=(x9776*x9778);
IkReal gconst5=((1.0)*r20*x9778);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9780=((-1.0)*r21);
CheckValue<IkReal> x9783 = IKatan2WithCheck(IkReal(x9780),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9783.valid){
continue;
}
IkReal x9781=((1.0)*(x9783.value));
IkReal x9782=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9781)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9781)));
IkReal gconst4=(x9780*x9782);
IkReal gconst5=((1.0)*r20*x9782);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9784=((-1.0)*r21);
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal(x9784),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
IkReal x9785=((1.0)*(x9787.value));
IkReal x9786=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9785)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9785)));
IkReal gconst4=(x9784*x9786);
IkReal gconst5=((1.0)*r20*x9786);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9788=((-1.0)*r21);
CheckValue<IkReal> x9791 = IKatan2WithCheck(IkReal(x9788),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9791.valid){
continue;
}
IkReal x9789=((1.0)*(x9791.value));
IkReal x9790=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9789)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9789)));
IkReal gconst4=(x9788*x9790);
IkReal gconst5=((1.0)*r20*x9790);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9792=((-1.0)*r21);
CheckValue<IkReal> x9795 = IKatan2WithCheck(IkReal(x9792),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9795.valid){
continue;
}
IkReal x9793=((1.0)*(x9795.value));
IkReal x9794=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9793)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9793)));
IkReal gconst4=(x9792*x9794);
IkReal gconst5=((1.0)*r20*x9794);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9796=(gconst5*r00);
IkReal x9797=(gconst4*r01);
CheckValue<IkReal> x9798=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9796*x9797))+(x9796*x9796)+(x9797*x9797)+(r02*r02))),-1);
if(!x9798.valid){
continue;
}
CheckValue<IkReal> x9799 = IKatan2WithCheck(IkReal(((((-1.0)*x9797))+x9796)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9798.value)))+(x9799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9800=IKsin(j4);
IkReal x9801=IKcos(j4);
IkReal x9802=(gconst4*r11);
IkReal x9803=(gconst5*r10);
IkReal x9804=(gconst4*r01);
IkReal x9805=(gconst5*r00);
IkReal x9806=(gconst4*r21);
IkReal x9807=(gconst5*r20);
IkReal x9808=((1.0)*x9801);
IkReal x9809=((1.0)*x9800);
evalcond[0]=(((x9800*x9806))+(((-1.0)*r22*x9808))+(((-1.0)*x9807*x9809)));
evalcond[1]=(((x9800*x9802))+(((-1.0)*x9803*x9809))+(((-1.0)*r12*x9808)));
evalcond[2]=((((-1.0)*r02*x9809))+(((-1.0)*x9804*x9808))+((x9801*x9805)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9808))+((x9800*x9804))+(((-1.0)*x9805*x9809)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9802*x9808))+(((-1.0)*r12*x9809))+((x9801*x9803)));
evalcond[5]=((((-1.0)*r22*x9809))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9806*x9808))+((x9801*x9807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9810=((1.0)*gconst5);
CheckValue<IkReal> x9811 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9811.valid){
continue;
}
CheckValue<IkReal> x9812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9810))+(((-1.0)*gconst4*r20)))),-1);
if(!x9812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9811.value)+(((1.5707963267949)*(x9812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9813=IKsin(j4);
IkReal x9814=IKcos(j4);
IkReal x9815=(gconst4*r11);
IkReal x9816=(gconst5*r10);
IkReal x9817=(gconst4*r01);
IkReal x9818=(gconst5*r00);
IkReal x9819=(gconst4*r21);
IkReal x9820=(gconst5*r20);
IkReal x9821=((1.0)*x9814);
IkReal x9822=((1.0)*x9813);
evalcond[0]=((((-1.0)*x9820*x9822))+((x9813*x9819))+(((-1.0)*r22*x9821)));
evalcond[1]=(((x9813*x9815))+(((-1.0)*r12*x9821))+(((-1.0)*x9816*x9822)));
evalcond[2]=((((-1.0)*r02*x9822))+((x9814*x9818))+(((-1.0)*x9817*x9821)));
evalcond[3]=((1.0)+(((-1.0)*x9818*x9822))+(((-1.0)*r02*x9821))+((x9813*x9817)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9815*x9821))+(((-1.0)*r12*x9822))+((x9814*x9816)));
evalcond[5]=(((x9814*x9820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9819*x9821))+(((-1.0)*r22*x9822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9823=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9823.valid){
continue;
}
CheckValue<IkReal> x9824 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9823.value)))+(x9824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9825=IKsin(j4);
IkReal x9826=IKcos(j4);
IkReal x9827=(gconst4*r11);
IkReal x9828=(gconst5*r10);
IkReal x9829=(gconst4*r01);
IkReal x9830=(gconst5*r00);
IkReal x9831=(gconst4*r21);
IkReal x9832=(gconst5*r20);
IkReal x9833=((1.0)*x9826);
IkReal x9834=((1.0)*x9825);
evalcond[0]=((((-1.0)*x9832*x9834))+(((-1.0)*r22*x9833))+((x9825*x9831)));
evalcond[1]=(((x9825*x9827))+(((-1.0)*x9828*x9834))+(((-1.0)*r12*x9833)));
evalcond[2]=((((-1.0)*x9829*x9833))+(((-1.0)*r02*x9834))+((x9826*x9830)));
evalcond[3]=((1.0)+((x9825*x9829))+(((-1.0)*r02*x9833))+(((-1.0)*x9830*x9834)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9827*x9833))+((x9826*x9828))+((cj1*sj2))+(((-1.0)*r12*x9834)));
evalcond[5]=((((-1.0)*r22*x9834))+(((-1.0)*cj1*cj2))+((x9826*x9832))+((sj1*sj2))+(((-1.0)*x9831*x9833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9835=((-1.0)*r21);
CheckValue<IkReal> x9838 = IKatan2WithCheck(IkReal(x9835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9838.valid){
continue;
}
IkReal x9836=((1.0)*(x9838.value));
IkReal x9837=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9836)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9836)));
IkReal gconst4=(x9835*x9837);
IkReal gconst5=((1.0)*r20*x9837);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9839=((-1.0)*r21);
CheckValue<IkReal> x9842 = IKatan2WithCheck(IkReal(x9839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9842.valid){
continue;
}
IkReal x9840=((1.0)*(x9842.value));
IkReal x9841=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9840)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9840)));
IkReal gconst4=(x9839*x9841);
IkReal gconst5=((1.0)*r20*x9841);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9843=((-1.0)*r21);
CheckValue<IkReal> x9846 = IKatan2WithCheck(IkReal(x9843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9846.valid){
continue;
}
IkReal x9844=((1.0)*(x9846.value));
IkReal x9845=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9844)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9844)));
IkReal gconst4=(x9843*x9845);
IkReal gconst5=((1.0)*r20*x9845);
IkReal x9847=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9851=IKPowWithIntegerCheck(x9847,-1);
if(!x9851.valid){
continue;
}
IkReal x9848=x9851.value;
IkReal x9849=((1.0)*x9848);
IkReal x9850=((((-2.0)*r00*r01*r20*r21*x9848))+(((-1.0)*(r02*r02)))+(((-1.0)*x9849*(r01*r01)*(r21*r21)))+(((-1.0)*x9849*(r00*r00)*(r20*r20))));
j4eval[0]=x9850;
j4eval[1]=IKsign(x9850);
j4eval[2]=r02;
j4eval[3]=x9847;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9852=(gconst4*r01);
IkReal x9853=(gconst5*r00);
CheckValue<IkReal> x9854=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9853*x9853)))+(((-1.0)*(r02*r02)))+(((2.0)*x9852*x9853))+(((-1.0)*(x9852*x9852))))),-1);
if(!x9854.valid){
continue;
}
CheckValue<IkReal> x9855 = IKatan2WithCheck(IkReal(((((-1.0)*x9853))+x9852)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9854.value)))+(x9855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9856=IKcos(j4);
IkReal x9857=IKsin(j4);
IkReal x9858=(gconst4*r11);
IkReal x9859=(gconst5*r10);
IkReal x9860=(gconst5*r00);
IkReal x9861=(gconst5*r20);
IkReal x9862=((1.0)*x9856);
IkReal x9863=(gconst4*x9856);
IkReal x9864=((1.0)*x9857);
IkReal x9865=(gconst4*x9857);
evalcond[0]=(((r02*x9857))+((r01*x9863))+(((-1.0)*x9860*x9862)));
evalcond[1]=((((-1.0)*r22*x9862))+(((-1.0)*x9861*x9864))+((r21*x9865)));
evalcond[2]=((((-1.0)*x9859*x9864))+(((-1.0)*r12*x9862))+((x9857*x9858)));
evalcond[3]=((1.0)+((r01*x9865))+(((-1.0)*x9860*x9864))+(((-1.0)*r02*x9862)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9859*x9862))+((x9856*x9858))+((cj1*sj2))+((r12*x9857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9861*x9862))+((r21*x9863))+((r22*x9857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9866=((1.0)*gconst5);
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
CheckValue<IkReal> x9868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9866))+(((-1.0)*gconst4*r20)))),-1);
if(!x9868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9867.value)+(((1.5707963267949)*(x9868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9869=IKcos(j4);
IkReal x9870=IKsin(j4);
IkReal x9871=(gconst4*r11);
IkReal x9872=(gconst5*r10);
IkReal x9873=(gconst5*r00);
IkReal x9874=(gconst5*r20);
IkReal x9875=((1.0)*x9869);
IkReal x9876=(gconst4*x9869);
IkReal x9877=((1.0)*x9870);
IkReal x9878=(gconst4*x9870);
evalcond[0]=(((r02*x9870))+(((-1.0)*x9873*x9875))+((r01*x9876)));
evalcond[1]=(((r21*x9878))+(((-1.0)*x9874*x9877))+(((-1.0)*r22*x9875)));
evalcond[2]=((((-1.0)*x9872*x9877))+((x9870*x9871))+(((-1.0)*r12*x9875)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9875))+(((-1.0)*x9873*x9877))+((r01*x9878)));
evalcond[4]=(((cj2*sj1))+((r12*x9870))+((cj1*sj2))+(((-1.0)*x9872*x9875))+((x9869*x9871)));
evalcond[5]=(((r21*x9876))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9874*x9875))+((r22*x9870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9879=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9879.valid){
continue;
}
CheckValue<IkReal> x9880 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9879.value)))+(x9880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9881=IKcos(j4);
IkReal x9882=IKsin(j4);
IkReal x9883=(gconst4*r11);
IkReal x9884=(gconst5*r10);
IkReal x9885=(gconst5*r00);
IkReal x9886=(gconst5*r20);
IkReal x9887=((1.0)*x9881);
IkReal x9888=(gconst4*x9881);
IkReal x9889=((1.0)*x9882);
IkReal x9890=(gconst4*x9882);
evalcond[0]=((((-1.0)*x9885*x9887))+((r01*x9888))+((r02*x9882)));
evalcond[1]=((((-1.0)*r22*x9887))+(((-1.0)*x9886*x9889))+((r21*x9890)));
evalcond[2]=((((-1.0)*x9884*x9889))+(((-1.0)*r12*x9887))+((x9882*x9883)));
evalcond[3]=((1.0)+(((-1.0)*x9885*x9889))+((r01*x9890))+(((-1.0)*r02*x9887)));
evalcond[4]=(((cj2*sj1))+((r12*x9882))+(((-1.0)*x9884*x9887))+((cj1*sj2))+((x9881*x9883)));
evalcond[5]=(((r21*x9888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9886*x9887))+((r22*x9882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9891=((-1.0)*r21);
CheckValue<IkReal> x9894 = IKatan2WithCheck(IkReal(x9891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9894.valid){
continue;
}
IkReal x9892=((1.0)*(x9894.value));
IkReal x9893=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9892)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9892)));
IkReal gconst4=(x9891*x9893);
IkReal gconst5=((1.0)*r20*x9893);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9895=((-1.0)*r21);
CheckValue<IkReal> x9898 = IKatan2WithCheck(IkReal(x9895),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9898.valid){
continue;
}
IkReal x9896=((1.0)*(x9898.value));
IkReal x9897=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9896)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9896)));
IkReal gconst4=(x9895*x9897);
IkReal gconst5=((1.0)*r20*x9897);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9899=((-1.0)*r21);
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(x9899),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
IkReal x9900=((1.0)*(x9902.value));
IkReal x9901=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9900)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9900)));
IkReal gconst4=(x9899*x9901);
IkReal gconst5=((1.0)*r20*x9901);
IkReal x9903=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9907=IKPowWithIntegerCheck(x9903,-1);
if(!x9907.valid){
continue;
}
IkReal x9904=x9907.value;
IkReal x9905=((1.0)*x9904);
IkReal x9906=((((-2.0)*r00*r01*r20*r21*x9904))+(((-1.0)*x9905*(r00*r00)*(r20*r20)))+(((-1.0)*x9905*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x9906;
j4eval[1]=IKsign(x9906);
j4eval[2]=r02;
j4eval[3]=x9903;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9908=(gconst4*r01);
IkReal x9909=(gconst5*r00);
CheckValue<IkReal> x9910=IKPowWithIntegerCheck(IKsign(((((2.0)*x9908*x9909))+(((-1.0)*(x9909*x9909)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9908*x9908))))),-1);
if(!x9910.valid){
continue;
}
CheckValue<IkReal> x9911 = IKatan2WithCheck(IkReal(((((-1.0)*x9909))+x9908)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9910.value)))+(x9911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9912=IKcos(j4);
IkReal x9913=IKsin(j4);
IkReal x9914=(gconst5*r10);
IkReal x9915=(gconst5*r00);
IkReal x9916=(gconst5*r20);
IkReal x9917=((1.0)*x9912);
IkReal x9918=(gconst4*x9913);
IkReal x9919=(gconst4*x9912);
IkReal x9920=((1.0)*x9913);
evalcond[0]=(((r01*x9919))+(((-1.0)*x9915*x9917))+((r02*x9913)));
evalcond[1]=((((-1.0)*x9916*x9920))+(((-1.0)*r22*x9917))+((r21*x9918)));
evalcond[2]=((((-1.0)*r12*x9917))+((r11*x9918))+(((-1.0)*x9914*x9920)));
evalcond[3]=((1.0)+((r01*x9918))+(((-1.0)*x9915*x9920))+(((-1.0)*r02*x9917)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9913))+(((-1.0)*x9916*x9917))+((r21*x9919)));
evalcond[5]=(((r12*x9913))+(((-1.0)*sj1*sj2))+(((-1.0)*x9914*x9917))+((r11*x9919))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9921=((1.0)*gconst5);
CheckValue<IkReal> x9922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9921))+(((-1.0)*gconst4*r20)))),-1);
if(!x9922.valid){
continue;
}
CheckValue<IkReal> x9923 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9922.value)))+(x9923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9924=IKcos(j4);
IkReal x9925=IKsin(j4);
IkReal x9926=(gconst5*r10);
IkReal x9927=(gconst5*r00);
IkReal x9928=(gconst5*r20);
IkReal x9929=((1.0)*x9924);
IkReal x9930=(gconst4*x9925);
IkReal x9931=(gconst4*x9924);
IkReal x9932=((1.0)*x9925);
evalcond[0]=((((-1.0)*x9927*x9929))+((r01*x9931))+((r02*x9925)));
evalcond[1]=((((-1.0)*x9928*x9932))+((r21*x9930))+(((-1.0)*r22*x9929)));
evalcond[2]=((((-1.0)*x9926*x9932))+((r11*x9930))+(((-1.0)*r12*x9929)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9929))+((r01*x9930))+(((-1.0)*x9927*x9932)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9928*x9929))+((cj1*sj2))+((r21*x9931))+((r22*x9925)));
evalcond[5]=((((-1.0)*x9926*x9929))+((r11*x9931))+(((-1.0)*sj1*sj2))+((r12*x9925))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9933=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9933.valid){
continue;
}
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9933.value)))+(x9934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9935=IKcos(j4);
IkReal x9936=IKsin(j4);
IkReal x9937=(gconst5*r10);
IkReal x9938=(gconst5*r00);
IkReal x9939=(gconst5*r20);
IkReal x9940=((1.0)*x9935);
IkReal x9941=(gconst4*x9936);
IkReal x9942=(gconst4*x9935);
IkReal x9943=((1.0)*x9936);
evalcond[0]=((((-1.0)*x9938*x9940))+((r01*x9942))+((r02*x9936)));
evalcond[1]=((((-1.0)*x9939*x9943))+(((-1.0)*r22*x9940))+((r21*x9941)));
evalcond[2]=((((-1.0)*x9937*x9943))+((r11*x9941))+(((-1.0)*r12*x9940)));
evalcond[3]=((1.0)+(((-1.0)*x9938*x9943))+((r01*x9941))+(((-1.0)*r02*x9940)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9936))+(((-1.0)*x9939*x9940))+((r21*x9942)));
evalcond[5]=(((r12*x9936))+(((-1.0)*sj1*sj2))+(((-1.0)*x9937*x9940))+((r11*x9942))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9944=((-1.0)*r21);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(x9944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9945=((1.0)*(x9947.value));
IkReal x9946=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9945)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9945)));
IkReal gconst4=(x9944*x9946);
IkReal gconst5=((1.0)*r20*x9946);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9948=((-1.0)*r21);
CheckValue<IkReal> x9951 = IKatan2WithCheck(IkReal(x9948),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9951.valid){
continue;
}
IkReal x9949=((1.0)*(x9951.value));
IkReal x9950=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9949)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9949)));
IkReal gconst4=(x9948*x9950);
IkReal gconst5=((1.0)*r20*x9950);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9952=((-1.0)*r21);
CheckValue<IkReal> x9955 = IKatan2WithCheck(IkReal(x9952),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9955.valid){
continue;
}
IkReal x9953=((1.0)*(x9955.value));
IkReal x9954=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9953)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9953)));
IkReal gconst4=(x9952*x9954);
IkReal gconst5=((1.0)*r20*x9954);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9956=(gconst5*r00);
IkReal x9957=(gconst4*r01);
CheckValue<IkReal> x9958=IKPowWithIntegerCheck(IKsign(((x9957*x9957)+(((-2.0)*x9956*x9957))+(r02*r02)+(x9956*x9956))),-1);
if(!x9958.valid){
continue;
}
CheckValue<IkReal> x9959 = IKatan2WithCheck(IkReal(((((-1.0)*x9957))+x9956)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9958.value)))+(x9959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9960=IKsin(j4);
IkReal x9961=IKcos(j4);
IkReal x9962=(gconst4*r11);
IkReal x9963=(gconst5*r10);
IkReal x9964=(gconst5*r00);
IkReal x9965=(gconst5*r20);
IkReal x9966=((1.0)*x9961);
IkReal x9967=(gconst4*x9960);
IkReal x9968=((1.0)*x9960);
evalcond[0]=(((r21*x9967))+(((-1.0)*r22*x9966))+(((-1.0)*x9965*x9968)));
evalcond[1]=((((-1.0)*r12*x9966))+(((-1.0)*x9963*x9968))+((x9960*x9962)));
evalcond[2]=((((-1.0)*gconst4*r01*x9966))+(((-1.0)*r02*x9968))+((x9961*x9964)));
evalcond[3]=((1.0)+((r01*x9967))+(((-1.0)*x9964*x9968))+(((-1.0)*r02*x9966)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x9966))+(((-1.0)*r22*x9968))+((cj1*sj2))+((x9961*x9965)));
evalcond[5]=((((-1.0)*r12*x9968))+(((-1.0)*sj1*sj2))+(((-1.0)*x9962*x9966))+((cj1*cj2))+((x9961*x9963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9969=((1.0)*gconst5);
CheckValue<IkReal> x9970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9969))+(((-1.0)*gconst4*r20)))),-1);
if(!x9970.valid){
continue;
}
CheckValue<IkReal> x9971 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9970.value)))+(x9971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9972=IKsin(j4);
IkReal x9973=IKcos(j4);
IkReal x9974=(gconst4*r11);
IkReal x9975=(gconst5*r10);
IkReal x9976=(gconst5*r00);
IkReal x9977=(gconst5*r20);
IkReal x9978=((1.0)*x9973);
IkReal x9979=(gconst4*x9972);
IkReal x9980=((1.0)*x9972);
evalcond[0]=((((-1.0)*x9977*x9980))+(((-1.0)*r22*x9978))+((r21*x9979)));
evalcond[1]=(((x9972*x9974))+(((-1.0)*x9975*x9980))+(((-1.0)*r12*x9978)));
evalcond[2]=(((x9973*x9976))+(((-1.0)*r02*x9980))+(((-1.0)*gconst4*r01*x9978)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9978))+(((-1.0)*x9976*x9980))+((r01*x9979)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9980))+((x9973*x9977))+((cj1*sj2))+(((-1.0)*gconst4*r21*x9978)));
evalcond[5]=(((x9973*x9975))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9980))+((cj1*cj2))+(((-1.0)*x9974*x9978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9981=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9981.valid){
continue;
}
CheckValue<IkReal> x9982 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9981.value)))+(x9982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9983=IKsin(j4);
IkReal x9984=IKcos(j4);
IkReal x9985=(gconst4*r11);
IkReal x9986=(gconst5*r10);
IkReal x9987=(gconst5*r00);
IkReal x9988=(gconst5*r20);
IkReal x9989=((1.0)*x9984);
IkReal x9990=(gconst4*x9983);
IkReal x9991=((1.0)*x9983);
evalcond[0]=((((-1.0)*r22*x9989))+(((-1.0)*x9988*x9991))+((r21*x9990)));
evalcond[1]=(((x9983*x9985))+(((-1.0)*x9986*x9991))+(((-1.0)*r12*x9989)));
evalcond[2]=(((x9984*x9987))+(((-1.0)*r02*x9991))+(((-1.0)*gconst4*r01*x9989)));
evalcond[3]=((1.0)+((r01*x9990))+(((-1.0)*r02*x9989))+(((-1.0)*x9987*x9991)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9991))+(((-1.0)*gconst4*r21*x9989))+((cj1*sj2))+((x9984*x9988)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x9984*x9986))+((cj1*cj2))+(((-1.0)*r12*x9991))+(((-1.0)*x9985*x9989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9992=((-1.0)*r21);
IkReal x9993=((-1.0)*r20);
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal(x9992),IkReal(x9993),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
IkReal x9994=((1.0)*(x9995.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9994)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9993);
rxp0_2=(py*r00);
rxp1_0=(py*x9992);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9994)));
IkReal gconst4=x9992;
IkReal gconst5=((1.0)*r20);
IkReal x9996=((1.0)*r01*r21);
IkReal x9997=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9996))+(((-1.0)*x9997)));
j4eval[1]=(((sj3*x9996))+((sj3*x9997)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9998=((-1.0)*r21);
IkReal x9999=((-1.0)*r20);
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal(x9998),IkReal(x9999),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
IkReal x10000=((1.0)*(x10001.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10000)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9999);
rxp0_2=(py*r00);
rxp1_0=(py*x9998);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10000)));
IkReal gconst4=x9998;
IkReal gconst5=((1.0)*r20);
IkReal x10002=((1.0)*r01*r21);
IkReal x10003=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10003))+(((-1.0)*x10002)));
j4eval[1]=((((-1.0)*cj3*x10002))+(((-1.0)*cj3*x10003)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10004=((-1.0)*r21);
IkReal x10005=((-1.0)*r20);
CheckValue<IkReal> x10007 = IKatan2WithCheck(IkReal(x10004),IkReal(x10005),IKFAST_ATAN2_MAGTHRESH);
if(!x10007.valid){
continue;
}
IkReal x10006=((1.0)*(x10007.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10006)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10005);
rxp0_2=(py*r00);
rxp1_0=(py*x10004);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10006)));
IkReal gconst4=x10004;
IkReal gconst5=((1.0)*r20);
IkReal x10008=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r00*r20*x10008))+((r01*r21*x10008)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10009=((1.0)*r01);
CheckValue<IkReal> x10010=IKPowWithIntegerCheck(r12,-1);
if(!x10010.valid){
continue;
}
CheckValue<IkReal> x10011=IKPowWithIntegerCheck(sj3,-1);
if(!x10011.valid){
continue;
}
CheckValue<IkReal> x10012=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x10009))),-1);
if(!x10012.valid){
continue;
}
if( IKabs(((x10010.value)*(x10011.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10012.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x10009)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10010.value)*(x10011.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10012.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x10009))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10010.value)*(x10011.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10012.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x10009))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10013=IKsin(j4);
IkReal x10014=IKcos(j4);
IkReal x10015=(cj2*sj1);
IkReal x10016=(cj1*sj2);
IkReal x10017=(sj1*sj2);
IkReal x10018=(gconst5*r00);
IkReal x10019=(gconst5*sj3);
IkReal x10020=(cj3*gconst5);
IkReal x10021=(gconst4*sj3);
IkReal x10022=(cj3*gconst4);
IkReal x10023=(cj1*cj2);
IkReal x10024=((1.0)*x10013);
IkReal x10025=(gconst4*x10013);
IkReal x10026=((1.0)*x10014);
IkReal x10027=(x10015+x10016);
IkReal x10028=(x10014*x10019);
IkReal x10029=(x10014*x10022);
evalcond[0]=((-1.0)*r12*x10014);
evalcond[1]=((((-1.0)*gconst5*r20*x10024))+((r21*x10025)));
evalcond[2]=(x10027+(((-1.0)*r12*sj3*x10024)));
evalcond[3]=(((cj3*r12*x10013))+(((-1.0)*x10017))+x10023);
evalcond[4]=((1.0)+(((-1.0)*x10018*x10024))+((r01*x10025)));
evalcond[5]=(((r01*x10020))+((r00*x10022))+(((-1.0)*r01*x10021*x10026))+((sj3*x10014*x10018)));
evalcond[6]=((((-1.0)*cj3*x10018*x10026))+((r01*x10029))+((r00*x10021))+((r01*x10019)));
evalcond[7]=(((r21*x10019))+(((-1.0)*r20*x10020*x10026))+((r21*x10029))+((r20*x10021))+x10027);
evalcond[8]=((((-1.0)*r21*x10021*x10026))+(((-1.0)*x10023))+((r21*x10020))+((r20*x10022))+((r20*x10028))+x10017);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10030=((1.0)*gconst5);
IkReal x10031=(gconst4*r01);
CheckValue<IkReal> x10032=IKPowWithIntegerCheck(((((-1.0)*r00*x10030))+x10031),-1);
if(!x10032.valid){
continue;
}
CheckValue<IkReal> x10033=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10030))+((cj3*x10031))),-1);
if(!x10033.valid){
continue;
}
if( IKabs(((-1.0)*(x10032.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10033.value)*(((((-1.0)*r01*sj3*x10030))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10032.value)))+IKsqr(((x10033.value)*(((((-1.0)*r01*sj3*x10030))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10032.value)), ((x10033.value)*(((((-1.0)*r01*sj3*x10030))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10034=IKsin(j4);
IkReal x10035=IKcos(j4);
IkReal x10036=(cj2*sj1);
IkReal x10037=(cj1*sj2);
IkReal x10038=(sj1*sj2);
IkReal x10039=(gconst5*r00);
IkReal x10040=(gconst5*sj3);
IkReal x10041=(cj3*gconst5);
IkReal x10042=(gconst4*sj3);
IkReal x10043=(cj3*gconst4);
IkReal x10044=(cj1*cj2);
IkReal x10045=((1.0)*x10034);
IkReal x10046=(gconst4*x10034);
IkReal x10047=((1.0)*x10035);
IkReal x10048=(x10037+x10036);
IkReal x10049=(x10035*x10040);
IkReal x10050=(x10035*x10043);
evalcond[0]=((-1.0)*r12*x10035);
evalcond[1]=((((-1.0)*gconst5*r20*x10045))+((r21*x10046)));
evalcond[2]=((((-1.0)*r12*sj3*x10045))+x10048);
evalcond[3]=((((-1.0)*x10038))+((cj3*r12*x10034))+x10044);
evalcond[4]=((1.0)+((r01*x10046))+(((-1.0)*x10039*x10045)));
evalcond[5]=((((-1.0)*r01*x10042*x10047))+((r00*x10043))+((r01*x10041))+((sj3*x10035*x10039)));
evalcond[6]=((((-1.0)*cj3*x10039*x10047))+((r01*x10050))+((r00*x10042))+((r01*x10040)));
evalcond[7]=(((r21*x10040))+x10048+((r21*x10050))+((r20*x10042))+(((-1.0)*r20*x10041*x10047)));
evalcond[8]=((((-1.0)*x10044))+((r21*x10041))+x10038+((r20*x10043))+((r20*x10049))+(((-1.0)*r21*x10042*x10047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10051=((1.0)*gconst4);
IkReal x10052=(gconst5*r00);
CheckValue<IkReal> x10053=IKPowWithIntegerCheck(((((-1.0)*x10052))+((gconst4*r01))),-1);
if(!x10053.valid){
continue;
}
CheckValue<IkReal> x10054=IKPowWithIntegerCheck((((sj3*x10052))+(((-1.0)*r01*sj3*x10051))),-1);
if(!x10054.valid){
continue;
}
if( IKabs(((-1.0)*(x10053.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10054.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10051)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10053.value)))+IKsqr(((x10054.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10051))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10053.value)), ((x10054.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x10051))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10055=IKsin(j4);
IkReal x10056=IKcos(j4);
IkReal x10057=(cj2*sj1);
IkReal x10058=(cj1*sj2);
IkReal x10059=(sj1*sj2);
IkReal x10060=(gconst5*r00);
IkReal x10061=(gconst5*sj3);
IkReal x10062=(cj3*gconst5);
IkReal x10063=(gconst4*sj3);
IkReal x10064=(cj3*gconst4);
IkReal x10065=(cj1*cj2);
IkReal x10066=((1.0)*x10055);
IkReal x10067=(gconst4*x10055);
IkReal x10068=((1.0)*x10056);
IkReal x10069=(x10058+x10057);
IkReal x10070=(x10056*x10061);
IkReal x10071=(x10056*x10064);
evalcond[0]=((-1.0)*r12*x10056);
evalcond[1]=((((-1.0)*gconst5*r20*x10066))+((r21*x10067)));
evalcond[2]=((((-1.0)*r12*sj3*x10066))+x10069);
evalcond[3]=((((-1.0)*x10059))+x10065+((cj3*r12*x10055)));
evalcond[4]=((1.0)+(((-1.0)*x10060*x10066))+((r01*x10067)));
evalcond[5]=(((sj3*x10056*x10060))+((r00*x10064))+((r01*x10062))+(((-1.0)*r01*x10063*x10068)));
evalcond[6]=(((r00*x10063))+((r01*x10071))+((r01*x10061))+(((-1.0)*cj3*x10060*x10068)));
evalcond[7]=(((r20*x10063))+x10069+((r21*x10071))+((r21*x10061))+(((-1.0)*r20*x10062*x10068)));
evalcond[8]=((((-1.0)*r21*x10063*x10068))+((r20*x10064))+((r20*x10070))+x10059+((r21*x10062))+(((-1.0)*x10065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10072=gconst4*gconst4;
IkReal x10073=gconst5*gconst5;
IkReal x10074=(r01*r20);
IkReal x10075=(gconst4*sj3);
IkReal x10076=(r01*r21);
IkReal x10077=((1.0)*cj3);
IkReal x10078=(r00*r21);
IkReal x10079=(r00*r20);
IkReal x10080=(cj3*gconst4*gconst5);
IkReal x10081=((1.0)*x10073);
CheckValue<IkReal> x10082 = IKatan2WithCheck(IkReal((((r00*r22*x10075))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x10075*x10076))+(((-1.0)*sj3*x10074*x10081))+(((-1.0)*gconst5*x10075*x10079))+((sj3*x10072*x10078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10082.valid){
continue;
}
CheckValue<IkReal> x10083=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10073*x10077*x10079))+(((-1.0)*r02*r22*x10077))+((x10078*x10080))+(((-1.0)*x10072*x10076*x10077))+((x10074*x10080)))),-1);
if(!x10083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10082.value)+(((1.5707963267949)*(x10083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10084=IKsin(j4);
IkReal x10085=IKcos(j4);
IkReal x10086=(cj2*sj1);
IkReal x10087=(cj1*sj2);
IkReal x10088=(gconst4*r11);
IkReal x10089=(sj1*sj2);
IkReal x10090=(gconst5*r10);
IkReal x10091=(cj1*cj2);
IkReal x10092=(gconst4*r01);
IkReal x10093=(gconst5*sj3);
IkReal x10094=(gconst5*r00);
IkReal x10095=(gconst4*sj3);
IkReal x10096=(cj3*gconst5);
IkReal x10097=(cj3*gconst4);
IkReal x10098=(gconst4*r21);
IkReal x10099=((1.0)*x10085);
IkReal x10100=((1.0)*x10084);
IkReal x10101=(cj3*x10084);
IkReal x10102=(cj3*x10085);
IkReal x10103=(x10086+x10087);
IkReal x10104=(x10085*x10093);
evalcond[0]=(((x10084*x10098))+(((-1.0)*gconst5*r20*x10100))+(((-1.0)*r22*x10099)));
evalcond[1]=(((x10084*x10088))+(((-1.0)*r12*x10099))+(((-1.0)*x10090*x10100)));
evalcond[2]=((1.0)+((x10084*x10092))+(((-1.0)*x10094*x10100))+(((-1.0)*r02*x10099)));
evalcond[3]=((((-1.0)*cj3*x10094*x10099))+((x10092*x10102))+((r02*x10101))+((r01*x10093))+((r00*x10095)));
evalcond[4]=(((r00*x10104))+(((-1.0)*sj3*x10092*x10099))+(((-1.0)*r02*sj3*x10100))+((r01*x10096))+((r00*x10097)));
evalcond[5]=(((r21*x10085*x10097))+x10103+((r21*x10093))+(((-1.0)*r20*x10096*x10099))+((r20*x10095))+((r22*x10101)));
evalcond[6]=((((-1.0)*sj3*x10088*x10099))+(((-1.0)*r12*sj3*x10100))+((r11*x10096))+x10103+((r10*x10097))+((sj3*x10085*x10090)));
evalcond[7]=(((r11*x10093))+((x10088*x10102))+x10091+((r10*x10095))+((r12*x10101))+(((-1.0)*cj3*x10090*x10099))+(((-1.0)*x10089)));
evalcond[8]=(((r20*x10104))+(((-1.0)*r21*x10095*x10099))+x10089+((r21*x10096))+(((-1.0)*r22*sj3*x10100))+((r20*x10097))+(((-1.0)*x10091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10105=((1.0)*gconst5);
CheckValue<IkReal> x10106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10105))+(((-1.0)*gconst4*r20)))),-1);
if(!x10106.valid){
continue;
}
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10105))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10106.value)))+(x10107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10108=IKsin(j4);
IkReal x10109=IKcos(j4);
IkReal x10110=(cj2*sj1);
IkReal x10111=(cj1*sj2);
IkReal x10112=(gconst4*r11);
IkReal x10113=(sj1*sj2);
IkReal x10114=(gconst5*r10);
IkReal x10115=(cj1*cj2);
IkReal x10116=(gconst4*r01);
IkReal x10117=(gconst5*sj3);
IkReal x10118=(gconst5*r00);
IkReal x10119=(gconst4*sj3);
IkReal x10120=(cj3*gconst5);
IkReal x10121=(cj3*gconst4);
IkReal x10122=(gconst4*r21);
IkReal x10123=((1.0)*x10109);
IkReal x10124=((1.0)*x10108);
IkReal x10125=(cj3*x10108);
IkReal x10126=(cj3*x10109);
IkReal x10127=(x10110+x10111);
IkReal x10128=(x10109*x10117);
evalcond[0]=((((-1.0)*gconst5*r20*x10124))+((x10108*x10122))+(((-1.0)*r22*x10123)));
evalcond[1]=((((-1.0)*x10114*x10124))+((x10108*x10112))+(((-1.0)*r12*x10123)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10123))+((x10108*x10116))+(((-1.0)*x10118*x10124)));
evalcond[3]=(((r01*x10117))+((r00*x10119))+(((-1.0)*cj3*x10118*x10123))+((r02*x10125))+((x10116*x10126)));
evalcond[4]=(((r00*x10121))+((r00*x10128))+((r01*x10120))+(((-1.0)*r02*sj3*x10124))+(((-1.0)*sj3*x10116*x10123)));
evalcond[5]=(((r21*x10117))+((r20*x10119))+(((-1.0)*r20*x10120*x10123))+((r21*x10109*x10121))+x10127+((r22*x10125)));
evalcond[6]=(((r10*x10121))+(((-1.0)*sj3*x10112*x10123))+x10127+(((-1.0)*r12*sj3*x10124))+((sj3*x10109*x10114))+((r11*x10120)));
evalcond[7]=((((-1.0)*x10113))+((x10112*x10126))+x10115+((r11*x10117))+((r10*x10119))+(((-1.0)*cj3*x10114*x10123))+((r12*x10125)));
evalcond[8]=((((-1.0)*x10115))+(((-1.0)*r21*x10119*x10123))+((r20*x10128))+((r20*x10121))+((r21*x10120))+(((-1.0)*r22*sj3*x10124))+x10113);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10129=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10129.valid){
continue;
}
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10129.value)))+(x10130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10131=IKsin(j4);
IkReal x10132=IKcos(j4);
IkReal x10133=(cj2*sj1);
IkReal x10134=(cj1*sj2);
IkReal x10135=(gconst4*r11);
IkReal x10136=(sj1*sj2);
IkReal x10137=(gconst5*r10);
IkReal x10138=(cj1*cj2);
IkReal x10139=(gconst4*r01);
IkReal x10140=(gconst5*sj3);
IkReal x10141=(gconst5*r00);
IkReal x10142=(gconst4*sj3);
IkReal x10143=(cj3*gconst5);
IkReal x10144=(cj3*gconst4);
IkReal x10145=(gconst4*r21);
IkReal x10146=((1.0)*x10132);
IkReal x10147=((1.0)*x10131);
IkReal x10148=(cj3*x10131);
IkReal x10149=(cj3*x10132);
IkReal x10150=(x10134+x10133);
IkReal x10151=(x10132*x10140);
evalcond[0]=(((x10131*x10145))+(((-1.0)*r22*x10146))+(((-1.0)*gconst5*r20*x10147)));
evalcond[1]=((((-1.0)*x10137*x10147))+((x10131*x10135))+(((-1.0)*r12*x10146)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10146))+((x10131*x10139))+(((-1.0)*x10141*x10147)));
evalcond[3]=(((r02*x10148))+(((-1.0)*cj3*x10141*x10146))+((r00*x10142))+((x10139*x10149))+((r01*x10140)));
evalcond[4]=((((-1.0)*r02*sj3*x10147))+((r00*x10144))+((r00*x10151))+((r01*x10143))+(((-1.0)*sj3*x10139*x10146)));
evalcond[5]=(((r21*x10140))+x10150+((r22*x10148))+((r21*x10132*x10144))+(((-1.0)*r20*x10143*x10146))+((r20*x10142)));
evalcond[6]=(((r10*x10144))+x10150+(((-1.0)*sj3*x10135*x10146))+((sj3*x10132*x10137))+(((-1.0)*r12*sj3*x10147))+((r11*x10143)));
evalcond[7]=(((x10135*x10149))+((r12*x10148))+((r10*x10142))+x10138+(((-1.0)*x10136))+(((-1.0)*cj3*x10137*x10146))+((r11*x10140)));
evalcond[8]=(((r21*x10143))+x10136+(((-1.0)*r21*x10142*x10146))+(((-1.0)*r22*sj3*x10147))+(((-1.0)*x10138))+((r20*x10151))+((r20*x10144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10152=((-1.0)*r21);
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(x10152),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
IkReal x10153=((1.0)*(x10155.value));
IkReal x10154=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10153)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10153)));
IkReal gconst4=(x10152*x10154);
IkReal gconst5=((1.0)*r20*x10154);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10156=((-1.0)*r21);
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal(x10156),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
IkReal x10157=((1.0)*(x10159.value));
IkReal x10158=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10157)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10157)));
IkReal gconst4=(x10156*x10158);
IkReal gconst5=((1.0)*r20*x10158);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10160=((-1.0)*r21);
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(x10160),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
IkReal x10161=((1.0)*(x10163.value));
IkReal x10162=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10161)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10161)));
IkReal gconst4=(x10160*x10162);
IkReal gconst5=((1.0)*r20*x10162);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10164=((-1.0)*r21);
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal(x10164),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
IkReal x10165=((1.0)*(x10167.value));
IkReal x10166=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10165)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10165)));
IkReal gconst4=(x10164*x10166);
IkReal gconst5=((1.0)*r20*x10166);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10168=((-1.0)*r21);
CheckValue<IkReal> x10171 = IKatan2WithCheck(IkReal(x10168),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10171.valid){
continue;
}
IkReal x10169=((1.0)*(x10171.value));
IkReal x10170=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10169)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10169)));
IkReal gconst4=(x10168*x10170);
IkReal gconst5=((1.0)*r20*x10170);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10172=((-1.0)*r21);
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal(x10172),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
IkReal x10173=((1.0)*(x10175.value));
IkReal x10174=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10173)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10173)));
IkReal gconst4=(x10172*x10174);
IkReal gconst5=((1.0)*r20*x10174);
IkReal x10176=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10180=IKPowWithIntegerCheck(x10176,-1);
if(!x10180.valid){
continue;
}
IkReal x10177=x10180.value;
IkReal x10178=((1.0)*x10177);
IkReal x10179=((((-1.0)*x10178*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10178*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10177)));
j4eval[0]=x10179;
j4eval[1]=r02;
j4eval[2]=x10176;
j4eval[3]=IKsign(x10179);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10181=(gconst5*r00);
IkReal x10182=(gconst4*r01);
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal(((((-1.0)*x10182))+x10181)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
CheckValue<IkReal> x10184=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10181*x10181)))+(((2.0)*x10181*x10182))+(((-1.0)*(x10182*x10182)))+(((-1.0)*(r02*r02))))),-1);
if(!x10184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10183.value)+(((1.5707963267949)*(x10184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10185=IKsin(j4);
IkReal x10186=IKcos(j4);
IkReal x10187=(gconst4*r11);
IkReal x10188=((1.0)*cj1);
IkReal x10189=(gconst5*r10);
IkReal x10190=(gconst4*r01);
IkReal x10191=(gconst5*r00);
IkReal x10192=(gconst4*r21);
IkReal x10193=(gconst5*r20);
IkReal x10194=((1.0)*x10186);
IkReal x10195=((1.0)*x10185);
evalcond[0]=(((x10185*x10192))+(((-1.0)*x10193*x10195))+(((-1.0)*r22*x10194)));
evalcond[1]=((((-1.0)*r12*x10194))+(((-1.0)*x10189*x10195))+((x10185*x10187)));
evalcond[2]=((((-1.0)*r02*x10195))+(((-1.0)*x10190*x10194))+((x10186*x10191)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10194))+(((-1.0)*x10191*x10195))+((x10185*x10190)));
evalcond[4]=((((-1.0)*cj2*x10188))+((sj1*sj2))+((x10186*x10193))+(((-1.0)*r22*x10195))+(((-1.0)*x10192*x10194)));
evalcond[5]=((((-1.0)*x10187*x10194))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10188))+(((-1.0)*r12*x10195))+((x10186*x10189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10196=((1.0)*gconst5);
CheckValue<IkReal> x10197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10196))+(((-1.0)*gconst4*r10)))),-1);
if(!x10197.valid){
continue;
}
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10196))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10197.value)))+(x10198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10199=IKsin(j4);
IkReal x10200=IKcos(j4);
IkReal x10201=(gconst4*r11);
IkReal x10202=((1.0)*cj1);
IkReal x10203=(gconst5*r10);
IkReal x10204=(gconst4*r01);
IkReal x10205=(gconst5*r00);
IkReal x10206=(gconst4*r21);
IkReal x10207=(gconst5*r20);
IkReal x10208=((1.0)*x10200);
IkReal x10209=((1.0)*x10199);
evalcond[0]=((((-1.0)*r22*x10208))+((x10199*x10206))+(((-1.0)*x10207*x10209)));
evalcond[1]=(((x10199*x10201))+(((-1.0)*x10203*x10209))+(((-1.0)*r12*x10208)));
evalcond[2]=((((-1.0)*r02*x10209))+((x10200*x10205))+(((-1.0)*x10204*x10208)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10208))+(((-1.0)*x10205*x10209))+((x10199*x10204)));
evalcond[4]=(((x10200*x10207))+(((-1.0)*r22*x10209))+(((-1.0)*x10206*x10208))+(((-1.0)*cj2*x10202))+((sj1*sj2)));
evalcond[5]=(((x10200*x10203))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10202))+(((-1.0)*x10201*x10208))+(((-1.0)*r12*x10209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
CheckValue<IkReal> x10211=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10210.value)+(((1.5707963267949)*(x10211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10212=IKsin(j4);
IkReal x10213=IKcos(j4);
IkReal x10214=(gconst4*r11);
IkReal x10215=((1.0)*cj1);
IkReal x10216=(gconst5*r10);
IkReal x10217=(gconst4*r01);
IkReal x10218=(gconst5*r00);
IkReal x10219=(gconst4*r21);
IkReal x10220=(gconst5*r20);
IkReal x10221=((1.0)*x10213);
IkReal x10222=((1.0)*x10212);
evalcond[0]=((((-1.0)*x10220*x10222))+(((-1.0)*r22*x10221))+((x10212*x10219)));
evalcond[1]=((((-1.0)*x10216*x10222))+(((-1.0)*r12*x10221))+((x10212*x10214)));
evalcond[2]=((((-1.0)*r02*x10222))+(((-1.0)*x10217*x10221))+((x10213*x10218)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10221))+(((-1.0)*x10218*x10222))+((x10212*x10217)));
evalcond[4]=(((x10213*x10220))+((sj1*sj2))+(((-1.0)*cj2*x10215))+(((-1.0)*x10219*x10221))+(((-1.0)*r22*x10222)));
evalcond[5]=((((-1.0)*x10214*x10221))+(((-1.0)*sj2*x10215))+(((-1.0)*cj2*sj1))+((x10213*x10216))+(((-1.0)*r12*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10223=((-1.0)*r21);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(x10223),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
IkReal x10224=((1.0)*(x10226.value));
IkReal x10225=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10224)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10224)));
IkReal gconst4=(x10223*x10225);
IkReal gconst5=((1.0)*r20*x10225);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10227=((-1.0)*r21);
CheckValue<IkReal> x10230 = IKatan2WithCheck(IkReal(x10227),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10230.valid){
continue;
}
IkReal x10228=((1.0)*(x10230.value));
IkReal x10229=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10228)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10228)));
IkReal gconst4=(x10227*x10229);
IkReal gconst5=((1.0)*r20*x10229);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10231=((-1.0)*r21);
CheckValue<IkReal> x10234 = IKatan2WithCheck(IkReal(x10231),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10234.valid){
continue;
}
IkReal x10232=((1.0)*(x10234.value));
IkReal x10233=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10232)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10232)));
IkReal gconst4=(x10231*x10233);
IkReal gconst5=((1.0)*r20*x10233);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10235=(gconst4*r01);
IkReal x10236=(gconst5*r00);
CheckValue<IkReal> x10237 = IKatan2WithCheck(IkReal((x10235+(((-1.0)*x10236)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10237.valid){
continue;
}
CheckValue<IkReal> x10238=IKPowWithIntegerCheck(IKsign(((x10236*x10236)+(((-2.0)*x10235*x10236))+(x10235*x10235)+(r02*r02))),-1);
if(!x10238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10237.value)+(((1.5707963267949)*(x10238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10239=IKcos(j4);
IkReal x10240=IKsin(j4);
IkReal x10241=(gconst4*r11);
IkReal x10242=(gconst5*r10);
IkReal x10243=((1.0)*cj1);
IkReal x10244=(gconst5*r00);
IkReal x10245=(gconst5*r20);
IkReal x10246=((1.0)*x10239);
IkReal x10247=(gconst4*x10239);
IkReal x10248=((1.0)*x10240);
IkReal x10249=(gconst4*x10240);
evalcond[0]=(((r02*x10240))+(((-1.0)*x10244*x10246))+((r01*x10247)));
evalcond[1]=((((-1.0)*x10245*x10248))+((r21*x10249))+(((-1.0)*r22*x10246)));
evalcond[2]=(((x10240*x10241))+(((-1.0)*r12*x10246))+(((-1.0)*x10242*x10248)));
evalcond[3]=((-1.0)+(((-1.0)*x10244*x10248))+((r01*x10249))+(((-1.0)*r02*x10246)));
evalcond[4]=(((r22*x10240))+(((-1.0)*cj2*x10243))+((sj1*sj2))+(((-1.0)*x10245*x10246))+((r21*x10247)));
evalcond[5]=(((x10239*x10241))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10243))+(((-1.0)*x10242*x10246))+((r12*x10240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10250=((1.0)*gconst5);
CheckValue<IkReal> x10251 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10250))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10251.valid){
continue;
}
CheckValue<IkReal> x10252=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10250))+(((-1.0)*gconst4*r10)))),-1);
if(!x10252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10251.value)+(((1.5707963267949)*(x10252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10253=IKcos(j4);
IkReal x10254=IKsin(j4);
IkReal x10255=(gconst4*r11);
IkReal x10256=(gconst5*r10);
IkReal x10257=((1.0)*cj1);
IkReal x10258=(gconst5*r00);
IkReal x10259=(gconst5*r20);
IkReal x10260=((1.0)*x10253);
IkReal x10261=(gconst4*x10253);
IkReal x10262=((1.0)*x10254);
IkReal x10263=(gconst4*x10254);
evalcond[0]=(((r02*x10254))+((r01*x10261))+(((-1.0)*x10258*x10260)));
evalcond[1]=((((-1.0)*r22*x10260))+((r21*x10263))+(((-1.0)*x10259*x10262)));
evalcond[2]=(((x10254*x10255))+(((-1.0)*r12*x10260))+(((-1.0)*x10256*x10262)));
evalcond[3]=((-1.0)+((r01*x10263))+(((-1.0)*r02*x10260))+(((-1.0)*x10258*x10262)));
evalcond[4]=(((r22*x10254))+(((-1.0)*cj2*x10257))+((sj1*sj2))+((r21*x10261))+(((-1.0)*x10259*x10260)));
evalcond[5]=(((r12*x10254))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10257))+((x10253*x10255))+(((-1.0)*x10256*x10260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10264.value)+(((1.5707963267949)*(x10265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10266=IKcos(j4);
IkReal x10267=IKsin(j4);
IkReal x10268=(gconst4*r11);
IkReal x10269=(gconst5*r10);
IkReal x10270=((1.0)*cj1);
IkReal x10271=(gconst5*r00);
IkReal x10272=(gconst5*r20);
IkReal x10273=((1.0)*x10266);
IkReal x10274=(gconst4*x10266);
IkReal x10275=((1.0)*x10267);
IkReal x10276=(gconst4*x10267);
evalcond[0]=(((r02*x10267))+((r01*x10274))+(((-1.0)*x10271*x10273)));
evalcond[1]=((((-1.0)*r22*x10273))+(((-1.0)*x10272*x10275))+((r21*x10276)));
evalcond[2]=(((x10267*x10268))+(((-1.0)*x10269*x10275))+(((-1.0)*r12*x10273)));
evalcond[3]=((-1.0)+((r01*x10276))+(((-1.0)*r02*x10273))+(((-1.0)*x10271*x10275)));
evalcond[4]=(((r22*x10267))+((sj1*sj2))+(((-1.0)*x10272*x10273))+((r21*x10274))+(((-1.0)*cj2*x10270)));
evalcond[5]=(((r12*x10267))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10270))+(((-1.0)*x10269*x10273))+((x10266*x10268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10277=((-1.0)*r21);
CheckValue<IkReal> x10280 = IKatan2WithCheck(IkReal(x10277),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10280.valid){
continue;
}
IkReal x10278=((1.0)*(x10280.value));
IkReal x10279=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10278)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10278)));
IkReal gconst4=(x10277*x10279);
IkReal gconst5=((1.0)*r20*x10279);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10281=((-1.0)*r21);
CheckValue<IkReal> x10284 = IKatan2WithCheck(IkReal(x10281),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10284.valid){
continue;
}
IkReal x10282=((1.0)*(x10284.value));
IkReal x10283=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10282)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10282)));
IkReal gconst4=(x10281*x10283);
IkReal gconst5=((1.0)*r20*x10283);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10285=((-1.0)*r21);
CheckValue<IkReal> x10288 = IKatan2WithCheck(IkReal(x10285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10288.valid){
continue;
}
IkReal x10286=((1.0)*(x10288.value));
IkReal x10287=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10286)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10286)));
IkReal gconst4=(x10285*x10287);
IkReal gconst5=((1.0)*r20*x10287);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10289=(gconst4*r01);
IkReal x10290=(gconst5*r00);
CheckValue<IkReal> x10291 = IKatan2WithCheck(IkReal(((((-1.0)*x10290))+x10289)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10291.valid){
continue;
}
CheckValue<IkReal> x10292=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10289*x10290))+(x10290*x10290)+(x10289*x10289)+(r02*r02))),-1);
if(!x10292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10291.value)+(((1.5707963267949)*(x10292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10293=IKcos(j4);
IkReal x10294=IKsin(j4);
IkReal x10295=(gconst4*r11);
IkReal x10296=(gconst5*r10);
IkReal x10297=(gconst5*r00);
IkReal x10298=(gconst5*r20);
IkReal x10299=((1.0)*x10293);
IkReal x10300=(gconst4*x10293);
IkReal x10301=((1.0)*x10294);
IkReal x10302=(gconst4*x10294);
evalcond[0]=(((r01*x10300))+(((-1.0)*x10297*x10299))+((r02*x10294)));
evalcond[1]=((((-1.0)*x10298*x10301))+((r21*x10302))+(((-1.0)*r22*x10299)));
evalcond[2]=((((-1.0)*r12*x10299))+(((-1.0)*x10296*x10301))+((x10294*x10295)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10299))+((r01*x10302))+(((-1.0)*x10297*x10301)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10298*x10299))+((cj1*sj2))+((r21*x10300))+((r22*x10294)));
evalcond[5]=(((r12*x10294))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10293*x10295))+(((-1.0)*x10296*x10299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10303=((1.0)*gconst5);
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
CheckValue<IkReal> x10305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10303))+(((-1.0)*gconst4*r10)))),-1);
if(!x10305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10304.value)+(((1.5707963267949)*(x10305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10306=IKcos(j4);
IkReal x10307=IKsin(j4);
IkReal x10308=(gconst4*r11);
IkReal x10309=(gconst5*r10);
IkReal x10310=(gconst5*r00);
IkReal x10311=(gconst5*r20);
IkReal x10312=((1.0)*x10306);
IkReal x10313=(gconst4*x10306);
IkReal x10314=((1.0)*x10307);
IkReal x10315=(gconst4*x10307);
evalcond[0]=(((r02*x10307))+((r01*x10313))+(((-1.0)*x10310*x10312)));
evalcond[1]=(((r21*x10315))+(((-1.0)*x10311*x10314))+(((-1.0)*r22*x10312)));
evalcond[2]=(((x10307*x10308))+(((-1.0)*r12*x10312))+(((-1.0)*x10309*x10314)));
evalcond[3]=((-1.0)+((r01*x10315))+(((-1.0)*x10310*x10314))+(((-1.0)*r02*x10312)));
evalcond[4]=(((cj2*sj1))+((r21*x10313))+((cj1*sj2))+(((-1.0)*x10311*x10312))+((r22*x10307)));
evalcond[5]=(((x10306*x10308))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10309*x10312))+((r12*x10307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
CheckValue<IkReal> x10317=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10316.value)+(((1.5707963267949)*(x10317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10318=IKcos(j4);
IkReal x10319=IKsin(j4);
IkReal x10320=(gconst4*r11);
IkReal x10321=(gconst5*r10);
IkReal x10322=(gconst5*r00);
IkReal x10323=(gconst5*r20);
IkReal x10324=((1.0)*x10318);
IkReal x10325=(gconst4*x10318);
IkReal x10326=((1.0)*x10319);
IkReal x10327=(gconst4*x10319);
evalcond[0]=(((r01*x10325))+((r02*x10319))+(((-1.0)*x10322*x10324)));
evalcond[1]=((((-1.0)*r22*x10324))+((r21*x10327))+(((-1.0)*x10323*x10326)));
evalcond[2]=((((-1.0)*x10321*x10326))+((x10319*x10320))+(((-1.0)*r12*x10324)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10324))+((r01*x10327))+(((-1.0)*x10322*x10326)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10319))+((r21*x10325))+(((-1.0)*x10323*x10324)));
evalcond[5]=(((x10318*x10320))+(((-1.0)*x10321*x10324))+((r12*x10319))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10328=((-1.0)*r21);
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(x10328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
IkReal x10329=((1.0)*(x10331.value));
IkReal x10330=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10329)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10329)));
IkReal gconst4=(x10328*x10330);
IkReal gconst5=((1.0)*r20*x10330);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10332=((-1.0)*r21);
CheckValue<IkReal> x10335 = IKatan2WithCheck(IkReal(x10332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10335.valid){
continue;
}
IkReal x10333=((1.0)*(x10335.value));
IkReal x10334=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10333)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10333)));
IkReal gconst4=(x10332*x10334);
IkReal gconst5=((1.0)*r20*x10334);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10336=((-1.0)*r21);
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(x10336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
IkReal x10337=((1.0)*(x10339.value));
IkReal x10338=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10337)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10337)));
IkReal gconst4=(x10336*x10338);
IkReal gconst5=((1.0)*r20*x10338);
IkReal x10340=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(x10340,-1);
if(!x10344.valid){
continue;
}
IkReal x10341=x10344.value;
IkReal x10342=((1.0)*x10341);
IkReal x10343=((((-1.0)*x10342*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10341))+(((-1.0)*x10342*(r01*r01)*(r21*r21))));
j4eval[0]=x10343;
j4eval[1]=r02;
j4eval[2]=x10340;
j4eval[3]=IKsign(x10343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10345=(gconst5*r00);
IkReal x10346=(gconst4*r01);
CheckValue<IkReal> x10347 = IKatan2WithCheck(IkReal((x10345+(((-1.0)*x10346)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10347.valid){
continue;
}
CheckValue<IkReal> x10348=IKPowWithIntegerCheck(IKsign(((((2.0)*x10345*x10346))+(((-1.0)*(x10346*x10346)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10345*x10345))))),-1);
if(!x10348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10347.value)+(((1.5707963267949)*(x10348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10349=IKsin(j4);
IkReal x10350=IKcos(j4);
IkReal x10351=(gconst4*r11);
IkReal x10352=(gconst5*r10);
IkReal x10353=(gconst4*r01);
IkReal x10354=(gconst5*r00);
IkReal x10355=(gconst4*r21);
IkReal x10356=(gconst5*r20);
IkReal x10357=((1.0)*x10350);
IkReal x10358=((1.0)*x10349);
evalcond[0]=((((-1.0)*x10356*x10358))+(((-1.0)*r22*x10357))+((x10349*x10355)));
evalcond[1]=((((-1.0)*x10352*x10358))+((x10349*x10351))+(((-1.0)*r12*x10357)));
evalcond[2]=(((x10350*x10354))+(((-1.0)*x10353*x10357))+(((-1.0)*r02*x10358)));
evalcond[3]=((-1.0)+((x10349*x10353))+(((-1.0)*x10354*x10358))+(((-1.0)*r02*x10357)));
evalcond[4]=(((cj2*sj1))+((x10350*x10356))+((cj1*sj2))+(((-1.0)*r22*x10358))+(((-1.0)*x10355*x10357)));
evalcond[5]=(((x10350*x10352))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10351*x10357))+(((-1.0)*r12*x10358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10359=((1.0)*gconst5);
CheckValue<IkReal> x10360 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10360.valid){
continue;
}
CheckValue<IkReal> x10361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10359))+(((-1.0)*gconst4*r10)))),-1);
if(!x10361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10360.value)+(((1.5707963267949)*(x10361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10362=IKsin(j4);
IkReal x10363=IKcos(j4);
IkReal x10364=(gconst4*r11);
IkReal x10365=(gconst5*r10);
IkReal x10366=(gconst4*r01);
IkReal x10367=(gconst5*r00);
IkReal x10368=(gconst4*r21);
IkReal x10369=(gconst5*r20);
IkReal x10370=((1.0)*x10363);
IkReal x10371=((1.0)*x10362);
evalcond[0]=((((-1.0)*x10369*x10371))+((x10362*x10368))+(((-1.0)*r22*x10370)));
evalcond[1]=(((x10362*x10364))+(((-1.0)*x10365*x10371))+(((-1.0)*r12*x10370)));
evalcond[2]=(((x10363*x10367))+(((-1.0)*r02*x10371))+(((-1.0)*x10366*x10370)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10370))+((x10362*x10366))+(((-1.0)*x10367*x10371)));
evalcond[4]=(((cj2*sj1))+((x10363*x10369))+((cj1*sj2))+(((-1.0)*x10368*x10370))+(((-1.0)*r22*x10371)));
evalcond[5]=(((x10363*x10365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10364*x10370))+(((-1.0)*r12*x10371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10372 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10372.valid){
continue;
}
CheckValue<IkReal> x10373=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10372.value)+(((1.5707963267949)*(x10373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10374=IKsin(j4);
IkReal x10375=IKcos(j4);
IkReal x10376=(gconst4*r11);
IkReal x10377=(gconst5*r10);
IkReal x10378=(gconst4*r01);
IkReal x10379=(gconst5*r00);
IkReal x10380=(gconst4*r21);
IkReal x10381=(gconst5*r20);
IkReal x10382=((1.0)*x10375);
IkReal x10383=((1.0)*x10374);
evalcond[0]=((((-1.0)*x10381*x10383))+(((-1.0)*r22*x10382))+((x10374*x10380)));
evalcond[1]=((((-1.0)*x10377*x10383))+(((-1.0)*r12*x10382))+((x10374*x10376)));
evalcond[2]=((((-1.0)*r02*x10383))+(((-1.0)*x10378*x10382))+((x10375*x10379)));
evalcond[3]=((-1.0)+(((-1.0)*x10379*x10383))+(((-1.0)*r02*x10382))+((x10374*x10378)));
evalcond[4]=(((x10375*x10381))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10380*x10382))+(((-1.0)*r22*x10383)));
evalcond[5]=((((-1.0)*x10376*x10382))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10383))+((x10375*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10384=gconst4*gconst4;
IkReal x10385=gconst5*gconst5;
IkReal x10386=(r01*r20);
IkReal x10387=(gconst4*sj3);
IkReal x10388=(r01*r21);
IkReal x10389=((1.0)*cj3);
IkReal x10390=(r00*r21);
IkReal x10391=(r00*r20);
IkReal x10392=(cj3*gconst4*gconst5);
IkReal x10393=((1.0)*x10385);
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal((((r00*r22*x10387))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x10387*x10388))+((sj3*x10384*x10390))+(((-1.0)*sj3*x10386*x10393))+(((-1.0)*gconst5*x10387*x10391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
CheckValue<IkReal> x10395=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10384*x10388*x10389))+((x10390*x10392))+(((-1.0)*r02*r22*x10389))+((x10386*x10392))+(((-1.0)*x10385*x10389*x10391)))),-1);
if(!x10395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10394.value)+(((1.5707963267949)*(x10395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10396=IKsin(j4);
IkReal x10397=IKcos(j4);
IkReal x10398=(sj1*sj2);
IkReal x10399=(gconst5*sj3);
IkReal x10400=(gconst4*r11);
IkReal x10401=(gconst5*r10);
IkReal x10402=((1.0)*cj1);
IkReal x10403=(gconst4*r01);
IkReal x10404=(cj2*sj1);
IkReal x10405=(gconst5*r00);
IkReal x10406=(gconst4*sj3);
IkReal x10407=(cj3*gconst5);
IkReal x10408=(cj3*gconst4);
IkReal x10409=(gconst4*r21);
IkReal x10410=(cj2*x10402);
IkReal x10411=((1.0)*x10397);
IkReal x10412=((1.0)*x10396);
IkReal x10413=(cj3*x10396);
IkReal x10414=(cj3*x10397);
evalcond[0]=(((x10396*x10409))+(((-1.0)*gconst5*r20*x10412))+(((-1.0)*r22*x10411)));
evalcond[1]=(((x10396*x10400))+(((-1.0)*r12*x10411))+(((-1.0)*x10401*x10412)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10411))+((x10396*x10403))+(((-1.0)*x10405*x10412)));
evalcond[3]=(((r01*x10399))+((r00*x10406))+((r02*x10413))+(((-1.0)*cj3*x10405*x10411))+((x10403*x10414)));
evalcond[4]=(((r01*x10407))+((r00*x10408))+(((-1.0)*sj3*x10403*x10411))+((r00*x10397*x10399))+(((-1.0)*r02*sj3*x10412)));
evalcond[5]=(((r22*x10413))+((r21*x10397*x10408))+((r21*x10399))+((cj1*sj2))+((r20*x10406))+x10404+(((-1.0)*r20*x10407*x10411)));
evalcond[6]=(((x10400*x10414))+((r11*x10399))+(((-1.0)*cj3*x10401*x10411))+x10398+(((-1.0)*x10410))+((r12*x10413))+((r10*x10406)));
evalcond[7]=(((r21*x10407))+(((-1.0)*r22*sj3*x10412))+((r20*x10397*x10399))+x10398+(((-1.0)*r21*x10406*x10411))+(((-1.0)*x10410))+((r20*x10408)));
evalcond[8]=(((r10*x10397*x10399))+(((-1.0)*sj2*x10402))+(((-1.0)*r12*sj3*x10412))+((r11*x10407))+((r10*x10408))+(((-1.0)*sj3*x10400*x10411))+(((-1.0)*x10404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10415=((1.0)*gconst5);
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10415))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
CheckValue<IkReal> x10417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10415))+(((-1.0)*gconst4*r10)))),-1);
if(!x10417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10416.value)+(((1.5707963267949)*(x10417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10418=IKsin(j4);
IkReal x10419=IKcos(j4);
IkReal x10420=(sj1*sj2);
IkReal x10421=(gconst5*sj3);
IkReal x10422=(gconst4*r11);
IkReal x10423=(gconst5*r10);
IkReal x10424=((1.0)*cj1);
IkReal x10425=(gconst4*r01);
IkReal x10426=(cj2*sj1);
IkReal x10427=(gconst5*r00);
IkReal x10428=(gconst4*sj3);
IkReal x10429=(cj3*gconst5);
IkReal x10430=(cj3*gconst4);
IkReal x10431=(gconst4*r21);
IkReal x10432=(cj2*x10424);
IkReal x10433=((1.0)*x10419);
IkReal x10434=((1.0)*x10418);
IkReal x10435=(cj3*x10418);
IkReal x10436=(cj3*x10419);
evalcond[0]=((((-1.0)*gconst5*r20*x10434))+(((-1.0)*r22*x10433))+((x10418*x10431)));
evalcond[1]=((((-1.0)*x10423*x10434))+(((-1.0)*r12*x10433))+((x10418*x10422)));
evalcond[2]=((-1.0)+(((-1.0)*x10427*x10434))+(((-1.0)*r02*x10433))+((x10418*x10425)));
evalcond[3]=(((x10425*x10436))+((r01*x10421))+((r00*x10428))+(((-1.0)*cj3*x10427*x10433))+((r02*x10435)));
evalcond[4]=(((r01*x10429))+(((-1.0)*sj3*x10425*x10433))+((r00*x10419*x10421))+(((-1.0)*r02*sj3*x10434))+((r00*x10430)));
evalcond[5]=(((r22*x10435))+((cj1*sj2))+((r21*x10419*x10430))+x10426+(((-1.0)*r20*x10429*x10433))+((r20*x10428))+((r21*x10421)));
evalcond[6]=(((x10422*x10436))+(((-1.0)*cj3*x10423*x10433))+((r12*x10435))+((r10*x10428))+x10420+(((-1.0)*x10432))+((r11*x10421)));
evalcond[7]=(((r20*x10419*x10421))+(((-1.0)*r22*sj3*x10434))+(((-1.0)*r21*x10428*x10433))+x10420+(((-1.0)*x10432))+((r20*x10430))+((r21*x10429)));
evalcond[8]=(((r10*x10419*x10421))+(((-1.0)*r12*sj3*x10434))+(((-1.0)*sj2*x10424))+((r10*x10430))+(((-1.0)*sj3*x10422*x10433))+(((-1.0)*x10426))+((r11*x10429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10437 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10437.valid){
continue;
}
CheckValue<IkReal> x10438=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10437.value)+(((1.5707963267949)*(x10438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10439=IKsin(j4);
IkReal x10440=IKcos(j4);
IkReal x10441=(sj1*sj2);
IkReal x10442=(gconst5*sj3);
IkReal x10443=(gconst4*r11);
IkReal x10444=(gconst5*r10);
IkReal x10445=((1.0)*cj1);
IkReal x10446=(gconst4*r01);
IkReal x10447=(cj2*sj1);
IkReal x10448=(gconst5*r00);
IkReal x10449=(gconst4*sj3);
IkReal x10450=(cj3*gconst5);
IkReal x10451=(cj3*gconst4);
IkReal x10452=(gconst4*r21);
IkReal x10453=(cj2*x10445);
IkReal x10454=((1.0)*x10440);
IkReal x10455=((1.0)*x10439);
IkReal x10456=(cj3*x10439);
IkReal x10457=(cj3*x10440);
evalcond[0]=(((x10439*x10452))+(((-1.0)*gconst5*r20*x10455))+(((-1.0)*r22*x10454)));
evalcond[1]=((((-1.0)*r12*x10454))+(((-1.0)*x10444*x10455))+((x10439*x10443)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10454))+(((-1.0)*x10448*x10455))+((x10439*x10446)));
evalcond[3]=(((x10446*x10457))+((r00*x10449))+((r01*x10442))+((r02*x10456))+(((-1.0)*cj3*x10448*x10454)));
evalcond[4]=((((-1.0)*sj3*x10446*x10454))+((r00*x10451))+((r01*x10450))+((r00*x10440*x10442))+(((-1.0)*r02*sj3*x10455)));
evalcond[5]=(((cj1*sj2))+((r22*x10456))+((r21*x10440*x10451))+((r20*x10449))+((r21*x10442))+x10447+(((-1.0)*r20*x10450*x10454)));
evalcond[6]=(((x10443*x10457))+((r12*x10456))+((r11*x10442))+(((-1.0)*cj3*x10444*x10454))+x10441+((r10*x10449))+(((-1.0)*x10453)));
evalcond[7]=(((r20*x10440*x10442))+(((-1.0)*r22*sj3*x10455))+x10441+(((-1.0)*r21*x10449*x10454))+((r21*x10450))+(((-1.0)*x10453))+((r20*x10451)));
evalcond[8]=((((-1.0)*x10447))+((r10*x10451))+((r11*x10450))+(((-1.0)*sj2*x10445))+(((-1.0)*sj3*x10443*x10454))+((r10*x10440*x10442))+(((-1.0)*r12*sj3*x10455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10458=((-1.0)*r21);
CheckValue<IkReal> x10461 = IKatan2WithCheck(IkReal(x10458),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10461.valid){
continue;
}
IkReal x10459=((1.0)*(x10461.value));
IkReal x10460=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10459)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10459)));
IkReal gconst4=(x10458*x10460);
IkReal gconst5=((1.0)*r20*x10460);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10462=((-1.0)*r21);
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal(x10462),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
IkReal x10463=((1.0)*(x10465.value));
IkReal x10464=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10463)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10463)));
IkReal gconst4=(x10462*x10464);
IkReal gconst5=((1.0)*r20*x10464);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10466=((-1.0)*r21);
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(x10466),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
IkReal x10467=((1.0)*(x10469.value));
IkReal x10468=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10467)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10467)));
IkReal gconst4=(x10466*x10468);
IkReal gconst5=((1.0)*r20*x10468);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10470=((-1.0)*r21);
CheckValue<IkReal> x10473 = IKatan2WithCheck(IkReal(x10470),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10473.valid){
continue;
}
IkReal x10471=((1.0)*(x10473.value));
IkReal x10472=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10471)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10471)));
IkReal gconst4=(x10470*x10472);
IkReal gconst5=((1.0)*r20*x10472);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10474=((-1.0)*r21);
CheckValue<IkReal> x10477 = IKatan2WithCheck(IkReal(x10474),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10477.valid){
continue;
}
IkReal x10475=((1.0)*(x10477.value));
IkReal x10476=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10475)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10475)));
IkReal gconst4=(x10474*x10476);
IkReal gconst5=((1.0)*r20*x10476);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10478=((-1.0)*r21);
CheckValue<IkReal> x10481 = IKatan2WithCheck(IkReal(x10478),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10481.valid){
continue;
}
IkReal x10479=((1.0)*(x10481.value));
IkReal x10480=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10479)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10479)));
IkReal gconst4=(x10478*x10480);
IkReal gconst5=((1.0)*r20*x10480);
IkReal x10482=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10486=IKPowWithIntegerCheck(x10482,-1);
if(!x10486.valid){
continue;
}
IkReal x10483=x10486.value;
IkReal x10484=((1.0)*x10483);
IkReal x10485=((((-1.0)*x10484*(r10*r10)*(r20*r20)))+(((-1.0)*x10484*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10483))+(((-1.0)*(r12*r12))));
j4eval[0]=x10485;
j4eval[1]=r12;
j4eval[2]=x10482;
j4eval[3]=IKsign(x10485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10487=(gconst5*r10);
IkReal x10488=(gconst4*r11);
CheckValue<IkReal> x10489=IKPowWithIntegerCheck(IKsign(((((2.0)*x10487*x10488))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10487*x10487)))+(((-1.0)*(x10488*x10488))))),-1);
if(!x10489.valid){
continue;
}
CheckValue<IkReal> x10490 = IKatan2WithCheck(IkReal(((((-1.0)*x10488))+x10487)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10489.value)))+(x10490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10491=IKsin(j4);
IkReal x10492=IKcos(j4);
IkReal x10493=(gconst4*r11);
IkReal x10494=(gconst5*r10);
IkReal x10495=(gconst4*r01);
IkReal x10496=(gconst5*r00);
IkReal x10497=(gconst4*r21);
IkReal x10498=(gconst5*r20);
IkReal x10499=((1.0)*x10492);
IkReal x10500=((1.0)*x10491);
evalcond[0]=((((-1.0)*x10498*x10500))+(((-1.0)*r22*x10499))+((x10491*x10497)));
evalcond[1]=((((-1.0)*x10496*x10500))+((x10491*x10495))+(((-1.0)*r02*x10499)));
evalcond[2]=((((-1.0)*x10493*x10499))+(((-1.0)*r12*x10500))+((x10492*x10494)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10499))+((x10491*x10493))+(((-1.0)*x10494*x10500)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10495*x10499))+((cj1*sj2))+(((-1.0)*r02*x10500))+((x10492*x10496)));
evalcond[5]=((((-1.0)*r22*x10500))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10492*x10498))+(((-1.0)*x10497*x10499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10501=((1.0)*gconst5);
CheckValue<IkReal> x10502 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10501))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10502.valid){
continue;
}
CheckValue<IkReal> x10503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10501))+(((-1.0)*gconst4*r20)))),-1);
if(!x10503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10502.value)+(((1.5707963267949)*(x10503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10504=IKsin(j4);
IkReal x10505=IKcos(j4);
IkReal x10506=(gconst4*r11);
IkReal x10507=(gconst5*r10);
IkReal x10508=(gconst4*r01);
IkReal x10509=(gconst5*r00);
IkReal x10510=(gconst4*r21);
IkReal x10511=(gconst5*r20);
IkReal x10512=((1.0)*x10505);
IkReal x10513=((1.0)*x10504);
evalcond[0]=((((-1.0)*x10511*x10513))+(((-1.0)*r22*x10512))+((x10504*x10510)));
evalcond[1]=((((-1.0)*r02*x10512))+((x10504*x10508))+(((-1.0)*x10509*x10513)));
evalcond[2]=(((x10505*x10507))+(((-1.0)*r12*x10513))+(((-1.0)*x10506*x10512)));
evalcond[3]=((-1.0)+((x10504*x10506))+(((-1.0)*r12*x10512))+(((-1.0)*x10507*x10513)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10513))+((cj1*sj2))+(((-1.0)*x10508*x10512))+((x10505*x10509)));
evalcond[5]=((((-1.0)*x10510*x10512))+(((-1.0)*r22*x10513))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10505*x10511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10514=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10514.valid){
continue;
}
CheckValue<IkReal> x10515 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10514.value)))+(x10515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10516=IKsin(j4);
IkReal x10517=IKcos(j4);
IkReal x10518=(gconst4*r11);
IkReal x10519=(gconst5*r10);
IkReal x10520=(gconst4*r01);
IkReal x10521=(gconst5*r00);
IkReal x10522=(gconst4*r21);
IkReal x10523=(gconst5*r20);
IkReal x10524=((1.0)*x10517);
IkReal x10525=((1.0)*x10516);
evalcond[0]=((((-1.0)*r22*x10524))+(((-1.0)*x10523*x10525))+((x10516*x10522)));
evalcond[1]=((((-1.0)*x10521*x10525))+(((-1.0)*r02*x10524))+((x10516*x10520)));
evalcond[2]=((((-1.0)*r12*x10525))+(((-1.0)*x10518*x10524))+((x10517*x10519)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10524))+((x10516*x10518))+(((-1.0)*x10519*x10525)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10520*x10524))+((x10517*x10521))+((cj1*sj2))+(((-1.0)*r02*x10525)));
evalcond[5]=(((x10517*x10523))+(((-1.0)*r22*x10525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10522*x10524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10526=((-1.0)*r21);
CheckValue<IkReal> x10529 = IKatan2WithCheck(IkReal(x10526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10529.valid){
continue;
}
IkReal x10527=((1.0)*(x10529.value));
IkReal x10528=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10527)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10527)));
IkReal gconst4=(x10526*x10528);
IkReal gconst5=((1.0)*r20*x10528);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10530=((-1.0)*r21);
CheckValue<IkReal> x10533 = IKatan2WithCheck(IkReal(x10530),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10533.valid){
continue;
}
IkReal x10531=((1.0)*(x10533.value));
IkReal x10532=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10531)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10531)));
IkReal gconst4=(x10530*x10532);
IkReal gconst5=((1.0)*r20*x10532);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10534=((-1.0)*r21);
CheckValue<IkReal> x10537 = IKatan2WithCheck(IkReal(x10534),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10537.valid){
continue;
}
IkReal x10535=((1.0)*(x10537.value));
IkReal x10536=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10535)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10535)));
IkReal gconst4=(x10534*x10536);
IkReal gconst5=((1.0)*r20*x10536);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10538=(gconst5*r10);
IkReal x10539=(gconst4*r11);
CheckValue<IkReal> x10540=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10539*x10539)+(((-2.0)*x10538*x10539))+(x10538*x10538))),-1);
if(!x10540.valid){
continue;
}
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(((((-1.0)*x10538))+x10539)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10540.value)))+(x10541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10542=IKcos(j4);
IkReal x10543=IKsin(j4);
IkReal x10544=(gconst4*r11);
IkReal x10545=(gconst5*r10);
IkReal x10546=(gconst5*r00);
IkReal x10547=(gconst5*r20);
IkReal x10548=((1.0)*x10542);
IkReal x10549=(gconst4*x10542);
IkReal x10550=((1.0)*x10543);
IkReal x10551=(gconst4*x10543);
evalcond[0]=(((r12*x10543))+(((-1.0)*x10545*x10548))+((x10542*x10544)));
evalcond[1]=((((-1.0)*x10547*x10550))+(((-1.0)*r22*x10548))+((r21*x10551)));
evalcond[2]=((((-1.0)*x10546*x10550))+(((-1.0)*r02*x10548))+((r01*x10551)));
evalcond[3]=((-1.0)+(((-1.0)*x10545*x10550))+(((-1.0)*r12*x10548))+((x10543*x10544)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10546*x10548))+((r02*x10543))+((r01*x10549)));
evalcond[5]=(((r22*x10543))+(((-1.0)*x10547*x10548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10552=((1.0)*gconst5);
CheckValue<IkReal> x10553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10552))+(((-1.0)*gconst4*r20)))),-1);
if(!x10553.valid){
continue;
}
CheckValue<IkReal> x10554 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10553.value)))+(x10554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10555=IKcos(j4);
IkReal x10556=IKsin(j4);
IkReal x10557=(gconst4*r11);
IkReal x10558=(gconst5*r10);
IkReal x10559=(gconst5*r00);
IkReal x10560=(gconst5*r20);
IkReal x10561=((1.0)*x10555);
IkReal x10562=(gconst4*x10555);
IkReal x10563=((1.0)*x10556);
IkReal x10564=(gconst4*x10556);
evalcond[0]=((((-1.0)*x10558*x10561))+((r12*x10556))+((x10555*x10557)));
evalcond[1]=((((-1.0)*r22*x10561))+(((-1.0)*x10560*x10563))+((r21*x10564)));
evalcond[2]=(((r01*x10564))+(((-1.0)*x10559*x10563))+(((-1.0)*r02*x10561)));
evalcond[3]=((-1.0)+(((-1.0)*x10558*x10563))+(((-1.0)*r12*x10561))+((x10556*x10557)));
evalcond[4]=(((r01*x10562))+((cj2*sj1))+((r02*x10556))+((cj1*sj2))+(((-1.0)*x10559*x10561)));
evalcond[5]=(((r22*x10556))+(((-1.0)*x10560*x10561))+((r21*x10562))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10565=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10565.valid){
continue;
}
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10565.value)))+(x10566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10567=IKcos(j4);
IkReal x10568=IKsin(j4);
IkReal x10569=(gconst4*r11);
IkReal x10570=(gconst5*r10);
IkReal x10571=(gconst5*r00);
IkReal x10572=(gconst5*r20);
IkReal x10573=((1.0)*x10567);
IkReal x10574=(gconst4*x10567);
IkReal x10575=((1.0)*x10568);
IkReal x10576=(gconst4*x10568);
evalcond[0]=(((r12*x10568))+((x10567*x10569))+(((-1.0)*x10570*x10573)));
evalcond[1]=((((-1.0)*r22*x10573))+((r21*x10576))+(((-1.0)*x10572*x10575)));
evalcond[2]=((((-1.0)*x10571*x10575))+((r01*x10576))+(((-1.0)*r02*x10573)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10573))+((x10568*x10569))+(((-1.0)*x10570*x10575)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10571*x10573))+((r01*x10574))+((cj1*sj2))+((r02*x10568)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10574))+((r22*x10568))+(((-1.0)*x10572*x10573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10577=((-1.0)*r21);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(x10577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
IkReal x10578=((1.0)*(x10580.value));
IkReal x10579=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10578)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10578)));
IkReal gconst4=(x10577*x10579);
IkReal gconst5=((1.0)*r20*x10579);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10581=((-1.0)*r21);
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(x10581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
IkReal x10582=((1.0)*(x10584.value));
IkReal x10583=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10582)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10582)));
IkReal gconst4=(x10581*x10583);
IkReal gconst5=((1.0)*r20*x10583);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10585=((-1.0)*r21);
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(x10585),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
IkReal x10586=((1.0)*(x10588.value));
IkReal x10587=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10586)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10586)));
IkReal gconst4=(x10585*x10587);
IkReal gconst5=((1.0)*r20*x10587);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10589=(gconst5*r10);
IkReal x10590=(gconst4*r11);
CheckValue<IkReal> x10591=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10589*x10590))+(x10590*x10590)+(x10589*x10589))),-1);
if(!x10591.valid){
continue;
}
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal((x10590+(((-1.0)*x10589)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10591.value)))+(x10592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10593=IKcos(j4);
IkReal x10594=IKsin(j4);
IkReal x10595=(gconst5*r10);
IkReal x10596=(gconst5*r00);
IkReal x10597=(gconst5*r20);
IkReal x10598=((1.0)*x10593);
IkReal x10599=(gconst4*x10594);
IkReal x10600=(gconst4*x10593);
IkReal x10601=((1.0)*x10594);
evalcond[0]=(((r11*x10600))+((r12*x10594))+(((-1.0)*x10595*x10598)));
evalcond[1]=(((r21*x10599))+(((-1.0)*r22*x10598))+(((-1.0)*x10597*x10601)));
evalcond[2]=((((-1.0)*r02*x10598))+((r01*x10599))+(((-1.0)*x10596*x10601)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10598))+((r11*x10599))+(((-1.0)*x10595*x10601)));
evalcond[4]=(((cj2*sj1))+((r21*x10600))+(((-1.0)*x10597*x10598))+((cj1*sj2))+((r22*x10594)));
evalcond[5]=(((r01*x10600))+(((-1.0)*x10596*x10598))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10602=((1.0)*gconst5);
CheckValue<IkReal> x10603 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10603.valid){
continue;
}
CheckValue<IkReal> x10604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10602))+(((-1.0)*gconst4*r20)))),-1);
if(!x10604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10603.value)+(((1.5707963267949)*(x10604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10605=IKcos(j4);
IkReal x10606=IKsin(j4);
IkReal x10607=(gconst5*r10);
IkReal x10608=(gconst5*r00);
IkReal x10609=(gconst5*r20);
IkReal x10610=((1.0)*x10605);
IkReal x10611=(gconst4*x10606);
IkReal x10612=(gconst4*x10605);
IkReal x10613=((1.0)*x10606);
evalcond[0]=(((r12*x10606))+(((-1.0)*x10607*x10610))+((r11*x10612)));
evalcond[1]=((((-1.0)*x10609*x10613))+(((-1.0)*r22*x10610))+((r21*x10611)));
evalcond[2]=((((-1.0)*r02*x10610))+((r01*x10611))+(((-1.0)*x10608*x10613)));
evalcond[3]=((-1.0)+(((-1.0)*x10607*x10613))+(((-1.0)*r12*x10610))+((r11*x10611)));
evalcond[4]=((((-1.0)*x10609*x10610))+((cj2*sj1))+((cj1*sj2))+((r22*x10606))+((r21*x10612)));
evalcond[5]=(((r02*x10606))+(((-1.0)*sj1*sj2))+((r01*x10612))+(((-1.0)*x10608*x10610))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10614=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10614.valid){
continue;
}
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10614.value)))+(x10615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10616=IKcos(j4);
IkReal x10617=IKsin(j4);
IkReal x10618=(gconst5*r10);
IkReal x10619=(gconst5*r00);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10616);
IkReal x10622=(gconst4*x10617);
IkReal x10623=(gconst4*x10616);
IkReal x10624=((1.0)*x10617);
evalcond[0]=(((r12*x10617))+(((-1.0)*x10618*x10621))+((r11*x10623)));
evalcond[1]=(((r21*x10622))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10624)));
evalcond[2]=((((-1.0)*r02*x10621))+((r01*x10622))+(((-1.0)*x10619*x10624)));
evalcond[3]=((-1.0)+(((-1.0)*x10618*x10624))+(((-1.0)*r12*x10621))+((r11*x10622)));
evalcond[4]=(((r21*x10623))+((cj2*sj1))+((r22*x10617))+((cj1*sj2))+(((-1.0)*x10620*x10621)));
evalcond[5]=(((r02*x10617))+(((-1.0)*sj1*sj2))+((r01*x10623))+(((-1.0)*x10619*x10621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10625=((-1.0)*r21);
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal(x10625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
IkReal x10626=((1.0)*(x10628.value));
IkReal x10627=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10626)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10626)));
IkReal gconst4=(x10625*x10627);
IkReal gconst5=((1.0)*r20*x10627);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10629=((-1.0)*r21);
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(x10629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
IkReal x10630=((1.0)*(x10632.value));
IkReal x10631=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10630)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10630)));
IkReal gconst4=(x10629*x10631);
IkReal gconst5=((1.0)*r20*x10631);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10633=((-1.0)*r21);
CheckValue<IkReal> x10636 = IKatan2WithCheck(IkReal(x10633),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10636.valid){
continue;
}
IkReal x10634=((1.0)*(x10636.value));
IkReal x10635=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10634)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10634)));
IkReal gconst4=(x10633*x10635);
IkReal gconst5=((1.0)*r20*x10635);
IkReal x10637=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10641=IKPowWithIntegerCheck(x10637,-1);
if(!x10641.valid){
continue;
}
IkReal x10638=x10641.value;
IkReal x10639=((1.0)*x10638);
IkReal x10640=((((-1.0)*x10639*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10638))+(((-1.0)*(r12*r12)))+(((-1.0)*x10639*(r10*r10)*(r20*r20))));
j4eval[0]=x10640;
j4eval[1]=r12;
j4eval[2]=x10637;
j4eval[3]=IKsign(x10640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10642=(gconst5*r10);
IkReal x10643=(gconst4*r11);
CheckValue<IkReal> x10644 = IKatan2WithCheck(IkReal(((((-1.0)*x10643))+x10642)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10644.valid){
continue;
}
CheckValue<IkReal> x10645=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10643*x10643)))+(((-1.0)*(x10642*x10642)))+(((-1.0)*(r12*r12)))+(((2.0)*x10642*x10643)))),-1);
if(!x10645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10644.value)+(((1.5707963267949)*(x10645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10646=IKsin(j4);
IkReal x10647=IKcos(j4);
IkReal x10648=(gconst4*r11);
IkReal x10649=(gconst5*r10);
IkReal x10650=(gconst5*r00);
IkReal x10651=(gconst5*r20);
IkReal x10652=((1.0)*x10647);
IkReal x10653=(gconst4*x10646);
IkReal x10654=((1.0)*x10646);
evalcond[0]=((((-1.0)*r22*x10652))+((r21*x10653))+(((-1.0)*x10651*x10654)));
evalcond[1]=((((-1.0)*r02*x10652))+(((-1.0)*x10650*x10654))+((r01*x10653)));
evalcond[2]=((((-1.0)*r12*x10654))+((x10647*x10649))+(((-1.0)*x10648*x10652)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10652))+((x10646*x10648))+(((-1.0)*x10649*x10654)));
evalcond[4]=((((-1.0)*gconst4*r21*x10652))+((cj2*sj1))+(((-1.0)*r22*x10654))+((cj1*sj2))+((x10647*x10651)));
evalcond[5]=(((x10647*x10650))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10654))+(((-1.0)*gconst4*r01*x10652))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10655=((1.0)*gconst5);
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
CheckValue<IkReal> x10657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10655))+(((-1.0)*gconst4*r20)))),-1);
if(!x10657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10656.value)+(((1.5707963267949)*(x10657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10658=IKsin(j4);
IkReal x10659=IKcos(j4);
IkReal x10660=(gconst4*r11);
IkReal x10661=(gconst5*r10);
IkReal x10662=(gconst5*r00);
IkReal x10663=(gconst5*r20);
IkReal x10664=((1.0)*x10659);
IkReal x10665=(gconst4*x10658);
IkReal x10666=((1.0)*x10658);
evalcond[0]=((((-1.0)*r22*x10664))+(((-1.0)*x10663*x10666))+((r21*x10665)));
evalcond[1]=((((-1.0)*r02*x10664))+((r01*x10665))+(((-1.0)*x10662*x10666)));
evalcond[2]=((((-1.0)*x10660*x10664))+((x10659*x10661))+(((-1.0)*r12*x10666)));
evalcond[3]=((-1.0)+(((-1.0)*x10661*x10666))+((x10658*x10660))+(((-1.0)*r12*x10664)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10664))+(((-1.0)*r22*x10666))+((x10659*x10663)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10666))+((x10659*x10662))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10667=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10667.valid){
continue;
}
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10667.value)))+(x10668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10669=IKsin(j4);
IkReal x10670=IKcos(j4);
IkReal x10671=(gconst4*r11);
IkReal x10672=(gconst5*r10);
IkReal x10673=(gconst5*r00);
IkReal x10674=(gconst5*r20);
IkReal x10675=((1.0)*x10670);
IkReal x10676=(gconst4*x10669);
IkReal x10677=((1.0)*x10669);
evalcond[0]=((((-1.0)*x10674*x10677))+(((-1.0)*r22*x10675))+((r21*x10676)));
evalcond[1]=((((-1.0)*r02*x10675))+(((-1.0)*x10673*x10677))+((r01*x10676)));
evalcond[2]=(((x10670*x10672))+(((-1.0)*x10671*x10675))+(((-1.0)*r12*x10677)));
evalcond[3]=((-1.0)+((x10669*x10671))+(((-1.0)*x10672*x10677))+(((-1.0)*r12*x10675)));
evalcond[4]=(((cj2*sj1))+((x10670*x10674))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10675))+(((-1.0)*r22*x10677)));
evalcond[5]=(((x10670*x10673))+(((-1.0)*r02*x10677))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10678=((-1.0)*r21);
IkReal x10679=((-1.0)*px);
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(x10678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
IkReal x10680=((1.0)*(x10681.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10680)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10679);
rxp1_1=(px*r21);
rxp1_2=(r11*x10679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10680)));
IkReal gconst4=x10678;
IkReal gconst5=((1.0)*r20);
IkReal x10682=((1.0)*r11*r21);
IkReal x10683=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10683))+(((-1.0)*x10682)));
j4eval[1]=(((sj3*x10683))+((sj3*x10682)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10684=((-1.0)*r21);
IkReal x10685=((-1.0)*px);
CheckValue<IkReal> x10687 = IKatan2WithCheck(IkReal(x10684),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10687.valid){
continue;
}
IkReal x10686=((1.0)*(x10687.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10686)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10685);
rxp1_1=(px*r21);
rxp1_2=(r11*x10685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10686)));
IkReal gconst4=x10684;
IkReal gconst5=((1.0)*r20);
IkReal x10688=((1.0)*cj3);
IkReal x10689=(r10*r20);
IkReal x10690=(r11*r21);
j4eval[0]=((((-1.0)*x10690))+(((-1.0)*x10689)));
j4eval[1]=((((-1.0)*x10688*x10690))+(((-1.0)*x10688*x10689)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10691=((-1.0)*r21);
IkReal x10692=((-1.0)*px);
CheckValue<IkReal> x10694 = IKatan2WithCheck(IkReal(x10691),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10694.valid){
continue;
}
IkReal x10693=((1.0)*(x10694.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10693)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10692);
rxp1_1=(px*r21);
rxp1_2=(r11*x10692);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10693)));
IkReal gconst4=x10691;
IkReal gconst5=((1.0)*r20);
IkReal x10695=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10695))+((r10*r20*x10695)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10696=((1.0)*r11);
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(r02,-1);
if(!x10697.valid){
continue;
}
CheckValue<IkReal> x10698=IKPowWithIntegerCheck(sj3,-1);
if(!x10698.valid){
continue;
}
CheckValue<IkReal> x10699=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10696))+((gconst5*r10*sj3))),-1);
if(!x10699.valid){
continue;
}
if( IKabs(((x10697.value)*(x10698.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10699.value)*(((((-1.0)*cj3*gconst5*x10696))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10697.value)*(x10698.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10699.value)*(((((-1.0)*cj3*gconst5*x10696))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10697.value)*(x10698.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10699.value)*(((((-1.0)*cj3*gconst5*x10696))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10700=IKsin(j4);
IkReal x10701=IKcos(j4);
IkReal x10702=(cj2*sj1);
IkReal x10703=(cj1*sj2);
IkReal x10704=(gconst5*sj3);
IkReal x10705=(gconst4*r11);
IkReal x10706=(sj1*sj2);
IkReal x10707=((1.0)*gconst5);
IkReal x10708=(cj1*cj2);
IkReal x10709=(gconst4*r21);
IkReal x10710=(cj3*gconst4);
IkReal x10711=(gconst4*sj3);
IkReal x10712=(cj3*gconst5);
IkReal x10713=(r20*x10701);
IkReal x10714=(r10*x10701);
IkReal x10715=(cj3*x10701);
IkReal x10716=(r02*x10700);
IkReal x10717=(x10703+x10702);
IkReal x10718=((1.0)*sj3*x10701);
evalcond[0]=((-1.0)*r02*x10701);
evalcond[1]=(((x10700*x10709))+(((-1.0)*r20*x10700*x10707)));
evalcond[2]=((((-1.0)*sj3*x10716))+x10717);
evalcond[3]=(((cj3*x10716))+(((-1.0)*x10706))+x10708);
evalcond[4]=((-1.0)+((x10700*x10705))+(((-1.0)*r10*x10700*x10707)));
evalcond[5]=(((r11*x10712))+(((-1.0)*x10705*x10718))+((r10*x10710))+((x10704*x10714)));
evalcond[6]=(((r11*x10704))+(((-1.0)*cj3*x10707*x10714))+((r10*x10711))+((x10705*x10715)));
evalcond[7]=(((r20*x10711))+(((-1.0)*cj3*x10707*x10713))+((x10709*x10715))+((r21*x10704))+x10717);
evalcond[8]=((((-1.0)*x10709*x10718))+(((-1.0)*x10708))+((r20*x10710))+((r21*x10712))+x10706+((x10704*x10713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10719=((1.0)*sj3);
IkReal x10720=(gconst4*r11);
IkReal x10721=((1.0)*gconst5*r10);
CheckValue<IkReal> x10722=IKPowWithIntegerCheck(((((-1.0)*x10721))+x10720),-1);
if(!x10722.valid){
continue;
}
CheckValue<IkReal> x10723=IKPowWithIntegerCheck(((((-1.0)*cj3*x10721))+((cj3*x10720))),-1);
if(!x10723.valid){
continue;
}
if( IKabs(x10722.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10723.value)*(((((-1.0)*gconst5*r11*x10719))+(((-1.0)*gconst4*r10*x10719)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10722.value)+IKsqr(((x10723.value)*(((((-1.0)*gconst5*r11*x10719))+(((-1.0)*gconst4*r10*x10719))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10722.value, ((x10723.value)*(((((-1.0)*gconst5*r11*x10719))+(((-1.0)*gconst4*r10*x10719))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10724=IKsin(j4);
IkReal x10725=IKcos(j4);
IkReal x10726=(cj2*sj1);
IkReal x10727=(cj1*sj2);
IkReal x10728=(gconst5*sj3);
IkReal x10729=(gconst4*r11);
IkReal x10730=(sj1*sj2);
IkReal x10731=((1.0)*gconst5);
IkReal x10732=(cj1*cj2);
IkReal x10733=(gconst4*r21);
IkReal x10734=(cj3*gconst4);
IkReal x10735=(gconst4*sj3);
IkReal x10736=(cj3*gconst5);
IkReal x10737=(r20*x10725);
IkReal x10738=(r10*x10725);
IkReal x10739=(cj3*x10725);
IkReal x10740=(r02*x10724);
IkReal x10741=(x10727+x10726);
IkReal x10742=((1.0)*sj3*x10725);
evalcond[0]=((-1.0)*r02*x10725);
evalcond[1]=((((-1.0)*r20*x10724*x10731))+((x10724*x10733)));
evalcond[2]=((((-1.0)*sj3*x10740))+x10741);
evalcond[3]=(((cj3*x10740))+(((-1.0)*x10730))+x10732);
evalcond[4]=((-1.0)+((x10724*x10729))+(((-1.0)*r10*x10724*x10731)));
evalcond[5]=(((r10*x10734))+(((-1.0)*x10729*x10742))+((r11*x10736))+((x10728*x10738)));
evalcond[6]=(((r10*x10735))+((x10729*x10739))+(((-1.0)*cj3*x10731*x10738))+((r11*x10728)));
evalcond[7]=(((r21*x10728))+((x10733*x10739))+((r20*x10735))+(((-1.0)*cj3*x10731*x10737))+x10741);
evalcond[8]=((((-1.0)*x10733*x10742))+((r21*x10736))+((r20*x10734))+(((-1.0)*x10732))+x10730+((x10728*x10737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10743=((1.0)*gconst5);
IkReal x10744=(gconst4*r11);
CheckValue<IkReal> x10745=IKPowWithIntegerCheck(((((-1.0)*r10*x10743))+x10744),-1);
if(!x10745.valid){
continue;
}
CheckValue<IkReal> x10746=IKPowWithIntegerCheck(((((-1.0)*sj3*x10744))+((gconst5*r10*sj3))),-1);
if(!x10746.valid){
continue;
}
if( IKabs(x10745.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10746.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10743)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10745.value)+IKsqr(((x10746.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10743))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10745.value, ((x10746.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10743))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10747=IKsin(j4);
IkReal x10748=IKcos(j4);
IkReal x10749=(cj2*sj1);
IkReal x10750=(cj1*sj2);
IkReal x10751=(gconst5*sj3);
IkReal x10752=(gconst4*r11);
IkReal x10753=(sj1*sj2);
IkReal x10754=((1.0)*gconst5);
IkReal x10755=(cj1*cj2);
IkReal x10756=(gconst4*r21);
IkReal x10757=(cj3*gconst4);
IkReal x10758=(gconst4*sj3);
IkReal x10759=(cj3*gconst5);
IkReal x10760=(r20*x10748);
IkReal x10761=(r10*x10748);
IkReal x10762=(cj3*x10748);
IkReal x10763=(r02*x10747);
IkReal x10764=(x10749+x10750);
IkReal x10765=((1.0)*sj3*x10748);
evalcond[0]=((-1.0)*r02*x10748);
evalcond[1]=(((x10747*x10756))+(((-1.0)*r20*x10747*x10754)));
evalcond[2]=((((-1.0)*sj3*x10763))+x10764);
evalcond[3]=(((cj3*x10763))+x10755+(((-1.0)*x10753)));
evalcond[4]=((-1.0)+((x10747*x10752))+(((-1.0)*r10*x10747*x10754)));
evalcond[5]=(((r10*x10757))+(((-1.0)*x10752*x10765))+((r11*x10759))+((x10751*x10761)));
evalcond[6]=(((r10*x10758))+(((-1.0)*cj3*x10754*x10761))+((r11*x10751))+((x10752*x10762)));
evalcond[7]=((((-1.0)*cj3*x10754*x10760))+((r20*x10758))+((x10756*x10762))+x10764+((r21*x10751)));
evalcond[8]=(((r20*x10757))+((x10751*x10760))+x10753+(((-1.0)*x10756*x10765))+((r21*x10759))+(((-1.0)*x10755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10766=gconst4*gconst4;
IkReal x10767=gconst5*gconst5;
IkReal x10768=(r10*r21);
IkReal x10769=((1.0)*cj3);
IkReal x10770=(r11*r21);
IkReal x10771=(r11*r20);
IkReal x10772=(r22*sj3);
IkReal x10773=(gconst4*r10);
IkReal x10774=((1.0)*sj3);
IkReal x10775=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10776 = IKatan2WithCheck(IkReal((((x10772*x10773))+((gconst5*r11*x10772)))),IkReal(((((-1.0)*x10767*x10771*x10774))+((gconst4*gconst5*sj3*x10770))+(((-1.0)*gconst5*r20*x10773*x10774))+((sj3*x10766*x10768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10776.valid){
continue;
}
CheckValue<IkReal> x10777=IKPowWithIntegerCheck(IKsign((((x10771*x10775))+(((-1.0)*r10*r20*x10767*x10769))+(((-1.0)*r12*r22*x10769))+(((-1.0)*x10766*x10769*x10770))+((x10768*x10775)))),-1);
if(!x10777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10776.value)+(((1.5707963267949)*(x10777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10778=IKsin(j4);
IkReal x10779=IKcos(j4);
IkReal x10780=(cj2*sj1);
IkReal x10781=(cj1*sj2);
IkReal x10782=(gconst5*sj3);
IkReal x10783=(gconst4*r11);
IkReal x10784=(sj1*sj2);
IkReal x10785=(gconst5*r10);
IkReal x10786=(cj1*cj2);
IkReal x10787=(gconst4*r01);
IkReal x10788=(gconst4*r21);
IkReal x10789=(gconst5*r00);
IkReal x10790=(cj3*gconst5);
IkReal x10791=(gconst4*sj3);
IkReal x10792=(cj3*gconst4);
IkReal x10793=((1.0)*x10779);
IkReal x10794=((1.0)*x10778);
IkReal x10795=(cj3*x10778);
IkReal x10796=(cj3*x10779);
IkReal x10797=(x10781+x10780);
evalcond[0]=(((x10778*x10788))+(((-1.0)*gconst5*r20*x10794))+(((-1.0)*r22*x10793)));
evalcond[1]=((((-1.0)*r02*x10793))+((x10778*x10787))+(((-1.0)*x10789*x10794)));
evalcond[2]=((-1.0)+((x10778*x10783))+(((-1.0)*r12*x10793))+(((-1.0)*x10785*x10794)));
evalcond[3]=(((r10*x10791))+((r11*x10782))+((r12*x10795))+(((-1.0)*cj3*x10785*x10793))+((x10783*x10796)));
evalcond[4]=(((r10*x10792))+(((-1.0)*sj3*x10783*x10793))+((r10*x10779*x10782))+(((-1.0)*r12*sj3*x10794))+((r11*x10790)));
evalcond[5]=(((r21*x10782))+((r20*x10791))+(((-1.0)*r20*x10790*x10793))+x10797+((x10788*x10796))+((r22*x10795)));
evalcond[6]=((((-1.0)*sj3*x10787*x10793))+(((-1.0)*r02*sj3*x10794))+((r00*x10779*x10782))+((r00*x10792))+x10797+((r01*x10790)));
evalcond[7]=(((r02*x10795))+((x10787*x10796))+((r01*x10782))+(((-1.0)*x10784))+((r00*x10791))+x10786+(((-1.0)*cj3*x10789*x10793)));
evalcond[8]=(((r21*x10790))+((r20*x10792))+(((-1.0)*r22*sj3*x10794))+(((-1.0)*x10786))+x10784+((r20*x10779*x10782))+(((-1.0)*sj3*x10788*x10793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10798=((1.0)*gconst5);
CheckValue<IkReal> x10799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10798))+(((-1.0)*gconst4*r20)))),-1);
if(!x10799.valid){
continue;
}
CheckValue<IkReal> x10800 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10798))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10799.value)))+(x10800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10801=IKsin(j4);
IkReal x10802=IKcos(j4);
IkReal x10803=(cj2*sj1);
IkReal x10804=(cj1*sj2);
IkReal x10805=(gconst5*sj3);
IkReal x10806=(gconst4*r11);
IkReal x10807=(sj1*sj2);
IkReal x10808=(gconst5*r10);
IkReal x10809=(cj1*cj2);
IkReal x10810=(gconst4*r01);
IkReal x10811=(gconst4*r21);
IkReal x10812=(gconst5*r00);
IkReal x10813=(cj3*gconst5);
IkReal x10814=(gconst4*sj3);
IkReal x10815=(cj3*gconst4);
IkReal x10816=((1.0)*x10802);
IkReal x10817=((1.0)*x10801);
IkReal x10818=(cj3*x10801);
IkReal x10819=(cj3*x10802);
IkReal x10820=(x10804+x10803);
evalcond[0]=((((-1.0)*gconst5*r20*x10817))+(((-1.0)*r22*x10816))+((x10801*x10811)));
evalcond[1]=((((-1.0)*r02*x10816))+(((-1.0)*x10812*x10817))+((x10801*x10810)));
evalcond[2]=((-1.0)+(((-1.0)*x10808*x10817))+((x10801*x10806))+(((-1.0)*r12*x10816)));
evalcond[3]=(((x10806*x10819))+((r11*x10805))+((r10*x10814))+(((-1.0)*cj3*x10808*x10816))+((r12*x10818)));
evalcond[4]=((((-1.0)*sj3*x10806*x10816))+((r10*x10815))+((r10*x10802*x10805))+(((-1.0)*r12*sj3*x10817))+((r11*x10813)));
evalcond[5]=(((r22*x10818))+((x10811*x10819))+((r20*x10814))+((r21*x10805))+(((-1.0)*r20*x10813*x10816))+x10820);
evalcond[6]=((((-1.0)*r02*sj3*x10817))+((r00*x10802*x10805))+(((-1.0)*sj3*x10810*x10816))+((r01*x10813))+((r00*x10815))+x10820);
evalcond[7]=(((r02*x10818))+((x10810*x10819))+((r01*x10805))+(((-1.0)*cj3*x10812*x10816))+(((-1.0)*x10807))+((r00*x10814))+x10809);
evalcond[8]=(((r20*x10802*x10805))+(((-1.0)*r22*sj3*x10817))+((r20*x10815))+(((-1.0)*x10809))+(((-1.0)*sj3*x10811*x10816))+((r21*x10813))+x10807);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10821.valid){
continue;
}
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10821.value)))+(x10822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10823=IKsin(j4);
IkReal x10824=IKcos(j4);
IkReal x10825=(cj2*sj1);
IkReal x10826=(cj1*sj2);
IkReal x10827=(gconst5*sj3);
IkReal x10828=(gconst4*r11);
IkReal x10829=(sj1*sj2);
IkReal x10830=(gconst5*r10);
IkReal x10831=(cj1*cj2);
IkReal x10832=(gconst4*r01);
IkReal x10833=(gconst4*r21);
IkReal x10834=(gconst5*r00);
IkReal x10835=(cj3*gconst5);
IkReal x10836=(gconst4*sj3);
IkReal x10837=(cj3*gconst4);
IkReal x10838=((1.0)*x10824);
IkReal x10839=((1.0)*x10823);
IkReal x10840=(cj3*x10823);
IkReal x10841=(cj3*x10824);
IkReal x10842=(x10825+x10826);
evalcond[0]=(((x10823*x10833))+(((-1.0)*gconst5*r20*x10839))+(((-1.0)*r22*x10838)));
evalcond[1]=(((x10823*x10832))+(((-1.0)*x10834*x10839))+(((-1.0)*r02*x10838)));
evalcond[2]=((-1.0)+((x10823*x10828))+(((-1.0)*r12*x10838))+(((-1.0)*x10830*x10839)));
evalcond[3]=((((-1.0)*cj3*x10830*x10838))+((x10828*x10841))+((r10*x10836))+((r12*x10840))+((r11*x10827)));
evalcond[4]=((((-1.0)*sj3*x10828*x10838))+((r10*x10824*x10827))+((r10*x10837))+(((-1.0)*r12*sj3*x10839))+((r11*x10835)));
evalcond[5]=(((r21*x10827))+((x10833*x10841))+((r22*x10840))+((r20*x10836))+(((-1.0)*r20*x10835*x10838))+x10842);
evalcond[6]=((((-1.0)*r02*sj3*x10839))+(((-1.0)*sj3*x10832*x10838))+((r00*x10824*x10827))+((r01*x10835))+((r00*x10837))+x10842);
evalcond[7]=((((-1.0)*x10829))+((x10832*x10841))+((r02*x10840))+(((-1.0)*cj3*x10834*x10838))+((r00*x10836))+((r01*x10827))+x10831);
evalcond[8]=((((-1.0)*x10831))+(((-1.0)*sj3*x10833*x10838))+(((-1.0)*r22*sj3*x10839))+((r20*x10824*x10827))+((r20*x10837))+((r21*x10835))+x10829);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10843=((-1.0)*r21);
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(x10843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
IkReal x10844=((1.0)*(x10846.value));
IkReal x10845=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10844)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10844)));
IkReal gconst4=(x10843*x10845);
IkReal gconst5=((1.0)*r20*x10845);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10847=((-1.0)*r21);
CheckValue<IkReal> x10850 = IKatan2WithCheck(IkReal(x10847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10850.valid){
continue;
}
IkReal x10848=((1.0)*(x10850.value));
IkReal x10849=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10848)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10848)));
IkReal gconst4=(x10847*x10849);
IkReal gconst5=((1.0)*r20*x10849);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10851=((-1.0)*r21);
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(x10851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
IkReal x10852=((1.0)*(x10854.value));
IkReal x10853=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10852)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10852)));
IkReal gconst4=(x10851*x10853);
IkReal gconst5=((1.0)*r20*x10853);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10855=((-1.0)*r21);
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(x10855),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
IkReal x10856=((1.0)*(x10858.value));
IkReal x10857=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10856)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10856)));
IkReal gconst4=(x10855*x10857);
IkReal gconst5=((1.0)*r20*x10857);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10859=((-1.0)*r21);
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(x10859),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
IkReal x10860=((1.0)*(x10862.value));
IkReal x10861=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10860)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10860)));
IkReal gconst4=(x10859*x10861);
IkReal gconst5=((1.0)*r20*x10861);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10863=((-1.0)*r21);
CheckValue<IkReal> x10866 = IKatan2WithCheck(IkReal(x10863),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10866.valid){
continue;
}
IkReal x10864=((1.0)*(x10866.value));
IkReal x10865=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10864)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10864)));
IkReal gconst4=(x10863*x10865);
IkReal gconst5=((1.0)*r20*x10865);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10867=(gconst5*r10);
IkReal x10868=(gconst4*r11);
CheckValue<IkReal> x10869=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10867*x10868))+(x10868*x10868)+(x10867*x10867))),-1);
if(!x10869.valid){
continue;
}
CheckValue<IkReal> x10870 = IKatan2WithCheck(IkReal(((((-1.0)*x10868))+x10867)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10869.value)))+(x10870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10871=IKsin(j4);
IkReal x10872=IKcos(j4);
IkReal x10873=(gconst4*r11);
IkReal x10874=((1.0)*cj1);
IkReal x10875=(gconst5*r10);
IkReal x10876=(gconst4*r01);
IkReal x10877=(gconst5*r00);
IkReal x10878=(gconst4*r21);
IkReal x10879=(gconst5*r20);
IkReal x10880=((1.0)*x10872);
IkReal x10881=((1.0)*x10871);
evalcond[0]=((((-1.0)*x10879*x10881))+(((-1.0)*r22*x10880))+((x10871*x10878)));
evalcond[1]=((((-1.0)*r02*x10880))+(((-1.0)*x10877*x10881))+((x10871*x10876)));
evalcond[2]=((((-1.0)*x10873*x10880))+(((-1.0)*r12*x10881))+((x10872*x10875)));
evalcond[3]=((1.0)+(((-1.0)*x10875*x10881))+((x10871*x10873))+(((-1.0)*r12*x10880)));
evalcond[4]=((((-1.0)*x10878*x10880))+((sj1*sj2))+(((-1.0)*r22*x10881))+((x10872*x10879))+(((-1.0)*cj2*x10874)));
evalcond[5]=((((-1.0)*r02*x10881))+(((-1.0)*x10876*x10880))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10874))+((x10872*x10877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10882=((1.0)*gconst5);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
CheckValue<IkReal> x10884=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10882)))),-1);
if(!x10884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10883.value)+(((1.5707963267949)*(x10884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10885=IKsin(j4);
IkReal x10886=IKcos(j4);
IkReal x10887=(gconst4*r11);
IkReal x10888=((1.0)*cj1);
IkReal x10889=(gconst5*r10);
IkReal x10890=(gconst4*r01);
IkReal x10891=(gconst5*r00);
IkReal x10892=(gconst4*r21);
IkReal x10893=(gconst5*r20);
IkReal x10894=((1.0)*x10886);
IkReal x10895=((1.0)*x10885);
evalcond[0]=(((x10885*x10892))+(((-1.0)*x10893*x10895))+(((-1.0)*r22*x10894)));
evalcond[1]=(((x10885*x10890))+(((-1.0)*x10891*x10895))+(((-1.0)*r02*x10894)));
evalcond[2]=((((-1.0)*x10887*x10894))+((x10886*x10889))+(((-1.0)*r12*x10895)));
evalcond[3]=((1.0)+((x10885*x10887))+(((-1.0)*x10889*x10895))+(((-1.0)*r12*x10894)));
evalcond[4]=((((-1.0)*x10892*x10894))+((sj1*sj2))+(((-1.0)*cj2*x10888))+((x10886*x10893))+(((-1.0)*r22*x10895)));
evalcond[5]=((((-1.0)*sj2*x10888))+(((-1.0)*x10890*x10894))+(((-1.0)*r02*x10895))+(((-1.0)*cj2*sj1))+((x10886*x10891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10896.value)+(((1.5707963267949)*(x10897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10898=IKsin(j4);
IkReal x10899=IKcos(j4);
IkReal x10900=(gconst4*r11);
IkReal x10901=((1.0)*cj1);
IkReal x10902=(gconst5*r10);
IkReal x10903=(gconst4*r01);
IkReal x10904=(gconst5*r00);
IkReal x10905=(gconst4*r21);
IkReal x10906=(gconst5*r20);
IkReal x10907=((1.0)*x10899);
IkReal x10908=((1.0)*x10898);
evalcond[0]=((((-1.0)*r22*x10907))+((x10898*x10905))+(((-1.0)*x10906*x10908)));
evalcond[1]=((((-1.0)*x10904*x10908))+((x10898*x10903))+(((-1.0)*r02*x10907)));
evalcond[2]=((((-1.0)*x10900*x10907))+(((-1.0)*r12*x10908))+((x10899*x10902)));
evalcond[3]=((1.0)+(((-1.0)*x10902*x10908))+(((-1.0)*r12*x10907))+((x10898*x10900)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10908))+(((-1.0)*cj2*x10901))+((x10899*x10906))+(((-1.0)*x10905*x10907)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10901))+(((-1.0)*x10903*x10907))+((x10899*x10904))+(((-1.0)*r02*x10908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10909=((-1.0)*r21);
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(x10909),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
IkReal x10910=((1.0)*(x10912.value));
IkReal x10911=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10910)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10910)));
IkReal gconst4=(x10909*x10911);
IkReal gconst5=((1.0)*r20*x10911);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10913=((-1.0)*r21);
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal(x10913),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
IkReal x10914=((1.0)*(x10916.value));
IkReal x10915=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10914)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10914)));
IkReal gconst4=(x10913*x10915);
IkReal gconst5=((1.0)*r20*x10915);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10917=((-1.0)*r21);
CheckValue<IkReal> x10920 = IKatan2WithCheck(IkReal(x10917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10920.valid){
continue;
}
IkReal x10918=((1.0)*(x10920.value));
IkReal x10919=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10918)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10918)));
IkReal gconst4=(x10917*x10919);
IkReal gconst5=((1.0)*r20*x10919);
IkReal x10921=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10925=IKPowWithIntegerCheck(x10921,-1);
if(!x10925.valid){
continue;
}
IkReal x10922=x10925.value;
IkReal x10923=((1.0)*x10922);
IkReal x10924=((((-2.0)*r10*r11*r20*r21*x10922))+(((-1.0)*x10923*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10923*(r11*r11)*(r21*r21))));
j4eval[0]=x10924;
j4eval[1]=r12;
j4eval[2]=x10921;
j4eval[3]=IKsign(x10924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10926=(gconst5*r10);
IkReal x10927=(gconst4*r11);
CheckValue<IkReal> x10928=IKPowWithIntegerCheck(IKsign(((((2.0)*x10926*x10927))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10926*x10926)))+(((-1.0)*(x10927*x10927))))),-1);
if(!x10928.valid){
continue;
}
CheckValue<IkReal> x10929 = IKatan2WithCheck(IkReal(((((-1.0)*x10926))+x10927)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10928.value)))+(x10929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10930=IKcos(j4);
IkReal x10931=IKsin(j4);
IkReal x10932=(gconst4*r11);
IkReal x10933=(gconst5*r10);
IkReal x10934=((1.0)*cj1);
IkReal x10935=(gconst5*r00);
IkReal x10936=(gconst5*r20);
IkReal x10937=((1.0)*x10930);
IkReal x10938=(gconst4*x10930);
IkReal x10939=((1.0)*x10931);
IkReal x10940=(gconst4*x10931);
evalcond[0]=(((x10930*x10932))+((r12*x10931))+(((-1.0)*x10933*x10937)));
evalcond[1]=((((-1.0)*r22*x10937))+((r21*x10940))+(((-1.0)*x10936*x10939)));
evalcond[2]=(((r01*x10940))+(((-1.0)*r02*x10937))+(((-1.0)*x10935*x10939)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10937))+((x10931*x10932))+(((-1.0)*x10933*x10939)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10936*x10937))+((r22*x10931))+((r21*x10938))+(((-1.0)*cj2*x10934)));
evalcond[5]=(((r02*x10931))+(((-1.0)*cj2*sj1))+((r01*x10938))+(((-1.0)*x10935*x10937))+(((-1.0)*sj2*x10934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10941=((1.0)*gconst5);
CheckValue<IkReal> x10942 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10942.valid){
continue;
}
CheckValue<IkReal> x10943=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10941)))),-1);
if(!x10943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10942.value)+(((1.5707963267949)*(x10943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10944=IKcos(j4);
IkReal x10945=IKsin(j4);
IkReal x10946=(gconst4*r11);
IkReal x10947=(gconst5*r10);
IkReal x10948=((1.0)*cj1);
IkReal x10949=(gconst5*r00);
IkReal x10950=(gconst5*r20);
IkReal x10951=((1.0)*x10944);
IkReal x10952=(gconst4*x10944);
IkReal x10953=((1.0)*x10945);
IkReal x10954=(gconst4*x10945);
evalcond[0]=((((-1.0)*x10947*x10951))+((r12*x10945))+((x10944*x10946)));
evalcond[1]=((((-1.0)*x10950*x10953))+(((-1.0)*r22*x10951))+((r21*x10954)));
evalcond[2]=((((-1.0)*x10949*x10953))+((r01*x10954))+(((-1.0)*r02*x10951)));
evalcond[3]=((1.0)+(((-1.0)*x10947*x10953))+((x10945*x10946))+(((-1.0)*r12*x10951)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10950*x10951))+((r21*x10952))+((r22*x10945))+(((-1.0)*cj2*x10948)));
evalcond[5]=((((-1.0)*x10949*x10951))+(((-1.0)*cj2*sj1))+((r01*x10952))+(((-1.0)*sj2*x10948))+((r02*x10945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10955 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10955.valid){
continue;
}
CheckValue<IkReal> x10956=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10955.value)+(((1.5707963267949)*(x10956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10957=IKcos(j4);
IkReal x10958=IKsin(j4);
IkReal x10959=(gconst4*r11);
IkReal x10960=(gconst5*r10);
IkReal x10961=((1.0)*cj1);
IkReal x10962=(gconst5*r00);
IkReal x10963=(gconst5*r20);
IkReal x10964=((1.0)*x10957);
IkReal x10965=(gconst4*x10957);
IkReal x10966=((1.0)*x10958);
IkReal x10967=(gconst4*x10958);
evalcond[0]=((((-1.0)*x10960*x10964))+((r12*x10958))+((x10957*x10959)));
evalcond[1]=((((-1.0)*x10963*x10966))+(((-1.0)*r22*x10964))+((r21*x10967)));
evalcond[2]=(((r01*x10967))+(((-1.0)*x10962*x10966))+(((-1.0)*r02*x10964)));
evalcond[3]=((1.0)+(((-1.0)*x10960*x10966))+((x10958*x10959))+(((-1.0)*r12*x10964)));
evalcond[4]=(((r22*x10958))+(((-1.0)*x10963*x10964))+((sj1*sj2))+((r21*x10965))+(((-1.0)*cj2*x10961)));
evalcond[5]=(((r02*x10958))+((r01*x10965))+(((-1.0)*cj2*sj1))+(((-1.0)*x10962*x10964))+(((-1.0)*sj2*x10961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10968=((-1.0)*r21);
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(x10968),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
IkReal x10969=((1.0)*(x10971.value));
IkReal x10970=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10969)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10969)));
IkReal gconst4=(x10968*x10970);
IkReal gconst5=((1.0)*r20*x10970);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10972=((-1.0)*r21);
CheckValue<IkReal> x10975 = IKatan2WithCheck(IkReal(x10972),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10975.valid){
continue;
}
IkReal x10973=((1.0)*(x10975.value));
IkReal x10974=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10973)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10973)));
IkReal gconst4=(x10972*x10974);
IkReal gconst5=((1.0)*r20*x10974);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10976=((-1.0)*r21);
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(x10976),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
IkReal x10977=((1.0)*(x10979.value));
IkReal x10978=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10977)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10977)));
IkReal gconst4=(x10976*x10978);
IkReal gconst5=((1.0)*r20*x10978);
IkReal x10980=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10984=IKPowWithIntegerCheck(x10980,-1);
if(!x10984.valid){
continue;
}
IkReal x10981=x10984.value;
IkReal x10982=((1.0)*x10981);
IkReal x10983=((((-1.0)*(r12*r12)))+(((-1.0)*x10982*(r10*r10)*(r20*r20)))+(((-1.0)*x10982*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10981)));
j4eval[0]=x10983;
j4eval[1]=r12;
j4eval[2]=x10980;
j4eval[3]=IKsign(x10983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10985=(gconst5*r10);
IkReal x10986=(gconst4*r11);
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10986*x10986)))+(((-1.0)*(r12*r12)))+(((2.0)*x10985*x10986))+(((-1.0)*(x10985*x10985))))),-1);
if(!x10987.valid){
continue;
}
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(((((-1.0)*x10985))+x10986)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10987.value)))+(x10988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10989=IKcos(j4);
IkReal x10990=IKsin(j4);
IkReal x10991=(gconst4*r11);
IkReal x10992=(gconst5*r10);
IkReal x10993=(gconst5*r00);
IkReal x10994=(gconst5*r20);
IkReal x10995=((1.0)*x10989);
IkReal x10996=(gconst4*x10989);
IkReal x10997=((1.0)*x10990);
IkReal x10998=(gconst4*x10990);
evalcond[0]=(((r12*x10990))+(((-1.0)*x10992*x10995))+((x10989*x10991)));
evalcond[1]=(((r21*x10998))+(((-1.0)*r22*x10995))+(((-1.0)*x10994*x10997)));
evalcond[2]=(((r01*x10998))+(((-1.0)*x10993*x10997))+(((-1.0)*r02*x10995)));
evalcond[3]=((1.0)+(((-1.0)*x10992*x10997))+(((-1.0)*r12*x10995))+((x10990*x10991)));
evalcond[4]=(((cj2*sj1))+((r22*x10990))+((r21*x10996))+((cj1*sj2))+(((-1.0)*x10994*x10995)));
evalcond[5]=(((r01*x10996))+(((-1.0)*x10993*x10995))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10999=((1.0)*gconst5);
CheckValue<IkReal> x11000 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10999))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11000.valid){
continue;
}
CheckValue<IkReal> x11001=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10999)))),-1);
if(!x11001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11000.value)+(((1.5707963267949)*(x11001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11002=IKcos(j4);
IkReal x11003=IKsin(j4);
IkReal x11004=(gconst4*r11);
IkReal x11005=(gconst5*r10);
IkReal x11006=(gconst5*r00);
IkReal x11007=(gconst5*r20);
IkReal x11008=((1.0)*x11002);
IkReal x11009=(gconst4*x11002);
IkReal x11010=((1.0)*x11003);
IkReal x11011=(gconst4*x11003);
evalcond[0]=(((x11002*x11004))+(((-1.0)*x11005*x11008))+((r12*x11003)));
evalcond[1]=((((-1.0)*r22*x11008))+(((-1.0)*x11007*x11010))+((r21*x11011)));
evalcond[2]=((((-1.0)*r02*x11008))+(((-1.0)*x11006*x11010))+((r01*x11011)));
evalcond[3]=((1.0)+(((-1.0)*x11005*x11010))+((x11003*x11004))+(((-1.0)*r12*x11008)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11007*x11008))+((cj1*sj2))+((r21*x11009))+((r22*x11003)));
evalcond[5]=(((r02*x11003))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11009))+(((-1.0)*x11006*x11008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11012 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11012.valid){
continue;
}
CheckValue<IkReal> x11013=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11012.value)+(((1.5707963267949)*(x11013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11014=IKcos(j4);
IkReal x11015=IKsin(j4);
IkReal x11016=(gconst4*r11);
IkReal x11017=(gconst5*r10);
IkReal x11018=(gconst5*r00);
IkReal x11019=(gconst5*r20);
IkReal x11020=((1.0)*x11014);
IkReal x11021=(gconst4*x11014);
IkReal x11022=((1.0)*x11015);
IkReal x11023=(gconst4*x11015);
evalcond[0]=(((r12*x11015))+(((-1.0)*x11017*x11020))+((x11014*x11016)));
evalcond[1]=(((r21*x11023))+(((-1.0)*r22*x11020))+(((-1.0)*x11019*x11022)));
evalcond[2]=((((-1.0)*r02*x11020))+((r01*x11023))+(((-1.0)*x11018*x11022)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11020))+(((-1.0)*x11017*x11022))+((x11015*x11016)));
evalcond[4]=(((cj2*sj1))+((r21*x11021))+((cj1*sj2))+((r22*x11015))+(((-1.0)*x11019*x11020)));
evalcond[5]=(((r01*x11021))+(((-1.0)*x11018*x11020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x11015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11024=((-1.0)*r21);
CheckValue<IkReal> x11027 = IKatan2WithCheck(IkReal(x11024),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11027.valid){
continue;
}
IkReal x11025=((1.0)*(x11027.value));
IkReal x11026=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11025)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11025)));
IkReal gconst4=(x11024*x11026);
IkReal gconst5=((1.0)*r20*x11026);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11028=((-1.0)*r21);
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal(x11028),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
IkReal x11029=((1.0)*(x11031.value));
IkReal x11030=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11029)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11029)));
IkReal gconst4=(x11028*x11030);
IkReal gconst5=((1.0)*r20*x11030);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11032=((-1.0)*r21);
CheckValue<IkReal> x11035 = IKatan2WithCheck(IkReal(x11032),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11035.valid){
continue;
}
IkReal x11033=((1.0)*(x11035.value));
IkReal x11034=x9737;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11033)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11033)));
IkReal gconst4=(x11032*x11034);
IkReal gconst5=((1.0)*r20*x11034);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11036=(gconst5*r10);
IkReal x11037=(gconst4*r11);
CheckValue<IkReal> x11038 = IKatan2WithCheck(IkReal(((((-1.0)*x11037))+x11036)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11038.valid){
continue;
}
CheckValue<IkReal> x11039=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11037*x11037)+(x11036*x11036)+(((-2.0)*x11036*x11037)))),-1);
if(!x11039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11038.value)+(((1.5707963267949)*(x11039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11040=IKsin(j4);
IkReal x11041=IKcos(j4);
IkReal x11042=(gconst4*r11);
IkReal x11043=(gconst5*r10);
IkReal x11044=(gconst4*r01);
IkReal x11045=(gconst5*r00);
IkReal x11046=(gconst4*r21);
IkReal x11047=(gconst5*r20);
IkReal x11048=((1.0)*x11041);
IkReal x11049=((1.0)*x11040);
evalcond[0]=((((-1.0)*r22*x11048))+((x11040*x11046))+(((-1.0)*x11047*x11049)));
evalcond[1]=((((-1.0)*x11045*x11049))+((x11040*x11044))+(((-1.0)*r02*x11048)));
evalcond[2]=(((x11041*x11043))+(((-1.0)*r12*x11049))+(((-1.0)*x11042*x11048)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11048))+((x11040*x11042))+(((-1.0)*x11043*x11049)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11049))+((x11041*x11047))+((cj1*sj2))+(((-1.0)*x11046*x11048)));
evalcond[5]=(((x11041*x11045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x11049))+(((-1.0)*x11044*x11048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11050=((1.0)*gconst5);
CheckValue<IkReal> x11051 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11050))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11051.valid){
continue;
}
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11050)))),-1);
if(!x11052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11051.value)+(((1.5707963267949)*(x11052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11053=IKsin(j4);
IkReal x11054=IKcos(j4);
IkReal x11055=(gconst4*r11);
IkReal x11056=(gconst5*r10);
IkReal x11057=(gconst4*r01);
IkReal x11058=(gconst5*r00);
IkReal x11059=(gconst4*r21);
IkReal x11060=(gconst5*r20);
IkReal x11061=((1.0)*x11054);
IkReal x11062=((1.0)*x11053);
evalcond[0]=((((-1.0)*r22*x11061))+(((-1.0)*x11060*x11062))+((x11053*x11059)));
evalcond[1]=((((-1.0)*r02*x11061))+(((-1.0)*x11058*x11062))+((x11053*x11057)));
evalcond[2]=(((x11054*x11056))+(((-1.0)*x11055*x11061))+(((-1.0)*r12*x11062)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11061))+((x11053*x11055))+(((-1.0)*x11056*x11062)));
evalcond[4]=((((-1.0)*r22*x11062))+((cj2*sj1))+((cj1*sj2))+((x11054*x11060))+(((-1.0)*x11059*x11061)));
evalcond[5]=((((-1.0)*r02*x11062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11054*x11058))+(((-1.0)*x11057*x11061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11063 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11063.valid){
continue;
}
CheckValue<IkReal> x11064=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11063.value)+(((1.5707963267949)*(x11064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11065=IKsin(j4);
IkReal x11066=IKcos(j4);
IkReal x11067=(gconst4*r11);
IkReal x11068=(gconst5*r10);
IkReal x11069=(gconst4*r01);
IkReal x11070=(gconst5*r00);
IkReal x11071=(gconst4*r21);
IkReal x11072=(gconst5*r20);
IkReal x11073=((1.0)*x11066);
IkReal x11074=((1.0)*x11065);
evalcond[0]=((((-1.0)*x11072*x11074))+((x11065*x11071))+(((-1.0)*r22*x11073)));
evalcond[1]=(((x11065*x11069))+(((-1.0)*x11070*x11074))+(((-1.0)*r02*x11073)));
evalcond[2]=((((-1.0)*x11067*x11073))+((x11066*x11068))+(((-1.0)*r12*x11074)));
evalcond[3]=((1.0)+((x11065*x11067))+(((-1.0)*x11068*x11074))+(((-1.0)*r12*x11073)));
evalcond[4]=(((x11066*x11072))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11071*x11073))+(((-1.0)*r22*x11074)));
evalcond[5]=(((x11066*x11070))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x11074))+((sj1*sj2))+(((-1.0)*x11069*x11073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11075=gconst4*gconst4;
IkReal x11076=gconst5*gconst5;
IkReal x11077=(r10*r21);
IkReal x11078=((1.0)*cj3);
IkReal x11079=(r11*r21);
IkReal x11080=(r11*r20);
IkReal x11081=(r22*sj3);
IkReal x11082=(gconst4*r10);
IkReal x11083=((1.0)*sj3);
IkReal x11084=(cj3*gconst4*gconst5);
CheckValue<IkReal> x11085=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11075*x11078*x11079))+(((-1.0)*r12*r22*x11078))+((x11077*x11084))+((x11080*x11084))+(((-1.0)*r10*r20*x11076*x11078)))),-1);
if(!x11085.valid){
continue;
}
CheckValue<IkReal> x11086 = IKatan2WithCheck(IkReal((((gconst5*r11*x11081))+((x11081*x11082)))),IkReal((((sj3*x11075*x11077))+(((-1.0)*gconst5*r20*x11082*x11083))+((gconst4*gconst5*sj3*x11079))+(((-1.0)*x11076*x11080*x11083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11085.value)))+(x11086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11087=IKsin(j4);
IkReal x11088=IKcos(j4);
IkReal x11089=(sj1*sj2);
IkReal x11090=(gconst5*sj3);
IkReal x11091=(cj3*gconst5);
IkReal x11092=(gconst4*r11);
IkReal x11093=((1.0)*cj1);
IkReal x11094=(gconst4*r01);
IkReal x11095=(cj2*sj1);
IkReal x11096=(gconst4*r21);
IkReal x11097=(gconst4*sj3);
IkReal x11098=(cj3*gconst4);
IkReal x11099=(cj2*x11093);
IkReal x11100=((1.0)*x11088);
IkReal x11101=((1.0)*x11087);
IkReal x11102=(cj3*x11087);
IkReal x11103=(cj3*x11088);
evalcond[0]=((((-1.0)*gconst5*r20*x11101))+(((-1.0)*r22*x11100))+((x11087*x11096)));
evalcond[1]=((((-1.0)*gconst5*r00*x11101))+(((-1.0)*r02*x11100))+((x11087*x11094)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11101))+(((-1.0)*r12*x11100))+((x11087*x11092)));
evalcond[3]=(((x11092*x11103))+(((-1.0)*r10*x11091*x11100))+((r11*x11090))+((r10*x11097))+((r12*x11102)));
evalcond[4]=((((-1.0)*r12*sj3*x11101))+((r11*x11091))+(((-1.0)*sj3*x11092*x11100))+((r10*x11098))+((r10*x11088*x11090)));
evalcond[5]=((((-1.0)*r20*x11091*x11100))+((cj1*sj2))+((r20*x11097))+x11095+((x11096*x11103))+((r22*x11102))+((r21*x11090)));
evalcond[6]=(((r02*x11102))+(((-1.0)*x11099))+x11089+((r00*x11097))+((x11094*x11103))+((r01*x11090))+(((-1.0)*r00*x11091*x11100)));
evalcond[7]=(((r20*x11088*x11090))+(((-1.0)*sj3*x11096*x11100))+(((-1.0)*x11099))+((r20*x11098))+x11089+(((-1.0)*r22*sj3*x11101))+((r21*x11091)));
evalcond[8]=(((r00*x11088*x11090))+(((-1.0)*r02*sj3*x11101))+(((-1.0)*x11095))+((r00*x11098))+((r01*x11091))+(((-1.0)*sj2*x11093))+(((-1.0)*sj3*x11094*x11100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11104=((1.0)*gconst5);
CheckValue<IkReal> x11105=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11104)))),-1);
if(!x11105.valid){
continue;
}
CheckValue<IkReal> x11106 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11105.value)))+(x11106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11107=IKsin(j4);
IkReal x11108=IKcos(j4);
IkReal x11109=(sj1*sj2);
IkReal x11110=(gconst5*sj3);
IkReal x11111=(cj3*gconst5);
IkReal x11112=(gconst4*r11);
IkReal x11113=((1.0)*cj1);
IkReal x11114=(gconst4*r01);
IkReal x11115=(cj2*sj1);
IkReal x11116=(gconst4*r21);
IkReal x11117=(gconst4*sj3);
IkReal x11118=(cj3*gconst4);
IkReal x11119=(cj2*x11113);
IkReal x11120=((1.0)*x11108);
IkReal x11121=((1.0)*x11107);
IkReal x11122=(cj3*x11107);
IkReal x11123=(cj3*x11108);
evalcond[0]=((((-1.0)*gconst5*r20*x11121))+((x11107*x11116))+(((-1.0)*r22*x11120)));
evalcond[1]=(((x11107*x11114))+(((-1.0)*gconst5*r00*x11121))+(((-1.0)*r02*x11120)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11120))+(((-1.0)*gconst5*r10*x11121))+((x11107*x11112)));
evalcond[3]=((((-1.0)*r10*x11111*x11120))+((r10*x11117))+((r12*x11122))+((x11112*x11123))+((r11*x11110)));
evalcond[4]=(((r10*x11108*x11110))+(((-1.0)*sj3*x11112*x11120))+(((-1.0)*r12*sj3*x11121))+((r10*x11118))+((r11*x11111)));
evalcond[5]=(((cj1*sj2))+((r22*x11122))+x11115+((r21*x11110))+((x11116*x11123))+(((-1.0)*r20*x11111*x11120))+((r20*x11117)));
evalcond[6]=(((x11114*x11123))+(((-1.0)*r00*x11111*x11120))+x11109+((r02*x11122))+(((-1.0)*x11119))+((r00*x11117))+((r01*x11110)));
evalcond[7]=(((r20*x11108*x11110))+x11109+((r21*x11111))+(((-1.0)*sj3*x11116*x11120))+((r20*x11118))+(((-1.0)*x11119))+(((-1.0)*r22*sj3*x11121)));
evalcond[8]=((((-1.0)*x11115))+((r00*x11108*x11110))+(((-1.0)*sj3*x11114*x11120))+(((-1.0)*r02*sj3*x11121))+(((-1.0)*sj2*x11113))+((r00*x11118))+((r01*x11111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11124 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11124.valid){
continue;
}
CheckValue<IkReal> x11125=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11124.value)+(((1.5707963267949)*(x11125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11126=IKsin(j4);
IkReal x11127=IKcos(j4);
IkReal x11128=(sj1*sj2);
IkReal x11129=(gconst5*sj3);
IkReal x11130=(cj3*gconst5);
IkReal x11131=(gconst4*r11);
IkReal x11132=((1.0)*cj1);
IkReal x11133=(gconst4*r01);
IkReal x11134=(cj2*sj1);
IkReal x11135=(gconst4*r21);
IkReal x11136=(gconst4*sj3);
IkReal x11137=(cj3*gconst4);
IkReal x11138=(cj2*x11132);
IkReal x11139=((1.0)*x11127);
IkReal x11140=((1.0)*x11126);
IkReal x11141=(cj3*x11126);
IkReal x11142=(cj3*x11127);
evalcond[0]=(((x11126*x11135))+(((-1.0)*r22*x11139))+(((-1.0)*gconst5*r20*x11140)));
evalcond[1]=(((x11126*x11133))+(((-1.0)*gconst5*r00*x11140))+(((-1.0)*r02*x11139)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11140))+((x11126*x11131))+(((-1.0)*r12*x11139)));
evalcond[3]=(((r10*x11136))+((r11*x11129))+((r12*x11141))+((x11131*x11142))+(((-1.0)*r10*x11130*x11139)));
evalcond[4]=((((-1.0)*r12*sj3*x11140))+((r10*x11137))+((r11*x11130))+(((-1.0)*sj3*x11131*x11139))+((r10*x11127*x11129)));
evalcond[5]=(((r21*x11129))+((x11135*x11142))+((r22*x11141))+((cj1*sj2))+x11134+((r20*x11136))+(((-1.0)*r20*x11130*x11139)));
evalcond[6]=((((-1.0)*r00*x11130*x11139))+((x11133*x11142))+((r02*x11141))+x11128+(((-1.0)*x11138))+((r01*x11129))+((r00*x11136)));
evalcond[7]=(((r21*x11130))+x11128+((r20*x11127*x11129))+((r20*x11137))+(((-1.0)*x11138))+(((-1.0)*r22*sj3*x11140))+(((-1.0)*sj3*x11135*x11139)));
evalcond[8]=((((-1.0)*sj3*x11133*x11139))+(((-1.0)*x11134))+((r00*x11127*x11129))+(((-1.0)*sj2*x11132))+(((-1.0)*r02*sj3*x11140))+((r01*x11130))+((r00*x11137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11143=((-1.0)*r21);
IkReal x11144=((-1.0)*r20);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(x11143),IkReal(x11144),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
IkReal x11145=((1.0)*(x11146.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11145)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11144);
rxp0_2=(py*r00);
rxp1_0=(py*x11143);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11145)));
IkReal gconst4=x11143;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11147=((-1.0)*r21);
IkReal x11148=((-1.0)*r20);
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(x11147),IkReal(x11148),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
IkReal x11149=((1.0)*(x11150.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11149)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11148);
rxp0_2=(py*r00);
rxp1_0=(py*x11147);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11149)));
IkReal gconst4=x11147;
IkReal gconst5=((1.0)*r20);
IkReal x11151=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=((((-1.0)*x11151*(r21*r21)))+((x11151*(r00*r00)))+(((-1.0)*x11151)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11152=((-1.0)*r21);
IkReal x11153=((-1.0)*r20);
CheckValue<IkReal> x11155 = IKatan2WithCheck(IkReal(x11152),IkReal(x11153),IKFAST_ATAN2_MAGTHRESH);
if(!x11155.valid){
continue;
}
IkReal x11154=((1.0)*(x11155.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11154)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11153);
rxp0_2=(py*r00);
rxp1_0=(py*x11152);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11154)));
IkReal gconst4=x11152;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11156=((-1.0)*r21);
IkReal x11157=((-1.0)*r20);
CheckValue<IkReal> x11159 = IKatan2WithCheck(IkReal(x11156),IkReal(x11157),IKFAST_ATAN2_MAGTHRESH);
if(!x11159.valid){
continue;
}
IkReal x11158=((1.0)*(x11159.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11158)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11157);
rxp0_2=(py*r00);
rxp1_0=(py*x11156);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11158)));
IkReal gconst4=x11156;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11160=((-1.0)*r21);
IkReal x11161=((-1.0)*r20);
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(x11160),IkReal(x11161),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
IkReal x11162=((1.0)*(x11163.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11162)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11161);
rxp0_2=(py*r00);
rxp1_0=(py*x11160);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11162)));
IkReal gconst4=x11160;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11164=((-1.0)*r21);
IkReal x11165=((-1.0)*r20);
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal(x11164),IkReal(x11165),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
IkReal x11166=((1.0)*(x11167.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11166)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11165);
rxp0_2=(py*r00);
rxp1_0=(py*x11164);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11166)));
IkReal gconst4=x11164;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11170=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11170.valid){
continue;
}
IkReal x11168=x11170.value;
IkReal x11169=(cj0*x11168);
cj4array[0]=((((-1.0)*cj1*cj2*x11169))+((sj1*sj2*x11169)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11171=IKsin(j4);
IkReal x11172=IKcos(j4);
IkReal x11173=(gconst4*x11171);
IkReal x11174=((1.0)*x11172);
IkReal x11175=((1.0)*gconst5*x11171);
evalcond[0]=(r12*x11171);
evalcond[1]=((((-1.0)*r12*x11174))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11175))+((r21*x11173)));
evalcond[3]=((((-1.0)*r00*x11175))+((r01*x11173)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((gconst4*r21*x11172))+(((-1.0)*gconst5*r20*x11174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11178=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11178.valid){
continue;
}
IkReal x11176=x11178.value;
IkReal x11177=((1.0)*x11176);
cj4array[0]=((((-1.0)*cj2*sj1*x11177))+(((-1.0)*cj1*sj2*x11177)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11179=IKsin(j4);
IkReal x11180=IKcos(j4);
IkReal x11181=(gconst4*r01);
IkReal x11182=((1.0)*cj0);
IkReal x11183=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11179);
evalcond[1]=((((-1.0)*x11182))+(((-1.0)*r12*x11180)));
evalcond[2]=((((-1.0)*gconst5*r20*x11179))+((gconst4*r21*x11179)));
evalcond[3]=(((x11179*x11181))+(((-1.0)*x11179*x11183)));
evalcond[4]=((((-1.0)*x11180*x11183))+(((-1.0)*sj1*sj2*x11182))+((x11180*x11181))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11184=IKPowWithIntegerCheck(r12,-1);
if(!x11184.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11184.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11185=IKsin(j4);
IkReal x11186=IKcos(j4);
IkReal x11187=(gconst4*r01);
IkReal x11188=(gconst4*r21);
IkReal x11189=((1.0)*gconst5*r00);
IkReal x11190=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11185);
evalcond[1]=((((-1.0)*x11185*x11190))+((x11185*x11188)));
evalcond[2]=((((-1.0)*x11185*x11189))+((x11185*x11187)));
evalcond[3]=((((-1.0)*x11186*x11190))+((cj2*sj1))+((cj1*sj2))+((x11186*x11188)));
evalcond[4]=((((-1.0)*x11186*x11189))+(((-1.0)*cj0*sj1*sj2))+((x11186*x11187))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11191=((-1.0)*r21);
IkReal x11192=((-1.0)*r20);
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal(x11191),IkReal(x11192),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
IkReal x11193=((1.0)*(x11194.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11193)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11192);
rxp0_2=(py*r00);
rxp1_0=(py*x11191);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11193)));
IkReal gconst4=x11191;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11195=((-1.0)*r21);
IkReal x11196=((-1.0)*r20);
CheckValue<IkReal> x11198 = IKatan2WithCheck(IkReal(x11195),IkReal(x11196),IKFAST_ATAN2_MAGTHRESH);
if(!x11198.valid){
continue;
}
IkReal x11197=((1.0)*(x11198.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11197)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11196);
rxp0_2=(py*r00);
rxp1_0=(py*x11195);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11197)));
IkReal gconst4=x11195;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11199=((-1.0)*r21);
IkReal x11200=((-1.0)*r20);
CheckValue<IkReal> x11202 = IKatan2WithCheck(IkReal(x11199),IkReal(x11200),IKFAST_ATAN2_MAGTHRESH);
if(!x11202.valid){
continue;
}
IkReal x11201=((1.0)*(x11202.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11201)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11200);
rxp0_2=(py*r00);
rxp1_0=(py*x11199);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11201)));
IkReal gconst4=x11199;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11205=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11205.valid){
continue;
}
IkReal x11203=x11205.value;
IkReal x11204=(cj0*x11203);
cj4array[0]=(((sj1*sj2*x11204))+(((-1.0)*cj1*cj2*x11204)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11206=IKsin(j4);
IkReal x11207=IKcos(j4);
IkReal x11208=(gconst4*x11206);
IkReal x11209=((1.0)*x11207);
IkReal x11210=((1.0)*gconst5*x11206);
evalcond[0]=((-1.0)*r12*x11206);
evalcond[1]=((((-1.0)*r12*x11209))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11208))+(((-1.0)*r20*x11210)));
evalcond[3]=((((-1.0)*r00*x11210))+((r01*x11208)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11209))+((gconst5*r20*x11207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11213=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11213.valid){
continue;
}
IkReal x11211=x11213.value;
IkReal x11212=((1.0)*x11211);
cj4array[0]=((((-1.0)*cj2*sj1*x11212))+(((-1.0)*cj1*sj2*x11212)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11214=IKsin(j4);
IkReal x11215=IKcos(j4);
IkReal x11216=(gconst5*r00);
IkReal x11217=(gconst4*r01);
IkReal x11218=((1.0)*cj0);
IkReal x11219=((1.0)*x11214);
IkReal x11220=((1.0)*x11215);
evalcond[0]=((-1.0)*r12*x11214);
evalcond[1]=((((-1.0)*x11218))+(((-1.0)*r12*x11220)));
evalcond[2]=((((-1.0)*gconst5*r20*x11219))+((gconst4*r21*x11214)));
evalcond[3]=((((-1.0)*x11216*x11219))+((x11214*x11217)));
evalcond[4]=((((-1.0)*sj1*sj2*x11218))+(((-1.0)*x11217*x11220))+((cj0*cj1*cj2))+((x11215*x11216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(r12,-1);
if(!x11221.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11221.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11222=IKsin(j4);
IkReal x11223=IKcos(j4);
IkReal x11224=(gconst5*r00);
IkReal x11225=(gconst5*r20);
IkReal x11226=(gconst4*r01);
IkReal x11227=(gconst4*r21);
IkReal x11228=((1.0)*x11222);
IkReal x11229=((1.0)*x11223);
evalcond[0]=((-1.0)*r12*x11222);
evalcond[1]=((((-1.0)*x11225*x11228))+((x11222*x11227)));
evalcond[2]=(((x11222*x11226))+(((-1.0)*x11224*x11228)));
evalcond[3]=(((cj2*sj1))+((x11223*x11225))+((cj1*sj2))+(((-1.0)*x11227*x11229)));
evalcond[4]=(((x11223*x11224))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x11226*x11229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11230=((-1.0)*r21);
IkReal x11231=((-1.0)*r20);
CheckValue<IkReal> x11233 = IKatan2WithCheck(IkReal(x11230),IkReal(x11231),IKFAST_ATAN2_MAGTHRESH);
if(!x11233.valid){
continue;
}
IkReal x11232=((1.0)*(x11233.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11232)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11231);
rxp0_2=(py*r00);
rxp1_0=(py*x11230);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11232)));
IkReal gconst4=x11230;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11234=((-1.0)*r21);
IkReal x11235=((-1.0)*r20);
CheckValue<IkReal> x11237 = IKatan2WithCheck(IkReal(x11234),IkReal(x11235),IKFAST_ATAN2_MAGTHRESH);
if(!x11237.valid){
continue;
}
IkReal x11236=((1.0)*(x11237.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11236)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11235);
rxp0_2=(py*r00);
rxp1_0=(py*x11234);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11236)));
IkReal gconst4=x11234;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11238=((-1.0)*r21);
IkReal x11239=((-1.0)*r20);
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(x11238),IkReal(x11239),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
IkReal x11240=((1.0)*(x11241.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11240)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11239);
rxp0_2=(py*r00);
rxp1_0=(py*x11238);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11240)));
IkReal gconst4=x11238;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11244=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11244.valid){
continue;
}
IkReal x11242=x11244.value;
IkReal x11243=((1.0)*cj0*x11242);
cj4array[0]=((((-1.0)*cj1*sj2*x11243))+(((-1.0)*cj2*sj1*x11243)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11245=IKsin(j4);
IkReal x11246=IKcos(j4);
IkReal x11247=(gconst4*x11245);
IkReal x11248=((1.0)*x11246);
IkReal x11249=((1.0)*gconst5*x11245);
evalcond[0]=((-1.0)*r12*x11245);
evalcond[1]=((((-1.0)*r12*x11248))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11249))+((r21*x11247)));
evalcond[3]=((((-1.0)*r00*x11249))+((r01*x11247)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst5*r20*x11246))+(((-1.0)*gconst4*r21*x11248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11251=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11251.valid){
continue;
}
IkReal x11250=x11251.value;
cj4array[0]=(((cj1*cj2*x11250))+(((-1.0)*sj1*sj2*x11250)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11252=IKsin(j4);
IkReal x11253=IKcos(j4);
IkReal x11254=(gconst5*r00);
IkReal x11255=(gconst4*r01);
IkReal x11256=((1.0)*x11252);
IkReal x11257=((1.0)*x11253);
evalcond[0]=((-1.0)*r12*x11252);
evalcond[1]=((((-1.0)*r12*x11257))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11256))+((gconst4*r21*x11252)));
evalcond[3]=(((x11252*x11255))+(((-1.0)*x11254*x11256)));
evalcond[4]=(((cj0*cj2*sj1))+((x11253*x11254))+((cj0*cj1*sj2))+(((-1.0)*x11255*x11257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11258=IKPowWithIntegerCheck(r12,-1);
if(!x11258.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11258.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11259=IKsin(j4);
IkReal x11260=IKcos(j4);
IkReal x11261=(gconst5*r00);
IkReal x11262=(gconst5*r20);
IkReal x11263=((1.0)*x11259);
IkReal x11264=(gconst4*x11259);
IkReal x11265=((1.0)*gconst4*x11260);
evalcond[0]=((-1.0)*r12*x11259);
evalcond[1]=(((r21*x11264))+(((-1.0)*x11262*x11263)));
evalcond[2]=((((-1.0)*x11261*x11263))+((r01*x11264)));
evalcond[3]=(((x11260*x11262))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11265)));
evalcond[4]=(((x11260*x11261))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*x11265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11266=((-1.0)*r21);
IkReal x11267=((-1.0)*r20);
CheckValue<IkReal> x11269 = IKatan2WithCheck(IkReal(x11266),IkReal(x11267),IKFAST_ATAN2_MAGTHRESH);
if(!x11269.valid){
continue;
}
IkReal x11268=((1.0)*(x11269.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11268)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11267);
rxp0_2=(py*r00);
rxp1_0=(py*x11266);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11268)));
IkReal gconst4=x11266;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11270=((-1.0)*r21);
IkReal x11271=((-1.0)*r20);
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal(x11270),IkReal(x11271),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
IkReal x11272=((1.0)*(x11273.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11272)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11271);
rxp0_2=(py*r00);
rxp1_0=(py*x11270);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11272)));
IkReal gconst4=x11270;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11274=((-1.0)*r21);
IkReal x11275=((-1.0)*r20);
CheckValue<IkReal> x11277 = IKatan2WithCheck(IkReal(x11274),IkReal(x11275),IKFAST_ATAN2_MAGTHRESH);
if(!x11277.valid){
continue;
}
IkReal x11276=((1.0)*(x11277.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11276)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11275);
rxp0_2=(py*r00);
rxp1_0=(py*x11274);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11276)));
IkReal gconst4=x11274;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11280=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11280.valid){
continue;
}
IkReal x11278=x11280.value;
IkReal x11279=((1.0)*cj0*x11278);
cj4array[0]=((((-1.0)*cj2*sj1*x11279))+(((-1.0)*cj1*sj2*x11279)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11281=IKsin(j4);
IkReal x11282=IKcos(j4);
IkReal x11283=(gconst4*x11281);
IkReal x11284=((1.0)*x11282);
IkReal x11285=((1.0)*gconst5*x11281);
evalcond[0]=(r12*x11281);
evalcond[1]=((((-1.0)*r12*x11284))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11283))+(((-1.0)*r20*x11285)));
evalcond[3]=((((-1.0)*r00*x11285))+((r01*x11283)));
evalcond[4]=((((-1.0)*gconst5*r20*x11284))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11287=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11287.valid){
continue;
}
IkReal x11286=x11287.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11286))+((cj1*cj2*x11286)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11288=IKsin(j4);
IkReal x11289=IKcos(j4);
IkReal x11290=(gconst4*r01);
IkReal x11291=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11288);
evalcond[1]=((((-1.0)*r12*x11289))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11288))+((gconst4*r21*x11288)));
evalcond[3]=(((x11288*x11290))+(((-1.0)*x11288*x11291)));
evalcond[4]=(((x11289*x11290))+((cj0*cj2*sj1))+(((-1.0)*x11289*x11291))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11292=IKPowWithIntegerCheck(r12,-1);
if(!x11292.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11292.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11293=IKsin(j4);
IkReal x11294=IKcos(j4);
IkReal x11295=((1.0)*gconst5*r00);
IkReal x11296=(gconst4*x11293);
IkReal x11297=(gconst4*x11294);
IkReal x11298=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11293);
evalcond[1]=(((r21*x11296))+(((-1.0)*x11293*x11298)));
evalcond[2]=(((r01*x11296))+(((-1.0)*x11293*x11295)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11297))+(((-1.0)*x11294*x11298)));
evalcond[4]=(((r01*x11297))+(((-1.0)*x11294*x11295))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(r12,-1);
if(!x11300.valid){
continue;
}
IkReal x11299=x11300.value;
CheckValue<IkReal> x11301=IKPowWithIntegerCheck(sj3,-1);
if(!x11301.valid){
continue;
}
if( IKabs((x11299*(x11301.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11299)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11299*(x11301.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11299))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11299*(x11301.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11299));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11302=IKsin(j4);
IkReal x11303=IKcos(j4);
IkReal x11304=((1.0)*r12);
IkReal x11305=(cj2*sj0);
IkReal x11306=(sj1*sj2);
IkReal x11307=(gconst4*sj3);
IkReal x11308=(cj1*cj2);
IkReal x11309=(gconst4*r01);
IkReal x11310=(cj2*sj1);
IkReal x11311=(gconst4*r21);
IkReal x11312=((1.0)*gconst5);
IkReal x11313=(gconst5*sj3);
IkReal x11314=(cj3*gconst5);
IkReal x11315=(cj3*gconst4);
IkReal x11316=(cj1*sj2);
IkReal x11317=((1.0)*cj0);
IkReal x11318=(cj3*x11303);
IkReal x11319=((1.0)*x11303);
IkReal x11320=(x11303*x11313);
evalcond[0]=((((-1.0)*x11303*x11304))+(((-1.0)*x11317)));
evalcond[1]=(((x11302*x11311))+(((-1.0)*r20*x11302*x11312)));
evalcond[2]=(sj0+(((-1.0)*r00*x11302*x11312))+((x11302*x11309)));
evalcond[3]=(((sj0*x11316))+((sj1*x11305))+(((-1.0)*sj3*x11302*x11304)));
evalcond[4]=((((-1.0)*sj0*x11306))+((cj3*r12*x11302))+((cj1*x11305)));
evalcond[5]=(((x11311*x11318))+((r20*x11307))+(((-1.0)*r20*x11312*x11318))+((r21*x11313))+x11316+x11310);
evalcond[6]=(((r21*x11314))+x11306+(((-1.0)*x11308))+(((-1.0)*r21*x11307*x11319))+((r20*x11315))+((r20*x11320)));
evalcond[7]=((((-1.0)*r01*x11307*x11319))+((cj0*x11310))+((cj0*x11316))+((r00*x11320))+((r01*x11314))+((r00*x11315)));
evalcond[8]=((((-1.0)*x11306*x11317))+((r00*x11307))+((x11309*x11318))+(((-1.0)*r00*x11312*x11318))+((r01*x11313))+((cj0*x11308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11321=((1.0)*gconst5);
CheckValue<IkReal> x11322=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*r00*x11321))),-1);
if(!x11322.valid){
continue;
}
CheckValue<IkReal> x11323=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11321))),-1);
if(!x11323.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11322.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11323.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11321)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11322.value)))+IKsqr(((x11323.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11321))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11322.value)), ((x11323.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11321))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11324=IKsin(j4);
IkReal x11325=IKcos(j4);
IkReal x11326=((1.0)*r12);
IkReal x11327=(cj2*sj0);
IkReal x11328=(sj1*sj2);
IkReal x11329=(gconst4*sj3);
IkReal x11330=(cj1*cj2);
IkReal x11331=(gconst4*r01);
IkReal x11332=(cj2*sj1);
IkReal x11333=(gconst4*r21);
IkReal x11334=((1.0)*gconst5);
IkReal x11335=(gconst5*sj3);
IkReal x11336=(cj3*gconst5);
IkReal x11337=(cj3*gconst4);
IkReal x11338=(cj1*sj2);
IkReal x11339=((1.0)*cj0);
IkReal x11340=(cj3*x11325);
IkReal x11341=((1.0)*x11325);
IkReal x11342=(x11325*x11335);
evalcond[0]=((((-1.0)*x11325*x11326))+(((-1.0)*x11339)));
evalcond[1]=(((x11324*x11333))+(((-1.0)*r20*x11324*x11334)));
evalcond[2]=(sj0+(((-1.0)*r00*x11324*x11334))+((x11324*x11331)));
evalcond[3]=(((sj1*x11327))+((sj0*x11338))+(((-1.0)*sj3*x11324*x11326)));
evalcond[4]=((((-1.0)*sj0*x11328))+((cj3*r12*x11324))+((cj1*x11327)));
evalcond[5]=(x11332+x11338+((x11333*x11340))+(((-1.0)*r20*x11334*x11340))+((r21*x11335))+((r20*x11329)));
evalcond[6]=(x11328+((r20*x11337))+((r20*x11342))+(((-1.0)*r21*x11329*x11341))+(((-1.0)*x11330))+((r21*x11336)));
evalcond[7]=(((cj0*x11332))+((cj0*x11338))+(((-1.0)*r01*x11329*x11341))+((r00*x11342))+((r01*x11336))+((r00*x11337)));
evalcond[8]=((((-1.0)*r00*x11334*x11340))+((cj0*x11330))+((x11331*x11340))+((r01*x11335))+(((-1.0)*x11328*x11339))+((r00*x11329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11343=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344=IKPowWithIntegerCheck(r12,-1);
if(!x11344.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11343.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11343.value)))+IKsqr(((-1.0)*cj0*(x11344.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11343.value)), ((-1.0)*cj0*(x11344.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11345=IKsin(j4);
IkReal x11346=IKcos(j4);
IkReal x11347=((1.0)*r12);
IkReal x11348=(cj2*sj0);
IkReal x11349=(sj1*sj2);
IkReal x11350=(gconst4*sj3);
IkReal x11351=(cj1*cj2);
IkReal x11352=(gconst4*r01);
IkReal x11353=(cj2*sj1);
IkReal x11354=(gconst4*r21);
IkReal x11355=((1.0)*gconst5);
IkReal x11356=(gconst5*sj3);
IkReal x11357=(cj3*gconst5);
IkReal x11358=(cj3*gconst4);
IkReal x11359=(cj1*sj2);
IkReal x11360=((1.0)*cj0);
IkReal x11361=(cj3*x11346);
IkReal x11362=((1.0)*x11346);
IkReal x11363=(x11346*x11356);
evalcond[0]=((((-1.0)*x11360))+(((-1.0)*x11346*x11347)));
evalcond[1]=((((-1.0)*r20*x11345*x11355))+((x11345*x11354)));
evalcond[2]=(sj0+(((-1.0)*r00*x11345*x11355))+((x11345*x11352)));
evalcond[3]=((((-1.0)*sj3*x11345*x11347))+((sj0*x11359))+((sj1*x11348)));
evalcond[4]=((((-1.0)*sj0*x11349))+((cj1*x11348))+((cj3*r12*x11345)));
evalcond[5]=(((x11354*x11361))+x11359+x11353+((r20*x11350))+(((-1.0)*r20*x11355*x11361))+((r21*x11356)));
evalcond[6]=(x11349+(((-1.0)*r21*x11350*x11362))+((r20*x11358))+(((-1.0)*x11351))+((r21*x11357))+((r20*x11363)));
evalcond[7]=((((-1.0)*r01*x11350*x11362))+((r00*x11363))+((cj0*x11353))+((cj0*x11359))+((r01*x11357))+((r00*x11358)));
evalcond[8]=(((cj0*x11351))+((r01*x11356))+((r00*x11350))+(((-1.0)*x11349*x11360))+((x11352*x11361))+(((-1.0)*r00*x11355*x11361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11364=((1.0)*gconst5);
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11364))+(((-1.0)*r10*sj0*x11364))+((cj0*gconst4*r01))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
CheckValue<IkReal> x11366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11364))+(((-1.0)*gconst4*r20)))),-1);
if(!x11366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11365.value)+(((1.5707963267949)*(x11366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11367=IKsin(j4);
IkReal x11368=IKcos(j4);
IkReal x11369=(gconst4*r11);
IkReal x11370=(cj2*sj0);
IkReal x11371=(sj1*sj2);
IkReal x11372=(gconst4*sj3);
IkReal x11373=(gconst5*r10);
IkReal x11374=(cj1*cj2);
IkReal x11375=(gconst4*r01);
IkReal x11376=(cj2*sj1);
IkReal x11377=(gconst4*r21);
IkReal x11378=(gconst5*r00);
IkReal x11379=(gconst5*sj3);
IkReal x11380=(cj3*gconst5);
IkReal x11381=(cj3*gconst4);
IkReal x11382=(cj1*sj2);
IkReal x11383=((1.0)*cj0);
IkReal x11384=((1.0)*x11368);
IkReal x11385=((1.0)*x11367);
IkReal x11386=(cj3*x11367);
IkReal x11387=(cj3*x11368);
IkReal x11388=(x11368*x11379);
evalcond[0]=((((-1.0)*gconst5*r20*x11385))+(((-1.0)*r22*x11384))+((x11367*x11377)));
evalcond[1]=(sj0+(((-1.0)*x11378*x11385))+(((-1.0)*r02*x11384))+((x11367*x11375)));
evalcond[2]=((((-1.0)*x11373*x11385))+(((-1.0)*x11383))+((x11367*x11369))+(((-1.0)*r12*x11384)));
evalcond[3]=(((r20*x11372))+((r21*x11379))+x11376+x11382+(((-1.0)*r20*x11380*x11384))+((x11377*x11387))+((r22*x11386)));
evalcond[4]=((((-1.0)*x11374))+((r20*x11381))+((r20*x11388))+x11371+(((-1.0)*r21*x11372*x11384))+((r21*x11380))+(((-1.0)*r22*sj3*x11385)));
evalcond[5]=(((cj0*x11382))+(((-1.0)*r02*sj3*x11385))+(((-1.0)*r01*x11372*x11384))+((r01*x11380))+((sj3*x11368*x11378))+((r00*x11381))+((cj0*x11376)));
evalcond[6]=(((r02*x11386))+((r00*x11372))+((x11375*x11387))+((r01*x11379))+(((-1.0)*cj3*x11378*x11384))+((cj0*x11374))+(((-1.0)*x11371*x11383)));
evalcond[7]=(((r11*x11380))+((r10*x11381))+(((-1.0)*r12*sj3*x11385))+(((-1.0)*sj3*x11369*x11384))+((sj3*x11368*x11373))+((sj0*x11382))+((sj1*x11370)));
evalcond[8]=((((-1.0)*sj0*x11371))+((r12*x11386))+((cj1*x11370))+(((-1.0)*cj3*x11373*x11384))+((r10*x11372))+((x11369*x11387))+((r11*x11379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11389=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11389.valid){
continue;
}
CheckValue<IkReal> x11390 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11389.value)))+(x11390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11391=IKsin(j4);
IkReal x11392=IKcos(j4);
IkReal x11393=(gconst4*r11);
IkReal x11394=(cj2*sj0);
IkReal x11395=(sj1*sj2);
IkReal x11396=(gconst4*sj3);
IkReal x11397=(gconst5*r10);
IkReal x11398=(cj1*cj2);
IkReal x11399=(gconst4*r01);
IkReal x11400=(cj2*sj1);
IkReal x11401=(gconst4*r21);
IkReal x11402=(gconst5*r00);
IkReal x11403=(gconst5*sj3);
IkReal x11404=(cj3*gconst5);
IkReal x11405=(cj3*gconst4);
IkReal x11406=(cj1*sj2);
IkReal x11407=((1.0)*cj0);
IkReal x11408=((1.0)*x11392);
IkReal x11409=((1.0)*x11391);
IkReal x11410=(cj3*x11391);
IkReal x11411=(cj3*x11392);
IkReal x11412=(x11392*x11403);
evalcond[0]=((((-1.0)*gconst5*r20*x11409))+(((-1.0)*r22*x11408))+((x11391*x11401)));
evalcond[1]=((((-1.0)*x11402*x11409))+sj0+((x11391*x11399))+(((-1.0)*r02*x11408)));
evalcond[2]=((((-1.0)*x11407))+((x11391*x11393))+(((-1.0)*x11397*x11409))+(((-1.0)*r12*x11408)));
evalcond[3]=(((r21*x11403))+(((-1.0)*r20*x11404*x11408))+x11406+x11400+((r20*x11396))+((r22*x11410))+((x11401*x11411)));
evalcond[4]=((((-1.0)*r22*sj3*x11409))+((r21*x11404))+x11395+(((-1.0)*x11398))+(((-1.0)*r21*x11396*x11408))+((r20*x11405))+((r20*x11412)));
evalcond[5]=(((cj0*x11406))+((cj0*x11400))+(((-1.0)*r02*sj3*x11409))+((sj3*x11392*x11402))+((r01*x11404))+((r00*x11405))+(((-1.0)*r01*x11396*x11408)));
evalcond[6]=(((r00*x11396))+(((-1.0)*cj3*x11402*x11408))+((x11399*x11411))+((r02*x11410))+((r01*x11403))+(((-1.0)*x11395*x11407))+((cj0*x11398)));
evalcond[7]=((((-1.0)*sj3*x11393*x11408))+((sj3*x11392*x11397))+((r10*x11405))+(((-1.0)*r12*sj3*x11409))+((r11*x11404))+((sj1*x11394))+((sj0*x11406)));
evalcond[8]=((((-1.0)*cj3*x11397*x11408))+((x11393*x11411))+((r12*x11410))+((r11*x11403))+((cj1*x11394))+((r10*x11396))+(((-1.0)*sj0*x11395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11413=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11413.valid){
continue;
}
CheckValue<IkReal> x11414 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11413.value)))+(x11414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11415=IKsin(j4);
IkReal x11416=IKcos(j4);
IkReal x11417=(gconst4*r11);
IkReal x11418=(cj2*sj0);
IkReal x11419=(sj1*sj2);
IkReal x11420=(gconst4*sj3);
IkReal x11421=(gconst5*r10);
IkReal x11422=(cj1*cj2);
IkReal x11423=(gconst4*r01);
IkReal x11424=(cj2*sj1);
IkReal x11425=(gconst4*r21);
IkReal x11426=(gconst5*r00);
IkReal x11427=(gconst5*sj3);
IkReal x11428=(cj3*gconst5);
IkReal x11429=(cj3*gconst4);
IkReal x11430=(cj1*sj2);
IkReal x11431=((1.0)*cj0);
IkReal x11432=((1.0)*x11416);
IkReal x11433=((1.0)*x11415);
IkReal x11434=(cj3*x11415);
IkReal x11435=(cj3*x11416);
IkReal x11436=(x11416*x11427);
evalcond[0]=((((-1.0)*gconst5*r20*x11433))+(((-1.0)*r22*x11432))+((x11415*x11425)));
evalcond[1]=(sj0+(((-1.0)*r02*x11432))+(((-1.0)*x11426*x11433))+((x11415*x11423)));
evalcond[2]=(((x11415*x11417))+(((-1.0)*r12*x11432))+(((-1.0)*x11421*x11433))+(((-1.0)*x11431)));
evalcond[3]=(((r20*x11420))+x11424+x11430+((x11425*x11435))+((r21*x11427))+(((-1.0)*r20*x11428*x11432))+((r22*x11434)));
evalcond[4]=(((r20*x11436))+((r20*x11429))+x11419+((r21*x11428))+(((-1.0)*x11422))+(((-1.0)*r22*sj3*x11433))+(((-1.0)*r21*x11420*x11432)));
evalcond[5]=(((sj3*x11416*x11426))+((cj0*x11430))+((cj0*x11424))+(((-1.0)*r01*x11420*x11432))+((r01*x11428))+((r00*x11429))+(((-1.0)*r02*sj3*x11433)));
evalcond[6]=(((r02*x11434))+((cj0*x11422))+((x11423*x11435))+(((-1.0)*cj3*x11426*x11432))+(((-1.0)*x11419*x11431))+((r01*x11427))+((r00*x11420)));
evalcond[7]=(((r10*x11429))+((sj3*x11416*x11421))+(((-1.0)*sj3*x11417*x11432))+((sj0*x11430))+(((-1.0)*r12*sj3*x11433))+((sj1*x11418))+((r11*x11428)));
evalcond[8]=((((-1.0)*sj0*x11419))+((r10*x11420))+((x11417*x11435))+((cj1*x11418))+((r11*x11427))+((r12*x11434))+(((-1.0)*cj3*x11421*x11432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11438 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11438)==0){
continue;
}
IkReal x11437=pow(x11438,-0.5);
CheckValue<IkReal> x11439 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11439.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11439.value));
IkReal gconst7=((-1.0)*r01*x11437);
IkReal gconst8=(r00*x11437);
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11440.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11443 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11443.valid){
continue;
}
IkReal x11441=((-1.0)*(x11443.value));
IkReal x11442=x11437;
sj5=gconst7;
cj5=gconst8;
j5=x11441;
IkReal gconst6=x11441;
IkReal gconst7=((-1.0)*r01*x11442);
IkReal gconst8=(r00*x11442);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11444=((1.0)*gconst8);
CheckValue<IkReal> x11445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11444))+(((-1.0)*gconst7*r20)))),-1);
if(!x11445.valid){
continue;
}
CheckValue<IkReal> x11446 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11444))+((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x11444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11445.value)))+(x11446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11447=IKsin(j4);
IkReal x11448=IKcos(j4);
IkReal x11449=(gconst7*sj3);
IkReal x11450=(cj3*gconst8);
IkReal x11451=(cj2*sj0);
IkReal x11452=(cj3*gconst7);
IkReal x11453=(sj1*sj2);
IkReal x11454=(cj1*cj2);
IkReal x11455=(cj2*sj1);
IkReal x11456=((1.0)*cj0);
IkReal x11457=(gconst8*sj3);
IkReal x11458=(cj1*sj2);
IkReal x11459=((1.0)*x11448);
IkReal x11460=((1.0)*x11447);
IkReal x11461=(cj3*x11447);
IkReal x11462=(gconst7*x11447);
IkReal x11463=(x11448*x11457);
evalcond[0]=((((-1.0)*gconst8*r20*x11460))+((r21*x11462))+(((-1.0)*r22*x11459)));
evalcond[1]=(((r01*x11462))+sj0+(((-1.0)*r02*x11459))+(((-1.0)*gconst8*r00*x11460)));
evalcond[2]=(((r11*x11462))+(((-1.0)*r12*x11459))+(((-1.0)*gconst8*r10*x11460))+(((-1.0)*x11456)));
evalcond[3]=(x11458+x11455+((r22*x11461))+(((-1.0)*r20*x11450*x11459))+((r21*x11457))+((r20*x11449))+((r21*x11448*x11452)));
evalcond[4]=(x11453+((r20*x11452))+((r21*x11450))+(((-1.0)*r22*sj3*x11460))+(((-1.0)*x11454))+(((-1.0)*r21*x11449*x11459))+((r20*x11463)));
evalcond[5]=((((-1.0)*r02*sj3*x11460))+((cj0*x11458))+((cj0*x11455))+((r01*x11450))+((r00*x11452))+(((-1.0)*r01*x11449*x11459))+((r00*x11463)));
evalcond[6]=(((r00*x11449))+((cj0*x11454))+(((-1.0)*r00*x11450*x11459))+(((-1.0)*x11453*x11456))+((r01*x11457))+((r01*x11448*x11452))+((r02*x11461)));
evalcond[7]=(((r10*x11452))+((sj0*x11458))+((sj1*x11451))+((r10*x11463))+(((-1.0)*r12*sj3*x11460))+(((-1.0)*r11*x11449*x11459))+((r11*x11450)));
evalcond[8]=(((r12*x11461))+(((-1.0)*sj0*x11453))+((r10*x11449))+(((-1.0)*r10*x11450*x11459))+((cj1*x11451))+((r11*x11457))+((r11*x11448*x11452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11464.valid){
continue;
}
CheckValue<IkReal> x11465=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x11465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11464.value)+(((1.5707963267949)*(x11465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11466=IKsin(j4);
IkReal x11467=IKcos(j4);
IkReal x11468=(gconst7*sj3);
IkReal x11469=(cj3*gconst8);
IkReal x11470=(cj2*sj0);
IkReal x11471=(cj3*gconst7);
IkReal x11472=(sj1*sj2);
IkReal x11473=(cj1*cj2);
IkReal x11474=(cj2*sj1);
IkReal x11475=((1.0)*cj0);
IkReal x11476=(gconst8*sj3);
IkReal x11477=(cj1*sj2);
IkReal x11478=((1.0)*x11467);
IkReal x11479=((1.0)*x11466);
IkReal x11480=(cj3*x11466);
IkReal x11481=(gconst7*x11466);
IkReal x11482=(x11467*x11476);
evalcond[0]=((((-1.0)*gconst8*r20*x11479))+(((-1.0)*r22*x11478))+((r21*x11481)));
evalcond[1]=(sj0+(((-1.0)*gconst8*r00*x11479))+((r01*x11481))+(((-1.0)*r02*x11478)));
evalcond[2]=((((-1.0)*r12*x11478))+(((-1.0)*x11475))+((r11*x11481))+(((-1.0)*gconst8*r10*x11479)));
evalcond[3]=(x11474+x11477+(((-1.0)*r20*x11469*x11478))+((r22*x11480))+((r21*x11467*x11471))+((r20*x11468))+((r21*x11476)));
evalcond[4]=((((-1.0)*x11473))+(((-1.0)*r21*x11468*x11478))+((r20*x11482))+x11472+(((-1.0)*r22*sj3*x11479))+((r20*x11471))+((r21*x11469)));
evalcond[5]=(((r00*x11471))+((r01*x11469))+(((-1.0)*r02*sj3*x11479))+((r00*x11482))+((cj0*x11474))+((cj0*x11477))+(((-1.0)*r01*x11468*x11478)));
evalcond[6]=(((r01*x11467*x11471))+((cj0*x11473))+(((-1.0)*r00*x11469*x11478))+(((-1.0)*x11472*x11475))+((r02*x11480))+((r00*x11468))+((r01*x11476)));
evalcond[7]=(((r11*x11469))+((r10*x11471))+(((-1.0)*r12*sj3*x11479))+((sj0*x11477))+((sj1*x11470))+((r10*x11482))+(((-1.0)*r11*x11468*x11478)));
evalcond[8]=((((-1.0)*sj0*x11472))+((r11*x11476))+((cj1*x11470))+((r10*x11468))+((r12*x11480))+(((-1.0)*r10*x11469*x11478))+((r11*x11467*x11471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11484 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11484)==0){
continue;
}
IkReal x11483=pow(x11484,-0.5);
CheckValue<IkReal> x11485 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11485.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11485.value))));
IkReal gconst10=((1.0)*r01*x11483);
IkReal gconst11=((-1.0)*r00*x11483);
CheckValue<IkReal> x11486 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11486.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11486.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11489 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11489.valid){
continue;
}
IkReal x11487=((1.0)*(x11489.value));
IkReal x11488=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11487)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11487)));
IkReal gconst10=((1.0)*r01*x11488);
IkReal gconst11=((-1.0)*r00*x11488);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x11492 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11492.valid){
continue;
}
IkReal x11490=((1.0)*(x11492.value));
IkReal x11491=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11490)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11490)));
IkReal gconst10=((1.0)*r01*x11491);
IkReal gconst11=((-1.0)*r00*x11491);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11495 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11495.valid){
continue;
}
IkReal x11493=((1.0)*(x11495.value));
IkReal x11494=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11493)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11493)));
IkReal gconst10=((1.0)*r01*x11494);
IkReal gconst11=((-1.0)*r00*x11494);
IkReal x11496=r02*r02;
IkReal x11497=(r12*sj0);
IkReal x11498=x11483;
IkReal x11499=(cj0*x11498);
j4eval[0]=((IKabs((x11497+((cj0*r02)))))+(IKabs((((x11496*x11499))+((r02*x11497*x11498))+(((-1.0)*x11499))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
IkReal x11500=((1.0)*(x11502.value));
IkReal x11501=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11500)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11500)));
IkReal gconst10=((1.0)*r01*x11501);
IkReal gconst11=((-1.0)*r00*x11501);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11505 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11505.valid){
continue;
}
IkReal x11503=((1.0)*(x11505.value));
IkReal x11504=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11503)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11503)));
IkReal gconst10=((1.0)*r01*x11504);
IkReal gconst11=((-1.0)*r00*x11504);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11506=gconst10*gconst10;
IkReal x11507=gconst11*gconst11;
IkReal x11508=(r11*sj3);
IkReal x11509=((1.0)*cj3);
IkReal x11510=(cj3*r10);
IkReal x11511=(gconst10*gconst11);
IkReal x11512=(r10*sj3);
IkReal x11513=(r21*x11506);
IkReal x11514=((1.0)*r20*x11507);
CheckValue<IkReal> x11515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11509))+((cj3*r11*r20*x11511))+(((-1.0)*r11*x11509*x11513))+(((-1.0)*r10*r20*x11507*x11509))+((r21*x11510*x11511)))),-1);
if(!x11515.valid){
continue;
}
CheckValue<IkReal> x11516 = IKatan2WithCheck(IkReal((((gconst11*r22*x11508))+((gconst10*r22*x11512)))),IkReal(((((-1.0)*r20*x11511*x11512))+((x11512*x11513))+((r21*x11508*x11511))+(((-1.0)*x11508*x11514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11515.value)))+(x11516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11517=IKsin(j4);
IkReal x11518=IKcos(j4);
IkReal x11519=(cj2*sj1);
IkReal x11520=(cj1*sj2);
IkReal x11521=(cj3*r10);
IkReal x11522=(gconst11*r20);
IkReal x11523=(gconst11*r21);
IkReal x11524=(cj3*gconst11);
IkReal x11525=(sj1*sj2);
IkReal x11526=(r10*sj3);
IkReal x11527=(cj1*cj2);
IkReal x11528=(gconst10*sj3);
IkReal x11529=(gconst11*sj3);
IkReal x11530=(cj3*gconst10);
IkReal x11531=((1.0)*x11518);
IkReal x11532=((1.0)*x11517);
IkReal x11533=(cj3*x11517);
IkReal x11534=(gconst10*x11517);
IkReal x11535=(gconst11*x11518);
IkReal x11536=(x11520+x11519);
IkReal x11537=(x11518*x11530);
evalcond[0]=(((r21*x11534))+(((-1.0)*r22*x11531))+(((-1.0)*x11522*x11532)));
evalcond[1]=(((r01*x11534))+(((-1.0)*gconst11*r00*x11532))+(((-1.0)*r02*x11531)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x11531))+(((-1.0)*gconst11*r10*x11532))+((r11*x11534)));
evalcond[3]=(((r12*x11533))+((r11*x11529))+((r11*x11537))+(((-1.0)*gconst11*x11521*x11531))+((gconst10*x11526)));
evalcond[4]=((((-1.0)*r12*sj3*x11532))+((r11*x11524))+(((-1.0)*r11*x11528*x11531))+((x11526*x11535))+((gconst10*x11521)));
evalcond[5]=(((r22*x11533))+x11536+((sj3*x11523))+((r21*x11537))+(((-1.0)*cj3*x11522*x11531))+((r20*x11528)));
evalcond[6]=(x11536+(((-1.0)*r02*sj3*x11532))+((r00*x11530))+((r01*x11524))+(((-1.0)*r01*x11528*x11531))+((r00*x11518*x11529)));
evalcond[7]=(x11527+((r01*x11537))+((r01*x11529))+((r00*x11528))+(((-1.0)*x11525))+(((-1.0)*r00*x11524*x11531))+((r02*x11533)));
evalcond[8]=(x11525+((cj3*x11523))+((r20*x11530))+(((-1.0)*r22*sj3*x11532))+((sj3*x11518*x11522))+(((-1.0)*x11527))+(((-1.0)*r21*x11528*x11531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11538=((1.0)*gconst11);
CheckValue<IkReal> x11539 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*r00*x11538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11539.valid){
continue;
}
CheckValue<IkReal> x11540=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11538)))),-1);
if(!x11540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11539.value)+(((1.5707963267949)*(x11540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11541=IKsin(j4);
IkReal x11542=IKcos(j4);
IkReal x11543=(cj2*sj1);
IkReal x11544=(cj1*sj2);
IkReal x11545=(cj3*r10);
IkReal x11546=(gconst11*r20);
IkReal x11547=(gconst11*r21);
IkReal x11548=(cj3*gconst11);
IkReal x11549=(sj1*sj2);
IkReal x11550=(r10*sj3);
IkReal x11551=(cj1*cj2);
IkReal x11552=(gconst10*sj3);
IkReal x11553=(gconst11*sj3);
IkReal x11554=(cj3*gconst10);
IkReal x11555=((1.0)*x11542);
IkReal x11556=((1.0)*x11541);
IkReal x11557=(cj3*x11541);
IkReal x11558=(gconst10*x11541);
IkReal x11559=(gconst11*x11542);
IkReal x11560=(x11543+x11544);
IkReal x11561=(x11542*x11554);
evalcond[0]=(((r21*x11558))+(((-1.0)*x11546*x11556))+(((-1.0)*r22*x11555)));
evalcond[1]=((((-1.0)*r02*x11555))+((r01*x11558))+(((-1.0)*gconst11*r00*x11556)));
evalcond[2]=((-1.0)+((r11*x11558))+(((-1.0)*gconst11*r10*x11556))+(((-1.0)*r12*x11555)));
evalcond[3]=(((r12*x11557))+((r11*x11553))+(((-1.0)*gconst11*x11545*x11555))+((r11*x11561))+((gconst10*x11550)));
evalcond[4]=((((-1.0)*r11*x11552*x11555))+(((-1.0)*r12*sj3*x11556))+((x11550*x11559))+((gconst10*x11545))+((r11*x11548)));
evalcond[5]=(((sj3*x11547))+x11560+((r22*x11557))+(((-1.0)*cj3*x11546*x11555))+((r21*x11561))+((r20*x11552)));
evalcond[6]=(x11560+(((-1.0)*r01*x11552*x11555))+((r01*x11548))+((r00*x11542*x11553))+((r00*x11554))+(((-1.0)*r02*sj3*x11556)));
evalcond[7]=(x11551+((r02*x11557))+((r01*x11561))+(((-1.0)*x11549))+((r00*x11552))+((r01*x11553))+(((-1.0)*r00*x11548*x11555)));
evalcond[8]=((((-1.0)*r22*sj3*x11556))+((sj3*x11542*x11546))+x11549+(((-1.0)*r21*x11552*x11555))+((r20*x11554))+((cj3*x11547))+(((-1.0)*x11551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11562 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11562.valid){
continue;
}
CheckValue<IkReal> x11563=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11562.value)+(((1.5707963267949)*(x11563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11564=IKsin(j4);
IkReal x11565=IKcos(j4);
IkReal x11566=(cj2*sj1);
IkReal x11567=(cj1*sj2);
IkReal x11568=(cj3*r10);
IkReal x11569=(gconst11*r20);
IkReal x11570=(gconst11*r21);
IkReal x11571=(cj3*gconst11);
IkReal x11572=(sj1*sj2);
IkReal x11573=(r10*sj3);
IkReal x11574=(cj1*cj2);
IkReal x11575=(gconst10*sj3);
IkReal x11576=(gconst11*sj3);
IkReal x11577=(cj3*gconst10);
IkReal x11578=((1.0)*x11565);
IkReal x11579=((1.0)*x11564);
IkReal x11580=(cj3*x11564);
IkReal x11581=(gconst10*x11564);
IkReal x11582=(gconst11*x11565);
IkReal x11583=(x11566+x11567);
IkReal x11584=(x11565*x11577);
evalcond[0]=((((-1.0)*x11569*x11579))+((r21*x11581))+(((-1.0)*r22*x11578)));
evalcond[1]=(((r01*x11581))+(((-1.0)*gconst11*r00*x11579))+(((-1.0)*r02*x11578)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r10*x11579))+(((-1.0)*r12*x11578))+((r11*x11581)));
evalcond[3]=(((gconst10*x11573))+(((-1.0)*gconst11*x11568*x11578))+((r11*x11576))+((r12*x11580))+((r11*x11584)));
evalcond[4]=((((-1.0)*r11*x11575*x11578))+((x11573*x11582))+((gconst10*x11568))+((r11*x11571))+(((-1.0)*r12*sj3*x11579)));
evalcond[5]=((((-1.0)*cj3*x11569*x11578))+((sj3*x11570))+x11583+((r20*x11575))+((r22*x11580))+((r21*x11584)));
evalcond[6]=(((r01*x11571))+x11583+((r00*x11577))+(((-1.0)*r02*sj3*x11579))+(((-1.0)*r01*x11575*x11578))+((r00*x11565*x11576)));
evalcond[7]=(((r01*x11584))+(((-1.0)*r00*x11571*x11578))+((r01*x11576))+x11574+((r00*x11575))+(((-1.0)*x11572))+((r02*x11580)));
evalcond[8]=(((cj3*x11570))+((sj3*x11565*x11569))+x11572+((r20*x11577))+(((-1.0)*r22*sj3*x11579))+(((-1.0)*x11574))+(((-1.0)*r21*x11575*x11578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11587 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11587.valid){
continue;
}
IkReal x11585=((1.0)*(x11587.value));
IkReal x11586=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11585)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11585)));
IkReal gconst10=((1.0)*r01*x11586);
IkReal gconst11=((-1.0)*r00*x11586);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11590 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11590.valid){
continue;
}
IkReal x11588=((1.0)*(x11590.value));
IkReal x11589=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11588)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11588)));
IkReal gconst10=((1.0)*r01*x11589);
IkReal gconst11=((-1.0)*r00*x11589);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11591=gconst10*gconst10;
IkReal x11592=gconst11*gconst11;
IkReal x11593=(r11*sj3);
IkReal x11594=((1.0)*cj3);
IkReal x11595=(cj3*r10);
IkReal x11596=(gconst10*gconst11);
IkReal x11597=(r10*sj3);
IkReal x11598=(r21*x11591);
IkReal x11599=((1.0)*r20*x11592);
CheckValue<IkReal> x11600 = IKatan2WithCheck(IkReal((((gconst11*r22*x11593))+((gconst10*r22*x11597)))),IkReal(((((-1.0)*x11593*x11599))+(((-1.0)*r20*x11596*x11597))+((r21*x11593*x11596))+((x11597*x11598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11600.valid){
continue;
}
CheckValue<IkReal> x11601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x11592*x11594))+(((-1.0)*r12*r22*x11594))+(((-1.0)*r11*x11594*x11598))+((cj3*r11*r20*x11596))+((r21*x11595*x11596)))),-1);
if(!x11601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11600.value)+(((1.5707963267949)*(x11601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11602=IKsin(j4);
IkReal x11603=IKcos(j4);
IkReal x11604=(sj1*sj2);
IkReal x11605=(cj3*r10);
IkReal x11606=(gconst11*r20);
IkReal x11607=(gconst11*r21);
IkReal x11608=(cj3*gconst11);
IkReal x11609=(r10*sj3);
IkReal x11610=((1.0)*cj1);
IkReal x11611=(gconst10*sj3);
IkReal x11612=(cj2*sj1);
IkReal x11613=(gconst11*sj3);
IkReal x11614=(cj3*gconst10);
IkReal x11615=(cj2*x11610);
IkReal x11616=((1.0)*x11603);
IkReal x11617=((1.0)*x11602);
IkReal x11618=(cj3*x11602);
IkReal x11619=(gconst10*x11602);
IkReal x11620=(gconst11*x11603);
IkReal x11621=(x11603*x11614);
evalcond[0]=(((r21*x11619))+(((-1.0)*r22*x11616))+(((-1.0)*x11606*x11617)));
evalcond[1]=((((-1.0)*gconst11*r00*x11617))+((r01*x11619))+(((-1.0)*r02*x11616)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11616))+((r11*x11619))+(((-1.0)*gconst11*r10*x11617)));
evalcond[3]=(((r12*x11618))+((r11*x11621))+((r11*x11613))+((gconst10*x11609))+(((-1.0)*gconst11*x11605*x11616)));
evalcond[4]=(((x11609*x11620))+(((-1.0)*r11*x11611*x11616))+((gconst10*x11605))+((r11*x11608))+(((-1.0)*r12*sj3*x11617)));
evalcond[5]=(x11612+(((-1.0)*cj3*x11606*x11616))+((cj1*sj2))+((r21*x11621))+((r22*x11618))+((r20*x11611))+((sj3*x11607)));
evalcond[6]=(x11604+(((-1.0)*x11615))+(((-1.0)*r00*x11608*x11616))+((r02*x11618))+((r00*x11611))+((r01*x11621))+((r01*x11613)));
evalcond[7]=(x11604+((sj3*x11603*x11606))+((cj3*x11607))+(((-1.0)*x11615))+(((-1.0)*r22*sj3*x11617))+((r20*x11614))+(((-1.0)*r21*x11611*x11616)));
evalcond[8]=((((-1.0)*sj2*x11610))+(((-1.0)*r01*x11611*x11616))+(((-1.0)*x11612))+((r01*x11608))+((r00*x11603*x11613))+(((-1.0)*r02*sj3*x11617))+((r00*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11622=((1.0)*gconst11);
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*r20*x11622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11622)))),-1);
if(!x11624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11623.value)+(((1.5707963267949)*(x11624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11625=IKsin(j4);
IkReal x11626=IKcos(j4);
IkReal x11627=(sj1*sj2);
IkReal x11628=(cj3*r10);
IkReal x11629=(gconst11*r20);
IkReal x11630=(gconst11*r21);
IkReal x11631=(cj3*gconst11);
IkReal x11632=(r10*sj3);
IkReal x11633=((1.0)*cj1);
IkReal x11634=(gconst10*sj3);
IkReal x11635=(cj2*sj1);
IkReal x11636=(gconst11*sj3);
IkReal x11637=(cj3*gconst10);
IkReal x11638=(cj2*x11633);
IkReal x11639=((1.0)*x11626);
IkReal x11640=((1.0)*x11625);
IkReal x11641=(cj3*x11625);
IkReal x11642=(gconst10*x11625);
IkReal x11643=(gconst11*x11626);
IkReal x11644=(x11626*x11637);
evalcond[0]=((((-1.0)*x11629*x11640))+(((-1.0)*r22*x11639))+((r21*x11642)));
evalcond[1]=((((-1.0)*r02*x11639))+(((-1.0)*gconst11*r00*x11640))+((r01*x11642)));
evalcond[2]=((1.0)+((r11*x11642))+(((-1.0)*gconst11*r10*x11640))+(((-1.0)*r12*x11639)));
evalcond[3]=(((r11*x11636))+((r11*x11644))+((r12*x11641))+((gconst10*x11632))+(((-1.0)*gconst11*x11628*x11639)));
evalcond[4]=(((r11*x11631))+(((-1.0)*r12*sj3*x11640))+(((-1.0)*r11*x11634*x11639))+((x11632*x11643))+((gconst10*x11628)));
evalcond[5]=((((-1.0)*cj3*x11629*x11639))+x11635+((cj1*sj2))+((r22*x11641))+((r21*x11644))+((sj3*x11630))+((r20*x11634)));
evalcond[6]=((((-1.0)*x11638))+x11627+(((-1.0)*r00*x11631*x11639))+((r02*x11641))+((r00*x11634))+((r01*x11644))+((r01*x11636)));
evalcond[7]=((((-1.0)*x11638))+x11627+((cj3*x11630))+(((-1.0)*r21*x11634*x11639))+((r20*x11637))+(((-1.0)*r22*sj3*x11640))+((sj3*x11626*x11629)));
evalcond[8]=((((-1.0)*r01*x11634*x11639))+(((-1.0)*x11635))+((r00*x11626*x11636))+(((-1.0)*r02*sj3*x11640))+((r00*x11637))+(((-1.0)*sj2*x11633))+((r01*x11631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11645 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11645.valid){
continue;
}
CheckValue<IkReal> x11646=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11645.value)+(((1.5707963267949)*(x11646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11647=IKsin(j4);
IkReal x11648=IKcos(j4);
IkReal x11649=(sj1*sj2);
IkReal x11650=(cj3*r10);
IkReal x11651=(gconst11*r20);
IkReal x11652=(gconst11*r21);
IkReal x11653=(cj3*gconst11);
IkReal x11654=(r10*sj3);
IkReal x11655=((1.0)*cj1);
IkReal x11656=(gconst10*sj3);
IkReal x11657=(cj2*sj1);
IkReal x11658=(gconst11*sj3);
IkReal x11659=(cj3*gconst10);
IkReal x11660=(cj2*x11655);
IkReal x11661=((1.0)*x11648);
IkReal x11662=((1.0)*x11647);
IkReal x11663=(cj3*x11647);
IkReal x11664=(gconst10*x11647);
IkReal x11665=(gconst11*x11648);
IkReal x11666=(x11648*x11659);
evalcond[0]=(((r21*x11664))+(((-1.0)*x11651*x11662))+(((-1.0)*r22*x11661)));
evalcond[1]=(((r01*x11664))+(((-1.0)*r02*x11661))+(((-1.0)*gconst11*r00*x11662)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11661))+(((-1.0)*gconst11*r10*x11662))+((r11*x11664)));
evalcond[3]=(((r11*x11658))+(((-1.0)*gconst11*x11650*x11661))+((gconst10*x11654))+((r11*x11666))+((r12*x11663)));
evalcond[4]=(((r11*x11653))+((gconst10*x11650))+(((-1.0)*r11*x11656*x11661))+((x11654*x11665))+(((-1.0)*r12*sj3*x11662)));
evalcond[5]=(((r21*x11666))+x11657+(((-1.0)*cj3*x11651*x11661))+((cj1*sj2))+((r20*x11656))+((sj3*x11652))+((r22*x11663)));
evalcond[6]=(x11649+(((-1.0)*r00*x11653*x11661))+((r01*x11666))+(((-1.0)*x11660))+((r02*x11663))+((r01*x11658))+((r00*x11656)));
evalcond[7]=(x11649+(((-1.0)*r22*sj3*x11662))+((cj3*x11652))+((r20*x11659))+(((-1.0)*x11660))+(((-1.0)*r21*x11656*x11661))+((sj3*x11648*x11651)));
evalcond[8]=(((r00*x11648*x11658))+(((-1.0)*r02*sj3*x11662))+(((-1.0)*r01*x11656*x11661))+(((-1.0)*x11657))+((r01*x11653))+(((-1.0)*sj2*x11655))+((r00*x11659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11669 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11669.valid){
continue;
}
IkReal x11667=((1.0)*(x11669.value));
IkReal x11668=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11667)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11668);
rxp0_2=(py*r00);
rxp1_0=(r21*x11668);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11667)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
IkReal x11670=((1.0)*(x11672.value));
IkReal x11671=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11670)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11671);
rxp0_2=(py*r00);
rxp1_0=(r21*x11671);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11670)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
IkReal x11673=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r00*r20*x11673))+((r01*r21*x11673)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11676 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11676.valid){
continue;
}
IkReal x11674=((1.0)*(x11676.value));
IkReal x11675=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11674)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11675);
rxp0_2=(py*r00);
rxp1_0=(r21*x11675);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11674)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11679 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11679.valid){
continue;
}
IkReal x11677=((1.0)*(x11679.value));
IkReal x11678=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11677)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11678);
rxp0_2=(py*r00);
rxp1_0=(r21*x11678);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11677)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11682 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11682.valid){
continue;
}
IkReal x11680=((1.0)*(x11682.value));
IkReal x11681=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11680)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11681);
rxp0_2=(py*r00);
rxp1_0=(r21*x11681);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11680)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11685 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11685.valid){
continue;
}
IkReal x11683=((1.0)*(x11685.value));
IkReal x11684=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11683)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11684);
rxp0_2=(py*r00);
rxp1_0=(r21*x11684);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11683)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11688=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11688.valid){
continue;
}
IkReal x11686=x11688.value;
IkReal x11687=(cj0*x11686);
cj4array[0]=(((sj1*sj2*x11687))+(((-1.0)*cj1*cj2*x11687)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11689=IKsin(j4);
IkReal x11690=IKcos(j4);
IkReal x11691=(gconst10*r21);
IkReal x11692=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11689);
evalcond[1]=((((-1.0)*r12*x11690))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11689*x11692))+((x11689*x11691)));
evalcond[3]=(((gconst10*r01*x11689))+(((-1.0)*gconst11*r00*x11689)));
evalcond[4]=((((-1.0)*x11690*x11692))+((cj2*sj1))+((cj1*sj2))+((x11690*x11691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11695=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11695.valid){
continue;
}
IkReal x11693=x11695.value;
IkReal x11694=((1.0)*x11693);
cj4array[0]=((((-1.0)*cj2*sj1*x11694))+(((-1.0)*cj1*sj2*x11694)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11696=IKsin(j4);
IkReal x11697=IKcos(j4);
IkReal x11698=(gconst10*r01);
IkReal x11699=((1.0)*cj0);
IkReal x11700=((1.0)*x11697);
IkReal x11701=((1.0)*gconst11*x11696);
evalcond[0]=(r12*x11696);
evalcond[1]=((((-1.0)*x11699))+(((-1.0)*r12*x11700)));
evalcond[2]=(((gconst10*r21*x11696))+(((-1.0)*r20*x11701)));
evalcond[3]=(((x11696*x11698))+(((-1.0)*r00*x11701)));
evalcond[4]=(((x11697*x11698))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x11699))+(((-1.0)*gconst11*r00*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11702=IKPowWithIntegerCheck(r12,-1);
if(!x11702.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11702.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11703=IKsin(j4);
IkReal x11704=IKcos(j4);
IkReal x11705=(gconst10*x11704);
IkReal x11706=(gconst10*x11703);
IkReal x11707=((1.0)*gconst11*r20);
IkReal x11708=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11703);
evalcond[1]=((((-1.0)*x11703*x11707))+((r21*x11706)));
evalcond[2]=((((-1.0)*x11703*x11708))+((r01*x11706)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11704*x11707))+((cj1*sj2))+((r21*x11705)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x11704*x11708))+((r01*x11705))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11711 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11711.valid){
continue;
}
IkReal x11709=((1.0)*(x11711.value));
IkReal x11710=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11709)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11710);
rxp0_2=(py*r00);
rxp1_0=(r21*x11710);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11709)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11714 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11714.valid){
continue;
}
IkReal x11712=((1.0)*(x11714.value));
IkReal x11713=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11712)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11713);
rxp0_2=(py*r00);
rxp1_0=(r21*x11713);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11712)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11717 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11717.valid){
continue;
}
IkReal x11715=((1.0)*(x11717.value));
IkReal x11716=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11715)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11716);
rxp0_2=(py*r00);
rxp1_0=(r21*x11716);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11715)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11720=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11720.valid){
continue;
}
IkReal x11718=x11720.value;
IkReal x11719=(cj0*x11718);
cj4array[0]=((((-1.0)*cj1*cj2*x11719))+((sj1*sj2*x11719)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11721=IKsin(j4);
IkReal x11722=IKcos(j4);
IkReal x11723=(gconst10*x11721);
IkReal x11724=((1.0)*x11722);
IkReal x11725=((1.0)*gconst11*x11721);
evalcond[0]=((-1.0)*r12*x11721);
evalcond[1]=((((-1.0)*r12*x11724))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11725))+((r21*x11723)));
evalcond[3]=(((r01*x11723))+(((-1.0)*r00*x11725)));
evalcond[4]=((((-1.0)*gconst10*r21*x11724))+((cj2*sj1))+((gconst11*r20*x11722))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11728=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11728.valid){
continue;
}
IkReal x11726=x11728.value;
IkReal x11727=((1.0)*x11726);
cj4array[0]=((((-1.0)*cj2*sj1*x11727))+(((-1.0)*cj1*sj2*x11727)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11729=IKsin(j4);
IkReal x11730=IKcos(j4);
IkReal x11731=((1.0)*cj0);
IkReal x11732=(gconst10*x11729);
IkReal x11733=((1.0)*x11730);
IkReal x11734=((1.0)*gconst11*x11729);
evalcond[0]=((-1.0)*r12*x11729);
evalcond[1]=((((-1.0)*x11731))+(((-1.0)*r12*x11733)));
evalcond[2]=((((-1.0)*r20*x11734))+((r21*x11732)));
evalcond[3]=(((r01*x11732))+(((-1.0)*r00*x11734)));
evalcond[4]=(((gconst11*r00*x11730))+(((-1.0)*gconst10*r01*x11733))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x11731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11735=IKPowWithIntegerCheck(r12,-1);
if(!x11735.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11735.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11736=IKsin(j4);
IkReal x11737=IKcos(j4);
IkReal x11738=(gconst10*x11736);
IkReal x11739=(gconst11*x11737);
IkReal x11740=((1.0)*gconst11*x11736);
IkReal x11741=((1.0)*gconst10*x11737);
evalcond[0]=((-1.0)*r12*x11736);
evalcond[1]=((((-1.0)*r20*x11740))+((r21*x11738)));
evalcond[2]=(((r01*x11738))+(((-1.0)*r00*x11740)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x11741))+((cj1*sj2))+((r20*x11739)));
evalcond[4]=(((r00*x11739))+(((-1.0)*cj0*sj1*sj2))+(((-1.0)*r01*x11741))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11744 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11744.valid){
continue;
}
IkReal x11742=((1.0)*(x11744.value));
IkReal x11743=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11742)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11743);
rxp0_2=(py*r00);
rxp1_0=(r21*x11743);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11742)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11747 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11747.valid){
continue;
}
IkReal x11745=((1.0)*(x11747.value));
IkReal x11746=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11745)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11746);
rxp0_2=(py*r00);
rxp1_0=(r21*x11746);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11745)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11750 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11750.valid){
continue;
}
IkReal x11748=((1.0)*(x11750.value));
IkReal x11749=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11748)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11749);
rxp0_2=(py*r00);
rxp1_0=(r21*x11749);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11748)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11753=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11753.valid){
continue;
}
IkReal x11751=x11753.value;
IkReal x11752=((1.0)*cj0*x11751);
cj4array[0]=((((-1.0)*cj2*sj1*x11752))+(((-1.0)*cj1*sj2*x11752)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11754=IKsin(j4);
IkReal x11755=IKcos(j4);
IkReal x11756=(gconst10*x11754);
IkReal x11757=((1.0)*x11755);
IkReal x11758=((1.0)*gconst11*x11754);
evalcond[0]=((-1.0)*r12*x11754);
evalcond[1]=((((-1.0)*r12*x11757))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11756))+(((-1.0)*r20*x11758)));
evalcond[3]=(((r01*x11756))+(((-1.0)*r00*x11758)));
evalcond[4]=((((-1.0)*gconst10*r21*x11757))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst11*r20*x11755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11760=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11760.valid){
continue;
}
IkReal x11759=x11760.value;
cj4array[0]=(((cj1*cj2*x11759))+(((-1.0)*sj1*sj2*x11759)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11761=IKsin(j4);
IkReal x11762=IKcos(j4);
IkReal x11763=(gconst10*x11761);
IkReal x11764=((1.0)*x11762);
IkReal x11765=((1.0)*gconst11*x11761);
evalcond[0]=((-1.0)*r12*x11761);
evalcond[1]=((((-1.0)*r12*x11764))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11763))+(((-1.0)*r20*x11765)));
evalcond[3]=((((-1.0)*r00*x11765))+((r01*x11763)));
evalcond[4]=(((gconst11*r00*x11762))+(((-1.0)*gconst10*r01*x11764))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11766=IKPowWithIntegerCheck(r12,-1);
if(!x11766.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11766.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11767=IKsin(j4);
IkReal x11768=IKcos(j4);
IkReal x11769=(gconst10*x11767);
IkReal x11770=(gconst11*x11768);
IkReal x11771=((1.0)*gconst11*x11767);
IkReal x11772=((1.0)*gconst10*x11768);
evalcond[0]=((-1.0)*r12*x11767);
evalcond[1]=((((-1.0)*r20*x11771))+((r21*x11769)));
evalcond[2]=((((-1.0)*r00*x11771))+((r01*x11769)));
evalcond[3]=(((r20*x11770))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11772)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r01*x11772))+((r00*x11770))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
IkReal x11773=((1.0)*(x11775.value));
IkReal x11774=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11773)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11774);
rxp0_2=(py*r00);
rxp1_0=(r21*x11774);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11773)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
IkReal x11776=((1.0)*(x11778.value));
IkReal x11777=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11776)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11777);
rxp0_2=(py*r00);
rxp1_0=(r21*x11777);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11776)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11781 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11781.valid){
continue;
}
IkReal x11779=((1.0)*(x11781.value));
IkReal x11780=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11779)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11780);
rxp0_2=(py*r00);
rxp1_0=(r21*x11780);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11779)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11784=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11784.valid){
continue;
}
IkReal x11782=x11784.value;
IkReal x11783=((1.0)*cj0*x11782);
cj4array[0]=((((-1.0)*cj2*sj1*x11783))+(((-1.0)*cj1*sj2*x11783)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11785=IKsin(j4);
IkReal x11786=IKcos(j4);
IkReal x11787=(gconst10*r21);
IkReal x11788=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11785);
evalcond[1]=((((-1.0)*r12*x11786))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11785*x11788))+((x11785*x11787)));
evalcond[3]=((((-1.0)*gconst11*r00*x11785))+((gconst10*r01*x11785)));
evalcond[4]=((((-1.0)*x11786*x11788))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11786*x11787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11790=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11790.valid){
continue;
}
IkReal x11789=x11790.value;
cj4array[0]=(((cj1*cj2*x11789))+(((-1.0)*sj1*sj2*x11789)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11791=IKsin(j4);
IkReal x11792=IKcos(j4);
IkReal x11793=(gconst10*r01);
IkReal x11794=((1.0)*x11792);
IkReal x11795=((1.0)*gconst11*x11791);
evalcond[0]=(r12*x11791);
evalcond[1]=((((-1.0)*r12*x11794))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11795))+((gconst10*r21*x11791)));
evalcond[3]=((((-1.0)*r00*x11795))+((x11791*x11793)));
evalcond[4]=(((x11792*x11793))+(((-1.0)*gconst11*r00*x11794))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11796=IKPowWithIntegerCheck(r12,-1);
if(!x11796.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11796.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11797=IKsin(j4);
IkReal x11798=IKcos(j4);
IkReal x11799=(gconst10*x11798);
IkReal x11800=(gconst10*x11797);
IkReal x11801=((1.0)*gconst11*r20);
IkReal x11802=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11797);
evalcond[1]=(((r21*x11800))+(((-1.0)*x11797*x11801)));
evalcond[2]=((((-1.0)*x11797*x11802))+((r01*x11800)));
evalcond[3]=((((-1.0)*x11798*x11801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11799)));
evalcond[4]=((((-1.0)*x11798*x11802))+((cj0*cj2*sj1))+((r01*x11799))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11804=IKPowWithIntegerCheck(r12,-1);
if(!x11804.valid){
continue;
}
IkReal x11803=x11804.value;
CheckValue<IkReal> x11805=IKPowWithIntegerCheck(sj3,-1);
if(!x11805.valid){
continue;
}
if( IKabs((x11803*(x11805.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11803)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11803*(x11805.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11803))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11803*(x11805.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11803));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11806=IKsin(j4);
IkReal x11807=IKcos(j4);
IkReal x11808=(cj2*sj0);
IkReal x11809=(gconst11*r20);
IkReal x11810=(cj3*gconst11);
IkReal x11811=(sj1*sj2);
IkReal x11812=(gconst11*r00);
IkReal x11813=(cj2*sj1);
IkReal x11814=(cj1*cj2);
IkReal x11815=(gconst10*sj3);
IkReal x11816=(cj3*gconst10);
IkReal x11817=(gconst11*sj3);
IkReal x11818=(cj1*sj2);
IkReal x11819=((1.0)*cj0);
IkReal x11820=((1.0)*x11806);
IkReal x11821=((1.0)*x11807);
IkReal x11822=(gconst10*x11806);
IkReal x11823=(sj3*x11807);
evalcond[0]=((((-1.0)*r12*x11821))+(((-1.0)*x11819)));
evalcond[1]=(((r21*x11822))+(((-1.0)*x11809*x11820)));
evalcond[2]=(sj0+((r01*x11822))+(((-1.0)*x11812*x11820)));
evalcond[3]=(((sj0*x11818))+(((-1.0)*r12*sj3*x11820))+((sj1*x11808)));
evalcond[4]=(((cj1*x11808))+(((-1.0)*sj0*x11811))+((cj3*r12*x11806)));
evalcond[5]=(((r21*x11807*x11816))+((r21*x11817))+(((-1.0)*cj3*x11809*x11821))+((r20*x11815))+x11813+x11818);
evalcond[6]=(((x11809*x11823))+(((-1.0)*x11814))+(((-1.0)*r21*x11815*x11821))+((r21*x11810))+((r20*x11816))+x11811);
evalcond[7]=(((r01*x11810))+((r00*x11816))+(((-1.0)*r01*x11815*x11821))+((cj0*x11818))+((cj0*x11813))+((x11812*x11823)));
evalcond[8]=(((r01*x11807*x11816))+(((-1.0)*r00*x11810*x11821))+((r01*x11817))+((r00*x11815))+((cj0*x11814))+(((-1.0)*x11811*x11819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11824=((1.0)*gconst11);
CheckValue<IkReal> x11825=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*r00*x11824))),-1);
if(!x11825.valid){
continue;
}
CheckValue<IkReal> x11826=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11824))+((cj3*gconst10*r21))),-1);
if(!x11826.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11825.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11824))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11825.value)))+IKsqr(((x11826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11824))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11825.value)), ((x11826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*r21*sj3*x11824))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11827=IKsin(j4);
IkReal x11828=IKcos(j4);
IkReal x11829=(cj2*sj0);
IkReal x11830=(gconst11*r20);
IkReal x11831=(cj3*gconst11);
IkReal x11832=(sj1*sj2);
IkReal x11833=(gconst11*r00);
IkReal x11834=(cj2*sj1);
IkReal x11835=(cj1*cj2);
IkReal x11836=(gconst10*sj3);
IkReal x11837=(cj3*gconst10);
IkReal x11838=(gconst11*sj3);
IkReal x11839=(cj1*sj2);
IkReal x11840=((1.0)*cj0);
IkReal x11841=((1.0)*x11827);
IkReal x11842=((1.0)*x11828);
IkReal x11843=(gconst10*x11827);
IkReal x11844=(sj3*x11828);
evalcond[0]=((((-1.0)*x11840))+(((-1.0)*r12*x11842)));
evalcond[1]=(((r21*x11843))+(((-1.0)*x11830*x11841)));
evalcond[2]=((((-1.0)*x11833*x11841))+sj0+((r01*x11843)));
evalcond[3]=((((-1.0)*r12*sj3*x11841))+((sj1*x11829))+((sj0*x11839)));
evalcond[4]=(((cj3*r12*x11827))+((cj1*x11829))+(((-1.0)*sj0*x11832)));
evalcond[5]=(((r21*x11838))+((r20*x11836))+((r21*x11828*x11837))+x11839+x11834+(((-1.0)*cj3*x11830*x11842)));
evalcond[6]=(((r21*x11831))+((x11830*x11844))+(((-1.0)*x11835))+((r20*x11837))+(((-1.0)*r21*x11836*x11842))+x11832);
evalcond[7]=((((-1.0)*r01*x11836*x11842))+((cj0*x11839))+((cj0*x11834))+((x11833*x11844))+((r00*x11837))+((r01*x11831)));
evalcond[8]=((((-1.0)*x11832*x11840))+((r01*x11828*x11837))+((cj0*x11835))+((r00*x11836))+((r01*x11838))+(((-1.0)*r00*x11831*x11842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11845=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11845.valid){
continue;
}
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(r12,-1);
if(!x11846.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11845.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11846.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11845.value)))+IKsqr(((-1.0)*cj0*(x11846.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11845.value)), ((-1.0)*cj0*(x11846.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11847=IKsin(j4);
IkReal x11848=IKcos(j4);
IkReal x11849=(cj2*sj0);
IkReal x11850=(gconst11*r20);
IkReal x11851=(cj3*gconst11);
IkReal x11852=(sj1*sj2);
IkReal x11853=(gconst11*r00);
IkReal x11854=(cj2*sj1);
IkReal x11855=(cj1*cj2);
IkReal x11856=(gconst10*sj3);
IkReal x11857=(cj3*gconst10);
IkReal x11858=(gconst11*sj3);
IkReal x11859=(cj1*sj2);
IkReal x11860=((1.0)*cj0);
IkReal x11861=((1.0)*x11847);
IkReal x11862=((1.0)*x11848);
IkReal x11863=(gconst10*x11847);
IkReal x11864=(sj3*x11848);
evalcond[0]=((((-1.0)*x11860))+(((-1.0)*r12*x11862)));
evalcond[1]=((((-1.0)*x11850*x11861))+((r21*x11863)));
evalcond[2]=(sj0+((r01*x11863))+(((-1.0)*x11853*x11861)));
evalcond[3]=(((sj1*x11849))+((sj0*x11859))+(((-1.0)*r12*sj3*x11861)));
evalcond[4]=((((-1.0)*sj0*x11852))+((cj1*x11849))+((cj3*r12*x11847)));
evalcond[5]=(((r21*x11858))+((r20*x11856))+(((-1.0)*cj3*x11850*x11862))+((r21*x11848*x11857))+x11859+x11854);
evalcond[6]=(((r21*x11851))+((x11850*x11864))+((r20*x11857))+(((-1.0)*r21*x11856*x11862))+(((-1.0)*x11855))+x11852);
evalcond[7]=(((cj0*x11859))+((cj0*x11854))+(((-1.0)*r01*x11856*x11862))+((r01*x11851))+((x11853*x11864))+((r00*x11857)));
evalcond[8]=(((cj0*x11855))+((r01*x11858))+(((-1.0)*x11852*x11860))+((r00*x11856))+((r01*x11848*x11857))+(((-1.0)*r00*x11851*x11862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11867 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11867.valid){
continue;
}
IkReal x11865=((1.0)*(x11867.value));
IkReal x11866=x11483;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11865)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11865)));
IkReal gconst10=((1.0)*r01*x11866);
IkReal gconst11=((-1.0)*r00*x11866);
IkReal x11868=r02*r02;
IkReal x11869=(r12*sj0);
IkReal x11870=x11483;
IkReal x11871=(cj0*x11870);
j4eval[0]=((IKabs((((r02*x11869*x11870))+((x11868*x11871))+(((-1.0)*x11871)))))+(IKabs((x11869+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11872=((1.0)*r02);
IkReal x11873=(sj1*sj2);
IkReal x11874=(cj1*cj2);
IkReal x11875=((1.0)*sj3);
IkReal x11876=(gconst10*r21*sj3);
IkReal x11877=(gconst11*r20*sj3);
IkReal x11878=(cj3*gconst11*r21);
IkReal x11879=(cj3*gconst10*r20);
CheckValue<IkReal> x11880=IKPowWithIntegerCheck((((gconst10*r01*x11877))+((gconst11*r00*x11876))+(((-1.0)*r01*r21*x11875*(gconst10*gconst10)))+(((-1.0)*r00*r20*x11875*(gconst11*gconst11)))),-1);
if(!x11880.valid){
continue;
}
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(((((-1.0)*gconst10*r21*x11875))+x11877),-1);
if(!x11881.valid){
continue;
}
if( IKabs(((x11880.value)*(((((-1.0)*x11872*x11879))+(((-1.0)*x11872*x11878))+(((-1.0)*x11872*x11873))+(((-1.0)*gconst11*r20*sj0*x11875))+((sj0*x11876))+((r02*x11874)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11881.value)*(((((-1.0)*x11878))+(((-1.0)*x11879))+(((-1.0)*x11873))+x11874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11880.value)*(((((-1.0)*x11872*x11879))+(((-1.0)*x11872*x11878))+(((-1.0)*x11872*x11873))+(((-1.0)*gconst11*r20*sj0*x11875))+((sj0*x11876))+((r02*x11874))))))+IKsqr(((x11881.value)*(((((-1.0)*x11878))+(((-1.0)*x11879))+(((-1.0)*x11873))+x11874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11880.value)*(((((-1.0)*x11872*x11879))+(((-1.0)*x11872*x11878))+(((-1.0)*x11872*x11873))+(((-1.0)*gconst11*r20*sj0*x11875))+((sj0*x11876))+((r02*x11874))))), ((x11881.value)*(((((-1.0)*x11878))+(((-1.0)*x11879))+(((-1.0)*x11873))+x11874))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11882=IKsin(j4);
IkReal x11883=IKcos(j4);
IkReal x11884=(gconst10*sj3);
IkReal x11885=(cj3*r10);
IkReal x11886=(gconst11*r20);
IkReal x11887=(gconst11*sj3);
IkReal x11888=(cj3*r00);
IkReal x11889=(sj1*sj2);
IkReal x11890=(cj3*gconst11);
IkReal x11891=(cj1*cj2);
IkReal x11892=(cj2*sj1);
IkReal x11893=(cj1*sj2);
IkReal x11894=((1.0)*cj0);
IkReal x11895=((1.0)*x11882);
IkReal x11896=(gconst10*x11882);
IkReal x11897=((1.0)*x11883);
IkReal x11898=(cj3*x11882);
IkReal x11899=(gconst11*x11897);
IkReal x11900=(cj3*gconst10*x11883);
evalcond[0]=((((-1.0)*x11886*x11895))+((r21*x11896)));
evalcond[1]=(sj0+((r01*x11896))+(((-1.0)*gconst11*r00*x11895))+(((-1.0)*r02*x11897)));
evalcond[2]=((((-1.0)*r12*x11897))+(((-1.0)*x11894))+(((-1.0)*gconst11*r10*x11895))+((r11*x11896)));
evalcond[3]=(((r21*x11887))+((r21*x11900))+(((-1.0)*cj3*x11886*x11897))+x11892+x11893+((r20*x11884)));
evalcond[4]=((((-1.0)*x11891))+((r21*x11890))+(((-1.0)*r21*x11884*x11897))+((cj3*gconst10*r20))+((sj3*x11883*x11886))+x11889);
evalcond[5]=(((gconst10*x11888))+(((-1.0)*r01*x11884*x11897))+((r00*x11883*x11887))+((r01*x11890))+((cj0*x11893))+((cj0*x11892))+(((-1.0)*r02*sj3*x11895)));
evalcond[6]=(((r01*x11887))+((r00*x11884))+((r01*x11900))+((r02*x11898))+(((-1.0)*x11888*x11899))+(((-1.0)*x11889*x11894))+((cj0*x11891)));
evalcond[7]=(((sj0*x11893))+((sj0*x11892))+((gconst10*x11885))+(((-1.0)*r11*x11884*x11897))+((r10*x11883*x11887))+(((-1.0)*r12*sj3*x11895))+((r11*x11890)));
evalcond[8]=(((sj0*x11891))+(((-1.0)*sj0*x11889))+((r10*x11884))+(((-1.0)*x11885*x11899))+((r11*x11900))+((r12*x11898))+((r11*x11887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11901=((1.0)*gconst11);
CheckValue<IkReal> x11902 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x11901))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11902.valid){
continue;
}
CheckValue<IkReal> x11903=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11901)))),-1);
if(!x11903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11902.value)+(((1.5707963267949)*(x11903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11904=IKsin(j4);
IkReal x11905=IKcos(j4);
IkReal x11906=(gconst10*sj3);
IkReal x11907=(cj3*r10);
IkReal x11908=(gconst11*r20);
IkReal x11909=(gconst11*sj3);
IkReal x11910=(cj3*r00);
IkReal x11911=(sj1*sj2);
IkReal x11912=(cj3*gconst11);
IkReal x11913=(cj1*cj2);
IkReal x11914=(cj2*sj1);
IkReal x11915=(cj1*sj2);
IkReal x11916=((1.0)*cj0);
IkReal x11917=((1.0)*x11904);
IkReal x11918=(gconst10*x11904);
IkReal x11919=((1.0)*x11905);
IkReal x11920=(cj3*x11904);
IkReal x11921=(gconst11*x11919);
IkReal x11922=(cj3*gconst10*x11905);
evalcond[0]=((((-1.0)*x11908*x11917))+((r21*x11918)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11917))+((r01*x11918))+(((-1.0)*r02*x11919)));
evalcond[2]=(((r11*x11918))+(((-1.0)*r12*x11919))+(((-1.0)*gconst11*r10*x11917))+(((-1.0)*x11916)));
evalcond[3]=(x11915+x11914+((r21*x11922))+(((-1.0)*cj3*x11908*x11919))+((r21*x11909))+((r20*x11906)));
evalcond[4]=(x11911+(((-1.0)*r21*x11906*x11919))+(((-1.0)*x11913))+((r21*x11912))+((cj3*gconst10*r20))+((sj3*x11905*x11908)));
evalcond[5]=(((r00*x11905*x11909))+((gconst10*x11910))+(((-1.0)*r01*x11906*x11919))+(((-1.0)*r02*sj3*x11917))+((r01*x11912))+((cj0*x11915))+((cj0*x11914)));
evalcond[6]=(((r02*x11920))+(((-1.0)*x11910*x11921))+((r00*x11906))+((r01*x11909))+((cj0*x11913))+(((-1.0)*x11911*x11916))+((r01*x11922)));
evalcond[7]=(((r11*x11912))+((sj0*x11915))+((sj0*x11914))+(((-1.0)*r12*sj3*x11917))+((r10*x11905*x11909))+((gconst10*x11907))+(((-1.0)*r11*x11906*x11919)));
evalcond[8]=(((sj0*x11913))+(((-1.0)*sj0*x11911))+(((-1.0)*x11907*x11921))+((r11*x11922))+((r12*x11920))+((r10*x11906))+((r11*x11909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11923=((1.0)*gconst11);
CheckValue<IkReal> x11924 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11923))+(((-1.0)*cj0*r00*x11923))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11924.valid){
continue;
}
CheckValue<IkReal> x11925=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11923)))),-1);
if(!x11925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11924.value)+(((1.5707963267949)*(x11925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11926=IKsin(j4);
IkReal x11927=IKcos(j4);
IkReal x11928=(gconst10*sj3);
IkReal x11929=(cj3*r10);
IkReal x11930=(gconst11*r20);
IkReal x11931=(gconst11*sj3);
IkReal x11932=(cj3*gconst11);
IkReal x11933=(sj1*sj2);
IkReal x11934=(cj1*cj2);
IkReal x11935=(cj2*sj1);
IkReal x11936=(cj1*sj2);
IkReal x11937=(cj3*gconst10);
IkReal x11938=((1.0)*cj0);
IkReal x11939=((1.0)*x11927);
IkReal x11940=((1.0)*x11926);
IkReal x11941=(cj3*x11926);
IkReal x11942=(gconst10*x11926);
IkReal x11943=(x11927*x11937);
evalcond[0]=((((-1.0)*x11930*x11940))+((r21*x11942))+(((-1.0)*r22*x11939)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11940))+(((-1.0)*r02*x11939))+((r01*x11942)));
evalcond[2]=((((-1.0)*gconst11*r10*x11940))+((r11*x11942))+(((-1.0)*x11938))+(((-1.0)*r12*x11939)));
evalcond[3]=(x11935+x11936+((r21*x11931))+((r20*x11928))+((r21*x11943))+((r22*x11941))+(((-1.0)*cj3*x11930*x11939)));
evalcond[4]=(x11933+((r21*x11932))+((r20*x11937))+(((-1.0)*r21*x11928*x11939))+(((-1.0)*r22*sj3*x11940))+(((-1.0)*x11934))+((sj3*x11927*x11930)));
evalcond[5]=((((-1.0)*r02*sj3*x11940))+((cj0*x11935))+((cj0*x11936))+((r00*x11927*x11931))+(((-1.0)*r01*x11928*x11939))+((r00*x11937))+((r01*x11932)));
evalcond[6]=(((cj0*x11934))+((r02*x11941))+(((-1.0)*x11933*x11938))+((r01*x11943))+((r00*x11928))+((r01*x11931))+(((-1.0)*r00*x11932*x11939)));
evalcond[7]=(((r10*x11927*x11931))+(((-1.0)*r12*sj3*x11940))+((gconst10*x11929))+((r11*x11932))+((sj0*x11935))+((sj0*x11936))+(((-1.0)*r11*x11928*x11939)));
evalcond[8]=((((-1.0)*sj0*x11933))+((r11*x11943))+((r10*x11928))+((r12*x11941))+((r11*x11931))+(((-1.0)*gconst11*x11929*x11939))+((sj0*x11934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11944 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11944.valid){
continue;
}
CheckValue<IkReal> x11945=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11944.value)+(((1.5707963267949)*(x11945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11946=IKsin(j4);
IkReal x11947=IKcos(j4);
IkReal x11948=(gconst10*sj3);
IkReal x11949=(cj3*r10);
IkReal x11950=(gconst11*r20);
IkReal x11951=(gconst11*sj3);
IkReal x11952=(cj3*gconst11);
IkReal x11953=(sj1*sj2);
IkReal x11954=(cj1*cj2);
IkReal x11955=(cj2*sj1);
IkReal x11956=(cj1*sj2);
IkReal x11957=(cj3*gconst10);
IkReal x11958=((1.0)*cj0);
IkReal x11959=((1.0)*x11947);
IkReal x11960=((1.0)*x11946);
IkReal x11961=(cj3*x11946);
IkReal x11962=(gconst10*x11946);
IkReal x11963=(x11947*x11957);
evalcond[0]=((((-1.0)*r22*x11959))+(((-1.0)*x11950*x11960))+((r21*x11962)));
evalcond[1]=(((r01*x11962))+(((-1.0)*r02*x11959))+sj0+(((-1.0)*gconst11*r00*x11960)));
evalcond[2]=((((-1.0)*r12*x11959))+(((-1.0)*x11958))+((r11*x11962))+(((-1.0)*gconst11*r10*x11960)));
evalcond[3]=(x11956+x11955+(((-1.0)*cj3*x11950*x11959))+((r20*x11948))+((r21*x11951))+((r21*x11963))+((r22*x11961)));
evalcond[4]=(x11953+((sj3*x11947*x11950))+((r20*x11957))+((r21*x11952))+(((-1.0)*x11954))+(((-1.0)*r22*sj3*x11960))+(((-1.0)*r21*x11948*x11959)));
evalcond[5]=(((r00*x11947*x11951))+(((-1.0)*r01*x11948*x11959))+((cj0*x11955))+((cj0*x11956))+((r01*x11952))+((r00*x11957))+(((-1.0)*r02*sj3*x11960)));
evalcond[6]=(((r01*x11963))+((cj0*x11954))+((r02*x11961))+(((-1.0)*r00*x11952*x11959))+((r01*x11951))+((r00*x11948))+(((-1.0)*x11953*x11958)));
evalcond[7]=(((r10*x11947*x11951))+(((-1.0)*r11*x11948*x11959))+((r11*x11952))+(((-1.0)*r12*sj3*x11960))+((sj0*x11955))+((sj0*x11956))+((gconst10*x11949)));
evalcond[8]=((((-1.0)*gconst11*x11949*x11959))+((r11*x11963))+((r11*x11951))+((r12*x11961))+((r10*x11948))+(((-1.0)*sj0*x11953))+((sj0*x11954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11964=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11964.valid){
continue;
}
CheckValue<IkReal> x11965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11964.value)))+(x11965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11966=IKsin(j4);
IkReal x11967=IKcos(j4);
IkReal x11968=(gconst10*sj3);
IkReal x11969=(cj3*r10);
IkReal x11970=(gconst11*r20);
IkReal x11971=(gconst11*sj3);
IkReal x11972=(cj3*gconst11);
IkReal x11973=(sj1*sj2);
IkReal x11974=(cj1*cj2);
IkReal x11975=(cj2*sj1);
IkReal x11976=(cj1*sj2);
IkReal x11977=(cj3*gconst10);
IkReal x11978=((1.0)*cj0);
IkReal x11979=((1.0)*x11967);
IkReal x11980=((1.0)*x11966);
IkReal x11981=(cj3*x11966);
IkReal x11982=(gconst10*x11966);
IkReal x11983=(x11967*x11977);
evalcond[0]=(((r21*x11982))+(((-1.0)*x11970*x11980))+(((-1.0)*r22*x11979)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11980))+(((-1.0)*r02*x11979))+((r01*x11982)));
evalcond[2]=((((-1.0)*r12*x11979))+(((-1.0)*gconst11*r10*x11980))+(((-1.0)*x11978))+((r11*x11982)));
evalcond[3]=(x11975+x11976+((r21*x11983))+(((-1.0)*cj3*x11970*x11979))+((r20*x11968))+((r22*x11981))+((r21*x11971)));
evalcond[4]=(x11973+(((-1.0)*x11974))+((sj3*x11967*x11970))+(((-1.0)*r22*sj3*x11980))+((r20*x11977))+(((-1.0)*r21*x11968*x11979))+((r21*x11972)));
evalcond[5]=(((r00*x11977))+((r01*x11972))+((cj0*x11975))+((cj0*x11976))+(((-1.0)*r01*x11968*x11979))+(((-1.0)*r02*sj3*x11980))+((r00*x11967*x11971)));
evalcond[6]=(((r00*x11968))+((r01*x11971))+((r02*x11981))+((cj0*x11974))+(((-1.0)*r00*x11972*x11979))+((r01*x11983))+(((-1.0)*x11973*x11978)));
evalcond[7]=(((gconst10*x11969))+((r11*x11972))+(((-1.0)*r12*sj3*x11980))+((r10*x11967*x11971))+((sj0*x11976))+((sj0*x11975))+(((-1.0)*r11*x11968*x11979)));
evalcond[8]=(((r11*x11971))+(((-1.0)*gconst11*x11969*x11979))+((r10*x11968))+((r12*x11981))+((sj0*x11974))+((r11*x11983))+(((-1.0)*sj0*x11973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11984=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11984;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11985=((1.0)*cj5);
IkReal x11986=((((-1.0)*r21*x11985))+(((-1.0)*r20*sj5)));
j4eval[0]=x11986;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11985))+((r11*sj5))))));
j4eval[2]=IKsign(x11986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11987=cj5*cj5;
IkReal x11988=(cj3*r01);
IkReal x11989=(cj5*sj5);
IkReal x11990=((1.0)*cj3);
IkReal x11991=((((-1.0)*r02*r22*x11990))+((cj3*r00*r21*x11989))+(((-1.0)*r00*r20*x11987*x11990))+(((-1.0)*r21*x11988))+((r20*x11988*x11989))+((r21*x11987*x11988)));
j4eval[0]=x11991;
j4eval[1]=IKsign(x11991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11992=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11992;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11993=((1.0)*cj5);
IkReal x11994=((((-1.0)*r21*x11993))+(((-1.0)*r20*sj5)));
j4eval[0]=x11994;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x11993))))));
j4eval[2]=IKsign(x11994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11995=cj5*cj5;
IkReal x11996=r01*r01;
IkReal x11997=(cj5*r00);
IkReal x11998=(r01*sj5);
IkReal x11999=(x11996+(((-2.0)*x11997*x11998))+((x11995*(r00*r00)))+(((-1.0)*x11995*x11996))+(r02*r02));
j4eval[0]=x11999;
j4eval[1]=((IKabs(r02))+(IKabs((x11997+(((-1.0)*x11998))))));
j4eval[2]=IKsign(x11999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12000=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12000);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12000);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12001=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12001);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12001);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12002=((1.0)*cj2);
CheckValue<IkReal> x12003=IKPowWithIntegerCheck(r22,-1);
if(!x12003.valid){
continue;
}
CheckValue<IkReal> x12004=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12004.valid){
continue;
}
if( IKabs(((x12003.value)*((((sj1*sj2))+(((-1.0)*cj1*x12002)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12004.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12002)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12003.value)*((((sj1*sj2))+(((-1.0)*cj1*x12002))))))+IKsqr(((x12004.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12002))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12003.value)*((((sj1*sj2))+(((-1.0)*cj1*x12002))))), ((x12004.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12002))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12005=IKsin(j4);
IkReal x12006=IKcos(j4);
IkReal x12007=(cj5*x12006);
IkReal x12008=(sj5*x12005);
IkReal x12009=((1.0)*cj5*x12005);
IkReal x12010=((1.0)*sj5*x12006);
evalcond[0]=((-1.0)*r22*x12006);
evalcond[1]=((((-1.0)*r10*x12009))+((r11*x12008)));
evalcond[2]=((((-1.0)*r22*x12005))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[3]=((((-1.0)*r01*x12010))+((r00*x12007)));
evalcond[4]=((1.0)+(((-1.0)*r00*x12009))+((r01*x12008)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12010))+((r10*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12011=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12011.valid){
continue;
}
CheckValue<IkReal> x12012=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12012.valid){
continue;
}
if( IKabs(((-1.0)*(x12011.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12012.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12011.value)))+IKsqr(((x12012.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12011.value)), ((x12012.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12013=IKsin(j4);
IkReal x12014=IKcos(j4);
IkReal x12015=(cj5*x12014);
IkReal x12016=(sj5*x12013);
IkReal x12017=((1.0)*cj5*x12013);
IkReal x12018=((1.0)*sj5*x12014);
evalcond[0]=((-1.0)*r22*x12014);
evalcond[1]=(((r11*x12016))+(((-1.0)*r10*x12017)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12013)));
evalcond[3]=((((-1.0)*r01*x12018))+((r00*x12015)));
evalcond[4]=((1.0)+((r01*x12016))+(((-1.0)*r00*x12017)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r10*x12015))+(((-1.0)*r11*x12018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12019=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12019);
rxp0_2=(py*r00);
rxp1_0=(r21*x12019);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12020=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12020);
rxp0_2=(py*r00);
rxp1_0=(r21*x12020);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12021=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12021.valid){
continue;
}
CheckValue<IkReal> x12022=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12022.valid){
continue;
}
if( IKabs(((-1.0)*(x12021.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12022.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12021.value)))+IKsqr(((x12022.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12021.value)), ((x12022.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12023=IKsin(j4);
IkReal x12024=IKcos(j4);
IkReal x12025=(cj5*r00);
IkReal x12026=(cj5*r20);
IkReal x12027=(r21*sj5);
IkReal x12028=(r01*sj5);
IkReal x12029=((1.0)*x12023);
IkReal x12030=((1.0)*x12024);
evalcond[0]=((-1.0)*r12*x12024);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12029)));
evalcond[2]=(((x12023*x12027))+(((-1.0)*x12026*x12029)));
evalcond[3]=((((-1.0)*x12028*x12030))+((x12024*x12025)));
evalcond[4]=((1.0)+((x12023*x12028))+(((-1.0)*x12025*x12029)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12027*x12030))+((x12024*x12026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12031=IKPowWithIntegerCheck(r12,-1);
if(!x12031.valid){
continue;
}
CheckValue<IkReal> x12032=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12032.valid){
continue;
}
if( IKabs(((x12031.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12032.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12031.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12032.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12031.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12032.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12033=IKsin(j4);
IkReal x12034=IKcos(j4);
IkReal x12035=(cj5*r00);
IkReal x12036=(cj5*r20);
IkReal x12037=(r21*sj5);
IkReal x12038=(r01*sj5);
IkReal x12039=((1.0)*x12033);
IkReal x12040=((1.0)*x12034);
evalcond[0]=((-1.0)*r12*x12034);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12039)));
evalcond[2]=(((x12033*x12037))+(((-1.0)*x12036*x12039)));
evalcond[3]=(((x12034*x12035))+(((-1.0)*x12038*x12040)));
evalcond[4]=((1.0)+((x12033*x12038))+(((-1.0)*x12035*x12039)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12034*x12036))+(((-1.0)*x12037*x12040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12041=cj5*cj5;
IkReal x12042=r01*r01;
IkReal x12043=(r01*sj5);
IkReal x12044=(cj5*r00);
CheckValue<IkReal> x12045 = IKatan2WithCheck(IkReal(((((-1.0)*x12043))+x12044)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12045.valid){
continue;
}
CheckValue<IkReal> x12046=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12041*x12042))+x12042+((x12041*(r00*r00)))+(((-2.0)*x12043*x12044))+(r02*r02))),-1);
if(!x12046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12045.value)+(((1.5707963267949)*(x12046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12047=IKsin(j4);
IkReal x12048=IKcos(j4);
IkReal x12049=(cj5*r10);
IkReal x12050=(r01*sj5);
IkReal x12051=(cj5*r00);
IkReal x12052=(cj5*r20);
IkReal x12053=((1.0)*x12048);
IkReal x12054=((1.0)*x12047);
IkReal x12055=(sj5*x12047);
evalcond[0]=((((-1.0)*x12052*x12054))+(((-1.0)*r22*x12053))+((r21*x12055)));
evalcond[1]=((((-1.0)*x12049*x12054))+(((-1.0)*r12*x12053))+((r11*x12055)));
evalcond[2]=((((-1.0)*r02*x12054))+(((-1.0)*x12050*x12053))+((x12048*x12051)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12053))+((x12047*x12050))+(((-1.0)*x12051*x12054)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12048*x12049))+(((-1.0)*r11*sj5*x12053))+(((-1.0)*r12*x12054)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12054))+((x12048*x12052))+(((-1.0)*r21*sj5*x12053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12056=((1.0)*cj5);
CheckValue<IkReal> x12057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12056))+(((-1.0)*r20*sj5)))),-1);
if(!x12057.valid){
continue;
}
CheckValue<IkReal> x12058 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12056))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12057.value)))+(x12058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12059=IKsin(j4);
IkReal x12060=IKcos(j4);
IkReal x12061=(cj5*r10);
IkReal x12062=(r01*sj5);
IkReal x12063=(cj5*r00);
IkReal x12064=(cj5*r20);
IkReal x12065=((1.0)*x12060);
IkReal x12066=((1.0)*x12059);
IkReal x12067=(sj5*x12059);
evalcond[0]=(((r21*x12067))+(((-1.0)*x12064*x12066))+(((-1.0)*r22*x12065)));
evalcond[1]=((((-1.0)*x12061*x12066))+(((-1.0)*r12*x12065))+((r11*x12067)));
evalcond[2]=(((x12060*x12063))+(((-1.0)*x12062*x12065))+(((-1.0)*r02*x12066)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12065))+((x12059*x12062))+(((-1.0)*x12063*x12066)));
evalcond[4]=(((cj2*sj1))+((x12060*x12061))+((cj1*sj2))+(((-1.0)*r12*x12066))+(((-1.0)*r11*sj5*x12065)));
evalcond[5]=(((x12060*x12064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12066))+(((-1.0)*r21*sj5*x12065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12068 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12068.valid){
continue;
}
CheckValue<IkReal> x12069=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12068.value)+(((1.5707963267949)*(x12069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12070=IKsin(j4);
IkReal x12071=IKcos(j4);
IkReal x12072=(cj5*r10);
IkReal x12073=(r01*sj5);
IkReal x12074=(cj5*r00);
IkReal x12075=(cj5*r20);
IkReal x12076=((1.0)*x12071);
IkReal x12077=((1.0)*x12070);
IkReal x12078=(sj5*x12070);
evalcond[0]=((((-1.0)*r22*x12076))+((r21*x12078))+(((-1.0)*x12075*x12077)));
evalcond[1]=((((-1.0)*x12072*x12077))+((r11*x12078))+(((-1.0)*r12*x12076)));
evalcond[2]=(((x12071*x12074))+(((-1.0)*x12073*x12076))+(((-1.0)*r02*x12077)));
evalcond[3]=((1.0)+((x12070*x12073))+(((-1.0)*r02*x12076))+(((-1.0)*x12074*x12077)));
evalcond[4]=((((-1.0)*r11*sj5*x12076))+((x12071*x12072))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12077)));
evalcond[5]=(((x12071*x12075))+(((-1.0)*r21*sj5*x12076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12079=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12079;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12080=((1.0)*cj5);
IkReal x12081=((((-1.0)*r21*x12080))+(((-1.0)*r20*sj5)));
j4eval[0]=x12081;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12080))))));
j4eval[2]=IKsign(x12081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12082=cj5*cj5;
IkReal x12083=r01*r01;
IkReal x12084=(r01*sj5);
IkReal x12085=(cj5*r00);
IkReal x12086=(((x12082*x12083))+(((-1.0)*x12083))+(((-1.0)*(r02*r02)))+(((-1.0)*x12082*(r00*r00)))+(((2.0)*x12084*x12085)));
j4eval[0]=x12086;
j4eval[1]=IKsign(x12086);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12085))+x12084))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12087=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12087);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12087);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12088=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12088);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12088);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12089=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12089)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12089)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12090=((1.0)*cj5);
CheckValue<IkReal> x12091=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12090))),-1);
if(!x12091.valid){
continue;
}
CheckValue<IkReal> x12092=IKPowWithIntegerCheck(((((-1.0)*r10*x12090))+((r11*sj5))),-1);
if(!x12092.valid){
continue;
}
if( IKabs(((-1.0)*(x12091.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12092.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12091.value)))+IKsqr(((x12092.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12091.value)), ((x12092.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12093=IKsin(j4);
IkReal x12094=IKcos(j4);
IkReal x12095=((1.0)*cj5);
IkReal x12096=(sj5*x12094);
IkReal x12097=(sj5*x12093);
evalcond[0]=((-1.0)*r22*x12094);
evalcond[1]=(((r22*x12093))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((r11*x12097))+(((-1.0)*r10*x12093*x12095)));
evalcond[3]=(((r01*x12096))+(((-1.0)*r00*x12094*x12095)));
evalcond[4]=((1.0)+((r01*x12097))+(((-1.0)*r00*x12093*x12095)));
evalcond[5]=(((r11*x12096))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12094*x12095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12098=((1.0)*sj1);
CheckValue<IkReal> x12099=IKPowWithIntegerCheck(r22,-1);
if(!x12099.valid){
continue;
}
CheckValue<IkReal> x12100=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12100.valid){
continue;
}
if( IKabs(((x12099.value)*(((((-1.0)*sj2*x12098))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12100.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12098)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12099.value)*(((((-1.0)*sj2*x12098))+((cj1*cj2))))))+IKsqr(((x12100.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12098))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12099.value)*(((((-1.0)*sj2*x12098))+((cj1*cj2))))), ((x12100.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12098))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12101=IKsin(j4);
IkReal x12102=IKcos(j4);
IkReal x12103=((1.0)*cj5);
IkReal x12104=(sj5*x12102);
IkReal x12105=(sj5*x12101);
evalcond[0]=((-1.0)*r22*x12102);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12101)));
evalcond[2]=(((r11*x12105))+(((-1.0)*r10*x12101*x12103)));
evalcond[3]=(((r01*x12104))+(((-1.0)*r00*x12102*x12103)));
evalcond[4]=((1.0)+((r01*x12105))+(((-1.0)*r00*x12101*x12103)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r11*x12104))+(((-1.0)*r10*x12102*x12103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12106=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12106);
rxp0_2=(py*r00);
rxp1_0=(r21*x12106);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12107=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12107)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12107)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12108=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12108);
rxp0_2=(py*r00);
rxp1_0=(r21*x12108);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12109=((1.0)*sj1);
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(r12,-1);
if(!x12110.valid){
continue;
}
CheckValue<IkReal> x12111=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12111.valid){
continue;
}
if( IKabs(((x12110.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12109)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12111.value)*(((((-1.0)*sj2*x12109))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12110.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12109))))))+IKsqr(((x12111.value)*(((((-1.0)*sj2*x12109))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12110.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12109))))), ((x12111.value)*(((((-1.0)*sj2*x12109))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12112=IKsin(j4);
IkReal x12113=IKcos(j4);
IkReal x12114=((1.0)*cj5*r00);
IkReal x12115=(sj5*x12113);
IkReal x12116=(sj5*x12112);
IkReal x12117=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12113);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x12112)));
evalcond[2]=((((-1.0)*x12112*x12117))+((r21*x12116)));
evalcond[3]=(((r01*x12115))+(((-1.0)*x12113*x12114)));
evalcond[4]=((1.0)+((r01*x12116))+(((-1.0)*x12112*x12114)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12115))+(((-1.0)*x12113*x12117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12118=((1.0)*cj5);
CheckValue<IkReal> x12119=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12118))),-1);
if(!x12119.valid){
continue;
}
CheckValue<IkReal> x12120=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12118))),-1);
if(!x12120.valid){
continue;
}
if( IKabs(((-1.0)*(x12119.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12120.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12119.value)))+IKsqr(((x12120.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12119.value)), ((x12120.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12121=IKsin(j4);
IkReal x12122=IKcos(j4);
IkReal x12123=((1.0)*cj5*r00);
IkReal x12124=(sj5*x12122);
IkReal x12125=(sj5*x12121);
IkReal x12126=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12122);
evalcond[1]=(((cj2*sj1))+((r12*x12121))+((cj1*sj2)));
evalcond[2]=(((r21*x12125))+(((-1.0)*x12121*x12126)));
evalcond[3]=(((r01*x12124))+(((-1.0)*x12122*x12123)));
evalcond[4]=((1.0)+((r01*x12125))+(((-1.0)*x12121*x12123)));
evalcond[5]=(((r21*x12124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12122*x12126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12127=cj5*cj5;
IkReal x12128=r01*r01;
IkReal x12129=(r01*sj5);
IkReal x12130=(cj5*r00);
CheckValue<IkReal> x12131 = IKatan2WithCheck(IkReal((x12129+(((-1.0)*x12130)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12131.valid){
continue;
}
CheckValue<IkReal> x12132=IKPowWithIntegerCheck(IKsign(((((2.0)*x12129*x12130))+(((-1.0)*(r02*r02)))+(((-1.0)*x12127*(r00*r00)))+((x12127*x12128))+(((-1.0)*x12128)))),-1);
if(!x12132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12131.value)+(((1.5707963267949)*(x12132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12133=IKcos(j4);
IkReal x12134=IKsin(j4);
IkReal x12135=(cj5*r00);
IkReal x12136=(cj5*r10);
IkReal x12137=(r21*sj5);
IkReal x12138=(cj5*r20);
IkReal x12139=((1.0)*x12133);
IkReal x12140=((1.0)*x12134);
IkReal x12141=(sj5*x12134);
IkReal x12142=(sj5*x12133);
evalcond[0]=((((-1.0)*x12135*x12139))+((r01*x12142))+((r02*x12134)));
evalcond[1]=((((-1.0)*r22*x12139))+((x12134*x12137))+(((-1.0)*x12138*x12140)));
evalcond[2]=((((-1.0)*x12136*x12140))+((r11*x12141))+(((-1.0)*r12*x12139)));
evalcond[3]=((1.0)+((r01*x12141))+(((-1.0)*r02*x12139))+(((-1.0)*x12135*x12140)));
evalcond[4]=(((cj2*sj1))+((r12*x12134))+((cj1*sj2))+((r11*x12142))+(((-1.0)*x12136*x12139)));
evalcond[5]=((((-1.0)*x12138*x12139))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12134))+((x12133*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12143=((1.0)*cj5);
CheckValue<IkReal> x12144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12143))+(((-1.0)*r20*sj5)))),-1);
if(!x12144.valid){
continue;
}
CheckValue<IkReal> x12145 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12144.value)))+(x12145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12146=IKcos(j4);
IkReal x12147=IKsin(j4);
IkReal x12148=(cj5*r00);
IkReal x12149=(cj5*r10);
IkReal x12150=(r21*sj5);
IkReal x12151=(cj5*r20);
IkReal x12152=((1.0)*x12146);
IkReal x12153=((1.0)*x12147);
IkReal x12154=(sj5*x12147);
IkReal x12155=(sj5*x12146);
evalcond[0]=(((r02*x12147))+((r01*x12155))+(((-1.0)*x12148*x12152)));
evalcond[1]=((((-1.0)*r22*x12152))+((x12147*x12150))+(((-1.0)*x12151*x12153)));
evalcond[2]=((((-1.0)*r12*x12152))+((r11*x12154))+(((-1.0)*x12149*x12153)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12152))+((r01*x12154))+(((-1.0)*x12148*x12153)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12147))+((r11*x12155))+(((-1.0)*x12149*x12152)));
evalcond[5]=(((r22*x12147))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12146*x12150))+(((-1.0)*x12151*x12152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12156 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12156.valid){
continue;
}
CheckValue<IkReal> x12157=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12156.value)+(((1.5707963267949)*(x12157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12158=IKcos(j4);
IkReal x12159=IKsin(j4);
IkReal x12160=(cj5*r00);
IkReal x12161=(cj5*r10);
IkReal x12162=(r21*sj5);
IkReal x12163=(cj5*r20);
IkReal x12164=((1.0)*x12158);
IkReal x12165=((1.0)*x12159);
IkReal x12166=(sj5*x12159);
IkReal x12167=(sj5*x12158);
evalcond[0]=((((-1.0)*x12160*x12164))+((r02*x12159))+((r01*x12167)));
evalcond[1]=((((-1.0)*r22*x12164))+((x12159*x12162))+(((-1.0)*x12163*x12165)));
evalcond[2]=((((-1.0)*x12161*x12165))+((r11*x12166))+(((-1.0)*r12*x12164)));
evalcond[3]=((1.0)+(((-1.0)*x12160*x12165))+((r01*x12166))+(((-1.0)*r02*x12164)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12161*x12164))+((cj1*sj2))+((r12*x12159))+((r11*x12167)));
evalcond[5]=(((r22*x12159))+((x12158*x12162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12163*x12164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12169 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12169)==0){
continue;
}
IkReal x12168=pow(x12169,-0.5);
CheckValue<IkReal> x12170 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12170.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12170.value));
IkReal gconst25=((-1.0)*r11*x12168);
IkReal gconst26=(r10*x12168);
CheckValue<IkReal> x12171 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12171.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12171.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
IkReal x12172=((-1.0)*(x12174.value));
IkReal x12173=x12168;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12172;
IkReal gconst24=x12172;
IkReal gconst25=((-1.0)*r11*x12173);
IkReal gconst26=(r10*x12173);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12177 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12177.valid){
continue;
}
IkReal x12175=((-1.0)*(x12177.value));
IkReal x12176=x12168;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12175;
IkReal gconst24=x12175;
IkReal gconst25=((-1.0)*r11*x12176);
IkReal gconst26=(r10*x12176);
CheckValue<IkReal> x12185=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12185.valid){
continue;
}
IkReal x12178=x12185.value;
IkReal x12179=(sj3*x12178);
IkReal x12180=(r20*x12179);
IkReal x12181=(r00*x12179);
IkReal x12182=(r01*x12179);
IkReal x12183=(r21*x12179);
IkReal x12184=(r10*r11*x12179);
j4eval[0]=IKsign((((r00*x12180*(r10*r10)))+((r01*r10*r11*x12180))+((r10*r11*r21*x12181))+((r21*x12182*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12186=gconst25*gconst25;
IkReal x12187=gconst26*gconst26;
IkReal x12188=(cj3*r20);
IkReal x12189=(gconst26*r01);
IkReal x12190=(r22*sj3);
IkReal x12191=(r20*sj3);
IkReal x12192=(r21*sj3);
IkReal x12193=((1.0)*cj3);
IkReal x12194=((1.0)*x12187);
IkReal x12195=(gconst25*gconst26*r00);
CheckValue<IkReal> x12196=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12188*x12194))+((cj3*r21*x12195))+(((-1.0)*r01*r21*x12186*x12193))+(((-1.0)*r02*r22*x12193))+((gconst25*x12188*x12189)))),-1);
if(!x12196.valid){
continue;
}
CheckValue<IkReal> x12197 = IKatan2WithCheck(IkReal((((x12189*x12190))+((gconst25*r00*x12190)))),IkReal(((((-1.0)*x12191*x12195))+(((-1.0)*r01*x12191*x12194))+((r00*x12186*x12192))+((gconst25*x12189*x12192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12196.value)))+(x12197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12198=IKsin(j4);
IkReal x12199=IKcos(j4);
IkReal x12200=(cj2*sj1);
IkReal x12201=(cj1*sj2);
IkReal x12202=(gconst26*sj3);
IkReal x12203=(gconst25*sj3);
IkReal x12204=(gconst26*r10);
IkReal x12205=(gconst25*r11);
IkReal x12206=(sj1*sj2);
IkReal x12207=(cj3*gconst25);
IkReal x12208=(cj1*cj2);
IkReal x12209=(gconst26*r00);
IkReal x12210=(gconst26*r20);
IkReal x12211=(cj3*gconst26);
IkReal x12212=((1.0)*x12199);
IkReal x12213=((1.0)*x12198);
IkReal x12214=(cj3*x12198);
IkReal x12215=(gconst25*x12198);
IkReal x12216=(x12200+x12201);
evalcond[0]=((((-1.0)*r22*x12212))+(((-1.0)*x12210*x12213))+((r21*x12215)));
evalcond[1]=((((-1.0)*x12204*x12213))+(((-1.0)*r12*x12212))+((x12198*x12205)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12212))+(((-1.0)*x12209*x12213))+((r01*x12215)));
evalcond[3]=(((r02*x12214))+(((-1.0)*cj3*x12209*x12212))+((r01*x12202))+((r00*x12203))+((r01*x12199*x12207)));
evalcond[4]=(((r00*x12199*x12202))+(((-1.0)*r01*x12203*x12212))+(((-1.0)*r02*sj3*x12213))+((r01*x12211))+((r00*x12207)));
evalcond[5]=(((r22*x12214))+x12216+(((-1.0)*cj3*x12210*x12212))+((r21*x12202))+((r21*x12199*x12207))+((r20*x12203)));
evalcond[6]=((((-1.0)*r12*sj3*x12213))+((r10*x12199*x12202))+x12216+(((-1.0)*r11*x12203*x12212))+((r10*x12207))+((r11*x12211)));
evalcond[7]=((((-1.0)*x12206))+((r12*x12214))+x12208+((r10*x12203))+((cj3*x12199*x12205))+(((-1.0)*cj3*x12204*x12212))+((r11*x12202)));
evalcond[8]=((((-1.0)*x12208))+(((-1.0)*r21*x12203*x12212))+x12206+(((-1.0)*r22*sj3*x12213))+((r21*x12211))+((r20*x12207))+((r20*x12199*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12217=gconst25*gconst25;
IkReal x12218=gconst26*gconst26;
IkReal x12219=(r01*sj3);
IkReal x12220=(gconst25*gconst26);
IkReal x12221=(cj3*r00);
IkReal x12222=(cj3*r01);
IkReal x12223=(r00*sj3);
IkReal x12224=(r21*x12217);
IkReal x12225=((1.0)*cj3*r20);
CheckValue<IkReal> x12226 = IKatan2WithCheck(IkReal((((gconst25*r22*x12221))+((gconst26*r22*x12222)))),IkReal((((r21*x12220*x12222))+(((-1.0)*r20*x12218*x12222))+((x12221*x12224))+(((-1.0)*r20*x12220*x12221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12226.valid){
continue;
}
CheckValue<IkReal> x12227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12220*x12223))+(((-1.0)*r20*x12219*x12220))+((x12219*x12224))+((r20*x12218*x12223))+((r02*r22*sj3)))),-1);
if(!x12227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12226.value)+(((1.5707963267949)*(x12227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12228=IKsin(j4);
IkReal x12229=IKcos(j4);
IkReal x12230=(cj2*sj1);
IkReal x12231=(cj1*sj2);
IkReal x12232=(gconst26*sj3);
IkReal x12233=(gconst25*sj3);
IkReal x12234=(gconst26*r10);
IkReal x12235=(gconst25*r11);
IkReal x12236=(sj1*sj2);
IkReal x12237=(cj3*gconst25);
IkReal x12238=(cj1*cj2);
IkReal x12239=(gconst26*r00);
IkReal x12240=(gconst26*r20);
IkReal x12241=(cj3*gconst26);
IkReal x12242=((1.0)*x12229);
IkReal x12243=((1.0)*x12228);
IkReal x12244=(cj3*x12228);
IkReal x12245=(gconst25*x12228);
IkReal x12246=(x12231+x12230);
evalcond[0]=((((-1.0)*r22*x12242))+((r21*x12245))+(((-1.0)*x12240*x12243)));
evalcond[1]=((((-1.0)*r12*x12242))+(((-1.0)*x12234*x12243))+((x12228*x12235)));
evalcond[2]=((1.0)+(((-1.0)*x12239*x12243))+((r01*x12245))+(((-1.0)*r02*x12242)));
evalcond[3]=(((r01*x12232))+((r01*x12229*x12237))+((r00*x12233))+((r02*x12244))+(((-1.0)*cj3*x12239*x12242)));
evalcond[4]=(((r00*x12229*x12232))+(((-1.0)*r01*x12233*x12242))+(((-1.0)*r02*sj3*x12243))+((r00*x12237))+((r01*x12241)));
evalcond[5]=(((r20*x12233))+x12246+((r22*x12244))+(((-1.0)*cj3*x12240*x12242))+((r21*x12232))+((r21*x12229*x12237)));
evalcond[6]=(((r10*x12237))+((r11*x12241))+x12246+(((-1.0)*r11*x12233*x12242))+((r10*x12229*x12232))+(((-1.0)*r12*sj3*x12243)));
evalcond[7]=(((r10*x12233))+((r12*x12244))+((cj3*x12229*x12235))+x12238+(((-1.0)*cj3*x12234*x12242))+(((-1.0)*x12236))+((r11*x12232)));
evalcond[8]=(((r20*x12229*x12232))+(((-1.0)*r22*sj3*x12243))+((r20*x12237))+x12236+(((-1.0)*x12238))+(((-1.0)*r21*x12233*x12242))+((r21*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12247=((1.0)*gconst26);
CheckValue<IkReal> x12248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12247))+(((-1.0)*gconst25*r20)))),-1);
if(!x12248.valid){
continue;
}
CheckValue<IkReal> x12249 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12247))+((gconst25*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12248.value)))+(x12249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12250=IKsin(j4);
IkReal x12251=IKcos(j4);
IkReal x12252=(cj2*sj1);
IkReal x12253=(cj1*sj2);
IkReal x12254=(gconst26*sj3);
IkReal x12255=(gconst25*sj3);
IkReal x12256=(gconst26*r10);
IkReal x12257=(gconst25*r11);
IkReal x12258=(sj1*sj2);
IkReal x12259=(cj3*gconst25);
IkReal x12260=(cj1*cj2);
IkReal x12261=(gconst26*r00);
IkReal x12262=(gconst26*r20);
IkReal x12263=(cj3*gconst26);
IkReal x12264=((1.0)*x12251);
IkReal x12265=((1.0)*x12250);
IkReal x12266=(cj3*x12250);
IkReal x12267=(gconst25*x12250);
IkReal x12268=(x12253+x12252);
evalcond[0]=(((r21*x12267))+(((-1.0)*r22*x12264))+(((-1.0)*x12262*x12265)));
evalcond[1]=((((-1.0)*x12256*x12265))+(((-1.0)*r12*x12264))+((x12250*x12257)));
evalcond[2]=((1.0)+((r01*x12267))+(((-1.0)*r02*x12264))+(((-1.0)*x12261*x12265)));
evalcond[3]=(((r01*x12254))+((r00*x12255))+((r01*x12251*x12259))+(((-1.0)*cj3*x12261*x12264))+((r02*x12266)));
evalcond[4]=(((r00*x12251*x12254))+((r01*x12263))+((r00*x12259))+(((-1.0)*r01*x12255*x12264))+(((-1.0)*r02*sj3*x12265)));
evalcond[5]=(((r21*x12251*x12259))+x12268+((r20*x12255))+(((-1.0)*cj3*x12262*x12264))+((r21*x12254))+((r22*x12266)));
evalcond[6]=(((r10*x12251*x12254))+(((-1.0)*r11*x12255*x12264))+((r11*x12263))+((r10*x12259))+x12268+(((-1.0)*r12*sj3*x12265)));
evalcond[7]=(((r12*x12266))+((r10*x12255))+((r11*x12254))+x12260+(((-1.0)*cj3*x12256*x12264))+(((-1.0)*x12258))+((cj3*x12251*x12257)));
evalcond[8]=((((-1.0)*r22*sj3*x12265))+((r20*x12251*x12254))+x12258+(((-1.0)*r21*x12255*x12264))+(((-1.0)*x12260))+((r20*x12259))+((r21*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12270 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12270)==0){
continue;
}
IkReal x12269=pow(x12270,-0.5);
CheckValue<IkReal> x12271 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12271.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12271.value))));
IkReal gconst28=((1.0)*r11*x12269);
IkReal gconst29=((-1.0)*r10*x12269);
CheckValue<IkReal> x12272 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12272.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12272.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
IkReal x12273=((1.0)*(x12275.value));
IkReal x12274=x12269;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12273)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12273)));
IkReal gconst28=((1.0)*r11*x12274);
IkReal gconst29=((-1.0)*r10*x12274);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12276=gconst29*gconst29;
IkReal x12277=gconst28*gconst28;
IkReal x12278=(cj3*r01);
IkReal x12279=(cj3*r00);
IkReal x12280=(r00*sj3);
IkReal x12281=(r01*sj3);
IkReal x12282=(gconst28*gconst29);
IkReal x12283=((1.0)*r20);
IkReal x12284=(r20*x12276);
IkReal x12285=(r21*x12277);
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal((((gconst28*r22*x12279))+((gconst29*r22*x12278)))),IkReal((((x12279*x12285))+((r21*x12278*x12282))+(((-1.0)*x12276*x12278*x12283))+(((-1.0)*x12279*x12282*x12283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
CheckValue<IkReal> x12287=IKPowWithIntegerCheck(IKsign((((x12280*x12284))+((x12281*x12285))+(((-1.0)*r21*x12280*x12282))+(((-1.0)*x12281*x12282*x12283))+((r02*r22*sj3)))),-1);
if(!x12287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12286.value)+(((1.5707963267949)*(x12287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12288=IKsin(j4);
IkReal x12289=IKcos(j4);
IkReal x12290=(cj2*sj1);
IkReal x12291=(cj1*sj2);
IkReal x12292=(gconst29*r20);
IkReal x12293=(gconst28*r20);
IkReal x12294=(sj1*sj2);
IkReal x12295=(cj1*cj2);
IkReal x12296=(r11*sj3);
IkReal x12297=(gconst29*r01);
IkReal x12298=(gconst29*r10);
IkReal x12299=(cj3*gconst28);
IkReal x12300=(cj3*gconst29);
IkReal x12301=(gconst28*sj3);
IkReal x12302=(gconst29*r00);
IkReal x12303=((1.0)*x12289);
IkReal x12304=((1.0)*x12288);
IkReal x12305=(gconst28*x12288);
IkReal x12306=(cj3*x12288);
IkReal x12307=(sj3*x12289);
IkReal x12308=(x12291+x12290);
evalcond[0]=(((r21*x12305))+(((-1.0)*r22*x12303))+(((-1.0)*x12292*x12304)));
evalcond[1]=(((r11*x12305))+(((-1.0)*x12298*x12304))+(((-1.0)*r12*x12303)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12303))+(((-1.0)*x12302*x12304))+((r01*x12305)));
evalcond[3]=(((r01*x12289*x12299))+(((-1.0)*r00*x12300*x12303))+((sj3*x12297))+((r00*x12301))+((r02*x12306)));
evalcond[4]=(((cj3*x12297))+((r00*x12299))+((x12302*x12307))+(((-1.0)*r02*sj3*x12304))+(((-1.0)*r01*x12301*x12303)));
evalcond[5]=(((gconst29*r21*sj3))+x12308+((sj3*x12293))+((r22*x12306))+((r21*x12289*x12299))+(((-1.0)*cj3*x12292*x12303)));
evalcond[6]=((((-1.0)*r12*sj3*x12304))+((r10*x12299))+((r11*x12300))+x12308+((x12298*x12307))+(((-1.0)*gconst28*x12296*x12303)));
evalcond[7]=(((r10*x12301))+((gconst29*x12296))+x12295+((r11*x12289*x12299))+((r12*x12306))+(((-1.0)*x12294))+(((-1.0)*cj3*x12298*x12303)));
evalcond[8]=((((-1.0)*r22*sj3*x12304))+((cj3*x12293))+(((-1.0)*r21*x12301*x12303))+((r21*x12300))+x12294+((x12292*x12307))+(((-1.0)*x12295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12309=((1.0)*gconst29);
CheckValue<IkReal> x12310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12309))+(((-1.0)*gconst28*r20)))),-1);
if(!x12310.valid){
continue;
}
CheckValue<IkReal> x12311 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12309))+((gconst28*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12310.value)))+(x12311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12312=IKsin(j4);
IkReal x12313=IKcos(j4);
IkReal x12314=(cj2*sj1);
IkReal x12315=(cj1*sj2);
IkReal x12316=(gconst29*r20);
IkReal x12317=(gconst28*r20);
IkReal x12318=(sj1*sj2);
IkReal x12319=(cj1*cj2);
IkReal x12320=(r11*sj3);
IkReal x12321=(gconst29*r01);
IkReal x12322=(gconst29*r10);
IkReal x12323=(cj3*gconst28);
IkReal x12324=(cj3*gconst29);
IkReal x12325=(gconst28*sj3);
IkReal x12326=(gconst29*r00);
IkReal x12327=((1.0)*x12313);
IkReal x12328=((1.0)*x12312);
IkReal x12329=(gconst28*x12312);
IkReal x12330=(cj3*x12312);
IkReal x12331=(sj3*x12313);
IkReal x12332=(x12314+x12315);
evalcond[0]=((((-1.0)*r22*x12327))+((r21*x12329))+(((-1.0)*x12316*x12328)));
evalcond[1]=((((-1.0)*r12*x12327))+((r11*x12329))+(((-1.0)*x12322*x12328)));
evalcond[2]=((1.0)+((r01*x12329))+(((-1.0)*x12326*x12328))+(((-1.0)*r02*x12327)));
evalcond[3]=(((r00*x12325))+(((-1.0)*r00*x12324*x12327))+((sj3*x12321))+((r02*x12330))+((r01*x12313*x12323)));
evalcond[4]=((((-1.0)*r01*x12325*x12327))+((r00*x12323))+((cj3*x12321))+((x12326*x12331))+(((-1.0)*r02*sj3*x12328)));
evalcond[5]=(((gconst29*r21*sj3))+((sj3*x12317))+x12332+((r21*x12313*x12323))+((r22*x12330))+(((-1.0)*cj3*x12316*x12327)));
evalcond[6]=(x12332+((x12322*x12331))+(((-1.0)*r12*sj3*x12328))+((r10*x12323))+(((-1.0)*gconst28*x12320*x12327))+((r11*x12324)));
evalcond[7]=(x12319+(((-1.0)*x12318))+((r11*x12313*x12323))+((r12*x12330))+(((-1.0)*cj3*x12322*x12327))+((r10*x12325))+((gconst29*x12320)));
evalcond[8]=(x12318+(((-1.0)*x12319))+((r21*x12324))+((x12316*x12331))+(((-1.0)*r21*x12325*x12327))+(((-1.0)*r22*sj3*x12328))+((cj3*x12317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12333=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12333);
rxp0_2=(py*r00);
rxp1_0=(r21*x12333);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12334=(cj5*r00);
IkReal x12335=(r01*sj5);
j4eval[0]=(x12335+(((-1.0)*x12334)));
j4eval[1]=((((-1.0)*sj3*x12335))+((sj3*x12334)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12336=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12336);
rxp0_2=(py*r00);
rxp1_0=(r21*x12336);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12337=(r01*sj5);
IkReal x12338=((1.0)*cj5*r00);
j4eval[0]=(x12337+(((-1.0)*x12338)));
j4eval[1]=(((cj3*x12337))+(((-1.0)*cj3*x12338)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12339=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12339);
rxp0_2=(py*r00);
rxp1_0=(r21*x12339);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12340=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12340);
rxp0_2=(py*r00);
rxp1_0=(r21*x12340);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12341=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12341);
rxp0_2=(py*r00);
rxp1_0=(r21*x12341);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal x12342=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12342)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12342)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12343=((1.0)*cj5);
CheckValue<IkReal> x12344=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12343))),-1);
if(!x12344.valid){
continue;
}
CheckValue<IkReal> x12345=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12343))),-1);
if(!x12345.valid){
continue;
}
if( IKabs(((-1.0)*(x12344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12345.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12344.value)))+IKsqr(((x12345.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12344.value)), ((x12345.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12346=IKsin(j4);
IkReal x12347=IKcos(j4);
IkReal x12348=((1.0)*cj5*r00);
IkReal x12349=(sj5*x12347);
IkReal x12350=(sj5*x12346);
IkReal x12351=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12347);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x12346)));
evalcond[2]=((((-1.0)*x12346*x12351))+((r21*x12350)));
evalcond[3]=((((-1.0)*x12347*x12348))+((r01*x12349)));
evalcond[4]=((1.0)+(((-1.0)*x12346*x12348))+((r01*x12350)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12347*x12351))+((r21*x12349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12352=((1.0)*cj2);
CheckValue<IkReal> x12353=IKPowWithIntegerCheck(r12,-1);
if(!x12353.valid){
continue;
}
CheckValue<IkReal> x12354=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12354.valid){
continue;
}
if( IKabs(((x12353.value)*((((sj1*sj2))+(((-1.0)*cj1*x12352)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12354.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12352)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12353.value)*((((sj1*sj2))+(((-1.0)*cj1*x12352))))))+IKsqr(((x12354.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12352))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12353.value)*((((sj1*sj2))+(((-1.0)*cj1*x12352))))), ((x12354.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12352))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12355=IKsin(j4);
IkReal x12356=IKcos(j4);
IkReal x12357=((1.0)*cj5*r00);
IkReal x12358=(sj5*x12356);
IkReal x12359=(sj5*x12355);
IkReal x12360=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12356);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x12355)));
evalcond[2]=(((r21*x12359))+(((-1.0)*x12355*x12360)));
evalcond[3]=((((-1.0)*x12356*x12357))+((r01*x12358)));
evalcond[4]=((1.0)+((r01*x12359))+(((-1.0)*x12355*x12357)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x12358))+(((-1.0)*x12356*x12360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12361=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12361);
rxp0_2=(py*r00);
rxp1_0=(r21*x12361);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12362=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12362);
rxp0_2=(py*r00);
rxp1_0=(r21*x12362);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12363=((1.0)*sj1);
CheckValue<IkReal> x12364=IKPowWithIntegerCheck(r12,-1);
if(!x12364.valid){
continue;
}
CheckValue<IkReal> x12365=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12365.valid){
continue;
}
if( IKabs(((x12364.value)*(((((-1.0)*sj2*x12363))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12365.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12363)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12364.value)*(((((-1.0)*sj2*x12363))+((cj1*cj2))))))+IKsqr(((x12365.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12363))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12364.value)*(((((-1.0)*sj2*x12363))+((cj1*cj2))))), ((x12365.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12363))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12366=IKsin(j4);
IkReal x12367=IKcos(j4);
IkReal x12368=(cj5*r00);
IkReal x12369=(cj5*r20);
IkReal x12370=(r21*sj5);
IkReal x12371=(r01*sj5);
IkReal x12372=((1.0)*x12366);
IkReal x12373=((1.0)*x12367);
evalcond[0]=((-1.0)*r12*x12367);
evalcond[1]=(((x12366*x12370))+(((-1.0)*x12369*x12372)));
evalcond[2]=(((x12367*x12368))+(((-1.0)*x12371*x12373)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12372))+((cj1*cj2)));
evalcond[4]=((1.0)+((x12366*x12371))+(((-1.0)*x12368*x12372)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12367*x12369))+(((-1.0)*x12370*x12373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12374=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12374.valid){
continue;
}
CheckValue<IkReal> x12375=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12375.valid){
continue;
}
if( IKabs(((-1.0)*(x12374.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12375.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12374.value)))+IKsqr(((x12375.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12374.value)), ((x12375.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12376=IKsin(j4);
IkReal x12377=IKcos(j4);
IkReal x12378=(cj5*r00);
IkReal x12379=(cj5*r20);
IkReal x12380=(r21*sj5);
IkReal x12381=(r01*sj5);
IkReal x12382=((1.0)*x12376);
IkReal x12383=((1.0)*x12377);
evalcond[0]=((-1.0)*r12*x12377);
evalcond[1]=(((x12376*x12380))+(((-1.0)*x12379*x12382)));
evalcond[2]=((((-1.0)*x12381*x12383))+((x12377*x12378)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x12382)));
evalcond[4]=((1.0)+((x12376*x12381))+(((-1.0)*x12378*x12382)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12380*x12383))+((x12377*x12379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12384=((1.0)*r01);
CheckValue<IkReal> x12385=IKPowWithIntegerCheck(r12,-1);
if(!x12385.valid){
continue;
}
CheckValue<IkReal> x12386=IKPowWithIntegerCheck(sj3,-1);
if(!x12386.valid){
continue;
}
CheckValue<IkReal> x12387=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x12384))+((cj5*r00*sj3))),-1);
if(!x12387.valid){
continue;
}
if( IKabs(((x12385.value)*(x12386.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12387.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12384)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12385.value)*(x12386.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12387.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12384))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12385.value)*(x12386.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12387.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12384))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12388=IKsin(j4);
IkReal x12389=IKcos(j4);
IkReal x12390=(cj2*sj1);
IkReal x12391=(cj1*sj2);
IkReal x12392=(sj1*sj2);
IkReal x12393=(cj5*sj3);
IkReal x12394=(cj3*cj5);
IkReal x12395=(r21*sj5);
IkReal x12396=(cj1*cj2);
IkReal x12397=(r00*sj5);
IkReal x12398=(r01*sj5);
IkReal x12399=(r20*sj5);
IkReal x12400=((1.0)*x12388);
IkReal x12401=(r20*x12389);
IkReal x12402=(r00*x12389);
IkReal x12403=(cj3*x12389);
IkReal x12404=(x12390+x12391);
IkReal x12405=((1.0)*sj3*x12389);
evalcond[0]=((-1.0)*r12*x12389);
evalcond[1]=(((x12388*x12395))+(((-1.0)*cj5*r20*x12400)));
evalcond[2]=((((-1.0)*r12*sj3*x12400))+x12404);
evalcond[3]=(x12396+(((-1.0)*x12392))+((cj3*r12*x12388)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12400))+((x12388*x12398)));
evalcond[5]=(((cj3*x12397))+(((-1.0)*x12398*x12405))+((r01*x12394))+((x12393*x12402)));
evalcond[6]=(((r01*x12393))+((sj3*x12397))+(((-1.0)*x12394*x12402))+((x12398*x12403)));
evalcond[7]=(((x12395*x12403))+((r21*x12393))+((sj3*x12399))+x12404+(((-1.0)*x12394*x12401)));
evalcond[8]=((((-1.0)*x12395*x12405))+((cj3*x12399))+x12392+((r21*x12394))+((x12393*x12401))+(((-1.0)*x12396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12406=((1.0)*r00);
IkReal x12407=(r01*sj5);
CheckValue<IkReal> x12408=IKPowWithIntegerCheck(((((-1.0)*cj5*x12406))+x12407),-1);
if(!x12408.valid){
continue;
}
CheckValue<IkReal> x12409=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x12406))+((cj3*x12407))),-1);
if(!x12409.valid){
continue;
}
if( IKabs(((-1.0)*(x12408.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12409.value)*(((((-1.0)*sj3*sj5*x12406))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12408.value)))+IKsqr(((x12409.value)*(((((-1.0)*sj3*sj5*x12406))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12408.value)), ((x12409.value)*(((((-1.0)*sj3*sj5*x12406))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12410=IKsin(j4);
IkReal x12411=IKcos(j4);
IkReal x12412=(cj2*sj1);
IkReal x12413=(cj1*sj2);
IkReal x12414=(sj1*sj2);
IkReal x12415=(cj5*sj3);
IkReal x12416=(cj3*cj5);
IkReal x12417=(r21*sj5);
IkReal x12418=(cj1*cj2);
IkReal x12419=(r00*sj5);
IkReal x12420=(r01*sj5);
IkReal x12421=(r20*sj5);
IkReal x12422=((1.0)*x12410);
IkReal x12423=(r20*x12411);
IkReal x12424=(r00*x12411);
IkReal x12425=(cj3*x12411);
IkReal x12426=(x12413+x12412);
IkReal x12427=((1.0)*sj3*x12411);
evalcond[0]=((-1.0)*r12*x12411);
evalcond[1]=(((x12410*x12417))+(((-1.0)*cj5*r20*x12422)));
evalcond[2]=((((-1.0)*r12*sj3*x12422))+x12426);
evalcond[3]=((((-1.0)*x12414))+((cj3*r12*x12410))+x12418);
evalcond[4]=((1.0)+((x12410*x12420))+(((-1.0)*cj5*r00*x12422)));
evalcond[5]=(((cj3*x12419))+((r01*x12416))+(((-1.0)*x12420*x12427))+((x12415*x12424)));
evalcond[6]=(((sj3*x12419))+((x12420*x12425))+((r01*x12415))+(((-1.0)*x12416*x12424)));
evalcond[7]=(((r21*x12415))+((x12417*x12425))+x12426+(((-1.0)*x12416*x12423))+((sj3*x12421)));
evalcond[8]=(((r21*x12416))+(((-1.0)*x12418))+((cj3*x12421))+(((-1.0)*x12417*x12427))+x12414+((x12415*x12423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12428=((1.0)*r01);
IkReal x12429=(cj5*r00);
CheckValue<IkReal> x12430=IKPowWithIntegerCheck(((((-1.0)*x12429))+((r01*sj5))),-1);
if(!x12430.valid){
continue;
}
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x12428))+((sj3*x12429))),-1);
if(!x12431.valid){
continue;
}
if( IKabs(((-1.0)*(x12430.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12431.value)*(((((-1.0)*cj3*cj5*x12428))+(((-1.0)*cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12430.value)))+IKsqr(((x12431.value)*(((((-1.0)*cj3*cj5*x12428))+(((-1.0)*cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12430.value)), ((x12431.value)*(((((-1.0)*cj3*cj5*x12428))+(((-1.0)*cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12432=IKsin(j4);
IkReal x12433=IKcos(j4);
IkReal x12434=(cj2*sj1);
IkReal x12435=(cj1*sj2);
IkReal x12436=(sj1*sj2);
IkReal x12437=(cj5*sj3);
IkReal x12438=(cj3*cj5);
IkReal x12439=(r21*sj5);
IkReal x12440=(cj1*cj2);
IkReal x12441=(r00*sj5);
IkReal x12442=(r01*sj5);
IkReal x12443=(r20*sj5);
IkReal x12444=((1.0)*x12432);
IkReal x12445=(r20*x12433);
IkReal x12446=(r00*x12433);
IkReal x12447=(cj3*x12433);
IkReal x12448=(x12435+x12434);
IkReal x12449=((1.0)*sj3*x12433);
evalcond[0]=((-1.0)*r12*x12433);
evalcond[1]=(((x12432*x12439))+(((-1.0)*cj5*r20*x12444)));
evalcond[2]=((((-1.0)*r12*sj3*x12444))+x12448);
evalcond[3]=(((cj3*r12*x12432))+x12440+(((-1.0)*x12436)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12444))+((x12432*x12442)));
evalcond[5]=(((cj3*x12441))+((x12437*x12446))+(((-1.0)*x12442*x12449))+((r01*x12438)));
evalcond[6]=((((-1.0)*x12438*x12446))+((x12442*x12447))+((sj3*x12441))+((r01*x12437)));
evalcond[7]=(((r21*x12437))+(((-1.0)*x12438*x12445))+((x12439*x12447))+((sj3*x12443))+x12448);
evalcond[8]=((((-1.0)*x12440))+((r21*x12438))+((cj3*x12443))+(((-1.0)*x12439*x12449))+x12436+((x12437*x12445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12450=cj5*cj5;
IkReal x12451=(cj3*r20);
IkReal x12452=(r21*sj3);
IkReal x12453=((1.0)*cj3);
IkReal x12454=(r01*r21);
IkReal x12455=(r01*sj3);
IkReal x12456=(r00*sj5);
IkReal x12457=(cj5*r01*sj5);
IkReal x12458=((1.0)*x12450);
CheckValue<IkReal> x12459 = IKatan2WithCheck(IkReal((((r22*sj3*x12456))+((cj5*r22*x12455)))),IkReal(((((-1.0)*r20*x12455*x12458))+(((-1.0)*r00*x12452*x12458))+(((-1.0)*cj5*r20*sj3*x12456))+((r00*x12452))+((x12452*x12457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12459.valid){
continue;
}
CheckValue<IkReal> x12460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12451*x12458))+((x12451*x12457))+((cj3*cj5*r21*x12456))+(((-1.0)*r02*r22*x12453))+(((-1.0)*x12453*x12454))+((cj3*x12450*x12454)))),-1);
if(!x12460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12459.value)+(((1.5707963267949)*(x12460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12461=IKsin(j4);
IkReal x12462=IKcos(j4);
IkReal x12463=(cj2*sj1);
IkReal x12464=(cj1*sj2);
IkReal x12465=(r11*sj5);
IkReal x12466=(cj5*r10);
IkReal x12467=(sj1*sj2);
IkReal x12468=(cj5*r01);
IkReal x12469=(cj5*r00);
IkReal x12470=(cj3*sj5);
IkReal x12471=(r21*sj5);
IkReal x12472=(cj1*cj2);
IkReal x12473=(cj5*sj3);
IkReal x12474=(sj3*sj5);
IkReal x12475=(r01*sj5);
IkReal x12476=(cj3*cj5);
IkReal x12477=(cj5*r20);
IkReal x12478=((1.0)*x12462);
IkReal x12479=((1.0)*x12461);
IkReal x12480=(cj3*x12462);
IkReal x12481=(sj3*x12462);
IkReal x12482=(cj3*x12461);
IkReal x12483=(x12464+x12463);
evalcond[0]=((((-1.0)*r22*x12478))+((x12461*x12471))+(((-1.0)*x12477*x12479)));
evalcond[1]=(((x12461*x12465))+(((-1.0)*x12466*x12479))+(((-1.0)*r12*x12478)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12478))+((x12461*x12475))+(((-1.0)*x12469*x12479)));
evalcond[3]=(((r01*x12462*x12470))+(((-1.0)*cj3*x12469*x12478))+((r00*x12474))+((sj3*x12468))+((r02*x12482)));
evalcond[4]=(((r00*x12470))+((cj3*x12468))+(((-1.0)*r01*x12474*x12478))+((x12469*x12481))+(((-1.0)*r02*sj3*x12479)));
evalcond[5]=(((r21*x12462*x12470))+((r22*x12482))+((r20*x12474))+(((-1.0)*r20*x12476*x12478))+x12483+((r21*x12473)));
evalcond[6]=((((-1.0)*sj3*x12465*x12478))+((r11*x12476))+((x12466*x12481))+(((-1.0)*r12*sj3*x12479))+x12483+((r10*x12470)));
evalcond[7]=((((-1.0)*x12467))+((r11*x12473))+((r12*x12482))+(((-1.0)*cj3*x12466*x12478))+((x12465*x12480))+x12472+((r10*x12474)));
evalcond[8]=((((-1.0)*x12472))+((r20*x12470))+(((-1.0)*r22*sj3*x12479))+((r20*x12462*x12473))+(((-1.0)*sj3*x12471*x12478))+x12467+((r21*x12476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12484=((1.0)*cj5);
CheckValue<IkReal> x12485 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12484))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12485.valid){
continue;
}
CheckValue<IkReal> x12486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12484))+(((-1.0)*r20*sj5)))),-1);
if(!x12486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12485.value)+(((1.5707963267949)*(x12486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12487=IKsin(j4);
IkReal x12488=IKcos(j4);
IkReal x12489=(cj2*sj1);
IkReal x12490=(cj1*sj2);
IkReal x12491=(r11*sj5);
IkReal x12492=(cj5*r10);
IkReal x12493=(sj1*sj2);
IkReal x12494=(cj5*r01);
IkReal x12495=(cj5*r00);
IkReal x12496=(cj3*sj5);
IkReal x12497=(r21*sj5);
IkReal x12498=(cj1*cj2);
IkReal x12499=(cj5*sj3);
IkReal x12500=(sj3*sj5);
IkReal x12501=(r01*sj5);
IkReal x12502=(cj3*cj5);
IkReal x12503=(cj5*r20);
IkReal x12504=((1.0)*x12488);
IkReal x12505=((1.0)*x12487);
IkReal x12506=(cj3*x12488);
IkReal x12507=(sj3*x12488);
IkReal x12508=(cj3*x12487);
IkReal x12509=(x12489+x12490);
evalcond[0]=((((-1.0)*r22*x12504))+((x12487*x12497))+(((-1.0)*x12503*x12505)));
evalcond[1]=((((-1.0)*r12*x12504))+((x12487*x12491))+(((-1.0)*x12492*x12505)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12504))+(((-1.0)*x12495*x12505))+((x12487*x12501)));
evalcond[3]=((((-1.0)*cj3*x12495*x12504))+((r01*x12488*x12496))+((r00*x12500))+((r02*x12508))+((sj3*x12494)));
evalcond[4]=(((r00*x12496))+((cj3*x12494))+(((-1.0)*r02*sj3*x12505))+((x12495*x12507))+(((-1.0)*r01*x12500*x12504)));
evalcond[5]=((((-1.0)*r20*x12502*x12504))+((r20*x12500))+((r21*x12499))+((r21*x12488*x12496))+x12509+((r22*x12508)));
evalcond[6]=(((x12492*x12507))+((r11*x12502))+((r10*x12496))+(((-1.0)*r12*sj3*x12505))+x12509+(((-1.0)*sj3*x12491*x12504)));
evalcond[7]=((((-1.0)*cj3*x12492*x12504))+((r10*x12500))+((x12491*x12506))+x12498+((r12*x12508))+(((-1.0)*x12493))+((r11*x12499)));
evalcond[8]=((((-1.0)*r22*sj3*x12505))+(((-1.0)*sj3*x12497*x12504))+((r20*x12496))+((r20*x12488*x12499))+((r21*x12502))+x12493+(((-1.0)*x12498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12510 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12510.valid){
continue;
}
CheckValue<IkReal> x12511=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12510.value)+(((1.5707963267949)*(x12511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12512=IKsin(j4);
IkReal x12513=IKcos(j4);
IkReal x12514=(cj2*sj1);
IkReal x12515=(cj1*sj2);
IkReal x12516=(r11*sj5);
IkReal x12517=(cj5*r10);
IkReal x12518=(sj1*sj2);
IkReal x12519=(cj5*r01);
IkReal x12520=(cj5*r00);
IkReal x12521=(cj3*sj5);
IkReal x12522=(r21*sj5);
IkReal x12523=(cj1*cj2);
IkReal x12524=(cj5*sj3);
IkReal x12525=(sj3*sj5);
IkReal x12526=(r01*sj5);
IkReal x12527=(cj3*cj5);
IkReal x12528=(cj5*r20);
IkReal x12529=((1.0)*x12513);
IkReal x12530=((1.0)*x12512);
IkReal x12531=(cj3*x12513);
IkReal x12532=(sj3*x12513);
IkReal x12533=(cj3*x12512);
IkReal x12534=(x12514+x12515);
evalcond[0]=((((-1.0)*x12528*x12530))+((x12512*x12522))+(((-1.0)*r22*x12529)));
evalcond[1]=((((-1.0)*x12517*x12530))+(((-1.0)*r12*x12529))+((x12512*x12516)));
evalcond[2]=((1.0)+(((-1.0)*x12520*x12530))+((x12512*x12526))+(((-1.0)*r02*x12529)));
evalcond[3]=((((-1.0)*cj3*x12520*x12529))+((r02*x12533))+((r01*x12513*x12521))+((r00*x12525))+((sj3*x12519)));
evalcond[4]=((((-1.0)*r01*x12525*x12529))+(((-1.0)*r02*sj3*x12530))+((r00*x12521))+((x12520*x12532))+((cj3*x12519)));
evalcond[5]=((((-1.0)*r20*x12527*x12529))+((r21*x12524))+((r20*x12525))+((r21*x12513*x12521))+((r22*x12533))+x12534);
evalcond[6]=(((r10*x12521))+((x12517*x12532))+(((-1.0)*r12*sj3*x12530))+((r11*x12527))+x12534+(((-1.0)*sj3*x12516*x12529)));
evalcond[7]=(((r10*x12525))+((x12516*x12531))+(((-1.0)*x12518))+(((-1.0)*cj3*x12517*x12529))+((r11*x12524))+x12523+((r12*x12533)));
evalcond[8]=((((-1.0)*r22*sj3*x12530))+((r20*x12513*x12524))+((r21*x12527))+((r20*x12521))+x12518+(((-1.0)*x12523))+(((-1.0)*sj3*x12522*x12529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12535=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12535;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12536=((1.0)*cj5);
IkReal x12537=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12536)));
j4eval[0]=x12537;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12536))+((r21*sj5))))));
j4eval[2]=IKsign(x12537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12538=cj5*cj5;
IkReal x12539=(cj3*r01);
IkReal x12540=(cj5*sj5);
IkReal x12541=((1.0)*cj3);
IkReal x12542=(((r21*x12538*x12539))+((cj3*r00*r21*x12540))+(((-1.0)*r00*r20*x12538*x12541))+((r20*x12539*x12540))+(((-1.0)*r02*r22*x12541))+(((-1.0)*r21*x12539)));
j4eval[0]=x12542;
j4eval[1]=IKsign(x12542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12543=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12543;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12544=((1.0)*cj5);
IkReal x12545=((((-1.0)*r11*x12544))+(((-1.0)*r10*sj5)));
j4eval[0]=x12545;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12544))))));
j4eval[2]=IKsign(x12545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12546=cj5*cj5;
IkReal x12547=r01*r01;
IkReal x12548=(r01*sj5);
IkReal x12549=(cj5*r00);
IkReal x12550=((((-1.0)*x12547))+(((-1.0)*x12546*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x12548*x12549))+((x12546*x12547)));
j4eval[0]=x12550;
j4eval[1]=IKsign(x12550);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12548))+x12549))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12551=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12551);
rxp0_2=(py*r00);
rxp1_0=(r21*x12551);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12552=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12552);
rxp0_2=(py*r00);
rxp1_0=(r21*x12552);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12553=((1.0)*sj1);
CheckValue<IkReal> x12554=IKPowWithIntegerCheck(r12,-1);
if(!x12554.valid){
continue;
}
CheckValue<IkReal> x12555=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12555.valid){
continue;
}
if( IKabs(((x12554.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12555.value)*((((cj1*cj2))+(((-1.0)*sj2*x12553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12554.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12553))))))+IKsqr(((x12555.value)*((((cj1*cj2))+(((-1.0)*sj2*x12553))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12554.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12553))))), ((x12555.value)*((((cj1*cj2))+(((-1.0)*sj2*x12553))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12556=IKsin(j4);
IkReal x12557=IKcos(j4);
IkReal x12558=((1.0)*cj1);
IkReal x12559=(r21*sj5);
IkReal x12560=(r01*sj5);
IkReal x12561=(cj5*x12557);
IkReal x12562=((1.0)*x12557);
IkReal x12563=((1.0)*cj5*x12556);
evalcond[0]=((-1.0)*r12*x12557);
evalcond[1]=(((x12556*x12559))+(((-1.0)*r20*x12563)));
evalcond[2]=((((-1.0)*x12560*x12562))+((r00*x12561)));
evalcond[3]=((-1.0)+((x12556*x12560))+(((-1.0)*r00*x12563)));
evalcond[4]=((((-1.0)*r12*x12556))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12558)));
evalcond[5]=(((r20*x12561))+((sj1*sj2))+(((-1.0)*x12559*x12562))+(((-1.0)*cj2*x12558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12564=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12564.valid){
continue;
}
CheckValue<IkReal> x12565=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12565.valid){
continue;
}
if( IKabs(x12564.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12565.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12564.value)+IKsqr(((x12565.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12564.value, ((x12565.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12566=IKsin(j4);
IkReal x12567=IKcos(j4);
IkReal x12568=((1.0)*cj1);
IkReal x12569=(r21*sj5);
IkReal x12570=(r01*sj5);
IkReal x12571=(cj5*x12567);
IkReal x12572=((1.0)*x12567);
IkReal x12573=((1.0)*cj5*x12566);
evalcond[0]=((-1.0)*r12*x12567);
evalcond[1]=((((-1.0)*r20*x12573))+((x12566*x12569)));
evalcond[2]=((((-1.0)*x12570*x12572))+((r00*x12571)));
evalcond[3]=((-1.0)+((x12566*x12570))+(((-1.0)*r00*x12573)));
evalcond[4]=((((-1.0)*r12*x12566))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12568)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*x12569*x12572))+(((-1.0)*cj2*x12568))+((r20*x12571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12574=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12574);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12574);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12575=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12575);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12575);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12576=IKPowWithIntegerCheck(r22,-1);
if(!x12576.valid){
continue;
}
CheckValue<IkReal> x12577=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12577.valid){
continue;
}
if( IKabs(((x12576.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12577.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12576.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12577.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12576.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12577.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12578=IKsin(j4);
IkReal x12579=IKcos(j4);
IkReal x12580=((1.0)*cj2);
IkReal x12581=(cj5*x12579);
IkReal x12582=(sj5*x12578);
IkReal x12583=((1.0)*sj5*x12579);
IkReal x12584=((1.0)*cj5*x12578);
evalcond[0]=((-1.0)*r22*x12579);
evalcond[1]=((((-1.0)*r10*x12584))+((r11*x12582)));
evalcond[2]=((((-1.0)*r22*x12578))+((sj1*sj2))+(((-1.0)*cj1*x12580)));
evalcond[3]=((((-1.0)*r01*x12583))+((r00*x12581)));
evalcond[4]=((-1.0)+((r01*x12582))+(((-1.0)*r00*x12584)));
evalcond[5]=((((-1.0)*r11*x12583))+(((-1.0)*sj1*x12580))+(((-1.0)*cj1*sj2))+((r10*x12581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12585=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12585.valid){
continue;
}
CheckValue<IkReal> x12586=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12586.valid){
continue;
}
if( IKabs(x12585.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12586.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12585.value)+IKsqr(((x12586.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12585.value, ((x12586.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12587=IKsin(j4);
IkReal x12588=IKcos(j4);
IkReal x12589=((1.0)*cj2);
IkReal x12590=(cj5*x12588);
IkReal x12591=(sj5*x12587);
IkReal x12592=((1.0)*sj5*x12588);
IkReal x12593=((1.0)*cj5*x12587);
evalcond[0]=((-1.0)*r22*x12588);
evalcond[1]=((((-1.0)*r10*x12593))+((r11*x12591)));
evalcond[2]=((((-1.0)*r22*x12587))+((sj1*sj2))+(((-1.0)*cj1*x12589)));
evalcond[3]=((((-1.0)*r01*x12592))+((r00*x12590)));
evalcond[4]=((-1.0)+((r01*x12591))+(((-1.0)*r00*x12593)));
evalcond[5]=((((-1.0)*r11*x12592))+(((-1.0)*sj1*x12589))+(((-1.0)*cj1*sj2))+((r10*x12590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12594=cj5*cj5;
IkReal x12595=r01*r01;
IkReal x12596=(r01*sj5);
IkReal x12597=(cj5*r00);
CheckValue<IkReal> x12598=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12594*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12595))+(((2.0)*x12596*x12597))+((x12594*x12595)))),-1);
if(!x12598.valid){
continue;
}
CheckValue<IkReal> x12599 = IKatan2WithCheck(IkReal((x12597+(((-1.0)*x12596)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12598.value)))+(x12599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12600=IKsin(j4);
IkReal x12601=IKcos(j4);
IkReal x12602=(cj5*r10);
IkReal x12603=(r01*sj5);
IkReal x12604=((1.0)*cj2);
IkReal x12605=(cj5*r00);
IkReal x12606=(cj5*r20);
IkReal x12607=((1.0)*x12601);
IkReal x12608=((1.0)*x12600);
IkReal x12609=(sj5*x12600);
evalcond[0]=((((-1.0)*x12606*x12608))+(((-1.0)*r22*x12607))+((r21*x12609)));
evalcond[1]=(((r11*x12609))+(((-1.0)*r12*x12607))+(((-1.0)*x12602*x12608)));
evalcond[2]=(((x12601*x12605))+(((-1.0)*r02*x12608))+(((-1.0)*x12603*x12607)));
evalcond[3]=((-1.0)+((x12600*x12603))+(((-1.0)*r02*x12607))+(((-1.0)*x12605*x12608)));
evalcond[4]=((((-1.0)*cj1*x12604))+(((-1.0)*r21*sj5*x12607))+((sj1*sj2))+(((-1.0)*r22*x12608))+((x12601*x12606)));
evalcond[5]=((((-1.0)*r11*sj5*x12607))+(((-1.0)*sj1*x12604))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12608))+((x12601*x12602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12610=((1.0)*cj5);
CheckValue<IkReal> x12611 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12611.valid){
continue;
}
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12610)))),-1);
if(!x12612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12611.value)+(((1.5707963267949)*(x12612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12613=IKsin(j4);
IkReal x12614=IKcos(j4);
IkReal x12615=(cj5*r10);
IkReal x12616=(r01*sj5);
IkReal x12617=((1.0)*cj2);
IkReal x12618=(cj5*r00);
IkReal x12619=(cj5*r20);
IkReal x12620=((1.0)*x12614);
IkReal x12621=((1.0)*x12613);
IkReal x12622=(sj5*x12613);
evalcond[0]=((((-1.0)*r22*x12620))+((r21*x12622))+(((-1.0)*x12619*x12621)));
evalcond[1]=((((-1.0)*r12*x12620))+(((-1.0)*x12615*x12621))+((r11*x12622)));
evalcond[2]=((((-1.0)*r02*x12621))+(((-1.0)*x12616*x12620))+((x12614*x12618)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12620))+(((-1.0)*x12618*x12621))+((x12613*x12616)));
evalcond[4]=((((-1.0)*cj1*x12617))+(((-1.0)*r22*x12621))+((sj1*sj2))+((x12614*x12619))+(((-1.0)*r21*sj5*x12620)));
evalcond[5]=((((-1.0)*r11*sj5*x12620))+(((-1.0)*r12*x12621))+(((-1.0)*cj1*sj2))+((x12614*x12615))+(((-1.0)*sj1*x12617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12623=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12623.valid){
continue;
}
CheckValue<IkReal> x12624 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12623.value)))+(x12624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12625=IKsin(j4);
IkReal x12626=IKcos(j4);
IkReal x12627=(cj5*r10);
IkReal x12628=(r01*sj5);
IkReal x12629=((1.0)*cj2);
IkReal x12630=(cj5*r00);
IkReal x12631=(cj5*r20);
IkReal x12632=((1.0)*x12626);
IkReal x12633=((1.0)*x12625);
IkReal x12634=(sj5*x12625);
evalcond[0]=((((-1.0)*r22*x12632))+(((-1.0)*x12631*x12633))+((r21*x12634)));
evalcond[1]=(((r11*x12634))+(((-1.0)*x12627*x12633))+(((-1.0)*r12*x12632)));
evalcond[2]=(((x12626*x12630))+(((-1.0)*x12628*x12632))+(((-1.0)*r02*x12633)));
evalcond[3]=((-1.0)+((x12625*x12628))+(((-1.0)*x12630*x12633))+(((-1.0)*r02*x12632)));
evalcond[4]=(((x12626*x12631))+(((-1.0)*r22*x12633))+((sj1*sj2))+(((-1.0)*r21*sj5*x12632))+(((-1.0)*cj1*x12629)));
evalcond[5]=((((-1.0)*r11*sj5*x12632))+((x12626*x12627))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12629))+(((-1.0)*r12*x12633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12635=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12635;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12636=((1.0)*cj5);
IkReal x12637=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12636)));
j4eval[0]=x12637;
j4eval[1]=((IKabs(((((-1.0)*r20*x12636))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12638=cj5*cj5;
IkReal x12639=r01*r01;
IkReal x12640=(cj5*r00);
IkReal x12641=(r01*sj5);
IkReal x12642=(((x12638*(r00*r00)))+(((-1.0)*x12638*x12639))+(((-2.0)*x12640*x12641))+x12639+(r02*r02));
j4eval[0]=x12642;
j4eval[1]=IKsign(x12642);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12640))+x12641))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12643=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12643);
rxp0_2=(py*r00);
rxp1_0=(r21*x12643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12644=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12644)));
j4eval[1]=((((-1.0)*r20*x12644))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12645=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12645);
rxp0_2=(py*r00);
rxp1_0=(r21*x12645);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12646=IKPowWithIntegerCheck(r12,-1);
if(!x12646.valid){
continue;
}
CheckValue<IkReal> x12647=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12647.valid){
continue;
}
if( IKabs(((x12646.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12647.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12646.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12647.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12646.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12647.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12648=IKsin(j4);
IkReal x12649=IKcos(j4);
IkReal x12650=((1.0)*cj2);
IkReal x12651=((1.0)*cj5*r00);
IkReal x12652=(sj5*x12649);
IkReal x12653=(sj5*x12648);
IkReal x12654=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12649);
evalcond[1]=(((r21*x12653))+(((-1.0)*x12648*x12654)));
evalcond[2]=((((-1.0)*x12649*x12651))+((r01*x12652)));
evalcond[3]=(((r12*x12648))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12650)));
evalcond[4]=((-1.0)+((r01*x12653))+(((-1.0)*x12648*x12651)));
evalcond[5]=((((-1.0)*cj1*x12650))+((r21*x12652))+((sj1*sj2))+(((-1.0)*x12649*x12654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12655=((1.0)*cj5);
CheckValue<IkReal> x12656=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12655))),-1);
if(!x12656.valid){
continue;
}
CheckValue<IkReal> x12657=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12655))),-1);
if(!x12657.valid){
continue;
}
if( IKabs(x12656.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12657.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12656.value)+IKsqr(((x12657.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12656.value, ((x12657.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12658=IKsin(j4);
IkReal x12659=IKcos(j4);
IkReal x12660=((1.0)*cj2);
IkReal x12661=((1.0)*cj5*r00);
IkReal x12662=(sj5*x12659);
IkReal x12663=(sj5*x12658);
IkReal x12664=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12659);
evalcond[1]=(((r21*x12663))+(((-1.0)*x12658*x12664)));
evalcond[2]=((((-1.0)*x12659*x12661))+((r01*x12662)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r12*x12658))+(((-1.0)*sj1*x12660)));
evalcond[4]=((-1.0)+(((-1.0)*x12658*x12661))+((r01*x12663)));
evalcond[5]=((((-1.0)*cj1*x12660))+((r21*x12662))+((sj1*sj2))+(((-1.0)*x12659*x12664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12665=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12665);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12665);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12666=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12666)));
j4eval[1]=((((-1.0)*r10*x12666))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12667=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12667);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12667);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12668=IKPowWithIntegerCheck(r22,-1);
if(!x12668.valid){
continue;
}
CheckValue<IkReal> x12669=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12669.valid){
continue;
}
if( IKabs(((x12668.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12669.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12668.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12669.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12668.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12669.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12670=IKsin(j4);
IkReal x12671=IKcos(j4);
IkReal x12672=((1.0)*cj5);
IkReal x12673=((1.0)*cj2);
IkReal x12674=(sj5*x12671);
IkReal x12675=(sj5*x12670);
evalcond[0]=((-1.0)*r22*x12671);
evalcond[1]=((((-1.0)*cj1*x12673))+((r22*x12670))+((sj1*sj2)));
evalcond[2]=((((-1.0)*r10*x12670*x12672))+((r11*x12675)));
evalcond[3]=((((-1.0)*r00*x12671*x12672))+((r01*x12674)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12670*x12672))+((r01*x12675)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r10*x12671*x12672))+((r11*x12674))+(((-1.0)*sj1*x12673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12676=((1.0)*cj5);
CheckValue<IkReal> x12677=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12676))),-1);
if(!x12677.valid){
continue;
}
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(((((-1.0)*r10*x12676))+((r11*sj5))),-1);
if(!x12678.valid){
continue;
}
if( IKabs(x12677.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12678.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12677.value)+IKsqr(((x12678.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12677.value, ((x12678.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12679=IKsin(j4);
IkReal x12680=IKcos(j4);
IkReal x12681=((1.0)*cj5);
IkReal x12682=((1.0)*cj2);
IkReal x12683=(sj5*x12680);
IkReal x12684=(sj5*x12679);
evalcond[0]=((-1.0)*r22*x12680);
evalcond[1]=((((-1.0)*cj1*x12682))+((r22*x12679))+((sj1*sj2)));
evalcond[2]=(((r11*x12684))+(((-1.0)*r10*x12679*x12681)));
evalcond[3]=(((r01*x12683))+(((-1.0)*r00*x12680*x12681)));
evalcond[4]=((-1.0)+((r01*x12684))+(((-1.0)*r00*x12679*x12681)));
evalcond[5]=((((-1.0)*sj1*x12682))+((r11*x12683))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x12680*x12681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12685=cj5*cj5;
IkReal x12686=r01*r01;
IkReal x12687=(r01*sj5);
IkReal x12688=(cj5*r00);
CheckValue<IkReal> x12689 = IKatan2WithCheck(IkReal((x12687+(((-1.0)*x12688)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12689.valid){
continue;
}
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(IKsign((((x12685*(r00*r00)))+(((-1.0)*x12685*x12686))+(((-2.0)*x12687*x12688))+x12686+(r02*r02))),-1);
if(!x12690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12689.value)+(((1.5707963267949)*(x12690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12691=IKcos(j4);
IkReal x12692=IKsin(j4);
IkReal x12693=(cj5*r00);
IkReal x12694=(cj5*r10);
IkReal x12695=(r21*sj5);
IkReal x12696=((1.0)*cj2);
IkReal x12697=(cj5*r20);
IkReal x12698=((1.0)*x12691);
IkReal x12699=((1.0)*x12692);
IkReal x12700=(sj5*x12692);
IkReal x12701=(sj5*x12691);
evalcond[0]=(((r02*x12692))+((r01*x12701))+(((-1.0)*x12693*x12698)));
evalcond[1]=((((-1.0)*r22*x12698))+((x12692*x12695))+(((-1.0)*x12697*x12699)));
evalcond[2]=((((-1.0)*r12*x12698))+((r11*x12700))+(((-1.0)*x12694*x12699)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12698))+((r01*x12700))+(((-1.0)*x12693*x12699)));
evalcond[4]=((((-1.0)*cj1*x12696))+((r22*x12692))+((sj1*sj2))+(((-1.0)*x12697*x12698))+((x12691*x12695)));
evalcond[5]=(((r11*x12701))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12696))+((r12*x12692))+(((-1.0)*x12694*x12698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12702=((1.0)*cj5);
CheckValue<IkReal> x12703 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12703.valid){
continue;
}
CheckValue<IkReal> x12704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12702))+(((-1.0)*r10*sj5)))),-1);
if(!x12704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12703.value)+(((1.5707963267949)*(x12704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12705=IKcos(j4);
IkReal x12706=IKsin(j4);
IkReal x12707=(cj5*r00);
IkReal x12708=(cj5*r10);
IkReal x12709=(r21*sj5);
IkReal x12710=((1.0)*cj2);
IkReal x12711=(cj5*r20);
IkReal x12712=((1.0)*x12705);
IkReal x12713=((1.0)*x12706);
IkReal x12714=(sj5*x12706);
IkReal x12715=(sj5*x12705);
evalcond[0]=((((-1.0)*x12707*x12712))+((r02*x12706))+((r01*x12715)));
evalcond[1]=((((-1.0)*r22*x12712))+((x12706*x12709))+(((-1.0)*x12711*x12713)));
evalcond[2]=((((-1.0)*r12*x12712))+((r11*x12714))+(((-1.0)*x12708*x12713)));
evalcond[3]=((-1.0)+(((-1.0)*x12707*x12713))+((r01*x12714))+(((-1.0)*r02*x12712)));
evalcond[4]=(((r22*x12706))+((sj1*sj2))+((x12705*x12709))+(((-1.0)*cj1*x12710))+(((-1.0)*x12711*x12712)));
evalcond[5]=(((r12*x12706))+(((-1.0)*sj1*x12710))+((r11*x12715))+(((-1.0)*cj1*sj2))+(((-1.0)*x12708*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12716=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12716.valid){
continue;
}
CheckValue<IkReal> x12717 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12716.value)))+(x12717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12718=IKcos(j4);
IkReal x12719=IKsin(j4);
IkReal x12720=(cj5*r00);
IkReal x12721=(cj5*r10);
IkReal x12722=(r21*sj5);
IkReal x12723=((1.0)*cj2);
IkReal x12724=(cj5*r20);
IkReal x12725=((1.0)*x12718);
IkReal x12726=((1.0)*x12719);
IkReal x12727=(sj5*x12719);
IkReal x12728=(sj5*x12718);
evalcond[0]=(((r02*x12719))+((r01*x12728))+(((-1.0)*x12720*x12725)));
evalcond[1]=((((-1.0)*r22*x12725))+((x12719*x12722))+(((-1.0)*x12724*x12726)));
evalcond[2]=(((r11*x12727))+(((-1.0)*r12*x12725))+(((-1.0)*x12721*x12726)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12725))+((r01*x12727))+(((-1.0)*x12720*x12726)));
evalcond[4]=(((r22*x12719))+((sj1*sj2))+((x12718*x12722))+(((-1.0)*x12724*x12725))+(((-1.0)*cj1*x12723)));
evalcond[5]=((((-1.0)*sj1*x12723))+((r12*x12719))+((r11*x12728))+(((-1.0)*cj1*sj2))+(((-1.0)*x12721*x12725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12729=((-1.0)*r10);
IkReal x12731 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12731)==0){
continue;
}
IkReal x12730=pow(x12731,-0.5);
CheckValue<IkReal> x12732 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12729),IKFAST_ATAN2_MAGTHRESH);
if(!x12732.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12732.value));
IkReal gconst31=(r11*x12730);
IkReal gconst32=(x12729*x12730);
CheckValue<IkReal> x12733 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12733.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12733.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12734=((-1.0)*r10);
IkReal x12735=x12730;
CheckValue<IkReal> x12737 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12734),IKFAST_ATAN2_MAGTHRESH);
if(!x12737.valid){
continue;
}
IkReal x12736=((-1.0)*(x12737.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12736;
IkReal gconst30=x12736;
IkReal gconst31=(r11*x12735);
IkReal gconst32=(x12734*x12735);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12738=((-1.0)*r10);
IkReal x12739=x12730;
CheckValue<IkReal> x12741 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12738),IKFAST_ATAN2_MAGTHRESH);
if(!x12741.valid){
continue;
}
IkReal x12740=((-1.0)*(x12741.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12740;
IkReal gconst30=x12740;
IkReal gconst31=(r11*x12739);
IkReal gconst32=(x12738*x12739);
CheckValue<IkReal> x12749=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12749.valid){
continue;
}
IkReal x12742=x12749.value;
IkReal x12743=(sj3*x12742);
IkReal x12744=(r20*x12743);
IkReal x12745=(r00*x12743);
IkReal x12746=(r01*x12743);
IkReal x12747=(r21*x12743);
IkReal x12748=(r10*r11*x12743);
j4eval[0]=IKsign((((r01*r10*r11*x12744))+((r10*r11*r21*x12745))+((r02*r22*sj3))+((r00*x12744*(r10*r10)))+((r21*x12746*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12750=gconst31*gconst31;
IkReal x12751=gconst32*gconst32;
IkReal x12752=(r01*r20);
IkReal x12753=(r00*r21);
IkReal x12754=((1.0)*cj3);
IkReal x12755=(r01*r21);
IkReal x12756=(gconst32*sj3);
IkReal x12757=(cj3*gconst31*gconst32);
IkReal x12758=(gconst31*r00*sj3);
CheckValue<IkReal> x12759 = IKatan2WithCheck(IkReal((((r22*x12758))+((r01*r22*x12756)))),IkReal((((gconst31*x12755*x12756))+(((-1.0)*gconst31*r00*r20*x12756))+(((-1.0)*sj3*x12751*x12752))+((sj3*x12750*x12753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12759.valid){
continue;
}
CheckValue<IkReal> x12760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12751*x12754))+((x12753*x12757))+((x12752*x12757))+(((-1.0)*r02*r22*x12754))+(((-1.0)*x12750*x12754*x12755)))),-1);
if(!x12760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12759.value)+(((1.5707963267949)*(x12760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12761=IKsin(j4);
IkReal x12762=IKcos(j4);
IkReal x12763=(sj1*sj2);
IkReal x12764=(gconst31*r00);
IkReal x12765=(r21*sj3);
IkReal x12766=(cj3*gconst32);
IkReal x12767=(gconst31*r11);
IkReal x12768=(gconst31*sj3);
IkReal x12769=(gconst31*r01);
IkReal x12770=((1.0)*cj2);
IkReal x12771=(gconst32*r10);
IkReal x12772=(cj1*sj2);
IkReal x12773=(cj3*gconst31);
IkReal x12774=(gconst32*r00);
IkReal x12775=(gconst32*sj3);
IkReal x12776=(gconst32*r20);
IkReal x12777=(gconst31*r21);
IkReal x12778=(cj1*x12770);
IkReal x12779=((1.0)*x12762);
IkReal x12780=((1.0)*x12761);
IkReal x12781=(cj3*x12762);
IkReal x12782=(sj3*x12762);
IkReal x12783=(cj3*x12761);
evalcond[0]=(((x12761*x12777))+(((-1.0)*r22*x12779))+(((-1.0)*x12776*x12780)));
evalcond[1]=((((-1.0)*r12*x12779))+(((-1.0)*x12771*x12780))+((x12761*x12767)));
evalcond[2]=((-1.0)+(((-1.0)*x12774*x12780))+(((-1.0)*r02*x12779))+((x12761*x12769)));
evalcond[3]=(((r01*x12775))+((sj3*x12764))+(((-1.0)*r00*x12766*x12779))+((x12769*x12781))+((r02*x12783)));
evalcond[4]=(((x12774*x12782))+((cj3*x12764))+(((-1.0)*r02*sj3*x12780))+(((-1.0)*r01*x12768*x12779))+((r01*x12766)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x12766*x12779))+((r21*x12762*x12773))+((r20*x12768))+x12772+((r22*x12783))+((gconst32*x12765)));
evalcond[6]=(((r12*x12783))+(((-1.0)*r10*x12766*x12779))+x12763+((r11*x12775))+(((-1.0)*x12778))+((x12767*x12781))+((r10*x12768)));
evalcond[7]=(((r20*x12773))+((r21*x12766))+(((-1.0)*r22*sj3*x12780))+((r20*x12762*x12775))+x12763+(((-1.0)*x12778))+(((-1.0)*gconst31*x12765*x12779)));
evalcond[8]=((((-1.0)*sj3*x12767*x12779))+(((-1.0)*x12772))+((x12771*x12782))+(((-1.0)*sj1*x12770))+(((-1.0)*r12*sj3*x12780))+((r11*x12766))+((r10*x12773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12784=gconst31*gconst31;
IkReal x12785=gconst32*gconst32;
IkReal x12786=(r00*r20);
IkReal x12787=(cj3*r22);
IkReal x12788=(gconst31*r00);
IkReal x12789=(gconst32*r01);
IkReal x12790=((1.0)*gconst32);
IkReal x12791=(cj3*gconst31);
IkReal x12792=((1.0)*r20);
IkReal x12793=(r21*x12784);
CheckValue<IkReal> x12794 = IKatan2WithCheck(IkReal((((x12787*x12789))+((x12787*x12788)))),IkReal((((cj3*r00*x12793))+(((-1.0)*cj3*r01*x12785*x12792))+(((-1.0)*x12786*x12790*x12791))+((r21*x12789*x12791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12794.valid){
continue;
}
CheckValue<IkReal> x12795=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*sj3*x12789*x12792))+(((-1.0)*r21*sj3*x12788*x12790))+((sj3*x12785*x12786))+((r01*sj3*x12793))+((r02*r22*sj3)))),-1);
if(!x12795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12794.value)+(((1.5707963267949)*(x12795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12796=IKsin(j4);
IkReal x12797=IKcos(j4);
IkReal x12798=(sj1*sj2);
IkReal x12799=(gconst31*r00);
IkReal x12800=(r21*sj3);
IkReal x12801=(cj3*gconst32);
IkReal x12802=(gconst31*r11);
IkReal x12803=(gconst31*sj3);
IkReal x12804=(gconst31*r01);
IkReal x12805=((1.0)*cj2);
IkReal x12806=(gconst32*r10);
IkReal x12807=(cj1*sj2);
IkReal x12808=(cj3*gconst31);
IkReal x12809=(gconst32*r00);
IkReal x12810=(gconst32*sj3);
IkReal x12811=(gconst32*r20);
IkReal x12812=(gconst31*r21);
IkReal x12813=(cj1*x12805);
IkReal x12814=((1.0)*x12797);
IkReal x12815=((1.0)*x12796);
IkReal x12816=(cj3*x12797);
IkReal x12817=(sj3*x12797);
IkReal x12818=(cj3*x12796);
evalcond[0]=((((-1.0)*x12811*x12815))+(((-1.0)*r22*x12814))+((x12796*x12812)));
evalcond[1]=((((-1.0)*r12*x12814))+(((-1.0)*x12806*x12815))+((x12796*x12802)));
evalcond[2]=((-1.0)+(((-1.0)*x12809*x12815))+(((-1.0)*r02*x12814))+((x12796*x12804)));
evalcond[3]=(((r02*x12818))+((r01*x12810))+(((-1.0)*r00*x12801*x12814))+((x12804*x12816))+((sj3*x12799)));
evalcond[4]=(((r01*x12801))+(((-1.0)*r01*x12803*x12814))+((cj3*x12799))+((x12809*x12817))+(((-1.0)*r02*sj3*x12815)));
evalcond[5]=(((cj2*sj1))+x12807+((r20*x12803))+((gconst32*x12800))+((r21*x12797*x12808))+(((-1.0)*r20*x12801*x12814))+((r22*x12818)));
evalcond[6]=(((r10*x12803))+(((-1.0)*x12813))+(((-1.0)*r10*x12801*x12814))+((x12802*x12816))+((r12*x12818))+((r11*x12810))+x12798);
evalcond[7]=((((-1.0)*gconst31*x12800*x12814))+((r20*x12808))+(((-1.0)*x12813))+(((-1.0)*r22*sj3*x12815))+((r21*x12801))+((r20*x12797*x12810))+x12798);
evalcond[8]=(((r10*x12808))+((x12806*x12817))+(((-1.0)*sj1*x12805))+((r11*x12801))+(((-1.0)*x12807))+(((-1.0)*r12*sj3*x12815))+(((-1.0)*sj3*x12802*x12814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12819.valid){
continue;
}
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst31*r11))+(((-1.0)*gconst32*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12819.value)))+(x12820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12821=IKsin(j4);
IkReal x12822=IKcos(j4);
IkReal x12823=(sj1*sj2);
IkReal x12824=(gconst31*r00);
IkReal x12825=(r21*sj3);
IkReal x12826=(cj3*gconst32);
IkReal x12827=(gconst31*r11);
IkReal x12828=(gconst31*sj3);
IkReal x12829=(gconst31*r01);
IkReal x12830=((1.0)*cj2);
IkReal x12831=(gconst32*r10);
IkReal x12832=(cj1*sj2);
IkReal x12833=(cj3*gconst31);
IkReal x12834=(gconst32*r00);
IkReal x12835=(gconst32*sj3);
IkReal x12836=(gconst32*r20);
IkReal x12837=(gconst31*r21);
IkReal x12838=(cj1*x12830);
IkReal x12839=((1.0)*x12822);
IkReal x12840=((1.0)*x12821);
IkReal x12841=(cj3*x12822);
IkReal x12842=(sj3*x12822);
IkReal x12843=(cj3*x12821);
evalcond[0]=((((-1.0)*r22*x12839))+(((-1.0)*x12836*x12840))+((x12821*x12837)));
evalcond[1]=((((-1.0)*x12831*x12840))+((x12821*x12827))+(((-1.0)*r12*x12839)));
evalcond[2]=((-1.0)+(((-1.0)*x12834*x12840))+(((-1.0)*r02*x12839))+((x12821*x12829)));
evalcond[3]=(((x12829*x12841))+(((-1.0)*r00*x12826*x12839))+((r02*x12843))+((sj3*x12824))+((r01*x12835)));
evalcond[4]=((((-1.0)*r01*x12828*x12839))+((cj3*x12824))+((r01*x12826))+(((-1.0)*r02*sj3*x12840))+((x12834*x12842)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x12826*x12839))+x12832+((r21*x12822*x12833))+((r22*x12843))+((r20*x12828))+((gconst32*x12825)));
evalcond[6]=(x12823+((r10*x12828))+((r11*x12835))+(((-1.0)*r10*x12826*x12839))+(((-1.0)*x12838))+((r12*x12843))+((x12827*x12841)));
evalcond[7]=(((r20*x12822*x12835))+x12823+((r21*x12826))+(((-1.0)*x12838))+((r20*x12833))+(((-1.0)*r22*sj3*x12840))+(((-1.0)*gconst31*x12825*x12839)));
evalcond[8]=(((r10*x12833))+(((-1.0)*sj3*x12827*x12839))+(((-1.0)*sj1*x12830))+((x12831*x12842))+((r11*x12826))+(((-1.0)*x12832))+(((-1.0)*r12*sj3*x12840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12844=((-1.0)*r11);
IkReal x12846 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12846)==0){
continue;
}
IkReal x12845=pow(x12846,-0.5);
CheckValue<IkReal> x12847 = IKatan2WithCheck(IkReal(x12844),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12847.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12847.value))));
IkReal gconst34=(x12844*x12845);
IkReal gconst35=((1.0)*r10*x12845);
CheckValue<IkReal> x12848 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12848.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12848.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12849=((-1.0)*r11);
CheckValue<IkReal> x12852 = IKatan2WithCheck(IkReal(x12849),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12852.valid){
continue;
}
IkReal x12850=((1.0)*(x12852.value));
IkReal x12851=x12845;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x12850)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12850)));
IkReal gconst34=(x12849*x12851);
IkReal gconst35=((1.0)*r10*x12851);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12853=gconst35*gconst35;
IkReal x12854=gconst34*gconst34;
IkReal x12855=((1.0)*gconst35);
IkReal x12856=(r21*sj3);
IkReal x12857=(cj3*r21);
IkReal x12858=(gconst35*r01);
IkReal x12859=(r01*r20);
IkReal x12860=(cj3*gconst34*r00);
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal((((cj3*r22*x12858))+((r22*x12860)))),IkReal((((r00*x12854*x12857))+(((-1.0)*cj3*x12853*x12859))+((gconst34*x12857*x12858))+(((-1.0)*r20*x12855*x12860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
CheckValue<IkReal> x12862=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*sj3*x12855*x12859))+(((-1.0)*gconst34*r00*x12855*x12856))+((r00*r20*sj3*x12853))+((r02*r22*sj3))+((r01*x12854*x12856)))),-1);
if(!x12862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12861.value)+(((1.5707963267949)*(x12862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12863=IKsin(j4);
IkReal x12864=IKcos(j4);
IkReal x12865=(sj1*sj2);
IkReal x12866=(gconst35*r00);
IkReal x12867=(gconst35*sj3);
IkReal x12868=(gconst34*r20);
IkReal x12869=(cj3*gconst34);
IkReal x12870=(gconst34*r21);
IkReal x12871=((1.0)*cj1);
IkReal x12872=(cj2*sj1);
IkReal x12873=(gconst35*r10);
IkReal x12874=(gconst34*sj3);
IkReal x12875=(cj3*gconst35);
IkReal x12876=(cj2*x12871);
IkReal x12877=((1.0)*x12864);
IkReal x12878=((1.0)*x12863);
IkReal x12879=(cj3*x12863);
IkReal x12880=(gconst34*x12863);
evalcond[0]=((((-1.0)*r22*x12877))+((x12863*x12870))+(((-1.0)*gconst35*r20*x12878)));
evalcond[1]=((((-1.0)*r12*x12877))+((r11*x12880))+(((-1.0)*x12873*x12878)));
evalcond[2]=((-1.0)+(((-1.0)*x12866*x12878))+(((-1.0)*r02*x12877))+((r01*x12880)));
evalcond[3]=(((r00*x12874))+((r02*x12879))+((r01*x12864*x12869))+(((-1.0)*cj3*x12866*x12877))+((r01*x12867)));
evalcond[4]=(((sj3*x12864*x12866))+(((-1.0)*r02*sj3*x12878))+((r01*x12875))+(((-1.0)*r01*x12874*x12877))+((r00*x12869)));
evalcond[5]=((((-1.0)*r20*x12875*x12877))+x12872+((r21*x12867))+((r22*x12879))+((cj1*sj2))+((r21*x12864*x12869))+((sj3*x12868)));
evalcond[6]=(x12865+((r11*x12867))+(((-1.0)*cj3*x12873*x12877))+((r10*x12874))+((r12*x12879))+(((-1.0)*x12876))+((r11*x12864*x12869)));
evalcond[7]=(x12865+(((-1.0)*sj3*x12870*x12877))+((cj3*x12868))+((r21*x12875))+((r20*x12864*x12867))+(((-1.0)*x12876))+(((-1.0)*r22*sj3*x12878)));
evalcond[8]=(((r10*x12864*x12867))+(((-1.0)*r11*x12874*x12877))+((r11*x12875))+(((-1.0)*x12872))+(((-1.0)*sj2*x12871))+((r10*x12869))+(((-1.0)*r12*sj3*x12878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12881=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x12881.valid){
continue;
}
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst35*r10))+((gconst34*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12881.value)))+(x12882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12883=IKsin(j4);
IkReal x12884=IKcos(j4);
IkReal x12885=(sj1*sj2);
IkReal x12886=(gconst35*r00);
IkReal x12887=(gconst35*sj3);
IkReal x12888=(gconst34*r20);
IkReal x12889=(cj3*gconst34);
IkReal x12890=(gconst34*r21);
IkReal x12891=((1.0)*cj1);
IkReal x12892=(cj2*sj1);
IkReal x12893=(gconst35*r10);
IkReal x12894=(gconst34*sj3);
IkReal x12895=(cj3*gconst35);
IkReal x12896=(cj2*x12891);
IkReal x12897=((1.0)*x12884);
IkReal x12898=((1.0)*x12883);
IkReal x12899=(cj3*x12883);
IkReal x12900=(gconst34*x12883);
evalcond[0]=((((-1.0)*r22*x12897))+(((-1.0)*gconst35*r20*x12898))+((x12883*x12890)));
evalcond[1]=((((-1.0)*x12893*x12898))+((r11*x12900))+(((-1.0)*r12*x12897)));
evalcond[2]=((-1.0)+((r01*x12900))+(((-1.0)*x12886*x12898))+(((-1.0)*r02*x12897)));
evalcond[3]=(((r00*x12894))+(((-1.0)*cj3*x12886*x12897))+((r02*x12899))+((r01*x12887))+((r01*x12884*x12889)));
evalcond[4]=((((-1.0)*r01*x12894*x12897))+((r01*x12895))+((r00*x12889))+((sj3*x12884*x12886))+(((-1.0)*r02*sj3*x12898)));
evalcond[5]=(x12892+(((-1.0)*r20*x12895*x12897))+((r22*x12899))+((cj1*sj2))+((r21*x12884*x12889))+((r21*x12887))+((sj3*x12888)));
evalcond[6]=(((r12*x12899))+x12885+((r11*x12884*x12889))+((r10*x12894))+(((-1.0)*x12896))+((r11*x12887))+(((-1.0)*cj3*x12893*x12897)));
evalcond[7]=(x12885+((r21*x12895))+(((-1.0)*r22*sj3*x12898))+((r20*x12884*x12887))+((cj3*x12888))+(((-1.0)*sj3*x12890*x12897))+(((-1.0)*x12896)));
evalcond[8]=((((-1.0)*x12892))+(((-1.0)*r11*x12894*x12897))+((r10*x12884*x12887))+(((-1.0)*sj2*x12891))+((r10*x12889))+(((-1.0)*r12*sj3*x12898))+((r11*x12895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12902 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12902)==0){
continue;
}
IkReal x12901=pow(x12902,-0.5);
CheckValue<IkReal> x12903 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12903.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12903.value));
IkReal gconst37=((-1.0)*r21*x12901);
IkReal gconst38=(r20*x12901);
CheckValue<IkReal> x12904 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12907.valid){
continue;
}
IkReal x12905=((-1.0)*(x12907.value));
IkReal x12906=x12901;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12905;
IkReal gconst36=x12905;
IkReal gconst37=((-1.0)*r21*x12906);
IkReal gconst38=(r20*x12906);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
IkReal x12908=((-1.0)*(x12910.value));
IkReal x12909=x12901;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12908;
IkReal gconst36=x12908;
IkReal gconst37=((-1.0)*r21*x12909);
IkReal gconst38=(r20*x12909);
CheckValue<IkReal> x12918=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12918.valid){
continue;
}
IkReal x12911=x12918.value;
IkReal x12912=(sj3*x12911);
IkReal x12913=(r11*x12912);
IkReal x12914=(r00*x12912);
IkReal x12915=(r01*x12912);
IkReal x12916=(r10*x12912);
IkReal x12917=(r20*r21*x12912);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x12913))+((r01*x12913*(r21*r21)))+((r10*r20*r21*x12915))+((r10*x12914*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12919=gconst37*gconst37;
IkReal x12920=gconst38*gconst38;
IkReal x12921=((1.0)*cj3);
IkReal x12922=(gconst38*r01);
IkReal x12923=(cj3*gconst37);
IkReal x12924=(r12*sj3);
IkReal x12925=(gconst37*r00);
IkReal x12926=(r00*r11);
IkReal x12927=((1.0)*r10*sj3);
CheckValue<IkReal> x12928 = IKatan2WithCheck(IkReal((((x12922*x12924))+((x12924*x12925)))),IkReal(((((-1.0)*r01*x12920*x12927))+((sj3*x12919*x12926))+((gconst37*r11*sj3*x12922))+(((-1.0)*gconst38*x12925*x12927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929=IKPowWithIntegerCheck(IKsign((((gconst38*x12923*x12926))+(((-1.0)*r01*r11*x12919*x12921))+((r10*x12922*x12923))+(((-1.0)*r02*r12*x12921))+(((-1.0)*r00*r10*x12920*x12921)))),-1);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12928.value)+(((1.5707963267949)*(x12929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12930=IKsin(j4);
IkReal x12931=IKcos(j4);
IkReal x12932=(sj1*sj2);
IkReal x12933=(gconst38*sj3);
IkReal x12934=(cj3*gconst38);
IkReal x12935=(cj3*gconst37);
IkReal x12936=((1.0)*cj1);
IkReal x12937=(gconst37*sj3);
IkReal x12938=(cj2*sj1);
IkReal x12939=(cj2*x12936);
IkReal x12940=((1.0)*x12931);
IkReal x12941=((1.0)*x12930);
IkReal x12942=(cj3*x12930);
IkReal x12943=(gconst37*x12930);
evalcond[0]=((((-1.0)*gconst38*r20*x12941))+((r21*x12943))+(((-1.0)*r22*x12940)));
evalcond[1]=((((-1.0)*gconst38*r10*x12941))+((r11*x12943))+(((-1.0)*r12*x12940)));
evalcond[2]=((-1.0)+((r01*x12943))+(((-1.0)*r02*x12940))+(((-1.0)*gconst38*r00*x12941)));
evalcond[3]=(((r01*x12933))+((r00*x12937))+((r02*x12942))+((r01*x12931*x12935))+(((-1.0)*r00*x12934*x12940)));
evalcond[4]=((((-1.0)*r02*sj3*x12941))+((r00*x12931*x12933))+(((-1.0)*r01*x12937*x12940))+((r01*x12934))+((r00*x12935)));
evalcond[5]=(x12938+((r20*x12937))+((r22*x12942))+((cj1*sj2))+(((-1.0)*r20*x12934*x12940))+((r21*x12933))+((r21*x12931*x12935)));
evalcond[6]=(x12932+((r11*x12933))+((r12*x12942))+((r10*x12937))+((r11*x12931*x12935))+(((-1.0)*x12939))+(((-1.0)*r10*x12934*x12940)));
evalcond[7]=(x12932+((r20*x12935))+(((-1.0)*r22*sj3*x12941))+(((-1.0)*r21*x12937*x12940))+((r20*x12931*x12933))+(((-1.0)*x12939))+((r21*x12934)));
evalcond[8]=(((r11*x12934))+((r10*x12931*x12933))+(((-1.0)*r11*x12937*x12940))+(((-1.0)*x12938))+(((-1.0)*sj2*x12936))+(((-1.0)*r12*sj3*x12941))+((r10*x12935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12944=gconst37*gconst37;
IkReal x12945=gconst38*gconst38;
IkReal x12946=(r10*sj3);
IkReal x12947=(r00*r11);
IkReal x12948=(r01*r11);
IkReal x12949=(cj3*gconst37);
IkReal x12950=(cj3*r10);
IkReal x12951=((1.0)*gconst37*gconst38);
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x12945*x12946))+(((-1.0)*sj3*x12947*x12951))+(((-1.0)*r01*x12946*x12951))+((sj3*x12944*x12948)))),-1);
if(!x12952.valid){
continue;
}
CheckValue<IkReal> x12953 = IKatan2WithCheck(IkReal((((cj3*gconst38*r01*r12))+((r00*r12*x12949)))),IkReal(((((-1.0)*r01*x12945*x12950))+(((-1.0)*gconst38*r00*r10*x12949))+((cj3*x12944*x12947))+((gconst38*x12948*x12949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12952.value)))+(x12953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12954=IKsin(j4);
IkReal x12955=IKcos(j4);
IkReal x12956=(sj1*sj2);
IkReal x12957=(gconst38*sj3);
IkReal x12958=(cj3*gconst38);
IkReal x12959=(cj3*gconst37);
IkReal x12960=((1.0)*cj1);
IkReal x12961=(gconst37*sj3);
IkReal x12962=(cj2*sj1);
IkReal x12963=(cj2*x12960);
IkReal x12964=((1.0)*x12955);
IkReal x12965=((1.0)*x12954);
IkReal x12966=(cj3*x12954);
IkReal x12967=(gconst37*x12954);
evalcond[0]=((((-1.0)*gconst38*r20*x12965))+(((-1.0)*r22*x12964))+((r21*x12967)));
evalcond[1]=((((-1.0)*gconst38*r10*x12965))+(((-1.0)*r12*x12964))+((r11*x12967)));
evalcond[2]=((-1.0)+((r01*x12967))+(((-1.0)*gconst38*r00*x12965))+(((-1.0)*r02*x12964)));
evalcond[3]=(((r00*x12961))+((r01*x12957))+((r02*x12966))+((r01*x12955*x12959))+(((-1.0)*r00*x12958*x12964)));
evalcond[4]=((((-1.0)*r02*sj3*x12965))+(((-1.0)*r01*x12961*x12964))+((r00*x12955*x12957))+((r01*x12958))+((r00*x12959)));
evalcond[5]=(x12962+((r21*x12955*x12959))+((cj1*sj2))+(((-1.0)*r20*x12958*x12964))+((r21*x12957))+((r20*x12961))+((r22*x12966)));
evalcond[6]=(x12956+(((-1.0)*x12963))+(((-1.0)*r10*x12958*x12964))+((r11*x12957))+((r11*x12955*x12959))+((r12*x12966))+((r10*x12961)));
evalcond[7]=(x12956+(((-1.0)*x12963))+((r21*x12958))+(((-1.0)*r21*x12961*x12964))+((r20*x12955*x12957))+((r20*x12959))+(((-1.0)*r22*sj3*x12965)));
evalcond[8]=(((r10*x12959))+(((-1.0)*r11*x12961*x12964))+(((-1.0)*r12*sj3*x12965))+(((-1.0)*sj2*x12960))+(((-1.0)*x12962))+((r10*x12955*x12957))+((r11*x12958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12968=((1.0)*gconst38);
CheckValue<IkReal> x12969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12968))+(((-1.0)*gconst37*r10)))),-1);
if(!x12969.valid){
continue;
}
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x12968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12969.value)))+(x12970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12971=IKsin(j4);
IkReal x12972=IKcos(j4);
IkReal x12973=(sj1*sj2);
IkReal x12974=(gconst38*sj3);
IkReal x12975=(cj3*gconst38);
IkReal x12976=(cj3*gconst37);
IkReal x12977=((1.0)*cj1);
IkReal x12978=(gconst37*sj3);
IkReal x12979=(cj2*sj1);
IkReal x12980=(cj2*x12977);
IkReal x12981=((1.0)*x12972);
IkReal x12982=((1.0)*x12971);
IkReal x12983=(cj3*x12971);
IkReal x12984=(gconst37*x12971);
evalcond[0]=((((-1.0)*gconst38*r20*x12982))+(((-1.0)*r22*x12981))+((r21*x12984)));
evalcond[1]=(((r11*x12984))+(((-1.0)*r12*x12981))+(((-1.0)*gconst38*r10*x12982)));
evalcond[2]=((-1.0)+(((-1.0)*gconst38*r00*x12982))+((r01*x12984))+(((-1.0)*r02*x12981)));
evalcond[3]=(((r01*x12974))+((r00*x12978))+((r01*x12972*x12976))+(((-1.0)*r00*x12975*x12981))+((r02*x12983)));
evalcond[4]=(((r00*x12972*x12974))+((r01*x12975))+((r00*x12976))+(((-1.0)*r01*x12978*x12981))+(((-1.0)*r02*sj3*x12982)));
evalcond[5]=(x12979+((r22*x12983))+((r21*x12972*x12976))+((cj1*sj2))+((r20*x12978))+(((-1.0)*r20*x12975*x12981))+((r21*x12974)));
evalcond[6]=(x12973+(((-1.0)*x12980))+(((-1.0)*r10*x12975*x12981))+((r12*x12983))+((r11*x12974))+((r11*x12972*x12976))+((r10*x12978)));
evalcond[7]=(x12973+((r20*x12972*x12974))+(((-1.0)*x12980))+((r20*x12976))+(((-1.0)*r22*sj3*x12982))+((r21*x12975))+(((-1.0)*r21*x12978*x12981)));
evalcond[8]=((((-1.0)*r12*sj3*x12982))+(((-1.0)*r11*x12978*x12981))+(((-1.0)*sj2*x12977))+(((-1.0)*x12979))+((r11*x12975))+((r10*x12972*x12974))+((r10*x12976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12986 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12986)==0){
continue;
}
IkReal x12985=pow(x12986,-0.5);
CheckValue<IkReal> x12987 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12987.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12987.value))));
IkReal gconst40=((1.0)*r21*x12985);
IkReal gconst41=((-1.0)*r20*x12985);
CheckValue<IkReal> x12988 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12988.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12988.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12991 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12991.valid){
continue;
}
IkReal x12989=((1.0)*(x12991.value));
IkReal x12990=x12985;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12989)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12989)));
IkReal gconst40=((1.0)*r21*x12990);
IkReal gconst41=((-1.0)*r20*x12990);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12994 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12994.valid){
continue;
}
IkReal x12992=((1.0)*(x12994.value));
IkReal x12993=x12985;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12992)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12992)));
IkReal gconst40=((1.0)*r21*x12993);
IkReal gconst41=((-1.0)*r20*x12993);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12997 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12997.valid){
continue;
}
IkReal x12995=((1.0)*(x12997.value));
IkReal x12996=x12985;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12995)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12995)));
IkReal gconst40=((1.0)*r21*x12996);
IkReal gconst41=((-1.0)*r20*x12996);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12998=gconst40*gconst40;
IkReal x12999=gconst41*gconst41;
IkReal x13000=(gconst41*sj3);
IkReal x13001=((1.0)*cj3);
IkReal x13002=(gconst40*r00);
IkReal x13003=((1.0)*r20);
IkReal x13004=(gconst40*r01);
IkReal x13005=(cj3*gconst41);
IkReal x13006=(r21*x12998);
CheckValue<IkReal> x13007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13001*x13006))+((r20*x13004*x13005))+(((-1.0)*r00*r20*x12999*x13001))+(((-1.0)*r02*r22*x13001))+((r21*x13002*x13005)))),-1);
if(!x13007.valid){
continue;
}
CheckValue<IkReal> x13008 = IKatan2WithCheck(IkReal((((r22*sj3*x13002))+((r01*r22*x13000)))),IkReal(((((-1.0)*r01*sj3*x12999*x13003))+((r21*x13000*x13004))+((r00*sj3*x13006))+(((-1.0)*x13000*x13002*x13003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13007.value)))+(x13008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13009=IKsin(j4);
IkReal x13010=IKcos(j4);
IkReal x13011=(sj1*sj2);
IkReal x13012=(gconst40*sj3);
IkReal x13013=(gconst41*sj3);
IkReal x13014=(gconst41*r20);
IkReal x13015=(cj3*gconst41);
IkReal x13016=((1.0)*cj2);
IkReal x13017=(cj1*sj2);
IkReal x13018=(cj3*gconst40);
IkReal x13019=(cj1*x13016);
IkReal x13020=((1.0)*x13010);
IkReal x13021=((1.0)*x13009);
IkReal x13022=(cj3*x13009);
IkReal x13023=(gconst40*x13009);
IkReal x13024=(x13010*x13018);
evalcond[0]=((((-1.0)*r22*x13020))+((r21*x13023))+(((-1.0)*x13014*x13021)));
evalcond[1]=((((-1.0)*gconst41*r10*x13021))+((r11*x13023))+(((-1.0)*r12*x13020)));
evalcond[2]=((-1.0)+((r01*x13023))+(((-1.0)*gconst41*r00*x13021))+(((-1.0)*r02*x13020)));
evalcond[3]=(((r01*x13024))+((r00*x13012))+((r01*x13013))+((r02*x13022))+(((-1.0)*r00*x13015*x13020)));
evalcond[4]=(((r00*x13010*x13013))+((r00*x13018))+((r01*x13015))+(((-1.0)*r02*sj3*x13021))+(((-1.0)*r01*x13012*x13020)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13014*x13020))+((r21*x13024))+((r21*x13013))+((r20*x13012))+x13017+((r22*x13022)));
evalcond[6]=((((-1.0)*x13019))+((r11*x13013))+((r11*x13024))+x13011+((r12*x13022))+((r10*x13012))+(((-1.0)*r10*x13015*x13020)));
evalcond[7]=(((r21*x13015))+(((-1.0)*r22*sj3*x13021))+(((-1.0)*x13019))+((r20*x13018))+x13011+(((-1.0)*r21*x13012*x13020))+((r20*x13010*x13013)));
evalcond[8]=(((r10*x13010*x13013))+(((-1.0)*sj1*x13016))+(((-1.0)*x13017))+((r11*x13015))+((r10*x13018))+(((-1.0)*r11*x13012*x13020))+(((-1.0)*r12*sj3*x13021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13025=((1.0)*gconst41);
CheckValue<IkReal> x13026=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r10))+(((-1.0)*r11*x13025)))),-1);
if(!x13026.valid){
continue;
}
CheckValue<IkReal> x13027 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x13025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13026.value)))+(x13027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13028=IKsin(j4);
IkReal x13029=IKcos(j4);
IkReal x13030=(sj1*sj2);
IkReal x13031=(gconst40*sj3);
IkReal x13032=(gconst41*sj3);
IkReal x13033=(gconst41*r20);
IkReal x13034=(cj3*gconst41);
IkReal x13035=((1.0)*cj2);
IkReal x13036=(cj1*sj2);
IkReal x13037=(cj3*gconst40);
IkReal x13038=(cj1*x13035);
IkReal x13039=((1.0)*x13029);
IkReal x13040=((1.0)*x13028);
IkReal x13041=(cj3*x13028);
IkReal x13042=(gconst40*x13028);
IkReal x13043=(x13029*x13037);
evalcond[0]=(((r21*x13042))+(((-1.0)*x13033*x13040))+(((-1.0)*r22*x13039)));
evalcond[1]=(((r11*x13042))+(((-1.0)*gconst41*r10*x13040))+(((-1.0)*r12*x13039)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13039))+((r01*x13042))+(((-1.0)*gconst41*r00*x13040)));
evalcond[3]=(((r02*x13041))+((r01*x13032))+(((-1.0)*r00*x13034*x13039))+((r01*x13043))+((r00*x13031)));
evalcond[4]=(((r00*x13029*x13032))+(((-1.0)*r02*sj3*x13040))+((r01*x13034))+((r00*x13037))+(((-1.0)*r01*x13031*x13039)));
evalcond[5]=(((cj2*sj1))+((r21*x13043))+(((-1.0)*cj3*x13033*x13039))+((r22*x13041))+((r21*x13032))+x13036+((r20*x13031)));
evalcond[6]=(((r11*x13043))+((r11*x13032))+((r10*x13031))+x13030+(((-1.0)*x13038))+((r12*x13041))+(((-1.0)*r10*x13034*x13039)));
evalcond[7]=(((r21*x13034))+x13030+(((-1.0)*r22*sj3*x13040))+(((-1.0)*x13038))+((r20*x13037))+(((-1.0)*r21*x13031*x13039))+((r20*x13029*x13032)));
evalcond[8]=((((-1.0)*x13036))+((r11*x13034))+((r10*x13029*x13032))+(((-1.0)*r12*sj3*x13040))+((r10*x13037))+(((-1.0)*sj1*x13035))+(((-1.0)*r11*x13031*x13039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13044=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x13044.valid){
continue;
}
CheckValue<IkReal> x13045 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r10))+((gconst40*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13044.value)))+(x13045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13046=IKsin(j4);
IkReal x13047=IKcos(j4);
IkReal x13048=(sj1*sj2);
IkReal x13049=(gconst40*sj3);
IkReal x13050=(gconst41*sj3);
IkReal x13051=(gconst41*r20);
IkReal x13052=(cj3*gconst41);
IkReal x13053=((1.0)*cj2);
IkReal x13054=(cj1*sj2);
IkReal x13055=(cj3*gconst40);
IkReal x13056=(cj1*x13053);
IkReal x13057=((1.0)*x13047);
IkReal x13058=((1.0)*x13046);
IkReal x13059=(cj3*x13046);
IkReal x13060=(gconst40*x13046);
IkReal x13061=(x13047*x13055);
evalcond[0]=(((r21*x13060))+(((-1.0)*r22*x13057))+(((-1.0)*x13051*x13058)));
evalcond[1]=((((-1.0)*r12*x13057))+((r11*x13060))+(((-1.0)*gconst41*r10*x13058)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13057))+(((-1.0)*gconst41*r00*x13058))+((r01*x13060)));
evalcond[3]=(((r02*x13059))+(((-1.0)*r00*x13052*x13057))+((r00*x13049))+((r01*x13050))+((r01*x13061)));
evalcond[4]=((((-1.0)*r01*x13049*x13057))+(((-1.0)*r02*sj3*x13058))+((r00*x13047*x13050))+((r00*x13055))+((r01*x13052)));
evalcond[5]=(((cj2*sj1))+((r20*x13049))+((r21*x13050))+((r22*x13059))+((r21*x13061))+x13054+(((-1.0)*cj3*x13051*x13057)));
evalcond[6]=(((r12*x13059))+((r10*x13049))+x13048+(((-1.0)*r10*x13052*x13057))+((r11*x13050))+((r11*x13061))+(((-1.0)*x13056)));
evalcond[7]=(((r20*x13055))+((r21*x13052))+((r20*x13047*x13050))+x13048+(((-1.0)*x13056))+(((-1.0)*r21*x13049*x13057))+(((-1.0)*r22*sj3*x13058)));
evalcond[8]=((((-1.0)*sj1*x13053))+((r10*x13047*x13050))+(((-1.0)*x13054))+(((-1.0)*r12*sj3*x13058))+((r10*x13055))+((r11*x13052))+(((-1.0)*r11*x13049*x13057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13062=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13062);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13062);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13063=(cj5*r00);
IkReal x13064=(r01*sj5);
j4eval[0]=((((-1.0)*x13063))+x13064);
j4eval[1]=(((sj3*x13063))+(((-1.0)*sj3*x13064)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13065=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13065);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13065);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13066=(r01*sj5);
IkReal x13067=((1.0)*cj5*r00);
j4eval[0]=(x13066+(((-1.0)*x13067)));
j4eval[1]=(((cj3*x13066))+(((-1.0)*cj3*x13067)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13068=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13068);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13068);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13069=((1.0)*cj3);
CheckValue<IkReal> x13070=IKPowWithIntegerCheck(cj3,-1);
if(!x13070.valid){
continue;
}
CheckValue<IkReal> x13071=IKPowWithIntegerCheck(r22,-1);
if(!x13071.valid){
continue;
}
CheckValue<IkReal> x13072=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x13072.valid){
continue;
}
if( IKabs(((x13070.value)*(x13071.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13072.value)*(((((-1.0)*cj5*r01*x13069))+(((-1.0)*r00*sj5*x13069)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13070.value)*(x13071.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13072.value)*(((((-1.0)*cj5*r01*x13069))+(((-1.0)*r00*sj5*x13069))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13070.value)*(x13071.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13072.value)*(((((-1.0)*cj5*r01*x13069))+(((-1.0)*r00*sj5*x13069))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13073=IKsin(j4);
IkReal x13074=IKcos(j4);
IkReal x13075=(sj1*sj2);
IkReal x13076=(cj5*sj3);
IkReal x13077=(r11*sj5);
IkReal x13078=(cj3*cj5);
IkReal x13079=((1.0)*cj1);
IkReal x13080=(cj3*sj5);
IkReal x13081=(sj3*sj5);
IkReal x13082=(cj2*sj1);
IkReal x13083=(r01*sj5);
IkReal x13084=((1.0)*sj3);
IkReal x13085=(cj2*x13079);
IkReal x13086=(r10*x13074);
IkReal x13087=(r22*x13073);
IkReal x13088=(cj3*x13074);
IkReal x13089=((1.0)*cj5*x13073);
evalcond[0]=((-1.0)*r22*x13074);
evalcond[1]=(((cj3*x13087))+((cj1*sj2))+x13082);
evalcond[2]=(((x13073*x13077))+(((-1.0)*r10*x13089)));
evalcond[3]=((-1.0)+((x13073*x13083))+(((-1.0)*r00*x13089)));
evalcond[4]=((((-1.0)*x13085))+(((-1.0)*x13084*x13087))+x13075);
evalcond[5]=((((-1.0)*r01*x13074*x13081))+((r01*x13078))+((r00*x13080))+((r00*x13074*x13076)));
evalcond[6]=(((r01*x13074*x13080))+((r01*x13076))+(((-1.0)*r00*x13074*x13078))+((r00*x13081)));
evalcond[7]=((((-1.0)*x13085))+((x13077*x13088))+((r11*x13076))+x13075+((r10*x13081))+(((-1.0)*x13078*x13086)));
evalcond[8]=((((-1.0)*x13074*x13077*x13084))+((r11*x13078))+(((-1.0)*sj2*x13079))+(((-1.0)*x13082))+((x13076*x13086))+((r10*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13090=((1.0)*sj3);
IkReal x13091=(r01*sj5);
IkReal x13092=((1.0)*cj5*r00);
CheckValue<IkReal> x13093=IKPowWithIntegerCheck((x13091+(((-1.0)*x13092))),-1);
if(!x13093.valid){
continue;
}
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(((((-1.0)*cj3*x13092))+((cj3*x13091))),-1);
if(!x13094.valid){
continue;
}
if( IKabs(x13093.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13094.value)*(((((-1.0)*r00*sj5*x13090))+(((-1.0)*cj5*r01*x13090)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13093.value)+IKsqr(((x13094.value)*(((((-1.0)*r00*sj5*x13090))+(((-1.0)*cj5*r01*x13090))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13093.value, ((x13094.value)*(((((-1.0)*r00*sj5*x13090))+(((-1.0)*cj5*r01*x13090))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13095=IKsin(j4);
IkReal x13096=IKcos(j4);
IkReal x13097=(sj1*sj2);
IkReal x13098=(cj5*sj3);
IkReal x13099=(r11*sj5);
IkReal x13100=(cj3*cj5);
IkReal x13101=((1.0)*cj1);
IkReal x13102=(cj3*sj5);
IkReal x13103=(sj3*sj5);
IkReal x13104=(cj2*sj1);
IkReal x13105=(r01*sj5);
IkReal x13106=((1.0)*sj3);
IkReal x13107=(cj2*x13101);
IkReal x13108=(r10*x13096);
IkReal x13109=(r22*x13095);
IkReal x13110=(cj3*x13096);
IkReal x13111=((1.0)*cj5*x13095);
evalcond[0]=((-1.0)*r22*x13096);
evalcond[1]=(((cj1*sj2))+((cj3*x13109))+x13104);
evalcond[2]=((((-1.0)*r10*x13111))+((x13095*x13099)));
evalcond[3]=((-1.0)+((x13095*x13105))+(((-1.0)*r00*x13111)));
evalcond[4]=((((-1.0)*x13106*x13109))+(((-1.0)*x13107))+x13097);
evalcond[5]=(((r00*x13102))+((r01*x13100))+(((-1.0)*r01*x13096*x13103))+((r00*x13096*x13098)));
evalcond[6]=(((r00*x13103))+((r01*x13096*x13102))+((r01*x13098))+(((-1.0)*r00*x13096*x13100)));
evalcond[7]=(((r11*x13098))+(((-1.0)*x13100*x13108))+((x13099*x13110))+(((-1.0)*x13107))+x13097+((r10*x13103)));
evalcond[8]=(((x13098*x13108))+(((-1.0)*sj2*x13101))+(((-1.0)*x13104))+(((-1.0)*x13096*x13099*x13106))+((r11*x13100))+((r10*x13102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13112=((1.0)*cj3);
IkReal x13113=(cj5*r00);
IkReal x13114=(r01*sj5);
CheckValue<IkReal> x13115=IKPowWithIntegerCheck(((((-1.0)*x13113))+x13114),-1);
if(!x13115.valid){
continue;
}
CheckValue<IkReal> x13116=IKPowWithIntegerCheck(((((-1.0)*sj3*x13114))+((sj3*x13113))),-1);
if(!x13116.valid){
continue;
}
if( IKabs(x13115.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13116.value)*(((((-1.0)*r00*sj5*x13112))+(((-1.0)*cj5*r01*x13112)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13115.value)+IKsqr(((x13116.value)*(((((-1.0)*r00*sj5*x13112))+(((-1.0)*cj5*r01*x13112))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13115.value, ((x13116.value)*(((((-1.0)*r00*sj5*x13112))+(((-1.0)*cj5*r01*x13112))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13117=IKsin(j4);
IkReal x13118=IKcos(j4);
IkReal x13119=(sj1*sj2);
IkReal x13120=(cj5*sj3);
IkReal x13121=(r11*sj5);
IkReal x13122=(cj3*cj5);
IkReal x13123=((1.0)*cj1);
IkReal x13124=(cj3*sj5);
IkReal x13125=(sj3*sj5);
IkReal x13126=(cj2*sj1);
IkReal x13127=(r01*sj5);
IkReal x13128=((1.0)*sj3);
IkReal x13129=(cj2*x13123);
IkReal x13130=(r10*x13118);
IkReal x13131=(r22*x13117);
IkReal x13132=(cj3*x13118);
IkReal x13133=((1.0)*cj5*x13117);
evalcond[0]=((-1.0)*r22*x13118);
evalcond[1]=(((cj3*x13131))+((cj1*sj2))+x13126);
evalcond[2]=(((x13117*x13121))+(((-1.0)*r10*x13133)));
evalcond[3]=((-1.0)+((x13117*x13127))+(((-1.0)*r00*x13133)));
evalcond[4]=((((-1.0)*x13129))+x13119+(((-1.0)*x13128*x13131)));
evalcond[5]=(((r00*x13118*x13120))+(((-1.0)*r01*x13118*x13125))+((r00*x13124))+((r01*x13122)));
evalcond[6]=(((r01*x13118*x13124))+(((-1.0)*r00*x13118*x13122))+((r00*x13125))+((r01*x13120)));
evalcond[7]=(((r10*x13125))+((r11*x13120))+((x13121*x13132))+(((-1.0)*x13129))+(((-1.0)*x13122*x13130))+x13119);
evalcond[8]=((((-1.0)*x13118*x13121*x13128))+((r10*x13124))+(((-1.0)*sj2*x13123))+((r11*x13122))+((x13120*x13130))+(((-1.0)*x13126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13134=cj5*cj5;
IkReal x13135=(cj3*r20);
IkReal x13136=(r21*sj3);
IkReal x13137=((1.0)*cj3);
IkReal x13138=(r01*r21);
IkReal x13139=(r01*sj3);
IkReal x13140=(r00*sj5);
IkReal x13141=(cj5*r01*sj5);
IkReal x13142=((1.0)*x13134);
CheckValue<IkReal> x13143 = IKatan2WithCheck(IkReal((((r22*sj3*x13140))+((cj5*r22*x13139)))),IkReal(((((-1.0)*cj5*r20*sj3*x13140))+((r00*x13136))+(((-1.0)*r00*x13136*x13142))+((x13136*x13141))+(((-1.0)*r20*x13139*x13142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13143.valid){
continue;
}
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13135*x13142))+(((-1.0)*x13137*x13138))+((cj3*x13134*x13138))+(((-1.0)*r02*r22*x13137))+((x13135*x13141))+((cj3*cj5*r21*x13140)))),-1);
if(!x13144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13143.value)+(((1.5707963267949)*(x13144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13145=IKsin(j4);
IkReal x13146=IKcos(j4);
IkReal x13147=(sj1*sj2);
IkReal x13148=(r11*sj5);
IkReal x13149=(cj5*r10);
IkReal x13150=(cj5*r01);
IkReal x13151=(cj5*r00);
IkReal x13152=((1.0)*cj1);
IkReal x13153=(cj3*sj5);
IkReal x13154=(r21*sj5);
IkReal x13155=(cj5*sj3);
IkReal x13156=(sj3*sj5);
IkReal x13157=(cj2*sj1);
IkReal x13158=(r01*sj5);
IkReal x13159=(cj3*cj5);
IkReal x13160=(cj5*r20);
IkReal x13161=(cj2*x13152);
IkReal x13162=((1.0)*x13146);
IkReal x13163=((1.0)*x13145);
IkReal x13164=(cj3*x13146);
IkReal x13165=(sj3*x13146);
IkReal x13166=(cj3*x13145);
evalcond[0]=((((-1.0)*x13160*x13163))+(((-1.0)*r22*x13162))+((x13145*x13154)));
evalcond[1]=((((-1.0)*r12*x13162))+(((-1.0)*x13149*x13163))+((x13145*x13148)));
evalcond[2]=((-1.0)+(((-1.0)*x13151*x13163))+((x13145*x13158))+(((-1.0)*r02*x13162)));
evalcond[3]=((((-1.0)*cj3*x13151*x13162))+((sj3*x13150))+((r02*x13166))+((r00*x13156))+((r01*x13146*x13153)));
evalcond[4]=(((x13151*x13165))+(((-1.0)*r01*x13156*x13162))+((cj3*x13150))+(((-1.0)*r02*sj3*x13163))+((r00*x13153)));
evalcond[5]=(((r21*x13155))+((r20*x13156))+((cj1*sj2))+((r22*x13166))+((r21*x13146*x13153))+x13157+(((-1.0)*r20*x13159*x13162)));
evalcond[6]=((((-1.0)*x13161))+((x13148*x13164))+((r11*x13155))+((r10*x13156))+x13147+((r12*x13166))+(((-1.0)*cj3*x13149*x13162)));
evalcond[7]=((((-1.0)*r22*sj3*x13163))+((r21*x13159))+((r20*x13153))+(((-1.0)*sj3*x13154*x13162))+(((-1.0)*x13161))+x13147+((r20*x13146*x13155)));
evalcond[8]=(((x13149*x13165))+(((-1.0)*sj2*x13152))+((r11*x13159))+(((-1.0)*r12*sj3*x13163))+((r10*x13153))+(((-1.0)*x13157))+(((-1.0)*sj3*x13148*x13162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13167=((1.0)*cj5);
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13167))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
CheckValue<IkReal> x13169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13167)))),-1);
if(!x13169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13168.value)+(((1.5707963267949)*(x13169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13170=IKsin(j4);
IkReal x13171=IKcos(j4);
IkReal x13172=(sj1*sj2);
IkReal x13173=(r11*sj5);
IkReal x13174=(cj5*r10);
IkReal x13175=(cj5*r01);
IkReal x13176=(cj5*r00);
IkReal x13177=((1.0)*cj1);
IkReal x13178=(cj3*sj5);
IkReal x13179=(r21*sj5);
IkReal x13180=(cj5*sj3);
IkReal x13181=(sj3*sj5);
IkReal x13182=(cj2*sj1);
IkReal x13183=(r01*sj5);
IkReal x13184=(cj3*cj5);
IkReal x13185=(cj5*r20);
IkReal x13186=(cj2*x13177);
IkReal x13187=((1.0)*x13171);
IkReal x13188=((1.0)*x13170);
IkReal x13189=(cj3*x13171);
IkReal x13190=(sj3*x13171);
IkReal x13191=(cj3*x13170);
evalcond[0]=((((-1.0)*r22*x13187))+(((-1.0)*x13185*x13188))+((x13170*x13179)));
evalcond[1]=((((-1.0)*r12*x13187))+(((-1.0)*x13174*x13188))+((x13170*x13173)));
evalcond[2]=((-1.0)+((x13170*x13183))+(((-1.0)*r02*x13187))+(((-1.0)*x13176*x13188)));
evalcond[3]=(((r02*x13191))+((sj3*x13175))+(((-1.0)*cj3*x13176*x13187))+((r01*x13171*x13178))+((r00*x13181)));
evalcond[4]=(((r00*x13178))+((cj3*x13175))+((x13176*x13190))+(((-1.0)*r02*sj3*x13188))+(((-1.0)*r01*x13181*x13187)));
evalcond[5]=(((r21*x13180))+((cj1*sj2))+((r20*x13181))+((r21*x13171*x13178))+x13182+(((-1.0)*r20*x13184*x13187))+((r22*x13191)));
evalcond[6]=((((-1.0)*x13186))+((r12*x13191))+((r11*x13180))+(((-1.0)*cj3*x13174*x13187))+((r10*x13181))+((x13173*x13189))+x13172);
evalcond[7]=((((-1.0)*sj3*x13179*x13187))+(((-1.0)*x13186))+((r20*x13178))+((r21*x13184))+(((-1.0)*r22*sj3*x13188))+((r20*x13171*x13180))+x13172);
evalcond[8]=((((-1.0)*x13182))+((r11*x13184))+(((-1.0)*sj2*x13177))+((x13174*x13190))+(((-1.0)*sj3*x13173*x13187))+((r10*x13178))+(((-1.0)*r12*sj3*x13188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13192=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13192.valid){
continue;
}
CheckValue<IkReal> x13193 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13192.value)))+(x13193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13194=IKsin(j4);
IkReal x13195=IKcos(j4);
IkReal x13196=(sj1*sj2);
IkReal x13197=(r11*sj5);
IkReal x13198=(cj5*r10);
IkReal x13199=(cj5*r01);
IkReal x13200=(cj5*r00);
IkReal x13201=((1.0)*cj1);
IkReal x13202=(cj3*sj5);
IkReal x13203=(r21*sj5);
IkReal x13204=(cj5*sj3);
IkReal x13205=(sj3*sj5);
IkReal x13206=(cj2*sj1);
IkReal x13207=(r01*sj5);
IkReal x13208=(cj3*cj5);
IkReal x13209=(cj5*r20);
IkReal x13210=(cj2*x13201);
IkReal x13211=((1.0)*x13195);
IkReal x13212=((1.0)*x13194);
IkReal x13213=(cj3*x13195);
IkReal x13214=(sj3*x13195);
IkReal x13215=(cj3*x13194);
evalcond[0]=(((x13194*x13203))+(((-1.0)*r22*x13211))+(((-1.0)*x13209*x13212)));
evalcond[1]=(((x13194*x13197))+(((-1.0)*x13198*x13212))+(((-1.0)*r12*x13211)));
evalcond[2]=((-1.0)+(((-1.0)*x13200*x13212))+((x13194*x13207))+(((-1.0)*r02*x13211)));
evalcond[3]=(((r00*x13205))+(((-1.0)*cj3*x13200*x13211))+((r02*x13215))+((r01*x13195*x13202))+((sj3*x13199)));
evalcond[4]=(((r00*x13202))+(((-1.0)*r01*x13205*x13211))+(((-1.0)*r02*sj3*x13212))+((cj3*x13199))+((x13200*x13214)));
evalcond[5]=(((r21*x13195*x13202))+(((-1.0)*r20*x13208*x13211))+((cj1*sj2))+((r21*x13204))+x13206+((r22*x13215))+((r20*x13205)));
evalcond[6]=(((r12*x13215))+((r10*x13205))+(((-1.0)*x13210))+(((-1.0)*cj3*x13198*x13211))+((r11*x13204))+((x13197*x13213))+x13196);
evalcond[7]=((((-1.0)*x13210))+(((-1.0)*r22*sj3*x13212))+((r21*x13208))+x13196+((r20*x13195*x13204))+(((-1.0)*sj3*x13203*x13211))+((r20*x13202)));
evalcond[8]=((((-1.0)*sj2*x13201))+((r10*x13202))+((r11*x13208))+(((-1.0)*sj3*x13197*x13211))+((x13198*x13214))+(((-1.0)*r12*sj3*x13212))+(((-1.0)*x13206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13217 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13217)==0){
continue;
}
IkReal x13216=pow(x13217,-0.5);
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13218.value));
IkReal gconst13=((-1.0)*r11*x13216);
IkReal gconst14=(r10*x13216);
CheckValue<IkReal> x13219 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13219.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13219.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13222 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13222.valid){
continue;
}
IkReal x13220=((-1.0)*(x13222.value));
IkReal x13221=x13216;
sj5=gconst13;
cj5=gconst14;
j5=x13220;
IkReal gconst12=x13220;
IkReal gconst13=((-1.0)*r11*x13221);
IkReal gconst14=(r10*x13221);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13223=((1.0)*gconst14);
CheckValue<IkReal> x13224 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x13223))+((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*r10*sj0*x13223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13224.valid){
continue;
}
CheckValue<IkReal> x13225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13223))+(((-1.0)*gconst13*r20)))),-1);
if(!x13225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13224.value)+(((1.5707963267949)*(x13225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13226=IKsin(j4);
IkReal x13227=IKcos(j4);
IkReal x13228=((1.0)*r22);
IkReal x13229=((1.0)*r12);
IkReal x13230=(cj2*sj0);
IkReal x13231=(gconst13*sj3);
IkReal x13232=(gconst13*r01);
IkReal x13233=(sj1*sj2);
IkReal x13234=(gconst14*sj3);
IkReal x13235=(cj1*cj2);
IkReal x13236=((1.0)*gconst14);
IkReal x13237=(cj3*gconst13);
IkReal x13238=(cj3*gconst14);
IkReal x13239=(cj2*sj1);
IkReal x13240=((1.0)*r02);
IkReal x13241=(cj1*sj2);
IkReal x13242=((1.0)*cj0);
IkReal x13243=(sj3*x13226);
IkReal x13244=(cj3*x13227);
IkReal x13245=(cj3*x13226);
IkReal x13246=(gconst13*x13226);
IkReal x13247=((1.0)*x13227);
evalcond[0]=((((-1.0)*x13227*x13228))+((r21*x13246))+(((-1.0)*r20*x13226*x13236)));
evalcond[1]=(sj0+(((-1.0)*r00*x13226*x13236))+(((-1.0)*x13227*x13240))+((x13226*x13232)));
evalcond[2]=((((-1.0)*x13227*x13229))+((r11*x13246))+(((-1.0)*r10*x13226*x13236))+(((-1.0)*x13242)));
evalcond[3]=(((r20*x13231))+((r21*x13227*x13237))+(((-1.0)*r20*x13236*x13244))+((r22*x13245))+((r21*x13234))+x13239+x13241);
evalcond[4]=(((r20*x13237))+(((-1.0)*x13228*x13243))+((r21*x13238))+((r20*x13227*x13234))+(((-1.0)*r21*x13231*x13247))+x13233+(((-1.0)*x13235)));
evalcond[5]=(((r01*x13238))+(((-1.0)*r01*x13231*x13247))+((r00*x13227*x13234))+((cj0*x13239))+((cj0*x13241))+(((-1.0)*x13240*x13243))+((r00*x13237)));
evalcond[6]=(((r01*x13234))+(((-1.0)*x13233*x13242))+((r02*x13245))+((x13232*x13244))+((cj0*x13235))+(((-1.0)*r00*x13236*x13244))+((r00*x13231)));
evalcond[7]=(((r10*x13237))+((sj0*x13241))+(((-1.0)*r11*x13231*x13247))+((r10*x13227*x13234))+((r11*x13238))+(((-1.0)*x13229*x13243))+((sj1*x13230)));
evalcond[8]=(((r11*x13227*x13237))+((r10*x13231))+((cj1*x13230))+((r11*x13234))+(((-1.0)*r10*x13236*x13244))+((r12*x13245))+(((-1.0)*sj0*x13233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
CheckValue<IkReal> x13249=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x13249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13248.value)+(((1.5707963267949)*(x13249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13250=IKsin(j4);
IkReal x13251=IKcos(j4);
IkReal x13252=((1.0)*r22);
IkReal x13253=((1.0)*r12);
IkReal x13254=(cj2*sj0);
IkReal x13255=(gconst13*sj3);
IkReal x13256=(gconst13*r01);
IkReal x13257=(sj1*sj2);
IkReal x13258=(gconst14*sj3);
IkReal x13259=(cj1*cj2);
IkReal x13260=((1.0)*gconst14);
IkReal x13261=(cj3*gconst13);
IkReal x13262=(cj3*gconst14);
IkReal x13263=(cj2*sj1);
IkReal x13264=((1.0)*r02);
IkReal x13265=(cj1*sj2);
IkReal x13266=((1.0)*cj0);
IkReal x13267=(sj3*x13250);
IkReal x13268=(cj3*x13251);
IkReal x13269=(cj3*x13250);
IkReal x13270=(gconst13*x13250);
IkReal x13271=((1.0)*x13251);
evalcond[0]=(((r21*x13270))+(((-1.0)*x13251*x13252))+(((-1.0)*r20*x13250*x13260)));
evalcond[1]=(sj0+((x13250*x13256))+(((-1.0)*x13251*x13264))+(((-1.0)*r00*x13250*x13260)));
evalcond[2]=(((r11*x13270))+(((-1.0)*x13266))+(((-1.0)*r10*x13250*x13260))+(((-1.0)*x13251*x13253)));
evalcond[3]=(((r21*x13258))+((r21*x13251*x13261))+(((-1.0)*r20*x13260*x13268))+((r22*x13269))+x13265+x13263+((r20*x13255)));
evalcond[4]=((((-1.0)*x13252*x13267))+(((-1.0)*x13259))+((r21*x13262))+((r20*x13261))+((r20*x13251*x13258))+(((-1.0)*r21*x13255*x13271))+x13257);
evalcond[5]=(((r00*x13251*x13258))+((r00*x13261))+((r01*x13262))+(((-1.0)*r01*x13255*x13271))+(((-1.0)*x13264*x13267))+((cj0*x13265))+((cj0*x13263)));
evalcond[6]=((((-1.0)*r00*x13260*x13268))+((r01*x13258))+((r00*x13255))+((r02*x13269))+((cj0*x13259))+((x13256*x13268))+(((-1.0)*x13257*x13266)));
evalcond[7]=(((r11*x13262))+(((-1.0)*x13253*x13267))+(((-1.0)*r11*x13255*x13271))+((sj1*x13254))+((r10*x13261))+((sj0*x13265))+((r10*x13251*x13258)));
evalcond[8]=((((-1.0)*r10*x13260*x13268))+((r10*x13255))+((r12*x13269))+(((-1.0)*sj0*x13257))+((cj1*x13254))+((r11*x13258))+((r11*x13251*x13261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13273 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13273)==0){
continue;
}
IkReal x13272=pow(x13273,-0.5);
CheckValue<IkReal> x13274 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13274.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13274.value))));
IkReal gconst16=((1.0)*r11*x13272);
IkReal gconst17=((-1.0)*r10*x13272);
CheckValue<IkReal> x13275 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13275.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13275.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13278 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13278.valid){
continue;
}
IkReal x13276=((1.0)*(x13278.value));
IkReal x13277=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13276)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13276)));
IkReal gconst16=((1.0)*r11*x13277);
IkReal gconst17=((-1.0)*r10*x13277);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13281 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13281.valid){
continue;
}
IkReal x13279=((1.0)*(x13281.value));
IkReal x13280=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13279)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13279)));
IkReal gconst16=((1.0)*r11*x13280);
IkReal gconst17=((-1.0)*r10*x13280);
IkReal x13282=r12*r12;
IkReal x13283=(cj0*r02);
IkReal x13284=x13272;
IkReal x13285=(sj0*x13284);
j4eval[0]=((IKabs((((r12*sj0))+x13283)))+(IKabs((((r12*x13283*x13284))+(((-1.0)*x13285))+((x13282*x13285))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
IkReal x13286=((1.0)*(x13288.value));
IkReal x13287=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13286)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13286)));
IkReal gconst16=((1.0)*r11*x13287);
IkReal gconst17=((-1.0)*r10*x13287);
IkReal x13289=((1.0)*cj3);
CheckValue<IkReal> x13294=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13294.valid){
continue;
}
IkReal x13290=x13294.value;
IkReal x13291=(cj3*x13290);
IkReal x13292=(x13289*x13290);
IkReal x13293=((((-1.0)*x13289*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x13291))+(((-1.0)*x13292*(r10*r10)*(r20*r20)))+(((-1.0)*x13292*(r11*r11)*(r21*r21))));
j4eval[0]=x13293;
j4eval[1]=IKsign(x13293);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
IkReal x13295=((1.0)*(x13297.value));
IkReal x13296=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13295)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13295)));
IkReal gconst16=((1.0)*r11*x13296);
IkReal gconst17=((-1.0)*r10*x13296);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13300 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13300.valid){
continue;
}
IkReal x13298=((1.0)*(x13300.value));
IkReal x13299=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13298)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13298)));
IkReal gconst16=((1.0)*r11*x13299);
IkReal gconst17=((-1.0)*r10*x13299);
IkReal x13301=r12*r12;
IkReal x13302=(cj0*r02);
IkReal x13303=x13272;
IkReal x13304=(sj0*x13303);
j4eval[0]=((IKabs((((r12*x13302*x13303))+((x13301*x13304))+(((-1.0)*x13304)))))+(IKabs((((r12*sj0))+x13302))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13307 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13307.valid){
continue;
}
IkReal x13305=((1.0)*(x13307.value));
IkReal x13306=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13305)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13305)));
IkReal gconst16=((1.0)*r11*x13306);
IkReal gconst17=((-1.0)*r10*x13306);
IkReal x13308=r12*r12;
IkReal x13309=(sj1*sj2);
IkReal x13310=((1.0)*cj1*cj2);
CheckValue<IkReal> x13314=IKPowWithIntegerCheck(((-1.0)+x13308),-1);
if(!x13314.valid){
continue;
}
IkReal x13311=x13314.value;
if((((1.0)+(((-1.0)*x13308)))) < -0.00001)
continue;
IkReal x13312=IKsqrt(((1.0)+(((-1.0)*x13308))));
IkReal x13313=(r12*r22*x13311*x13312);
j4eval[0]=((IKabs((((r22*x13309))+(((-1.0)*r22*x13310)))))+(IKabs((((x13309*x13313))+(((-1.0)*x13310*x13313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13315=(gconst17*r20);
IkReal x13316=(cj1*cj2);
IkReal x13317=(sj1*sj2);
IkReal x13318=(gconst16*r21);
CheckValue<IkReal> x13319=IKPowWithIntegerCheck(IKsign(((x13315*x13315)+(((-2.0)*x13315*x13318))+(r22*r22)+(x13318*x13318))),-1);
if(!x13319.valid){
continue;
}
CheckValue<IkReal> x13320 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13316))+((r22*x13317)))),IkReal((((x13317*x13318))+(((-1.0)*x13315*x13317))+(((-1.0)*x13316*x13318))+((x13315*x13316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13319.value)))+(x13320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13321=IKsin(j4);
IkReal x13322=IKcos(j4);
IkReal x13323=(gconst16*r01);
IkReal x13324=(cj2*sj1);
IkReal x13325=(gconst16*r21);
IkReal x13326=(gconst16*r11);
IkReal x13327=(cj1*sj2);
IkReal x13328=((1.0)*x13322);
IkReal x13329=(gconst17*x13322);
IkReal x13330=((1.0)*x13321);
evalcond[0]=((((-1.0)*r22*x13328))+(((-1.0)*gconst17*r20*x13330))+((x13321*x13325)));
evalcond[1]=((((-1.0)*r02*x13328))+sj0+((x13321*x13323))+(((-1.0)*gconst17*r00*x13330)));
evalcond[2]=((((-1.0)*r12*x13328))+(((-1.0)*gconst17*r10*x13330))+((x13321*x13326))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13330))+(((-1.0)*cj1*cj2))+((r20*x13329))+((sj1*sj2))+(((-1.0)*x13325*x13328)));
evalcond[4]=(((cj0*x13327))+((cj0*x13324))+(((-1.0)*x13323*x13328))+((r00*x13329))+(((-1.0)*r02*x13330)));
evalcond[5]=((((-1.0)*r12*x13330))+((r10*x13329))+(((-1.0)*x13326*x13328))+((sj0*x13327))+((sj0*x13324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13331=((1.0)*gconst17);
CheckValue<IkReal> x13332 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13331))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13332.valid){
continue;
}
CheckValue<IkReal> x13333=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13331)))),-1);
if(!x13333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13332.value)+(((1.5707963267949)*(x13333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13334=IKsin(j4);
IkReal x13335=IKcos(j4);
IkReal x13336=(gconst16*r01);
IkReal x13337=(cj2*sj1);
IkReal x13338=(gconst16*r21);
IkReal x13339=(gconst16*r11);
IkReal x13340=(cj1*sj2);
IkReal x13341=((1.0)*x13335);
IkReal x13342=(gconst17*x13335);
IkReal x13343=((1.0)*x13334);
evalcond[0]=((((-1.0)*gconst17*r20*x13343))+((x13334*x13338))+(((-1.0)*r22*x13341)));
evalcond[1]=(sj0+(((-1.0)*gconst17*r00*x13343))+(((-1.0)*r02*x13341))+((x13334*x13336)));
evalcond[2]=((((-1.0)*gconst17*r10*x13343))+((x13334*x13339))+(((-1.0)*r12*x13341))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13338*x13341))+((r20*x13342))+(((-1.0)*r22*x13343)));
evalcond[4]=(((cj0*x13340))+(((-1.0)*r02*x13343))+(((-1.0)*x13336*x13341))+((r00*x13342))+((cj0*x13337)));
evalcond[5]=(((r10*x13342))+(((-1.0)*r12*x13343))+((sj0*x13340))+(((-1.0)*x13339*x13341))+((sj0*x13337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13344=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13344.valid){
continue;
}
CheckValue<IkReal> x13345 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13344.value)))+(x13345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13346=IKsin(j4);
IkReal x13347=IKcos(j4);
IkReal x13348=(gconst16*r01);
IkReal x13349=(cj2*sj1);
IkReal x13350=(gconst16*r21);
IkReal x13351=(gconst16*r11);
IkReal x13352=(cj1*sj2);
IkReal x13353=((1.0)*x13347);
IkReal x13354=(gconst17*x13347);
IkReal x13355=((1.0)*x13346);
evalcond[0]=((((-1.0)*r22*x13353))+(((-1.0)*gconst17*r20*x13355))+((x13346*x13350)));
evalcond[1]=((((-1.0)*r02*x13353))+sj0+(((-1.0)*gconst17*r00*x13355))+((x13346*x13348)));
evalcond[2]=((((-1.0)*r12*x13353))+((x13346*x13351))+(((-1.0)*gconst17*r10*x13355))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13355))+((r20*x13354))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13350*x13353)));
evalcond[4]=(((cj0*x13352))+(((-1.0)*r02*x13355))+((cj0*x13349))+((r00*x13354))+(((-1.0)*x13348*x13353)));
evalcond[5]=((((-1.0)*r12*x13355))+(((-1.0)*x13351*x13353))+((r10*x13354))+((sj0*x13349))+((sj0*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13358 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13358.valid){
continue;
}
IkReal x13356=((1.0)*(x13358.value));
IkReal x13357=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13356)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13356)));
IkReal gconst16=((1.0)*r11*x13357);
IkReal gconst17=((-1.0)*r10*x13357);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
IkReal x13359=((1.0)*(x13361.value));
IkReal x13360=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13359)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13359)));
IkReal gconst16=((1.0)*r11*x13360);
IkReal gconst17=((-1.0)*r10*x13360);
IkReal x13362=r12*r12;
IkReal x13363=(cj0*r02);
IkReal x13364=x13272;
IkReal x13365=(sj0*x13364);
j4eval[0]=((IKabs(((((-1.0)*x13365))+((r12*x13363*x13364))+((x13362*x13365)))))+(IKabs((((r12*sj0))+x13363))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13368 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13368.valid){
continue;
}
IkReal x13366=((1.0)*(x13368.value));
IkReal x13367=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13366)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13366)));
IkReal gconst16=((1.0)*r11*x13367);
IkReal gconst17=((-1.0)*r10*x13367);
IkReal x13369=r12*r12;
IkReal x13370=(sj1*sj2);
IkReal x13371=((1.0)+(((-1.0)*x13369)));
IkReal x13372=((1.0)*cj1*cj2);
CheckValue<IkReal> x13379=IKPowWithIntegerCheck(x13371,-1);
if(!x13379.valid){
continue;
}
IkReal x13373=x13379.value;
CheckValue<IkReal> x13380=IKPowWithIntegerCheck(((-1.0)+x13369),-1);
if(!x13380.valid){
continue;
}
IkReal x13374=x13380.value;
IkReal x13375=((1.0)*x13373);
if((x13371) < -0.00001)
continue;
IkReal x13376=IKsqrt(x13371);
IkReal x13377=(r12*r22*x13374*x13376);
IkReal x13378=((((-2.0)*r10*r11*r20*r21*x13373))+(((-1.0)*x13375*(r10*r10)*(r20*r20)))+(((-1.0)*x13375*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x13378;
j4eval[1]=((IKabs((((x13370*x13377))+(((-1.0)*x13372*x13377)))))+(IKabs(((((-1.0)*r22*x13372))+((r22*x13370))))));
j4eval[2]=IKsign(x13378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13381=(gconst17*r20);
IkReal x13382=(cj1*cj2);
IkReal x13383=(sj1*sj2);
IkReal x13384=(gconst16*r21);
CheckValue<IkReal> x13385 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13382))+((r22*x13383)))),IkReal(((((-1.0)*x13382*x13384))+((x13383*x13384))+((x13381*x13382))+(((-1.0)*x13381*x13383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13385.valid){
continue;
}
CheckValue<IkReal> x13386=IKPowWithIntegerCheck(IKsign(((((2.0)*x13381*x13384))+(((-1.0)*(x13381*x13381)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x13384*x13384))))),-1);
if(!x13386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13385.value)+(((1.5707963267949)*(x13386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13387=IKsin(j4);
IkReal x13388=IKcos(j4);
IkReal x13389=(cj2*sj1);
IkReal x13390=(gconst17*r20);
IkReal x13391=(gconst17*r00);
IkReal x13392=(gconst17*r10);
IkReal x13393=(cj1*sj2);
IkReal x13394=((1.0)*x13388);
IkReal x13395=(gconst16*x13387);
IkReal x13396=((1.0)*x13387);
IkReal x13397=(gconst16*x13388);
evalcond[0]=(((r21*x13395))+(((-1.0)*r22*x13394))+(((-1.0)*x13390*x13396)));
evalcond[1]=(sj0+((r01*x13395))+(((-1.0)*x13391*x13396))+(((-1.0)*r02*x13394)));
evalcond[2]=(((r11*x13395))+(((-1.0)*r12*x13394))+(((-1.0)*cj0))+(((-1.0)*x13392*x13396)));
evalcond[3]=(((r21*x13397))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13390*x13394))+((r22*x13387)));
evalcond[4]=(((r01*x13397))+(((-1.0)*x13391*x13394))+((cj0*x13389))+((r02*x13387))+((cj0*x13393)));
evalcond[5]=(((r11*x13397))+((sj0*x13389))+((sj0*x13393))+((r12*x13387))+(((-1.0)*x13392*x13394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13398=((1.0)*gconst17);
CheckValue<IkReal> x13399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13398)))),-1);
if(!x13399.valid){
continue;
}
CheckValue<IkReal> x13400 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13398))+((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13398))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13399.value)))+(x13400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13401=IKsin(j4);
IkReal x13402=IKcos(j4);
IkReal x13403=(cj2*sj1);
IkReal x13404=(gconst17*r20);
IkReal x13405=(gconst17*r00);
IkReal x13406=(gconst17*r10);
IkReal x13407=(cj1*sj2);
IkReal x13408=((1.0)*x13402);
IkReal x13409=(gconst16*x13401);
IkReal x13410=((1.0)*x13401);
IkReal x13411=(gconst16*x13402);
evalcond[0]=(((r21*x13409))+(((-1.0)*x13404*x13410))+(((-1.0)*r22*x13408)));
evalcond[1]=((((-1.0)*r02*x13408))+((r01*x13409))+sj0+(((-1.0)*x13405*x13410)));
evalcond[2]=(((r11*x13409))+(((-1.0)*x13406*x13410))+(((-1.0)*r12*x13408))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13401))+((r21*x13411))+(((-1.0)*x13404*x13408)));
evalcond[4]=((((-1.0)*x13405*x13408))+((cj0*x13403))+((cj0*x13407))+((r02*x13401))+((r01*x13411)));
evalcond[5]=((((-1.0)*x13406*x13408))+((r12*x13401))+((sj0*x13403))+((sj0*x13407))+((r11*x13411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13412=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13412.value)))+(x13413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13414=IKsin(j4);
IkReal x13415=IKcos(j4);
IkReal x13416=(cj2*sj1);
IkReal x13417=(gconst17*r20);
IkReal x13418=(gconst17*r00);
IkReal x13419=(gconst17*r10);
IkReal x13420=(cj1*sj2);
IkReal x13421=((1.0)*x13415);
IkReal x13422=(gconst16*x13414);
IkReal x13423=((1.0)*x13414);
IkReal x13424=(gconst16*x13415);
evalcond[0]=((((-1.0)*r22*x13421))+((r21*x13422))+(((-1.0)*x13417*x13423)));
evalcond[1]=(sj0+(((-1.0)*r02*x13421))+(((-1.0)*x13418*x13423))+((r01*x13422)));
evalcond[2]=((((-1.0)*r12*x13421))+((r11*x13422))+(((-1.0)*x13419*x13423))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x13414))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x13424))+(((-1.0)*x13417*x13421)));
evalcond[4]=(((r02*x13414))+((cj0*x13416))+((cj0*x13420))+(((-1.0)*x13418*x13421))+((r01*x13424)));
evalcond[5]=(((sj0*x13420))+((r11*x13424))+(((-1.0)*x13419*x13421))+((sj0*x13416))+((r12*x13414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13427 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13427.valid){
continue;
}
IkReal x13425=((1.0)*(x13427.value));
IkReal x13426=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13425)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13425)));
IkReal gconst16=((1.0)*r11*x13426);
IkReal gconst17=((-1.0)*r10*x13426);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13428=gconst16*gconst16;
IkReal x13429=gconst17*gconst17;
IkReal x13430=(cj3*r00);
IkReal x13431=(cj3*r01);
IkReal x13432=((1.0)*r20);
IkReal x13433=(gconst16*gconst17);
IkReal x13434=(r00*sj3);
IkReal x13435=(r01*sj3);
IkReal x13436=(r21*x13428);
CheckValue<IkReal> x13437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13433*x13434))+((x13435*x13436))+((r02*r22*sj3))+((r20*x13429*x13434))+(((-1.0)*x13432*x13433*x13435)))),-1);
if(!x13437.valid){
continue;
}
CheckValue<IkReal> x13438 = IKatan2WithCheck(IkReal((((gconst16*r22*x13430))+((gconst17*r22*x13431)))),IkReal(((((-1.0)*x13430*x13432*x13433))+(((-1.0)*x13429*x13431*x13432))+((x13430*x13436))+((r21*x13431*x13433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13437.value)))+(x13438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13439=IKsin(j4);
IkReal x13440=IKcos(j4);
IkReal x13441=(sj1*sj2);
IkReal x13442=(cj3*gconst17);
IkReal x13443=(gconst16*r21);
IkReal x13444=(gconst16*r20);
IkReal x13445=(gconst17*r20);
IkReal x13446=(gconst17*sj3);
IkReal x13447=(cj3*gconst16);
IkReal x13448=(cj2*sj1);
IkReal x13449=((1.0)*cj1);
IkReal x13450=(gconst16*sj3);
IkReal x13451=(cj2*x13449);
IkReal x13452=((1.0)*x13440);
IkReal x13453=(gconst16*x13439);
IkReal x13454=((1.0)*x13439);
IkReal x13455=(cj3*x13440);
IkReal x13456=(cj3*x13439);
evalcond[0]=((((-1.0)*r22*x13452))+((x13439*x13443))+(((-1.0)*x13445*x13454)));
evalcond[1]=(((r11*x13453))+(((-1.0)*gconst17*r10*x13454))+(((-1.0)*r12*x13452)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13452))+((r01*x13453))+(((-1.0)*gconst17*r00*x13454)));
evalcond[3]=((((-1.0)*r00*x13442*x13452))+((r01*x13440*x13447))+((r01*x13446))+((r02*x13456))+((r00*x13450)));
evalcond[4]=((((-1.0)*r02*sj3*x13454))+(((-1.0)*r01*x13450*x13452))+((r00*x13447))+((r01*x13442))+((r00*x13440*x13446)));
evalcond[5]=(x13448+(((-1.0)*r20*x13442*x13452))+((cj1*sj2))+((sj3*x13444))+((r22*x13456))+((x13443*x13455))+((r21*x13446)));
evalcond[6]=(x13441+((r10*x13450))+((r12*x13456))+(((-1.0)*r10*x13442*x13452))+(((-1.0)*x13451))+((r11*x13446))+((r11*x13440*x13447)));
evalcond[7]=(x13441+(((-1.0)*sj3*x13443*x13452))+(((-1.0)*x13451))+((cj3*x13444))+((sj3*x13440*x13445))+((r21*x13442))+(((-1.0)*r22*sj3*x13454)));
evalcond[8]=(((r10*x13440*x13446))+(((-1.0)*r11*x13450*x13452))+(((-1.0)*r12*sj3*x13454))+((r10*x13447))+((r11*x13442))+(((-1.0)*x13448))+(((-1.0)*sj2*x13449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13457 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst17*r10))+((gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13457.valid){
continue;
}
CheckValue<IkReal> x13458=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13457.value)+(((1.5707963267949)*(x13458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13459=IKsin(j4);
IkReal x13460=IKcos(j4);
IkReal x13461=(sj1*sj2);
IkReal x13462=(cj3*gconst17);
IkReal x13463=(gconst16*r21);
IkReal x13464=(gconst16*r20);
IkReal x13465=(gconst17*r20);
IkReal x13466=(gconst17*sj3);
IkReal x13467=(cj3*gconst16);
IkReal x13468=(cj2*sj1);
IkReal x13469=((1.0)*cj1);
IkReal x13470=(gconst16*sj3);
IkReal x13471=(cj2*x13469);
IkReal x13472=((1.0)*x13460);
IkReal x13473=(gconst16*x13459);
IkReal x13474=((1.0)*x13459);
IkReal x13475=(cj3*x13460);
IkReal x13476=(cj3*x13459);
evalcond[0]=((((-1.0)*x13465*x13474))+((x13459*x13463))+(((-1.0)*r22*x13472)));
evalcond[1]=(((r11*x13473))+(((-1.0)*gconst17*r10*x13474))+(((-1.0)*r12*x13472)));
evalcond[2]=((-1.0)+((r01*x13473))+(((-1.0)*r02*x13472))+(((-1.0)*gconst17*r00*x13474)));
evalcond[3]=((((-1.0)*r00*x13462*x13472))+((r00*x13470))+((r02*x13476))+((r01*x13460*x13467))+((r01*x13466)));
evalcond[4]=((((-1.0)*r02*sj3*x13474))+((r00*x13460*x13466))+(((-1.0)*r01*x13470*x13472))+((r01*x13462))+((r00*x13467)));
evalcond[5]=(x13468+((r21*x13466))+((x13463*x13475))+((sj3*x13464))+((cj1*sj2))+((r22*x13476))+(((-1.0)*r20*x13462*x13472)));
evalcond[6]=(x13461+((r10*x13470))+((r12*x13476))+((r11*x13460*x13467))+((r11*x13466))+(((-1.0)*x13471))+(((-1.0)*r10*x13462*x13472)));
evalcond[7]=(x13461+(((-1.0)*sj3*x13463*x13472))+((r21*x13462))+(((-1.0)*r22*sj3*x13474))+((sj3*x13460*x13465))+(((-1.0)*x13471))+((cj3*x13464)));
evalcond[8]=(((r10*x13460*x13466))+((r10*x13467))+((r11*x13462))+(((-1.0)*x13468))+(((-1.0)*sj2*x13469))+(((-1.0)*r11*x13470*x13472))+(((-1.0)*r12*sj3*x13474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13479 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13479.valid){
continue;
}
IkReal x13477=((1.0)*(x13479.value));
IkReal x13478=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13477)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13478);
rxp1_1=(px*r21);
rxp1_2=(r11*x13478);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13477)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13482 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13482.valid){
continue;
}
IkReal x13480=((1.0)*(x13482.value));
IkReal x13481=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13480)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13481);
rxp1_1=(px*r21);
rxp1_2=(r11*x13481);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13480)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
IkReal x13483=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r10*r20*x13483))+((r11*r21*x13483)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13486 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13486.valid){
continue;
}
IkReal x13484=((1.0)*(x13486.value));
IkReal x13485=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13484)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13485);
rxp1_1=(px*r21);
rxp1_2=(r11*x13485);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13484)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13488=IKPowWithIntegerCheck(r02,-1);
if(!x13488.valid){
continue;
}
IkReal x13487=x13488.value;
CheckValue<IkReal> x13489=IKPowWithIntegerCheck(sj3,-1);
if(!x13489.valid){
continue;
}
if( IKabs((x13487*(x13489.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13487)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13487*(x13489.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x13487))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13487*(x13489.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x13487));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13490=IKsin(j4);
IkReal x13491=IKcos(j4);
IkReal x13492=((1.0)*sj3);
IkReal x13493=(cj1*cj2);
IkReal x13494=(gconst16*r20);
IkReal x13495=(sj1*sj2);
IkReal x13496=((1.0)*gconst17);
IkReal x13497=(gconst17*sj3);
IkReal x13498=(gconst16*r11);
IkReal x13499=(cj3*r10);
IkReal x13500=(cj2*sj1);
IkReal x13501=(cj3*gconst17);
IkReal x13502=(cj1*sj2);
IkReal x13503=((1.0)*cj0);
IkReal x13504=(r02*x13490);
IkReal x13505=(r20*x13491);
IkReal x13506=(gconst16*r21*x13491);
evalcond[0]=(sj0+(((-1.0)*r02*x13491)));
evalcond[1]=((((-1.0)*r20*x13490*x13496))+((gconst16*r21*x13490)));
evalcond[2]=(((cj0*x13500))+((cj0*x13502))+(((-1.0)*x13492*x13504)));
evalcond[3]=((((-1.0)*x13495*x13503))+((cj0*x13493))+((cj3*x13504)));
evalcond[4]=(((x13490*x13498))+(((-1.0)*r10*x13490*x13496))+(((-1.0)*x13503)));
evalcond[5]=(x13502+x13500+((sj3*x13494))+((cj3*x13506))+((r21*x13497))+(((-1.0)*cj3*x13496*x13505)));
evalcond[6]=(x13495+(((-1.0)*x13493))+((cj3*x13494))+(((-1.0)*x13492*x13506))+((x13497*x13505))+((r21*x13501)));
evalcond[7]=(((gconst16*x13499))+(((-1.0)*x13491*x13492*x13498))+((r10*x13491*x13497))+((r11*x13501))+((sj0*x13500))+((sj0*x13502)));
evalcond[8]=(((cj3*x13491*x13498))+(((-1.0)*sj0*x13495))+((sj0*x13493))+((r11*x13497))+((gconst16*r10*sj3))+(((-1.0)*x13491*x13496*x13499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13507=((1.0)*gconst17);
CheckValue<IkReal> x13508=IKPowWithIntegerCheck(((((-1.0)*r10*x13507))+((gconst16*r11))),-1);
if(!x13508.valid){
continue;
}
CheckValue<IkReal> x13509=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x13507))+((cj3*gconst16*r21))),-1);
if(!x13509.valid){
continue;
}
if( IKabs((cj0*(x13508.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13509.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13507)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13508.value)))+IKsqr(((x13509.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13507))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13508.value)), ((x13509.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x13507))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13510=IKsin(j4);
IkReal x13511=IKcos(j4);
IkReal x13512=((1.0)*sj3);
IkReal x13513=(cj1*cj2);
IkReal x13514=(gconst16*r20);
IkReal x13515=(sj1*sj2);
IkReal x13516=((1.0)*gconst17);
IkReal x13517=(gconst17*sj3);
IkReal x13518=(gconst16*r11);
IkReal x13519=(cj3*r10);
IkReal x13520=(cj2*sj1);
IkReal x13521=(cj3*gconst17);
IkReal x13522=(cj1*sj2);
IkReal x13523=((1.0)*cj0);
IkReal x13524=(r02*x13510);
IkReal x13525=(r20*x13511);
IkReal x13526=(gconst16*r21*x13511);
evalcond[0]=(sj0+(((-1.0)*r02*x13511)));
evalcond[1]=(((gconst16*r21*x13510))+(((-1.0)*r20*x13510*x13516)));
evalcond[2]=(((cj0*x13522))+((cj0*x13520))+(((-1.0)*x13512*x13524)));
evalcond[3]=(((cj0*x13513))+(((-1.0)*x13515*x13523))+((cj3*x13524)));
evalcond[4]=(((x13510*x13518))+(((-1.0)*r10*x13510*x13516))+(((-1.0)*x13523)));
evalcond[5]=(((r21*x13517))+x13520+x13522+(((-1.0)*cj3*x13516*x13525))+((cj3*x13526))+((sj3*x13514)));
evalcond[6]=(((r21*x13521))+x13515+(((-1.0)*x13513))+((cj3*x13514))+((x13517*x13525))+(((-1.0)*x13512*x13526)));
evalcond[7]=(((gconst16*x13519))+(((-1.0)*x13511*x13512*x13518))+((r11*x13521))+((r10*x13511*x13517))+((sj0*x13522))+((sj0*x13520)));
evalcond[8]=(((cj3*x13511*x13518))+(((-1.0)*sj0*x13515))+((r11*x13517))+(((-1.0)*x13511*x13516*x13519))+((sj0*x13513))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13527=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10))+((gconst16*r11))),-1);
if(!x13527.valid){
continue;
}
CheckValue<IkReal> x13528=IKPowWithIntegerCheck(r02,-1);
if(!x13528.valid){
continue;
}
if( IKabs((cj0*(x13527.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x13528.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13527.value)))+IKsqr((sj0*(x13528.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13527.value)), (sj0*(x13528.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13529=IKsin(j4);
IkReal x13530=IKcos(j4);
IkReal x13531=((1.0)*sj3);
IkReal x13532=(cj1*cj2);
IkReal x13533=(gconst16*r20);
IkReal x13534=(sj1*sj2);
IkReal x13535=((1.0)*gconst17);
IkReal x13536=(gconst17*sj3);
IkReal x13537=(gconst16*r11);
IkReal x13538=(cj3*r10);
IkReal x13539=(cj2*sj1);
IkReal x13540=(cj3*gconst17);
IkReal x13541=(cj1*sj2);
IkReal x13542=((1.0)*cj0);
IkReal x13543=(r02*x13529);
IkReal x13544=(r20*x13530);
IkReal x13545=(gconst16*r21*x13530);
evalcond[0]=(sj0+(((-1.0)*r02*x13530)));
evalcond[1]=((((-1.0)*r20*x13529*x13535))+((gconst16*r21*x13529)));
evalcond[2]=(((cj0*x13539))+((cj0*x13541))+(((-1.0)*x13531*x13543)));
evalcond[3]=(((cj0*x13532))+((cj3*x13543))+(((-1.0)*x13534*x13542)));
evalcond[4]=((((-1.0)*x13542))+((x13529*x13537))+(((-1.0)*r10*x13529*x13535)));
evalcond[5]=(x13539+x13541+((sj3*x13533))+((cj3*x13545))+(((-1.0)*cj3*x13535*x13544))+((r21*x13536)));
evalcond[6]=(x13534+((r21*x13540))+(((-1.0)*x13532))+((x13536*x13544))+((cj3*x13533))+(((-1.0)*x13531*x13545)));
evalcond[7]=((((-1.0)*x13530*x13531*x13537))+((gconst16*x13538))+((sj0*x13541))+((r11*x13540))+((r10*x13530*x13536))+((sj0*x13539)));
evalcond[8]=(((cj3*x13530*x13537))+(((-1.0)*sj0*x13534))+((sj0*x13532))+(((-1.0)*x13530*x13535*x13538))+((r11*x13536))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
IkReal x13546=((1.0)*(x13548.value));
IkReal x13547=x13272;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13546)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13546)));
IkReal gconst16=((1.0)*r11*x13547);
IkReal gconst17=((-1.0)*r10*x13547);
IkReal x13549=r12*r12;
IkReal x13550=(cj0*r02);
IkReal x13551=x13272;
IkReal x13552=(sj0*x13551);
j4eval[0]=((IKabs((((r12*x13550*x13551))+(((-1.0)*x13552))+((x13549*x13552)))))+(IKabs((x13550+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13553=((1.0)*r02);
IkReal x13554=(sj1*sj2);
IkReal x13555=(cj1*cj2);
IkReal x13556=(gconst16*sj3);
IkReal x13557=(gconst17*r20);
IkReal x13558=((1.0)*sj3);
IkReal x13559=((1.0)*r21);
IkReal x13560=(gconst17*r21);
IkReal x13561=(cj3*gconst16*r20);
CheckValue<IkReal> x13562=IKPowWithIntegerCheck(((((-1.0)*gconst17*r00*x13557*x13558))+(((-1.0)*gconst16*r01*x13556*x13559))+((r01*x13556*x13557))+((r00*x13556*x13560))),-1);
if(!x13562.valid){
continue;
}
CheckValue<IkReal> x13563=IKPowWithIntegerCheck((((sj3*x13557))+(((-1.0)*x13556*x13559))),-1);
if(!x13563.valid){
continue;
}
if( IKabs(((x13562.value)*(((((-1.0)*cj3*x13553*x13560))+(((-1.0)*x13553*x13554))+(((-1.0)*x13553*x13561))+(((-1.0)*sj0*x13557*x13558))+((r21*sj0*x13556))+((r02*x13555)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13563.value)*((x13555+(((-1.0)*cj3*gconst17*x13559))+(((-1.0)*x13561))+(((-1.0)*x13554)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13562.value)*(((((-1.0)*cj3*x13553*x13560))+(((-1.0)*x13553*x13554))+(((-1.0)*x13553*x13561))+(((-1.0)*sj0*x13557*x13558))+((r21*sj0*x13556))+((r02*x13555))))))+IKsqr(((x13563.value)*((x13555+(((-1.0)*cj3*gconst17*x13559))+(((-1.0)*x13561))+(((-1.0)*x13554))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13562.value)*(((((-1.0)*cj3*x13553*x13560))+(((-1.0)*x13553*x13554))+(((-1.0)*x13553*x13561))+(((-1.0)*sj0*x13557*x13558))+((r21*sj0*x13556))+((r02*x13555))))), ((x13563.value)*((x13555+(((-1.0)*cj3*gconst17*x13559))+(((-1.0)*x13561))+(((-1.0)*x13554))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13564=IKsin(j4);
IkReal x13565=IKcos(j4);
IkReal x13566=((1.0)*gconst17);
IkReal x13567=(gconst17*sj3);
IkReal x13568=(gconst16*r21);
IkReal x13569=(cj3*gconst17);
IkReal x13570=(sj1*sj2);
IkReal x13571=(cj1*cj2);
IkReal x13572=(gconst16*sj3);
IkReal x13573=(cj3*gconst16);
IkReal x13574=(cj2*sj1);
IkReal x13575=(cj1*sj2);
IkReal x13576=((1.0)*sj3);
IkReal x13577=((1.0)*cj0);
IkReal x13578=(cj3*x13565);
IkReal x13579=(gconst16*x13564);
IkReal x13580=((1.0)*x13565);
IkReal x13581=(r02*x13564);
IkReal x13582=(r12*x13564);
evalcond[0]=(((x13564*x13568))+(((-1.0)*r20*x13564*x13566)));
evalcond[1]=(sj0+(((-1.0)*r02*x13580))+(((-1.0)*r00*x13564*x13566))+((r01*x13579)));
evalcond[2]=((((-1.0)*r12*x13580))+((r11*x13579))+(((-1.0)*r10*x13564*x13566))+(((-1.0)*x13577)));
evalcond[3]=(x13575+x13574+((x13568*x13578))+((r20*x13572))+(((-1.0)*r20*x13566*x13578))+((r21*x13567)));
evalcond[4]=(x13570+(((-1.0)*x13565*x13568*x13576))+((r20*x13573))+(((-1.0)*x13571))+((r20*x13565*x13567))+((r21*x13569)));
evalcond[5]=((((-1.0)*r01*x13572*x13580))+((r00*x13573))+((r01*x13569))+((cj0*x13574))+((cj0*x13575))+(((-1.0)*x13576*x13581))+((r00*x13565*x13567)));
evalcond[6]=(((r00*x13572))+((r01*x13567))+((cj0*x13571))+(((-1.0)*x13570*x13577))+((cj3*x13581))+(((-1.0)*r00*x13566*x13578))+((r01*x13565*x13573)));
evalcond[7]=(((r10*x13573))+((r10*x13565*x13567))+((r11*x13569))+(((-1.0)*r11*x13572*x13580))+(((-1.0)*x13576*x13582))+((sj0*x13574))+((sj0*x13575)));
evalcond[8]=(((r10*x13572))+(((-1.0)*sj0*x13570))+(((-1.0)*r10*x13566*x13578))+((r11*x13567))+((sj0*x13571))+((cj3*x13582))+((r11*x13565*x13573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13583=((1.0)*gconst17);
CheckValue<IkReal> x13584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13583)))),-1);
if(!x13584.valid){
continue;
}
CheckValue<IkReal> x13585 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x13583))+(((-1.0)*cj0*r00*x13583))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13584.value)))+(x13585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13586=IKsin(j4);
IkReal x13587=IKcos(j4);
IkReal x13588=((1.0)*gconst17);
IkReal x13589=(gconst17*sj3);
IkReal x13590=(gconst16*r21);
IkReal x13591=(cj3*gconst17);
IkReal x13592=(sj1*sj2);
IkReal x13593=(cj1*cj2);
IkReal x13594=(gconst16*sj3);
IkReal x13595=(cj3*gconst16);
IkReal x13596=(cj2*sj1);
IkReal x13597=(cj1*sj2);
IkReal x13598=((1.0)*sj3);
IkReal x13599=((1.0)*cj0);
IkReal x13600=(cj3*x13587);
IkReal x13601=(gconst16*x13586);
IkReal x13602=((1.0)*x13587);
IkReal x13603=(r02*x13586);
IkReal x13604=(r12*x13586);
evalcond[0]=((((-1.0)*r20*x13586*x13588))+((x13586*x13590)));
evalcond[1]=(sj0+(((-1.0)*r02*x13602))+(((-1.0)*r00*x13586*x13588))+((r01*x13601)));
evalcond[2]=(((r11*x13601))+(((-1.0)*r10*x13586*x13588))+(((-1.0)*r12*x13602))+(((-1.0)*x13599)));
evalcond[3]=(x13597+x13596+((r21*x13589))+(((-1.0)*r20*x13588*x13600))+((r20*x13594))+((x13590*x13600)));
evalcond[4]=(x13592+((r21*x13591))+(((-1.0)*x13587*x13590*x13598))+(((-1.0)*x13593))+((r20*x13595))+((r20*x13587*x13589)));
evalcond[5]=(((r01*x13591))+((r00*x13595))+(((-1.0)*x13598*x13603))+((r00*x13587*x13589))+((cj0*x13596))+((cj0*x13597))+(((-1.0)*r01*x13594*x13602)));
evalcond[6]=((((-1.0)*x13592*x13599))+((r00*x13594))+((r01*x13589))+(((-1.0)*r00*x13588*x13600))+((cj3*x13603))+((cj0*x13593))+((r01*x13587*x13595)));
evalcond[7]=(((sj0*x13596))+((sj0*x13597))+((r11*x13591))+((r10*x13595))+((r10*x13587*x13589))+(((-1.0)*x13598*x13604))+(((-1.0)*r11*x13594*x13602)));
evalcond[8]=(((sj0*x13593))+((r10*x13594))+(((-1.0)*sj0*x13592))+((cj3*x13604))+((r11*x13587*x13595))+(((-1.0)*r10*x13588*x13600))+((r11*x13589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13605=r21*r21;
IkReal x13606=gconst16*gconst16;
IkReal x13607=r20*r20;
IkReal x13608=gconst17*gconst17;
IkReal x13609=(gconst16*r21);
IkReal x13610=(cj1*sj2);
IkReal x13611=(cj2*sj1);
IkReal x13612=(gconst17*r20);
IkReal x13613=(gconst16*sj3);
IkReal x13614=(r21*sj3);
IkReal x13615=((1.0)*cj3);
CheckValue<IkReal> x13616 = IKatan2WithCheck(IkReal((((gconst17*r22*x13614))+((r20*r22*x13613))+((r22*x13610))+((r22*x13611)))),IkReal((((x13609*x13611))+((x13609*x13610))+(((-1.0)*gconst17*x13607*x13613))+((gconst17*x13605*x13613))+(((-1.0)*r20*x13608*x13614))+(((-1.0)*x13610*x13612))+((r20*x13606*x13614))+(((-1.0)*x13611*x13612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13616.valid){
continue;
}
CheckValue<IkReal> x13617=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13605*x13606*x13615))+(((-1.0)*x13615*(r22*r22)))+(((-1.0)*x13607*x13608*x13615))+(((2.0)*cj3*x13609*x13612)))),-1);
if(!x13617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13616.value)+(((1.5707963267949)*(x13617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13618=IKsin(j4);
IkReal x13619=IKcos(j4);
IkReal x13620=(cj3*gconst17);
IkReal x13621=(gconst16*r21);
IkReal x13622=(gconst17*sj3);
IkReal x13623=(gconst16*r20);
IkReal x13624=(sj1*sj2);
IkReal x13625=(cj1*cj2);
IkReal x13626=(gconst16*r10);
IkReal x13627=(cj2*sj1);
IkReal x13628=(gconst16*sj3);
IkReal x13629=(cj1*sj2);
IkReal x13630=((1.0)*cj0);
IkReal x13631=((1.0)*x13619);
IkReal x13632=(gconst16*x13618);
IkReal x13633=(cj3*x13619);
IkReal x13634=(cj3*x13618);
IkReal x13635=((1.0)*gconst17*x13618);
IkReal x13636=((1.0)*sj3*x13618);
evalcond[0]=(((x13618*x13621))+(((-1.0)*r22*x13631))+(((-1.0)*r20*x13635)));
evalcond[1]=((((-1.0)*r02*x13631))+sj0+(((-1.0)*r00*x13635))+((r01*x13632)));
evalcond[2]=(((r11*x13632))+(((-1.0)*r12*x13631))+(((-1.0)*x13630))+(((-1.0)*r10*x13635)));
evalcond[3]=(x13627+x13629+((r22*x13634))+((r21*x13622))+((x13621*x13633))+(((-1.0)*r20*x13620*x13631))+((sj3*x13623)));
evalcond[4]=((((-1.0)*sj3*x13621*x13631))+x13624+((r20*x13619*x13622))+((r21*x13620))+(((-1.0)*r22*x13636))+((cj3*x13623))+(((-1.0)*x13625)));
evalcond[5]=(((cj0*x13627))+((cj0*x13629))+(((-1.0)*r02*x13636))+(((-1.0)*r01*x13628*x13631))+((r01*x13620))+((cj3*gconst16*r00))+((r00*x13619*x13622)));
evalcond[6]=(((cj0*x13625))+(((-1.0)*x13624*x13630))+(((-1.0)*r00*x13620*x13631))+((r02*x13634))+((gconst16*r01*x13633))+((r01*x13622))+((r00*x13628)));
evalcond[7]=(((r11*x13620))+((sj0*x13627))+((sj0*x13629))+(((-1.0)*r12*x13636))+(((-1.0)*r11*x13628*x13631))+((r10*x13619*x13622))+((cj3*x13626)));
evalcond[8]=((((-1.0)*sj0*x13624))+((r11*x13622))+((r12*x13634))+((sj0*x13625))+(((-1.0)*r10*x13620*x13631))+((gconst16*r11*x13633))+((sj3*x13626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13637=((1.0)*gconst17);
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13637))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
CheckValue<IkReal> x13639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13637))+(((-1.0)*gconst16*r20)))),-1);
if(!x13639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13638.value)+(((1.5707963267949)*(x13639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13640=IKsin(j4);
IkReal x13641=IKcos(j4);
IkReal x13642=(cj3*gconst17);
IkReal x13643=(gconst16*r21);
IkReal x13644=(gconst17*sj3);
IkReal x13645=(gconst16*r20);
IkReal x13646=(sj1*sj2);
IkReal x13647=(cj1*cj2);
IkReal x13648=(gconst16*r10);
IkReal x13649=(cj2*sj1);
IkReal x13650=(gconst16*sj3);
IkReal x13651=(cj1*sj2);
IkReal x13652=((1.0)*cj0);
IkReal x13653=((1.0)*x13641);
IkReal x13654=(gconst16*x13640);
IkReal x13655=(cj3*x13641);
IkReal x13656=(cj3*x13640);
IkReal x13657=((1.0)*gconst17*x13640);
IkReal x13658=((1.0)*sj3*x13640);
evalcond[0]=((((-1.0)*r20*x13657))+(((-1.0)*r22*x13653))+((x13640*x13643)));
evalcond[1]=((((-1.0)*r00*x13657))+sj0+((r01*x13654))+(((-1.0)*r02*x13653)));
evalcond[2]=((((-1.0)*r12*x13653))+(((-1.0)*r10*x13657))+((r11*x13654))+(((-1.0)*x13652)));
evalcond[3]=(x13651+x13649+((x13643*x13655))+((sj3*x13645))+((r22*x13656))+(((-1.0)*r20*x13642*x13653))+((r21*x13644)));
evalcond[4]=(x13646+(((-1.0)*r22*x13658))+((r20*x13641*x13644))+(((-1.0)*sj3*x13643*x13653))+(((-1.0)*x13647))+((r21*x13642))+((cj3*x13645)));
evalcond[5]=((((-1.0)*r02*x13658))+((r00*x13641*x13644))+((cj0*x13651))+((r01*x13642))+((cj3*gconst16*r00))+((cj0*x13649))+(((-1.0)*r01*x13650*x13653)));
evalcond[6]=(((r00*x13650))+((r02*x13656))+(((-1.0)*r00*x13642*x13653))+((r01*x13644))+((gconst16*r01*x13655))+((cj0*x13647))+(((-1.0)*x13646*x13652)));
evalcond[7]=(((r11*x13642))+((sj0*x13651))+((r10*x13641*x13644))+(((-1.0)*r12*x13658))+((sj0*x13649))+(((-1.0)*r11*x13650*x13653))+((cj3*x13648)));
evalcond[8]=(((gconst16*r11*x13655))+((r12*x13656))+(((-1.0)*r10*x13642*x13653))+((r11*x13644))+((sj3*x13648))+(((-1.0)*sj0*x13646))+((sj0*x13647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13659=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13659.valid){
continue;
}
CheckValue<IkReal> x13660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13659.value)))+(x13660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13661=IKsin(j4);
IkReal x13662=IKcos(j4);
IkReal x13663=(cj3*gconst17);
IkReal x13664=(gconst16*r21);
IkReal x13665=(gconst17*sj3);
IkReal x13666=(gconst16*r20);
IkReal x13667=(sj1*sj2);
IkReal x13668=(cj1*cj2);
IkReal x13669=(gconst16*r10);
IkReal x13670=(cj2*sj1);
IkReal x13671=(gconst16*sj3);
IkReal x13672=(cj1*sj2);
IkReal x13673=((1.0)*cj0);
IkReal x13674=((1.0)*x13662);
IkReal x13675=(gconst16*x13661);
IkReal x13676=(cj3*x13662);
IkReal x13677=(cj3*x13661);
IkReal x13678=((1.0)*gconst17*x13661);
IkReal x13679=((1.0)*sj3*x13661);
evalcond[0]=((((-1.0)*r20*x13678))+(((-1.0)*r22*x13674))+((x13661*x13664)));
evalcond[1]=(sj0+((r01*x13675))+(((-1.0)*r00*x13678))+(((-1.0)*r02*x13674)));
evalcond[2]=((((-1.0)*r12*x13674))+(((-1.0)*x13673))+((r11*x13675))+(((-1.0)*r10*x13678)));
evalcond[3]=(x13670+x13672+(((-1.0)*r20*x13663*x13674))+((x13664*x13676))+((r22*x13677))+((sj3*x13666))+((r21*x13665)));
evalcond[4]=(((cj3*x13666))+x13667+((r20*x13662*x13665))+(((-1.0)*sj3*x13664*x13674))+(((-1.0)*x13668))+((r21*x13663))+(((-1.0)*r22*x13679)));
evalcond[5]=(((r00*x13662*x13665))+((r01*x13663))+(((-1.0)*r02*x13679))+((cj0*x13672))+((cj0*x13670))+(((-1.0)*r01*x13671*x13674))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x13663*x13674))+((r02*x13677))+((gconst16*r01*x13676))+((r00*x13671))+((r01*x13665))+(((-1.0)*x13667*x13673))+((cj0*x13668)));
evalcond[7]=(((cj3*x13669))+((r10*x13662*x13665))+(((-1.0)*r11*x13671*x13674))+(((-1.0)*r12*x13679))+((r11*x13663))+((sj0*x13670))+((sj0*x13672)));
evalcond[8]=((((-1.0)*r10*x13663*x13674))+((r12*x13677))+((gconst16*r11*x13676))+(((-1.0)*sj0*x13667))+((r11*x13665))+((sj3*x13669))+((sj0*x13668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13680=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13680;
j4eval[1]=IKsign(x13680);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13681=((1.0)*cj5);
IkReal x13682=((((-1.0)*r21*x13681))+(((-1.0)*r20*sj5)));
j4eval[0]=x13682;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13681))))));
j4eval[2]=IKsign(x13682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13683=cj5*cj5;
IkReal x13684=(cj3*r21);
IkReal x13685=(cj5*sj5);
IkReal x13686=((1.0)*cj3);
IkReal x13687=((((-1.0)*r11*x13684))+(((-1.0)*r12*r22*x13686))+(((-1.0)*r10*r20*x13683*x13686))+((r10*x13684*x13685))+((r11*x13683*x13684))+((cj3*r11*r20*x13685)));
j4eval[0]=x13687;
j4eval[1]=IKsign(x13687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13688=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13688;
j4eval[1]=IKsign(x13688);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13689=((1.0)*cj5);
IkReal x13690=((((-1.0)*r21*x13689))+(((-1.0)*r20*sj5)));
j4eval[0]=x13690;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13689))))));
j4eval[2]=IKsign(x13690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13691=cj5*cj5;
IkReal x13692=r11*r11;
IkReal x13693=(cj5*r10);
IkReal x13694=(r11*sj5);
IkReal x13695=((((2.0)*x13693*x13694))+(((-1.0)*(r12*r12)))+((x13691*x13692))+(((-1.0)*x13691*(r10*r10)))+(((-1.0)*x13692)));
j4eval[0]=x13695;
j4eval[1]=((IKabs(r12))+(IKabs((x13693+(((-1.0)*x13694))))));
j4eval[2]=IKsign(x13695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13696=cj5*cj5;
IkReal x13697=r11*r11;
IkReal x13698=(cj5*r10);
IkReal x13699=(r11*sj5);
CheckValue<IkReal> x13700 = IKatan2WithCheck(IkReal((x13698+(((-1.0)*x13699)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13700.valid){
continue;
}
CheckValue<IkReal> x13701=IKPowWithIntegerCheck(IKsign((((x13696*x13697))+(((2.0)*x13698*x13699))+(((-1.0)*x13696*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13697)))),-1);
if(!x13701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13700.value)+(((1.5707963267949)*(x13701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13702=IKsin(j4);
IkReal x13703=IKcos(j4);
IkReal x13704=(cj5*r10);
IkReal x13705=(r01*sj5);
IkReal x13706=(cj5*r00);
IkReal x13707=(cj5*r20);
IkReal x13708=((1.0)*x13703);
IkReal x13709=((1.0)*x13702);
IkReal x13710=(sj5*x13702);
evalcond[0]=((((-1.0)*r22*x13708))+((r21*x13710))+(((-1.0)*x13707*x13709)));
evalcond[1]=(((x13702*x13705))+(((-1.0)*x13706*x13709))+(((-1.0)*r02*x13708)));
evalcond[2]=((((-1.0)*r12*x13709))+(((-1.0)*r11*sj5*x13708))+((x13703*x13704)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13708))+(((-1.0)*x13704*x13709))+((r11*x13710)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13705*x13708))+(((-1.0)*r02*x13709))+((x13703*x13706)));
evalcond[5]=((((-1.0)*r22*x13709))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13708))+((x13703*x13707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13711=((1.0)*cj5);
CheckValue<IkReal> x13712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13711))+(((-1.0)*r20*sj5)))),-1);
if(!x13712.valid){
continue;
}
CheckValue<IkReal> x13713 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13712.value)))+(x13713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13714=IKsin(j4);
IkReal x13715=IKcos(j4);
IkReal x13716=(cj5*r10);
IkReal x13717=(r01*sj5);
IkReal x13718=(cj5*r00);
IkReal x13719=(cj5*r20);
IkReal x13720=((1.0)*x13715);
IkReal x13721=((1.0)*x13714);
IkReal x13722=(sj5*x13714);
evalcond[0]=((((-1.0)*r22*x13720))+((r21*x13722))+(((-1.0)*x13719*x13721)));
evalcond[1]=((((-1.0)*r02*x13720))+((x13714*x13717))+(((-1.0)*x13718*x13721)));
evalcond[2]=((((-1.0)*r12*x13721))+(((-1.0)*r11*sj5*x13720))+((x13715*x13716)));
evalcond[3]=((-1.0)+((r11*x13722))+(((-1.0)*r12*x13720))+(((-1.0)*x13716*x13721)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13721))+(((-1.0)*x13717*x13720))+((x13715*x13718)));
evalcond[5]=((((-1.0)*r22*x13721))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13720))+((x13715*x13719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13723 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13723.valid){
continue;
}
CheckValue<IkReal> x13724=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13723.value)+(((1.5707963267949)*(x13724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13725=IKsin(j4);
IkReal x13726=IKcos(j4);
IkReal x13727=(cj5*r10);
IkReal x13728=(r01*sj5);
IkReal x13729=(cj5*r00);
IkReal x13730=(cj5*r20);
IkReal x13731=((1.0)*x13726);
IkReal x13732=((1.0)*x13725);
IkReal x13733=(sj5*x13725);
evalcond[0]=((((-1.0)*r22*x13731))+(((-1.0)*x13730*x13732))+((r21*x13733)));
evalcond[1]=((((-1.0)*r02*x13731))+((x13725*x13728))+(((-1.0)*x13729*x13732)));
evalcond[2]=((((-1.0)*r12*x13732))+((x13726*x13727))+(((-1.0)*r11*sj5*x13731)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13731))+(((-1.0)*x13727*x13732))+((r11*x13733)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13732))+((x13726*x13729))+(((-1.0)*x13728*x13731))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r21*sj5*x13731))+(((-1.0)*r22*x13732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13726*x13730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13734=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13734;
j4eval[1]=IKsign(x13734);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13735=((1.0)*cj5);
IkReal x13736=((((-1.0)*r21*x13735))+(((-1.0)*r20*sj5)));
j4eval[0]=x13736;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13735))))));
j4eval[2]=IKsign(x13736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13737=cj5*cj5;
IkReal x13738=r11*r11;
IkReal x13739=(r11*sj5);
IkReal x13740=(cj5*r10);
IkReal x13741=((r12*r12)+x13738+((x13737*(r10*r10)))+(((-1.0)*x13737*x13738))+(((-2.0)*x13739*x13740)));
j4eval[0]=x13741;
j4eval[1]=IKsign(x13741);
j4eval[2]=((IKabs((x13739+(((-1.0)*x13740)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13742=cj5*cj5;
IkReal x13743=r11*r11;
IkReal x13744=(cj5*r10);
IkReal x13745=(r11*sj5);
CheckValue<IkReal> x13746=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13743+(((-1.0)*x13742*x13743))+(((-2.0)*x13744*x13745))+((x13742*(r10*r10))))),-1);
if(!x13746.valid){
continue;
}
CheckValue<IkReal> x13747 = IKatan2WithCheck(IkReal((x13745+(((-1.0)*x13744)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13746.value)))+(x13747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13748=IKcos(j4);
IkReal x13749=IKsin(j4);
IkReal x13750=(cj5*r00);
IkReal x13751=(cj5*r10);
IkReal x13752=(r21*sj5);
IkReal x13753=(cj5*r20);
IkReal x13754=((1.0)*x13748);
IkReal x13755=((1.0)*x13749);
IkReal x13756=(sj5*x13749);
IkReal x13757=(sj5*x13748);
evalcond[0]=(((r11*x13757))+(((-1.0)*x13751*x13754))+((r12*x13749)));
evalcond[1]=((((-1.0)*r22*x13754))+((x13749*x13752))+(((-1.0)*x13753*x13755)));
evalcond[2]=((((-1.0)*x13750*x13755))+((r01*x13756))+(((-1.0)*r02*x13754)));
evalcond[3]=((-1.0)+((r11*x13756))+(((-1.0)*x13751*x13755))+(((-1.0)*r12*x13754)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13750*x13754))+((cj1*sj2))+((r02*x13749))+((r01*x13757)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13753*x13754))+((r22*x13749))+((x13748*x13752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13758=((1.0)*cj5);
CheckValue<IkReal> x13759 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13759.valid){
continue;
}
CheckValue<IkReal> x13760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13758))+(((-1.0)*r20*sj5)))),-1);
if(!x13760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13759.value)+(((1.5707963267949)*(x13760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13761=IKcos(j4);
IkReal x13762=IKsin(j4);
IkReal x13763=(cj5*r00);
IkReal x13764=(cj5*r10);
IkReal x13765=(r21*sj5);
IkReal x13766=(cj5*r20);
IkReal x13767=((1.0)*x13761);
IkReal x13768=((1.0)*x13762);
IkReal x13769=(sj5*x13762);
IkReal x13770=(sj5*x13761);
evalcond[0]=(((r11*x13770))+(((-1.0)*x13764*x13767))+((r12*x13762)));
evalcond[1]=((((-1.0)*r22*x13767))+(((-1.0)*x13766*x13768))+((x13762*x13765)));
evalcond[2]=(((r01*x13769))+(((-1.0)*r02*x13767))+(((-1.0)*x13763*x13768)));
evalcond[3]=((-1.0)+((r11*x13769))+(((-1.0)*x13764*x13768))+(((-1.0)*r12*x13767)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x13770))+((r02*x13762))+(((-1.0)*x13763*x13767)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x13766*x13767))+((sj1*sj2))+((x13761*x13765))+((r22*x13762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13771 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13771.valid){
continue;
}
CheckValue<IkReal> x13772=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13771.value)+(((1.5707963267949)*(x13772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13773=IKcos(j4);
IkReal x13774=IKsin(j4);
IkReal x13775=(cj5*r00);
IkReal x13776=(cj5*r10);
IkReal x13777=(r21*sj5);
IkReal x13778=(cj5*r20);
IkReal x13779=((1.0)*x13773);
IkReal x13780=((1.0)*x13774);
IkReal x13781=(sj5*x13774);
IkReal x13782=(sj5*x13773);
evalcond[0]=((((-1.0)*x13776*x13779))+((r11*x13782))+((r12*x13774)));
evalcond[1]=(((x13774*x13777))+(((-1.0)*r22*x13779))+(((-1.0)*x13778*x13780)));
evalcond[2]=(((r01*x13781))+(((-1.0)*x13775*x13780))+(((-1.0)*r02*x13779)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13779))+(((-1.0)*x13776*x13780))+((r11*x13781)));
evalcond[4]=(((cj2*sj1))+((r01*x13782))+((cj1*sj2))+(((-1.0)*x13775*x13779))+((r02*x13774)));
evalcond[5]=((((-1.0)*x13778*x13779))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13774))+((x13773*x13777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13783=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13783);
rxp1_1=(px*r21);
rxp1_2=(r11*x13783);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13784=(cj5*r10);
IkReal x13785=(r11*sj5);
j4eval[0]=(x13785+(((-1.0)*x13784)));
j4eval[1]=((((-1.0)*sj3*x13785))+((sj3*x13784)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13786=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13786);
rxp1_1=(px*r21);
rxp1_2=(r11*x13786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13787=(r11*sj5);
IkReal x13788=((1.0)*cj5*r10);
j4eval[0]=(x13787+(((-1.0)*x13788)));
j4eval[1]=((((-1.0)*cj3*x13788))+((cj3*x13787)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13789=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13789);
rxp1_1=(px*r21);
rxp1_2=(r11*x13789);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13790=((1.0)*r11);
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(r02,-1);
if(!x13791.valid){
continue;
}
CheckValue<IkReal> x13792=IKPowWithIntegerCheck(sj3,-1);
if(!x13792.valid){
continue;
}
CheckValue<IkReal> x13793=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13790))+((cj5*r10*sj3))),-1);
if(!x13793.valid){
continue;
}
if( IKabs(((x13791.value)*(x13792.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13793.value)*(((((-1.0)*cj3*cj5*x13790))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13791.value)*(x13792.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13793.value)*(((((-1.0)*cj3*cj5*x13790))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13791.value)*(x13792.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13793.value)*(((((-1.0)*cj3*cj5*x13790))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13794=IKsin(j4);
IkReal x13795=IKcos(j4);
IkReal x13796=(cj2*sj1);
IkReal x13797=(cj1*sj2);
IkReal x13798=(cj5*r10);
IkReal x13799=(sj1*sj2);
IkReal x13800=(cj5*sj3);
IkReal x13801=(r11*sj5);
IkReal x13802=(cj3*sj5);
IkReal x13803=(r21*sj5);
IkReal x13804=(cj1*cj2);
IkReal x13805=(cj3*cj5);
IkReal x13806=(sj3*sj5);
IkReal x13807=((1.0)*x13794);
IkReal x13808=(r20*x13795);
IkReal x13809=(cj3*x13795);
IkReal x13810=(sj3*x13795);
IkReal x13811=(x13797+x13796);
evalcond[0]=((-1.0)*r02*x13795);
evalcond[1]=(((x13794*x13803))+(((-1.0)*cj5*r20*x13807)));
evalcond[2]=(x13811+(((-1.0)*r02*sj3*x13807)));
evalcond[3]=(x13804+(((-1.0)*x13799))+((cj3*r02*x13794)));
evalcond[4]=((-1.0)+((x13794*x13801))+(((-1.0)*x13798*x13807)));
evalcond[5]=(((r11*x13805))+((x13798*x13810))+(((-1.0)*x13801*x13810))+((r10*x13802)));
evalcond[6]=(((r11*x13800))+(((-1.0)*x13798*x13809))+((r10*x13806))+((x13801*x13809)));
evalcond[7]=(((r21*x13800))+((r21*x13795*x13802))+x13811+(((-1.0)*x13805*x13808))+((r20*x13806)));
evalcond[8]=(((r21*x13805))+(((-1.0)*x13803*x13810))+x13799+(((-1.0)*x13804))+((r20*x13802))+((x13800*x13808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13812=((1.0)*r10);
IkReal x13813=(r11*sj5);
CheckValue<IkReal> x13814=IKPowWithIntegerCheck((x13813+(((-1.0)*cj5*x13812))),-1);
if(!x13814.valid){
continue;
}
CheckValue<IkReal> x13815=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13812))+((cj3*x13813))),-1);
if(!x13815.valid){
continue;
}
if( IKabs(x13814.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13815.value)*(((((-1.0)*sj3*sj5*x13812))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13814.value)+IKsqr(((x13815.value)*(((((-1.0)*sj3*sj5*x13812))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13814.value, ((x13815.value)*(((((-1.0)*sj3*sj5*x13812))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13816=IKsin(j4);
IkReal x13817=IKcos(j4);
IkReal x13818=(cj2*sj1);
IkReal x13819=(cj1*sj2);
IkReal x13820=(cj5*r10);
IkReal x13821=(sj1*sj2);
IkReal x13822=(cj5*sj3);
IkReal x13823=(r11*sj5);
IkReal x13824=(cj3*sj5);
IkReal x13825=(r21*sj5);
IkReal x13826=(cj1*cj2);
IkReal x13827=(cj3*cj5);
IkReal x13828=(sj3*sj5);
IkReal x13829=((1.0)*x13816);
IkReal x13830=(r20*x13817);
IkReal x13831=(cj3*x13817);
IkReal x13832=(sj3*x13817);
IkReal x13833=(x13818+x13819);
evalcond[0]=((-1.0)*r02*x13817);
evalcond[1]=(((x13816*x13825))+(((-1.0)*cj5*r20*x13829)));
evalcond[2]=(x13833+(((-1.0)*r02*sj3*x13829)));
evalcond[3]=(x13826+(((-1.0)*x13821))+((cj3*r02*x13816)));
evalcond[4]=((-1.0)+((x13816*x13823))+(((-1.0)*x13820*x13829)));
evalcond[5]=(((r10*x13824))+((r11*x13827))+((x13820*x13832))+(((-1.0)*x13823*x13832)));
evalcond[6]=(((r10*x13828))+((r11*x13822))+(((-1.0)*x13820*x13831))+((x13823*x13831)));
evalcond[7]=(((r21*x13822))+x13833+((r21*x13817*x13824))+((r20*x13828))+(((-1.0)*x13827*x13830)));
evalcond[8]=(((r21*x13827))+x13821+((x13822*x13830))+(((-1.0)*x13826))+((r20*x13824))+(((-1.0)*x13825*x13832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13834=(cj5*r10);
IkReal x13835=((1.0)*r11);
CheckValue<IkReal> x13836=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13834))),-1);
if(!x13836.valid){
continue;
}
CheckValue<IkReal> x13837=IKPowWithIntegerCheck((((sj3*x13834))+(((-1.0)*sj3*sj5*x13835))),-1);
if(!x13837.valid){
continue;
}
if( IKabs(x13836.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13837.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13835)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13836.value)+IKsqr(((x13837.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13835))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13836.value, ((x13837.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13835))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13838=IKsin(j4);
IkReal x13839=IKcos(j4);
IkReal x13840=(cj2*sj1);
IkReal x13841=(cj1*sj2);
IkReal x13842=(cj5*r10);
IkReal x13843=(sj1*sj2);
IkReal x13844=(cj5*sj3);
IkReal x13845=(r11*sj5);
IkReal x13846=(cj3*sj5);
IkReal x13847=(r21*sj5);
IkReal x13848=(cj1*cj2);
IkReal x13849=(cj3*cj5);
IkReal x13850=(sj3*sj5);
IkReal x13851=((1.0)*x13838);
IkReal x13852=(r20*x13839);
IkReal x13853=(cj3*x13839);
IkReal x13854=(sj3*x13839);
IkReal x13855=(x13841+x13840);
evalcond[0]=((-1.0)*r02*x13839);
evalcond[1]=((((-1.0)*cj5*r20*x13851))+((x13838*x13847)));
evalcond[2]=(x13855+(((-1.0)*r02*sj3*x13851)));
evalcond[3]=(x13848+(((-1.0)*x13843))+((cj3*r02*x13838)));
evalcond[4]=((-1.0)+((x13838*x13845))+(((-1.0)*x13842*x13851)));
evalcond[5]=(((r11*x13849))+((x13842*x13854))+((r10*x13846))+(((-1.0)*x13845*x13854)));
evalcond[6]=(((r11*x13844))+((x13845*x13853))+((r10*x13850))+(((-1.0)*x13842*x13853)));
evalcond[7]=(x13855+((r21*x13844))+((r21*x13839*x13846))+((r20*x13850))+(((-1.0)*x13849*x13852)));
evalcond[8]=(x13843+((r21*x13849))+(((-1.0)*x13847*x13854))+((r20*x13846))+(((-1.0)*x13848))+((x13844*x13852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13856=cj5*cj5;
IkReal x13857=((1.0)*cj3);
IkReal x13858=(r10*r21);
IkReal x13859=(cj5*sj5);
IkReal x13860=(r11*r21);
IkReal x13861=(r11*r20);
IkReal x13862=(r22*sj3);
IkReal x13863=(r10*r20);
IkReal x13864=((1.0)*sj3*x13856);
CheckValue<IkReal> x13865 = IKatan2WithCheck(IkReal((((cj5*r11*x13862))+((r10*sj5*x13862)))),IkReal(((((-1.0)*x13858*x13864))+((sj3*x13858))+((sj3*x13859*x13860))+(((-1.0)*x13861*x13864))+(((-1.0)*sj3*x13859*x13863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13865.valid){
continue;
}
CheckValue<IkReal> x13866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13857))+((cj3*x13856*x13860))+(((-1.0)*x13856*x13857*x13863))+((cj3*x13859*x13861))+(((-1.0)*x13857*x13860))+((cj3*x13858*x13859)))),-1);
if(!x13866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13865.value)+(((1.5707963267949)*(x13866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13867=IKsin(j4);
IkReal x13868=IKcos(j4);
IkReal x13869=(cj2*sj1);
IkReal x13870=(cj1*sj2);
IkReal x13871=(cj5*sj3);
IkReal x13872=(cj5*r10);
IkReal x13873=(r00*sj5);
IkReal x13874=(sj1*sj2);
IkReal x13875=(r11*sj5);
IkReal x13876=(cj3*cj5);
IkReal x13877=(cj3*sj5);
IkReal x13878=(r21*sj5);
IkReal x13879=(cj1*cj2);
IkReal x13880=(sj3*sj5);
IkReal x13881=(r01*sj5);
IkReal x13882=((1.0)*x13868);
IkReal x13883=((1.0)*x13867);
IkReal x13884=(cj3*x13867);
IkReal x13885=(cj3*x13868);
IkReal x13886=(x13870+x13869);
evalcond[0]=(((x13867*x13878))+(((-1.0)*cj5*r20*x13883))+(((-1.0)*r22*x13882)));
evalcond[1]=((((-1.0)*r02*x13882))+((x13867*x13881))+(((-1.0)*cj5*r00*x13883)));
evalcond[2]=((-1.0)+((x13867*x13875))+(((-1.0)*x13872*x13883))+(((-1.0)*r12*x13882)));
evalcond[3]=((((-1.0)*cj3*x13872*x13882))+((r10*x13880))+((r11*x13871))+((r12*x13884))+((x13875*x13885)));
evalcond[4]=(((r11*x13876))+(((-1.0)*sj3*x13875*x13882))+((r10*x13868*x13871))+((r10*x13877))+(((-1.0)*r12*sj3*x13883)));
evalcond[5]=(x13886+((r21*x13871))+(((-1.0)*r20*x13876*x13882))+((r20*x13880))+((r21*x13868*x13877))+((r22*x13884)));
evalcond[6]=(((cj3*x13873))+x13886+(((-1.0)*r01*x13880*x13882))+((r01*x13876))+((r00*x13868*x13871))+(((-1.0)*r02*sj3*x13883)));
evalcond[7]=(((sj3*x13873))+(((-1.0)*r00*x13876*x13882))+x13879+(((-1.0)*x13874))+((r02*x13884))+((r01*x13871))+((r01*x13868*x13877)));
evalcond[8]=((((-1.0)*sj3*x13878*x13882))+(((-1.0)*r22*sj3*x13883))+x13874+(((-1.0)*x13879))+((r21*x13876))+((r20*x13868*x13871))+((r20*x13877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13887=((1.0)*cj5);
CheckValue<IkReal> x13888 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13887))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13888.valid){
continue;
}
CheckValue<IkReal> x13889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13887))+(((-1.0)*r20*sj5)))),-1);
if(!x13889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13888.value)+(((1.5707963267949)*(x13889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13890=IKsin(j4);
IkReal x13891=IKcos(j4);
IkReal x13892=(cj2*sj1);
IkReal x13893=(cj1*sj2);
IkReal x13894=(cj5*sj3);
IkReal x13895=(cj5*r10);
IkReal x13896=(r00*sj5);
IkReal x13897=(sj1*sj2);
IkReal x13898=(r11*sj5);
IkReal x13899=(cj3*cj5);
IkReal x13900=(cj3*sj5);
IkReal x13901=(r21*sj5);
IkReal x13902=(cj1*cj2);
IkReal x13903=(sj3*sj5);
IkReal x13904=(r01*sj5);
IkReal x13905=((1.0)*x13891);
IkReal x13906=((1.0)*x13890);
IkReal x13907=(cj3*x13890);
IkReal x13908=(cj3*x13891);
IkReal x13909=(x13892+x13893);
evalcond[0]=((((-1.0)*cj5*r20*x13906))+(((-1.0)*r22*x13905))+((x13890*x13901)));
evalcond[1]=((((-1.0)*cj5*r00*x13906))+((x13890*x13904))+(((-1.0)*r02*x13905)));
evalcond[2]=((-1.0)+((x13890*x13898))+(((-1.0)*r12*x13905))+(((-1.0)*x13895*x13906)));
evalcond[3]=(((r10*x13903))+((r12*x13907))+((x13898*x13908))+(((-1.0)*cj3*x13895*x13905))+((r11*x13894)));
evalcond[4]=(((r10*x13891*x13894))+((r10*x13900))+(((-1.0)*r12*sj3*x13906))+(((-1.0)*sj3*x13898*x13905))+((r11*x13899)));
evalcond[5]=(((r22*x13907))+((r21*x13891*x13900))+x13909+((r20*x13903))+((r21*x13894))+(((-1.0)*r20*x13899*x13905)));
evalcond[6]=(((r00*x13891*x13894))+(((-1.0)*r01*x13903*x13905))+((cj3*x13896))+x13909+(((-1.0)*r02*sj3*x13906))+((r01*x13899)));
evalcond[7]=(((r02*x13907))+((sj3*x13896))+x13902+((r01*x13891*x13900))+(((-1.0)*r00*x13899*x13905))+((r01*x13894))+(((-1.0)*x13897)));
evalcond[8]=((((-1.0)*r22*sj3*x13906))+x13897+(((-1.0)*x13902))+(((-1.0)*sj3*x13901*x13905))+((r20*x13900))+((r21*x13899))+((r20*x13891*x13894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13910 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13910.valid){
continue;
}
CheckValue<IkReal> x13911=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13910.value)+(((1.5707963267949)*(x13911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13912=IKsin(j4);
IkReal x13913=IKcos(j4);
IkReal x13914=(cj2*sj1);
IkReal x13915=(cj1*sj2);
IkReal x13916=(cj5*sj3);
IkReal x13917=(cj5*r10);
IkReal x13918=(r00*sj5);
IkReal x13919=(sj1*sj2);
IkReal x13920=(r11*sj5);
IkReal x13921=(cj3*cj5);
IkReal x13922=(cj3*sj5);
IkReal x13923=(r21*sj5);
IkReal x13924=(cj1*cj2);
IkReal x13925=(sj3*sj5);
IkReal x13926=(r01*sj5);
IkReal x13927=((1.0)*x13913);
IkReal x13928=((1.0)*x13912);
IkReal x13929=(cj3*x13912);
IkReal x13930=(cj3*x13913);
IkReal x13931=(x13915+x13914);
evalcond[0]=((((-1.0)*r22*x13927))+(((-1.0)*cj5*r20*x13928))+((x13912*x13923)));
evalcond[1]=((((-1.0)*cj5*r00*x13928))+((x13912*x13926))+(((-1.0)*r02*x13927)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13927))+(((-1.0)*x13917*x13928))+((x13912*x13920)));
evalcond[3]=(((r10*x13925))+((r11*x13916))+((x13920*x13930))+((r12*x13929))+(((-1.0)*cj3*x13917*x13927)));
evalcond[4]=(((r10*x13922))+((r10*x13913*x13916))+(((-1.0)*sj3*x13920*x13927))+(((-1.0)*r12*sj3*x13928))+((r11*x13921)));
evalcond[5]=((((-1.0)*r20*x13921*x13927))+((r20*x13925))+x13931+((r22*x13929))+((r21*x13916))+((r21*x13913*x13922)));
evalcond[6]=(x13931+((r00*x13913*x13916))+((r01*x13921))+(((-1.0)*r01*x13925*x13927))+((cj3*x13918))+(((-1.0)*r02*sj3*x13928)));
evalcond[7]=((((-1.0)*x13919))+x13924+(((-1.0)*r00*x13921*x13927))+((sj3*x13918))+((r01*x13916))+((r01*x13913*x13922))+((r02*x13929)));
evalcond[8]=(((r21*x13921))+((r20*x13922))+(((-1.0)*x13924))+x13919+(((-1.0)*sj3*x13923*x13927))+(((-1.0)*r22*sj3*x13928))+((r20*x13913*x13916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13932=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13932;
j4eval[1]=IKsign(x13932);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13933=((1.0)*cj5);
IkReal x13934=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13933)));
j4eval[0]=x13934;
j4eval[1]=((IKabs(((((-1.0)*r20*x13933))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13935=cj5*cj5;
IkReal x13936=(cj3*r21);
IkReal x13937=(cj5*sj5);
IkReal x13938=((1.0)*cj3);
IkReal x13939=((((-1.0)*r10*r20*x13935*x13938))+((r10*x13936*x13937))+(((-1.0)*r12*r22*x13938))+((r11*x13935*x13936))+(((-1.0)*r11*x13936))+((cj3*r11*r20*x13937)));
j4eval[0]=x13939;
j4eval[1]=IKsign(x13939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13940=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13940;
j4eval[1]=IKsign(x13940);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13941=((1.0)*cj5);
IkReal x13942=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13941)));
j4eval[0]=x13942;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13941)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13943=cj5*cj5;
IkReal x13944=r11*r11;
IkReal x13945=(r11*sj5);
IkReal x13946=(cj5*r10);
IkReal x13947=((r12*r12)+x13944+((x13943*(r10*r10)))+(((-2.0)*x13945*x13946))+(((-1.0)*x13943*x13944)));
j4eval[0]=x13947;
j4eval[1]=IKsign(x13947);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13945))+x13946))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13948=cj5*cj5;
IkReal x13949=r11*r11;
IkReal x13950=(cj5*r10);
IkReal x13951=(r11*sj5);
CheckValue<IkReal> x13952 = IKatan2WithCheck(IkReal((x13950+(((-1.0)*x13951)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13952.valid){
continue;
}
CheckValue<IkReal> x13953=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13950*x13951))+x13949+(((-1.0)*x13948*x13949))+((x13948*(r10*r10))))),-1);
if(!x13953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13952.value)+(((1.5707963267949)*(x13953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13954=IKsin(j4);
IkReal x13955=IKcos(j4);
IkReal x13956=(cj5*r10);
IkReal x13957=(r01*sj5);
IkReal x13958=((1.0)*cj2);
IkReal x13959=(cj5*r00);
IkReal x13960=(cj5*r20);
IkReal x13961=((1.0)*x13955);
IkReal x13962=((1.0)*x13954);
IkReal x13963=(sj5*x13954);
evalcond[0]=((((-1.0)*r22*x13961))+(((-1.0)*x13960*x13962))+((r21*x13963)));
evalcond[1]=((((-1.0)*r02*x13961))+(((-1.0)*x13959*x13962))+((x13954*x13957)));
evalcond[2]=((((-1.0)*r12*x13962))+(((-1.0)*r11*sj5*x13961))+((x13955*x13956)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13961))+((r11*x13963))+(((-1.0)*x13956*x13962)));
evalcond[4]=(((x13955*x13960))+(((-1.0)*r22*x13962))+((sj1*sj2))+(((-1.0)*cj1*x13958))+(((-1.0)*r21*sj5*x13961)));
evalcond[5]=((((-1.0)*r02*x13962))+(((-1.0)*cj1*sj2))+(((-1.0)*x13957*x13961))+((x13955*x13959))+(((-1.0)*sj1*x13958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13964=((1.0)*cj5);
CheckValue<IkReal> x13965 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13964))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13965.valid){
continue;
}
CheckValue<IkReal> x13966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13964)))),-1);
if(!x13966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13965.value)+(((1.5707963267949)*(x13966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13967=IKsin(j4);
IkReal x13968=IKcos(j4);
IkReal x13969=(cj5*r10);
IkReal x13970=(r01*sj5);
IkReal x13971=((1.0)*cj2);
IkReal x13972=(cj5*r00);
IkReal x13973=(cj5*r20);
IkReal x13974=((1.0)*x13968);
IkReal x13975=((1.0)*x13967);
IkReal x13976=(sj5*x13967);
evalcond[0]=((((-1.0)*x13973*x13975))+(((-1.0)*r22*x13974))+((r21*x13976)));
evalcond[1]=((((-1.0)*x13972*x13975))+(((-1.0)*r02*x13974))+((x13967*x13970)));
evalcond[2]=((((-1.0)*r12*x13975))+((x13968*x13969))+(((-1.0)*r11*sj5*x13974)));
evalcond[3]=((1.0)+(((-1.0)*x13969*x13975))+(((-1.0)*r12*x13974))+((r11*x13976)));
evalcond[4]=((((-1.0)*r22*x13975))+((sj1*sj2))+((x13968*x13973))+(((-1.0)*r21*sj5*x13974))+(((-1.0)*cj1*x13971)));
evalcond[5]=((((-1.0)*r02*x13975))+(((-1.0)*sj1*x13971))+(((-1.0)*cj1*sj2))+((x13968*x13972))+(((-1.0)*x13970*x13974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13977=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13977.valid){
continue;
}
CheckValue<IkReal> x13978 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13977.value)))+(x13978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13979=IKsin(j4);
IkReal x13980=IKcos(j4);
IkReal x13981=(cj5*r10);
IkReal x13982=(r01*sj5);
IkReal x13983=((1.0)*cj2);
IkReal x13984=(cj5*r00);
IkReal x13985=(cj5*r20);
IkReal x13986=((1.0)*x13980);
IkReal x13987=((1.0)*x13979);
IkReal x13988=(sj5*x13979);
evalcond[0]=((((-1.0)*x13985*x13987))+((r21*x13988))+(((-1.0)*r22*x13986)));
evalcond[1]=((((-1.0)*x13984*x13987))+(((-1.0)*r02*x13986))+((x13979*x13982)));
evalcond[2]=(((x13980*x13981))+(((-1.0)*r11*sj5*x13986))+(((-1.0)*r12*x13987)));
evalcond[3]=((1.0)+((r11*x13988))+(((-1.0)*r12*x13986))+(((-1.0)*x13981*x13987)));
evalcond[4]=((((-1.0)*r21*sj5*x13986))+((x13980*x13985))+(((-1.0)*cj1*x13983))+((sj1*sj2))+(((-1.0)*r22*x13987)));
evalcond[5]=((((-1.0)*x13982*x13986))+((x13980*x13984))+(((-1.0)*r02*x13987))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13989=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13989;
j4eval[1]=IKsign(x13989);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13990=((1.0)*cj5);
IkReal x13991=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13990)));
j4eval[0]=x13991;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13990)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13992=(sj1*sj2);
IkReal x13993=(cj5*r10);
IkReal x13994=(r11*sj5);
IkReal x13995=(cj1*cj2);
IkReal x13996=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x13996;
j4eval[1]=((IKabs((((x13992*x13994))+(((-1.0)*x13994*x13995))+((x13993*x13995))+(((-1.0)*x13992*x13993)))))+(IKabs(((((-1.0)*r12*x13992))+((r12*x13995))))));
j4eval[2]=IKsign(x13996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13997=(sj1*sj2);
IkReal x13998=(cj5*r10);
IkReal x13999=(r11*sj5);
IkReal x14000=(cj1*cj2);
CheckValue<IkReal> x14001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x14001.valid){
continue;
}
CheckValue<IkReal> x14002 = IKatan2WithCheck(IkReal((((x13998*x14000))+(((-1.0)*x13997*x13998))+((x13997*x13999))+(((-1.0)*x13999*x14000)))),IkReal(((((-1.0)*r12*x13997))+((r12*x14000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14001.value)))+(x14002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14003=IKcos(j4);
IkReal x14004=IKsin(j4);
IkReal x14005=(cj5*r00);
IkReal x14006=(cj5*r10);
IkReal x14007=(r21*sj5);
IkReal x14008=((1.0)*cj2);
IkReal x14009=(cj5*r20);
IkReal x14010=((1.0)*x14003);
IkReal x14011=((1.0)*x14004);
IkReal x14012=(sj5*x14004);
IkReal x14013=(sj5*x14003);
evalcond[0]=(((r11*x14013))+(((-1.0)*x14006*x14010))+((r12*x14004)));
evalcond[1]=((((-1.0)*x14009*x14011))+((x14004*x14007))+(((-1.0)*r22*x14010)));
evalcond[2]=((((-1.0)*r02*x14010))+(((-1.0)*x14005*x14011))+((r01*x14012)));
evalcond[3]=((1.0)+((r11*x14012))+(((-1.0)*x14006*x14011))+(((-1.0)*r12*x14010)));
evalcond[4]=(((sj1*sj2))+((x14003*x14007))+(((-1.0)*x14009*x14010))+((r22*x14004))+(((-1.0)*cj1*x14008)));
evalcond[5]=((((-1.0)*x14005*x14010))+((r02*x14004))+(((-1.0)*sj1*x14008))+(((-1.0)*cj1*sj2))+((r01*x14013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14014=((1.0)*cj5);
CheckValue<IkReal> x14015 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14015.valid){
continue;
}
CheckValue<IkReal> x14016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14014))+(((-1.0)*r00*sj5)))),-1);
if(!x14016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14015.value)+(((1.5707963267949)*(x14016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14017=IKcos(j4);
IkReal x14018=IKsin(j4);
IkReal x14019=(cj5*r00);
IkReal x14020=(cj5*r10);
IkReal x14021=(r21*sj5);
IkReal x14022=((1.0)*cj2);
IkReal x14023=(cj5*r20);
IkReal x14024=((1.0)*x14017);
IkReal x14025=((1.0)*x14018);
IkReal x14026=(sj5*x14018);
IkReal x14027=(sj5*x14017);
evalcond[0]=(((r11*x14027))+(((-1.0)*x14020*x14024))+((r12*x14018)));
evalcond[1]=(((x14018*x14021))+(((-1.0)*x14023*x14025))+(((-1.0)*r22*x14024)));
evalcond[2]=(((r01*x14026))+(((-1.0)*x14019*x14025))+(((-1.0)*r02*x14024)));
evalcond[3]=((1.0)+((r11*x14026))+(((-1.0)*x14020*x14025))+(((-1.0)*r12*x14024)));
evalcond[4]=((((-1.0)*cj1*x14022))+((x14017*x14021))+((r22*x14018))+((sj1*sj2))+(((-1.0)*x14023*x14024)));
evalcond[5]=(((r01*x14027))+((r02*x14018))+(((-1.0)*x14019*x14024))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14028=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14028.valid){
continue;
}
CheckValue<IkReal> x14029 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14028.value)))+(x14029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14030=IKcos(j4);
IkReal x14031=IKsin(j4);
IkReal x14032=(cj5*r00);
IkReal x14033=(cj5*r10);
IkReal x14034=(r21*sj5);
IkReal x14035=((1.0)*cj2);
IkReal x14036=(cj5*r20);
IkReal x14037=((1.0)*x14030);
IkReal x14038=((1.0)*x14031);
IkReal x14039=(sj5*x14031);
IkReal x14040=(sj5*x14030);
evalcond[0]=(((r11*x14040))+(((-1.0)*x14033*x14037))+((r12*x14031)));
evalcond[1]=(((x14031*x14034))+(((-1.0)*x14036*x14038))+(((-1.0)*r22*x14037)));
evalcond[2]=(((r01*x14039))+(((-1.0)*x14032*x14038))+(((-1.0)*r02*x14037)));
evalcond[3]=((1.0)+((r11*x14039))+(((-1.0)*x14033*x14038))+(((-1.0)*r12*x14037)));
evalcond[4]=(((r22*x14031))+((x14030*x14034))+(((-1.0)*x14036*x14037))+((sj1*sj2))+(((-1.0)*cj1*x14035)));
evalcond[5]=(((r01*x14040))+(((-1.0)*x14032*x14037))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14035))+((r02*x14031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14041=((-1.0)*r00);
IkReal x14043 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14043)==0){
continue;
}
IkReal x14042=pow(x14043,-0.5);
CheckValue<IkReal> x14044 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14041),IKFAST_ATAN2_MAGTHRESH);
if(!x14044.valid){
continue;
}
IkReal gconst54=((-1.0)*(x14044.value));
IkReal gconst55=(r01*x14042);
IkReal gconst56=(x14041*x14042);
CheckValue<IkReal> x14045 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14045.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14045.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14046=((-1.0)*r00);
IkReal x14047=x14042;
CheckValue<IkReal> x14049 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14046),IKFAST_ATAN2_MAGTHRESH);
if(!x14049.valid){
continue;
}
IkReal x14048=((-1.0)*(x14049.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14048;
IkReal gconst54=x14048;
IkReal gconst55=(r01*x14047);
IkReal gconst56=(x14046*x14047);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14050=((-1.0)*r00);
IkReal x14051=x14042;
CheckValue<IkReal> x14053 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14050),IKFAST_ATAN2_MAGTHRESH);
if(!x14053.valid){
continue;
}
IkReal x14052=((-1.0)*(x14053.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14052;
IkReal gconst54=x14052;
IkReal gconst55=(r01*x14051);
IkReal gconst56=(x14050*x14051);
CheckValue<IkReal> x14061=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14061.valid){
continue;
}
IkReal x14054=x14061.value;
IkReal x14055=(sj3*x14054);
IkReal x14056=(r11*x14055);
IkReal x14057=(r21*x14055);
IkReal x14058=(r20*x14055);
IkReal x14059=(r10*x14055);
IkReal x14060=(r00*r01*x14055);
j4eval[0]=IKsign((((r00*r01*r20*x14056))+((r00*r01*r10*x14057))+((r10*x14058*(r00*r00)))+((r12*r22*sj3))+((r21*x14056*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14062=gconst56*gconst56;
IkReal x14063=gconst55*gconst55;
IkReal x14064=(r11*r21);
IkReal x14065=(gconst56*sj3);
IkReal x14066=((1.0)*cj3);
IkReal x14067=(r10*r20);
IkReal x14068=(r10*r21);
IkReal x14069=(r11*r20);
IkReal x14070=(cj3*gconst55*gconst56);
CheckValue<IkReal> x14071=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14063*x14064*x14066))+((x14069*x14070))+((x14068*x14070))+(((-1.0)*x14062*x14066*x14067))+(((-1.0)*r12*r22*x14066)))),-1);
if(!x14071.valid){
continue;
}
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal((((r11*r22*x14065))+((gconst55*r10*r22*sj3)))),IkReal((((gconst55*x14064*x14065))+((sj3*x14063*x14068))+(((-1.0)*sj3*x14062*x14069))+(((-1.0)*gconst55*x14065*x14067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14071.value)))+(x14072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14073=IKsin(j4);
IkReal x14074=IKcos(j4);
IkReal x14075=(sj1*sj2);
IkReal x14076=(gconst55*r21);
IkReal x14077=(gconst56*r00);
IkReal x14078=(cj3*gconst55);
IkReal x14079=(gconst56*sj3);
IkReal x14080=(gconst55*sj3);
IkReal x14081=((1.0)*cj1);
IkReal x14082=(cj3*gconst56);
IkReal x14083=(cj2*sj1);
IkReal x14084=(cj2*x14081);
IkReal x14085=((1.0)*x14074);
IkReal x14086=((1.0)*x14073);
IkReal x14087=(cj3*x14073);
IkReal x14088=(gconst55*x14073);
evalcond[0]=((((-1.0)*r22*x14085))+(((-1.0)*gconst56*r20*x14086))+((x14073*x14076)));
evalcond[1]=(((r01*x14088))+(((-1.0)*x14077*x14086))+(((-1.0)*r02*x14085)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14085))+((r11*x14088))+(((-1.0)*gconst56*r10*x14086)));
evalcond[3]=(((r11*x14079))+((r12*x14087))+((r10*x14080))+((r11*x14074*x14078))+(((-1.0)*r10*x14082*x14085)));
evalcond[4]=((((-1.0)*r12*sj3*x14086))+(((-1.0)*r11*x14080*x14085))+((r10*x14074*x14079))+((r11*x14082))+((r10*x14078)));
evalcond[5]=(((r20*x14080))+((cj3*x14074*x14076))+((cj1*sj2))+((r21*x14079))+((r22*x14087))+x14083+(((-1.0)*r20*x14082*x14085)));
evalcond[6]=(((r00*x14080))+(((-1.0)*cj3*x14077*x14085))+(((-1.0)*x14084))+((r02*x14087))+((r01*x14079))+x14075+((r01*x14074*x14078)));
evalcond[7]=((((-1.0)*r22*sj3*x14086))+((r20*x14074*x14079))+(((-1.0)*sj3*x14076*x14085))+(((-1.0)*x14084))+((r20*x14078))+((r21*x14082))+x14075);
evalcond[8]=((((-1.0)*sj2*x14081))+((sj3*x14074*x14077))+((r01*x14082))+(((-1.0)*x14083))+((r00*x14078))+(((-1.0)*r02*sj3*x14086))+(((-1.0)*r01*x14080*x14085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14089=gconst55*gconst55;
IkReal x14090=gconst56*gconst56;
IkReal x14091=(r11*r21);
IkReal x14092=(cj3*gconst56);
IkReal x14093=(gconst55*r10);
IkReal x14094=((1.0)*r20);
IkReal x14095=(gconst56*sj3);
CheckValue<IkReal> x14096 = IKatan2WithCheck(IkReal((((r11*r22*x14092))+((cj3*r22*x14093)))),IkReal((((gconst55*x14091*x14092))+(((-1.0)*cj3*r11*x14090*x14094))+((cj3*r10*r21*x14089))+(((-1.0)*x14092*x14093*x14094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14096.valid){
continue;
}
CheckValue<IkReal> x14097=IKPowWithIntegerCheck(IKsign((((r10*r20*sj3*x14090))+(((-1.0)*gconst55*r11*x14094*x14095))+(((-1.0)*r21*x14093*x14095))+((r12*r22*sj3))+((sj3*x14089*x14091)))),-1);
if(!x14097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14096.value)+(((1.5707963267949)*(x14097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14098=IKsin(j4);
IkReal x14099=IKcos(j4);
IkReal x14100=(sj1*sj2);
IkReal x14101=(gconst55*r21);
IkReal x14102=(gconst56*r00);
IkReal x14103=(cj3*gconst55);
IkReal x14104=(gconst56*sj3);
IkReal x14105=(gconst55*sj3);
IkReal x14106=((1.0)*cj1);
IkReal x14107=(cj3*gconst56);
IkReal x14108=(cj2*sj1);
IkReal x14109=(cj2*x14106);
IkReal x14110=((1.0)*x14099);
IkReal x14111=((1.0)*x14098);
IkReal x14112=(cj3*x14098);
IkReal x14113=(gconst55*x14098);
evalcond[0]=(((x14098*x14101))+(((-1.0)*r22*x14110))+(((-1.0)*gconst56*r20*x14111)));
evalcond[1]=(((r01*x14113))+(((-1.0)*r02*x14110))+(((-1.0)*x14102*x14111)));
evalcond[2]=((1.0)+((r11*x14113))+(((-1.0)*gconst56*r10*x14111))+(((-1.0)*r12*x14110)));
evalcond[3]=((((-1.0)*r10*x14107*x14110))+((r10*x14105))+((r12*x14112))+((r11*x14104))+((r11*x14099*x14103)));
evalcond[4]=(((r10*x14103))+((r10*x14099*x14104))+(((-1.0)*r12*sj3*x14111))+((r11*x14107))+(((-1.0)*r11*x14105*x14110)));
evalcond[5]=(((cj1*sj2))+((r22*x14112))+x14108+(((-1.0)*r20*x14107*x14110))+((r20*x14105))+((r21*x14104))+((cj3*x14099*x14101)));
evalcond[6]=(((r02*x14112))+((r00*x14105))+((r01*x14104))+(((-1.0)*x14109))+(((-1.0)*cj3*x14102*x14110))+x14100+((r01*x14099*x14103)));
evalcond[7]=((((-1.0)*sj3*x14101*x14110))+(((-1.0)*x14109))+x14100+((r20*x14103))+((r20*x14099*x14104))+((r21*x14107))+(((-1.0)*r22*sj3*x14111)));
evalcond[8]=(((r00*x14103))+(((-1.0)*r01*x14105*x14110))+((r01*x14107))+(((-1.0)*r02*sj3*x14111))+(((-1.0)*x14108))+(((-1.0)*sj2*x14106))+((sj3*x14099*x14102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14114 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst56*r00))+((gconst55*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14114.valid){
continue;
}
CheckValue<IkReal> x14115=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x14115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14114.value)+(((1.5707963267949)*(x14115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14116=IKsin(j4);
IkReal x14117=IKcos(j4);
IkReal x14118=(sj1*sj2);
IkReal x14119=(gconst55*r21);
IkReal x14120=(gconst56*r00);
IkReal x14121=(cj3*gconst55);
IkReal x14122=(gconst56*sj3);
IkReal x14123=(gconst55*sj3);
IkReal x14124=((1.0)*cj1);
IkReal x14125=(cj3*gconst56);
IkReal x14126=(cj2*sj1);
IkReal x14127=(cj2*x14124);
IkReal x14128=((1.0)*x14117);
IkReal x14129=((1.0)*x14116);
IkReal x14130=(cj3*x14116);
IkReal x14131=(gconst55*x14116);
evalcond[0]=((((-1.0)*r22*x14128))+(((-1.0)*gconst56*r20*x14129))+((x14116*x14119)));
evalcond[1]=((((-1.0)*x14120*x14129))+(((-1.0)*r02*x14128))+((r01*x14131)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14128))+((r11*x14131))+(((-1.0)*gconst56*r10*x14129)));
evalcond[3]=(((r11*x14117*x14121))+((r12*x14130))+(((-1.0)*r10*x14125*x14128))+((r10*x14123))+((r11*x14122)));
evalcond[4]=((((-1.0)*r12*sj3*x14129))+(((-1.0)*r11*x14123*x14128))+((r10*x14117*x14122))+((r10*x14121))+((r11*x14125)));
evalcond[5]=(((r21*x14122))+(((-1.0)*r20*x14125*x14128))+((cj1*sj2))+((cj3*x14117*x14119))+((r20*x14123))+((r22*x14130))+x14126);
evalcond[6]=((((-1.0)*cj3*x14120*x14128))+((r01*x14117*x14121))+(((-1.0)*x14127))+((r00*x14123))+((r02*x14130))+((r01*x14122))+x14118);
evalcond[7]=(((r21*x14125))+(((-1.0)*r22*sj3*x14129))+(((-1.0)*sj3*x14119*x14128))+(((-1.0)*x14127))+((r20*x14117*x14122))+((r20*x14121))+x14118);
evalcond[8]=((((-1.0)*r01*x14123*x14128))+((r00*x14121))+(((-1.0)*sj2*x14124))+((r01*x14125))+((sj3*x14117*x14120))+(((-1.0)*r02*sj3*x14129))+(((-1.0)*x14126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14132=((-1.0)*r01);
IkReal x14134 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14134)==0){
continue;
}
IkReal x14133=pow(x14134,-0.5);
CheckValue<IkReal> x14135 = IKatan2WithCheck(IkReal(x14132),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14135.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x14135.value))));
IkReal gconst58=(x14132*x14133);
IkReal gconst59=((1.0)*r00*x14133);
CheckValue<IkReal> x14136 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14136.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14136.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14137=((-1.0)*r01);
CheckValue<IkReal> x14140 = IKatan2WithCheck(IkReal(x14137),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14140.valid){
continue;
}
IkReal x14138=((1.0)*(x14140.value));
IkReal x14139=x14133;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14138)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14138)));
IkReal gconst58=(x14137*x14139);
IkReal gconst59=((1.0)*r00*x14139);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14141=((-1.0)*r01);
CheckValue<IkReal> x14144 = IKatan2WithCheck(IkReal(x14141),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14144.valid){
continue;
}
IkReal x14142=((1.0)*(x14144.value));
IkReal x14143=x14133;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14142)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14142)));
IkReal gconst58=(x14141*x14143);
IkReal gconst59=((1.0)*r00*x14143);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14145=gconst59*gconst59;
IkReal x14146=gconst58*gconst58;
IkReal x14147=((1.0)*cj3);
IkReal x14148=(r11*r21);
IkReal x14149=((1.0)*r20);
IkReal x14150=(r11*sj3);
IkReal x14151=(gconst58*gconst59);
IkReal x14152=(r10*r21);
IkReal x14153=(gconst58*r10*sj3);
CheckValue<IkReal> x14154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14145*x14147))+((cj3*x14151*x14152))+(((-1.0)*r12*r22*x14147))+((cj3*r11*r20*x14151))+(((-1.0)*x14146*x14147*x14148)))),-1);
if(!x14154.valid){
continue;
}
CheckValue<IkReal> x14155 = IKatan2WithCheck(IkReal((((gconst59*r22*x14150))+((r22*x14153)))),IkReal(((((-1.0)*x14145*x14149*x14150))+(((-1.0)*r10*sj3*x14149*x14151))+((sj3*x14146*x14152))+((sj3*x14148*x14151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14154.value)))+(x14155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14156=IKsin(j4);
IkReal x14157=IKcos(j4);
IkReal x14158=(sj1*sj2);
IkReal x14159=(cj3*gconst59);
IkReal x14160=(gconst58*r00);
IkReal x14161=((1.0)*cj1);
IkReal x14162=(gconst59*r20);
IkReal x14163=(gconst59*r00);
IkReal x14164=(cj2*sj1);
IkReal x14165=(gconst58*sj3);
IkReal x14166=(gconst59*sj3);
IkReal x14167=(gconst59*r10);
IkReal x14168=(cj3*gconst58);
IkReal x14169=(cj2*x14161);
IkReal x14170=((1.0)*x14157);
IkReal x14171=((1.0)*x14156);
IkReal x14172=(cj3*x14156);
IkReal x14173=(gconst58*x14156);
IkReal x14174=(sj3*x14157);
IkReal x14175=(x14157*x14168);
evalcond[0]=(((r21*x14173))+(((-1.0)*r22*x14170))+(((-1.0)*x14162*x14171)));
evalcond[1]=(((r01*x14173))+(((-1.0)*r02*x14170))+(((-1.0)*x14163*x14171)));
evalcond[2]=((1.0)+(((-1.0)*x14167*x14171))+((r11*x14173))+(((-1.0)*r12*x14170)));
evalcond[3]=(((r10*x14165))+((r11*x14175))+((r12*x14172))+(((-1.0)*r10*x14159*x14170))+((r11*x14166)));
evalcond[4]=((((-1.0)*r12*sj3*x14171))+((r10*x14168))+((r10*x14157*x14166))+(((-1.0)*r11*x14165*x14170))+((r11*x14159)));
evalcond[5]=(((r22*x14172))+(((-1.0)*r20*x14159*x14170))+((r21*x14175))+((cj1*sj2))+x14164+((r21*x14166))+((r20*x14165)));
evalcond[6]=(((sj3*x14160))+((r01*x14175))+(((-1.0)*r00*x14159*x14170))+((r02*x14172))+(((-1.0)*x14169))+((r01*x14166))+x14158);
evalcond[7]=((((-1.0)*r21*x14165*x14170))+(((-1.0)*x14169))+x14158+((r21*x14159))+((x14162*x14174))+(((-1.0)*r22*sj3*x14171))+((r20*x14168)));
evalcond[8]=(((cj3*x14160))+((x14163*x14174))+(((-1.0)*r01*x14165*x14170))+((r01*x14159))+(((-1.0)*sj2*x14161))+(((-1.0)*r02*sj3*x14171))+(((-1.0)*x14164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14176=((1.0)*gconst59);
CheckValue<IkReal> x14177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r00))+(((-1.0)*r01*x14176)))),-1);
if(!x14177.valid){
continue;
}
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14176))+((gconst58*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14177.value)))+(x14178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14179=IKsin(j4);
IkReal x14180=IKcos(j4);
IkReal x14181=(sj1*sj2);
IkReal x14182=(cj3*gconst59);
IkReal x14183=(gconst58*r00);
IkReal x14184=((1.0)*cj1);
IkReal x14185=(gconst59*r20);
IkReal x14186=(gconst59*r00);
IkReal x14187=(cj2*sj1);
IkReal x14188=(gconst58*sj3);
IkReal x14189=(gconst59*sj3);
IkReal x14190=(gconst59*r10);
IkReal x14191=(cj3*gconst58);
IkReal x14192=(cj2*x14184);
IkReal x14193=((1.0)*x14180);
IkReal x14194=((1.0)*x14179);
IkReal x14195=(cj3*x14179);
IkReal x14196=(gconst58*x14179);
IkReal x14197=(sj3*x14180);
IkReal x14198=(x14180*x14191);
evalcond[0]=((((-1.0)*r22*x14193))+(((-1.0)*x14185*x14194))+((r21*x14196)));
evalcond[1]=((((-1.0)*x14186*x14194))+(((-1.0)*r02*x14193))+((r01*x14196)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14193))+((r11*x14196))+(((-1.0)*x14190*x14194)));
evalcond[3]=((((-1.0)*r10*x14182*x14193))+((r11*x14198))+((r12*x14195))+((r11*x14189))+((r10*x14188)));
evalcond[4]=(((r10*x14191))+(((-1.0)*r12*sj3*x14194))+((r10*x14180*x14189))+((r11*x14182))+(((-1.0)*r11*x14188*x14193)));
evalcond[5]=(((r20*x14188))+(((-1.0)*r20*x14182*x14193))+((cj1*sj2))+((r22*x14195))+((r21*x14189))+x14187+((r21*x14198)));
evalcond[6]=(((r02*x14195))+((sj3*x14183))+(((-1.0)*r00*x14182*x14193))+((r01*x14189))+(((-1.0)*x14192))+((r01*x14198))+x14181);
evalcond[7]=((((-1.0)*r22*sj3*x14194))+(((-1.0)*r21*x14188*x14193))+((x14185*x14197))+(((-1.0)*x14192))+((r21*x14182))+x14181+((r20*x14191)));
evalcond[8]=(((cj3*x14183))+((r01*x14182))+(((-1.0)*r01*x14188*x14193))+(((-1.0)*r02*sj3*x14194))+((x14186*x14197))+(((-1.0)*sj2*x14184))+(((-1.0)*x14187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14199=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst58*r01))+(((-1.0)*gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14199.value)))+(x14200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14201=IKsin(j4);
IkReal x14202=IKcos(j4);
IkReal x14203=(sj1*sj2);
IkReal x14204=(cj3*gconst59);
IkReal x14205=(gconst58*r00);
IkReal x14206=((1.0)*cj1);
IkReal x14207=(gconst59*r20);
IkReal x14208=(gconst59*r00);
IkReal x14209=(cj2*sj1);
IkReal x14210=(gconst58*sj3);
IkReal x14211=(gconst59*sj3);
IkReal x14212=(gconst59*r10);
IkReal x14213=(cj3*gconst58);
IkReal x14214=(cj2*x14206);
IkReal x14215=((1.0)*x14202);
IkReal x14216=((1.0)*x14201);
IkReal x14217=(cj3*x14201);
IkReal x14218=(gconst58*x14201);
IkReal x14219=(sj3*x14202);
IkReal x14220=(x14202*x14213);
evalcond[0]=((((-1.0)*x14207*x14216))+(((-1.0)*r22*x14215))+((r21*x14218)));
evalcond[1]=((((-1.0)*r02*x14215))+((r01*x14218))+(((-1.0)*x14208*x14216)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14215))+((r11*x14218))+(((-1.0)*x14212*x14216)));
evalcond[3]=(((r11*x14211))+((r12*x14217))+((r10*x14210))+((r11*x14220))+(((-1.0)*r10*x14204*x14215)));
evalcond[4]=((((-1.0)*r11*x14210*x14215))+((r10*x14213))+(((-1.0)*r12*sj3*x14216))+((r11*x14204))+((r10*x14202*x14211)));
evalcond[5]=(((r22*x14217))+((cj1*sj2))+((r21*x14220))+(((-1.0)*r20*x14204*x14215))+((r21*x14211))+((r20*x14210))+x14209);
evalcond[6]=(((r01*x14211))+((r02*x14217))+(((-1.0)*x14214))+((r01*x14220))+((sj3*x14205))+x14203+(((-1.0)*r00*x14204*x14215)));
evalcond[7]=(((x14207*x14219))+((r21*x14204))+(((-1.0)*r21*x14210*x14215))+(((-1.0)*r22*sj3*x14216))+(((-1.0)*x14214))+((r20*x14213))+x14203);
evalcond[8]=((((-1.0)*r02*sj3*x14216))+(((-1.0)*r01*x14210*x14215))+(((-1.0)*sj2*x14206))+((cj3*x14205))+((r01*x14204))+(((-1.0)*x14209))+((x14208*x14219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14222 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14222)==0){
continue;
}
IkReal x14221=pow(x14222,-0.5);
CheckValue<IkReal> x14223 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14223.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14223.value));
IkReal gconst61=((-1.0)*r21*x14221);
IkReal gconst62=(r20*x14221);
CheckValue<IkReal> x14224 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14224.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14224.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14227 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14227.valid){
continue;
}
IkReal x14225=((-1.0)*(x14227.value));
IkReal x14226=x14221;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14225;
IkReal gconst60=x14225;
IkReal gconst61=((-1.0)*r21*x14226);
IkReal gconst62=(r20*x14226);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14230 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14230.valid){
continue;
}
IkReal x14228=((-1.0)*(x14230.value));
IkReal x14229=x14221;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14228;
IkReal gconst60=x14228;
IkReal gconst61=((-1.0)*r21*x14229);
IkReal gconst62=(r20*x14229);
CheckValue<IkReal> x14238=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14238.valid){
continue;
}
IkReal x14231=x14238.value;
IkReal x14232=(sj3*x14231);
IkReal x14233=(r11*x14232);
IkReal x14234=(r00*x14232);
IkReal x14235=(r01*x14232);
IkReal x14236=(r10*x14232);
IkReal x14237=(r20*r21*x14232);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x14233*(r21*r21)))+((r00*r20*r21*x14233))+((r10*x14234*(r20*r20)))+((r10*r20*r21*x14235))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14239=gconst61*gconst61;
IkReal x14240=gconst62*gconst62;
IkReal x14241=(r00*r11);
IkReal x14242=(r01*r10);
IkReal x14243=(r00*r10);
IkReal x14244=(r01*r11);
IkReal x14245=((1.0)*cj3);
IkReal x14246=(r02*sj3);
IkReal x14247=(cj3*gconst61*gconst62);
IkReal x14248=((1.0)*x14240);
IkReal x14249=(gconst61*gconst62*sj3);
CheckValue<IkReal> x14250=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14240*x14243*x14245))+(((-1.0)*x14239*x14244*x14245))+(((-1.0)*r02*r12*x14245))+((x14242*x14247))+((x14241*x14247)))),-1);
if(!x14250.valid){
continue;
}
CheckValue<IkReal> x14251 = IKatan2WithCheck(IkReal((((gconst61*r10*x14246))+((gconst62*r11*x14246)))),IkReal(((((-1.0)*x14243*x14249))+((x14244*x14249))+((sj3*x14239*x14242))+(((-1.0)*sj3*x14241*x14248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14250.value)))+(x14251.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14252=IKsin(j4);
IkReal x14253=IKcos(j4);
IkReal x14254=(sj1*sj2);
IkReal x14255=(gconst61*sj3);
IkReal x14256=(cj3*gconst61);
IkReal x14257=(cj3*gconst62);
IkReal x14258=((1.0)*cj2);
IkReal x14259=(gconst62*sj3);
IkReal x14260=(cj1*sj2);
IkReal x14261=(cj1*x14258);
IkReal x14262=((1.0)*x14253);
IkReal x14263=((1.0)*x14252);
IkReal x14264=(gconst61*x14252);
IkReal x14265=(cj3*x14252);
evalcond[0]=((((-1.0)*gconst62*r20*x14263))+((r21*x14264))+(((-1.0)*r22*x14262)));
evalcond[1]=((((-1.0)*r02*x14262))+(((-1.0)*gconst62*r00*x14263))+((r01*x14264)));
evalcond[2]=((1.0)+((r11*x14264))+(((-1.0)*r12*x14262))+(((-1.0)*gconst62*r10*x14263)));
evalcond[3]=(((r11*x14253*x14256))+(((-1.0)*r10*x14257*x14262))+((r12*x14265))+((r10*x14255))+((r11*x14259)));
evalcond[4]=((((-1.0)*r12*sj3*x14263))+((r10*x14253*x14259))+(((-1.0)*r11*x14255*x14262))+((r10*x14256))+((r11*x14257)));
evalcond[5]=(((cj2*sj1))+((r21*x14259))+((r20*x14255))+(((-1.0)*r20*x14257*x14262))+((r21*x14253*x14256))+((r22*x14265))+x14260);
evalcond[6]=((((-1.0)*x14261))+((r02*x14265))+((r01*x14253*x14256))+(((-1.0)*r00*x14257*x14262))+((r00*x14255))+x14254+((r01*x14259)));
evalcond[7]=(((r21*x14257))+(((-1.0)*r22*sj3*x14263))+(((-1.0)*x14261))+(((-1.0)*r21*x14255*x14262))+((r20*x14256))+((r20*x14253*x14259))+x14254);
evalcond[8]=((((-1.0)*x14260))+(((-1.0)*r02*sj3*x14263))+(((-1.0)*sj1*x14258))+(((-1.0)*r01*x14255*x14262))+((r00*x14256))+((r00*x14253*x14259))+((r01*x14257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14266=gconst61*gconst61;
IkReal x14267=gconst62*gconst62;
IkReal x14268=(r01*r10);
IkReal x14269=(r00*r11);
IkReal x14270=(cj3*gconst61);
IkReal x14271=(gconst62*r11);
IkReal x14272=(r00*r10);
IkReal x14273=((1.0)*gconst61*gconst62*sj3);
CheckValue<IkReal> x14274 = IKatan2WithCheck(IkReal((((cj3*r02*x14271))+((r02*r10*x14270)))),IkReal(((((-1.0)*gconst62*x14270*x14272))+((r01*x14270*x14271))+((cj3*x14266*x14268))+(((-1.0)*cj3*x14267*x14269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14274.valid){
continue;
}
CheckValue<IkReal> x14275=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14268*x14273))+((r01*r11*sj3*x14266))+((sj3*x14267*x14272))+(((-1.0)*x14269*x14273)))),-1);
if(!x14275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14274.value)+(((1.5707963267949)*(x14275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14276=IKsin(j4);
IkReal x14277=IKcos(j4);
IkReal x14278=(sj1*sj2);
IkReal x14279=(gconst61*sj3);
IkReal x14280=(cj3*gconst61);
IkReal x14281=(cj3*gconst62);
IkReal x14282=((1.0)*cj2);
IkReal x14283=(gconst62*sj3);
IkReal x14284=(cj1*sj2);
IkReal x14285=(cj1*x14282);
IkReal x14286=((1.0)*x14277);
IkReal x14287=((1.0)*x14276);
IkReal x14288=(gconst61*x14276);
IkReal x14289=(cj3*x14276);
evalcond[0]=((((-1.0)*r22*x14286))+((r21*x14288))+(((-1.0)*gconst62*r20*x14287)));
evalcond[1]=(((r01*x14288))+(((-1.0)*gconst62*r00*x14287))+(((-1.0)*r02*x14286)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r10*x14287))+(((-1.0)*r12*x14286))+((r11*x14288)));
evalcond[3]=(((r11*x14277*x14280))+((r12*x14289))+((r11*x14283))+((r10*x14279))+(((-1.0)*r10*x14281*x14286)));
evalcond[4]=((((-1.0)*r12*sj3*x14287))+((r10*x14277*x14283))+(((-1.0)*r11*x14279*x14286))+((r10*x14280))+((r11*x14281)));
evalcond[5]=(((cj2*sj1))+((r21*x14283))+((r20*x14279))+(((-1.0)*r20*x14281*x14286))+((r22*x14289))+((r21*x14277*x14280))+x14284);
evalcond[6]=(((r01*x14283))+(((-1.0)*x14285))+(((-1.0)*r00*x14281*x14286))+((r01*x14277*x14280))+x14278+((r02*x14289))+((r00*x14279)));
evalcond[7]=(((r21*x14281))+(((-1.0)*r21*x14279*x14286))+(((-1.0)*x14285))+((r20*x14277*x14283))+(((-1.0)*r22*sj3*x14287))+x14278+((r20*x14280)));
evalcond[8]=(((r01*x14281))+(((-1.0)*r02*sj3*x14287))+((r00*x14280))+(((-1.0)*r01*x14279*x14286))+((r00*x14277*x14283))+(((-1.0)*x14284))+(((-1.0)*sj1*x14282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14290=((1.0)*gconst62);
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x14290)))),-1);
if(!x14291.valid){
continue;
}
CheckValue<IkReal> x14292 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst61*r21))+(((-1.0)*r20*x14290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14291.value)))+(x14292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14293=IKsin(j4);
IkReal x14294=IKcos(j4);
IkReal x14295=(sj1*sj2);
IkReal x14296=(gconst61*sj3);
IkReal x14297=(cj3*gconst61);
IkReal x14298=(cj3*gconst62);
IkReal x14299=((1.0)*cj2);
IkReal x14300=(gconst62*sj3);
IkReal x14301=(cj1*sj2);
IkReal x14302=(cj1*x14299);
IkReal x14303=((1.0)*x14294);
IkReal x14304=((1.0)*x14293);
IkReal x14305=(gconst61*x14293);
IkReal x14306=(cj3*x14293);
evalcond[0]=((((-1.0)*r22*x14303))+(((-1.0)*gconst62*r20*x14304))+((r21*x14305)));
evalcond[1]=((((-1.0)*r02*x14303))+(((-1.0)*gconst62*r00*x14304))+((r01*x14305)));
evalcond[2]=((1.0)+((r11*x14305))+(((-1.0)*r12*x14303))+(((-1.0)*gconst62*r10*x14304)));
evalcond[3]=(((r11*x14294*x14297))+((r11*x14300))+((r10*x14296))+((r12*x14306))+(((-1.0)*r10*x14298*x14303)));
evalcond[4]=(((r10*x14297))+((r11*x14298))+(((-1.0)*r11*x14296*x14303))+((r10*x14294*x14300))+(((-1.0)*r12*sj3*x14304)));
evalcond[5]=(((r20*x14296))+((cj2*sj1))+(((-1.0)*r20*x14298*x14303))+((r21*x14294*x14297))+((r22*x14306))+x14301+((r21*x14300)));
evalcond[6]=(((r02*x14306))+((r00*x14296))+(((-1.0)*r00*x14298*x14303))+((r01*x14300))+x14295+(((-1.0)*x14302))+((r01*x14294*x14297)));
evalcond[7]=(((r20*x14297))+(((-1.0)*r22*sj3*x14304))+((r21*x14298))+((r20*x14294*x14300))+(((-1.0)*r21*x14296*x14303))+x14295+(((-1.0)*x14302)));
evalcond[8]=(((r00*x14294*x14300))+(((-1.0)*r01*x14296*x14303))+(((-1.0)*r02*sj3*x14304))+((r00*x14297))+((r01*x14298))+(((-1.0)*x14301))+(((-1.0)*sj1*x14299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14308 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14308)==0){
continue;
}
IkReal x14307=pow(x14308,-0.5);
CheckValue<IkReal> x14309 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14309.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14309.value))));
IkReal gconst64=((1.0)*r21*x14307);
IkReal gconst65=((-1.0)*r20*x14307);
CheckValue<IkReal> x14310 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14310.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14310.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14313 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14313.valid){
continue;
}
IkReal x14311=((1.0)*(x14313.value));
IkReal x14312=x14307;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14311)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14311)));
IkReal gconst64=((1.0)*r21*x14312);
IkReal gconst65=((-1.0)*r20*x14312);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14316 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14316.valid){
continue;
}
IkReal x14314=((1.0)*(x14316.value));
IkReal x14315=x14307;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14314)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14314)));
IkReal gconst64=((1.0)*r21*x14315);
IkReal gconst65=((-1.0)*r20*x14315);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14319 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14319.valid){
continue;
}
IkReal x14317=((1.0)*(x14319.value));
IkReal x14318=x14307;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14317)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14317)));
IkReal gconst64=((1.0)*r21*x14318);
IkReal gconst65=((-1.0)*r20*x14318);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14320=gconst64*gconst64;
IkReal x14321=gconst65*gconst65;
IkReal x14322=(gconst64*sj3);
IkReal x14323=(gconst65*r11);
IkReal x14324=((1.0)*cj3);
IkReal x14325=(gconst65*r10);
IkReal x14326=(cj3*gconst64);
IkReal x14327=(r20*x14321);
IkReal x14328=(r21*x14320);
CheckValue<IkReal> x14329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14324*x14328))+((r20*x14323*x14326))+(((-1.0)*r10*x14324*x14327))+(((-1.0)*r12*r22*x14324))+((r21*x14325*x14326)))),-1);
if(!x14329.valid){
continue;
}
CheckValue<IkReal> x14330 = IKatan2WithCheck(IkReal((((r22*sj3*x14323))+((r10*r22*x14322)))),IkReal(((((-1.0)*r11*sj3*x14327))+((r10*sj3*x14328))+((r21*x14322*x14323))+(((-1.0)*r20*x14322*x14325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14329.value)))+(x14330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14331=IKsin(j4);
IkReal x14332=IKcos(j4);
IkReal x14333=(sj1*sj2);
IkReal x14334=(cj3*gconst64);
IkReal x14335=(gconst65*r21);
IkReal x14336=(gconst65*sj3);
IkReal x14337=(gconst64*sj3);
IkReal x14338=((1.0)*cj2);
IkReal x14339=(cj1*sj2);
IkReal x14340=(cj3*gconst65);
IkReal x14341=(cj1*x14338);
IkReal x14342=((1.0)*x14332);
IkReal x14343=((1.0)*x14331);
IkReal x14344=(cj3*x14331);
IkReal x14345=(gconst64*x14331);
evalcond[0]=((((-1.0)*gconst65*r20*x14343))+((r21*x14345))+(((-1.0)*r22*x14342)));
evalcond[1]=((((-1.0)*gconst65*r00*x14343))+((r01*x14345))+(((-1.0)*r02*x14342)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14342))+((r11*x14345))+(((-1.0)*gconst65*r10*x14343)));
evalcond[3]=(((r11*x14332*x14334))+((r11*x14336))+(((-1.0)*r10*x14340*x14342))+((r12*x14344))+((r10*x14337)));
evalcond[4]=((((-1.0)*r11*x14337*x14342))+((r11*x14340))+(((-1.0)*r12*sj3*x14343))+((r10*x14332*x14336))+((r10*x14334)));
evalcond[5]=(((cj2*sj1))+((r20*x14337))+((r21*x14332*x14334))+((r22*x14344))+(((-1.0)*r20*x14340*x14342))+x14339+((sj3*x14335)));
evalcond[6]=(((r00*x14337))+((r01*x14336))+((r02*x14344))+(((-1.0)*x14341))+x14333+(((-1.0)*r00*x14340*x14342))+((r01*x14332*x14334)));
evalcond[7]=(((r20*x14334))+(((-1.0)*r21*x14337*x14342))+(((-1.0)*x14341))+((r20*x14332*x14336))+x14333+((cj3*x14335))+(((-1.0)*r22*sj3*x14343)));
evalcond[8]=((((-1.0)*sj1*x14338))+(((-1.0)*r01*x14337*x14342))+((r01*x14340))+(((-1.0)*r02*sj3*x14343))+((r00*x14334))+(((-1.0)*x14339))+((r00*x14332*x14336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14346=((1.0)*gconst65);
CheckValue<IkReal> x14347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14346))+(((-1.0)*gconst64*r00)))),-1);
if(!x14347.valid){
continue;
}
CheckValue<IkReal> x14348 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14346))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14347.value)))+(x14348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14349=IKsin(j4);
IkReal x14350=IKcos(j4);
IkReal x14351=(sj1*sj2);
IkReal x14352=(cj3*gconst64);
IkReal x14353=(gconst65*r21);
IkReal x14354=(gconst65*sj3);
IkReal x14355=(gconst64*sj3);
IkReal x14356=((1.0)*cj2);
IkReal x14357=(cj1*sj2);
IkReal x14358=(cj3*gconst65);
IkReal x14359=(cj1*x14356);
IkReal x14360=((1.0)*x14350);
IkReal x14361=((1.0)*x14349);
IkReal x14362=(cj3*x14349);
IkReal x14363=(gconst64*x14349);
evalcond[0]=((((-1.0)*r22*x14360))+(((-1.0)*gconst65*r20*x14361))+((r21*x14363)));
evalcond[1]=((((-1.0)*r02*x14360))+(((-1.0)*gconst65*r00*x14361))+((r01*x14363)));
evalcond[2]=((1.0)+((r11*x14363))+(((-1.0)*gconst65*r10*x14361))+(((-1.0)*r12*x14360)));
evalcond[3]=(((r11*x14354))+((r11*x14350*x14352))+((r10*x14355))+(((-1.0)*r10*x14358*x14360))+((r12*x14362)));
evalcond[4]=(((r10*x14350*x14354))+((r11*x14358))+(((-1.0)*r12*sj3*x14361))+((r10*x14352))+(((-1.0)*r11*x14355*x14360)));
evalcond[5]=(((sj3*x14353))+((cj2*sj1))+((r21*x14350*x14352))+((r20*x14355))+x14357+((r22*x14362))+(((-1.0)*r20*x14358*x14360)));
evalcond[6]=((((-1.0)*x14359))+((r02*x14362))+((r00*x14355))+((r01*x14354))+(((-1.0)*r00*x14358*x14360))+x14351+((r01*x14350*x14352)));
evalcond[7]=(((cj3*x14353))+(((-1.0)*x14359))+((r20*x14352))+((r20*x14350*x14354))+(((-1.0)*r21*x14355*x14360))+x14351+(((-1.0)*r22*sj3*x14361)));
evalcond[8]=((((-1.0)*sj1*x14356))+(((-1.0)*r01*x14355*x14360))+((r00*x14352))+(((-1.0)*x14357))+((r01*x14358))+(((-1.0)*r02*sj3*x14361))+((r00*x14350*x14354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14364 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r01))+(((-1.0)*gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14364.valid){
continue;
}
CheckValue<IkReal> x14365=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14364.value)+(((1.5707963267949)*(x14365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14366=IKsin(j4);
IkReal x14367=IKcos(j4);
IkReal x14368=(sj1*sj2);
IkReal x14369=(cj3*gconst64);
IkReal x14370=(gconst65*r21);
IkReal x14371=(gconst65*sj3);
IkReal x14372=(gconst64*sj3);
IkReal x14373=((1.0)*cj2);
IkReal x14374=(cj1*sj2);
IkReal x14375=(cj3*gconst65);
IkReal x14376=(cj1*x14373);
IkReal x14377=((1.0)*x14367);
IkReal x14378=((1.0)*x14366);
IkReal x14379=(cj3*x14366);
IkReal x14380=(gconst64*x14366);
evalcond[0]=(((r21*x14380))+(((-1.0)*gconst65*r20*x14378))+(((-1.0)*r22*x14377)));
evalcond[1]=((((-1.0)*gconst65*r00*x14378))+((r01*x14380))+(((-1.0)*r02*x14377)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14377))+((r11*x14380))+(((-1.0)*gconst65*r10*x14378)));
evalcond[3]=(((r11*x14367*x14369))+((r10*x14372))+((r12*x14379))+(((-1.0)*r10*x14375*x14377))+((r11*x14371)));
evalcond[4]=(((r10*x14369))+(((-1.0)*r11*x14372*x14377))+((r10*x14367*x14371))+(((-1.0)*r12*sj3*x14378))+((r11*x14375)));
evalcond[5]=(((cj2*sj1))+((r21*x14367*x14369))+(((-1.0)*r20*x14375*x14377))+((r22*x14379))+((sj3*x14370))+((r20*x14372))+x14374);
evalcond[6]=(((r01*x14371))+((r00*x14372))+((r01*x14367*x14369))+(((-1.0)*r00*x14375*x14377))+x14368+((r02*x14379))+(((-1.0)*x14376)));
evalcond[7]=((((-1.0)*r21*x14372*x14377))+((r20*x14367*x14371))+((cj3*x14370))+((r20*x14369))+(((-1.0)*r22*sj3*x14378))+x14368+(((-1.0)*x14376)));
evalcond[8]=(((r01*x14375))+(((-1.0)*x14374))+(((-1.0)*r02*sj3*x14378))+((r00*x14367*x14371))+(((-1.0)*r01*x14372*x14377))+((r00*x14369))+(((-1.0)*sj1*x14373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14381=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14381);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14381);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14382=(cj5*r10);
IkReal x14383=(r11*sj5);
j4eval[0]=((((-1.0)*x14382))+x14383);
j4eval[1]=((((-1.0)*sj3*x14383))+((sj3*x14382)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14384=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14384);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14384);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14385=(r11*sj5);
IkReal x14386=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14386))+x14385);
j4eval[1]=(((cj3*x14385))+(((-1.0)*cj3*x14386)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14387=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14387);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14387);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14388=((1.0)*r11);
CheckValue<IkReal> x14389=IKPowWithIntegerCheck(cj3,-1);
if(!x14389.valid){
continue;
}
CheckValue<IkReal> x14390=IKPowWithIntegerCheck(r22,-1);
if(!x14390.valid){
continue;
}
CheckValue<IkReal> x14391=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14388))+((cj5*r10*sj3))),-1);
if(!x14391.valid){
continue;
}
if( IKabs(((x14389.value)*(x14390.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14391.value)*(((((-1.0)*cj3*cj5*x14388))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14389.value)*(x14390.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14391.value)*(((((-1.0)*cj3*cj5*x14388))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14389.value)*(x14390.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14391.value)*(((((-1.0)*cj3*cj5*x14388))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14392=IKsin(j4);
IkReal x14393=IKcos(j4);
IkReal x14394=(sj1*sj2);
IkReal x14395=(r11*sj5);
IkReal x14396=(r00*sj3);
IkReal x14397=(cj5*r01);
IkReal x14398=((1.0)*cj1);
IkReal x14399=(cj3*sj5);
IkReal x14400=(cj5*r11);
IkReal x14401=(r10*sj3);
IkReal x14402=(cj2*sj1);
IkReal x14403=((1.0)*cj5);
IkReal x14404=((1.0)*sj3);
IkReal x14405=(r01*sj5);
IkReal x14406=(cj2*x14398);
IkReal x14407=(cj3*x14393);
IkReal x14408=(r22*x14392);
IkReal x14409=(cj5*x14393);
IkReal x14410=(x14392*x14403);
evalcond[0]=((-1.0)*r22*x14393);
evalcond[1]=(((cj1*sj2))+((cj3*x14408))+x14402);
evalcond[2]=((((-1.0)*r00*x14410))+((x14392*x14405)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14410))+((x14392*x14395)));
evalcond[4]=((((-1.0)*x14406))+(((-1.0)*x14404*x14408))+x14394);
evalcond[5]=(((x14401*x14409))+((r10*x14399))+((cj3*x14400))+(((-1.0)*x14393*x14395*x14404)));
evalcond[6]=(((sj5*x14401))+((x14395*x14407))+(((-1.0)*r10*x14403*x14407))+((sj3*x14400)));
evalcond[7]=((((-1.0)*x14406))+((r01*x14393*x14399))+(((-1.0)*r00*x14403*x14407))+((sj5*x14396))+x14394+((sj3*x14397)));
evalcond[8]=((((-1.0)*x14393*x14404*x14405))+(((-1.0)*x14402))+((r00*x14399))+((cj3*x14397))+(((-1.0)*sj2*x14398))+((x14396*x14409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14411=((1.0)*sj3);
IkReal x14412=(r11*sj5);
IkReal x14413=((1.0)*cj5*r10);
CheckValue<IkReal> x14414=IKPowWithIntegerCheck(((((-1.0)*x14413))+x14412),-1);
if(!x14414.valid){
continue;
}
CheckValue<IkReal> x14415=IKPowWithIntegerCheck((((cj3*x14412))+(((-1.0)*cj3*x14413))),-1);
if(!x14415.valid){
continue;
}
if( IKabs(((-1.0)*(x14414.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14415.value)*(((((-1.0)*r10*sj5*x14411))+(((-1.0)*cj5*r11*x14411)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14414.value)))+IKsqr(((x14415.value)*(((((-1.0)*r10*sj5*x14411))+(((-1.0)*cj5*r11*x14411))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14414.value)), ((x14415.value)*(((((-1.0)*r10*sj5*x14411))+(((-1.0)*cj5*r11*x14411))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14416=IKsin(j4);
IkReal x14417=IKcos(j4);
IkReal x14418=(sj1*sj2);
IkReal x14419=(r11*sj5);
IkReal x14420=(r00*sj3);
IkReal x14421=(cj5*r01);
IkReal x14422=((1.0)*cj1);
IkReal x14423=(cj3*sj5);
IkReal x14424=(cj5*r11);
IkReal x14425=(r10*sj3);
IkReal x14426=(cj2*sj1);
IkReal x14427=((1.0)*cj5);
IkReal x14428=((1.0)*sj3);
IkReal x14429=(r01*sj5);
IkReal x14430=(cj2*x14422);
IkReal x14431=(cj3*x14417);
IkReal x14432=(r22*x14416);
IkReal x14433=(cj5*x14417);
IkReal x14434=(x14416*x14427);
evalcond[0]=((-1.0)*r22*x14417);
evalcond[1]=(((cj1*sj2))+x14426+((cj3*x14432)));
evalcond[2]=((((-1.0)*r00*x14434))+((x14416*x14429)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14434))+((x14416*x14419)));
evalcond[4]=((((-1.0)*x14430))+(((-1.0)*x14428*x14432))+x14418);
evalcond[5]=(((x14425*x14433))+(((-1.0)*x14417*x14419*x14428))+((r10*x14423))+((cj3*x14424)));
evalcond[6]=(((sj3*x14424))+((sj5*x14425))+((x14419*x14431))+(((-1.0)*r10*x14427*x14431)));
evalcond[7]=((((-1.0)*x14430))+(((-1.0)*r00*x14427*x14431))+((r01*x14417*x14423))+((sj3*x14421))+x14418+((sj5*x14420)));
evalcond[8]=((((-1.0)*sj2*x14422))+(((-1.0)*x14417*x14428*x14429))+((r00*x14423))+((x14420*x14433))+((cj3*x14421))+(((-1.0)*x14426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14435=(cj5*r10);
IkReal x14436=((1.0)*r11);
CheckValue<IkReal> x14437=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14435))),-1);
if(!x14437.valid){
continue;
}
CheckValue<IkReal> x14438=IKPowWithIntegerCheck((((sj3*x14435))+(((-1.0)*sj3*sj5*x14436))),-1);
if(!x14438.valid){
continue;
}
if( IKabs(((-1.0)*(x14437.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14438.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14437.value)))+IKsqr(((x14438.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14436))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14437.value)), ((x14438.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14436))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14439=IKsin(j4);
IkReal x14440=IKcos(j4);
IkReal x14441=(sj1*sj2);
IkReal x14442=(r11*sj5);
IkReal x14443=(r00*sj3);
IkReal x14444=(cj5*r01);
IkReal x14445=((1.0)*cj1);
IkReal x14446=(cj3*sj5);
IkReal x14447=(cj5*r11);
IkReal x14448=(r10*sj3);
IkReal x14449=(cj2*sj1);
IkReal x14450=((1.0)*cj5);
IkReal x14451=((1.0)*sj3);
IkReal x14452=(r01*sj5);
IkReal x14453=(cj2*x14445);
IkReal x14454=(cj3*x14440);
IkReal x14455=(r22*x14439);
IkReal x14456=(cj5*x14440);
IkReal x14457=(x14439*x14450);
evalcond[0]=((-1.0)*r22*x14440);
evalcond[1]=(((cj1*sj2))+x14449+((cj3*x14455)));
evalcond[2]=((((-1.0)*r00*x14457))+((x14439*x14452)));
evalcond[3]=((1.0)+((x14439*x14442))+(((-1.0)*r10*x14457)));
evalcond[4]=((((-1.0)*x14453))+x14441+(((-1.0)*x14451*x14455)));
evalcond[5]=(((r10*x14446))+(((-1.0)*x14440*x14442*x14451))+((cj3*x14447))+((x14448*x14456)));
evalcond[6]=((((-1.0)*r10*x14450*x14454))+((x14442*x14454))+((sj5*x14448))+((sj3*x14447)));
evalcond[7]=((((-1.0)*x14453))+(((-1.0)*r00*x14450*x14454))+((sj5*x14443))+x14441+((sj3*x14444))+((r01*x14440*x14446)));
evalcond[8]=(((r00*x14446))+(((-1.0)*sj2*x14445))+(((-1.0)*x14449))+((x14443*x14456))+((cj3*x14444))+(((-1.0)*x14440*x14451*x14452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14458=cj5*cj5;
IkReal x14459=((1.0)*cj3);
IkReal x14460=(r10*r21);
IkReal x14461=(cj5*sj5);
IkReal x14462=(r11*r21);
IkReal x14463=(r11*r20);
IkReal x14464=(r22*sj3);
IkReal x14465=(r10*r20);
IkReal x14466=((1.0)*sj3*x14458);
CheckValue<IkReal> x14467=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14458*x14459*x14465))+((cj3*x14460*x14461))+((cj3*x14458*x14462))+((cj3*x14461*x14463))+(((-1.0)*r12*r22*x14459))+(((-1.0)*x14459*x14462)))),-1);
if(!x14467.valid){
continue;
}
CheckValue<IkReal> x14468 = IKatan2WithCheck(IkReal((((cj5*r11*x14464))+((r10*sj5*x14464)))),IkReal(((((-1.0)*x14463*x14466))+((sj3*x14460))+(((-1.0)*x14460*x14466))+((sj3*x14461*x14462))+(((-1.0)*sj3*x14461*x14465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14467.value)))+(x14468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14469=IKsin(j4);
IkReal x14470=IKcos(j4);
IkReal x14471=(sj1*sj2);
IkReal x14472=(cj5*sj3);
IkReal x14473=(cj5*r10);
IkReal x14474=(r00*sj5);
IkReal x14475=(r11*sj5);
IkReal x14476=(cj3*cj5);
IkReal x14477=((1.0)*cj1);
IkReal x14478=(cj3*sj5);
IkReal x14479=(r21*sj5);
IkReal x14480=(cj2*sj1);
IkReal x14481=(sj3*sj5);
IkReal x14482=(r01*sj5);
IkReal x14483=(cj2*x14477);
IkReal x14484=((1.0)*x14470);
IkReal x14485=((1.0)*x14469);
IkReal x14486=(cj3*x14469);
IkReal x14487=(cj3*x14470);
evalcond[0]=(((x14469*x14479))+(((-1.0)*r22*x14484))+(((-1.0)*cj5*r20*x14485)));
evalcond[1]=((((-1.0)*cj5*r00*x14485))+((x14469*x14482))+(((-1.0)*r02*x14484)));
evalcond[2]=((1.0)+(((-1.0)*x14473*x14485))+((x14469*x14475))+(((-1.0)*r12*x14484)));
evalcond[3]=(((r10*x14481))+((r12*x14486))+((r11*x14472))+((x14475*x14487))+(((-1.0)*cj3*x14473*x14484)));
evalcond[4]=(((r10*x14470*x14472))+((r10*x14478))+(((-1.0)*sj3*x14475*x14484))+((r11*x14476))+(((-1.0)*r12*sj3*x14485)));
evalcond[5]=(((cj1*sj2))+((r21*x14472))+((r22*x14486))+x14480+(((-1.0)*r20*x14476*x14484))+((r21*x14470*x14478))+((r20*x14481)));
evalcond[6]=((((-1.0)*r00*x14476*x14484))+((r02*x14486))+((r01*x14472))+((sj3*x14474))+x14471+(((-1.0)*x14483))+((r01*x14470*x14478)));
evalcond[7]=((((-1.0)*sj3*x14479*x14484))+((r21*x14476))+(((-1.0)*r22*sj3*x14485))+x14471+((r20*x14470*x14472))+((r20*x14478))+(((-1.0)*x14483)));
evalcond[8]=((((-1.0)*r02*sj3*x14485))+((r01*x14476))+((r00*x14470*x14472))+(((-1.0)*x14480))+(((-1.0)*r01*x14481*x14484))+((cj3*x14474))+(((-1.0)*sj2*x14477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14488=((1.0)*cj5);
CheckValue<IkReal> x14489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x14488)))),-1);
if(!x14489.valid){
continue;
}
CheckValue<IkReal> x14490 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14488))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14489.value)))+(x14490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14491=IKsin(j4);
IkReal x14492=IKcos(j4);
IkReal x14493=(sj1*sj2);
IkReal x14494=(cj5*sj3);
IkReal x14495=(cj5*r10);
IkReal x14496=(r00*sj5);
IkReal x14497=(r11*sj5);
IkReal x14498=(cj3*cj5);
IkReal x14499=((1.0)*cj1);
IkReal x14500=(cj3*sj5);
IkReal x14501=(r21*sj5);
IkReal x14502=(cj2*sj1);
IkReal x14503=(sj3*sj5);
IkReal x14504=(r01*sj5);
IkReal x14505=(cj2*x14499);
IkReal x14506=((1.0)*x14492);
IkReal x14507=((1.0)*x14491);
IkReal x14508=(cj3*x14491);
IkReal x14509=(cj3*x14492);
evalcond[0]=(((x14491*x14501))+(((-1.0)*r22*x14506))+(((-1.0)*cj5*r20*x14507)));
evalcond[1]=((((-1.0)*r02*x14506))+((x14491*x14504))+(((-1.0)*cj5*r00*x14507)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14506))+((x14491*x14497))+(((-1.0)*x14495*x14507)));
evalcond[3]=(((x14497*x14509))+((r11*x14494))+((r10*x14503))+(((-1.0)*cj3*x14495*x14506))+((r12*x14508)));
evalcond[4]=(((r10*x14492*x14494))+((r11*x14498))+((r10*x14500))+(((-1.0)*r12*sj3*x14507))+(((-1.0)*sj3*x14497*x14506)));
evalcond[5]=(((r21*x14494))+((r20*x14503))+((cj1*sj2))+((r22*x14508))+(((-1.0)*r20*x14498*x14506))+((r21*x14492*x14500))+x14502);
evalcond[6]=(((r02*x14508))+(((-1.0)*x14505))+((sj3*x14496))+x14493+(((-1.0)*r00*x14498*x14506))+((r01*x14492*x14500))+((r01*x14494)));
evalcond[7]=((((-1.0)*sj3*x14501*x14506))+((r21*x14498))+((r20*x14500))+(((-1.0)*x14505))+((r20*x14492*x14494))+x14493+(((-1.0)*r22*sj3*x14507)));
evalcond[8]=(((r00*x14492*x14494))+(((-1.0)*x14502))+((cj3*x14496))+((r01*x14498))+(((-1.0)*r02*sj3*x14507))+(((-1.0)*r01*x14503*x14506))+(((-1.0)*sj2*x14499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14510=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14510.valid){
continue;
}
CheckValue<IkReal> x14511 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14510.value)))+(x14511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14512=IKsin(j4);
IkReal x14513=IKcos(j4);
IkReal x14514=(sj1*sj2);
IkReal x14515=(cj5*sj3);
IkReal x14516=(cj5*r10);
IkReal x14517=(r00*sj5);
IkReal x14518=(r11*sj5);
IkReal x14519=(cj3*cj5);
IkReal x14520=((1.0)*cj1);
IkReal x14521=(cj3*sj5);
IkReal x14522=(r21*sj5);
IkReal x14523=(cj2*sj1);
IkReal x14524=(sj3*sj5);
IkReal x14525=(r01*sj5);
IkReal x14526=(cj2*x14520);
IkReal x14527=((1.0)*x14513);
IkReal x14528=((1.0)*x14512);
IkReal x14529=(cj3*x14512);
IkReal x14530=(cj3*x14513);
evalcond[0]=((((-1.0)*r22*x14527))+((x14512*x14522))+(((-1.0)*cj5*r20*x14528)));
evalcond[1]=(((x14512*x14525))+(((-1.0)*r02*x14527))+(((-1.0)*cj5*r00*x14528)));
evalcond[2]=((1.0)+((x14512*x14518))+(((-1.0)*r12*x14527))+(((-1.0)*x14516*x14528)));
evalcond[3]=((((-1.0)*cj3*x14516*x14527))+((r11*x14515))+((r12*x14529))+((x14518*x14530))+((r10*x14524)));
evalcond[4]=((((-1.0)*r12*sj3*x14528))+((r10*x14513*x14515))+((r11*x14519))+(((-1.0)*sj3*x14518*x14527))+((r10*x14521)));
evalcond[5]=(((r22*x14529))+((cj1*sj2))+((r20*x14524))+x14523+(((-1.0)*r20*x14519*x14527))+((r21*x14513*x14521))+((r21*x14515)));
evalcond[6]=((((-1.0)*r00*x14519*x14527))+((sj3*x14517))+((r01*x14515))+(((-1.0)*x14526))+x14514+((r02*x14529))+((r01*x14513*x14521)));
evalcond[7]=(((r20*x14521))+(((-1.0)*x14526))+x14514+(((-1.0)*sj3*x14522*x14527))+(((-1.0)*r22*sj3*x14528))+((r20*x14513*x14515))+((r21*x14519)));
evalcond[8]=((((-1.0)*x14523))+((r01*x14519))+((cj3*x14517))+((r00*x14513*x14515))+(((-1.0)*r02*sj3*x14528))+(((-1.0)*r01*x14524*x14527))+(((-1.0)*sj2*x14520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14531=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14531);
rxp0_2=(py*r00);
rxp1_0=(r21*x14531);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14532=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14532);
rxp0_2=(py*r00);
rxp1_0=(r21*x14532);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14533=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x14533))+((r01*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14533)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14534=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14534);
rxp0_2=(py*r00);
rxp1_0=(r21*x14534);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14535=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14535);
rxp0_2=(py*r00);
rxp1_0=(r21*x14535);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14536=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14536);
rxp0_2=(py*r00);
rxp1_0=(r21*x14536);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14537=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14537);
rxp0_2=(py*r00);
rxp1_0=(r21*x14537);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14540=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14540.valid){
continue;
}
IkReal x14538=x14540.value;
IkReal x14539=(cj0*x14538);
cj4array[0]=(((sj1*sj2*x14539))+(((-1.0)*cj1*cj2*x14539)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14541=IKsin(j4);
IkReal x14542=IKcos(j4);
IkReal x14543=(r21*sj5);
IkReal x14544=((1.0)*x14542);
IkReal x14545=((1.0)*cj5*x14541);
evalcond[0]=(r12*x14541);
evalcond[1]=((((-1.0)*r12*x14544))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14545))+((x14541*x14543)));
evalcond[3]=((((-1.0)*r00*x14545))+((r01*sj5*x14541)));
evalcond[4]=(((cj2*sj1))+((x14542*x14543))+((cj1*sj2))+(((-1.0)*cj5*r20*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14548=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14548.valid){
continue;
}
IkReal x14546=x14548.value;
IkReal x14547=((1.0)*x14546);
cj4array[0]=((((-1.0)*cj2*sj1*x14547))+(((-1.0)*cj1*sj2*x14547)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14549=IKsin(j4);
IkReal x14550=IKcos(j4);
IkReal x14551=((1.0)*cj0);
IkReal x14552=(r01*sj5);
IkReal x14553=((1.0)*cj5*r00);
evalcond[0]=(r12*x14549);
evalcond[1]=((((-1.0)*r12*x14550))+(((-1.0)*x14551)));
evalcond[2]=(((r21*sj5*x14549))+(((-1.0)*cj5*r20*x14549)));
evalcond[3]=(((x14549*x14552))+(((-1.0)*x14549*x14553)));
evalcond[4]=((((-1.0)*x14550*x14553))+(((-1.0)*sj1*sj2*x14551))+((cj0*cj1*cj2))+((x14550*x14552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14554=IKPowWithIntegerCheck(r12,-1);
if(!x14554.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14554.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14555=IKsin(j4);
IkReal x14556=IKcos(j4);
IkReal x14557=((1.0)*cj5*r00);
IkReal x14558=(sj5*x14556);
IkReal x14559=(sj5*x14555);
IkReal x14560=((1.0)*cj5*r20);
evalcond[0]=(r12*x14555);
evalcond[1]=((((-1.0)*x14555*x14560))+((r21*x14559)));
evalcond[2]=(((r01*x14559))+(((-1.0)*x14555*x14557)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14556*x14560))+((r21*x14558)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x14556*x14557))+((r01*x14558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14561=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14561);
rxp0_2=(py*r00);
rxp1_0=(r21*x14561);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14562=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14562);
rxp0_2=(py*r00);
rxp1_0=(r21*x14562);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14563=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14563);
rxp0_2=(py*r00);
rxp1_0=(r21*x14563);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14566=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14566.valid){
continue;
}
IkReal x14564=x14566.value;
IkReal x14565=(cj0*x14564);
cj4array[0]=((((-1.0)*cj1*cj2*x14565))+((sj1*sj2*x14565)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14567=IKsin(j4);
IkReal x14568=IKcos(j4);
IkReal x14569=(r21*sj5);
IkReal x14570=((1.0)*x14568);
IkReal x14571=((1.0)*cj5*x14567);
evalcond[0]=((-1.0)*r12*x14567);
evalcond[1]=((((-1.0)*r12*x14570))+(((-1.0)*cj0)));
evalcond[2]=(((x14567*x14569))+(((-1.0)*r20*x14571)));
evalcond[3]=((((-1.0)*r00*x14571))+((r01*sj5*x14567)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14569*x14570))+((cj5*r20*x14568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14574=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14574.valid){
continue;
}
IkReal x14572=x14574.value;
IkReal x14573=((1.0)*x14572);
cj4array[0]=((((-1.0)*cj1*sj2*x14573))+(((-1.0)*cj2*sj1*x14573)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14575=IKsin(j4);
IkReal x14576=IKcos(j4);
IkReal x14577=(cj5*r00);
IkReal x14578=((1.0)*cj0);
IkReal x14579=((1.0)*x14575);
IkReal x14580=(sj5*x14575);
IkReal x14581=((1.0)*x14576);
evalcond[0]=((-1.0)*r12*x14575);
evalcond[1]=((((-1.0)*x14578))+(((-1.0)*r12*x14581)));
evalcond[2]=((((-1.0)*cj5*r20*x14579))+((r21*x14580)));
evalcond[3]=((((-1.0)*x14577*x14579))+((r01*x14580)));
evalcond[4]=(((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x14578))+((x14576*x14577))+(((-1.0)*r01*sj5*x14581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14582=IKPowWithIntegerCheck(r12,-1);
if(!x14582.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14582.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14583=IKsin(j4);
IkReal x14584=IKcos(j4);
IkReal x14585=(cj5*r00);
IkReal x14586=(r21*sj5);
IkReal x14587=(cj5*r20);
IkReal x14588=(r01*sj5);
IkReal x14589=((1.0)*x14583);
IkReal x14590=((1.0)*x14584);
evalcond[0]=((-1.0)*r12*x14583);
evalcond[1]=((((-1.0)*x14587*x14589))+((x14583*x14586)));
evalcond[2]=((((-1.0)*x14585*x14589))+((x14583*x14588)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14586*x14590))+((x14584*x14587)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x14588*x14590))+((cj0*cj1*cj2))+((x14584*x14585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14591 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14591.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14591.value));
IkReal gconst67=r00;
IkReal gconst68=r01;
CheckValue<IkReal> x14592 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14592.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14592.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14593=((-1.0)*py);
CheckValue<IkReal> x14595 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14595.valid){
continue;
}
IkReal x14594=((-1.0)*(x14595.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14593);
rxp0_2=(py*r00);
rxp1_0=(r21*x14593);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14594;
IkReal gconst66=x14594;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14596=((-1.0)*py);
CheckValue<IkReal> x14598 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14598.valid){
continue;
}
IkReal x14597=((-1.0)*(x14598.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14596);
rxp0_2=(py*r00);
rxp1_0=(r21*x14596);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14597;
IkReal gconst66=x14597;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14599=((-1.0)*py);
CheckValue<IkReal> x14601 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14601.valid){
continue;
}
IkReal x14600=((-1.0)*(x14601.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14599);
rxp0_2=(py*r00);
rxp1_0=(r21*x14599);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14600;
IkReal gconst66=x14600;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj3*r01*r20))+((cj3*r00*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14602=(cj2*sj1);
IkReal x14603=(cj1*sj2);
IkReal x14604=((1.0)*gconst68);
CheckValue<IkReal> x14605=IKPowWithIntegerCheck(r12,-1);
if(!x14605.valid){
continue;
}
CheckValue<IkReal> x14606=IKPowWithIntegerCheck(sj3,-1);
if(!x14606.valid){
continue;
}
CheckValue<IkReal> x14607=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x14604))),-1);
if(!x14607.valid){
continue;
}
if( IKabs(((x14605.value)*(x14606.value)*((((sj0*x14602))+((sj0*x14603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14607.value)*(((((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14603))+(((-1.0)*x14602))+(((-1.0)*r21*sj3*x14604)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14605.value)*(x14606.value)*((((sj0*x14602))+((sj0*x14603))))))+IKsqr(((x14607.value)*(((((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14603))+(((-1.0)*x14602))+(((-1.0)*r21*sj3*x14604))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14605.value)*(x14606.value)*((((sj0*x14602))+((sj0*x14603))))), ((x14607.value)*(((((-1.0)*gconst67*r20*sj3))+(((-1.0)*x14603))+(((-1.0)*x14602))+(((-1.0)*r21*sj3*x14604))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14608=IKsin(j4);
IkReal x14609=IKcos(j4);
IkReal x14610=((1.0)*sj3);
IkReal x14611=(cj2*sj0);
IkReal x14612=(gconst68*sj3);
IkReal x14613=(sj1*sj2);
IkReal x14614=(cj1*cj2);
IkReal x14615=(cj3*r20);
IkReal x14616=(gconst67*r00);
IkReal x14617=(cj2*sj1);
IkReal x14618=(cj3*gconst68);
IkReal x14619=(cj1*sj2);
IkReal x14620=((1.0)*cj0);
IkReal x14621=(r12*x14608);
IkReal x14622=(gconst67*x14609);
IkReal x14623=((1.0)*x14609);
IkReal x14624=(gconst67*x14608);
IkReal x14625=((1.0)*gconst68*x14608);
evalcond[0]=((((-1.0)*x14620))+(((-1.0)*r12*x14623)));
evalcond[1]=(((r21*x14624))+(((-1.0)*r20*x14625)));
evalcond[2]=(sj0+(((-1.0)*r00*x14625))+((r01*x14624)));
evalcond[3]=(((sj0*x14619))+((sj1*x14611))+(((-1.0)*x14610*x14621)));
evalcond[4]=(((cj1*x14611))+((cj3*x14621))+(((-1.0)*sj0*x14613)));
evalcond[5]=(((r21*x14612))+((gconst67*r20*sj3))+x14619+x14617+((cj3*r21*x14622))+(((-1.0)*gconst68*x14615*x14623)));
evalcond[6]=(((gconst67*x14615))+((r20*x14609*x14612))+((r21*x14618))+(((-1.0)*r21*x14610*x14622))+(((-1.0)*x14614))+x14613);
evalcond[7]=(((cj0*x14619))+((cj0*x14617))+((r01*x14618))+(((-1.0)*r01*x14610*x14622))+((cj3*x14616))+((r00*x14609*x14612)));
evalcond[8]=((((-1.0)*r00*x14618*x14623))+(((-1.0)*x14613*x14620))+((cj0*x14614))+((cj3*r01*x14622))+((r01*x14612))+((sj3*x14616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14627=IKPowWithIntegerCheck(r12,-1);
if(!x14627.valid){
continue;
}
IkReal x14626=x14627.value;
CheckValue<IkReal> x14628=IKPowWithIntegerCheck(cj3,-1);
if(!x14628.valid){
continue;
}
if( IKabs((x14626*(x14628.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14626)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14626*(x14628.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14626))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14626*(x14628.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14626));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14629=IKsin(j4);
IkReal x14630=IKcos(j4);
IkReal x14631=((1.0)*sj3);
IkReal x14632=(cj2*sj0);
IkReal x14633=(gconst68*sj3);
IkReal x14634=(sj1*sj2);
IkReal x14635=(cj1*cj2);
IkReal x14636=(cj3*r20);
IkReal x14637=(gconst67*r00);
IkReal x14638=(cj2*sj1);
IkReal x14639=(cj3*gconst68);
IkReal x14640=(cj1*sj2);
IkReal x14641=((1.0)*cj0);
IkReal x14642=(r12*x14629);
IkReal x14643=(gconst67*x14630);
IkReal x14644=((1.0)*x14630);
IkReal x14645=(gconst67*x14629);
IkReal x14646=((1.0)*gconst68*x14629);
evalcond[0]=((((-1.0)*r12*x14644))+(((-1.0)*x14641)));
evalcond[1]=(((r21*x14645))+(((-1.0)*r20*x14646)));
evalcond[2]=(sj0+((r01*x14645))+(((-1.0)*r00*x14646)));
evalcond[3]=(((sj0*x14640))+(((-1.0)*x14631*x14642))+((sj1*x14632)));
evalcond[4]=((((-1.0)*sj0*x14634))+((cj1*x14632))+((cj3*x14642)));
evalcond[5]=(((cj3*r21*x14643))+((gconst67*r20*sj3))+(((-1.0)*gconst68*x14636*x14644))+x14640+x14638+((r21*x14633)));
evalcond[6]=(((r20*x14630*x14633))+(((-1.0)*r21*x14631*x14643))+((gconst67*x14636))+x14634+(((-1.0)*x14635))+((r21*x14639)));
evalcond[7]=(((cj0*x14640))+(((-1.0)*r01*x14631*x14643))+((cj3*x14637))+((cj0*x14638))+((r01*x14639))+((r00*x14630*x14633)));
evalcond[8]=((((-1.0)*r00*x14639*x14644))+((sj3*x14637))+((cj0*x14635))+((r01*x14633))+((cj3*r01*x14643))+(((-1.0)*x14634*x14641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14648=IKPowWithIntegerCheck(r12,-1);
if(!x14648.valid){
continue;
}
IkReal x14647=x14648.value;
CheckValue<IkReal> x14649=IKPowWithIntegerCheck(sj3,-1);
if(!x14649.valid){
continue;
}
if( IKabs((x14647*(x14649.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14647)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14647*(x14649.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14647))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14647*(x14649.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14647));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14650=IKsin(j4);
IkReal x14651=IKcos(j4);
IkReal x14652=((1.0)*sj3);
IkReal x14653=(cj2*sj0);
IkReal x14654=(gconst68*sj3);
IkReal x14655=(sj1*sj2);
IkReal x14656=(cj1*cj2);
IkReal x14657=(cj3*r20);
IkReal x14658=(gconst67*r00);
IkReal x14659=(cj2*sj1);
IkReal x14660=(cj3*gconst68);
IkReal x14661=(cj1*sj2);
IkReal x14662=((1.0)*cj0);
IkReal x14663=(r12*x14650);
IkReal x14664=(gconst67*x14651);
IkReal x14665=((1.0)*x14651);
IkReal x14666=(gconst67*x14650);
IkReal x14667=((1.0)*gconst68*x14650);
evalcond[0]=((((-1.0)*r12*x14665))+(((-1.0)*x14662)));
evalcond[1]=(((r21*x14666))+(((-1.0)*r20*x14667)));
evalcond[2]=(sj0+((r01*x14666))+(((-1.0)*r00*x14667)));
evalcond[3]=(((sj0*x14661))+((sj1*x14653))+(((-1.0)*x14652*x14663)));
evalcond[4]=(((cj3*x14663))+(((-1.0)*sj0*x14655))+((cj1*x14653)));
evalcond[5]=(((cj3*r21*x14664))+((gconst67*r20*sj3))+x14659+x14661+((r21*x14654))+(((-1.0)*gconst68*x14657*x14665)));
evalcond[6]=(((gconst67*x14657))+(((-1.0)*x14656))+((r21*x14660))+(((-1.0)*r21*x14652*x14664))+x14655+((r20*x14651*x14654)));
evalcond[7]=(((cj0*x14659))+((cj0*x14661))+((r01*x14660))+((r00*x14651*x14654))+((cj3*x14658))+(((-1.0)*r01*x14652*x14664)));
evalcond[8]=((((-1.0)*r00*x14660*x14665))+(((-1.0)*x14655*x14662))+((cj0*x14656))+((r01*x14654))+((sj3*x14658))+((cj3*r01*x14664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14668=((-1.0)*r00);
CheckValue<IkReal> x14669 = IKatan2WithCheck(IkReal(x14668),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14669.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14669.value))));
IkReal gconst70=x14668;
IkReal gconst71=((-1.0)*r01);
CheckValue<IkReal> x14670 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14670.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14670.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14671=((-1.0)*r00);
IkReal x14672=((-1.0)*py);
CheckValue<IkReal> x14674 = IKatan2WithCheck(IkReal(x14671),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14674.valid){
continue;
}
IkReal x14673=((1.0)*(x14674.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14672);
rxp0_2=(py*r00);
rxp1_0=(r21*x14672);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14673)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14673)));
IkReal gconst70=x14671;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14675=((-1.0)*r00);
IkReal x14676=((-1.0)*py);
CheckValue<IkReal> x14678 = IKatan2WithCheck(IkReal(x14675),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14678.valid){
continue;
}
IkReal x14677=((1.0)*(x14678.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14676);
rxp0_2=(py*r00);
rxp1_0=(r21*x14676);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14677)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14677)));
IkReal gconst70=x14675;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14679=((-1.0)*r00);
IkReal x14680=((-1.0)*py);
CheckValue<IkReal> x14682 = IKatan2WithCheck(IkReal(x14679),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14682.valid){
continue;
}
IkReal x14681=((1.0)*(x14682.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14680);
rxp0_2=(py*r00);
rxp1_0=(r21*x14680);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14681)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14681)));
IkReal gconst70=x14679;
IkReal gconst71=((-1.0)*r01);
IkReal x14683=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*x14683))+((r01*r20*x14683)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14684=(cj2*sj1);
IkReal x14685=(cj1*sj2);
IkReal x14686=((1.0)*gconst71);
CheckValue<IkReal> x14687=IKPowWithIntegerCheck(r12,-1);
if(!x14687.valid){
continue;
}
CheckValue<IkReal> x14688=IKPowWithIntegerCheck(sj3,-1);
if(!x14688.valid){
continue;
}
CheckValue<IkReal> x14689=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*r20*x14686))),-1);
if(!x14689.valid){
continue;
}
if( IKabs(((x14687.value)*(x14688.value)*((((sj0*x14685))+((sj0*x14684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14689.value)*(((((-1.0)*r21*sj3*x14686))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14684))+(((-1.0)*x14685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14687.value)*(x14688.value)*((((sj0*x14685))+((sj0*x14684))))))+IKsqr(((x14689.value)*(((((-1.0)*r21*sj3*x14686))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14684))+(((-1.0)*x14685))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14687.value)*(x14688.value)*((((sj0*x14685))+((sj0*x14684))))), ((x14689.value)*(((((-1.0)*r21*sj3*x14686))+(((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14684))+(((-1.0)*x14685))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14690=IKsin(j4);
IkReal x14691=IKcos(j4);
IkReal x14692=(cj1*sj0);
IkReal x14693=(cj3*r21);
IkReal x14694=(sj1*sj2);
IkReal x14695=(gconst71*r20);
IkReal x14696=(cj3*r00);
IkReal x14697=(r21*sj3);
IkReal x14698=(cj1*cj2);
IkReal x14699=(gconst70*r20);
IkReal x14700=(cj2*sj1);
IkReal x14701=(cj3*r01);
IkReal x14702=(gconst71*r00);
IkReal x14703=(r01*sj3);
IkReal x14704=(cj1*sj2);
IkReal x14705=((1.0)*cj0);
IkReal x14706=((1.0)*x14690);
IkReal x14707=(gconst70*x14690);
IkReal x14708=(gconst70*x14691);
IkReal x14709=((1.0)*x14691);
IkReal x14710=(sj3*x14691);
evalcond[0]=((((-1.0)*x14705))+(((-1.0)*r12*x14709)));
evalcond[1]=(((r21*x14707))+(((-1.0)*x14695*x14706)));
evalcond[2]=(sj0+((r01*x14707))+(((-1.0)*x14702*x14706)));
evalcond[3]=(((sj0*x14700))+(((-1.0)*r12*sj3*x14706))+((sj2*x14692)));
evalcond[4]=((((-1.0)*sj0*x14694))+((cj2*x14692))+((cj3*r12*x14690)));
evalcond[5]=(((sj3*x14699))+(((-1.0)*cj3*x14695*x14709))+((x14693*x14708))+x14704+x14700+((gconst71*x14697)));
evalcond[6]=(((cj3*x14699))+((x14695*x14710))+(((-1.0)*x14697*x14708))+x14694+((gconst71*x14693))+(((-1.0)*x14698)));
evalcond[7]=(((cj0*x14704))+((cj0*x14700))+((gconst71*x14701))+((x14702*x14710))+((gconst70*x14696))+(((-1.0)*x14703*x14708)));
evalcond[8]=(((cj0*x14698))+((x14701*x14708))+((gconst71*x14703))+(((-1.0)*x14694*x14705))+((gconst70*r00*sj3))+(((-1.0)*gconst71*x14696*x14709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14712=IKPowWithIntegerCheck(r12,-1);
if(!x14712.valid){
continue;
}
IkReal x14711=x14712.value;
CheckValue<IkReal> x14713=IKPowWithIntegerCheck(cj3,-1);
if(!x14713.valid){
continue;
}
if( IKabs((x14711*(x14713.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14711)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14711*(x14713.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14711))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14711*(x14713.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14711));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14714=IKsin(j4);
IkReal x14715=IKcos(j4);
IkReal x14716=(cj1*sj0);
IkReal x14717=(cj3*r21);
IkReal x14718=(sj1*sj2);
IkReal x14719=(gconst71*r20);
IkReal x14720=(cj3*r00);
IkReal x14721=(r21*sj3);
IkReal x14722=(cj1*cj2);
IkReal x14723=(gconst70*r20);
IkReal x14724=(cj2*sj1);
IkReal x14725=(cj3*r01);
IkReal x14726=(gconst71*r00);
IkReal x14727=(r01*sj3);
IkReal x14728=(cj1*sj2);
IkReal x14729=((1.0)*cj0);
IkReal x14730=((1.0)*x14714);
IkReal x14731=(gconst70*x14714);
IkReal x14732=(gconst70*x14715);
IkReal x14733=((1.0)*x14715);
IkReal x14734=(sj3*x14715);
evalcond[0]=((((-1.0)*r12*x14733))+(((-1.0)*x14729)));
evalcond[1]=((((-1.0)*x14719*x14730))+((r21*x14731)));
evalcond[2]=(((r01*x14731))+sj0+(((-1.0)*x14726*x14730)));
evalcond[3]=(((sj0*x14724))+((sj2*x14716))+(((-1.0)*r12*sj3*x14730)));
evalcond[4]=(((cj2*x14716))+(((-1.0)*sj0*x14718))+((cj3*r12*x14714)));
evalcond[5]=((((-1.0)*cj3*x14719*x14733))+((sj3*x14723))+x14728+x14724+((x14717*x14732))+((gconst71*x14721)));
evalcond[6]=((((-1.0)*x14722))+((x14719*x14734))+((cj3*x14723))+x14718+((gconst71*x14717))+(((-1.0)*x14721*x14732)));
evalcond[7]=((((-1.0)*x14727*x14732))+((cj0*x14728))+((cj0*x14724))+((gconst70*x14720))+((x14726*x14734))+((gconst71*x14725)));
evalcond[8]=((((-1.0)*x14718*x14729))+((cj0*x14722))+((gconst70*r00*sj3))+(((-1.0)*gconst71*x14720*x14733))+((x14725*x14732))+((gconst71*x14727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14736=IKPowWithIntegerCheck(r12,-1);
if(!x14736.valid){
continue;
}
IkReal x14735=x14736.value;
CheckValue<IkReal> x14737=IKPowWithIntegerCheck(sj3,-1);
if(!x14737.valid){
continue;
}
if( IKabs((x14735*(x14737.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14735)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14735*(x14737.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14735))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14735*(x14737.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14735));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14738=IKsin(j4);
IkReal x14739=IKcos(j4);
IkReal x14740=(cj1*sj0);
IkReal x14741=(cj3*r21);
IkReal x14742=(sj1*sj2);
IkReal x14743=(gconst71*r20);
IkReal x14744=(cj3*r00);
IkReal x14745=(r21*sj3);
IkReal x14746=(cj1*cj2);
IkReal x14747=(gconst70*r20);
IkReal x14748=(cj2*sj1);
IkReal x14749=(cj3*r01);
IkReal x14750=(gconst71*r00);
IkReal x14751=(r01*sj3);
IkReal x14752=(cj1*sj2);
IkReal x14753=((1.0)*cj0);
IkReal x14754=((1.0)*x14738);
IkReal x14755=(gconst70*x14738);
IkReal x14756=(gconst70*x14739);
IkReal x14757=((1.0)*x14739);
IkReal x14758=(sj3*x14739);
evalcond[0]=((((-1.0)*r12*x14757))+(((-1.0)*x14753)));
evalcond[1]=((((-1.0)*x14743*x14754))+((r21*x14755)));
evalcond[2]=(sj0+(((-1.0)*x14750*x14754))+((r01*x14755)));
evalcond[3]=(((sj2*x14740))+(((-1.0)*r12*sj3*x14754))+((sj0*x14748)));
evalcond[4]=(((cj2*x14740))+((cj3*r12*x14738))+(((-1.0)*sj0*x14742)));
evalcond[5]=(((sj3*x14747))+(((-1.0)*cj3*x14743*x14757))+((gconst71*x14745))+x14752+x14748+((x14741*x14756)));
evalcond[6]=(((cj3*x14747))+((gconst71*x14741))+(((-1.0)*x14746))+x14742+(((-1.0)*x14745*x14756))+((x14743*x14758)));
evalcond[7]=(((cj0*x14748))+((gconst71*x14749))+(((-1.0)*x14751*x14756))+((cj0*x14752))+((gconst70*x14744))+((x14750*x14758)));
evalcond[8]=(((x14749*x14756))+((cj0*x14746))+(((-1.0)*x14742*x14753))+(((-1.0)*gconst71*x14744*x14757))+((gconst70*r00*sj3))+((gconst71*x14751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14759=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14759);
rxp0_2=(py*r00);
rxp1_0=(r21*x14759);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14760=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14760);
rxp0_2=(py*r00);
rxp1_0=(r21*x14760);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14761=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14761);
rxp0_2=(py*r00);
rxp1_0=(r21*x14761);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14764=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14764.valid){
continue;
}
IkReal x14762=x14764.value;
IkReal x14763=((1.0)*cj0*x14762);
cj4array[0]=((((-1.0)*cj1*sj2*x14763))+(((-1.0)*cj2*sj1*x14763)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14765=IKsin(j4);
IkReal x14766=IKcos(j4);
IkReal x14767=(r21*sj5);
IkReal x14768=((1.0)*x14766);
IkReal x14769=((1.0)*cj5*x14765);
evalcond[0]=((-1.0)*r12*x14765);
evalcond[1]=((((-1.0)*r12*x14768))+(((-1.0)*cj0)));
evalcond[2]=(((x14765*x14767))+(((-1.0)*r20*x14769)));
evalcond[3]=((((-1.0)*r00*x14769))+((r01*sj5*x14765)));
evalcond[4]=(((cj5*r20*x14766))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14767*x14768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14771=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14771.valid){
continue;
}
IkReal x14770=x14771.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14770))+((cj1*cj2*x14770)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14772=IKsin(j4);
IkReal x14773=IKcos(j4);
IkReal x14774=(cj5*r00);
IkReal x14775=((1.0)*x14772);
IkReal x14776=(sj5*x14772);
IkReal x14777=((1.0)*x14773);
evalcond[0]=((-1.0)*r12*x14772);
evalcond[1]=((((-1.0)*r12*x14777))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14775))+((r21*x14776)));
evalcond[3]=(((r01*x14776))+(((-1.0)*x14774*x14775)));
evalcond[4]=(((x14773*x14774))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*sj5*x14777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14778=IKPowWithIntegerCheck(r12,-1);
if(!x14778.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14778.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14779=IKsin(j4);
IkReal x14780=IKcos(j4);
IkReal x14781=(cj5*r00);
IkReal x14782=(cj5*r20);
IkReal x14783=(r21*sj5);
IkReal x14784=(r01*sj5);
IkReal x14785=((1.0)*x14779);
IkReal x14786=((1.0)*x14780);
evalcond[0]=((-1.0)*r12*x14779);
evalcond[1]=(((x14779*x14783))+(((-1.0)*x14782*x14785)));
evalcond[2]=(((x14779*x14784))+(((-1.0)*x14781*x14785)));
evalcond[3]=(((x14780*x14782))+(((-1.0)*x14783*x14786))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x14780*x14781))+(((-1.0)*x14784*x14786))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14787=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14787);
rxp0_2=(py*r00);
rxp1_0=(r21*x14787);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14788=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14788);
rxp0_2=(py*r00);
rxp1_0=(r21*x14788);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14789=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14789);
rxp0_2=(py*r00);
rxp1_0=(r21*x14789);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14792=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14792.valid){
continue;
}
IkReal x14790=x14792.value;
IkReal x14791=((1.0)*cj0*x14790);
cj4array[0]=((((-1.0)*cj1*sj2*x14791))+(((-1.0)*cj2*sj1*x14791)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14793=IKsin(j4);
IkReal x14794=IKcos(j4);
IkReal x14795=(r21*sj5);
IkReal x14796=((1.0)*x14794);
IkReal x14797=((1.0)*cj5*x14793);
evalcond[0]=(r12*x14793);
evalcond[1]=((((-1.0)*r12*x14796))+(((-1.0)*cj0)));
evalcond[2]=(((x14793*x14795))+(((-1.0)*r20*x14797)));
evalcond[3]=((((-1.0)*r00*x14797))+((r01*sj5*x14793)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14794*x14795))+(((-1.0)*cj5*r20*x14796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14799=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14799.valid){
continue;
}
IkReal x14798=x14799.value;
cj4array[0]=(((cj1*cj2*x14798))+(((-1.0)*sj1*sj2*x14798)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14800=IKsin(j4);
IkReal x14801=IKcos(j4);
IkReal x14802=(r01*sj5);
IkReal x14803=((1.0)*cj5*r00);
evalcond[0]=(r12*x14800);
evalcond[1]=((((-1.0)*r12*x14801))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x14800))+(((-1.0)*cj5*r20*x14800)));
evalcond[3]=(((x14800*x14802))+(((-1.0)*x14800*x14803)));
evalcond[4]=((((-1.0)*x14801*x14803))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x14801*x14802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14804=IKPowWithIntegerCheck(r12,-1);
if(!x14804.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14804.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14805=IKsin(j4);
IkReal x14806=IKcos(j4);
IkReal x14807=(sj5*x14806);
IkReal x14808=(sj5*x14805);
IkReal x14809=((1.0)*cj5*x14805);
IkReal x14810=((1.0)*cj5*x14806);
evalcond[0]=(r12*x14805);
evalcond[1]=((((-1.0)*r20*x14809))+((r21*x14808)));
evalcond[2]=((((-1.0)*r00*x14809))+((r01*x14808)));
evalcond[3]=((((-1.0)*r20*x14810))+((r21*x14807))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r00*x14810))+((r01*x14807))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14812=IKPowWithIntegerCheck(r12,-1);
if(!x14812.valid){
continue;
}
IkReal x14811=x14812.value;
CheckValue<IkReal> x14813=IKPowWithIntegerCheck(sj3,-1);
if(!x14813.valid){
continue;
}
if( IKabs((x14811*(x14813.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14811)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14811*(x14813.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14811))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14811*(x14813.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14811));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14814=IKsin(j4);
IkReal x14815=IKcos(j4);
IkReal x14816=(cj2*sj0);
IkReal x14817=(sj1*sj2);
IkReal x14818=(cj5*sj3);
IkReal x14819=(cj3*cj5);
IkReal x14820=(cj1*cj2);
IkReal x14821=(r21*sj5);
IkReal x14822=(r00*sj5);
IkReal x14823=(cj2*sj1);
IkReal x14824=(r01*sj5);
IkReal x14825=(r20*sj5);
IkReal x14826=(cj1*sj2);
IkReal x14827=((1.0)*cj0);
IkReal x14828=((1.0)*x14814);
IkReal x14829=(r20*x14815);
IkReal x14830=(r00*x14815);
IkReal x14831=(cj3*x14815);
IkReal x14832=((1.0)*x14815);
evalcond[0]=((((-1.0)*r12*x14832))+(((-1.0)*x14827)));
evalcond[1]=(((x14814*x14821))+(((-1.0)*cj5*r20*x14828)));
evalcond[2]=(((x14814*x14824))+sj0+(((-1.0)*cj5*r00*x14828)));
evalcond[3]=(((sj0*x14826))+(((-1.0)*r12*sj3*x14828))+((sj1*x14816)));
evalcond[4]=(((cj1*x14816))+(((-1.0)*sj0*x14817))+((cj3*r12*x14814)));
evalcond[5]=(((sj3*x14825))+x14823+x14826+((r21*x14818))+((x14821*x14831))+(((-1.0)*x14819*x14829)));
evalcond[6]=(((cj3*x14825))+(((-1.0)*sj3*x14821*x14832))+x14817+((r21*x14819))+((x14818*x14829))+(((-1.0)*x14820)));
evalcond[7]=(((cj3*x14822))+((x14818*x14830))+((r01*x14819))+((cj0*x14826))+((cj0*x14823))+(((-1.0)*sj3*x14824*x14832)));
evalcond[8]=(((sj3*x14822))+(((-1.0)*x14817*x14827))+(((-1.0)*x14819*x14830))+((r01*x14818))+((cj0*x14820))+((x14824*x14831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14833=((1.0)*sj3);
IkReal x14834=((1.0)*cj5);
CheckValue<IkReal> x14835=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14834))),-1);
if(!x14835.valid){
continue;
}
CheckValue<IkReal> x14836=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14834))),-1);
if(!x14836.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14835.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14836.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x14833))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14833)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14835.value)))+IKsqr(((x14836.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x14833))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14833))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14835.value)), ((x14836.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x14833))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14833))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14837=IKsin(j4);
IkReal x14838=IKcos(j4);
IkReal x14839=(cj2*sj0);
IkReal x14840=(sj1*sj2);
IkReal x14841=(cj5*sj3);
IkReal x14842=(cj3*cj5);
IkReal x14843=(cj1*cj2);
IkReal x14844=(r21*sj5);
IkReal x14845=(r00*sj5);
IkReal x14846=(cj2*sj1);
IkReal x14847=(r01*sj5);
IkReal x14848=(r20*sj5);
IkReal x14849=(cj1*sj2);
IkReal x14850=((1.0)*cj0);
IkReal x14851=((1.0)*x14837);
IkReal x14852=(r20*x14838);
IkReal x14853=(r00*x14838);
IkReal x14854=(cj3*x14838);
IkReal x14855=((1.0)*x14838);
evalcond[0]=((((-1.0)*x14850))+(((-1.0)*r12*x14855)));
evalcond[1]=((((-1.0)*cj5*r20*x14851))+((x14837*x14844)));
evalcond[2]=(((x14837*x14847))+sj0+(((-1.0)*cj5*r00*x14851)));
evalcond[3]=(((sj0*x14849))+(((-1.0)*r12*sj3*x14851))+((sj1*x14839)));
evalcond[4]=((((-1.0)*sj0*x14840))+((cj3*r12*x14837))+((cj1*x14839)));
evalcond[5]=(((x14844*x14854))+x14849+x14846+((sj3*x14848))+(((-1.0)*x14842*x14852))+((r21*x14841)));
evalcond[6]=((((-1.0)*x14843))+((x14841*x14852))+(((-1.0)*sj3*x14844*x14855))+x14840+((cj3*x14848))+((r21*x14842)));
evalcond[7]=(((cj0*x14846))+((cj0*x14849))+((x14841*x14853))+(((-1.0)*sj3*x14847*x14855))+((cj3*x14845))+((r01*x14842)));
evalcond[8]=(((cj0*x14843))+((sj3*x14845))+((x14847*x14854))+((r01*x14841))+(((-1.0)*x14840*x14850))+(((-1.0)*x14842*x14853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14856=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14856.valid){
continue;
}
CheckValue<IkReal> x14857=IKPowWithIntegerCheck(r12,-1);
if(!x14857.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14856.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14857.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14856.value)))+IKsqr(((-1.0)*cj0*(x14857.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14856.value)), ((-1.0)*cj0*(x14857.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14858=IKsin(j4);
IkReal x14859=IKcos(j4);
IkReal x14860=(cj2*sj0);
IkReal x14861=(sj1*sj2);
IkReal x14862=(cj5*sj3);
IkReal x14863=(cj3*cj5);
IkReal x14864=(cj1*cj2);
IkReal x14865=(r21*sj5);
IkReal x14866=(r00*sj5);
IkReal x14867=(cj2*sj1);
IkReal x14868=(r01*sj5);
IkReal x14869=(r20*sj5);
IkReal x14870=(cj1*sj2);
IkReal x14871=((1.0)*cj0);
IkReal x14872=((1.0)*x14858);
IkReal x14873=(r20*x14859);
IkReal x14874=(r00*x14859);
IkReal x14875=(cj3*x14859);
IkReal x14876=((1.0)*x14859);
evalcond[0]=((((-1.0)*r12*x14876))+(((-1.0)*x14871)));
evalcond[1]=(((x14858*x14865))+(((-1.0)*cj5*r20*x14872)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14872))+((x14858*x14868)));
evalcond[3]=(((sj1*x14860))+(((-1.0)*r12*sj3*x14872))+((sj0*x14870)));
evalcond[4]=((((-1.0)*sj0*x14861))+((cj1*x14860))+((cj3*r12*x14858)));
evalcond[5]=((((-1.0)*x14863*x14873))+((x14865*x14875))+x14870+x14867+((sj3*x14869))+((r21*x14862)));
evalcond[6]=(x14861+(((-1.0)*sj3*x14865*x14876))+((x14862*x14873))+((r21*x14863))+((cj3*x14869))+(((-1.0)*x14864)));
evalcond[7]=(((cj0*x14870))+((x14862*x14874))+((r01*x14863))+(((-1.0)*sj3*x14868*x14876))+((cj3*x14866))+((cj0*x14867)));
evalcond[8]=((((-1.0)*x14863*x14874))+((x14868*x14875))+((sj3*x14866))+((r01*x14862))+(((-1.0)*x14861*x14871))+((cj0*x14864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14877=((1.0)*cj5);
CheckValue<IkReal> x14878 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x14877))+(((-1.0)*cj0*r00*x14877))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14878.valid){
continue;
}
CheckValue<IkReal> x14879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14877))+(((-1.0)*r20*sj5)))),-1);
if(!x14879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14878.value)+(((1.5707963267949)*(x14879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14880=IKsin(j4);
IkReal x14881=IKcos(j4);
IkReal x14882=(r11*sj5);
IkReal x14883=(cj2*sj0);
IkReal x14884=(cj5*r10);
IkReal x14885=(sj1*sj2);
IkReal x14886=(cj5*r01);
IkReal x14887=(cj5*r00);
IkReal x14888=(cj1*cj2);
IkReal x14889=(cj3*sj5);
IkReal x14890=(r21*sj5);
IkReal x14891=(cj5*sj3);
IkReal x14892=(sj3*sj5);
IkReal x14893=(cj2*sj1);
IkReal x14894=(r01*sj5);
IkReal x14895=(cj3*cj5);
IkReal x14896=(cj1*sj2);
IkReal x14897=((1.0)*cj0);
IkReal x14898=(cj5*r20);
IkReal x14899=((1.0)*x14881);
IkReal x14900=((1.0)*x14880);
IkReal x14901=(cj3*x14881);
IkReal x14902=(sj3*x14881);
IkReal x14903=(cj3*x14880);
evalcond[0]=((((-1.0)*r22*x14899))+((x14880*x14890))+(((-1.0)*x14898*x14900)));
evalcond[1]=(sj0+(((-1.0)*x14887*x14900))+((x14880*x14894))+(((-1.0)*r02*x14899)));
evalcond[2]=((((-1.0)*x14884*x14900))+((x14880*x14882))+(((-1.0)*x14897))+(((-1.0)*r12*x14899)));
evalcond[3]=(((r22*x14903))+(((-1.0)*r20*x14895*x14899))+x14896+x14893+((r21*x14891))+((r21*x14881*x14889))+((r20*x14892)));
evalcond[4]=(x14885+((r21*x14895))+(((-1.0)*r22*sj3*x14900))+((r20*x14889))+(((-1.0)*x14888))+(((-1.0)*sj3*x14890*x14899))+((r20*x14881*x14891)));
evalcond[5]=(((x14887*x14902))+(((-1.0)*r01*x14892*x14899))+((r00*x14889))+(((-1.0)*r02*sj3*x14900))+((cj3*x14886))+((cj0*x14896))+((cj0*x14893)));
evalcond[6]=((((-1.0)*cj3*x14887*x14899))+((cj0*x14888))+(((-1.0)*x14885*x14897))+((r00*x14892))+((r02*x14903))+((sj3*x14886))+((r01*x14881*x14889)));
evalcond[7]=(((r10*x14889))+((r11*x14895))+(((-1.0)*sj3*x14882*x14899))+((sj0*x14896))+((sj1*x14883))+((x14884*x14902))+(((-1.0)*r12*sj3*x14900)));
evalcond[8]=(((r10*x14892))+((x14882*x14901))+((r11*x14891))+((r12*x14903))+((cj1*x14883))+(((-1.0)*cj3*x14884*x14899))+(((-1.0)*sj0*x14885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14904=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14904.valid){
continue;
}
CheckValue<IkReal> x14905 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14904.value)))+(x14905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14906=IKsin(j4);
IkReal x14907=IKcos(j4);
IkReal x14908=(r11*sj5);
IkReal x14909=(cj2*sj0);
IkReal x14910=(cj5*r10);
IkReal x14911=(sj1*sj2);
IkReal x14912=(cj5*r01);
IkReal x14913=(cj5*r00);
IkReal x14914=(cj1*cj2);
IkReal x14915=(cj3*sj5);
IkReal x14916=(r21*sj5);
IkReal x14917=(cj5*sj3);
IkReal x14918=(sj3*sj5);
IkReal x14919=(cj2*sj1);
IkReal x14920=(r01*sj5);
IkReal x14921=(cj3*cj5);
IkReal x14922=(cj1*sj2);
IkReal x14923=((1.0)*cj0);
IkReal x14924=(cj5*r20);
IkReal x14925=((1.0)*x14907);
IkReal x14926=((1.0)*x14906);
IkReal x14927=(cj3*x14907);
IkReal x14928=(sj3*x14907);
IkReal x14929=(cj3*x14906);
evalcond[0]=(((x14906*x14916))+(((-1.0)*r22*x14925))+(((-1.0)*x14924*x14926)));
evalcond[1]=(sj0+((x14906*x14920))+(((-1.0)*r02*x14925))+(((-1.0)*x14913*x14926)));
evalcond[2]=(((x14906*x14908))+(((-1.0)*x14923))+(((-1.0)*x14910*x14926))+(((-1.0)*r12*x14925)));
evalcond[3]=(((r21*x14917))+((r21*x14907*x14915))+(((-1.0)*r20*x14921*x14925))+x14922+x14919+((r20*x14918))+((r22*x14929)));
evalcond[4]=(x14911+(((-1.0)*r22*sj3*x14926))+(((-1.0)*x14914))+((r21*x14921))+((r20*x14907*x14917))+((r20*x14915))+(((-1.0)*sj3*x14916*x14925)));
evalcond[5]=(((cj3*x14912))+((r00*x14915))+(((-1.0)*r02*sj3*x14926))+((cj0*x14922))+((x14913*x14928))+(((-1.0)*r01*x14918*x14925))+((cj0*x14919)));
evalcond[6]=(((r01*x14907*x14915))+((r00*x14918))+((sj3*x14912))+(((-1.0)*x14911*x14923))+(((-1.0)*cj3*x14913*x14925))+((r02*x14929))+((cj0*x14914)));
evalcond[7]=(((r10*x14915))+(((-1.0)*sj3*x14908*x14925))+((sj0*x14922))+(((-1.0)*r12*sj3*x14926))+((sj1*x14909))+((x14910*x14928))+((r11*x14921)));
evalcond[8]=(((r10*x14918))+(((-1.0)*sj0*x14911))+((x14908*x14927))+((cj1*x14909))+((r11*x14917))+(((-1.0)*cj3*x14910*x14925))+((r12*x14929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14930=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14930.valid){
continue;
}
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14930.value)))+(x14931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14932=IKsin(j4);
IkReal x14933=IKcos(j4);
IkReal x14934=(r11*sj5);
IkReal x14935=(cj2*sj0);
IkReal x14936=(cj5*r10);
IkReal x14937=(sj1*sj2);
IkReal x14938=(cj5*r01);
IkReal x14939=(cj5*r00);
IkReal x14940=(cj1*cj2);
IkReal x14941=(cj3*sj5);
IkReal x14942=(r21*sj5);
IkReal x14943=(cj5*sj3);
IkReal x14944=(sj3*sj5);
IkReal x14945=(cj2*sj1);
IkReal x14946=(r01*sj5);
IkReal x14947=(cj3*cj5);
IkReal x14948=(cj1*sj2);
IkReal x14949=((1.0)*cj0);
IkReal x14950=(cj5*r20);
IkReal x14951=((1.0)*x14933);
IkReal x14952=((1.0)*x14932);
IkReal x14953=(cj3*x14933);
IkReal x14954=(sj3*x14933);
IkReal x14955=(cj3*x14932);
evalcond[0]=(((x14932*x14942))+(((-1.0)*x14950*x14952))+(((-1.0)*r22*x14951)));
evalcond[1]=(sj0+(((-1.0)*r02*x14951))+(((-1.0)*x14939*x14952))+((x14932*x14946)));
evalcond[2]=(((x14932*x14934))+(((-1.0)*x14936*x14952))+(((-1.0)*r12*x14951))+(((-1.0)*x14949)));
evalcond[3]=((((-1.0)*r20*x14947*x14951))+x14945+x14948+((r22*x14955))+((r21*x14933*x14941))+((r21*x14943))+((r20*x14944)));
evalcond[4]=((((-1.0)*sj3*x14942*x14951))+x14937+((r20*x14933*x14943))+(((-1.0)*x14940))+(((-1.0)*r22*sj3*x14952))+((r21*x14947))+((r20*x14941)));
evalcond[5]=((((-1.0)*r01*x14944*x14951))+(((-1.0)*r02*sj3*x14952))+((cj0*x14948))+((cj0*x14945))+((r00*x14941))+((cj3*x14938))+((x14939*x14954)));
evalcond[6]=(((cj0*x14940))+((r00*x14944))+(((-1.0)*x14937*x14949))+((r02*x14955))+((sj3*x14938))+(((-1.0)*cj3*x14939*x14951))+((r01*x14933*x14941)));
evalcond[7]=(((sj1*x14935))+((r10*x14941))+(((-1.0)*r12*sj3*x14952))+((sj0*x14948))+(((-1.0)*sj3*x14934*x14951))+((x14936*x14954))+((r11*x14947)));
evalcond[8]=((((-1.0)*sj0*x14937))+((r12*x14955))+(((-1.0)*cj3*x14936*x14951))+((r10*x14944))+((x14934*x14953))+((r11*x14943))+((cj1*x14935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14956=cj5*cj5;
IkReal x14957=r21*r21;
IkReal x14958=r20*r20;
IkReal x14959=(r20*r21);
IkReal x14960=((1.0)*cj3);
IkReal x14961=((1.0)*cj5);
IkReal x14962=(cj1*sj2);
IkReal x14963=(cj5*sj5);
IkReal x14964=(sj3*sj5);
IkReal x14965=(cj2*sj1);
IkReal x14966=(r21*sj5);
CheckValue<IkReal> x14967=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x14959*x14963))+((cj3*x14956*x14957))+(((-1.0)*x14960*(r22*r22)))+(((-1.0)*x14956*x14958*x14960))+(((-1.0)*x14957*x14960)))),-1);
if(!x14967.valid){
continue;
}
CheckValue<IkReal> x14968 = IKatan2WithCheck(IkReal((((r22*x14962))+((r22*x14965))+((cj5*r21*r22*sj3))+((r20*r22*x14964)))),IkReal(((((-1.0)*r20*x14961*x14965))+(((-1.0)*r20*x14961*x14962))+(((-2.0)*sj3*x14956*x14959))+((sj3*x14957*x14963))+((sj3*x14959))+((x14962*x14966))+((x14965*x14966))+(((-1.0)*x14958*x14961*x14964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14967.value)))+(x14968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14969=IKsin(j4);
IkReal x14970=IKcos(j4);
IkReal x14971=(cj3*r21);
IkReal x14972=(r21*sj5);
IkReal x14973=(r20*sj5);
IkReal x14974=(cj5*r20);
IkReal x14975=((1.0)*x14970);
IkReal x14976=((1.0)*x14969);
evalcond[0]=((((-1.0)*r22*x14975))+((x14969*x14972))+(((-1.0)*x14974*x14976)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x14974*x14975))+((cj3*r22*x14969))+((sj3*x14973))+((sj5*x14970*x14971)));
evalcond[2]=(((sj3*x14970*x14974))+(((-1.0)*r22*sj3*x14976))+(((-1.0)*sj3*x14972*x14975))+((cj3*x14973))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x14971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14977=(cj5*sj4);
IkReal x14978=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x14978))+((r00*x14977))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x14978))+(((-1.0)*r10*x14977))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14978))+((r00*x14977))+((cj4*r02))))+IKsqr((((r11*x14978))+(((-1.0)*r10*x14977))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x14978))+((r00*x14977))+((cj4*r02))), (((r11*x14978))+(((-1.0)*r10*x14977))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14979=IKsin(j0);
IkReal x14980=IKcos(j0);
IkReal x14981=(r02*sj4);
IkReal x14982=((1.0)*sj3);
IkReal x14983=(r12*sj4);
IkReal x14984=(cj3*cj4);
IkReal x14985=((1.0)*cj5);
IkReal x14986=(r11*sj5);
IkReal x14987=(cj5*r01);
IkReal x14988=(r01*sj5);
IkReal x14989=(r00*sj5);
IkReal x14990=((0.39225)*cj2);
IkReal x14991=(cj5*r11);
IkReal x14992=((1.0)*sj2);
IkReal x14993=(r10*sj5);
IkReal x14994=((1.0)*cj4);
IkReal x14995=((0.39225)*sj1*sj2);
IkReal x14996=(cj1*x14979);
IkReal x14997=(cj4*cj5*sj3);
IkReal x14998=(cj1*x14980);
IkReal x14999=(sj1*x14980);
IkReal x15000=(sj1*x14979);
evalcond[0]=((((-1.0)*r00*sj4*x14985))+x14979+((sj4*x14988))+(((-1.0)*r02*x14994)));
evalcond[1]=((((-1.0)*r10*sj4*x14985))+(((-1.0)*r12*x14994))+((sj4*x14986))+(((-1.0)*x14980)));
evalcond[2]=((((-0.425)*x14998))+(((-1.0)*px))+(((-0.09465)*x14987))+(((-0.09465)*x14989))+(((-1.0)*x14990*x14998))+((x14980*x14995))+(((0.10915)*x14979)));
evalcond[3]=((((-0.425)*x14996))+((x14979*x14995))+(((-0.10915)*x14980))+(((-1.0)*py))+(((-1.0)*x14990*x14996))+(((-0.09465)*x14991))+(((-0.09465)*x14993)));
evalcond[4]=((((-1.0)*x14981*x14982))+((sj2*x14998))+((cj2*x14999))+((cj3*x14989))+((cj3*x14987))+((r00*x14997))+(((-1.0)*cj4*x14982*x14988)));
evalcond[5]=(((x14984*x14988))+(((-1.0)*r00*x14984*x14985))+((cj2*x14998))+((cj3*x14981))+(((-1.0)*x14992*x14999))+((sj3*x14987))+((sj3*x14989)));
evalcond[6]=(((sj2*x14996))+((cj3*x14991))+((cj3*x14993))+((r10*x14997))+((cj2*x15000))+(((-1.0)*cj4*x14982*x14986))+(((-1.0)*x14982*x14983)));
evalcond[7]=((((-1.0)*x14992*x15000))+((x14984*x14986))+((sj3*x14993))+((sj3*x14991))+(((-1.0)*r10*x14984*x14985))+((cj2*x14996))+((cj3*x14983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15001=cj5*cj5;
IkReal x15002=r21*r21;
IkReal x15003=r20*r20;
IkReal x15004=(r20*r21);
IkReal x15005=(sj1*sj2);
IkReal x15006=(r21*sj5);
IkReal x15007=(cj1*cj2);
IkReal x15008=(cj5*r20);
IkReal x15009=(cj5*sj5);
IkReal x15010=(cj3*r22);
IkReal x15011=(sj3*x15002);
CheckValue<IkReal> x15012=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15001*x15011))+(((-2.0)*sj3*x15004*x15009))+x15011+((sj3*x15001*x15003)))),-1);
if(!x15012.valid){
continue;
}
CheckValue<IkReal> x15013 = IKatan2WithCheck(IkReal((((cj5*r21*x15010))+(((-1.0)*r22*x15007))+((r20*sj5*x15010))+((r22*x15005)))),IkReal((((cj3*x15002*x15009))+(((-1.0)*cj3*x15003*x15009))+(((-1.0)*x15005*x15008))+((x15007*x15008))+((cj3*x15004))+((x15005*x15006))+(((-2.0)*cj3*x15001*x15004))+(((-1.0)*x15006*x15007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15012.value)))+(x15013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15014=IKsin(j4);
IkReal x15015=IKcos(j4);
IkReal x15016=(cj3*r21);
IkReal x15017=(r21*sj5);
IkReal x15018=(r20*sj5);
IkReal x15019=(cj5*r20);
IkReal x15020=((1.0)*x15015);
IkReal x15021=((1.0)*x15014);
evalcond[0]=((((-1.0)*x15019*x15021))+(((-1.0)*r22*x15020))+((x15014*x15017)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x15014))+((cj5*r21*sj3))+((cj1*sj2))+(((-1.0)*cj3*x15019*x15020))+((sj3*x15018))+((sj5*x15015*x15016)));
evalcond[2]=(((sj3*x15015*x15019))+((cj3*x15018))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15017*x15020))+(((-1.0)*r22*sj3*x15021))+((cj5*x15016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15022=(cj5*sj4);
IkReal x15023=(sj4*sj5);
if( IKabs((((r00*x15022))+(((-1.0)*r01*x15023))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x15022))+((r11*x15023))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15022))+(((-1.0)*r01*x15023))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x15022))+((r11*x15023))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x15022))+(((-1.0)*r01*x15023))+((cj4*r02))), ((((-1.0)*r10*x15022))+((r11*x15023))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15024=IKsin(j0);
IkReal x15025=IKcos(j0);
IkReal x15026=(r02*sj4);
IkReal x15027=((1.0)*sj3);
IkReal x15028=(r12*sj4);
IkReal x15029=(cj3*cj4);
IkReal x15030=((1.0)*cj5);
IkReal x15031=(r11*sj5);
IkReal x15032=(cj5*r01);
IkReal x15033=(r01*sj5);
IkReal x15034=(r00*sj5);
IkReal x15035=((0.39225)*cj2);
IkReal x15036=(cj5*r11);
IkReal x15037=((1.0)*sj2);
IkReal x15038=(r10*sj5);
IkReal x15039=((1.0)*cj4);
IkReal x15040=((0.39225)*sj1*sj2);
IkReal x15041=(cj1*x15024);
IkReal x15042=(cj4*cj5*sj3);
IkReal x15043=(cj1*x15025);
IkReal x15044=(sj1*x15025);
IkReal x15045=(sj1*x15024);
evalcond[0]=((((-1.0)*r00*sj4*x15030))+(((-1.0)*r02*x15039))+x15024+((sj4*x15033)));
evalcond[1]=((((-1.0)*x15025))+(((-1.0)*r12*x15039))+((sj4*x15031))+(((-1.0)*r10*sj4*x15030)));
evalcond[2]=((((-1.0)*x15035*x15043))+(((0.10915)*x15024))+(((-1.0)*px))+((x15025*x15040))+(((-0.09465)*x15032))+(((-0.09465)*x15034))+(((-0.425)*x15043)));
evalcond[3]=((((-0.10915)*x15025))+(((-1.0)*x15035*x15041))+((x15024*x15040))+(((-1.0)*py))+(((-0.09465)*x15038))+(((-0.09465)*x15036))+(((-0.425)*x15041)));
evalcond[4]=((((-1.0)*cj4*x15027*x15033))+((cj2*x15044))+(((-1.0)*x15026*x15027))+((r00*x15042))+((sj2*x15043))+((cj3*x15032))+((cj3*x15034)));
evalcond[5]=(((sj3*x15034))+((sj3*x15032))+((cj2*x15043))+(((-1.0)*x15037*x15044))+(((-1.0)*r00*x15029*x15030))+((cj3*x15026))+((x15029*x15033)));
evalcond[6]=((((-1.0)*cj4*x15027*x15031))+((cj2*x15045))+(((-1.0)*x15027*x15028))+((sj2*x15041))+((cj3*x15038))+((cj3*x15036))+((r10*x15042)));
evalcond[7]=((((-1.0)*r10*x15029*x15030))+((sj3*x15038))+((sj3*x15036))+((cj2*x15041))+(((-1.0)*x15037*x15045))+((cj3*x15028))+((x15029*x15031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "19dd5a5d30472576a89b4fe3056d04f4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
